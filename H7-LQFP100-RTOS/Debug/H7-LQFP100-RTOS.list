
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b320  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801b5c0  0801b5c0  0002b5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ba58  0801ba58  0002ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ba60  0801ba60  0002ba60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ba64  0801ba64  0002ba64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000013c  24000000  0801ba68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000068a8  24000140  0801bba4  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240069e8  0801bba4  000369e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000412d3  00000000  00000000  0003016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007dd4  00000000  00000000  0007143d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bc8  00000000  00000000  00079218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002880  00000000  00000000  0007bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046855  00000000  00000000  0007e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000434b8  00000000  00000000  000c4eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196bc2  00000000  00000000  0010836d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029ef2f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd2c  00000000  00000000  0029ef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801b5a8 	.word	0x0801b5a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801b5a8 	.word	0x0801b5a8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f006 f8ad 	bl	80067c8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa8a 	bl	8003b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f007 f9c8 	bl	8007a18 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa7d 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 fb0b 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 fa64 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 fafd 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 fa56 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 faef 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 fa48 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 fae1 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 fa3a 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 fad2 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 fa2b 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 fac3 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 fa1c 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 fab4 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 fa0d 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 faa5 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f9fe 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 fa96 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f9ef 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 fa87 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f9e0 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 fa78 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f9d1 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 ff95 	bl	80067c8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f972 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 fa00 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f959 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 f9f2 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f94b 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 f9e4 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f93d 	bl	8003b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 f9d6 	bl	8006cd0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f92f 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a ff00 	bl	800b800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fef4 	bl	800b800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fee8 	bl	800b800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 fd93 	bl	80085a0 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f884 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 fc4e 	bl	8006380 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 fc48 	bl	8006380 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 fd33 	bl	80085a0 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f003 f824 	bl	8003b8c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f01a f805 	bl	801ab9c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f007 f8fb 	bl	8007d94 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fff2 	bl	8003b8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 fb16 	bl	80081f4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ffdd 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a fdd3 	bl	800b800 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 fc7e 	bl	80085a0 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 ff6f 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f007 f840 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f007 f857 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f007 f817 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f007 f82e 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f007 f80f 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f007 f826 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f007 f807 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f007 f81e 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 ffff 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f007 f816 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fff7 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f007 f80e 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 ffef 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f007 f806 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 ffe7 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fffe 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 ffdf 	bl	8007d44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fff6 	bl	8007d78 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 fee6 	bl	801ab9c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00a fb56 	bl	800b51c <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00a fafb 	bl	800b51c <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00a f948 	bl	800b24c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f00a f89c 	bl	800b24c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a f9a8 	bl	800b51c <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f945 	bl	800b51c <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 ff92 	bl	800b24c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f00a f870 	bl	800b51c <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fe7b 	bl	800b24c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 ff88 	bl	800b51c <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f019 f9d2 	bl	801ab9c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fe63 	bl	800b51c <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 fcb1 	bl	800b24c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 fdc5 	bl	800b51c <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f019 f86d 	bl	801ab9c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f019 f864 	bl	801ab9c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 fb7d 	bl	800b24c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 fb6a 	bl	800b24c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 ffaf 	bl	801ab9c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 ffa8 	bl	801ab9c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 fac3 	bl	800b24c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 fadb 	bl	800b370 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 fb83 	bl	800b51c <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f009 f9cf 	bl	800b24c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <__NVIC_SystemReset>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001f34:	f3bf 8f4f 	dsb	sy
}
 8001f38:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f42:	4904      	ldr	r1, [pc, #16]	; (8001f54 <__NVIC_SystemReset+0x24>)
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__NVIC_SystemReset+0x28>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f4a:	f3bf 8f4f 	dsb	sy
}
 8001f4e:	bf00      	nop
    __NOP();
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <__NVIC_SystemReset+0x20>
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0004 	.word	0x05fa0004

08001f5c <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	463b      	mov	r3, r7
 8001f64:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <handle_error+0x70>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f015 fc48 	bl	8017804 <osEventFlagsSet>
	while (!IDLING) {};
 8001f74:	bf00      	nop
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <handle_error+0x74>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0fa      	beq.n	8001f76 <handle_error+0x1a>
	increment_error_counter(error);
 8001f80:	463b      	mov	r3, r7
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f855 	bl	8002034 <increment_error_counter>
	set_previous_error(error);
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f90:	f000 f8b6 	bl	8002100 <set_previous_error>
	send_current_error_packet(error);
 8001f94:	463b      	mov	r3, r7
 8001f96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9a:	f000 fa61 	bl	8002460 <send_current_error_packet>
	send_junk_packet();
 8001f9e:	f000 fa9b 	bl	80024d8 <send_junk_packet>

	switch (error.category) {
 8001fa2:	783b      	ldrb	r3, [r7, #0]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d008      	beq.n	8001fba <handle_error+0x5e>
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	dc08      	bgt.n	8001fbe <handle_error+0x62>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <handle_error+0x5a>
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d006      	beq.n	8001fc2 <handle_error+0x66>
	case EC_peripheral:
		NVIC_SystemReset();
		break;
	default:
		// Should not be possible to get here
		break;
 8001fb4:	e003      	b.n	8001fbe <handle_error+0x62>
		NVIC_SystemReset();
 8001fb6:	f7ff ffbb 	bl	8001f30 <__NVIC_SystemReset>
		NVIC_SystemReset();
 8001fba:	f7ff ffb9 	bl	8001f30 <__NVIC_SystemReset>
		break;
 8001fbe:	bf00      	nop
 8001fc0:	e000      	b.n	8001fc4 <handle_error+0x68>
		break;
 8001fc2:	bf00      	nop
	}
#endif
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24001a98 	.word	0x24001a98
 8001fd0:	240000c0 	.word	0x240000c0

08001fd4 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fda:	f009 f9c9 	bl	800b370 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001fde:	f7fe fedb 	bl	8000d98 <EE_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <error_counter_init+0x18>
		Error_Handler();
 8001fe8:	f001 fdd0 	bl	8003b8c <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e013      	b.n	800201a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <error_counter_init+0x58>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	490c      	ldr	r1, [pc, #48]	; (8002030 <error_counter_init+0x5c>)
 8002000:	440b      	add	r3, r1
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f7ff fb7f 	bl	8001708 <EE_ReadVariable>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <error_counter_init+0x40>
			Error_Handler();
 8002010:	f001 fdbc 	bl	8003b8c <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b1a      	cmp	r3, #26
 800201e:	dde8      	ble.n	8001ff2 <error_counter_init+0x1e>
		}
	}
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	24000000 	.word	0x24000000
 8002030:	240003a4 	.word	0x240003a4

08002034 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	463b      	mov	r3, r7
 800203c:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 8002040:	783b      	ldrb	r3, [r7, #0]
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <increment_error_counter+0x3c>)
 8002044:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002048:	3201      	adds	r2, #1
 800204a:	b291      	uxth	r1, r2
 800204c:	4a08      	ldr	r2, [pc, #32]	; (8002070 <increment_error_counter+0x3c>)
 800204e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 8002052:	787b      	ldrb	r3, [r7, #1]
 8002054:	4a06      	ldr	r2, [pc, #24]	; (8002070 <increment_error_counter+0x3c>)
 8002056:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800205a:	3201      	adds	r2, #1
 800205c:	b291      	uxth	r1, r2
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <increment_error_counter+0x3c>)
 8002060:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8002064:	f000 f806 	bl	8002074 <update_error_counter>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240003a4 	.word	0x240003a4

08002074 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	e013      	b.n	80020a8 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8002080:	4a0d      	ldr	r2, [pc, #52]	; (80020b8 <update_error_counter+0x44>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <update_error_counter+0x48>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7ff fb80 	bl	8001798 <EE_WriteVariable>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <update_error_counter+0x2e>
			Error_Handler();
 800209e:	f001 fd75 	bl	8003b8c <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3301      	adds	r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b1a      	cmp	r3, #26
 80020ac:	dde8      	ble.n	8002080 <update_error_counter+0xc>
		}
	}
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	24000000 	.word	0x24000000
 80020bc:	240003a4 	.word	0x240003a4

080020c0 <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e00f      	b.n	80020ec <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <reset_error_counters+0x3c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fb5e 	bl	8001798 <EE_WriteVariable>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <reset_error_counters+0x26>
			Error_Handler();
 80020e2:	f001 fd53 	bl	8003b8c <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3301      	adds	r3, #1
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b1a      	cmp	r3, #26
 80020f0:	ddec      	ble.n	80020cc <reset_error_counters+0xc>
		}
	}
}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	24000000 	.word	0x24000000

08002100 <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	463b      	mov	r3, r7
 8002108:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <set_previous_error+0x48>)
 800210e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002110:	783a      	ldrb	r2, [r7, #0]
 8002112:	b292      	uxth	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fb3e 	bl	8001798 <EE_WriteVariable>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <set_previous_error+0x26>
		Error_Handler();
 8002122:	f001 fd33 	bl	8003b8c <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <set_previous_error+0x48>)
 8002128:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800212a:	787a      	ldrb	r2, [r7, #1]
 800212c:	b292      	uxth	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fb31 	bl	8001798 <EE_WriteVariable>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <set_previous_error+0x40>
		Error_Handler();
 800213c:	f001 fd26 	bl	8003b8c <Error_Handler>
	}
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000000 	.word	0x24000000

0800214c <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <get_previous_error+0x60>)
 8002156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002158:	f107 020e 	add.w	r2, r7, #14
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fad2 	bl	8001708 <EE_ReadVariable>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <get_previous_error+0x22>
		Error_Handler();
 800216a:	f001 fd0f 	bl	8003b8c <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 800216e:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <get_previous_error+0x60>)
 8002170:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fac5 	bl	8001708 <EE_ReadVariable>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <get_previous_error+0x3c>
		Error_Handler();
 8002184:	f001 fd02 	bl	8003b8c <Error_Handler>
	}

	prev_error.category = category;
 8002188:	89fb      	ldrh	r3, [r7, #14]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 800218e:	89bb      	ldrh	r3, [r7, #12]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	747b      	strb	r3, [r7, #17]

	return prev_error;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	461a      	mov	r2, r3
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	cb03      	ldmia	r3!, {r0, r1}
 800219e:	6010      	str	r0, [r2, #0]
 80021a0:	6051      	str	r1, [r2, #4]
}
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	24000000 	.word	0x24000000

080021b0 <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08e      	sub	sp, #56	; 0x38
 80021b4:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 80021b6:	23cc      	movs	r3, #204	; 0xcc
 80021b8:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 80021ba:	23cc      	movs	r3, #204	; 0xcc
 80021bc:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 80021be:	4b98      	ldr	r3, [pc, #608]	; (8002420 <send_error_counter_packet+0x270>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 80021ca:	4b95      	ldr	r3, [pc, #596]	; (8002420 <send_error_counter_packet+0x270>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 80021d2:	4b93      	ldr	r3, [pc, #588]	; (8002420 <send_error_counter_packet+0x270>)
 80021d4:	885b      	ldrh	r3, [r3, #2]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 80021de:	4b90      	ldr	r3, [pc, #576]	; (8002420 <send_error_counter_packet+0x270>)
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 80021e6:	4b8e      	ldr	r3, [pc, #568]	; (8002420 <send_error_counter_packet+0x270>)
 80021e8:	889b      	ldrh	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 80021f2:	4b8b      	ldr	r3, [pc, #556]	; (8002420 <send_error_counter_packet+0x270>)
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 80021fa:	4b89      	ldr	r3, [pc, #548]	; (8002420 <send_error_counter_packet+0x270>)
 80021fc:	88db      	ldrh	r3, [r3, #6]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 8002206:	4b86      	ldr	r3, [pc, #536]	; (8002420 <send_error_counter_packet+0x270>)
 8002208:	88db      	ldrh	r3, [r3, #6]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 800220e:	4b84      	ldr	r3, [pc, #528]	; (8002420 <send_error_counter_packet+0x270>)
 8002210:	891b      	ldrh	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <send_error_counter_packet+0x270>)
 800221c:	891b      	ldrh	r3, [r3, #8]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <send_error_counter_packet+0x270>)
 8002224:	895b      	ldrh	r3, [r3, #10]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <send_error_counter_packet+0x270>)
 8002230:	895b      	ldrh	r3, [r3, #10]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <send_error_counter_packet+0x270>)
 8002238:	899b      	ldrh	r3, [r3, #12]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 8002242:	4b77      	ldr	r3, [pc, #476]	; (8002420 <send_error_counter_packet+0x270>)
 8002244:	899b      	ldrh	r3, [r3, #12]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 800224a:	4b75      	ldr	r3, [pc, #468]	; (8002420 <send_error_counter_packet+0x270>)
 800224c:	89db      	ldrh	r3, [r3, #14]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29b      	uxth	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <send_error_counter_packet+0x270>)
 8002258:	89db      	ldrh	r3, [r3, #14]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <send_error_counter_packet+0x270>)
 8002260:	8a1b      	ldrh	r3, [r3, #16]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 800226a:	4b6d      	ldr	r3, [pc, #436]	; (8002420 <send_error_counter_packet+0x270>)
 800226c:	8a1b      	ldrh	r3, [r3, #16]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 8002272:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <send_error_counter_packet+0x270>)
 8002274:	8a5b      	ldrh	r3, [r3, #18]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 800227e:	4b68      	ldr	r3, [pc, #416]	; (8002420 <send_error_counter_packet+0x270>)
 8002280:	8a5b      	ldrh	r3, [r3, #18]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 8002286:	4b66      	ldr	r3, [pc, #408]	; (8002420 <send_error_counter_packet+0x270>)
 8002288:	8a9b      	ldrh	r3, [r3, #20]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <send_error_counter_packet+0x270>)
 8002294:	8a9b      	ldrh	r3, [r3, #20]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800229a:	4b61      	ldr	r3, [pc, #388]	; (8002420 <send_error_counter_packet+0x270>)
 800229c:	8adb      	ldrh	r3, [r3, #22]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 80022a6:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <send_error_counter_packet+0x270>)
 80022a8:	8adb      	ldrh	r3, [r3, #22]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <send_error_counter_packet+0x270>)
 80022b0:	8b1b      	ldrh	r3, [r3, #24]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 80022ba:	4b59      	ldr	r3, [pc, #356]	; (8002420 <send_error_counter_packet+0x270>)
 80022bc:	8b1b      	ldrh	r3, [r3, #24]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <send_error_counter_packet+0x270>)
 80022c4:	8b5b      	ldrh	r3, [r3, #26]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <send_error_counter_packet+0x270>)
 80022d0:	8b5b      	ldrh	r3, [r3, #26]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 80022d6:	4b52      	ldr	r3, [pc, #328]	; (8002420 <send_error_counter_packet+0x270>)
 80022d8:	8b9b      	ldrh	r3, [r3, #28]
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 80022e2:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <send_error_counter_packet+0x270>)
 80022e4:	8b9b      	ldrh	r3, [r3, #28]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 80022ea:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <send_error_counter_packet+0x270>)
 80022ec:	8bdb      	ldrh	r3, [r3, #30]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 80022f8:	4b49      	ldr	r3, [pc, #292]	; (8002420 <send_error_counter_packet+0x270>)
 80022fa:	8bdb      	ldrh	r3, [r3, #30]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <send_error_counter_packet+0x270>)
 8002304:	8c1b      	ldrh	r3, [r3, #32]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <send_error_counter_packet+0x270>)
 8002312:	8c1b      	ldrh	r3, [r3, #32]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <send_error_counter_packet+0x270>)
 800231c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	b29b      	uxth	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <send_error_counter_packet+0x270>)
 800232a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <send_error_counter_packet+0x270>)
 8002334:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b29b      	uxth	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 8002340:	4b37      	ldr	r3, [pc, #220]	; (8002420 <send_error_counter_packet+0x270>)
 8002342:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 800234a:	4b35      	ldr	r3, [pc, #212]	; (8002420 <send_error_counter_packet+0x270>)
 800234c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b29b      	uxth	r3, r3
 8002352:	b2db      	uxtb	r3, r3
 8002354:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 8002358:	4b31      	ldr	r3, [pc, #196]	; (8002420 <send_error_counter_packet+0x270>)
 800235a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <send_error_counter_packet+0x270>)
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	0a1b      	lsrs	r3, r3, #8
 8002368:	b29b      	uxth	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <send_error_counter_packet+0x270>)
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 800237a:	4b29      	ldr	r3, [pc, #164]	; (8002420 <send_error_counter_packet+0x270>)
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <send_error_counter_packet+0x270>)
 800238a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <send_error_counter_packet+0x270>)
 8002394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 80023a0:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <send_error_counter_packet+0x270>)
 80023a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <send_error_counter_packet+0x270>)
 80023ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <send_error_counter_packet+0x270>)
 80023ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <send_error_counter_packet+0x270>)
 80023c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <send_error_counter_packet+0x270>)
 80023d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <send_error_counter_packet+0x270>)
 80023dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <send_error_counter_packet+0x270>)
 80023ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <send_error_counter_packet+0x270>)
 80023f4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <send_error_counter_packet+0x270>)
 8002402:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 800240a:	4639      	mov	r1, r7
 800240c:	2364      	movs	r3, #100	; 0x64
 800240e:	2238      	movs	r2, #56	; 0x38
 8002410:	4804      	ldr	r0, [pc, #16]	; (8002424 <send_error_counter_packet+0x274>)
 8002412:	f012 fa51 	bl	80148b8 <HAL_UART_Transmit>
}
 8002416:	bf00      	nop
 8002418:	3738      	adds	r7, #56	; 0x38
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	240003a4 	.word	0x240003a4
 8002424:	24001e3c 	.word	0x24001e3c

08002428 <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 800242e:	f107 0308 	add.w	r3, r7, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fe8a 	bl	800214c <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 8002438:	23aa      	movs	r3, #170	; 0xaa
 800243a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 800243c:	23aa      	movs	r3, #170	; 0xaa
 800243e:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 8002440:	7a3b      	ldrb	r3, [r7, #8]
 8002442:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 8002444:	7a7b      	ldrb	r3, [r7, #9]
 8002446:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 8002448:	1d39      	adds	r1, r7, #4
 800244a:	2364      	movs	r3, #100	; 0x64
 800244c:	2204      	movs	r2, #4
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <send_previous_error_packet+0x34>)
 8002450:	f012 fa32 	bl	80148b8 <HAL_UART_Transmit>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	24001e3c 	.word	0x24001e3c

08002460 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	463b      	mov	r3, r7
 8002468:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail) {
 800246c:	783b      	ldrb	r3, [r7, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <send_current_error_packet+0x1e>
		error.OOB_1 = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 800247e:	23bb      	movs	r3, #187	; 0xbb
 8002480:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002482:	23bb      	movs	r3, #187	; 0xbb
 8002484:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 8002486:	783b      	ldrb	r3, [r7, #0]
 8002488:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 800248a:	787b      	ldrb	r3, [r7, #1]
 800248c:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 800249e:	88bb      	ldrh	r3, [r7, #4]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, 100);
 80024be:	f107 010c 	add.w	r1, r7, #12
 80024c2:	2364      	movs	r3, #100	; 0x64
 80024c4:	220a      	movs	r2, #10
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <send_current_error_packet+0x74>)
 80024c8:	f012 f9f6 	bl	80148b8 <HAL_UART_Transmit>
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	24001e3c 	.word	0x24001e3c

080024d8 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 80024d8:	b580      	push	{r7, lr}
 80024da:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80024de:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80024e6:	e00d      	b.n	8002504 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 80024e8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80024ec:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80024f0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024f4:	4413      	add	r3, r2
 80024f6:	22ce      	movs	r2, #206	; 0xce
 80024f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80024fa:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80024fe:	3301      	adds	r3, #1
 8002500:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8002504:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250c:	dbec      	blt.n	80024e8 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 800250e:	1d39      	adds	r1, r7, #4
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002516:	4804      	ldr	r0, [pc, #16]	; (8002528 <send_junk_packet+0x50>)
 8002518:	f012 f9ce 	bl	80148b8 <HAL_UART_Transmit>
}
 800251c:	bf00      	nop
 800251e:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	24001e3c 	.word	0x24001e3c

0800252c <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <vApplicationTickHook+0x18>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <vApplicationTickHook+0x18>)
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	24001ae0 	.word	0x24001ae0

08002548 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002564:	4a24      	ldr	r2, [pc, #144]	; (80025f8 <MX_FREERTOS_Init+0x98>)
 8002566:	2100      	movs	r1, #0
 8002568:	4824      	ldr	r0, [pc, #144]	; (80025fc <MX_FREERTOS_Init+0x9c>)
 800256a:	f014 fffd 	bl	8017568 <osThreadNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a23      	ldr	r2, [pc, #140]	; (8002600 <MX_FREERTOS_Init+0xa0>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <MX_FREERTOS_Init+0xa4>)
 8002576:	2100      	movs	r1, #0
 8002578:	4823      	ldr	r0, [pc, #140]	; (8002608 <MX_FREERTOS_Init+0xa8>)
 800257a:	f014 fff5 	bl	8017568 <osThreadNew>
 800257e:	4603      	mov	r3, r0
 8002580:	4a22      	ldr	r2, [pc, #136]	; (800260c <MX_FREERTOS_Init+0xac>)
 8002582:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002584:	4a22      	ldr	r2, [pc, #136]	; (8002610 <MX_FREERTOS_Init+0xb0>)
 8002586:	2100      	movs	r1, #0
 8002588:	4822      	ldr	r0, [pc, #136]	; (8002614 <MX_FREERTOS_Init+0xb4>)
 800258a:	f014 ffed 	bl	8017568 <osThreadNew>
 800258e:	4603      	mov	r3, r0
 8002590:	4a21      	ldr	r2, [pc, #132]	; (8002618 <MX_FREERTOS_Init+0xb8>)
 8002592:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <MX_FREERTOS_Init+0xbc>)
 8002596:	2100      	movs	r1, #0
 8002598:	4821      	ldr	r0, [pc, #132]	; (8002620 <MX_FREERTOS_Init+0xc0>)
 800259a:	f014 ffe5 	bl	8017568 <osThreadNew>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <MX_FREERTOS_Init+0xc4>)
 80025a2:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <MX_FREERTOS_Init+0xc8>)
 80025a6:	2100      	movs	r1, #0
 80025a8:	4820      	ldr	r0, [pc, #128]	; (800262c <MX_FREERTOS_Init+0xcc>)
 80025aa:	f014 ffdd 	bl	8017568 <osThreadNew>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <MX_FREERTOS_Init+0xd0>)
 80025b2:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80025b4:	4a1f      	ldr	r2, [pc, #124]	; (8002634 <MX_FREERTOS_Init+0xd4>)
 80025b6:	2100      	movs	r1, #0
 80025b8:	481f      	ldr	r0, [pc, #124]	; (8002638 <MX_FREERTOS_Init+0xd8>)
 80025ba:	f014 ffd5 	bl	8017568 <osThreadNew>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a1e      	ldr	r2, [pc, #120]	; (800263c <MX_FREERTOS_Init+0xdc>)
 80025c2:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <MX_FREERTOS_Init+0xe0>)
 80025c6:	2100      	movs	r1, #0
 80025c8:	481e      	ldr	r0, [pc, #120]	; (8002644 <MX_FREERTOS_Init+0xe4>)
 80025ca:	f014 ffcd 	bl	8017568 <osThreadNew>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a1d      	ldr	r2, [pc, #116]	; (8002648 <MX_FREERTOS_Init+0xe8>)
 80025d2:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 80025d4:	4a1d      	ldr	r2, [pc, #116]	; (800264c <MX_FREERTOS_Init+0xec>)
 80025d6:	2100      	movs	r1, #0
 80025d8:	481d      	ldr	r0, [pc, #116]	; (8002650 <MX_FREERTOS_Init+0xf0>)
 80025da:	f014 ffc5 	bl	8017568 <osThreadNew>
 80025de:	4603      	mov	r3, r0
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <MX_FREERTOS_Init+0xf4>)
 80025e2:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <MX_FREERTOS_Init+0xf8>)
 80025e6:	2100      	movs	r1, #0
 80025e8:	481c      	ldr	r0, [pc, #112]	; (800265c <MX_FREERTOS_Init+0xfc>)
 80025ea:	f014 ffbd 	bl	8017568 <osThreadNew>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a1b      	ldr	r2, [pc, #108]	; (8002660 <MX_FREERTOS_Init+0x100>)
 80025f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0801b828 	.word	0x0801b828
 80025fc:	08002665 	.word	0x08002665
 8002600:	240003dc 	.word	0x240003dc
 8002604:	0801b84c 	.word	0x0801b84c
 8002608:	0800268d 	.word	0x0800268d
 800260c:	2400063c 	.word	0x2400063c
 8002610:	0801b870 	.word	0x0801b870
 8002614:	080026b5 	.word	0x080026b5
 8002618:	2400089c 	.word	0x2400089c
 800261c:	0801b894 	.word	0x0801b894
 8002620:	080026dd 	.word	0x080026dd
 8002624:	24000afc 	.word	0x24000afc
 8002628:	0801b8b8 	.word	0x0801b8b8
 800262c:	08002755 	.word	0x08002755
 8002630:	24000d5c 	.word	0x24000d5c
 8002634:	0801b8dc 	.word	0x0801b8dc
 8002638:	080027cd 	.word	0x080027cd
 800263c:	24000fbc 	.word	0x24000fbc
 8002640:	0801b900 	.word	0x0801b900
 8002644:	080027f5 	.word	0x080027f5
 8002648:	2400121c 	.word	0x2400121c
 800264c:	0801b924 	.word	0x0801b924
 8002650:	08002845 	.word	0x08002845
 8002654:	2400147c 	.word	0x2400147c
 8002658:	0801b948 	.word	0x0801b948
 800265c:	08002945 	.word	0x08002945
 8002660:	240016dc 	.word	0x240016dc

08002664 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <PMT_init+0x24>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002674:	2200      	movs	r2, #0
 8002676:	2101      	movs	r1, #1
 8002678:	f015 f93a 	bl	80178f0 <osEventFlagsWait>

		create_pmt_packet();
 800267c:	f001 fa96 	bl	8003bac <create_pmt_packet>

		osThreadYield();
 8002680:	f015 f804 	bl	801768c <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002684:	e7f2      	b.n	800266c <PMT_init+0x8>
 8002686:	bf00      	nop
 8002688:	24001a90 	.word	0x24001a90

0800268c <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <ERPA_init+0x24>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800269c:	2200      	movs	r2, #0
 800269e:	2102      	movs	r1, #2
 80026a0:	f015 f926 	bl	80178f0 <osEventFlagsWait>

		create_erpa_packet();
 80026a4:	f001 fac8 	bl	8003c38 <create_erpa_packet>

		osThreadYield();
 80026a8:	f014 fff0 	bl	801768c <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026ac:	e7f2      	b.n	8002694 <ERPA_init+0x8>
 80026ae:	bf00      	nop
 80026b0:	24001a90 	.word	0x24001a90

080026b4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HK_init+0x24>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	f015 f912 	bl	80178f0 <osEventFlagsWait>

		create_hk_packet();
 80026cc:	f001 fb12 	bl	8003cf4 <create_hk_packet>

		osThreadYield();
 80026d0:	f014 ffdc 	bl	801768c <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026d4:	e7f2      	b.n	80026bc <HK_init+0x8>
 80026d6:	bf00      	nop
 80026d8:	24001a90 	.word	0x24001a90

080026dc <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <AUTOINIT_init+0x70>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ec:	2200      	movs	r2, #0
 80026ee:	2104      	movs	r1, #4
 80026f0:	f015 f8fe 	bl	80178f0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e012      	b.n	8002720 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80026fa:	4a15      	ldr	r2, [pc, #84]	; (8002750 <AUTOINIT_init+0x74>)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002702:	4a13      	ldr	r2, [pc, #76]	; (8002750 <AUTOINIT_init+0x74>)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	889b      	ldrh	r3, [r3, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	4619      	mov	r1, r3
 8002710:	f009 fa3e 	bl	800bb90 <HAL_GPIO_WritePin>
			osDelay(100);
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f015 f81b 	bl	8017750 <osDelay>
		for (int i = 0; i < 7; i++) {
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3301      	adds	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b06      	cmp	r3, #6
 8002724:	dde9      	ble.n	80026fa <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002726:	2308      	movs	r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	e008      	b.n	800273e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2101      	movs	r1, #1
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fada 	bl	8005cec <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	3301      	adds	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b0d      	cmp	r3, #13
 8002742:	ddf3      	ble.n	800272c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002744:	f014 ffa2 	bl	801768c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002748:	e7cc      	b.n	80026e4 <AUTOINIT_init+0x8>
 800274a:	bf00      	nop
 800274c:	24001a94 	.word	0x24001a94
 8002750:	0801b96c 	.word	0x0801b96c

08002754 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800275c:	4b19      	ldr	r3, [pc, #100]	; (80027c4 <AUTODEINIT_init+0x70>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002764:	2200      	movs	r2, #0
 8002766:	2108      	movs	r1, #8
 8002768:	f015 f8c2 	bl	80178f0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800276c:	230d      	movs	r3, #13
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e008      	b.n	8002784 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fab7 	bl	8005cec <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	3b01      	subs	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b07      	cmp	r3, #7
 8002788:	dcf3      	bgt.n	8002772 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 800278a:	2306      	movs	r3, #6
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	e012      	b.n	80027b6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002790:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <AUTODEINIT_init+0x74>)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <AUTODEINIT_init+0x74>)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	4619      	mov	r1, r3
 80027a6:	f009 f9f3 	bl	800bb90 <HAL_GPIO_WritePin>
			osDelay(100);
 80027aa:	2064      	movs	r0, #100	; 0x64
 80027ac:	f014 ffd0 	bl	8017750 <osDelay>
		for (int i = 6; i >= 0; i--) {
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	dae9      	bge.n	8002790 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 80027bc:	f014 ff66 	bl	801768c <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80027c0:	e7cc      	b.n	800275c <AUTODEINIT_init+0x8>
 80027c2:	bf00      	nop
 80027c4:	24001a94 	.word	0x24001a94
 80027c8:	0801b96c 	.word	0x0801b96c

080027cc <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <Voltage_Monitor_init+0x24>)
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027dc:	2200      	movs	r2, #0
 80027de:	2101      	movs	r1, #1
 80027e0:	f015 f886 	bl	80178f0 <osEventFlagsWait>
	  		osWaitForever);
	  set_rail_monitor();
 80027e4:	f003 fa9e 	bl	8005d24 <set_rail_monitor>
	  monitor_rails();
 80027e8:	f003 fb86 	bl	8005ef8 <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80027ec:	e7f2      	b.n	80027d4 <Voltage_Monitor_init+0x8>
 80027ee:	bf00      	nop
 80027f0:	24001a94 	.word	0x24001a94

080027f4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <STOP_init+0x44>)
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002804:	2200      	movs	r2, #0
 8002806:	2102      	movs	r1, #2
 8002808:	f015 f872 	bl	80178f0 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <STOP_init+0x44>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2102      	movs	r1, #2
 8002812:	4618      	mov	r0, r3
 8002814:	f015 f83a 	bl	801788c <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <STOP_init+0x48>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2102      	movs	r1, #2
 800281e:	4618      	mov	r0, r3
 8002820:	f014 fff0 	bl	8017804 <osEventFlagsSet>
	  while (!IDLING) {};
 8002824:	bf00      	nop
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <STOP_init+0x4c>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0fa      	beq.n	8002826 <STOP_init+0x32>

	  enter_stop();
 8002830:	f001 f98e 	bl	8003b50 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002834:	e7e2      	b.n	80027fc <STOP_init+0x8>
 8002836:	bf00      	nop
 8002838:	24001a94 	.word	0x24001a94
 800283c:	24001a98 	.word	0x24001a98
 8002840:	240000c0 	.word	0x240000c0

08002844 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <Science_init+0xd4>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002854:	2200      	movs	r2, #0
 8002856:	2101      	movs	r1, #1
 8002858:	f015 f84a 	bl	80178f0 <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 800285c:	4b2f      	ldr	r3, [pc, #188]	; (800291c <Science_init+0xd8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f014 ff33 	bl	80176cc <osThreadSuspend>
		IDLING = 0;
 8002866:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <Science_init+0xdc>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e012      	b.n	8002898 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002872:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <Science_init+0xe0>)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800287a:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <Science_init+0xe0>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	889b      	ldrh	r3, [r3, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	4619      	mov	r1, r3
 8002888:	f009 f982 	bl	800bb90 <HAL_GPIO_WritePin>
			osDelay(200);
 800288c:	20c8      	movs	r0, #200	; 0xc8
 800288e:	f014 ff5f 	bl	8017750 <osDelay>
		for (int i = 0; i < 9; i++) {
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3301      	adds	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b08      	cmp	r3, #8
 800289c:	dde9      	ble.n	8002872 <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 800289e:	2306      	movs	r3, #6
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	e008      	b.n	80028b6 <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fa1e 	bl	8005cec <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b11      	cmp	r3, #17
 80028ba:	ddf3      	ble.n	80028a4 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 80028bc:	4b17      	ldr	r3, [pc, #92]	; (800291c <Science_init+0xd8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f014 ff24 	bl	801770e <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 80028c6:	b672      	cpsid	i
}
 80028c8:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80028ca:	2300      	movs	r3, #0
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	2320      	movs	r3, #32
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <Science_init+0xe4>)
 80028d2:	2100      	movs	r1, #0
 80028d4:	4815      	ldr	r0, [pc, #84]	; (800292c <Science_init+0xe8>)
 80028d6:	f005 fad7 	bl	8007e88 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <Science_init+0xec>)
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <Science_init+0xf0>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <Science_init+0xf4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80028ec:	f001 fb44 	bl	8003f78 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <Science_init+0xf8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2104      	movs	r1, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f014 ff84 	bl	8017804 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80028fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002900:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002906:	2100      	movs	r1, #0
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <Science_init+0xfc>)
 800290a:	f010 fc4b 	bl	80131a4 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800290e:	b662      	cpsie	i
}
 8002910:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002912:	f014 febb 	bl	801768c <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002916:	e799      	b.n	800284c <Science_init+0x8>
 8002918:	24001a98 	.word	0x24001a98
 800291c:	24000fbc 	.word	0x24000fbc
 8002920:	240000c0 	.word	0x240000c0
 8002924:	0801b96c 	.word	0x0801b96c
 8002928:	2400003c 	.word	0x2400003c
 800292c:	24000314 	.word	0x24000314
 8002930:	24001adc 	.word	0x24001adc
 8002934:	24001add 	.word	0x24001add
 8002938:	24001ae0 	.word	0x24001ae0
 800293c:	24001a90 	.word	0x24001a90
 8002940:	24001da4 	.word	0x24001da4

08002944 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <Idle_init+0xb4>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002954:	2200      	movs	r2, #0
 8002956:	2102      	movs	r1, #2
 8002958:	f014 ffca 	bl	80178f0 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <Idle_init+0xb8>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800296a:	2100      	movs	r1, #0
 800296c:	4824      	ldr	r0, [pc, #144]	; (8002a00 <Idle_init+0xbc>)
 800296e:	f010 fd73 	bl	8013458 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <Idle_init+0xc0>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002978:	2100      	movs	r1, #0
 800297a:	4823      	ldr	r0, [pc, #140]	; (8002a08 <Idle_init+0xc4>)
 800297c:	f005 fb44 	bl	8008008 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <Idle_init+0xc8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f014 fea1 	bl	80176cc <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 800298a:	2311      	movs	r3, #17
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	e008      	b.n	80029a2 <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f003 f9a8 	bl	8005cec <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b01      	subs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b05      	cmp	r3, #5
 80029a6:	dcf3      	bgt.n	8002990 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80029a8:	2308      	movs	r3, #8
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e012      	b.n	80029d4 <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80029ae:	4a18      	ldr	r2, [pc, #96]	; (8002a10 <Idle_init+0xcc>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <Idle_init+0xcc>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	889b      	ldrh	r3, [r3, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	4619      	mov	r1, r3
 80029c4:	f009 f8e4 	bl	800bb90 <HAL_GPIO_WritePin>
			osDelay(200);
 80029c8:	20c8      	movs	r0, #200	; 0xc8
 80029ca:	f014 fec1 	bl	8017750 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	dae9      	bge.n	80029ae <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 80029da:	f640 50ac 	movw	r0, #3500	; 0xdac
 80029de:	f014 feb7 	bl	8017750 <osDelay>
		IDLING = 1;
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <Idle_init+0xd0>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <Idle_init+0xc8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f014 fe8e 	bl	801770e <osThreadResume>

		// Yield thread control
		osThreadYield();
 80029f2:	f014 fe4b 	bl	801768c <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80029f6:	e7a9      	b.n	800294c <Idle_init+0x8>
 80029f8:	24001a98 	.word	0x24001a98
 80029fc:	24001add 	.word	0x24001add
 8002a00:	24001da4 	.word	0x24001da4
 8002a04:	24001adc 	.word	0x24001adc
 8002a08:	24000314 	.word	0x24000314
 8002a0c:	24000fbc 	.word	0x24000fbc
 8002a10:	0801b96c 	.word	0x0801b96c
 8002a14:	240000c0 	.word	0x240000c0

08002a18 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a34:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a3e:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	4a2b      	ldr	r2, [pc, #172]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	4a23      	ldr	r2, [pc, #140]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8e:	4a1c      	ldr	r2, [pc, #112]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_GPIO_Init+0xe8>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002aac:	4815      	ldr	r0, [pc, #84]	; (8002b04 <MX_GPIO_Init+0xec>)
 8002aae:	f009 f86f 	bl	800bb90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2164      	movs	r1, #100	; 0x64
 8002ab6:	4814      	ldr	r0, [pc, #80]	; (8002b08 <MX_GPIO_Init+0xf0>)
 8002ab8:	f009 f86a 	bl	800bb90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002abc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002ac0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	480b      	ldr	r0, [pc, #44]	; (8002b04 <MX_GPIO_Init+0xec>)
 8002ad6:	f008 fe93 	bl	800b800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002ada:	2364      	movs	r3, #100	; 0x64
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4805      	ldr	r0, [pc, #20]	; (8002b08 <MX_GPIO_Init+0xf0>)
 8002af2:	f008 fe85 	bl	800b800 <HAL_GPIO_Init>

}
 8002af6:	bf00      	nop
 8002af8:	3728      	adds	r7, #40	; 0x28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	58024400 	.word	0x58024400
 8002b04:	58020800 	.word	0x58020800
 8002b08:	58020400 	.word	0x58020400

08002b0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <MX_I2C1_Init+0x7c>)
 8002b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b18:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <MX_I2C1_Init+0x80>)
 8002b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b40:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b46:	480f      	ldr	r0, [pc, #60]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b48:	f009 f83c 	bl	800bbc4 <HAL_I2C_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002b52:	f001 f81b 	bl	8003b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b56:	2100      	movs	r1, #0
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b5a:	f00b fadb 	bl	800e114 <HAL_I2CEx_ConfigAnalogFilter>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002b64:	f001 f812 	bl	8003b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <MX_I2C1_Init+0x78>)
 8002b6c:	f00b fb1d 	bl	800e1aa <HAL_I2CEx_ConfigDigitalFilter>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002b76:	f001 f809 	bl	8003b8c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f00b fb62 	bl	800e244 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	2400193c 	.word	0x2400193c
 8002b88:	40005400 	.word	0x40005400
 8002b8c:	00100517 	.word	0x00100517

08002b90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0ba      	sub	sp, #232	; 0xe8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	22c0      	movs	r2, #192	; 0xc0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f017 fff3 	bl	801ab9c <memset>
  if(i2cHandle->Instance==I2C1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_I2C_MspInit+0x1a0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	f040 80b3 	bne.w	8002d28 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bc2:	f04f 0208 	mov.w	r2, #8
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00c fc55 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002be4:	f000 ffd2 	bl	8003b8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	4b52      	ldr	r3, [pc, #328]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bee:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf8:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c0e:	2312      	movs	r3, #18
 8002c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c20:	2304      	movs	r3, #4
 8002c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4842      	ldr	r0, [pc, #264]	; (8002d38 <HAL_I2C_MspInit+0x1a8>)
 8002c2e:	f008 fde7 	bl	800b800 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c32:	4b40      	ldr	r3, [pc, #256]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c42:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <HAL_I2C_MspInit+0x1a4>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002c50:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c52:	4a3b      	ldr	r2, [pc, #236]	; (8002d40 <HAL_I2C_MspInit+0x1b0>)
 8002c54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c58:	2222      	movs	r2, #34	; 0x22
 8002c5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c88:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c90:	482a      	ldr	r0, [pc, #168]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002c92:	f005 fc85 	bl	80085a0 <HAL_DMA_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c9c:	f000 ff76 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a26      	ldr	r2, [pc, #152]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca6:	4a25      	ldr	r2, [pc, #148]	; (8002d3c <HAL_I2C_MspInit+0x1ac>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cae:	4a26      	ldr	r2, [pc, #152]	; (8002d48 <HAL_I2C_MspInit+0x1b8>)
 8002cb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cb4:	2221      	movs	r2, #33	; 0x21
 8002cb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002ce0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ce4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002cec:	4815      	ldr	r0, [pc, #84]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002cee:	f005 fc57 	bl	80085a0 <HAL_DMA_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002cf8:	f000 ff48 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a11      	ldr	r2, [pc, #68]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_I2C_MspInit+0x1b4>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2105      	movs	r1, #5
 8002d0c:	201f      	movs	r0, #31
 8002d0e:	f005 f819 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d12:	201f      	movs	r0, #31
 8002d14:	f005 f830 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2105      	movs	r1, #5
 8002d1c:	2020      	movs	r0, #32
 8002d1e:	f005 f811 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002d22:	2020      	movs	r0, #32
 8002d24:	f005 f828 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d28:	bf00      	nop
 8002d2a:	37e8      	adds	r7, #232	; 0xe8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40005400 	.word	0x40005400
 8002d34:	58024400 	.word	0x58024400
 8002d38:	58020400 	.word	0x58020400
 8002d3c:	24001990 	.word	0x24001990
 8002d40:	400200a0 	.word	0x400200a0
 8002d44:	24001a08 	.word	0x24001a08
 8002d48:	400200b8 	.word	0x400200b8

08002d4c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_IWDG1_Init+0x34>)
 8002d52:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <MX_IWDG1_Init+0x38>)
 8002d54:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MX_IWDG1_Init+0x34>)
 8002d58:	2204      	movs	r2, #4
 8002d5a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 8002d5c:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_IWDG1_Init+0x34>)
 8002d5e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002d62:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_IWDG1_Init+0x34>)
 8002d66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002d6a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <MX_IWDG1_Init+0x34>)
 8002d6e:	f00b fa8d 	bl	800e28c <HAL_IWDG_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002d78:	f000 ff08 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	24001a80 	.word	0x24001a80
 8002d84:	58004800 	.word	0x58004800

08002d88 <__NVIC_SystemReset>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d8c:	f3bf 8f4f 	dsb	sy
}
 8002d90:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <__NVIC_SystemReset+0x24>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d9a:	4904      	ldr	r1, [pc, #16]	; (8002dac <__NVIC_SystemReset+0x24>)
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_SystemReset+0x28>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002da2:	f3bf 8f4f 	dsb	sy
}
 8002da6:	bf00      	nop
    __NOP();
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <__NVIC_SystemReset+0x20>
 8002dac:	e000ed00 	.word	0xe000ed00
 8002db0:	05fa0004 	.word	0x05fa0004

08002db4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d106      	bne.n	8002dd2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f014 fd1a 	bl	8017804 <osEventFlagsSet>


	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002dd0:	e035      	b.n	8002e3e <HAL_TIM_OC_DelayElapsedCallback+0x8a>
	else if (htim == &htim2) {
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1e      	ldr	r2, [pc, #120]	; (8002e50 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d12e      	bne.n	8002e38 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		if (ERPA_ENABLED) {
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2102      	movs	r1, #2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f014 fd0a 	bl	8017804 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002df0:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d113      	bne.n	8002e22 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f014 fcff 	bl	8017804 <osEventFlagsSet>
			if (HK_ENABLED){
 8002e06:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2104      	movs	r1, #4
 8002e16:	4618      	mov	r0, r3
 8002e18:	f014 fcf4 	bl	8017804 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002e2e:	701a      	strb	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg1);
 8002e30:	480c      	ldr	r0, [pc, #48]	; (8002e64 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8002e32:	f00b fa7a 	bl	800e32a <HAL_IWDG_Refresh>
}
 8002e36:	e002      	b.n	8002e3e <HAL_TIM_OC_DelayElapsedCallback+0x8a>
		printf("Unknown Timer Interrupt\n");
 8002e38:	480b      	ldr	r0, [pc, #44]	; (8002e68 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8002e3a:	f017 ff25 	bl	801ac88 <puts>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24001da4 	.word	0x24001da4
 8002e4c:	24001a90 	.word	0x24001a90
 8002e50:	24001df0 	.word	0x24001df0
 8002e54:	24001add 	.word	0x24001add
 8002e58:	24001ae4 	.word	0x24001ae4
 8002e5c:	24001a94 	.word	0x24001a94
 8002e60:	24001adc 	.word	0x24001adc
 8002e64:	24001a80 	.word	0x24001a80
 8002e68:	0801b638 	.word	0x0801b638

08002e6c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002e74:	2201      	movs	r2, #1
 8002e76:	49f7      	ldr	r1, [pc, #988]	; (8003254 <HAL_UART_RxCpltCallback+0x3e8>)
 8002e78:	48f7      	ldr	r0, [pc, #988]	; (8003258 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e7a:	f011 fe73 	bl	8014b64 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002e7e:	4bf5      	ldr	r3, [pc, #980]	; (8003254 <HAL_UART_RxCpltCallback+0x3e8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
 8002e86:	2bef      	cmp	r3, #239	; 0xef
 8002e88:	f200 843e 	bhi.w	8003708 <HAL_UART_RxCpltCallback+0x89c>
 8002e8c:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <HAL_UART_RxCpltCallback+0x28>)
 8002e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e92:	bf00      	nop
 8002e94:	08003271 	.word	0x08003271
 8002e98:	080032a1 	.word	0x080032a1
 8002e9c:	08003311 	.word	0x08003311
 8002ea0:	0800334b 	.word	0x0800334b
 8002ea4:	08003383 	.word	0x08003383
 8002ea8:	080033bd 	.word	0x080033bd
 8002eac:	080033f9 	.word	0x080033f9
 8002eb0:	08003435 	.word	0x08003435
 8002eb4:	0800346f 	.word	0x0800346f
 8002eb8:	080034a3 	.word	0x080034a3
 8002ebc:	080034d7 	.word	0x080034d7
 8002ec0:	08003509 	.word	0x08003509
 8002ec4:	08003533 	.word	0x08003533
 8002ec8:	0800360f 	.word	0x0800360f
 8002ecc:	08003677 	.word	0x08003677
 8002ed0:	0800369f 	.word	0x0800369f
 8002ed4:	0800325d 	.word	0x0800325d
 8002ed8:	08003285 	.word	0x08003285
 8002edc:	080032f3 	.word	0x080032f3
 8002ee0:	0800332f 	.word	0x0800332f
 8002ee4:	08003367 	.word	0x08003367
 8002ee8:	0800339f 	.word	0x0800339f
 8002eec:	080033db 	.word	0x080033db
 8002ef0:	08003417 	.word	0x08003417
 8002ef4:	08003453 	.word	0x08003453
 8002ef8:	0800348b 	.word	0x0800348b
 8002efc:	080034b3 	.word	0x080034b3
 8002f00:	080034ed 	.word	0x080034ed
 8002f04:	08003519 	.word	0x08003519
 8002f08:	080035cd 	.word	0x080035cd
 8002f0c:	0800364f 	.word	0x0800364f
 8002f10:	08003709 	.word	0x08003709
 8002f14:	08003709 	.word	0x08003709
 8002f18:	08003709 	.word	0x08003709
 8002f1c:	08003709 	.word	0x08003709
 8002f20:	08003709 	.word	0x08003709
 8002f24:	08003709 	.word	0x08003709
 8002f28:	08003709 	.word	0x08003709
 8002f2c:	08003709 	.word	0x08003709
 8002f30:	08003709 	.word	0x08003709
 8002f34:	08003709 	.word	0x08003709
 8002f38:	08003709 	.word	0x08003709
 8002f3c:	08003709 	.word	0x08003709
 8002f40:	08003709 	.word	0x08003709
 8002f44:	08003709 	.word	0x08003709
 8002f48:	08003709 	.word	0x08003709
 8002f4c:	08003709 	.word	0x08003709
 8002f50:	08003709 	.word	0x08003709
 8002f54:	08003709 	.word	0x08003709
 8002f58:	08003709 	.word	0x08003709
 8002f5c:	08003709 	.word	0x08003709
 8002f60:	08003709 	.word	0x08003709
 8002f64:	08003709 	.word	0x08003709
 8002f68:	08003709 	.word	0x08003709
 8002f6c:	08003709 	.word	0x08003709
 8002f70:	08003709 	.word	0x08003709
 8002f74:	08003709 	.word	0x08003709
 8002f78:	08003709 	.word	0x08003709
 8002f7c:	08003709 	.word	0x08003709
 8002f80:	08003709 	.word	0x08003709
 8002f84:	08003709 	.word	0x08003709
 8002f88:	08003709 	.word	0x08003709
 8002f8c:	08003709 	.word	0x08003709
 8002f90:	08003709 	.word	0x08003709
 8002f94:	08003709 	.word	0x08003709
 8002f98:	08003709 	.word	0x08003709
 8002f9c:	08003709 	.word	0x08003709
 8002fa0:	08003709 	.word	0x08003709
 8002fa4:	08003709 	.word	0x08003709
 8002fa8:	08003709 	.word	0x08003709
 8002fac:	08003709 	.word	0x08003709
 8002fb0:	08003709 	.word	0x08003709
 8002fb4:	08003709 	.word	0x08003709
 8002fb8:	08003709 	.word	0x08003709
 8002fbc:	08003709 	.word	0x08003709
 8002fc0:	08003709 	.word	0x08003709
 8002fc4:	08003709 	.word	0x08003709
 8002fc8:	08003709 	.word	0x08003709
 8002fcc:	08003709 	.word	0x08003709
 8002fd0:	08003709 	.word	0x08003709
 8002fd4:	08003709 	.word	0x08003709
 8002fd8:	08003709 	.word	0x08003709
 8002fdc:	08003709 	.word	0x08003709
 8002fe0:	08003709 	.word	0x08003709
 8002fe4:	08003709 	.word	0x08003709
 8002fe8:	08003709 	.word	0x08003709
 8002fec:	08003709 	.word	0x08003709
 8002ff0:	08003709 	.word	0x08003709
 8002ff4:	08003709 	.word	0x08003709
 8002ff8:	08003709 	.word	0x08003709
 8002ffc:	08003709 	.word	0x08003709
 8003000:	08003709 	.word	0x08003709
 8003004:	08003709 	.word	0x08003709
 8003008:	08003709 	.word	0x08003709
 800300c:	08003709 	.word	0x08003709
 8003010:	08003709 	.word	0x08003709
 8003014:	08003709 	.word	0x08003709
 8003018:	08003709 	.word	0x08003709
 800301c:	08003709 	.word	0x08003709
 8003020:	08003709 	.word	0x08003709
 8003024:	08003709 	.word	0x08003709
 8003028:	08003709 	.word	0x08003709
 800302c:	08003709 	.word	0x08003709
 8003030:	08003709 	.word	0x08003709
 8003034:	08003709 	.word	0x08003709
 8003038:	08003709 	.word	0x08003709
 800303c:	08003709 	.word	0x08003709
 8003040:	08003709 	.word	0x08003709
 8003044:	08003709 	.word	0x08003709
 8003048:	08003709 	.word	0x08003709
 800304c:	08003709 	.word	0x08003709
 8003050:	08003709 	.word	0x08003709
 8003054:	08003709 	.word	0x08003709
 8003058:	08003709 	.word	0x08003709
 800305c:	08003709 	.word	0x08003709
 8003060:	08003709 	.word	0x08003709
 8003064:	08003709 	.word	0x08003709
 8003068:	08003709 	.word	0x08003709
 800306c:	08003709 	.word	0x08003709
 8003070:	08003709 	.word	0x08003709
 8003074:	08003709 	.word	0x08003709
 8003078:	08003709 	.word	0x08003709
 800307c:	08003709 	.word	0x08003709
 8003080:	08003709 	.word	0x08003709
 8003084:	08003709 	.word	0x08003709
 8003088:	08003709 	.word	0x08003709
 800308c:	08003709 	.word	0x08003709
 8003090:	08003709 	.word	0x08003709
 8003094:	08003709 	.word	0x08003709
 8003098:	08003709 	.word	0x08003709
 800309c:	08003709 	.word	0x08003709
 80030a0:	08003709 	.word	0x08003709
 80030a4:	08003709 	.word	0x08003709
 80030a8:	08003709 	.word	0x08003709
 80030ac:	08003709 	.word	0x08003709
 80030b0:	08003709 	.word	0x08003709
 80030b4:	08003709 	.word	0x08003709
 80030b8:	08003709 	.word	0x08003709
 80030bc:	08003709 	.word	0x08003709
 80030c0:	08003709 	.word	0x08003709
 80030c4:	08003709 	.word	0x08003709
 80030c8:	08003709 	.word	0x08003709
 80030cc:	08003709 	.word	0x08003709
 80030d0:	08003709 	.word	0x08003709
 80030d4:	08003709 	.word	0x08003709
 80030d8:	08003709 	.word	0x08003709
 80030dc:	08003709 	.word	0x08003709
 80030e0:	08003709 	.word	0x08003709
 80030e4:	08003709 	.word	0x08003709
 80030e8:	08003709 	.word	0x08003709
 80030ec:	08003709 	.word	0x08003709
 80030f0:	08003709 	.word	0x08003709
 80030f4:	08003709 	.word	0x08003709
 80030f8:	08003709 	.word	0x08003709
 80030fc:	08003709 	.word	0x08003709
 8003100:	08003709 	.word	0x08003709
 8003104:	08003709 	.word	0x08003709
 8003108:	08003709 	.word	0x08003709
 800310c:	08003709 	.word	0x08003709
 8003110:	08003709 	.word	0x08003709
 8003114:	08003709 	.word	0x08003709
 8003118:	08003709 	.word	0x08003709
 800311c:	08003709 	.word	0x08003709
 8003120:	08003709 	.word	0x08003709
 8003124:	08003709 	.word	0x08003709
 8003128:	08003709 	.word	0x08003709
 800312c:	08003709 	.word	0x08003709
 8003130:	08003709 	.word	0x08003709
 8003134:	08003709 	.word	0x08003709
 8003138:	08003709 	.word	0x08003709
 800313c:	08003709 	.word	0x08003709
 8003140:	08003709 	.word	0x08003709
 8003144:	08003709 	.word	0x08003709
 8003148:	08003709 	.word	0x08003709
 800314c:	08003709 	.word	0x08003709
 8003150:	080036db 	.word	0x080036db
 8003154:	08003709 	.word	0x08003709
 8003158:	08003709 	.word	0x08003709
 800315c:	08003709 	.word	0x08003709
 8003160:	08003709 	.word	0x08003709
 8003164:	08003709 	.word	0x08003709
 8003168:	08003709 	.word	0x08003709
 800316c:	08003709 	.word	0x08003709
 8003170:	08003709 	.word	0x08003709
 8003174:	08003709 	.word	0x08003709
 8003178:	08003709 	.word	0x08003709
 800317c:	08003709 	.word	0x08003709
 8003180:	08003709 	.word	0x08003709
 8003184:	08003709 	.word	0x08003709
 8003188:	08003709 	.word	0x08003709
 800318c:	08003709 	.word	0x08003709
 8003190:	080036e1 	.word	0x080036e1
 8003194:	08003709 	.word	0x08003709
 8003198:	08003709 	.word	0x08003709
 800319c:	08003709 	.word	0x08003709
 80031a0:	08003709 	.word	0x08003709
 80031a4:	08003709 	.word	0x08003709
 80031a8:	08003709 	.word	0x08003709
 80031ac:	08003709 	.word	0x08003709
 80031b0:	08003709 	.word	0x08003709
 80031b4:	08003709 	.word	0x08003709
 80031b8:	08003709 	.word	0x08003709
 80031bc:	08003709 	.word	0x08003709
 80031c0:	08003709 	.word	0x08003709
 80031c4:	08003709 	.word	0x08003709
 80031c8:	08003709 	.word	0x08003709
 80031cc:	08003709 	.word	0x08003709
 80031d0:	080036ef 	.word	0x080036ef
 80031d4:	080036c7 	.word	0x080036c7
 80031d8:	08003709 	.word	0x08003709
 80031dc:	08003709 	.word	0x08003709
 80031e0:	08003709 	.word	0x08003709
 80031e4:	08003709 	.word	0x08003709
 80031e8:	08003709 	.word	0x08003709
 80031ec:	08003709 	.word	0x08003709
 80031f0:	08003709 	.word	0x08003709
 80031f4:	08003709 	.word	0x08003709
 80031f8:	08003709 	.word	0x08003709
 80031fc:	08003709 	.word	0x08003709
 8003200:	08003709 	.word	0x08003709
 8003204:	08003709 	.word	0x08003709
 8003208:	08003709 	.word	0x08003709
 800320c:	08003709 	.word	0x08003709
 8003210:	080036fd 	.word	0x080036fd
 8003214:	080036b3 	.word	0x080036b3
 8003218:	08003709 	.word	0x08003709
 800321c:	08003709 	.word	0x08003709
 8003220:	08003709 	.word	0x08003709
 8003224:	08003709 	.word	0x08003709
 8003228:	08003709 	.word	0x08003709
 800322c:	08003709 	.word	0x08003709
 8003230:	08003709 	.word	0x08003709
 8003234:	08003709 	.word	0x08003709
 8003238:	08003709 	.word	0x08003709
 800323c:	08003709 	.word	0x08003709
 8003240:	08003709 	.word	0x08003709
 8003244:	08003709 	.word	0x08003709
 8003248:	08003709 	.word	0x08003709
 800324c:	08003709 	.word	0x08003709
 8003250:	08003703 	.word	0x08003703
 8003254:	24001a9c 	.word	0x24001a9c
 8003258:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 800325c:	48b8      	ldr	r0, [pc, #736]	; (8003540 <HAL_UART_RxCpltCallback+0x6d4>)
 800325e:	f017 fd13 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003262:	4bb8      	ldr	r3, [pc, #736]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003264:	2104      	movs	r1, #4
 8003266:	2201      	movs	r2, #1
 8003268:	4618      	mov	r0, r3
 800326a:	f008 fc91 	bl	800bb90 <HAL_GPIO_WritePin>
		break;
 800326e:	e256      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8003270:	48b5      	ldr	r0, [pc, #724]	; (8003548 <HAL_UART_RxCpltCallback+0x6dc>)
 8003272:	f017 fd09 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8003276:	4bb3      	ldr	r3, [pc, #716]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003278:	2104      	movs	r1, #4
 800327a:	2200      	movs	r2, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f008 fc87 	bl	800bb90 <HAL_GPIO_WritePin>
		break;
 8003282:	e24c      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8003284:	48b1      	ldr	r0, [pc, #708]	; (800354c <HAL_UART_RxCpltCallback+0x6e0>)
 8003286:	f017 fcff 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 800328a:	4bae      	ldr	r3, [pc, #696]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 800328c:	2120      	movs	r1, #32
 800328e:	2201      	movs	r2, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f008 fc7d 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8003296:	2101      	movs	r1, #1
 8003298:	2008      	movs	r0, #8
 800329a:	f002 fd27 	bl	8005cec <set_rail_monitor_enable>
		break;
 800329e:	e23e      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80032a0:	48ab      	ldr	r0, [pc, #684]	; (8003550 <HAL_UART_RxCpltCallback+0x6e4>)
 80032a2:	f017 fcf1 	bl	801ac88 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80032a6:	2308      	movs	r3, #8
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e00f      	b.n	80032cc <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80032ac:	4aa9      	ldr	r2, [pc, #676]	; (8003554 <HAL_UART_RxCpltCallback+0x6e8>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80032b4:	4aa7      	ldr	r2, [pc, #668]	; (8003554 <HAL_UART_RxCpltCallback+0x6e8>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	889b      	ldrh	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	f008 fc65 	bl	800bb90 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	dcec      	bgt.n	80032ac <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80032d2:	2310      	movs	r3, #16
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e008      	b.n	80032ea <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2100      	movs	r1, #0
 80032de:	4618      	mov	r0, r3
 80032e0:	f002 fd04 	bl	8005cec <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b07      	cmp	r3, #7
 80032ee:	dcf3      	bgt.n	80032d8 <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 80032f0:	e215      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80032f2:	4899      	ldr	r0, [pc, #612]	; (8003558 <HAL_UART_RxCpltCallback+0x6ec>)
 80032f4:	f017 fcc8 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80032f8:	4b98      	ldr	r3, [pc, #608]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80032fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032fe:	2201      	movs	r2, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f008 fc45 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8003306:	2101      	movs	r1, #1
 8003308:	2009      	movs	r0, #9
 800330a:	f002 fcef 	bl	8005cec <set_rail_monitor_enable>

		break;
 800330e:	e206      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003310:	4893      	ldr	r0, [pc, #588]	; (8003560 <HAL_UART_RxCpltCallback+0x6f4>)
 8003312:	f017 fcb9 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8003316:	4b91      	ldr	r3, [pc, #580]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800331c:	2200      	movs	r2, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f008 fc36 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003324:	2100      	movs	r1, #0
 8003326:	2009      	movs	r0, #9
 8003328:	f002 fce0 	bl	8005cec <set_rail_monitor_enable>
		break;
 800332c:	e1f7      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 800332e:	488d      	ldr	r0, [pc, #564]	; (8003564 <HAL_UART_RxCpltCallback+0x6f8>)
 8003330:	f017 fcaa 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003334:	4b89      	ldr	r3, [pc, #548]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003336:	2180      	movs	r1, #128	; 0x80
 8003338:	2201      	movs	r2, #1
 800333a:	4618      	mov	r0, r3
 800333c:	f008 fc28 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003340:	2101      	movs	r1, #1
 8003342:	200a      	movs	r0, #10
 8003344:	f002 fcd2 	bl	8005cec <set_rail_monitor_enable>

		break;
 8003348:	e1e9      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800334a:	4887      	ldr	r0, [pc, #540]	; (8003568 <HAL_UART_RxCpltCallback+0x6fc>)
 800334c:	f017 fc9c 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003350:	4b82      	ldr	r3, [pc, #520]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f008 fc1a 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 800335c:	2100      	movs	r1, #0
 800335e:	200a      	movs	r0, #10
 8003360:	f002 fcc4 	bl	8005cec <set_rail_monitor_enable>
		break;
 8003364:	e1db      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8003366:	4881      	ldr	r0, [pc, #516]	; (800356c <HAL_UART_RxCpltCallback+0x700>)
 8003368:	f017 fc8e 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 800336c:	4b7b      	ldr	r3, [pc, #492]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	2201      	movs	r2, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f008 fc0c 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8003378:	2101      	movs	r1, #1
 800337a:	200b      	movs	r0, #11
 800337c:	f002 fcb6 	bl	8005cec <set_rail_monitor_enable>

		break;
 8003380:	e1cd      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8003382:	487b      	ldr	r0, [pc, #492]	; (8003570 <HAL_UART_RxCpltCallback+0x704>)
 8003384:	f017 fc80 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8003388:	4b74      	ldr	r3, [pc, #464]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	2200      	movs	r2, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f008 fbfe 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8003394:	2100      	movs	r1, #0
 8003396:	200b      	movs	r0, #11
 8003398:	f002 fca8 	bl	8005cec <set_rail_monitor_enable>
		break;
 800339c:	e1bf      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800339e:	4875      	ldr	r0, [pc, #468]	; (8003574 <HAL_UART_RxCpltCallback+0x708>)
 80033a0:	f017 fc72 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80033a4:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033aa:	2201      	movs	r2, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f008 fbef 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80033b2:	2101      	movs	r1, #1
 80033b4:	200c      	movs	r0, #12
 80033b6:	f002 fc99 	bl	8005cec <set_rail_monitor_enable>

		break;
 80033ba:	e1b0      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80033bc:	486e      	ldr	r0, [pc, #440]	; (8003578 <HAL_UART_RxCpltCallback+0x70c>)
 80033be:	f017 fc63 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80033c2:	4b66      	ldr	r3, [pc, #408]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033c8:	2200      	movs	r2, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f008 fbe0 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80033d0:	2100      	movs	r1, #0
 80033d2:	200c      	movs	r0, #12
 80033d4:	f002 fc8a 	bl	8005cec <set_rail_monitor_enable>
		break;
 80033d8:	e1a1      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80033da:	4868      	ldr	r0, [pc, #416]	; (800357c <HAL_UART_RxCpltCallback+0x710>)
 80033dc:	f017 fc54 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 80033e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033e6:	2201      	movs	r2, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f008 fbd1 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80033ee:	2101      	movs	r1, #1
 80033f0:	200d      	movs	r0, #13
 80033f2:	f002 fc7b 	bl	8005cec <set_rail_monitor_enable>

		break;
 80033f6:	e192      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80033f8:	4861      	ldr	r0, [pc, #388]	; (8003580 <HAL_UART_RxCpltCallback+0x714>)
 80033fa:	f017 fc45 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 8003400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003404:	2200      	movs	r2, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f008 fbc2 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 800340c:	2100      	movs	r1, #0
 800340e:	200d      	movs	r0, #13
 8003410:	f002 fc6c 	bl	8005cec <set_rail_monitor_enable>
		break;
 8003414:	e183      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8003416:	485b      	ldr	r0, [pc, #364]	; (8003584 <HAL_UART_RxCpltCallback+0x718>)
 8003418:	f017 fc36 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 800341c:	4b4f      	ldr	r3, [pc, #316]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800341e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003422:	2201      	movs	r2, #1
 8003424:	4618      	mov	r0, r3
 8003426:	f008 fbb3 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800342a:	2101      	movs	r1, #1
 800342c:	200f      	movs	r0, #15
 800342e:	f002 fc5d 	bl	8005cec <set_rail_monitor_enable>

		break;
 8003432:	e174      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003434:	4854      	ldr	r0, [pc, #336]	; (8003588 <HAL_UART_RxCpltCallback+0x71c>)
 8003436:	f017 fc27 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <HAL_UART_RxCpltCallback+0x6f0>)
 800343c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f008 fba4 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8003448:	2100      	movs	r1, #0
 800344a:	200f      	movs	r0, #15
 800344c:	f002 fc4e 	bl	8005cec <set_rail_monitor_enable>
		break;
 8003450:	e165      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003452:	484e      	ldr	r0, [pc, #312]	; (800358c <HAL_UART_RxCpltCallback+0x720>)
 8003454:	f017 fc18 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	2201      	movs	r2, #1
 800345e:	4618      	mov	r0, r3
 8003460:	f008 fb96 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003464:	2101      	movs	r1, #1
 8003466:	2010      	movs	r0, #16
 8003468:	f002 fc40 	bl	8005cec <set_rail_monitor_enable>

		break;
 800346c:	e157      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 800346e:	4848      	ldr	r0, [pc, #288]	; (8003590 <HAL_UART_RxCpltCallback+0x724>)
 8003470:	f017 fc0a 	bl	801ac88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8003474:	4b33      	ldr	r3, [pc, #204]	; (8003544 <HAL_UART_RxCpltCallback+0x6d8>)
 8003476:	2140      	movs	r1, #64	; 0x40
 8003478:	2200      	movs	r2, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f008 fb88 	bl	800bb90 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8003480:	2100      	movs	r1, #0
 8003482:	2010      	movs	r0, #16
 8003484:	f002 fc32 	bl	8005cec <set_rail_monitor_enable>
		break;
 8003488:	e149      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 800348a:	4842      	ldr	r0, [pc, #264]	; (8003594 <HAL_UART_RxCpltCallback+0x728>)
 800348c:	f017 fbfc 	bl	801ac88 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8003490:	2300      	movs	r3, #0
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	2320      	movs	r3, #32
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <HAL_UART_RxCpltCallback+0x72c>)
 8003498:	2100      	movs	r1, #0
 800349a:	4840      	ldr	r0, [pc, #256]	; (800359c <HAL_UART_RxCpltCallback+0x730>)
 800349c:	f004 fcf4 	bl	8007e88 <HAL_DAC_Start_DMA>
		break;
 80034a0:	e13d      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80034a2:	483f      	ldr	r0, [pc, #252]	; (80035a0 <HAL_UART_RxCpltCallback+0x734>)
 80034a4:	f017 fbf0 	bl	801ac88 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80034a8:	2100      	movs	r1, #0
 80034aa:	483c      	ldr	r0, [pc, #240]	; (800359c <HAL_UART_RxCpltCallback+0x730>)
 80034ac:	f004 fdac 	bl	8008008 <HAL_DAC_Stop_DMA>
		break;
 80034b0:	e135      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80034b2:	483c      	ldr	r0, [pc, #240]	; (80035a4 <HAL_UART_RxCpltCallback+0x738>)
 80034b4:	f017 fbe8 	bl	801ac88 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f014 f9a0 	bl	8017804 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80034c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_UART_RxCpltCallback+0x740>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]

		break;
 80034d4:	e123      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80034d6:	4836      	ldr	r0, [pc, #216]	; (80035b0 <HAL_UART_RxCpltCallback+0x744>)
 80034d8:	f017 fbd6 	bl	801ac88 <puts>
		ERPA_ENABLED = 0;
 80034dc:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_UART_RxCpltCallback+0x740>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 80034e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80034ea:	e118      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80034ec:	4831      	ldr	r0, [pc, #196]	; (80035b4 <HAL_UART_RxCpltCallback+0x748>)
 80034ee:	f017 fbcb 	bl	801ac88 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80034f2:	2100      	movs	r1, #0
 80034f4:	4830      	ldr	r0, [pc, #192]	; (80035b8 <HAL_UART_RxCpltCallback+0x74c>)
 80034f6:	f00f fe55 	bl	80131a4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f014 f97f 	bl	8017804 <osEventFlagsSet>
		break;
 8003506:	e10a      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8003508:	482c      	ldr	r0, [pc, #176]	; (80035bc <HAL_UART_RxCpltCallback+0x750>)
 800350a:	f017 fbbd 	bl	801ac88 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800350e:	2100      	movs	r1, #0
 8003510:	4829      	ldr	r0, [pc, #164]	; (80035b8 <HAL_UART_RxCpltCallback+0x74c>)
 8003512:	f00f ffa1 	bl	8013458 <HAL_TIM_OC_Stop_IT>
		break;
 8003516:	e102      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8003518:	4829      	ldr	r0, [pc, #164]	; (80035c0 <HAL_UART_RxCpltCallback+0x754>)
 800351a:	f017 fbb5 	bl	801ac88 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_UART_RxCpltCallback+0x73c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2104      	movs	r1, #4
 8003524:	4618      	mov	r0, r3
 8003526:	f014 f96d 	bl	8017804 <osEventFlagsSet>
		HK_ENABLED = 1;
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_UART_RxCpltCallback+0x758>)
 800352c:	2201      	movs	r2, #1
 800352e:	701a      	strb	r2, [r3, #0]
		break;
 8003530:	e0f5      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003532:	4825      	ldr	r0, [pc, #148]	; (80035c8 <HAL_UART_RxCpltCallback+0x75c>)
 8003534:	f017 fba8 	bl	801ac88 <puts>
		HK_ENABLED = 0;
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_UART_RxCpltCallback+0x758>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
		break;
 800353e:	e0ee      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
 8003540:	0801b650 	.word	0x0801b650
 8003544:	58020400 	.word	0x58020400
 8003548:	0801b658 	.word	0x0801b658
 800354c:	0801b664 	.word	0x0801b664
 8003550:	0801b670 	.word	0x0801b670
 8003554:	0801b96c 	.word	0x0801b96c
 8003558:	0801b67c 	.word	0x0801b67c
 800355c:	58020800 	.word	0x58020800
 8003560:	0801b688 	.word	0x0801b688
 8003564:	0801b698 	.word	0x0801b698
 8003568:	0801b6a4 	.word	0x0801b6a4
 800356c:	0801b6b0 	.word	0x0801b6b0
 8003570:	0801b6bc 	.word	0x0801b6bc
 8003574:	0801b6cc 	.word	0x0801b6cc
 8003578:	0801b6d8 	.word	0x0801b6d8
 800357c:	0801b6e4 	.word	0x0801b6e4
 8003580:	0801b6f0 	.word	0x0801b6f0
 8003584:	0801b6fc 	.word	0x0801b6fc
 8003588:	0801b70c 	.word	0x0801b70c
 800358c:	0801b71c 	.word	0x0801b71c
 8003590:	0801b728 	.word	0x0801b728
 8003594:	0801b738 	.word	0x0801b738
 8003598:	2400003c 	.word	0x2400003c
 800359c:	24000314 	.word	0x24000314
 80035a0:	0801b748 	.word	0x0801b748
 80035a4:	0801b758 	.word	0x0801b758
 80035a8:	24001a90 	.word	0x24001a90
 80035ac:	24001add 	.word	0x24001add
 80035b0:	0801b760 	.word	0x0801b760
 80035b4:	0801b76c 	.word	0x0801b76c
 80035b8:	24001da4 	.word	0x24001da4
 80035bc:	0801b774 	.word	0x0801b774
 80035c0:	0801b77c 	.word	0x0801b77c
 80035c4:	24001adc 	.word	0x24001adc
 80035c8:	0801b784 	.word	0x0801b784
	}
	case 0x1D: {
		printf("Step Up\n");
 80035cc:	4856      	ldr	r0, [pc, #344]	; (8003728 <HAL_UART_RxCpltCallback+0x8bc>)
 80035ce:	f017 fb5b 	bl	801ac88 <puts>
		if (step < 14) {
 80035d2:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b0d      	cmp	r3, #13
 80035da:	f200 8099 	bhi.w	8003710 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 80035de:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3302      	adds	r3, #2
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035ea:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80035ec:	4b4f      	ldr	r3, [pc, #316]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <HAL_UART_RxCpltCallback+0x8c4>)
 80035f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	484d      	ldr	r0, [pc, #308]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003600:	f004 fda5 	bl	800814e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003604:	2100      	movs	r1, #0
 8003606:	484b      	ldr	r0, [pc, #300]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003608:	f004 fbe6 	bl	8007dd8 <HAL_DAC_Start>
		}
		break;
 800360c:	e080      	b.n	8003710 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 800360e:	484a      	ldr	r0, [pc, #296]	; (8003738 <HAL_UART_RxCpltCallback+0x8cc>)
 8003610:	f017 fb3a 	bl	801ac88 <puts>
		if (step > 1) {
 8003614:	4b45      	ldr	r3, [pc, #276]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b01      	cmp	r3, #1
 800361c:	d97a      	bls.n	8003714 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	3b02      	subs	r3, #2
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 800362a:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <HAL_UART_RxCpltCallback+0x8c0>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_UART_RxCpltCallback+0x8c4>)
 8003636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	483d      	ldr	r0, [pc, #244]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003640:	f004 fd85 	bl	800814e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003644:	2100      	movs	r1, #0
 8003646:	483b      	ldr	r0, [pc, #236]	; (8003734 <HAL_UART_RxCpltCallback+0x8c8>)
 8003648:	f004 fbc6 	bl	8007dd8 <HAL_DAC_Start>
		}
		break;
 800364c:	e062      	b.n	8003714 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 800364e:	483b      	ldr	r0, [pc, #236]	; (800373c <HAL_UART_RxCpltCallback+0x8d0>)
 8003650:	f017 fb1a 	bl	801ac88 <puts>
		if (cadence <= 50000) {
 8003654:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f24c 3250 	movw	r2, #50000	; 0xc350
 800365c:	4293      	cmp	r3, r2
 800365e:	d85b      	bhi.n	8003718 <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003660:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4a36      	ldr	r2, [pc, #216]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003668:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800366a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003674:	e050      	b.n	8003718 <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8003676:	4833      	ldr	r0, [pc, #204]	; (8003744 <HAL_UART_RxCpltCallback+0x8d8>)
 8003678:	f017 fb06 	bl	801ac88 <puts>
		if (cadence >= 6250) {
 800367c:	4b30      	ldr	r3, [pc, #192]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f641 0269 	movw	r2, #6249	; 0x1869
 8003684:	4293      	cmp	r3, r2
 8003686:	d949      	bls.n	800371c <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003690:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003692:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_UART_RxCpltCallback+0x8d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800369c:	e03e      	b.n	800371c <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 800369e:	482a      	ldr	r0, [pc, #168]	; (8003748 <HAL_UART_RxCpltCallback+0x8dc>)
 80036a0:	f017 faf2 	bl	801ac88 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f014 f8aa 	bl	8017804 <osEventFlagsSet>
		break;
 80036b0:	e035      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80036b2:	4827      	ldr	r0, [pc, #156]	; (8003750 <HAL_UART_RxCpltCallback+0x8e4>)
 80036b4:	f017 fae8 	bl	801ac88 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80036b8:	4b24      	ldr	r3, [pc, #144]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2104      	movs	r1, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f014 f8a0 	bl	8017804 <osEventFlagsSet>
		break;
 80036c4:	e02b      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80036c6:	4823      	ldr	r0, [pc, #140]	; (8003754 <HAL_UART_RxCpltCallback+0x8e8>)
 80036c8:	f017 fade 	bl	801ac88 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 80036cc:	4b1f      	ldr	r3, [pc, #124]	; (800374c <HAL_UART_RxCpltCallback+0x8e0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2108      	movs	r1, #8
 80036d2:	4618      	mov	r0, r3
 80036d4:	f014 f896 	bl	8017804 <osEventFlagsSet>
		break;
 80036d8:	e021      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 80036da:	f000 f99f 	bl	8003a1c <sync>
		break;
 80036de:	e01e      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_UART_RxCpltCallback+0x8ec>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f014 f88c 	bl	8017804 <osEventFlagsSet>
		break;
 80036ec:	e017      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <HAL_UART_RxCpltCallback+0x8ec>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2102      	movs	r1, #2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f014 f885 	bl	8017804 <osEventFlagsSet>
		break;
 80036fa:	e010      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 80036fc:	f7fe fce0 	bl	80020c0 <reset_error_counters>
		break;
 8003700:	e00d      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 8003702:	f7fe fe91 	bl	8002428 <send_previous_error_packet>
#endif
		break;
 8003706:	e00a      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 8003708:	4814      	ldr	r0, [pc, #80]	; (800375c <HAL_UART_RxCpltCallback+0x8f0>)
 800370a:	f017 fabd 	bl	801ac88 <puts>
		break;
 800370e:	e006      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800371c:	bf00      	nop
	}
	}
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0801b78c 	.word	0x0801b78c
 800372c:	24001ade 	.word	0x24001ade
 8003730:	2400003c 	.word	0x2400003c
 8003734:	24000314 	.word	0x24000314
 8003738:	0801b794 	.word	0x0801b794
 800373c:	0801b7a0 	.word	0x0801b7a0
 8003740:	240000bc 	.word	0x240000bc
 8003744:	0801b7ac 	.word	0x0801b7ac
 8003748:	0801b7b8 	.word	0x0801b7b8
 800374c:	24001a94 	.word	0x24001a94
 8003750:	0801b7c8 	.word	0x0801b7c8
 8003754:	0801b7d4 	.word	0x0801b7d4
 8003758:	24001a98 	.word	0x24001a98
 800375c:	0801b7e0 	.word	0x0801b7e0

08003760 <get_reset_cause>:

void get_reset_cause()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <get_reset_cause+0x60>)
 8003768:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800376c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d009      	beq.n	8003788 <get_reset_cause+0x28>
    {
        error.category = EC_watchdog;
 8003774:	2304      	movs	r3, #4
 8003776:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 8003778:	231a      	movs	r3, #26
 800377a:	707b      	strb	r3, [r7, #1]
        handle_error(error);
 800377c:	463b      	mov	r3, r7
 800377e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003782:	f7fe fbeb 	bl	8001f5c <handle_error>
 8003786:	e00f      	b.n	80037a8 <get_reset_cause+0x48>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003788:	4b0d      	ldr	r3, [pc, #52]	; (80037c0 <get_reset_cause+0x60>)
 800378a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800378e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <get_reset_cause+0x48>
    {
        error.category = EC_brownout;
 8003796:	2303      	movs	r3, #3
 8003798:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 800379a:	231a      	movs	r3, #26
 800379c:	707b      	strb	r3, [r7, #1]
        handle_error(error);
 800379e:	463b      	mov	r3, r7
 80037a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037a4:	f7fe fbda 	bl	8001f5c <handle_error>
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <get_reset_cause+0x60>)
 80037aa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <get_reset_cause+0x60>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58024400 	.word	0x58024400

080037c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037c8:	f002 fd72 	bl	80062b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037cc:	f000 f82a 	bl	8003824 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80037d0:	f000 f8aa 	bl	8003928 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037d4:	f7ff f920 	bl	8002a18 <MX_GPIO_Init>
  MX_DMA_Init();
 80037d8:	f7fd fa86 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80037dc:	f001 fede 	bl	800559c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80037e0:	f7ff f994 	bl	8002b0c <MX_I2C1_Init>
  MX_SPI2_Init();
 80037e4:	f000 fe68 	bl	80044b8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80037e8:	f001 fb54 	bl	8004e94 <MX_TIM2_Init>
  MX_TIM1_Init();
 80037ec:	f001 faa4 	bl	8004d38 <MX_TIM1_Init>
  MX_ADC3_Init();
 80037f0:	f7fd f81a 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80037f4:	f7fc fef6 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80037f8:	f7fd f9c2 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80037fc:	f000 fe04 	bl	8004408 <MX_SPI1_Init>
  MX_RTC_Init();
 8003800:	f000 fbd0 	bl	8003fa4 <MX_RTC_Init>
  MX_IWDG1_Init();
 8003804:	f7ff faa2 	bl	8002d4c <MX_IWDG1_Init>

  /* USER CODE BEGIN 2 */

#ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 8003808:	f7fe fbe4 	bl	8001fd4 <error_counter_init>
  	get_reset_cause();
 800380c:	f7ff ffa8 	bl	8003760 <get_reset_cause>
#endif

  system_setup();
 8003810:	f000 f8ba 	bl	8003988 <system_setup>
//  handle_error(error);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003814:	f013 fe5e 	bl	80174d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003818:	f7fe fea2 	bl	8002560 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800381c:	f013 fe7e 	bl	801751c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003820:	e7fe      	b.n	8003820 <main+0x5c>
	...

08003824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b09c      	sub	sp, #112	; 0x70
 8003828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800382a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382e:	224c      	movs	r2, #76	; 0x4c
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f017 f9b2 	bl	801ab9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003838:	1d3b      	adds	r3, r7, #4
 800383a:	2220      	movs	r2, #32
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f017 f9ac 	bl	801ab9c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003844:	2002      	movs	r0, #2
 8003846:	f00a fdbd 	bl	800e3c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <SystemClock_Config+0xfc>)
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	4a33      	ldr	r2, [pc, #204]	; (8003920 <SystemClock_Config+0xfc>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	62d3      	str	r3, [r2, #44]	; 0x2c
 800385a:	4b31      	ldr	r3, [pc, #196]	; (8003920 <SystemClock_Config+0xfc>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <SystemClock_Config+0x100>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <SystemClock_Config+0x100>)
 800386e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003872:	6193      	str	r3, [r2, #24]
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <SystemClock_Config+0x100>)
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003880:	bf00      	nop
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <SystemClock_Config+0x100>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800388e:	d1f8      	bne.n	8003882 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003890:	230b      	movs	r3, #11
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800389a:	2309      	movs	r3, #9
 800389c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800389e:	2340      	movs	r3, #64	; 0x40
 80038a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038a2:	2301      	movs	r3, #1
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a6:	2302      	movs	r3, #2
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038aa:	2302      	movs	r3, #2
 80038ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038ae:	2304      	movs	r3, #4
 80038b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80038b2:	2318      	movs	r3, #24
 80038b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80038b6:	2302      	movs	r3, #2
 80038b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038ba:	2302      	movs	r3, #2
 80038bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80038be:	2302      	movs	r3, #2
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80038c2:	2308      	movs	r3, #8
 80038c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80038c6:	2302      	movs	r3, #2
 80038c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038d2:	4618      	mov	r0, r3
 80038d4:	f00a fdb0 	bl	800e438 <HAL_RCC_OscConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80038de:	f000 f955 	bl	8003b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e2:	233f      	movs	r3, #63	; 0x3f
 80038e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e6:	2303      	movs	r3, #3
 80038e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80038ee:	2300      	movs	r3, #0
 80038f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f00b f9f0 	bl	800ecec <HAL_RCC_ClockConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003912:	f000 f93b 	bl	8003b8c <Error_Handler>
  }
}
 8003916:	bf00      	nop
 8003918:	3770      	adds	r7, #112	; 0x70
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	58000400 	.word	0x58000400
 8003924:	58024800 	.word	0x58024800

08003928 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b0b0      	sub	sp, #192	; 0xc0
 800392c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800392e:	463b      	mov	r3, r7
 8003930:	22c0      	movs	r2, #192	; 0xc0
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f017 f931 	bl	801ab9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800393a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003946:	2304      	movs	r3, #4
 8003948:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800394a:	2318      	movs	r3, #24
 800394c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800394e:	2308      	movs	r3, #8
 8003950:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003952:	2302      	movs	r3, #2
 8003954:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003956:	2302      	movs	r3, #2
 8003958:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800395e:	2320      	movs	r3, #32
 8003960:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396c:	463b      	mov	r3, r7
 800396e:	4618      	mov	r0, r3
 8003970:	f00b fd8a 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800397a:	f000 f907 	bl	8003b8c <Error_Handler>
  }
}
 800397e:	bf00      	nop
 8003980:	37c0      	adds	r7, #192	; 0xc0
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts



	packet_event_flags = osEventFlagsNew(NULL);
 800398c:	2000      	movs	r0, #0
 800398e:	f013 fefa 	bl	8017786 <osEventFlagsNew>
 8003992:	4603      	mov	r3, r0
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <system_setup+0x7c>)
 8003996:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <system_setup+0x7c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d100      	bne.n	80039a2 <system_setup+0x1a>
        while (1);
 80039a0:	e7fe      	b.n	80039a0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 80039a2:	2000      	movs	r0, #0
 80039a4:	f013 feef 	bl	8017786 <osEventFlagsNew>
 80039a8:	4603      	mov	r3, r0
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <system_setup+0x80>)
 80039ac:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 80039ae:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <system_setup+0x80>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d100      	bne.n	80039b8 <system_setup+0x30>
        while (1);
 80039b6:	e7fe      	b.n	80039b6 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f013 fee4 	bl	8017786 <osEventFlagsNew>
 80039be:	4603      	mov	r3, r0
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <system_setup+0x84>)
 80039c2:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80039c4:	4b11      	ldr	r3, [pc, #68]	; (8003a0c <system_setup+0x84>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d100      	bne.n	80039ce <system_setup+0x46>
        while (1);
 80039cc:	e7fe      	b.n	80039cc <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 80039ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80039d6:	210c      	movs	r1, #12
 80039d8:	480d      	ldr	r0, [pc, #52]	; (8003a10 <system_setup+0x88>)
 80039da:	f00f fbe3 	bl	80131a4 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80039de:	f001 fee7 	bl	80057b0 <voltage_monitor_init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d100      	bne.n	80039ea <system_setup+0x62>
		while (1);
 80039e8:	e7fe      	b.n	80039e8 <system_setup+0x60>
	}

	if (!init_adc_dma()) {
 80039ea:	f000 fb6d 	bl	80040c8 <init_adc_dma>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d100      	bne.n	80039f6 <system_setup+0x6e>
		while (1);
 80039f4:	e7fe      	b.n	80039f4 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80039f6:	2201      	movs	r2, #1
 80039f8:	4906      	ldr	r1, [pc, #24]	; (8003a14 <system_setup+0x8c>)
 80039fa:	4807      	ldr	r0, [pc, #28]	; (8003a18 <system_setup+0x90>)
 80039fc:	f011 f8b2 	bl	8014b64 <HAL_UART_Receive_IT>


}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	24001a90 	.word	0x24001a90
 8003a08:	24001a94 	.word	0x24001a94
 8003a0c:	24001a98 	.word	0x24001a98
 8003a10:	24001df0 	.word	0x24001df0
 8003a14:	24001a9c 	.word	0x24001a9c
 8003a18:	24001e3c 	.word	0x24001e3c

08003a1c <sync>:

void sync() {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
	send_ACK();
 8003a22:	f000 f821 	bl	8003a68 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8003a26:	480e      	ldr	r0, [pc, #56]	; (8003a60 <sync+0x44>)
 8003a28:	f011 f8e8 	bl	8014bfc <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003a2c:	2364      	movs	r3, #100	; 0x64
 8003a2e:	2209      	movs	r2, #9
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <sync+0x48>)
 8003a32:	480b      	ldr	r0, [pc, #44]	; (8003a60 <sync+0x44>)
 8003a34:	f010 ffce 	bl	80149d4 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <sync+0x48>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2bff      	cmp	r3, #255	; 0xff
 8003a42:	d1f3      	bne.n	8003a2c <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8003a44:	4807      	ldr	r0, [pc, #28]	; (8003a64 <sync+0x48>)
 8003a46:	f001 fce7 	bl	8005418 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4905      	ldr	r1, [pc, #20]	; (8003a64 <sync+0x48>)
 8003a4e:	4804      	ldr	r0, [pc, #16]	; (8003a60 <sync+0x44>)
 8003a50:	f011 f888 	bl	8014b64 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 8003a54:	f7fe fbac 	bl	80021b0 <send_error_counter_packet>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	24001e3c 	.word	0x24001e3c
 8003a64:	24001a9c 	.word	0x24001a9c

08003a68 <send_ACK>:

void send_ACK() {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <send_ACK+0x1c>)
 8003a6e:	22ff      	movs	r2, #255	; 0xff
 8003a70:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003a72:	2364      	movs	r3, #100	; 0x64
 8003a74:	2201      	movs	r2, #1
 8003a76:	4903      	ldr	r1, [pc, #12]	; (8003a84 <send_ACK+0x1c>)
 8003a78:	4803      	ldr	r0, [pc, #12]	; (8003a88 <send_ACK+0x20>)
 8003a7a:	f010 ff1d 	bl	80148b8 <HAL_UART_Transmit>
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	24001ae8 	.word	0x24001ae8
 8003a88:	24001e3c 	.word	0x24001e3c

08003a8c <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <get_current_step+0xc0>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04a      	beq.n	8003b38 <get_current_step+0xac>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	da48      	bge.n	8003b3c <get_current_step+0xb0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d03f      	beq.n	8003b34 <get_current_step+0xa8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003aba:	4293      	cmp	r3, r2
 8003abc:	dc3e      	bgt.n	8003b3c <get_current_step+0xb0>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d033      	beq.n	8003b30 <get_current_step+0xa4>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003ace:	da35      	bge.n	8003b3c <get_current_step+0xb0>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d028      	beq.n	8003b2c <get_current_step+0xa0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	dc2b      	bgt.n	8003b3c <get_current_step+0xb0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f240 7245 	movw	r2, #1861	; 0x745
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01c      	beq.n	8003b28 <get_current_step+0x9c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f240 7245 	movw	r2, #1861	; 0x745
 8003af4:	4293      	cmp	r3, r2
 8003af6:	dc21      	bgt.n	8003b3c <get_current_step+0xb0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d010      	beq.n	8003b24 <get_current_step+0x98>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	dc17      	bgt.n	8003b3c <get_current_step+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <get_current_step+0x90>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003b18:	d002      	beq.n	8003b20 <get_current_step+0x94>
 8003b1a:	e00f      	b.n	8003b3c <get_current_step+0xb0>
	case 0:
		return 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e00e      	b.n	8003b3e <get_current_step+0xb2>
	case 620:
		return 1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e00c      	b.n	8003b3e <get_current_step+0xb2>
	case 1241:
		return 2;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e00a      	b.n	8003b3e <get_current_step+0xb2>
	case 1861:
		return 3;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e008      	b.n	8003b3e <get_current_step+0xb2>
	case 2482:
		return 4;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	e006      	b.n	8003b3e <get_current_step+0xb2>
	case 3103:
		return 5;
 8003b30:	2305      	movs	r3, #5
 8003b32:	e004      	b.n	8003b3e <get_current_step+0xb2>
	case 3723:
		return 6;
 8003b34:	2306      	movs	r3, #6
 8003b36:	e002      	b.n	8003b3e <get_current_step+0xb2>
	case 4095:
		return 7;
 8003b38:	2307      	movs	r3, #7
 8003b3a:	e000      	b.n	8003b3e <get_current_step+0xb2>
	default:
		return -1;
 8003b3c:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007400 	.word	0x40007400

08003b50 <enter_stop>:

void enter_stop() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
	  send_ACK();
 8003b54:	f7ff ff88 	bl	8003a68 <send_ACK>

	  vTaskSuspendAll();
 8003b58:	f015 fab2 	bl	80190c0 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f00a fbf4 	bl	800e34c <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003b64:	f7ff f910 	bl	8002d88 <__NVIC_SystemReset>

08003b68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a04      	ldr	r2, [pc, #16]	; (8003b88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b7a:	f002 fbd5 	bl	8006328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40001000 	.word	0x40001000

08003b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003b92:	2302      	movs	r3, #2
 8003b94:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003b96:	231a      	movs	r3, #26
 8003b98:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003b9a:	463b      	mov	r3, r7
 8003b9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ba0:	f7fe f9dc 	bl	8001f5c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003bb2:	bf00      	nop
 8003bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb8:	481c      	ldr	r0, [pc, #112]	; (8003c2c <create_pmt_packet+0x80>)
 8003bba:	f007 ffd1 	bl	800bb60 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f7      	bne.n	8003bb4 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fa9c 	bl	8005104 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003bcc:	f107 0308 	add.w	r3, r7, #8
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 facd 	bl	8004170 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003bd6:	23ff      	movs	r3, #255	; 0xff
 8003bd8:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003bda:	23ff      	movs	r3, #255	; 0xff
 8003bdc:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <create_pmt_packet+0x84>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <create_pmt_packet+0x84>)
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003bf2:	7a3b      	ldrb	r3, [r7, #8]
 8003bf4:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003bf6:	7a7b      	ldrb	r3, [r7, #9]
 8003bf8:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003bfa:	793b      	ldrb	r3, [r7, #4]
 8003bfc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003bfe:	797b      	ldrb	r3, [r7, #5]
 8003c00:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003c0a:	f107 010c 	add.w	r1, r7, #12
 8003c0e:	2364      	movs	r3, #100	; 0x64
 8003c10:	220a      	movs	r2, #10
 8003c12:	4808      	ldr	r0, [pc, #32]	; (8003c34 <create_pmt_packet+0x88>)
 8003c14:	f010 fe50 	bl	80148b8 <HAL_UART_Transmit>

	pmt_seq++;
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <create_pmt_packet+0x84>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <create_pmt_packet+0x84>)
 8003c22:	801a      	strh	r2, [r3, #0]
}
 8003c24:	bf00      	nop
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	58020000 	.word	0x58020000
 8003c30:	24001aea 	.word	0x24001aea
 8003c34:	24001e3c 	.word	0x24001e3c

08003c38 <create_erpa_packet>:


void create_erpa_packet() {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003c3e:	bf00      	nop
 8003c40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c44:	4828      	ldr	r0, [pc, #160]	; (8003ce8 <create_erpa_packet+0xb0>)
 8003c46:	f007 ff8b 	bl	800bb60 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f7      	bne.n	8003c40 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003c50:	23ff      	movs	r3, #255	; 0xff
 8003c52:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003c54:	1d3b      	adds	r3, r7, #4
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fa54 	bl	8005104 <get_uptime>
	sweep_step = get_current_step();
 8003c5c:	f7ff ff16 	bl	8003a8c <get_current_step>
 8003c60:	4603      	mov	r3, r0
 8003c62:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003c64:	f107 030c 	add.w	r3, r7, #12
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 faa1 	bl	80041b0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fabc 	bl	80041f0 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003c78:	23ee      	movs	r3, #238	; 0xee
 8003c7a:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003c7c:	23ee      	movs	r3, #238	; 0xee
 8003c7e:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <create_erpa_packet+0xb4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <create_erpa_packet+0xb4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <create_erpa_packet+0xb4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003c9c:	7ffb      	ldrb	r3, [r7, #31]
 8003c9e:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003caa:	893b      	ldrh	r3, [r7, #8]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003cb0:	7b3b      	ldrb	r3, [r7, #12]
 8003cb2:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003cb4:	7b7b      	ldrb	r3, [r7, #13]
 8003cb6:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003cb8:	793b      	ldrb	r3, [r7, #4]
 8003cba:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003cbc:	797b      	ldrb	r3, [r7, #5]
 8003cbe:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003cc4:	79fb      	ldrb	r3, [r7, #7]
 8003cc6:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003cc8:	f107 0110 	add.w	r1, r7, #16
 8003ccc:	2364      	movs	r3, #100	; 0x64
 8003cce:	220e      	movs	r2, #14
 8003cd0:	4807      	ldr	r0, [pc, #28]	; (8003cf0 <create_erpa_packet+0xb8>)
 8003cd2:	f010 fdf1 	bl	80148b8 <HAL_UART_Transmit>

	erpa_seq++;
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <create_erpa_packet+0xb4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a03      	ldr	r2, [pc, #12]	; (8003cec <create_erpa_packet+0xb4>)
 8003cde:	6013      	str	r3, [r2, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	58020400 	.word	0x58020400
 8003cec:	24001aec 	.word	0x24001aec
 8003cf0:	24001e3c 	.word	0x24001e3c

08003cf4 <create_hk_packet>:


void create_hk_packet() {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b092      	sub	sp, #72	; 0x48
 8003cf8:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fa01 	bl	8005104 <get_uptime>
	get_unix_time(timestamp);
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 fa4c 	bl	80051a4 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003d0c:	f002 f86e 	bl	8005dec <get_rail_monitor>
 8003d10:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003d12:	23dd      	movs	r3, #221	; 0xdd
 8003d14:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003d16:	23dd      	movs	r3, #221	; 0xdd
 8003d18:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003d1a:	4b95      	ldr	r3, [pc, #596]	; (8003f70 <create_hk_packet+0x27c>)
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	0a1b      	lsrs	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003d26:	4b92      	ldr	r3, [pc, #584]	; (8003f70 <create_hk_packet+0x27c>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d30:	889b      	ldrh	r3, [r3, #4]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3c:	889b      	ldrh	r3, [r3, #4]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	3310      	adds	r3, #16
 8003d46:	889b      	ldrh	r3, [r3, #4]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d52:	3310      	adds	r3, #16
 8003d54:	889b      	ldrh	r3, [r3, #4]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5c:	3320      	adds	r3, #32
 8003d5e:	889b      	ldrh	r3, [r3, #4]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	3330      	adds	r3, #48	; 0x30
 8003d76:	889b      	ldrh	r3, [r3, #4]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	3330      	adds	r3, #48	; 0x30
 8003d84:	889b      	ldrh	r3, [r3, #4]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8c:	3340      	adds	r3, #64	; 0x40
 8003d8e:	889b      	ldrh	r3, [r3, #4]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	3340      	adds	r3, #64	; 0x40
 8003d9c:	889b      	ldrh	r3, [r3, #4]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da4:	3350      	adds	r3, #80	; 0x50
 8003da6:	889b      	ldrh	r3, [r3, #4]
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	3350      	adds	r3, #80	; 0x50
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbc:	3360      	adds	r3, #96	; 0x60
 8003dbe:	889b      	ldrh	r3, [r3, #4]
 8003dc0:	0a1b      	lsrs	r3, r3, #8
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dcc:	3360      	adds	r3, #96	; 0x60
 8003dce:	889b      	ldrh	r3, [r3, #4]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dd8:	3370      	adds	r3, #112	; 0x70
 8003dda:	889b      	ldrh	r3, [r3, #4]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de8:	3370      	adds	r3, #112	; 0x70
 8003dea:	889b      	ldrh	r3, [r3, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	3380      	adds	r3, #128	; 0x80
 8003df6:	889b      	ldrh	r3, [r3, #4]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003e02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e04:	3380      	adds	r3, #128	; 0x80
 8003e06:	889b      	ldrh	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e10:	3390      	adds	r3, #144	; 0x90
 8003e12:	889b      	ldrh	r3, [r3, #4]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e20:	3390      	adds	r3, #144	; 0x90
 8003e22:	889b      	ldrh	r3, [r3, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2c:	33a0      	adds	r3, #160	; 0xa0
 8003e2e:	889b      	ldrh	r3, [r3, #4]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3c:	33a0      	adds	r3, #160	; 0xa0
 8003e3e:	889b      	ldrh	r3, [r3, #4]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e48:	33b0      	adds	r3, #176	; 0xb0
 8003e4a:	889b      	ldrh	r3, [r3, #4]
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e58:	33b0      	adds	r3, #176	; 0xb0
 8003e5a:	889b      	ldrh	r3, [r3, #4]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e64:	33c0      	adds	r3, #192	; 0xc0
 8003e66:	889b      	ldrh	r3, [r3, #4]
 8003e68:	0a1b      	lsrs	r3, r3, #8
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e74:	33c0      	adds	r3, #192	; 0xc0
 8003e76:	889b      	ldrh	r3, [r3, #4]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e80:	33d0      	adds	r3, #208	; 0xd0
 8003e82:	889b      	ldrh	r3, [r3, #4]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e90:	33d0      	adds	r3, #208	; 0xd0
 8003e92:	889b      	ldrh	r3, [r3, #4]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e9c:	33e0      	adds	r3, #224	; 0xe0
 8003e9e:	889b      	ldrh	r3, [r3, #4]
 8003ea0:	0a1b      	lsrs	r3, r3, #8
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eac:	33e0      	adds	r3, #224	; 0xe0
 8003eae:	889b      	ldrh	r3, [r3, #4]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb8:	33f0      	adds	r3, #240	; 0xf0
 8003eba:	889b      	ldrh	r3, [r3, #4]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec8:	33f0      	adds	r3, #240	; 0xf0
 8003eca:	889b      	ldrh	r3, [r3, #4]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ed8:	889b      	ldrh	r3, [r3, #4]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003eea:	889b      	ldrh	r3, [r3, #4]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003ef8:	889b      	ldrh	r3, [r3, #4]
 8003efa:	0a1b      	lsrs	r3, r3, #8
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003f0a:	889b      	ldrh	r3, [r3, #4]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8003f12:	7a3b      	ldrb	r3, [r7, #8]
 8003f14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 8003f18:	7a7b      	ldrb	r3, [r7, #9]
 8003f1a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8003f1e:	7abb      	ldrb	r3, [r7, #10]
 8003f20:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 8003f2a:	7b3b      	ldrb	r3, [r7, #12]
 8003f2c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8003f30:	7b7b      	ldrb	r3, [r7, #13]
 8003f32:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 8003f36:	793b      	ldrb	r3, [r7, #4]
 8003f38:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8003f3c:	797b      	ldrb	r3, [r7, #5]
 8003f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8003f42:	79bb      	ldrb	r3, [r7, #6]
 8003f44:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003f4e:	f107 0110 	add.w	r1, r7, #16
 8003f52:	2364      	movs	r3, #100	; 0x64
 8003f54:	2232      	movs	r2, #50	; 0x32
 8003f56:	4807      	ldr	r0, [pc, #28]	; (8003f74 <create_hk_packet+0x280>)
 8003f58:	f010 fcae 	bl	80148b8 <HAL_UART_Transmit>

	hk_seq++;
 8003f5c:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <create_hk_packet+0x27c>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <create_hk_packet+0x27c>)
 8003f66:	801a      	strh	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3748      	adds	r7, #72	; 0x48
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	24001af0 	.word	0x24001af0
 8003f74:	24001e3c 	.word	0x24001e3c

08003f78 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <reset_packet_sequence_numbers+0x20>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <reset_packet_sequence_numbers+0x24>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <reset_packet_sequence_numbers+0x28>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	801a      	strh	r2, [r3, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	24001aea 	.word	0x24001aea
 8003f9c:	24001aec 	.word	0x24001aec
 8003fa0:	24001af0 	.word	0x24001af0

08003fa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003fb8:	2300      	movs	r3, #0
 8003fba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003fbc:	4b26      	ldr	r3, [pc, #152]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fbe:	4a27      	ldr	r2, [pc, #156]	; (800405c <MX_RTC_Init+0xb8>)
 8003fc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003fc2:	4b25      	ldr	r3, [pc, #148]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fca:	2263      	movs	r2, #99	; 0x63
 8003fcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003fce:	4b22      	ldr	r3, [pc, #136]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fd4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <MX_RTC_Init+0xb4>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003fee:	481a      	ldr	r0, [pc, #104]	; (8004058 <MX_RTC_Init+0xb4>)
 8003ff0:	f00d ff48 	bl	8011e84 <HAL_RTC_Init>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003ffa:	f7ff fdc7 	bl	8003b8c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004002:	2300      	movs	r3, #0
 8004004:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004006:	2300      	movs	r3, #0
 8004008:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	2201      	movs	r2, #1
 8004016:	4619      	mov	r1, r3
 8004018:	480f      	ldr	r0, [pc, #60]	; (8004058 <MX_RTC_Init+0xb4>)
 800401a:	f00d ffb5 	bl	8011f88 <HAL_RTC_SetTime>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004024:	f7ff fdb2 	bl	8003b8c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004028:	2301      	movs	r3, #1
 800402a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800402c:	2301      	movs	r3, #1
 800402e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004030:	2301      	movs	r3, #1
 8004032:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004034:	2300      	movs	r3, #0
 8004036:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004038:	463b      	mov	r3, r7
 800403a:	2201      	movs	r2, #1
 800403c:	4619      	mov	r1, r3
 800403e:	4806      	ldr	r0, [pc, #24]	; (8004058 <MX_RTC_Init+0xb4>)
 8004040:	f00e f89c 	bl	801217c <HAL_RTC_SetDate>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800404a:	f7ff fd9f 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	24001af4 	.word	0x24001af4
 800405c:	58004000 	.word	0x58004000

08004060 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b0b2      	sub	sp, #200	; 0xc8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	22c0      	movs	r2, #192	; 0xc0
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f016 fd93 	bl	801ab9c <memset>
  if(rtcHandle->Instance==RTC)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a10      	ldr	r2, [pc, #64]	; (80040bc <HAL_RTC_MspInit+0x5c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d118      	bne.n	80040b2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004080:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <HAL_RTC_MspInit+0x60>)
 800408e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004092:	f107 0308 	add.w	r3, r7, #8
 8004096:	4618      	mov	r0, r3
 8004098:	f00b f9f6 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80040a2:	f7ff fd73 	bl	8003b8c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <HAL_RTC_MspInit+0x64>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <HAL_RTC_MspInit+0x64>)
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80040b2:	bf00      	nop
 80040b4:	37c8      	adds	r7, #200	; 0xc8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	58004000 	.word	0x58004000
 80040c0:	00019300 	.word	0x00019300
 80040c4:	58024400 	.word	0x58024400

080040c8 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80040d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80040d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040da:	481f      	ldr	r0, [pc, #124]	; (8004158 <init_adc_dma+0x90>)
 80040dc:	f003 fc38 	bl	8007950 <HAL_ADCEx_Calibration_Start>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80040e6:	f7ff fd51 	bl	8003b8c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80040ea:	220b      	movs	r2, #11
 80040ec:	491b      	ldr	r1, [pc, #108]	; (800415c <init_adc_dma+0x94>)
 80040ee:	481a      	ldr	r0, [pc, #104]	; (8004158 <init_adc_dma+0x90>)
 80040f0:	f002 fd0c 	bl	8006b0c <HAL_ADC_Start_DMA>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80040fa:	f7ff fd47 	bl	8003b8c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80040fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004106:	4816      	ldr	r0, [pc, #88]	; (8004160 <init_adc_dma+0x98>)
 8004108:	f003 fc22 	bl	8007950 <HAL_ADCEx_Calibration_Start>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8004112:	f7ff fd3b 	bl	8003b8c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8004116:	2204      	movs	r2, #4
 8004118:	4912      	ldr	r1, [pc, #72]	; (8004164 <init_adc_dma+0x9c>)
 800411a:	4811      	ldr	r0, [pc, #68]	; (8004160 <init_adc_dma+0x98>)
 800411c:	f002 fcf6 	bl	8006b0c <HAL_ADC_Start_DMA>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004126:	f7ff fd31 	bl	8003b8c <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <init_adc_dma+0xa0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <init_adc_dma+0xa0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <init_adc_dma+0xa4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <init_adc_dma+0xa4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004148:	601a      	str	r2, [r3, #0]


	status = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	71fb      	strb	r3, [r7, #7]

	return status;
 800414e:	79fb      	ldrb	r3, [r7, #7]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2400015c 	.word	0x2400015c
 800415c:	24001b20 	.word	0x24001b20
 8004160:	240001c0 	.word	0x240001c0
 8004164:	24001b40 	.word	0x24001b40
 8004168:	24001bdc 	.word	0x24001bdc
 800416c:	24001b54 	.word	0x24001b54

08004170 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004178:	2201      	movs	r2, #1
 800417a:	490b      	ldr	r1, [pc, #44]	; (80041a8 <sample_pmt_spi+0x38>)
 800417c:	480b      	ldr	r0, [pc, #44]	; (80041ac <sample_pmt_spi+0x3c>)
 800417e:	f00e fac7 	bl	8012710 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <sample_pmt_spi+0x38>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	b29b      	uxth	r3, r3
 800418a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <sample_pmt_spi+0x38>)
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3301      	adds	r3, #1
 800419c:	7bba      	ldrb	r2, [r7, #14]
 800419e:	701a      	strb	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	24001b4c 	.word	0x24001b4c
 80041ac:	24001b54 	.word	0x24001b54

080041b0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80041b8:	2201      	movs	r2, #1
 80041ba:	490b      	ldr	r1, [pc, #44]	; (80041e8 <sample_erpa_spi+0x38>)
 80041bc:	480b      	ldr	r0, [pc, #44]	; (80041ec <sample_erpa_spi+0x3c>)
 80041be:	f00e faa7 	bl	8012710 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <sample_erpa_spi+0x38>)
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <sample_erpa_spi+0x38>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3301      	adds	r3, #1
 80041dc:	7bba      	ldrb	r2, [r7, #14]
 80041de:	701a      	strb	r2, [r3, #0]
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	24001b48 	.word	0x24001b48
 80041ec:	24001bdc 	.word	0x24001bdc

080041f0 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <sample_erpa_adc+0x20>)
 80041fa:	885b      	ldrh	r3, [r3, #2]
 80041fc:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	89fa      	ldrh	r2, [r7, #14]
 8004202:	801a      	strh	r2, [r3, #0]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	24001b20 	.word	0x24001b20

08004214 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800421c:	2390      	movs	r3, #144	; 0x90
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f8a2 	bl	8004368 <poll_i2c_sensor>
 8004224:	4603      	mov	r3, r0
 8004226:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004228:	2394      	movs	r3, #148	; 0x94
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f89c 	bl	8004368 <poll_i2c_sensor>
 8004230:	4603      	mov	r3, r0
 8004232:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004234:	2392      	movs	r3, #146	; 0x92
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f896 	bl	8004368 <poll_i2c_sensor>
 800423c:	4603      	mov	r3, r0
 800423e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004240:	2396      	movs	r3, #150	; 0x96
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f890 	bl	8004368 <poll_i2c_sensor>
 8004248:	4603      	mov	r3, r0
 800424a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	89fa      	ldrh	r2, [r7, #14]
 8004250:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3302      	adds	r3, #2
 8004256:	89ba      	ldrh	r2, [r7, #12]
 8004258:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	897a      	ldrh	r2, [r7, #10]
 8004260:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3306      	adds	r3, #6
 8004266:	893a      	ldrh	r2, [r7, #8]
 8004268:	801a      	strh	r2, [r3, #0]
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800427c:	4b25      	ldr	r3, [pc, #148]	; (8004314 <sample_hk_adc1+0xa0>)
 800427e:	8a9b      	ldrh	r3, [r3, #20]
 8004280:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <sample_hk_adc1+0xa0>)
 8004284:	8a1b      	ldrh	r3, [r3, #16]
 8004286:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004288:	4b22      	ldr	r3, [pc, #136]	; (8004314 <sample_hk_adc1+0xa0>)
 800428a:	899b      	ldrh	r3, [r3, #12]
 800428c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800428e:	4b21      	ldr	r3, [pc, #132]	; (8004314 <sample_hk_adc1+0xa0>)
 8004290:	8a5b      	ldrh	r3, [r3, #18]
 8004292:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8004294:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <sample_hk_adc1+0xa0>)
 8004296:	889b      	ldrh	r3, [r3, #4]
 8004298:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <sample_hk_adc1+0xa0>)
 800429c:	88db      	ldrh	r3, [r3, #6]
 800429e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <sample_hk_adc1+0xa0>)
 80042a2:	89db      	ldrh	r3, [r3, #14]
 80042a4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <sample_hk_adc1+0xa0>)
 80042a8:	891b      	ldrh	r3, [r3, #8]
 80042aa:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80042ac:	4b19      	ldr	r3, [pc, #100]	; (8004314 <sample_hk_adc1+0xa0>)
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <sample_hk_adc1+0xa0>)
 80042b4:	895b      	ldrh	r3, [r3, #10]
 80042b6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8bfa      	ldrh	r2, [r7, #30]
 80042bc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3302      	adds	r3, #2
 80042c2:	8bba      	ldrh	r2, [r7, #28]
 80042c4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	8b7a      	ldrh	r2, [r7, #26]
 80042cc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3306      	adds	r3, #6
 80042d2:	8b3a      	ldrh	r2, [r7, #24]
 80042d4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3308      	adds	r3, #8
 80042da:	8afa      	ldrh	r2, [r7, #22]
 80042dc:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	330a      	adds	r3, #10
 80042e2:	8aba      	ldrh	r2, [r7, #20]
 80042e4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	330c      	adds	r3, #12
 80042ea:	8a7a      	ldrh	r2, [r7, #18]
 80042ec:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	330e      	adds	r3, #14
 80042f2:	8a3a      	ldrh	r2, [r7, #16]
 80042f4:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3310      	adds	r3, #16
 80042fa:	89fa      	ldrh	r2, [r7, #14]
 80042fc:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3312      	adds	r3, #18
 8004302:	89ba      	ldrh	r2, [r7, #12]
 8004304:	801a      	strh	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	24001b20 	.word	0x24001b20

08004318 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <sample_hk_adc3+0x4c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <sample_hk_adc3+0x4c>)
 8004328:	885b      	ldrh	r3, [r3, #2]
 800432a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <sample_hk_adc3+0x4c>)
 800432e:	889b      	ldrh	r3, [r3, #4]
 8004330:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <sample_hk_adc3+0x4c>)
 8004334:	88db      	ldrh	r3, [r3, #6]
 8004336:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	89fa      	ldrh	r2, [r7, #14]
 800433c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3302      	adds	r3, #2
 8004342:	89ba      	ldrh	r2, [r7, #12]
 8004344:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	897a      	ldrh	r2, [r7, #10]
 800434c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3306      	adds	r3, #6
 8004352:	893a      	ldrh	r2, [r7, #8]
 8004354:	801a      	strh	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	24001b40 	.word	0x24001b40

08004368 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004372:	2200      	movs	r2, #0
 8004374:	4b20      	ldr	r3, [pc, #128]	; (80043f8 <poll_i2c_sensor+0x90>)
 8004376:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	b299      	uxth	r1, r3
 800437c:	2301      	movs	r3, #1
 800437e:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <poll_i2c_sensor+0x90>)
 8004380:	481e      	ldr	r0, [pc, #120]	; (80043fc <poll_i2c_sensor+0x94>)
 8004382:	f007 fcbb 	bl	800bcfc <HAL_I2C_Master_Transmit_DMA>
 8004386:	4603      	mov	r3, r0
 8004388:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8004390:	481b      	ldr	r0, [pc, #108]	; (8004400 <poll_i2c_sensor+0x98>)
 8004392:	f016 fc79 	bl	801ac88 <puts>
 8004396:	e028      	b.n	80043ea <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004398:	bf00      	nop
 800439a:	4818      	ldr	r0, [pc, #96]	; (80043fc <poll_i2c_sensor+0x94>)
 800439c:	f007 ff95 	bl	800c2ca <HAL_I2C_GetState>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d1f9      	bne.n	800439a <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	b299      	uxth	r1, r3
 80043aa:	2302      	movs	r3, #2
 80043ac:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <poll_i2c_sensor+0x90>)
 80043ae:	4813      	ldr	r0, [pc, #76]	; (80043fc <poll_i2c_sensor+0x94>)
 80043b0:	f007 fdb8 	bl	800bf24 <HAL_I2C_Master_Receive_DMA>
 80043b4:	4603      	mov	r3, r0
 80043b6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80043b8:	7b7b      	ldrb	r3, [r7, #13]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80043be:	4811      	ldr	r0, [pc, #68]	; (8004404 <poll_i2c_sensor+0x9c>)
 80043c0:	f016 fc62 	bl	801ac88 <puts>
 80043c4:	e011      	b.n	80043ea <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80043c6:	bf00      	nop
 80043c8:	480c      	ldr	r0, [pc, #48]	; (80043fc <poll_i2c_sensor+0x94>)
 80043ca:	f007 ff7e 	bl	800c2ca <HAL_I2C_GetState>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d1f9      	bne.n	80043c8 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80043d4:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <poll_i2c_sensor+0x90>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80043dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043e0:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <poll_i2c_sensor+0x90>)
 80043e2:	7852      	ldrb	r2, [r2, #1]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	10db      	asrs	r3, r3, #3
 80043e8:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80043ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	24001b50 	.word	0x24001b50
 80043fc:	2400193c 	.word	0x2400193c
 8004400:	0801b7f0 	.word	0x0801b7f0
 8004404:	0801b800 	.word	0x0801b800

08004408 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800440c:	4b28      	ldr	r3, [pc, #160]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800440e:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <MX_SPI1_Init+0xac>)
 8004410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004412:	4b27      	ldr	r3, [pc, #156]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004414:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800441a:	4b25      	ldr	r3, [pc, #148]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800441c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004420:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004424:	220f      	movs	r2, #15
 8004426:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004428:	4b21      	ldr	r3, [pc, #132]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800442a:	2200      	movs	r2, #0
 800442c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004430:	2200      	movs	r2, #0
 8004432:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004436:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800443a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800443e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004442:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800444c:	2200      	movs	r2, #0
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004452:	2200      	movs	r2, #0
 8004454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004458:	2200      	movs	r2, #0
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800445e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004462:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004464:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004466:	2200      	movs	r2, #0
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800446c:	2200      	movs	r2, #0
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004478:	2200      	movs	r2, #0
 800447a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800447e:	2200      	movs	r2, #0
 8004480:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004484:	2200      	movs	r2, #0
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004488:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800448a:	2200      	movs	r2, #0
 800448c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004490:	2200      	movs	r2, #0
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <MX_SPI1_Init+0xa8>)
 8004496:	2200      	movs	r2, #0
 8004498:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800449a:	4805      	ldr	r0, [pc, #20]	; (80044b0 <MX_SPI1_Init+0xa8>)
 800449c:	f00e f814 	bl	80124c8 <HAL_SPI_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80044a6:	f7ff fb71 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	24001b54 	.word	0x24001b54
 80044b4:	40013000 	.word	0x40013000

080044b8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80044bc:	4b28      	ldr	r3, [pc, #160]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044be:	4a29      	ldr	r2, [pc, #164]	; (8004564 <MX_SPI2_Init+0xac>)
 80044c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80044c2:	4b27      	ldr	r3, [pc, #156]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80044c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80044ca:	4b25      	ldr	r3, [pc, #148]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80044d0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80044d2:	4b23      	ldr	r3, [pc, #140]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044d4:	220f      	movs	r2, #15
 80044d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d8:	4b21      	ldr	r3, [pc, #132]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80044ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80044ec:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044ee:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80044f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044f4:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80044fa:	4b19      	ldr	r3, [pc, #100]	; (8004560 <MX_SPI2_Init+0xa8>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004502:	2200      	movs	r2, #0
 8004504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004508:	2200      	movs	r2, #0
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <MX_SPI2_Init+0xa8>)
 800450e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004512:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004514:	4b12      	ldr	r3, [pc, #72]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004516:	2200      	movs	r2, #0
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <MX_SPI2_Init+0xa8>)
 800451c:	2200      	movs	r2, #0
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004528:	2200      	movs	r2, #0
 800452a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <MX_SPI2_Init+0xa8>)
 800452e:	2200      	movs	r2, #0
 8004530:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004534:	2200      	movs	r2, #0
 8004536:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <MX_SPI2_Init+0xa8>)
 800453a:	2200      	movs	r2, #0
 800453c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <MX_SPI2_Init+0xa8>)
 8004546:	2200      	movs	r2, #0
 8004548:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800454a:	4805      	ldr	r0, [pc, #20]	; (8004560 <MX_SPI2_Init+0xa8>)
 800454c:	f00d ffbc 	bl	80124c8 <HAL_SPI_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004556:	f7ff fb19 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	24001bdc 	.word	0x24001bdc
 8004564:	40003800 	.word	0x40003800

08004568 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b0bc      	sub	sp, #240	; 0xf0
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004580:	f107 0318 	add.w	r3, r7, #24
 8004584:	22c0      	movs	r2, #192	; 0xc0
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f016 fb07 	bl	801ab9c <memset>
  if(spiHandle->Instance==SPI1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a83      	ldr	r2, [pc, #524]	; (80047a0 <HAL_SPI_MspInit+0x238>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d17c      	bne.n	8004692 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004598:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a8:	f107 0318 	add.w	r3, r7, #24
 80045ac:	4618      	mov	r0, r3
 80045ae:	f00a ff6b 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80045b8:	f7ff fae8 	bl	8003b8c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045bc:	4b79      	ldr	r3, [pc, #484]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c2:	4a78      	ldr	r2, [pc, #480]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045cc:	4b75      	ldr	r3, [pc, #468]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045da:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045e0:	4a70      	ldr	r2, [pc, #448]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045ea:	4b6e      	ldr	r3, [pc, #440]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80045f8:	2318      	movs	r3, #24
 80045fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fe:	2302      	movs	r3, #2
 8004600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004604:	2300      	movs	r3, #0
 8004606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	2300      	movs	r3, #0
 800460c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004610:	2305      	movs	r3, #5
 8004612:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800461a:	4619      	mov	r1, r3
 800461c:	4862      	ldr	r0, [pc, #392]	; (80047a8 <HAL_SPI_MspInit+0x240>)
 800461e:	f007 f8ef 	bl	800b800 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004622:	4b62      	ldr	r3, [pc, #392]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004624:	4a62      	ldr	r2, [pc, #392]	; (80047b0 <HAL_SPI_MspInit+0x248>)
 8004626:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004628:	4b60      	ldr	r3, [pc, #384]	; (80047ac <HAL_SPI_MspInit+0x244>)
 800462a:	2225      	movs	r2, #37	; 0x25
 800462c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800462e:	4b5f      	ldr	r3, [pc, #380]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004630:	2200      	movs	r2, #0
 8004632:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004634:	4b5d      	ldr	r3, [pc, #372]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004636:	2200      	movs	r2, #0
 8004638:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800463a:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <HAL_SPI_MspInit+0x244>)
 800463c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004640:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004642:	4b5a      	ldr	r3, [pc, #360]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004648:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800464a:	4b58      	ldr	r3, [pc, #352]	; (80047ac <HAL_SPI_MspInit+0x244>)
 800464c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004650:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004654:	2200      	movs	r2, #0
 8004656:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004658:	4b54      	ldr	r3, [pc, #336]	; (80047ac <HAL_SPI_MspInit+0x244>)
 800465a:	2200      	movs	r2, #0
 800465c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800465e:	4b53      	ldr	r3, [pc, #332]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004660:	2200      	movs	r2, #0
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004664:	4851      	ldr	r0, [pc, #324]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004666:	f003 ff9b 	bl	80085a0 <HAL_DMA_Init>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004670:	f7ff fa8c 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_SPI_MspInit+0x244>)
 8004678:	67da      	str	r2, [r3, #124]	; 0x7c
 800467a:	4a4c      	ldr	r2, [pc, #304]	; (80047ac <HAL_SPI_MspInit+0x244>)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004680:	2200      	movs	r2, #0
 8004682:	2105      	movs	r1, #5
 8004684:	2023      	movs	r0, #35	; 0x23
 8004686:	f003 fb5d 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800468a:	2023      	movs	r0, #35	; 0x23
 800468c:	f003 fb74 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004690:	e081      	b.n	8004796 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <HAL_SPI_MspInit+0x24c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d17c      	bne.n	8004796 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800469c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046ac:	f107 0318 	add.w	r3, r7, #24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f00a fee9 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80046bc:	f7ff fa66 	bl	8003b8c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046c0:	4b38      	ldr	r3, [pc, #224]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046c6:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046d0:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046e4:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046e6:	f043 0302 	orr.w	r3, r3, #2
 80046ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046ee:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_SPI_MspInit+0x23c>)
 80046f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80046fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004716:	2305      	movs	r3, #5
 8004718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800471c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004720:	4619      	mov	r1, r3
 8004722:	4821      	ldr	r0, [pc, #132]	; (80047a8 <HAL_SPI_MspInit+0x240>)
 8004724:	f007 f86c 	bl	800b800 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800472a:	4a24      	ldr	r2, [pc, #144]	; (80047bc <HAL_SPI_MspInit+0x254>)
 800472c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004730:	2227      	movs	r2, #39	; 0x27
 8004732:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004734:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473a:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800473c:	2200      	movs	r2, #0
 800473e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004740:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004746:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800474a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800474e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004756:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004760:	2200      	movs	r2, #0
 8004762:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004764:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004766:	2200      	movs	r2, #0
 8004768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800476a:	4813      	ldr	r0, [pc, #76]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800476c:	f003 ff18 	bl	80085a0 <HAL_DMA_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004776:	f7ff fa09 	bl	8003b8c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a0e      	ldr	r2, [pc, #56]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 800477e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <HAL_SPI_MspInit+0x250>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2105      	movs	r1, #5
 800478a:	2024      	movs	r0, #36	; 0x24
 800478c:	f003 fada 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004790:	2024      	movs	r0, #36	; 0x24
 8004792:	f003 faf1 	bl	8007d78 <HAL_NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	37f0      	adds	r7, #240	; 0xf0
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40013000 	.word	0x40013000
 80047a4:	58024400 	.word	0x58024400
 80047a8:	58020400 	.word	0x58020400
 80047ac:	24001c64 	.word	0x24001c64
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40003800 	.word	0x40003800
 80047b8:	24001cdc 	.word	0x24001cdc
 80047bc:	40020058 	.word	0x40020058

080047c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_MspInit+0x38>)
 80047c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047cc:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <HAL_MspInit+0x38>)
 80047ce:	f043 0302 	orr.w	r3, r3, #2
 80047d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_MspInit+0x38>)
 80047d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047e4:	2200      	movs	r2, #0
 80047e6:	210f      	movs	r1, #15
 80047e8:	f06f 0001 	mvn.w	r0, #1
 80047ec:	f003 faaa 	bl	8007d44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400

080047fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b090      	sub	sp, #64	; 0x40
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d827      	bhi.n	800485a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800480a:	2200      	movs	r2, #0
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	2036      	movs	r0, #54	; 0x36
 8004810:	f003 fa98 	bl	8007d44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004814:	2036      	movs	r0, #54	; 0x36
 8004816:	f003 faaf 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800481a:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <HAL_InitTick+0xc4>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004820:	4b28      	ldr	r3, [pc, #160]	; (80048c4 <HAL_InitTick+0xc8>)
 8004822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004826:	4a27      	ldr	r2, [pc, #156]	; (80048c4 <HAL_InitTick+0xc8>)
 8004828:	f043 0310 	orr.w	r3, r3, #16
 800482c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_InitTick+0xc8>)
 8004832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800483e:	f107 0210 	add.w	r2, r7, #16
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f00a fddb 	bl	800f404 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d106      	bne.n	8004866 <HAL_InitTick+0x6a>
 8004858:	e001      	b.n	800485e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e02b      	b.n	80048b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800485e:	f00a fda5 	bl	800f3ac <HAL_RCC_GetPCLK1Freq>
 8004862:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004864:	e004      	b.n	8004870 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004866:	f00a fda1 	bl	800f3ac <HAL_RCC_GetPCLK1Freq>
 800486a:	4603      	mov	r3, r0
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <HAL_InitTick+0xcc>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	0c9b      	lsrs	r3, r3, #18
 800487a:	3b01      	subs	r3, #1
 800487c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800487e:	4b13      	ldr	r3, [pc, #76]	; (80048cc <HAL_InitTick+0xd0>)
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <HAL_InitTick+0xd4>)
 8004882:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_InitTick+0xd0>)
 8004886:	f240 32e7 	movw	r2, #999	; 0x3e7
 800488a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800488c:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <HAL_InitTick+0xd0>)
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <HAL_InitTick+0xd0>)
 8004894:	2200      	movs	r2, #0
 8004896:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <HAL_InitTick+0xd0>)
 800489a:	2200      	movs	r2, #0
 800489c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800489e:	480b      	ldr	r0, [pc, #44]	; (80048cc <HAL_InitTick+0xd0>)
 80048a0:	f00e fbb1 	bl	8013006 <HAL_TIM_Base_Init>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80048aa:	4808      	ldr	r0, [pc, #32]	; (80048cc <HAL_InitTick+0xd0>)
 80048ac:	f00e fc02 	bl	80130b4 <HAL_TIM_Base_Start_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	e000      	b.n	80048b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3740      	adds	r7, #64	; 0x40
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	240000cc 	.word	0x240000cc
 80048c4:	58024400 	.word	0x58024400
 80048c8:	431bde83 	.word	0x431bde83
 80048cc:	24001d54 	.word	0x24001d54
 80048d0:	40001000 	.word	0x40001000

080048d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80048d8:	e7fe      	b.n	80048d8 <NMI_Handler+0x4>

080048da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048de:	e7fe      	b.n	80048de <HardFault_Handler+0x4>

080048e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048e4:	e7fe      	b.n	80048e4 <MemManage_Handler+0x4>

080048e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048e6:	b480      	push	{r7}
 80048e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ea:	e7fe      	b.n	80048ea <BusFault_Handler+0x4>

080048ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048f0:	e7fe      	b.n	80048f0 <UsageFault_Handler+0x4>

080048f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048f2:	b480      	push	{r7}
 80048f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004904:	4802      	ldr	r0, [pc, #8]	; (8004910 <DMA1_Stream0_IRQHandler+0x10>)
 8004906:	f005 f975 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	24000224 	.word	0x24000224

08004914 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004918:	4802      	ldr	r0, [pc, #8]	; (8004924 <DMA1_Stream1_IRQHandler+0x10>)
 800491a:	f005 f96b 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800491e:	bf00      	nop
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	2400029c 	.word	0x2400029c

08004928 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800492c:	4802      	ldr	r0, [pc, #8]	; (8004938 <DMA1_Stream2_IRQHandler+0x10>)
 800492e:	f005 f961 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	24001ed0 	.word	0x24001ed0

0800493c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004940:	4802      	ldr	r0, [pc, #8]	; (800494c <DMA1_Stream3_IRQHandler+0x10>)
 8004942:	f005 f957 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	24001cdc 	.word	0x24001cdc

08004950 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004954:	4802      	ldr	r0, [pc, #8]	; (8004960 <DMA1_Stream4_IRQHandler+0x10>)
 8004956:	f005 f94d 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	24001c64 	.word	0x24001c64

08004964 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004968:	4802      	ldr	r0, [pc, #8]	; (8004974 <DMA1_Stream5_IRQHandler+0x10>)
 800496a:	f005 f943 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800496e:	bf00      	nop
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	24000328 	.word	0x24000328

08004978 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800497c:	4802      	ldr	r0, [pc, #8]	; (8004988 <DMA1_Stream6_IRQHandler+0x10>)
 800497e:	f005 f939 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004982:	bf00      	nop
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	24001990 	.word	0x24001990

0800498c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004990:	4802      	ldr	r0, [pc, #8]	; (800499c <TIM1_BRK_IRQHandler+0x10>)
 8004992:	f00e fea6 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	24001da4 	.word	0x24001da4

080049a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049a4:	4802      	ldr	r0, [pc, #8]	; (80049b0 <TIM1_UP_IRQHandler+0x10>)
 80049a6:	f00e fe9c 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	24001da4 	.word	0x24001da4

080049b4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049b8:	4802      	ldr	r0, [pc, #8]	; (80049c4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80049ba:	f00e fe92 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	24001da4 	.word	0x24001da4

080049c8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049cc:	4802      	ldr	r0, [pc, #8]	; (80049d8 <TIM1_CC_IRQHandler+0x10>)
 80049ce:	f00e fe88 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	24001da4 	.word	0x24001da4

080049dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049e0:	4802      	ldr	r0, [pc, #8]	; (80049ec <TIM2_IRQHandler+0x10>)
 80049e2:	f00e fe7e 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	24001df0 	.word	0x24001df0

080049f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80049f4:	4802      	ldr	r0, [pc, #8]	; (8004a00 <I2C1_EV_IRQHandler+0x10>)
 80049f6:	f007 fb85 	bl	800c104 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80049fa:	bf00      	nop
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	2400193c 	.word	0x2400193c

08004a04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a08:	4802      	ldr	r0, [pc, #8]	; (8004a14 <I2C1_ER_IRQHandler+0x10>)
 8004a0a:	f007 fb95 	bl	800c138 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2400193c 	.word	0x2400193c

08004a18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a1c:	4802      	ldr	r0, [pc, #8]	; (8004a28 <SPI1_IRQHandler+0x10>)
 8004a1e:	f00d ffbf 	bl	80129a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	24001b54 	.word	0x24001b54

08004a2c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <SPI2_IRQHandler+0x10>)
 8004a32:	f00d ffb5 	bl	80129a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	24001bdc 	.word	0x24001bdc

08004a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <USART1_IRQHandler+0x10>)
 8004a46:	f010 f98f 	bl	8014d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	24001e3c 	.word	0x24001e3c

08004a54 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <DMA1_Stream7_IRQHandler+0x10>)
 8004a5a:	f005 f8cb 	bl	8009bf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	24001a08 	.word	0x24001a08

08004a68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <TIM6_DAC_IRQHandler+0x20>)
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004a76:	4804      	ldr	r0, [pc, #16]	; (8004a88 <TIM6_DAC_IRQHandler+0x20>)
 8004a78:	f003 fb13 	bl	80080a2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004a7c:	4803      	ldr	r0, [pc, #12]	; (8004a8c <TIM6_DAC_IRQHandler+0x24>)
 8004a7e:	f00e fe30 	bl	80136e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	24000314 	.word	0x24000314
 8004a8c:	24001d54 	.word	0x24001d54

08004a90 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <ITM_SendChar+0x48>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <ITM_SendChar+0x48>)
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <ITM_SendChar+0x4c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <ITM_SendChar+0x4c>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8004ab2:	bf00      	nop
 8004ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f8      	beq.n	8004ab4 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8004ac2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	6013      	str	r3, [r2, #0]
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	e000edfc 	.word	0xe000edfc
 8004adc:	e0000e00 	.word	0xe0000e00

08004ae0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e00a      	b.n	8004b08 <_read+0x28>
		*ptr++ = __io_getchar();
 8004af2:	f3af 8000 	nop.w
 8004af6:	4601      	mov	r1, r0
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	60ba      	str	r2, [r7, #8]
 8004afe:	b2ca      	uxtb	r2, r1
 8004b00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	3301      	adds	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	dbf0      	blt.n	8004af2 <_read+0x12>
	}

	return len;
 8004b10:	687b      	ldr	r3, [r7, #4]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e009      	b.n	8004b40 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	60ba      	str	r2, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ffab 	bl	8004a90 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	dbf1      	blt.n	8004b2c <_write+0x12>
	}
	return len;
 8004b48:	687b      	ldr	r3, [r7, #4]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <_close>:

int _close(int file) {
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <_fstat>:

int _fstat(int file, struct stat *st) {
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b7a:	605a      	str	r2, [r3, #4]
	return 0;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_isatty>:

int _isatty(int file) {
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8004bc4:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8004bc6:	4b15      	ldr	r3, [pc, #84]	; (8004c1c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8004bd8:	4b11      	ldr	r3, [pc, #68]	; (8004c20 <_sbrk+0x64>)
 8004bda:	4a12      	ldr	r2, [pc, #72]	; (8004c24 <_sbrk+0x68>)
 8004bdc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <_sbrk+0x64>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d207      	bcs.n	8004bfc <_sbrk+0x40>
		errno = ENOMEM;
 8004bec:	f015 ff9e 	bl	801ab2c <__errno>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8004bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfa:	e009      	b.n	8004c10 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8004bfc:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <_sbrk+0x64>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8004c02:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <_sbrk+0x64>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	4a05      	ldr	r2, [pc, #20]	; (8004c20 <_sbrk+0x64>)
 8004c0c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	24080000 	.word	0x24080000
 8004c1c:	00000400 	.word	0x00000400
 8004c20:	24001da0 	.word	0x24001da0
 8004c24:	240069e8 	.word	0x240069e8

08004c28 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <SystemInit+0xe4>)
 8004c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c32:	4a36      	ldr	r2, [pc, #216]	; (8004d0c <SystemInit+0xe4>)
 8004c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004c3c:	4b34      	ldr	r3, [pc, #208]	; (8004d10 <SystemInit+0xe8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	2b06      	cmp	r3, #6
 8004c46:	d807      	bhi.n	8004c58 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004c48:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <SystemInit+0xe8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 030f 	bic.w	r3, r3, #15
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <SystemInit+0xe8>)
 8004c52:	f043 0307 	orr.w	r3, r3, #7
 8004c56:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004c58:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <SystemInit+0xec>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a2d      	ldr	r2, [pc, #180]	; (8004d14 <SystemInit+0xec>)
 8004c5e:	f043 0301 	orr.w	r3, r3, #1
 8004c62:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004c64:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <SystemInit+0xec>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <SystemInit+0xec>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4929      	ldr	r1, [pc, #164]	; (8004d14 <SystemInit+0xec>)
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <SystemInit+0xf0>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <SystemInit+0xe8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004c82:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <SystemInit+0xe8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 030f 	bic.w	r3, r3, #15
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <SystemInit+0xe8>)
 8004c8c:	f043 0307 	orr.w	r3, r3, #7
 8004c90:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <SystemInit+0xec>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <SystemInit+0xec>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <SystemInit+0xec>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <SystemInit+0xec>)
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <SystemInit+0xf4>)
 8004ca8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <SystemInit+0xec>)
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <SystemInit+0xf8>)
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004cb0:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <SystemInit+0xec>)
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <SystemInit+0xfc>)
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <SystemInit+0xec>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004cbc:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <SystemInit+0xec>)
 8004cbe:	4a19      	ldr	r2, [pc, #100]	; (8004d24 <SystemInit+0xfc>)
 8004cc0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <SystemInit+0xec>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <SystemInit+0xec>)
 8004cca:	4a16      	ldr	r2, [pc, #88]	; (8004d24 <SystemInit+0xfc>)
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004cce:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <SystemInit+0xec>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004cd4:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <SystemInit+0xec>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <SystemInit+0xec>)
 8004cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cde:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <SystemInit+0xec>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <SystemInit+0x100>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <SystemInit+0x104>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf2:	d202      	bcs.n	8004cfa <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <SystemInit+0x108>)
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004cfa:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <SystemInit+0x10c>)
 8004cfc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004d00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004d02:	bf00      	nop
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000ed00 	.word	0xe000ed00
 8004d10:	52002000 	.word	0x52002000
 8004d14:	58024400 	.word	0x58024400
 8004d18:	eaf6ed7f 	.word	0xeaf6ed7f
 8004d1c:	02020200 	.word	0x02020200
 8004d20:	01ff0000 	.word	0x01ff0000
 8004d24:	01010280 	.word	0x01010280
 8004d28:	5c001000 	.word	0x5c001000
 8004d2c:	ffff0000 	.word	0xffff0000
 8004d30:	51008108 	.word	0x51008108
 8004d34:	52004000 	.word	0x52004000

08004d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b09a      	sub	sp, #104	; 0x68
 8004d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	609a      	str	r2, [r3, #8]
 8004d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
 8004d56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	611a      	str	r2, [r3, #16]
 8004d68:	615a      	str	r2, [r3, #20]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	222c      	movs	r2, #44	; 0x2c
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f015 ff12 	bl	801ab9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d78:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d7a:	4a45      	ldr	r2, [pc, #276]	; (8004e90 <MX_TIM1_Init+0x158>)
 8004d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004d7e:	4b43      	ldr	r3, [pc, #268]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d80:	224a      	movs	r2, #74	; 0x4a
 8004d82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d84:	4b41      	ldr	r3, [pc, #260]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004d8a:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d8c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004d90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d92:	4b3e      	ldr	r3, [pc, #248]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d98:	4b3c      	ldr	r3, [pc, #240]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9e:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004da4:	4839      	ldr	r0, [pc, #228]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004da6:	f00e f92e 	bl	8013006 <HAL_TIM_Base_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004db0:	f7fe feec 	bl	8003b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004db8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4832      	ldr	r0, [pc, #200]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004dc2:	f00e fea9 	bl	8013b18 <HAL_TIM_ConfigClockSource>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004dcc:	f7fe fede 	bl	8003b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004dd0:	482e      	ldr	r0, [pc, #184]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004dd2:	f00e fc25 	bl	8013620 <HAL_TIM_PWM_Init>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004ddc:	f7fe fed6 	bl	8003b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004de0:	2300      	movs	r3, #0
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004de4:	2300      	movs	r3, #0
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004dec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004df0:	4619      	mov	r1, r3
 8004df2:	4826      	ldr	r0, [pc, #152]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004df4:	f00f fbe6 	bl	80145c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004dfe:	f7fe fec5 	bl	8003b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e02:	2360      	movs	r3, #96	; 0x60
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004e06:	f240 13df 	movw	r3, #479	; 0x1df
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004e24:	2200      	movs	r2, #0
 8004e26:	4619      	mov	r1, r3
 8004e28:	4818      	ldr	r0, [pc, #96]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004e2a:	f00e fd61 	bl	80138f0 <HAL_TIM_PWM_ConfigChannel>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004e34:	f7fe feaa 	bl	8003b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e68:	1d3b      	adds	r3, r7, #4
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4807      	ldr	r0, [pc, #28]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004e6e:	f00f fc37 	bl	80146e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004e78:	f7fe fe88 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e7c:	4803      	ldr	r0, [pc, #12]	; (8004e8c <MX_TIM1_Init+0x154>)
 8004e7e:	f000 f8dd 	bl	800503c <HAL_TIM_MspPostInit>

}
 8004e82:	bf00      	nop
 8004e84:	3768      	adds	r7, #104	; 0x68
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	24001da4 	.word	0x24001da4
 8004e90:	40010000 	.word	0x40010000

08004e94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08e      	sub	sp, #56	; 0x38
 8004e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ea8:	f107 031c 	add.w	r3, r7, #28
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	605a      	str	r2, [r3, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	611a      	str	r2, [r3, #16]
 8004ec2:	615a      	str	r2, [r3, #20]
 8004ec4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ec6:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004ec8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ecc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004ece:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004ed0:	224a      	movs	r2, #74	; 0x4a
 8004ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ed4:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004edc:	f640 4234 	movw	r2, #3124	; 0xc34
 8004ee0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ee2:	4b26      	ldr	r3, [pc, #152]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ee8:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004eee:	4823      	ldr	r0, [pc, #140]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004ef0:	f00e f889 	bl	8013006 <HAL_TIM_Base_Init>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004efa:	f7fe fe47 	bl	8003b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f08:	4619      	mov	r1, r3
 8004f0a:	481c      	ldr	r0, [pc, #112]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004f0c:	f00e fe04 	bl	8013b18 <HAL_TIM_ConfigClockSource>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004f16:	f7fe fe39 	bl	8003b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f1a:	4818      	ldr	r0, [pc, #96]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004f1c:	f00e fb80 	bl	8013620 <HAL_TIM_PWM_Init>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004f26:	f7fe fe31 	bl	8003b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004f2a:	2320      	movs	r3, #32
 8004f2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f32:	f107 031c 	add.w	r3, r7, #28
 8004f36:	4619      	mov	r1, r3
 8004f38:	4810      	ldr	r0, [pc, #64]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004f3a:	f00f fb43 	bl	80145c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004f44:	f7fe fe22 	bl	8003b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f48:	2360      	movs	r3, #96	; 0x60
 8004f4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004f58:	463b      	mov	r3, r7
 8004f5a:	220c      	movs	r2, #12
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004f60:	f00e fcc6 	bl	80138f0 <HAL_TIM_PWM_ConfigChannel>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004f6a:	f7fe fe0f 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004f6e:	4803      	ldr	r0, [pc, #12]	; (8004f7c <MX_TIM2_Init+0xe8>)
 8004f70:	f000 f864 	bl	800503c <HAL_TIM_MspPostInit>

}
 8004f74:	bf00      	nop
 8004f76:	3738      	adds	r7, #56	; 0x38
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	24001df0 	.word	0x24001df0

08004f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_TIM_Base_MspInit+0xb4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d12f      	bne.n	8004ff2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f92:	4b29      	ldr	r3, [pc, #164]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 8004f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f98:	4a27      	ldr	r2, [pc, #156]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 8004fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2105      	movs	r1, #5
 8004fb4:	2018      	movs	r0, #24
 8004fb6:	f002 fec5 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004fba:	2018      	movs	r0, #24
 8004fbc:	f002 fedc 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2105      	movs	r1, #5
 8004fc4:	2019      	movs	r0, #25
 8004fc6:	f002 febd 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004fca:	2019      	movs	r0, #25
 8004fcc:	f002 fed4 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2105      	movs	r1, #5
 8004fd4:	201a      	movs	r0, #26
 8004fd6:	f002 feb5 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004fda:	201a      	movs	r0, #26
 8004fdc:	f002 fecc 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2105      	movs	r1, #5
 8004fe4:	201b      	movs	r0, #27
 8004fe6:	f002 fead 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004fea:	201b      	movs	r0, #27
 8004fec:	f002 fec4 	bl	8007d78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004ff0:	e01b      	b.n	800502a <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffa:	d116      	bne.n	800502a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 8004ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005002:	4a0d      	ldr	r2, [pc, #52]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_TIM_Base_MspInit+0xb8>)
 800500e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2105      	movs	r1, #5
 800501e:	201c      	movs	r0, #28
 8005020:	f002 fe90 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005024:	201c      	movs	r0, #28
 8005026:	f002 fea7 	bl	8007d78 <HAL_NVIC_EnableIRQ>
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40010000 	.word	0x40010000
 8005038:	58024400 	.word	0x58024400

0800503c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <HAL_TIM_MspPostInit+0xb8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d120      	bne.n	80050a0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 8005060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005064:	4a24      	ldr	r2, [pc, #144]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 8005070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800507c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005082:	2302      	movs	r3, #2
 8005084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508a:	2300      	movs	r3, #0
 800508c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800508e:	2301      	movs	r3, #1
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005092:	f107 0314 	add.w	r3, r7, #20
 8005096:	4619      	mov	r1, r3
 8005098:	4818      	ldr	r0, [pc, #96]	; (80050fc <HAL_TIM_MspPostInit+0xc0>)
 800509a:	f006 fbb1 	bl	800b800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800509e:	e024      	b.n	80050ea <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d11f      	bne.n	80050ea <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050aa:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 80050ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b0:	4a11      	ldr	r2, [pc, #68]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 80050b2:	f043 0302 	orr.w	r3, r3, #2
 80050b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <HAL_TIM_MspPostInit+0xbc>)
 80050bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d6:	2300      	movs	r3, #0
 80050d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050da:	2301      	movs	r3, #1
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	4619      	mov	r1, r3
 80050e4:	4806      	ldr	r0, [pc, #24]	; (8005100 <HAL_TIM_MspPostInit+0xc4>)
 80050e6:	f006 fb8b 	bl	800b800 <HAL_GPIO_Init>
}
 80050ea:	bf00      	nop
 80050ec:	3728      	adds	r7, #40	; 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40010000 	.word	0x40010000
 80050f8:	58024400 	.word	0x58024400
 80050fc:	58020000 	.word	0x58020000
 8005100:	58020400 	.word	0x58020400

08005104 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8005110:	4b21      	ldr	r3, [pc, #132]	; (8005198 <get_uptime+0x94>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005116:	4b21      	ldr	r3, [pc, #132]	; (800519c <get_uptime+0x98>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <get_uptime+0x94>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	429a      	cmp	r2, r3
 8005124:	d005      	beq.n	8005132 <get_uptime+0x2e>
		ms = uptime_millis;
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <get_uptime+0x94>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 800512c:	4b1b      	ldr	r3, [pc, #108]	; (800519c <get_uptime+0x98>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005138:	fb03 f202 	mul.w	r2, r3, r2
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <get_uptime+0x98>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	3301      	adds	r3, #1
 8005142:	4917      	ldr	r1, [pc, #92]	; (80051a0 <get_uptime+0x9c>)
 8005144:	fba1 1303 	umull	r1, r3, r1, r3
 8005148:	099b      	lsrs	r3, r3, #6
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <get_uptime+0x5a>
		uptime = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	b2da      	uxtb	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	0c1a      	lsrs	r2, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3301      	adds	r3, #1
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0a1a      	lsrs	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3302      	adds	r3, #2
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3303      	adds	r3, #3
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	24001ae0 	.word	0x24001ae0
 800519c:	e000e010 	.word	0xe000e010
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	b09d      	sub	sp, #116	; 0x74
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80051ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80051b2:	2200      	movs	r2, #0
 80051b4:	4619      	mov	r1, r3
 80051b6:	4893      	ldr	r0, [pc, #588]	; (8005404 <get_unix_time+0x260>)
 80051b8:	f00c ff84 	bl	80120c4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80051bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051c0:	2200      	movs	r2, #0
 80051c2:	4619      	mov	r1, r3
 80051c4:	488f      	ldr	r0, [pc, #572]	; (8005404 <get_unix_time+0x260>)
 80051c6:	f00d f861 	bl	801228c <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 80051ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80051d0:	1ad2      	subs	r2, r2, r3
 80051d2:	4b8d      	ldr	r3, [pc, #564]	; (8005408 <get_unix_time+0x264>)
 80051d4:	fba3 2302 	umull	r2, r3, r3, r2
 80051d8:	08db      	lsrs	r3, r3, #3
 80051da:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	y = current_date.Year + 2000;
 80051ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80051f4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 80051f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051fc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 8005200:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005208:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800520c:	2b02      	cmp	r3, #2
 800520e:	d809      	bhi.n	8005224 <get_unix_time+0x80>
	{
		m += 12;
 8005210:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005214:	330c      	adds	r3, #12
 8005216:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 800521a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800521e:	3b01      	subs	r3, #1
 8005220:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005224:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005228:	f240 136d 	movw	r3, #365	; 0x16d
 800522c:	fb03 f202 	mul.w	r2, r3, r2
 8005230:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005234:	089b      	lsrs	r3, r3, #2
 8005236:	b29b      	uxth	r3, r3
 8005238:	18d1      	adds	r1, r2, r3
 800523a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <get_unix_time+0x268>)
 8005240:	fba3 2302 	umull	r2, r3, r3, r2
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	b29b      	uxth	r3, r3
 8005248:	1ac9      	subs	r1, r1, r3
 800524a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800524e:	4b6f      	ldr	r3, [pc, #444]	; (800540c <get_unix_time+0x268>)
 8005250:	fba3 2302 	umull	r2, r3, r3, r2
 8005254:	09db      	lsrs	r3, r3, #7
 8005256:	b29b      	uxth	r3, r3
 8005258:	440b      	add	r3, r1
 800525a:	17da      	asrs	r2, r3, #31
 800525c:	623b      	str	r3, [r7, #32]
 800525e:	627a      	str	r2, [r7, #36]	; 0x24
 8005260:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005264:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005268:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4618      	mov	r0, r3
 8005276:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	1899      	adds	r1, r3, r2
 8005282:	4b63      	ldr	r3, [pc, #396]	; (8005410 <get_unix_time+0x26c>)
 8005284:	fb83 2301 	smull	r2, r3, r3, r1
 8005288:	105a      	asrs	r2, r3, #1
 800528a:	17cb      	asrs	r3, r1, #31
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	18c2      	adds	r2, r0, r3
 8005290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005294:	4413      	add	r3, r2
 8005296:	17da      	asrs	r2, r3, #31
 8005298:	633b      	str	r3, [r7, #48]	; 0x30
 800529a:	637a      	str	r2, [r7, #52]	; 0x34
 800529c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052a2:	1851      	adds	r1, r2, r1
 80052a4:	61b9      	str	r1, [r7, #24]
 80052a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052a8:	eb43 0101 	adc.w	r1, r3, r1
 80052ac:	61f9      	str	r1, [r7, #28]
 80052ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 80052b6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80052ba:	4956      	ldr	r1, [pc, #344]	; (8005414 <get_unix_time+0x270>)
 80052bc:	1851      	adds	r1, r2, r1
 80052be:	6139      	str	r1, [r7, #16]
 80052c0:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 80052c4:	617b      	str	r3, [r7, #20]
 80052c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 80052ce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	1896      	adds	r6, r2, r2
 80052d8:	60be      	str	r6, [r7, #8]
 80052da:	415b      	adcs	r3, r3
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052e2:	eb12 0800 	adds.w	r8, r2, r0
 80052e6:	eb43 0901 	adc.w	r9, r3, r1
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80052f6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80052fa:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80052fe:	ebb2 0408 	subs.w	r4, r2, r8
 8005302:	eb63 0509 	sbc.w	r5, r3, r9
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	012b      	lsls	r3, r5, #4
 8005310:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005314:	0122      	lsls	r2, r4, #4
 8005316:	ebb2 0a04 	subs.w	sl, r2, r4
 800531a:	eb63 0b05 	sbc.w	fp, r3, r5
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 800532a:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 800532e:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8005332:	4692      	mov	sl, r2
 8005334:	469b      	mov	fp, r3
 8005336:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 800533a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800533e:	461a      	mov	r2, r3
 8005340:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005344:	fb03 f202 	mul.w	r2, r3, r2
 8005348:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800534c:	4619      	mov	r1, r3
 800534e:	460b      	mov	r3, r1
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 800535c:	4413      	add	r3, r2
 800535e:	2200      	movs	r2, #0
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
 8005362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005364:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005368:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800536c:	4621      	mov	r1, r4
 800536e:	1851      	adds	r1, r2, r1
 8005370:	6039      	str	r1, [r7, #0]
 8005372:	4629      	mov	r1, r5
 8005374:	eb43 0101 	adc.w	r1, r3, r1
 8005378:	6079      	str	r1, [r7, #4]
 800537a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800537e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 8005382:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	0e02      	lsrs	r2, r0, #24
 8005390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005394:	0e0b      	lsrs	r3, r1, #24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 800539c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	0c02      	lsrs	r2, r0, #16
 80053aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80053ae:	0c0b      	lsrs	r3, r1, #16
 80053b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053b2:	3101      	adds	r1, #1
 80053b4:	b2d3      	uxtb	r3, r2
 80053b6:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 80053b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	0a02      	lsrs	r2, r0, #8
 80053c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80053ca:	0a0b      	lsrs	r3, r1, #8
 80053cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ce:	3102      	adds	r1, #2
 80053d0:	b2d3      	uxtb	r3, r2
 80053d2:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	3303      	adds	r3, #3
 80053d8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80053dc:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 80053de:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	3304      	adds	r3, #4
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 80053ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053f0:	3305      	adds	r3, #5
 80053f2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	3774      	adds	r7, #116	; 0x74
 80053fe:	46bd      	mov	sp, r7
 8005400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005404:	24001af4 	.word	0x24001af4
 8005408:	cccccccd 	.word	0xcccccccd
 800540c:	51eb851f 	.word	0x51eb851f
 8005410:	66666667 	.word	0x66666667
 8005414:	fff50537 	.word	0xfff50537

08005418 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005418:	b580      	push	{r7, lr}
 800541a:	b08c      	sub	sp, #48	; 0x30
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	789b      	ldrb	r3, [r3, #2]
 800542c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	795b      	ldrb	r3, [r3, #5]
 8005444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	799b      	ldrb	r3, [r3, #6]
 800544c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3307      	adds	r3, #7
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	b21a      	sxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3308      	adds	r3, #8
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b21b      	sxth	r3, r3
 8005462:	4313      	orrs	r3, r2
 8005464:	b21b      	sxth	r3, r3
 8005466:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800546c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005470:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005478:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800547c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005480:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005484:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005486:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800548a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 800548c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005490:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8005492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005494:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005496:	f107 0320 	add.w	r3, r7, #32
 800549a:	2200      	movs	r2, #0
 800549c:	4619      	mov	r1, r3
 800549e:	480b      	ldr	r0, [pc, #44]	; (80054cc <calibrateRTC+0xb4>)
 80054a0:	f00c fe6c 	bl	801217c <HAL_RTC_SetDate>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80054aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <calibrateRTC+0x9e>
		Error_Handler();
 80054b2:	f7fe fb6b 	bl	8003b8c <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80054b6:	f107 030c 	add.w	r3, r7, #12
 80054ba:	2200      	movs	r2, #0
 80054bc:	4619      	mov	r1, r3
 80054be:	4803      	ldr	r0, [pc, #12]	; (80054cc <calibrateRTC+0xb4>)
 80054c0:	f000 f806 	bl	80054d0 <RTC_SetTime>
}
 80054c4:	bf00      	nop
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	24001af4 	.word	0x24001af4

080054d0 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80054d0:	b590      	push	{r4, r7, lr}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <RTC_SetTime+0x1a>
 80054e6:	2302      	movs	r3, #2
 80054e8:	e051      	b.n	800558e <RTC_SetTime+0xbe>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2202      	movs	r2, #2
 80054f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	22ca      	movs	r2, #202	; 0xca
 8005500:	625a      	str	r2, [r3, #36]	; 0x24
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2253      	movs	r2, #83	; 0x53
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f00c ff30 	bl	8012370 <RTC_EnterInitMode>
 8005510:	4603      	mov	r3, r0
 8005512:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d129      	bne.n	800556e <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2200      	movs	r2, #0
 800551e:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f00c ff95 	bl	8012454 <RTC_ByteToBcd2>
 800552a:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 800552c:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	4618      	mov	r0, r3
 8005534:	f00c ff8e 	bl	8012454 <RTC_ByteToBcd2>
 8005538:	4603      	mov	r3, r0
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	789b      	ldrb	r3, [r3, #2]
 8005542:	4618      	mov	r0, r3
 8005544:	f00c ff86 	bl	8012454 <RTC_ByteToBcd2>
 8005548:	4603      	mov	r3, r0
 800554a:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	78db      	ldrb	r3, [r3, #3]
 8005552:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <RTC_SetTime+0xc8>)
 8005560:	400b      	ands	r3, r1
 8005562:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f00c ff37 	bl	80123d8 <RTC_ExitInitMode>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	22ff      	movs	r2, #255	; 0xff
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 800558c:	7dfb      	ldrb	r3, [r7, #23]

}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	007f7f7f 	.word	0x007f7f7f

0800559c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055a0:	4b30      	ldr	r3, [pc, #192]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055a2:	4a31      	ldr	r2, [pc, #196]	; (8005668 <MX_USART1_UART_Init+0xcc>)
 80055a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055a8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80055ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055ae:	4b2d      	ldr	r3, [pc, #180]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055b4:	4b2b      	ldr	r3, [pc, #172]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055ba:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80055c0:	4b28      	ldr	r3, [pc, #160]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055c2:	220c      	movs	r2, #12
 80055c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055c6:	4b27      	ldr	r3, [pc, #156]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80055d2:	4b24      	ldr	r3, [pc, #144]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80055d8:	4b22      	ldr	r3, [pc, #136]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055da:	2200      	movs	r2, #0
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80055e4:	481f      	ldr	r0, [pc, #124]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055e6:	f00f f917 	bl	8014818 <HAL_UART_Init>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80055f0:	f7fe facc 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80055f4:	2100      	movs	r1, #0
 80055f6:	481b      	ldr	r0, [pc, #108]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 80055f8:	f011 fe5d 	bl	80172b6 <HAL_UARTEx_SetTxFifoThreshold>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005602:	f7fe fac3 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005606:	2100      	movs	r1, #0
 8005608:	4816      	ldr	r0, [pc, #88]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 800560a:	f011 fe92 	bl	8017332 <HAL_UARTEx_SetRxFifoThreshold>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005614:	f7fe faba 	bl	8003b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005618:	4812      	ldr	r0, [pc, #72]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 800561a:	f011 fe13 	bl	8017244 <HAL_UARTEx_DisableFifoMode>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005624:	f7fe fab2 	bl	8003b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005628:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800562c:	480d      	ldr	r0, [pc, #52]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 800562e:	f011 fe80 	bl	8017332 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005632:	480c      	ldr	r0, [pc, #48]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 8005634:	f011 fdcb 	bl	80171ce <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005638:	480a      	ldr	r0, [pc, #40]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 800563a:	f011 fd95 	bl	8017168 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800564c:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800564e:	4b05      	ldr	r3, [pc, #20]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <MX_USART1_UART_Init+0xc8>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800565c:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	24001e3c 	.word	0x24001e3c
 8005668:	40011000 	.word	0x40011000

0800566c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b0ba      	sub	sp, #232	; 0xe8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005674:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	609a      	str	r2, [r3, #8]
 8005680:	60da      	str	r2, [r3, #12]
 8005682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	22c0      	movs	r2, #192	; 0xc0
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f015 fa85 	bl	801ab9c <memset>
  if(uartHandle->Instance==USART1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a41      	ldr	r2, [pc, #260]	; (800579c <HAL_UART_MspInit+0x130>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d17b      	bne.n	8005794 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800569c:	f04f 0201 	mov.w	r2, #1
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80056a8:	2318      	movs	r3, #24
 80056aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056ae:	f107 0310 	add.w	r3, r7, #16
 80056b2:	4618      	mov	r0, r3
 80056b4:	f009 fee8 	bl	800f488 <HAL_RCCEx_PeriphCLKConfig>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80056be:	f7fe fa65 	bl	8003b8c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056c8:	4a35      	ldr	r2, [pc, #212]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056ca:	f043 0310 	orr.w	r3, r3, #16
 80056ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80056d2:	4b33      	ldr	r3, [pc, #204]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056d8:	f003 0310 	and.w	r3, r3, #16
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e0:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056e6:	4a2e      	ldr	r2, [pc, #184]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056f0:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_UART_MspInit+0x134>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	60bb      	str	r3, [r7, #8]
 80056fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005706:	2302      	movs	r3, #2
 8005708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005712:	2300      	movs	r3, #0
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005718:	2307      	movs	r3, #7
 800571a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800571e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005722:	4619      	mov	r1, r3
 8005724:	481f      	ldr	r0, [pc, #124]	; (80057a4 <HAL_UART_MspInit+0x138>)
 8005726:	f006 f86b 	bl	800b800 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800572a:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <HAL_UART_MspInit+0x140>)
 800572e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005730:	4b1d      	ldr	r3, [pc, #116]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005732:	222a      	movs	r2, #42	; 0x2a
 8005734:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800573c:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800573e:	2200      	movs	r2, #0
 8005740:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005748:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800574a:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800574c:	2200      	movs	r2, #0
 800574e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005750:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005752:	2200      	movs	r2, #0
 8005754:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005756:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005758:	2200      	movs	r2, #0
 800575a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800575e:	2200      	movs	r2, #0
 8005760:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005764:	2200      	movs	r2, #0
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005768:	480f      	ldr	r0, [pc, #60]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800576a:	f002 ff19 	bl	80085a0 <HAL_DMA_Init>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005774:	f7fe fa0a 	bl	8003b8c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 800577c:	67da      	str	r2, [r3, #124]	; 0x7c
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_UART_MspInit+0x13c>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005784:	2200      	movs	r2, #0
 8005786:	2105      	movs	r1, #5
 8005788:	2025      	movs	r0, #37	; 0x25
 800578a:	f002 fadb 	bl	8007d44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800578e:	2025      	movs	r0, #37	; 0x25
 8005790:	f002 faf2 	bl	8007d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005794:	bf00      	nop
 8005796:	37e8      	adds	r7, #232	; 0xe8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40011000 	.word	0x40011000
 80057a0:	58024400 	.word	0x58024400
 80057a4:	58020000 	.word	0x58020000
 80057a8:	24001ed0 	.word	0x24001ed0
 80057ac:	40020040 	.word	0x40020040

080057b0 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80057ba:	4bc1      	ldr	r3, [pc, #772]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80057c0:	4bbf      	ldr	r3, [pc, #764]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80057c6:	4bbe      	ldr	r3, [pc, #760]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057c8:	2201      	movs	r2, #1
 80057ca:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80057cc:	4bbc      	ldr	r3, [pc, #752]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 819;		// 50c
 80057d2:	4bbb      	ldr	r3, [pc, #748]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057d4:	f240 3233 	movw	r2, #819	; 0x333
 80057d8:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 645;		// -20c
 80057da:	4bb9      	ldr	r3, [pc, #740]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057dc:	f240 2285 	movw	r2, #645	; 0x285
 80057e0:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 80057e2:	4bb7      	ldr	r3, [pc, #732]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 80057e8:	4bb5      	ldr	r3, [pc, #724]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 80057ee:	4bb4      	ldr	r3, [pc, #720]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	81da      	strh	r2, [r3, #14]


	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80057f4:	4bb2      	ldr	r3, [pc, #712]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80057fa:	4bb1      	ldr	r3, [pc, #708]	; (8005ac0 <voltage_monitor_init+0x310>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005800:	4baf      	ldr	r3, [pc, #700]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005802:	2201      	movs	r2, #1
 8005804:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 8005806:	4bae      	ldr	r3, [pc, #696]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005808:	2200      	movs	r2, #0
 800580a:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = 1557;		// 1.255v
 800580c:	4bac      	ldr	r3, [pc, #688]	; (8005ac0 <voltage_monitor_init+0x310>)
 800580e:	f240 6215 	movw	r2, #1557	; 0x615
 8005812:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = 1464;		// 1.180v
 8005814:	4baa      	ldr	r3, [pc, #680]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005816:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800581a:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 800581c:	4ba8      	ldr	r3, [pc, #672]	; (8005ac0 <voltage_monitor_init+0x310>)
 800581e:	2200      	movs	r2, #0
 8005820:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 8005822:	4ba7      	ldr	r3, [pc, #668]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005824:	2200      	movs	r2, #0
 8005826:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 8005828:	4ba5      	ldr	r3, [pc, #660]	; (8005ac0 <voltage_monitor_init+0x310>)
 800582a:	2200      	movs	r2, #0
 800582c:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800582e:	4ba4      	ldr	r3, [pc, #656]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005830:	2202      	movs	r2, #2
 8005832:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005836:	4ba2      	ldr	r3, [pc, #648]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800583e:	4ba0      	ldr	r3, [pc, #640]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005840:	2201      	movs	r2, #1
 8005842:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 8005846:	4b9e      	ldr	r3, [pc, #632]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005848:	2200      	movs	r2, #0
 800584a:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = 800;			// 50c
 800584c:	4b9c      	ldr	r3, [pc, #624]	; (8005ac0 <voltage_monitor_init+0x310>)
 800584e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005852:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = 7872;		// -20c
 8005854:	4b9a      	ldr	r3, [pc, #616]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005856:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800585a:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 800585c:	4b98      	ldr	r3, [pc, #608]	; (8005ac0 <voltage_monitor_init+0x310>)
 800585e:	2200      	movs	r2, #0
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 8005862:	4b97      	ldr	r3, [pc, #604]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005864:	2200      	movs	r2, #0
 8005866:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 8005868:	4b95      	ldr	r3, [pc, #596]	; (8005ac0 <voltage_monitor_init+0x310>)
 800586a:	2200      	movs	r2, #0
 800586c:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 800586e:	4b94      	ldr	r3, [pc, #592]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005870:	2203      	movs	r2, #3
 8005872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8005876:	4b92      	ldr	r3, [pc, #584]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800587e:	4b90      	ldr	r3, [pc, #576]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 8005886:	4b8e      	ldr	r3, [pc, #568]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005888:	2200      	movs	r2, #0
 800588a:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = 800;			// 50c
 800588c:	4b8c      	ldr	r3, [pc, #560]	; (8005ac0 <voltage_monitor_init+0x310>)
 800588e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005892:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = 7872;		// -20c
 8005894:	4b8a      	ldr	r3, [pc, #552]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005896:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800589a:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 800589c:	4b88      	ldr	r3, [pc, #544]	; (8005ac0 <voltage_monitor_init+0x310>)
 800589e:	2200      	movs	r2, #0
 80058a0:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 80058a2:	4b87      	ldr	r3, [pc, #540]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 80058a8:	4b85      	ldr	r3, [pc, #532]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80058ae:	4b84      	ldr	r3, [pc, #528]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058b0:	2204      	movs	r2, #4
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80058b6:	4b82      	ldr	r3, [pc, #520]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 80058be:	4b80      	ldr	r3, [pc, #512]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 80058c6:	4b7e      	ldr	r3, [pc, #504]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = 800;			// 50c
 80058ce:	4b7c      	ldr	r3, [pc, #496]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80058d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = 7872;		// -20c
 80058d8:	4b79      	ldr	r3, [pc, #484]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058da:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80058de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 80058e2:	4b77      	ldr	r3, [pc, #476]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 80058ea:	4b75      	ldr	r3, [pc, #468]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 80058f2:	4b73      	ldr	r3, [pc, #460]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80058fa:	4b71      	ldr	r3, [pc, #452]	; (8005ac0 <voltage_monitor_init+0x310>)
 80058fc:	2205      	movs	r2, #5
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8005902:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 800590a:	4b6d      	ldr	r3, [pc, #436]	; (8005ac0 <voltage_monitor_init+0x310>)
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 8005912:	4b6b      	ldr	r3, [pc, #428]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005914:	2200      	movs	r2, #0
 8005916:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = 800;			// 50c
 800591a:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <voltage_monitor_init+0x310>)
 800591c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005920:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = 7872;		// -20c
 8005924:	4b66      	ldr	r3, [pc, #408]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005926:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800592a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 800592e:	4b64      	ldr	r3, [pc, #400]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 8005936:	4b62      	ldr	r3, [pc, #392]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005938:	2200      	movs	r2, #0
 800593a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 800593e:	4b60      	ldr	r3, [pc, #384]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005940:	2200      	movs	r2, #0
 8005942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8005946:	4b5e      	ldr	r3, [pc, #376]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005948:	2206      	movs	r2, #6
 800594a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 800594e:	4b5c      	ldr	r3, [pc, #368]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8005956:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 800595e:	4b58      	ldr	r3, [pc, #352]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005960:	2200      	movs	r2, #0
 8005962:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005966:	4b56      	ldr	r3, [pc, #344]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005968:	f242 7210 	movw	r2, #10000	; 0x2710
 800596c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8005970:	4b53      	ldr	r3, [pc, #332]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005972:	2200      	movs	r2, #0
 8005974:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 8005978:	4b51      	ldr	r3, [pc, #324]	; (8005ac0 <voltage_monitor_init+0x310>)
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005982:	2200      	movs	r2, #0
 8005984:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 8005988:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <voltage_monitor_init+0x310>)
 800598a:	2200      	movs	r2, #0
 800598c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8005990:	4b4b      	ldr	r3, [pc, #300]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005992:	2207      	movs	r2, #7
 8005994:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <voltage_monitor_init+0x310>)
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = 0;
 80059a0:	4b47      	ldr	r3, [pc, #284]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 80059a8:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80059b0:	4b43      	ldr	r3, [pc, #268]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059b6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = 0;
 80059ba:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059bc:	2200      	movs	r2, #0
 80059be:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 80059c2:	4b3f      	ldr	r3, [pc, #252]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 80059ca:	4b3d      	ldr	r3, [pc, #244]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 80059d2:	4b3b      	ldr	r3, [pc, #236]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 80059da:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059dc:	2208      	movs	r2, #8
 80059de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 80059e2:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = 0;
 80059ea:	4b35      	ldr	r3, [pc, #212]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 80059f2:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = 3414;			// 2.75v
 80059fa:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <voltage_monitor_init+0x310>)
 80059fc:	f640 5256 	movw	r2, #3414	; 0xd56
 8005a00:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = 2792;			// 2.25v
 8005a04:	4b2e      	ldr	r3, [pc, #184]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a06:	f640 22e8 	movw	r2, #2792	; 0xae8
 8005a0a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 8005a16:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 8005a1e:	4b28      	ldr	r3, [pc, #160]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8005a26:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a28:	2209      	movs	r2, #9
 8005a2a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 8005a3e:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
//	rail_monitor[RAIL_3v3].max_voltage = 4095;			// 3.30v
//	rail_monitor[RAIL_3v3].min_voltage = 3350;			// 2.70v
	rail_monitor[RAIL_3v3].max_voltage = 10000;			// TODO: Erroring out at 1.19v, wait for Sanj
 8005a46:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a48:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a4c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 8005a60:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8005a70:	4b13      	ldr	r3, [pc, #76]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a72:	220a      	movs	r2, #10
 8005a74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = 0;
 8005a80:	4b0f      	ldr	r3, [pc, #60]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 8005a88:	4b0d      	ldr	r3, [pc, #52]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = 4095;			// 3.30v
 8005a90:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a92:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005a96:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = 3350;			// 2.70v
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005a9c:	f640 5216 	movw	r2, #3350	; 0xd16
 8005aa0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 8005aa4:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 8005aac:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 8005ab4:	4b02      	ldr	r3, [pc, #8]	; (8005ac0 <voltage_monitor_init+0x310>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005abc:	e002      	b.n	8005ac4 <voltage_monitor_init+0x314>
 8005abe:	bf00      	nop
 8005ac0:	24001f48 	.word	0x24001f48

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8005ac4:	4b88      	ldr	r3, [pc, #544]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ac6:	220b      	movs	r2, #11
 8005ac8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 8005acc:	4b86      	ldr	r3, [pc, #536]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8005ad4:	4b84      	ldr	r3, [pc, #528]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 8005adc:	4b82      	ldr	r3, [pc, #520]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = 4286;			// 3.45v
 8005ae4:	4b80      	ldr	r3, [pc, #512]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ae6:	f241 02be 	movw	r2, #4286	; 0x10be
 8005aea:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = 3507;			// 2.83v
 8005aee:	4b7e      	ldr	r3, [pc, #504]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005af0:	f640 52b3 	movw	r2, #3507	; 0xdb3
 8005af4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 8005af8:	4b7b      	ldr	r3, [pc, #492]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 8005b00:	4b79      	ldr	r3, [pc, #484]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 8005b08:	4b77      	ldr	r3, [pc, #476]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8005b10:	4b75      	ldr	r3, [pc, #468]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b12:	220c      	movs	r2, #12
 8005b14:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 8005b18:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005b20:	4b71      	ldr	r3, [pc, #452]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 8005b28:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
//	rail_monitor[RAIL_n5v].max_voltage = 4150;			// 3.34v
//	rail_monitor[RAIL_n5v].min_voltage = 3395;			// 2.74v
	rail_monitor[RAIL_n5v].max_voltage = 10000;			// TODO: Erroring out at 0v, wait for Sanj
 8005b30:	4b6d      	ldr	r3, [pc, #436]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b36:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005b3a:	4b6b      	ldr	r3, [pc, #428]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 8005b42:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 8005b4a:	4b67      	ldr	r3, [pc, #412]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 8005b52:	4b65      	ldr	r3, [pc, #404]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005b5a:	4b63      	ldr	r3, [pc, #396]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b5c:	220d      	movs	r2, #13
 8005b5e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 8005b62:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005b6a:	4b5f      	ldr	r3, [pc, #380]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 8005b72:	4b5d      	ldr	r3, [pc, #372]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = 4095;			// 3.30v
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b7c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005b80:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = 3350;			// 2.70v
 8005b84:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b86:	f640 5216 	movw	r2, #3350	; 0xd16
 8005b8a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 8005b8e:	4b56      	ldr	r3, [pc, #344]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 8005b96:	4b54      	ldr	r3, [pc, #336]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 8005b9e:	4b52      	ldr	r3, [pc, #328]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8005ba6:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ba8:	220e      	movs	r2, #14
 8005baa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 8005bae:	4b4e      	ldr	r3, [pc, #312]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8005bb6:	4b4c      	ldr	r3, [pc, #304]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = 4095;		// 3.30v
 8005bc6:	4b48      	ldr	r3, [pc, #288]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bc8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005bcc:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = 3350;		// 2.70v
 8005bd0:	4b45      	ldr	r3, [pc, #276]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bd2:	f640 5216 	movw	r2, #3350	; 0xd16
 8005bd6:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 8005bda:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 8005bea:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005bf2:	4b3d      	ldr	r3, [pc, #244]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bf4:	220f      	movs	r2, #15
 8005bf6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8005c02:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 8005c0a:	4b37      	ldr	r3, [pc, #220]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = 3686;		// 2.97v
 8005c12:	4b35      	ldr	r3, [pc, #212]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c14:	f640 6266 	movw	r2, #3686	; 0xe66
 8005c18:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = 3015;		// 2.43v
 8005c1c:	4b32      	ldr	r3, [pc, #200]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c1e:	f640 32c7 	movw	r2, #3015	; 0xbc7
 8005c22:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 8005c26:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 8005c36:	4b2c      	ldr	r3, [pc, #176]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8005c3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c40:	2210      	movs	r2, #16
 8005c42:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 8005c46:	4b28      	ldr	r3, [pc, #160]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = 3494;		// 2.82v
 8005c5e:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c60:	f640 52a6 	movw	r2, #3494	; 0xda6
 8005c64:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = 2859;		// 2.30v
 8005c68:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c6a:	f640 322b 	movw	r2, #2859	; 0xb2b
 8005c6e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 8005c72:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 8005c82:	4b19      	ldr	r3, [pc, #100]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8005c8a:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c8c:	2211      	movs	r2, #17
 8005c8e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005c92:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = 0;
 8005c9a:	4b13      	ldr	r3, [pc, #76]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 8005ca2:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = 2720;			// -40c NOTE: these are swapped because the conversion from int -> temp is inverse
 8005caa:	4b0f      	ldr	r3, [pc, #60]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005cac:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 8005cb0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = 2023;			// 85c
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005cb6:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8005cba:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 8005cc6:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 8005cce:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <voltage_monitor_init+0x538>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

	status = 1;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	71fb      	strb	r3, [r7, #7]

	return status;
 8005cda:	79fb      	ldrb	r3, [r7, #7]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	24001f48 	.word	0x24001f48

08005cec <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	460a      	mov	r2, r1
 8005cf6:	71fb      	strb	r3, [r7, #7]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <set_rail_monitor_enable+0x34>)
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	4413      	add	r3, r2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	79ba      	ldrb	r2, [r7, #6]
 8005d0c:	701a      	strb	r2, [r3, #0]
	status = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]

	return status;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	24001f48 	.word	0x24001f48

08005d24 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005d30:	463b      	mov	r3, r7
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fa6e 	bl	8004214 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fe fa99 	bl	8004274 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fae6 	bl	8004318 <sample_hk_adc3>
 8005d4c:	893a      	ldrh	r2, [r7, #8]


	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 8005d4e:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d50:	809a      	strh	r2, [r3, #4]
 8005d52:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8005d54:	4b24      	ldr	r3, [pc, #144]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d56:	829a      	strh	r2, [r3, #20]
 8005d58:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8005d5a:	4b23      	ldr	r3, [pc, #140]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d5c:	849a      	strh	r2, [r3, #36]	; 0x24
 8005d5e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8005d60:	4b21      	ldr	r3, [pc, #132]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d62:	869a      	strh	r2, [r3, #52]	; 0x34
 8005d64:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8005d66:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8005d6e:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005d74:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8005d76:	4b1c      	ldr	r3, [pc, #112]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005d7c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d80:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005d84:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8005d86:	4b18      	ldr	r3, [pc, #96]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d88:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005d8c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d90:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005d94:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8005d96:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <set_rail_monitor+0xc4>)
 8005d98:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005d9c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <set_rail_monitor+0xc4>)
 8005da0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005da4:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <set_rail_monitor+0xc4>)
 8005da8:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005dac:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 8005dae:	4b0e      	ldr	r3, [pc, #56]	; (8005de8 <set_rail_monitor+0xc4>)
 8005db0:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8005db4:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005db6:	4b0c      	ldr	r3, [pc, #48]	; (8005de8 <set_rail_monitor+0xc4>)
 8005db8:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 8005dbc:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <set_rail_monitor+0xc4>)
 8005dc0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8005dc4:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005dc6:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <set_rail_monitor+0xc4>)
 8005dc8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 8005dcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <set_rail_monitor+0xc4>)
 8005dd0:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

	status = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	24001f48 	.word	0x24001f48

08005dec <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
	return rail_monitor;
 8005df0:	4b02      	ldr	r3, [pc, #8]	; (8005dfc <get_rail_monitor+0x10>)
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	24001f48 	.word	0x24001f48

08005e00 <convert_ADT7410>:

int16_t convert_ADT7410(int16_t raw) {
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	4603      	mov	r3, r0
 8005e08:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8005e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e16:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000) {
 8005e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	db07      	blt.n	8005e34 <convert_ADT7410+0x34>
        ret -= 8192;
 8005e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e28:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005e5c <convert_ADT7410+0x5c>
 8005e2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e30:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 8005e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e38:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8005e3c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8005e40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005e44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8005e48:	ee17 3a90 	vmov	r3, s15
 8005e4c:	b21b      	sxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	46000000 	.word	0x46000000

08005e60 <in_range>:

uint8_t in_range(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60ba      	str	r2, [r7, #8]
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
 8005e6e:	460b      	mov	r3, r1
 8005e70:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4){
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d008      	beq.n	8005e8a <in_range+0x2a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d005      	beq.n	8005e8a <in_range+0x2a>
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d002      	beq.n	8005e8a <in_range+0x2a>
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d124      	bne.n	8005ed4 <in_range+0x74>
		int16_t converted_max = convert_ADT7410(max);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ffb6 	bl	8005e00 <convert_ADT7410>
 8005e94:	4603      	mov	r3, r0
 8005e96:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff ffaf 	bl	8005e00 <convert_ADT7410>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 8005ea6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff ffa8 	bl	8005e00 <convert_ADT7410>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min) {
 8005eb4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005eb8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	dc07      	bgt.n	8005ed0 <in_range+0x70>
 8005ec0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005ec4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	db01      	blt.n	8005ed0 <in_range+0x70>
			return 1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e00c      	b.n	8005eea <in_range+0x8a>
		}
		return 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e00a      	b.n	8005eea <in_range+0x8a>
	}

	if (raw <= max && raw >= min) {
 8005ed4:	89bb      	ldrh	r3, [r7, #12]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	db05      	blt.n	8005ee8 <in_range+0x88>
 8005edc:	89bb      	ldrh	r3, [r7, #12]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	dc01      	bgt.n	8005ee8 <in_range+0x88>
		return 1;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <in_range+0x8a>
	}
	return 0;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	0000      	movs	r0, r0
 8005ef4:	0000      	movs	r0, r0
	...

08005ef8 <monitor_rails>:


void monitor_rails() {
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005efe:	2300      	movs	r3, #0
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e140      	b.n	8006186 <monitor_rails+0x28e>
		if (rail_monitor[i].is_enabled){
 8005f04:	4aa6      	ldr	r2, [pc, #664]	; (80061a0 <monitor_rails+0x2a8>)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8099 	beq.w	8006048 <monitor_rails+0x150>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 8005f16:	4aa2      	ldr	r2, [pc, #648]	; (80061a0 <monitor_rails+0x2a8>)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	4413      	add	r3, r2
 8005f1e:	7818      	ldrb	r0, [r3, #0]
 8005f20:	4a9f      	ldr	r2, [pc, #636]	; (80061a0 <monitor_rails+0x2a8>)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4413      	add	r3, r2
 8005f28:	3304      	adds	r3, #4
 8005f2a:	8819      	ldrh	r1, [r3, #0]
 8005f2c:	4a9c      	ldr	r2, [pc, #624]	; (80061a0 <monitor_rails+0x2a8>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	4413      	add	r3, r2
 8005f34:	3308      	adds	r3, #8
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	461c      	mov	r4, r3
 8005f3a:	4a99      	ldr	r2, [pc, #612]	; (80061a0 <monitor_rails+0x2a8>)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	4413      	add	r3, r2
 8005f42:	3306      	adds	r3, #6
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	4622      	mov	r2, r4
 8005f48:	f7ff ff8a 	bl	8005e60 <in_range>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 8116 	bne.w	8006180 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8005f54:	4a92      	ldr	r2, [pc, #584]	; (80061a0 <monitor_rails+0x2a8>)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	3301      	adds	r3, #1
 8005f62:	b2d9      	uxtb	r1, r3
 8005f64:	4a8e      	ldr	r2, [pc, #568]	; (80061a0 <monitor_rails+0x2a8>)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	460a      	mov	r2, r1
 8005f70:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 8005f72:	4a8b      	ldr	r2, [pc, #556]	; (80061a0 <monitor_rails+0x2a8>)
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4413      	add	r3, r2
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d022      	beq.n	8005fc8 <monitor_rails+0xd0>
 8005f82:	2b03      	cmp	r3, #3
 8005f84:	dc2e      	bgt.n	8005fe4 <monitor_rails+0xec>
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d002      	beq.n	8005f90 <monitor_rails+0x98>
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d00e      	beq.n	8005fac <monitor_rails+0xb4>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 8005f8e:	e029      	b.n	8005fe4 <monitor_rails+0xec>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 8005f90:	4a83      	ldr	r2, [pc, #524]	; (80061a0 <monitor_rails+0x2a8>)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	4413      	add	r3, r2
 8005f98:	3304      	adds	r3, #4
 8005f9a:	8819      	ldrh	r1, [r3, #0]
 8005f9c:	4a80      	ldr	r2, [pc, #512]	; (80061a0 <monitor_rails+0x2a8>)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	4413      	add	r3, r2
 8005fa4:	330a      	adds	r3, #10
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	801a      	strh	r2, [r3, #0]
					break;
 8005faa:	e01c      	b.n	8005fe6 <monitor_rails+0xee>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8005fac:	4a7c      	ldr	r2, [pc, #496]	; (80061a0 <monitor_rails+0x2a8>)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	8819      	ldrh	r1, [r3, #0]
 8005fb8:	4a79      	ldr	r2, [pc, #484]	; (80061a0 <monitor_rails+0x2a8>)
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	4413      	add	r3, r2
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	801a      	strh	r2, [r3, #0]
					break;
 8005fc6:	e00e      	b.n	8005fe6 <monitor_rails+0xee>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8005fc8:	4a75      	ldr	r2, [pc, #468]	; (80061a0 <monitor_rails+0x2a8>)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	4413      	add	r3, r2
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	8819      	ldrh	r1, [r3, #0]
 8005fd4:	4a72      	ldr	r2, [pc, #456]	; (80061a0 <monitor_rails+0x2a8>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	330e      	adds	r3, #14
 8005fde:	460a      	mov	r2, r1
 8005fe0:	801a      	strh	r2, [r3, #0]
					break;
 8005fe2:	e000      	b.n	8005fe6 <monitor_rails+0xee>
					break;
 8005fe4:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8005fe6:	4a6e      	ldr	r2, [pc, #440]	; (80061a0 <monitor_rails+0x2a8>)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	4413      	add	r3, r2
 8005fee:	3301      	adds	r3, #1
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	f040 80c4 	bne.w	8006180 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005ff8:	4a69      	ldr	r2, [pc, #420]	; (80061a0 <monitor_rails+0x2a8>)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f8ce 	bl	80061a4 <get_rail_name_error_detail>
 8006008:	4603      	mov	r3, r0
 800600a:	727b      	strb	r3, [r7, #9]
					error.category = EC_power_supply_rail;
 800600c:	2300      	movs	r3, #0
 800600e:	723b      	strb	r3, [r7, #8]
					error.OOB_1 = rail_monitor[i].OOB_1;
 8006010:	4a63      	ldr	r2, [pc, #396]	; (80061a0 <monitor_rails+0x2a8>)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	330a      	adds	r3, #10
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	817b      	strh	r3, [r7, #10]
					error.OOB_2 = rail_monitor[i].OOB_2;
 800601e:	4a60      	ldr	r2, [pc, #384]	; (80061a0 <monitor_rails+0x2a8>)
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	4413      	add	r3, r2
 8006026:	330c      	adds	r3, #12
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	81bb      	strh	r3, [r7, #12]
					error.OOB_3 = rail_monitor[i].OOB_3;
 800602c:	4a5c      	ldr	r2, [pc, #368]	; (80061a0 <monitor_rails+0x2a8>)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	330e      	adds	r3, #14
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	81fb      	strh	r3, [r7, #14]

					handle_error(error);
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006042:	f7fb ff8b 	bl	8001f5c <handle_error>
 8006046:	e09b      	b.n	8006180 <monitor_rails+0x288>
			}
		}
		// If the rail monitor isn't enabled...
		else {
			uint16_t tolerance;
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8006048:	4a55      	ldr	r2, [pc, #340]	; (80061a0 <monitor_rails+0x2a8>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	4413      	add	r3, r2
 8006050:	3306      	adds	r3, #6
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800605c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006198 <monitor_rails+0x2a0>
 8006060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006064:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006068:	ee17 3a90 	vmov	r3, s15
 800606c:	827b      	strh	r3, [r7, #18]

			// If it isn't within +10% of its max voltage from 0...
			if (!in_range(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance)) {
 800606e:	4a4c      	ldr	r2, [pc, #304]	; (80061a0 <monitor_rails+0x2a8>)
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	4413      	add	r3, r2
 8006076:	7818      	ldrb	r0, [r3, #0]
 8006078:	4a49      	ldr	r2, [pc, #292]	; (80061a0 <monitor_rails+0x2a8>)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4413      	add	r3, r2
 8006080:	3304      	adds	r3, #4
 8006082:	8819      	ldrh	r1, [r3, #0]
 8006084:	8a7b      	ldrh	r3, [r7, #18]
 8006086:	2200      	movs	r2, #0
 8006088:	f7ff feea 	bl	8005e60 <in_range>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d176      	bne.n	8006180 <monitor_rails+0x288>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 8006092:	4a43      	ldr	r2, [pc, #268]	; (80061a0 <monitor_rails+0x2a8>)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	4413      	add	r3, r2
 800609a:	3301      	adds	r3, #1
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	b2d9      	uxtb	r1, r3
 80060a2:	4a3f      	ldr	r2, [pc, #252]	; (80061a0 <monitor_rails+0x2a8>)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	4413      	add	r3, r2
 80060aa:	3301      	adds	r3, #1
 80060ac:	460a      	mov	r2, r1
 80060ae:	701a      	strb	r2, [r3, #0]

				// Store the voltage each time a rail goes out of bounds
				switch (rail_monitor[i].error_count) {
 80060b0:	4a3b      	ldr	r2, [pc, #236]	; (80061a0 <monitor_rails+0x2a8>)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	3301      	adds	r3, #1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d022      	beq.n	8006106 <monitor_rails+0x20e>
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	dc2e      	bgt.n	8006122 <monitor_rails+0x22a>
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d002      	beq.n	80060ce <monitor_rails+0x1d6>
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d00e      	beq.n	80060ea <monitor_rails+0x1f2>
					break;
				case 3:
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
					break;
				default:
					break;
 80060cc:	e029      	b.n	8006122 <monitor_rails+0x22a>
					rail_monitor[i].OOB_1 = rail_monitor[i].data;
 80060ce:	4a34      	ldr	r2, [pc, #208]	; (80061a0 <monitor_rails+0x2a8>)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	4413      	add	r3, r2
 80060d6:	3304      	adds	r3, #4
 80060d8:	8819      	ldrh	r1, [r3, #0]
 80060da:	4a31      	ldr	r2, [pc, #196]	; (80061a0 <monitor_rails+0x2a8>)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	4413      	add	r3, r2
 80060e2:	330a      	adds	r3, #10
 80060e4:	460a      	mov	r2, r1
 80060e6:	801a      	strh	r2, [r3, #0]
					break;
 80060e8:	e01c      	b.n	8006124 <monitor_rails+0x22c>
					rail_monitor[i].OOB_2 = rail_monitor[i].data;
 80060ea:	4a2d      	ldr	r2, [pc, #180]	; (80061a0 <monitor_rails+0x2a8>)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	4413      	add	r3, r2
 80060f2:	3304      	adds	r3, #4
 80060f4:	8819      	ldrh	r1, [r3, #0]
 80060f6:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <monitor_rails+0x2a8>)
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	330c      	adds	r3, #12
 8006100:	460a      	mov	r2, r1
 8006102:	801a      	strh	r2, [r3, #0]
					break;
 8006104:	e00e      	b.n	8006124 <monitor_rails+0x22c>
					rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8006106:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <monitor_rails+0x2a8>)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	8819      	ldrh	r1, [r3, #0]
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <monitor_rails+0x2a8>)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	4413      	add	r3, r2
 800611a:	330e      	adds	r3, #14
 800611c:	460a      	mov	r2, r1
 800611e:	801a      	strh	r2, [r3, #0]
					break;
 8006120:	e000      	b.n	8006124 <monitor_rails+0x22c>
					break;
 8006122:	bf00      	nop
				}

				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 8006124:	4a1e      	ldr	r2, [pc, #120]	; (80061a0 <monitor_rails+0x2a8>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	4413      	add	r3, r2
 800612c:	3301      	adds	r3, #1
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d125      	bne.n	8006180 <monitor_rails+0x288>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8006134:	4a1a      	ldr	r2, [pc, #104]	; (80061a0 <monitor_rails+0x2a8>)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f000 f830 	bl	80061a4 <get_rail_name_error_detail>
 8006144:	4603      	mov	r3, r0
 8006146:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 8006148:	2300      	movs	r3, #0
 800614a:	703b      	strb	r3, [r7, #0]
					error.OOB_1 = rail_monitor[i].OOB_1;
 800614c:	4a14      	ldr	r2, [pc, #80]	; (80061a0 <monitor_rails+0x2a8>)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	330a      	adds	r3, #10
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	807b      	strh	r3, [r7, #2]
					error.OOB_2 = rail_monitor[i].OOB_2;
 800615a:	4a11      	ldr	r2, [pc, #68]	; (80061a0 <monitor_rails+0x2a8>)
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4413      	add	r3, r2
 8006162:	330c      	adds	r3, #12
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	80bb      	strh	r3, [r7, #4]
					error.OOB_3 = rail_monitor[i].OOB_3;
 8006168:	4a0d      	ldr	r2, [pc, #52]	; (80061a0 <monitor_rails+0x2a8>)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	4413      	add	r3, r2
 8006170:	330e      	adds	r3, #14
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	80fb      	strh	r3, [r7, #6]
					handle_error(error);
 8006176:	463b      	mov	r3, r7
 8006178:	e893 0003 	ldmia.w	r3, {r0, r1}
 800617c:	f7fb feee 	bl	8001f5c <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3301      	adds	r3, #1
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b11      	cmp	r3, #17
 800618a:	f77f aebb 	ble.w	8005f04 <monitor_rails+0xc>
				}
			}
		}
	}
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd90      	pop	{r4, r7, pc}
 8006198:	9999999a 	.word	0x9999999a
 800619c:	3fb99999 	.word	0x3fb99999
 80061a0:	24001f48 	.word	0x24001f48

080061a4 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	2b11      	cmp	r3, #17
 80061b2:	d84b      	bhi.n	800624c <get_rail_name_error_detail+0xa8>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <get_rail_name_error_detail+0x18>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	08006205 	.word	0x08006205
 80061c0:	08006209 	.word	0x08006209
 80061c4:	0800620d 	.word	0x0800620d
 80061c8:	08006211 	.word	0x08006211
 80061cc:	08006215 	.word	0x08006215
 80061d0:	08006219 	.word	0x08006219
 80061d4:	0800621d 	.word	0x0800621d
 80061d8:	08006221 	.word	0x08006221
 80061dc:	08006225 	.word	0x08006225
 80061e0:	08006229 	.word	0x08006229
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	08006231 	.word	0x08006231
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006239 	.word	0x08006239
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	08006241 	.word	0x08006241
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006249 	.word	0x08006249
	case RAIL_vsense:
		return ED_vsense;
 8006204:	2306      	movs	r3, #6
 8006206:	e022      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8006208:	2307      	movs	r3, #7
 800620a:	e020      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 800620c:	2308      	movs	r3, #8
 800620e:	e01e      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8006210:	2309      	movs	r3, #9
 8006212:	e01c      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8006214:	230a      	movs	r3, #10
 8006216:	e01a      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8006218:	230b      	movs	r3, #11
 800621a:	e018      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 800621c:	230c      	movs	r3, #12
 800621e:	e016      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8006220:	230d      	movs	r3, #13
 8006222:	e014      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8006224:	230e      	movs	r3, #14
 8006226:	e012      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8006228:	230f      	movs	r3, #15
 800622a:	e010      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 800622c:	2310      	movs	r3, #16
 800622e:	e00e      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8006230:	2311      	movs	r3, #17
 8006232:	e00c      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8006234:	2312      	movs	r3, #18
 8006236:	e00a      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8006238:	2313      	movs	r3, #19
 800623a:	e008      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 800623c:	2314      	movs	r3, #20
 800623e:	e006      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8006240:	2315      	movs	r3, #21
 8006242:	e004      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8006244:	2316      	movs	r3, #22
 8006246:	e002      	b.n	800624e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8006248:	2317      	movs	r3, #23
 800624a:	e000      	b.n	800624e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 800624c:	231a      	movs	r3, #26
	}
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800625c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006260:	f7fe fce2 	bl	8004c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006264:	480c      	ldr	r0, [pc, #48]	; (8006298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006266:	490d      	ldr	r1, [pc, #52]	; (800629c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006268:	4a0d      	ldr	r2, [pc, #52]	; (80062a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800626a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800626c:	e002      	b.n	8006274 <LoopCopyDataInit>

0800626e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800626e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006272:	3304      	adds	r3, #4

08006274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006278:	d3f9      	bcc.n	800626e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800627c:	4c0a      	ldr	r4, [pc, #40]	; (80062a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800627e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006280:	e001      	b.n	8006286 <LoopFillZerobss>

08006282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006284:	3204      	adds	r2, #4

08006286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006288:	d3fb      	bcc.n	8006282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800628a:	f014 fc55 	bl	801ab38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800628e:	f7fd fa99 	bl	80037c4 <main>
  bx  lr
 8006292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800629c:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 80062a0:	0801ba68 	.word	0x0801ba68
  ldr r2, =_sbss
 80062a4:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 80062a8:	240069e8 	.word	0x240069e8

080062ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062ac:	e7fe      	b.n	80062ac <ADC3_IRQHandler>
	...

080062b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062b6:	2003      	movs	r0, #3
 80062b8:	f001 fd39 	bl	8007d2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062bc:	f008 fecc 	bl	800f058 <HAL_RCC_GetSysClockFreq>
 80062c0:	4602      	mov	r2, r0
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_Init+0x68>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	4913      	ldr	r1, [pc, #76]	; (800631c <HAL_Init+0x6c>)
 80062ce:	5ccb      	ldrb	r3, [r1, r3]
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <HAL_Init+0x68>)
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	4a0e      	ldr	r2, [pc, #56]	; (800631c <HAL_Init+0x6c>)
 80062e4:	5cd3      	ldrb	r3, [r2, r3]
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <HAL_Init+0x70>)
 80062f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062f4:	4a0b      	ldr	r2, [pc, #44]	; (8006324 <HAL_Init+0x74>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062fa:	2005      	movs	r0, #5
 80062fc:	f7fe fa7e 	bl	80047fc <HAL_InitTick>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e002      	b.n	8006310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800630a:	f7fe fa59 	bl	80047c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	58024400 	.word	0x58024400
 800631c:	0801b9b4 	.word	0x0801b9b4
 8006320:	240000c8 	.word	0x240000c8
 8006324:	240000c4 	.word	0x240000c4

08006328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_IncTick+0x20>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <HAL_IncTick+0x24>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4413      	add	r3, r2
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <HAL_IncTick+0x24>)
 800633a:	6013      	str	r3, [r2, #0]
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	240000d0 	.word	0x240000d0
 800634c:	24002068 	.word	0x24002068

08006350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return uwTick;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_GetTick+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	24002068 	.word	0x24002068

08006368 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_GetREVID+0x14>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	0c1b      	lsrs	r3, r3, #16
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	5c001000 	.word	0x5c001000

08006380 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	43db      	mvns	r3, r3
 8006392:	401a      	ands	r2, r3
 8006394:	4904      	ldr	r1, [pc, #16]	; (80063a8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	4313      	orrs	r3, r2
 800639a:	604b      	str	r3, [r1, #4]
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	58000400 	.word	0x58000400

080063ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	609a      	str	r2, [r3, #8]
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3360      	adds	r3, #96	; 0x60
 8006426:	461a      	mov	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	431a      	orrs	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	fa01 f303 	lsl.w	r3, r1, r3
 8006474:	431a      	orrs	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	611a      	str	r2, [r3, #16]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006486:	b480      	push	{r7}
 8006488:	b087      	sub	sp, #28
 800648a:	af00      	add	r7, sp, #0
 800648c:	60f8      	str	r0, [r7, #12]
 800648e:	60b9      	str	r1, [r7, #8]
 8006490:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3360      	adds	r3, #96	; 0x60
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	601a      	str	r2, [r3, #0]
  }
}
 80064b0:	bf00      	nop
 80064b2:	371c      	adds	r7, #28
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3330      	adds	r3, #48	; 0x30
 80064f2:	461a      	mov	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	4413      	add	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	211f      	movs	r1, #31
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	401a      	ands	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	0e9b      	lsrs	r3, r3, #26
 800651a:	f003 011f 	and.w	r1, r3, #31
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	fa01 f303 	lsl.w	r3, r1, r3
 8006528:	431a      	orrs	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f023 0203 	bic.w	r2, r3, #3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60da      	str	r2, [r3, #12]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3314      	adds	r3, #20
 8006570:	461a      	mov	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	0e5b      	lsrs	r3, r3, #25
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	4413      	add	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	0d1b      	lsrs	r3, r3, #20
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	2107      	movs	r1, #7
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	401a      	ands	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	0d1b      	lsrs	r3, r3, #20
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	431a      	orrs	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
	...

080065b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f003 0318 	and.w	r3, r3, #24
 80065da:	4908      	ldr	r1, [pc, #32]	; (80065fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80065dc:	40d9      	lsrs	r1, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	400b      	ands	r3, r1
 80065e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e6:	431a      	orrs	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	000fffff 	.word	0x000fffff

08006600 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 031f 	and.w	r3, r3, #31
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <LL_ADC_DisableDeepPowerDown+0x20>)
 800662a:	4013      	ands	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6093      	str	r3, [r2, #8]
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	5fffffc0 	.word	0x5fffffc0

08006640 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006654:	d101      	bne.n	800665a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	4b05      	ldr	r3, [pc, #20]	; (800668c <LL_ADC_EnableInternalRegulator+0x24>)
 8006676:	4013      	ands	r3, r2
 8006678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	6fffffc0 	.word	0x6fffffc0

08006690 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a4:	d101      	bne.n	80066aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <LL_ADC_Enable+0x24>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	7fffffc0 	.word	0x7fffffc0

080066e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <LL_ADC_Disable+0x24>)
 80066ee:	4013      	ands	r3, r2
 80066f0:	f043 0202 	orr.w	r2, r3, #2
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	7fffffc0 	.word	0x7fffffc0

08006708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <LL_ADC_IsEnabled+0x18>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <LL_ADC_IsEnabled+0x1a>
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d101      	bne.n	8006746 <LL_ADC_IsDisableOngoing+0x18>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <LL_ADC_IsDisableOngoing+0x1a>
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <LL_ADC_REG_StartConversion+0x24>)
 8006762:	4013      	ands	r3, r2
 8006764:	f043 0204 	orr.w	r2, r3, #4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	7fffffc0 	.word	0x7fffffc0

0800677c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b04      	cmp	r3, #4
 800678e:	d101      	bne.n	8006794 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d101      	bne.n	80067ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b089      	sub	sp, #36	; 0x24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e18f      	b.n	8006b02 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7fa f8ab 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff19 	bl	8006640 <LL_ADC_IsDeepPowerDownEnabled>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff feff 	bl	800661c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff ff34 	bl	8006690 <LL_ADC_IsInternalRegulatorEnabled>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d114      	bne.n	8006858 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff ff18 	bl	8006668 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006838:	4b87      	ldr	r3, [pc, #540]	; (8006a58 <HAL_ADC_Init+0x290>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	099b      	lsrs	r3, r3, #6
 800683e:	4a87      	ldr	r2, [pc, #540]	; (8006a5c <HAL_ADC_Init+0x294>)
 8006840:	fba2 2303 	umull	r2, r3, r2, r3
 8006844:	099b      	lsrs	r3, r3, #6
 8006846:	3301      	adds	r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800684a:	e002      	b.n	8006852 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	3b01      	subs	r3, #1
 8006850:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1f9      	bne.n	800684c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ff17 	bl	8006690 <LL_ADC_IsInternalRegulatorEnabled>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	f043 0210 	orr.w	r2, r3, #16
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006878:	f043 0201 	orr.w	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff ff77 	bl	800677c <LL_ADC_REG_IsConversionOngoing>
 800688e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	f040 8129 	bne.w	8006af0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8125 	bne.w	8006af0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff24 	bl	8006708 <LL_ADC_IsEnabled>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d136      	bne.n	8006934 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a65      	ldr	r2, [pc, #404]	; (8006a60 <HAL_ADC_Init+0x298>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_ADC_Init+0x112>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a63      	ldr	r2, [pc, #396]	; (8006a64 <HAL_ADC_Init+0x29c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10e      	bne.n	80068f8 <HAL_ADC_Init+0x130>
 80068da:	4861      	ldr	r0, [pc, #388]	; (8006a60 <HAL_ADC_Init+0x298>)
 80068dc:	f7ff ff14 	bl	8006708 <LL_ADC_IsEnabled>
 80068e0:	4604      	mov	r4, r0
 80068e2:	4860      	ldr	r0, [pc, #384]	; (8006a64 <HAL_ADC_Init+0x29c>)
 80068e4:	f7ff ff10 	bl	8006708 <LL_ADC_IsEnabled>
 80068e8:	4603      	mov	r3, r0
 80068ea:	4323      	orrs	r3, r4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e008      	b.n	800690a <HAL_ADC_Init+0x142>
 80068f8:	485b      	ldr	r0, [pc, #364]	; (8006a68 <HAL_ADC_Init+0x2a0>)
 80068fa:	f7ff ff05 	bl	8006708 <LL_ADC_IsEnabled>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf0c      	ite	eq
 8006904:	2301      	moveq	r3, #1
 8006906:	2300      	movne	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d012      	beq.n	8006934 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a53      	ldr	r2, [pc, #332]	; (8006a60 <HAL_ADC_Init+0x298>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_ADC_Init+0x15a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a51      	ldr	r2, [pc, #324]	; (8006a64 <HAL_ADC_Init+0x29c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_ADC_Init+0x15e>
 8006922:	4a52      	ldr	r2, [pc, #328]	; (8006a6c <HAL_ADC_Init+0x2a4>)
 8006924:	e000      	b.n	8006928 <HAL_ADC_Init+0x160>
 8006926:	4a52      	ldr	r2, [pc, #328]	; (8006a70 <HAL_ADC_Init+0x2a8>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7ff fd3c 	bl	80063ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006934:	f7ff fd18 	bl	8006368 <HAL_GetREVID>
 8006938:	4603      	mov	r3, r0
 800693a:	f241 0203 	movw	r2, #4099	; 0x1003
 800693e:	4293      	cmp	r3, r2
 8006940:	d914      	bls.n	800696c <HAL_ADC_Init+0x1a4>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b10      	cmp	r3, #16
 8006948:	d110      	bne.n	800696c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	7d5b      	ldrb	r3, [r3, #21]
 800694e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006954:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800695a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	7f1b      	ldrb	r3, [r3, #28]
 8006960:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006962:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006964:	f043 030c 	orr.w	r3, r3, #12
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e00d      	b.n	8006988 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	7d5b      	ldrb	r3, [r3, #21]
 8006970:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006976:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800697c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	7f1b      	ldrb	r3, [r3, #28]
 8006982:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006984:	4313      	orrs	r3, r2
 8006986:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	7f1b      	ldrb	r3, [r3, #28]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d106      	bne.n	800699e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	3b01      	subs	r3, #1
 8006996:	045b      	lsls	r3, r3, #17
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	4b2c      	ldr	r3, [pc, #176]	; (8006a74 <HAL_ADC_Init+0x2ac>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	430b      	orrs	r3, r1
 80069cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fed2 	bl	800677c <LL_ADC_REG_IsConversionOngoing>
 80069d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fedf 	bl	80067a2 <LL_ADC_INJ_IsConversionOngoing>
 80069e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d15f      	bne.n	8006aac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d15c      	bne.n	8006aac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7d1b      	ldrb	r3, [r3, #20]
 80069f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80069fc:	4313      	orrs	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	4b1c      	ldr	r3, [pc, #112]	; (8006a78 <HAL_ADC_Init+0x2b0>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	69b9      	ldr	r1, [r7, #24]
 8006a10:	430b      	orrs	r3, r1
 8006a12:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d130      	bne.n	8006a80 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	4b14      	ldr	r3, [pc, #80]	; (8006a7c <HAL_ADC_Init+0x2b4>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a32:	3a01      	subs	r2, #1
 8006a34:	0411      	lsls	r1, r2, #16
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006a40:	4311      	orrs	r1, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a46:	430a      	orrs	r2, r1
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	611a      	str	r2, [r3, #16]
 8006a54:	e01c      	b.n	8006a90 <HAL_ADC_Init+0x2c8>
 8006a56:	bf00      	nop
 8006a58:	240000c4 	.word	0x240000c4
 8006a5c:	053e2d63 	.word	0x053e2d63
 8006a60:	40022000 	.word	0x40022000
 8006a64:	40022100 	.word	0x40022100
 8006a68:	58026000 	.word	0x58026000
 8006a6c:	40022300 	.word	0x40022300
 8006a70:	58026300 	.word	0x58026300
 8006a74:	fff0c003 	.word	0xfff0c003
 8006a78:	ffffbffc 	.word	0xffffbffc
 8006a7c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0201 	bic.w	r2, r2, #1
 8006a8e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fdec 	bl	8007684 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10c      	bne.n	8006ace <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f023 010f 	bic.w	r1, r3, #15
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	1e5a      	subs	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	631a      	str	r2, [r3, #48]	; 0x30
 8006acc:	e007      	b.n	8006ade <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 020f 	bic.w	r2, r2, #15
 8006adc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae2:	f023 0303 	bic.w	r3, r3, #3
 8006ae6:	f043 0201 	orr.w	r2, r3, #1
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	655a      	str	r2, [r3, #84]	; 0x54
 8006aee:	e007      	b.n	8006b00 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af4:	f043 0210 	orr.w	r2, r3, #16
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3724      	adds	r7, #36	; 0x24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd90      	pop	{r4, r7, pc}
 8006b0a:	bf00      	nop

08006b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a55      	ldr	r2, [pc, #340]	; (8006c74 <HAL_ADC_Start_DMA+0x168>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <HAL_ADC_Start_DMA+0x20>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a54      	ldr	r2, [pc, #336]	; (8006c78 <HAL_ADC_Start_DMA+0x16c>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d101      	bne.n	8006b30 <HAL_ADC_Start_DMA+0x24>
 8006b2c:	4b53      	ldr	r3, [pc, #332]	; (8006c7c <HAL_ADC_Start_DMA+0x170>)
 8006b2e:	e000      	b.n	8006b32 <HAL_ADC_Start_DMA+0x26>
 8006b30:	4b53      	ldr	r3, [pc, #332]	; (8006c80 <HAL_ADC_Start_DMA+0x174>)
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7ff fd64 	bl	8006600 <LL_ADC_GetMultimode>
 8006b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff fe1c 	bl	800677c <LL_ADC_REG_IsConversionOngoing>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f040 808c 	bne.w	8006c64 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <HAL_ADC_Start_DMA+0x4e>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e087      	b.n	8006c6a <HAL_ADC_Start_DMA+0x15e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d002      	beq.n	8006b74 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b09      	cmp	r3, #9
 8006b72:	d170      	bne.n	8006c56 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fc07 	bl	8007388 <ADC_Enable>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d163      	bne.n	8006c4c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b88:	4b3e      	ldr	r3, [pc, #248]	; (8006c84 <HAL_ADC_Start_DMA+0x178>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a37      	ldr	r2, [pc, #220]	; (8006c78 <HAL_ADC_Start_DMA+0x16c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d002      	beq.n	8006ba4 <HAL_ADC_Start_DMA+0x98>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	e000      	b.n	8006ba6 <HAL_ADC_Start_DMA+0x9a>
 8006ba4:	4b33      	ldr	r3, [pc, #204]	; (8006c74 <HAL_ADC_Start_DMA+0x168>)
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d002      	beq.n	8006bb4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d006      	beq.n	8006bda <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	f023 0206 	bic.w	r2, r3, #6
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	659a      	str	r2, [r3, #88]	; 0x58
 8006bd8:	e002      	b.n	8006be0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be4:	4a28      	ldr	r2, [pc, #160]	; (8006c88 <HAL_ADC_Start_DMA+0x17c>)
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bec:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <HAL_ADC_Start_DMA+0x180>)
 8006bee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf4:	4a26      	ldr	r2, [pc, #152]	; (8006c90 <HAL_ADC_Start_DMA+0x184>)
 8006bf6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	221c      	movs	r2, #28
 8006bfe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0210 	orr.w	r2, r2, #16
 8006c16:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f7ff fc89 	bl	800653a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3340      	adds	r3, #64	; 0x40
 8006c32:	4619      	mov	r1, r3
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f002 f80e 	bl	8008c58 <HAL_DMA_Start_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fd85 	bl	8006754 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006c4a:	e00d      	b.n	8006c68 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006c54:	e008      	b.n	8006c68 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006c62:	e001      	b.n	8006c68 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006c64:	2302      	movs	r3, #2
 8006c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40022000 	.word	0x40022000
 8006c78:	40022100 	.word	0x40022100
 8006c7c:	40022300 	.word	0x40022300
 8006c80:	58026300 	.word	0x58026300
 8006c84:	fffff0fe 	.word	0xfffff0fe
 8006c88:	0800755b 	.word	0x0800755b
 8006c8c:	08007633 	.word	0x08007633
 8006c90:	0800764f 	.word	0x0800764f

08006c94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006cd0:	b590      	push	{r4, r7, lr}
 8006cd2:	b0a1      	sub	sp, #132	; 0x84
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a65      	ldr	r2, [pc, #404]	; (8006e80 <HAL_ADC_ConfigChannel+0x1b0>)
 8006cea:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_ADC_ConfigChannel+0x2a>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e32e      	b.n	8007358 <HAL_ADC_ConfigChannel+0x688>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff fd38 	bl	800677c <LL_ADC_REG_IsConversionOngoing>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 8313 	bne.w	800733a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	db2c      	blt.n	8006d76 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d108      	bne.n	8006d3a <HAL_ADC_ConfigChannel+0x6a>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	0e9b      	lsrs	r3, r3, #26
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2201      	movs	r2, #1
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	e016      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x98>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d42:	fa93 f3a3 	rbit	r3, r3
 8006d46:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d4a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006d52:	2320      	movs	r3, #32
 8006d54:	e003      	b.n	8006d5e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d58:	fab3 f383 	clz	r3, r3
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2201      	movs	r2, #1
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6812      	ldr	r2, [r2, #0]
 8006d6c:	69d1      	ldr	r1, [r2, #28]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	430b      	orrs	r3, r1
 8006d74:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6859      	ldr	r1, [r3, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7ff fbad 	bl	80064e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fcf5 	bl	800677c <LL_ADC_REG_IsConversionOngoing>
 8006d92:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fd02 	bl	80067a2 <LL_ADC_INJ_IsConversionOngoing>
 8006d9e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 80b8 	bne.w	8006f18 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f040 80b4 	bne.w	8006f18 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6819      	ldr	r1, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f7ff fbcf 	bl	8006560 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006dc2:	4b30      	ldr	r3, [pc, #192]	; (8006e84 <HAL_ADC_ConfigChannel+0x1b4>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dce:	d10b      	bne.n	8006de8 <HAL_ADC_ConfigChannel+0x118>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695a      	ldr	r2, [r3, #20]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	e01d      	b.n	8006e24 <HAL_ADC_ConfigChannel+0x154>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <HAL_ADC_ConfigChannel+0x13e>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695a      	ldr	r2, [r3, #20]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	e00a      	b.n	8006e24 <HAL_ADC_ConfigChannel+0x154>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	089b      	lsrs	r3, r3, #2
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d02c      	beq.n	8006e88 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6919      	ldr	r1, [r3, #16]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e3c:	f7ff faea 	bl	8006414 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6919      	ldr	r1, [r3, #16]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	7e5b      	ldrb	r3, [r3, #25]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d102      	bne.n	8006e56 <HAL_ADC_ConfigChannel+0x186>
 8006e50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e54:	e000      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x188>
 8006e56:	2300      	movs	r3, #0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f7ff fb14 	bl	8006486 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6919      	ldr	r1, [r3, #16]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	7e1b      	ldrb	r3, [r3, #24]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d102      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x1a4>
 8006e6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e72:	e000      	b.n	8006e76 <HAL_ADC_ConfigChannel+0x1a6>
 8006e74:	2300      	movs	r3, #0
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7ff faec 	bl	8006454 <LL_ADC_SetDataRightShift>
 8006e7c:	e04c      	b.n	8006f18 <HAL_ADC_ConfigChannel+0x248>
 8006e7e:	bf00      	nop
 8006e80:	47ff0000 	.word	0x47ff0000
 8006e84:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	069b      	lsls	r3, r3, #26
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d107      	bne.n	8006eac <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006eaa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	069b      	lsls	r3, r3, #26
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d107      	bne.n	8006ed0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ece:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	069b      	lsls	r3, r3, #26
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d107      	bne.n	8006ef4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006ef2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	069b      	lsls	r3, r3, #26
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d107      	bne.n	8006f18 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006f16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff fbf3 	bl	8006708 <LL_ADC_IsEnabled>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f040 8211 	bne.w	800734c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6818      	ldr	r0, [r3, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6819      	ldr	r1, [r3, #0]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	461a      	mov	r2, r3
 8006f38:	f7ff fb3e 	bl	80065b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4aa1      	ldr	r2, [pc, #644]	; (80071c8 <HAL_ADC_ConfigChannel+0x4f8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f040 812e 	bne.w	80071a4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10b      	bne.n	8006f70 <HAL_ADC_ConfigChannel+0x2a0>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	0e9b      	lsrs	r3, r3, #26
 8006f5e:	3301      	adds	r3, #1
 8006f60:	f003 031f 	and.w	r3, r3, #31
 8006f64:	2b09      	cmp	r3, #9
 8006f66:	bf94      	ite	ls
 8006f68:	2301      	movls	r3, #1
 8006f6a:	2300      	movhi	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e019      	b.n	8006fa4 <HAL_ADC_ConfigChannel+0x2d4>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f78:	fa93 f3a3 	rbit	r3, r3
 8006f7c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006f88:	2320      	movs	r3, #32
 8006f8a:	e003      	b.n	8006f94 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8006f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8e:	fab3 f383 	clz	r3, r3
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	3301      	adds	r3, #1
 8006f96:	f003 031f 	and.w	r3, r3, #31
 8006f9a:	2b09      	cmp	r3, #9
 8006f9c:	bf94      	ite	ls
 8006f9e:	2301      	movls	r3, #1
 8006fa0:	2300      	movhi	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d079      	beq.n	800709c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d107      	bne.n	8006fc4 <HAL_ADC_ConfigChannel+0x2f4>
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	0e9b      	lsrs	r3, r3, #26
 8006fba:	3301      	adds	r3, #1
 8006fbc:	069b      	lsls	r3, r3, #26
 8006fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fc2:	e015      	b.n	8006ff0 <HAL_ADC_ConfigChannel+0x320>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fcc:	fa93 f3a3 	rbit	r3, r3
 8006fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8006fdc:	2320      	movs	r3, #32
 8006fde:	e003      	b.n	8006fe8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8006fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe2:	fab3 f383 	clz	r3, r3
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	3301      	adds	r3, #1
 8006fea:	069b      	lsls	r3, r3, #26
 8006fec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x340>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	0e9b      	lsrs	r3, r3, #26
 8007002:	3301      	adds	r3, #1
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f303 	lsl.w	r3, r1, r3
 800700e:	e017      	b.n	8007040 <HAL_ADC_ConfigChannel+0x370>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007018:	fa93 f3a3 	rbit	r3, r3
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8007028:	2320      	movs	r3, #32
 800702a:	e003      	b.n	8007034 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800702c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800702e:	fab3 f383 	clz	r3, r3
 8007032:	b2db      	uxtb	r3, r3
 8007034:	3301      	adds	r3, #1
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	2101      	movs	r1, #1
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	ea42 0103 	orr.w	r1, r2, r3
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <HAL_ADC_ConfigChannel+0x396>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	0e9b      	lsrs	r3, r3, #26
 8007056:	3301      	adds	r3, #1
 8007058:	f003 021f 	and.w	r2, r3, #31
 800705c:	4613      	mov	r3, r2
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	4413      	add	r3, r2
 8007062:	051b      	lsls	r3, r3, #20
 8007064:	e018      	b.n	8007098 <HAL_ADC_ConfigChannel+0x3c8>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800706c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706e:	fa93 f3a3 	rbit	r3, r3
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800707e:	2320      	movs	r3, #32
 8007080:	e003      	b.n	800708a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	fab3 f383 	clz	r3, r3
 8007088:	b2db      	uxtb	r3, r3
 800708a:	3301      	adds	r3, #1
 800708c:	f003 021f 	and.w	r2, r3, #31
 8007090:	4613      	mov	r3, r2
 8007092:	005b      	lsls	r3, r3, #1
 8007094:	4413      	add	r3, r2
 8007096:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007098:	430b      	orrs	r3, r1
 800709a:	e07e      	b.n	800719a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_ADC_ConfigChannel+0x3e8>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0e9b      	lsrs	r3, r3, #26
 80070ae:	3301      	adds	r3, #1
 80070b0:	069b      	lsls	r3, r3, #26
 80070b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070b6:	e015      	b.n	80070e4 <HAL_ADC_ConfigChannel+0x414>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	fa93 f3a3 	rbit	r3, r3
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80070d0:	2320      	movs	r3, #32
 80070d2:	e003      	b.n	80070dc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80070d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d6:	fab3 f383 	clz	r3, r3
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	3301      	adds	r3, #1
 80070de:	069b      	lsls	r3, r3, #26
 80070e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <HAL_ADC_ConfigChannel+0x434>
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0e9b      	lsrs	r3, r3, #26
 80070f6:	3301      	adds	r3, #1
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	2101      	movs	r1, #1
 80070fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007102:	e017      	b.n	8007134 <HAL_ADC_ConfigChannel+0x464>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	fa93 f3a3 	rbit	r3, r3
 8007110:	61bb      	str	r3, [r7, #24]
  return result;
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800711c:	2320      	movs	r3, #32
 800711e:	e003      	b.n	8007128 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	fab3 f383 	clz	r3, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3301      	adds	r3, #1
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2101      	movs	r1, #1
 8007130:	fa01 f303 	lsl.w	r3, r1, r3
 8007134:	ea42 0103 	orr.w	r1, r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10d      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x490>
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	0e9b      	lsrs	r3, r3, #26
 800714a:	3301      	adds	r3, #1
 800714c:	f003 021f 	and.w	r2, r3, #31
 8007150:	4613      	mov	r3, r2
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	4413      	add	r3, r2
 8007156:	3b1e      	subs	r3, #30
 8007158:	051b      	lsls	r3, r3, #20
 800715a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800715e:	e01b      	b.n	8007198 <HAL_ADC_ConfigChannel+0x4c8>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	fa93 f3a3 	rbit	r3, r3
 800716c:	60fb      	str	r3, [r7, #12]
  return result;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007178:	2320      	movs	r3, #32
 800717a:	e003      	b.n	8007184 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	fab3 f383 	clz	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	3301      	adds	r3, #1
 8007186:	f003 021f 	and.w	r2, r3, #31
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	3b1e      	subs	r3, #30
 8007192:	051b      	lsls	r3, r3, #20
 8007194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007198:	430b      	orrs	r3, r1
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	6892      	ldr	r2, [r2, #8]
 800719e:	4619      	mov	r1, r3
 80071a0:	f7ff f9de 	bl	8006560 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f280 80cf 	bge.w	800734c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a06      	ldr	r2, [pc, #24]	; (80071cc <HAL_ADC_ConfigChannel+0x4fc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d004      	beq.n	80071c2 <HAL_ADC_ConfigChannel+0x4f2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a04      	ldr	r2, [pc, #16]	; (80071d0 <HAL_ADC_ConfigChannel+0x500>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d10a      	bne.n	80071d8 <HAL_ADC_ConfigChannel+0x508>
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <HAL_ADC_ConfigChannel+0x504>)
 80071c4:	e009      	b.n	80071da <HAL_ADC_ConfigChannel+0x50a>
 80071c6:	bf00      	nop
 80071c8:	47ff0000 	.word	0x47ff0000
 80071cc:	40022000 	.word	0x40022000
 80071d0:	40022100 	.word	0x40022100
 80071d4:	40022300 	.word	0x40022300
 80071d8:	4b61      	ldr	r3, [pc, #388]	; (8007360 <HAL_ADC_ConfigChannel+0x690>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff f90c 	bl	80063f8 <LL_ADC_GetCommonPathInternalCh>
 80071e0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a5f      	ldr	r2, [pc, #380]	; (8007364 <HAL_ADC_ConfigChannel+0x694>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_ADC_ConfigChannel+0x526>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a5d      	ldr	r2, [pc, #372]	; (8007368 <HAL_ADC_ConfigChannel+0x698>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d10e      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x544>
 80071f6:	485b      	ldr	r0, [pc, #364]	; (8007364 <HAL_ADC_ConfigChannel+0x694>)
 80071f8:	f7ff fa86 	bl	8006708 <LL_ADC_IsEnabled>
 80071fc:	4604      	mov	r4, r0
 80071fe:	485a      	ldr	r0, [pc, #360]	; (8007368 <HAL_ADC_ConfigChannel+0x698>)
 8007200:	f7ff fa82 	bl	8006708 <LL_ADC_IsEnabled>
 8007204:	4603      	mov	r3, r0
 8007206:	4323      	orrs	r3, r4
 8007208:	2b00      	cmp	r3, #0
 800720a:	bf0c      	ite	eq
 800720c:	2301      	moveq	r3, #1
 800720e:	2300      	movne	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	e008      	b.n	8007226 <HAL_ADC_ConfigChannel+0x556>
 8007214:	4855      	ldr	r0, [pc, #340]	; (800736c <HAL_ADC_ConfigChannel+0x69c>)
 8007216:	f7ff fa77 	bl	8006708 <LL_ADC_IsEnabled>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d07d      	beq.n	8007326 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a50      	ldr	r2, [pc, #320]	; (8007370 <HAL_ADC_ConfigChannel+0x6a0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d130      	bne.n	8007296 <HAL_ADC_ConfigChannel+0x5c6>
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d12b      	bne.n	8007296 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a4a      	ldr	r2, [pc, #296]	; (800736c <HAL_ADC_ConfigChannel+0x69c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	f040 8081 	bne.w	800734c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a45      	ldr	r2, [pc, #276]	; (8007364 <HAL_ADC_ConfigChannel+0x694>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_ADC_ConfigChannel+0x58e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a43      	ldr	r2, [pc, #268]	; (8007368 <HAL_ADC_ConfigChannel+0x698>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d101      	bne.n	8007262 <HAL_ADC_ConfigChannel+0x592>
 800725e:	4a45      	ldr	r2, [pc, #276]	; (8007374 <HAL_ADC_ConfigChannel+0x6a4>)
 8007260:	e000      	b.n	8007264 <HAL_ADC_ConfigChannel+0x594>
 8007262:	4a3f      	ldr	r2, [pc, #252]	; (8007360 <HAL_ADC_ConfigChannel+0x690>)
 8007264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007266:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f7ff f8b0 	bl	80063d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007272:	4b41      	ldr	r3, [pc, #260]	; (8007378 <HAL_ADC_ConfigChannel+0x6a8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	4a40      	ldr	r2, [pc, #256]	; (800737c <HAL_ADC_ConfigChannel+0x6ac>)
 800727a:	fba2 2303 	umull	r2, r3, r2, r3
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	3301      	adds	r3, #1
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007286:	e002      	b.n	800728e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3b01      	subs	r3, #1
 800728c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f9      	bne.n	8007288 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007294:	e05a      	b.n	800734c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a39      	ldr	r2, [pc, #228]	; (8007380 <HAL_ADC_ConfigChannel+0x6b0>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d11e      	bne.n	80072de <HAL_ADC_ConfigChannel+0x60e>
 80072a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d119      	bne.n	80072de <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2f      	ldr	r2, [pc, #188]	; (800736c <HAL_ADC_ConfigChannel+0x69c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d14b      	bne.n	800734c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <HAL_ADC_ConfigChannel+0x694>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d004      	beq.n	80072c8 <HAL_ADC_ConfigChannel+0x5f8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a29      	ldr	r2, [pc, #164]	; (8007368 <HAL_ADC_ConfigChannel+0x698>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d101      	bne.n	80072cc <HAL_ADC_ConfigChannel+0x5fc>
 80072c8:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <HAL_ADC_ConfigChannel+0x6a4>)
 80072ca:	e000      	b.n	80072ce <HAL_ADC_ConfigChannel+0x5fe>
 80072cc:	4a24      	ldr	r2, [pc, #144]	; (8007360 <HAL_ADC_ConfigChannel+0x690>)
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072d4:	4619      	mov	r1, r3
 80072d6:	4610      	mov	r0, r2
 80072d8:	f7ff f87b 	bl	80063d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80072dc:	e036      	b.n	800734c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a28      	ldr	r2, [pc, #160]	; (8007384 <HAL_ADC_ConfigChannel+0x6b4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d131      	bne.n	800734c <HAL_ADC_ConfigChannel+0x67c>
 80072e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d12c      	bne.n	800734c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_ADC_ConfigChannel+0x69c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d127      	bne.n	800734c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a18      	ldr	r2, [pc, #96]	; (8007364 <HAL_ADC_ConfigChannel+0x694>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d004      	beq.n	8007310 <HAL_ADC_ConfigChannel+0x640>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a17      	ldr	r2, [pc, #92]	; (8007368 <HAL_ADC_ConfigChannel+0x698>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <HAL_ADC_ConfigChannel+0x644>
 8007310:	4a18      	ldr	r2, [pc, #96]	; (8007374 <HAL_ADC_ConfigChannel+0x6a4>)
 8007312:	e000      	b.n	8007316 <HAL_ADC_ConfigChannel+0x646>
 8007314:	4a12      	ldr	r2, [pc, #72]	; (8007360 <HAL_ADC_ConfigChannel+0x690>)
 8007316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	f7ff f857 	bl	80063d2 <LL_ADC_SetCommonPathInternalCh>
 8007324:	e012      	b.n	800734c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f043 0220 	orr.w	r2, r3, #32
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007338:	e008      	b.n	800734c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	f043 0220 	orr.w	r2, r3, #32
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007354:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007358:	4618      	mov	r0, r3
 800735a:	3784      	adds	r7, #132	; 0x84
 800735c:	46bd      	mov	sp, r7
 800735e:	bd90      	pop	{r4, r7, pc}
 8007360:	58026300 	.word	0x58026300
 8007364:	40022000 	.word	0x40022000
 8007368:	40022100 	.word	0x40022100
 800736c:	58026000 	.word	0x58026000
 8007370:	cb840000 	.word	0xcb840000
 8007374:	40022300 	.word	0x40022300
 8007378:	240000c4 	.word	0x240000c4
 800737c:	053e2d63 	.word	0x053e2d63
 8007380:	c7520000 	.word	0xc7520000
 8007384:	cfb80000 	.word	0xcfb80000

08007388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff f9b7 	bl	8006708 <LL_ADC_IsEnabled>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d16e      	bne.n	800747e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	4b38      	ldr	r3, [pc, #224]	; (8007488 <ADC_Enable+0x100>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	f043 0210 	orr.w	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e05a      	b.n	8007480 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff f972 	bl	80066b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80073d4:	f7fe ffbc 	bl	8006350 <HAL_GetTick>
 80073d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2b      	ldr	r2, [pc, #172]	; (800748c <ADC_Enable+0x104>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <ADC_Enable+0x66>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a29      	ldr	r2, [pc, #164]	; (8007490 <ADC_Enable+0x108>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <ADC_Enable+0x6a>
 80073ee:	4b29      	ldr	r3, [pc, #164]	; (8007494 <ADC_Enable+0x10c>)
 80073f0:	e000      	b.n	80073f4 <ADC_Enable+0x6c>
 80073f2:	4b29      	ldr	r3, [pc, #164]	; (8007498 <ADC_Enable+0x110>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff f903 	bl	8006600 <LL_ADC_GetMultimode>
 80073fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a23      	ldr	r2, [pc, #140]	; (8007490 <ADC_Enable+0x108>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d002      	beq.n	800740c <ADC_Enable+0x84>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	e000      	b.n	800740e <ADC_Enable+0x86>
 800740c:	4b1f      	ldr	r3, [pc, #124]	; (800748c <ADC_Enable+0x104>)
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	4293      	cmp	r3, r2
 8007414:	d02c      	beq.n	8007470 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d130      	bne.n	800747e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800741c:	e028      	b.n	8007470 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff f970 	bl	8006708 <LL_ADC_IsEnabled>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff f940 	bl	80066b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007438:	f7fe ff8a 	bl	8006350 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d914      	bls.n	8007470 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d00d      	beq.n	8007470 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	f043 0210 	orr.w	r2, r3, #16
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007464:	f043 0201 	orr.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e007      	b.n	8007480 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d1cf      	bne.n	800741e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	8000003f 	.word	0x8000003f
 800748c:	40022000 	.word	0x40022000
 8007490:	40022100 	.word	0x40022100
 8007494:	40022300 	.word	0x40022300
 8007498:	58026300 	.word	0x58026300

0800749c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f940 	bl	800672e <LL_ADC_IsDisableOngoing>
 80074ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff f927 	bl	8006708 <LL_ADC_IsEnabled>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d047      	beq.n	8007550 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d144      	bne.n	8007550 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f003 030d 	and.w	r3, r3, #13
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10c      	bne.n	80074ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f7ff f901 	bl	80066e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2203      	movs	r2, #3
 80074e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80074e6:	f7fe ff33 	bl	8006350 <HAL_GetTick>
 80074ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80074ec:	e029      	b.n	8007542 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f043 0210 	orr.w	r2, r3, #16
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e023      	b.n	8007552 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800750a:	f7fe ff21 	bl	8006350 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d914      	bls.n	8007542 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f043 0210 	orr.w	r2, r3, #16
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007536:	f043 0201 	orr.w	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e007      	b.n	8007552 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1dc      	bne.n	800750a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007570:	2b00      	cmp	r3, #0
 8007572:	d14b      	bne.n	800760c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007578:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d021      	beq.n	80075d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe ff92 	bl	80064bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d032      	beq.n	8007604 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d12b      	bne.n	8007604 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11f      	bne.n	8007604 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c8:	f043 0201 	orr.w	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	655a      	str	r2, [r3, #84]	; 0x54
 80075d0:	e018      	b.n	8007604 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d111      	bne.n	8007604 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fc:	f043 0201 	orr.w	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff fb45 	bl	8006c94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800760a:	e00e      	b.n	800762a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff fb4f 	bl	8006cbc <HAL_ADC_ErrorCallback>
}
 800761e:	e004      	b.n	800762a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fb31 	bl	8006ca8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	f043 0204 	orr.w	r2, r3, #4
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fb21 	bl	8006cbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a7a      	ldr	r2, [pc, #488]	; (800787c <ADC_ConfigureBoostMode+0x1f8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <ADC_ConfigureBoostMode+0x1c>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a79      	ldr	r2, [pc, #484]	; (8007880 <ADC_ConfigureBoostMode+0x1fc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d109      	bne.n	80076b4 <ADC_ConfigureBoostMode+0x30>
 80076a0:	4b78      	ldr	r3, [pc, #480]	; (8007884 <ADC_ConfigureBoostMode+0x200>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	bf14      	ite	ne
 80076ac:	2301      	movne	r3, #1
 80076ae:	2300      	moveq	r3, #0
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	e008      	b.n	80076c6 <ADC_ConfigureBoostMode+0x42>
 80076b4:	4b74      	ldr	r3, [pc, #464]	; (8007888 <ADC_ConfigureBoostMode+0x204>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01c      	beq.n	8007704 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80076ca:	f007 fe3f 	bl	800f34c <HAL_RCC_GetHCLKFreq>
 80076ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d8:	d010      	beq.n	80076fc <ADC_ConfigureBoostMode+0x78>
 80076da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076de:	d873      	bhi.n	80077c8 <ADC_ConfigureBoostMode+0x144>
 80076e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e4:	d002      	beq.n	80076ec <ADC_ConfigureBoostMode+0x68>
 80076e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076ea:	d16d      	bne.n	80077c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	60fb      	str	r3, [r7, #12]
        break;
 80076fa:	e068      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	089b      	lsrs	r3, r3, #2
 8007700:	60fb      	str	r3, [r7, #12]
        break;
 8007702:	e064      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007708:	f04f 0100 	mov.w	r1, #0
 800770c:	f009 f8c6 	bl	801089c <HAL_RCCEx_GetPeriphCLKFreq>
 8007710:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800771a:	d051      	beq.n	80077c0 <ADC_ConfigureBoostMode+0x13c>
 800771c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007720:	d854      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 8007722:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007726:	d047      	beq.n	80077b8 <ADC_ConfigureBoostMode+0x134>
 8007728:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800772c:	d84e      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 800772e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007732:	d03d      	beq.n	80077b0 <ADC_ConfigureBoostMode+0x12c>
 8007734:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007738:	d848      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 800773a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800773e:	d033      	beq.n	80077a8 <ADC_ConfigureBoostMode+0x124>
 8007740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007744:	d842      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 8007746:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800774a:	d029      	beq.n	80077a0 <ADC_ConfigureBoostMode+0x11c>
 800774c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007750:	d83c      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 8007752:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007756:	d01a      	beq.n	800778e <ADC_ConfigureBoostMode+0x10a>
 8007758:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800775c:	d836      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 800775e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007762:	d014      	beq.n	800778e <ADC_ConfigureBoostMode+0x10a>
 8007764:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007768:	d830      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 800776a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776e:	d00e      	beq.n	800778e <ADC_ConfigureBoostMode+0x10a>
 8007770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007774:	d82a      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 8007776:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800777a:	d008      	beq.n	800778e <ADC_ConfigureBoostMode+0x10a>
 800777c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007780:	d824      	bhi.n	80077cc <ADC_ConfigureBoostMode+0x148>
 8007782:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007786:	d002      	beq.n	800778e <ADC_ConfigureBoostMode+0x10a>
 8007788:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800778c:	d11e      	bne.n	80077cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	0c9b      	lsrs	r3, r3, #18
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	fbb2 f3f3 	udiv	r3, r2, r3
 800779c:	60fb      	str	r3, [r7, #12]
        break;
 800779e:	e016      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	091b      	lsrs	r3, r3, #4
 80077a4:	60fb      	str	r3, [r7, #12]
        break;
 80077a6:	e012      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	60fb      	str	r3, [r7, #12]
        break;
 80077ae:	e00e      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	099b      	lsrs	r3, r3, #6
 80077b4:	60fb      	str	r3, [r7, #12]
        break;
 80077b6:	e00a      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	09db      	lsrs	r3, r3, #7
 80077bc:	60fb      	str	r3, [r7, #12]
        break;
 80077be:	e006      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	60fb      	str	r3, [r7, #12]
        break;
 80077c6:	e002      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80077c8:	bf00      	nop
 80077ca:	e000      	b.n	80077ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80077cc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80077ce:	f7fe fdcb 	bl	8006368 <HAL_GetREVID>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80077d8:	4293      	cmp	r3, r2
 80077da:	d815      	bhi.n	8007808 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4a2b      	ldr	r2, [pc, #172]	; (800788c <ADC_ConfigureBoostMode+0x208>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d908      	bls.n	80077f6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077f2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80077f4:	e03e      	b.n	8007874 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689a      	ldr	r2, [r3, #8]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007804:	609a      	str	r2, [r3, #8]
}
 8007806:	e035      	b.n	8007874 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a1f      	ldr	r2, [pc, #124]	; (8007890 <ADC_ConfigureBoostMode+0x20c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d808      	bhi.n	8007828 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007824:	609a      	str	r2, [r3, #8]
}
 8007826:	e025      	b.n	8007874 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a1a      	ldr	r2, [pc, #104]	; (8007894 <ADC_ConfigureBoostMode+0x210>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d80a      	bhi.n	8007846 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	e016      	b.n	8007874 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a13      	ldr	r2, [pc, #76]	; (8007898 <ADC_ConfigureBoostMode+0x214>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d80a      	bhi.n	8007864 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007860:	609a      	str	r2, [r3, #8]
}
 8007862:	e007      	b.n	8007874 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689a      	ldr	r2, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007872:	609a      	str	r2, [r3, #8]
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40022000 	.word	0x40022000
 8007880:	40022100 	.word	0x40022100
 8007884:	40022300 	.word	0x40022300
 8007888:	58026300 	.word	0x58026300
 800788c:	01312d00 	.word	0x01312d00
 8007890:	005f5e10 	.word	0x005f5e10
 8007894:	00bebc20 	.word	0x00bebc20
 8007898:	017d7840 	.word	0x017d7840

0800789c <LL_ADC_IsEnabled>:
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <LL_ADC_IsEnabled+0x18>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <LL_ADC_IsEnabled+0x1a>
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <LL_ADC_StartCalibration>:
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <LL_ADC_StartCalibration+0x38>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078e4:	430a      	orrs	r2, r1
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	609a      	str	r2, [r3, #8]
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	3ffeffc0 	.word	0x3ffeffc0

08007900 <LL_ADC_IsCalibrationOnGoing>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007910:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007914:	d101      	bne.n	800791a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <LL_ADC_REG_IsConversionOngoing>:
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b04      	cmp	r3, #4
 800793a:	d101      	bne.n	8007940 <LL_ADC_REG_IsConversionOngoing+0x18>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_ADCEx_Calibration_Start+0x1e>
 800796a:	2302      	movs	r3, #2
 800796c:	e04c      	b.n	8007a08 <HAL_ADCEx_Calibration_Start+0xb8>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff fd90 	bl	800749c <ADC_Disable>
 800797c:	4603      	mov	r3, r0
 800797e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d135      	bne.n	80079f2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798a:	4b21      	ldr	r3, [pc, #132]	; (8007a10 <HAL_ADCEx_Calibration_Start+0xc0>)
 800798c:	4013      	ands	r3, r2
 800798e:	f043 0202 	orr.w	r2, r3, #2
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff90 	bl	80078c4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80079a4:	e014      	b.n	80079d0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	3301      	adds	r3, #1
 80079aa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <HAL_ADCEx_Calibration_Start+0xc4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d30d      	bcc.n	80079d0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b8:	f023 0312 	bic.w	r3, r3, #18
 80079bc:	f043 0210 	orr.w	r2, r3, #16
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e01b      	b.n	8007a08 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7ff ff93 	bl	8007900 <LL_ADC_IsCalibrationOnGoing>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e2      	bne.n	80079a6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e4:	f023 0303 	bic.w	r3, r3, #3
 80079e8:	f043 0201 	orr.w	r2, r3, #1
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	655a      	str	r2, [r3, #84]	; 0x54
 80079f0:	e005      	b.n	80079fe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0210 	orr.w	r2, r3, #16
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	ffffeefd 	.word	0xffffeefd
 8007a14:	25c3f800 	.word	0x25c3f800

08007a18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007a18:	b590      	push	{r4, r7, lr}
 8007a1a:	b09f      	sub	sp, #124	; 0x7c
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a22:	2300      	movs	r3, #0
 8007a24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e0be      	b.n	8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a5c      	ldr	r2, [pc, #368]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d102      	bne.n	8007a56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007a50:	4b5b      	ldr	r3, [pc, #364]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007a52:	60bb      	str	r3, [r7, #8]
 8007a54:	e001      	b.n	8007a5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a64:	f043 0220 	orr.w	r2, r3, #32
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e09d      	b.n	8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff ff54 	bl	8007928 <LL_ADC_REG_IsConversionOngoing>
 8007a80:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff ff4e 	bl	8007928 <LL_ADC_REG_IsConversionOngoing>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d17f      	bne.n	8007b92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d17c      	bne.n	8007b92 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a47      	ldr	r2, [pc, #284]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a46      	ldr	r2, [pc, #280]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d101      	bne.n	8007ab0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007aac:	4b45      	ldr	r3, [pc, #276]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007aae:	e000      	b.n	8007ab2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007ab0:	4b45      	ldr	r3, [pc, #276]	; (8007bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007ab2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d039      	beq.n	8007b30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007acc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a3a      	ldr	r2, [pc, #232]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a38      	ldr	r2, [pc, #224]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10e      	bne.n	8007b00 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007ae2:	4836      	ldr	r0, [pc, #216]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007ae4:	f7ff feda 	bl	800789c <LL_ADC_IsEnabled>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4835      	ldr	r0, [pc, #212]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007aec:	f7ff fed6 	bl	800789c <LL_ADC_IsEnabled>
 8007af0:	4603      	mov	r3, r0
 8007af2:	4323      	orrs	r3, r4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bf0c      	ite	eq
 8007af8:	2301      	moveq	r3, #1
 8007afa:	2300      	movne	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e008      	b.n	8007b12 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8007b00:	4832      	ldr	r0, [pc, #200]	; (8007bcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007b02:	f7ff fecb 	bl	800789c <LL_ADC_IsEnabled>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d047      	beq.n	8007ba6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	4b2d      	ldr	r3, [pc, #180]	; (8007bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	6811      	ldr	r1, [r2, #0]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	6892      	ldr	r2, [r2, #8]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b2e:	e03a      	b.n	8007ba6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d10e      	bne.n	8007b6e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007b50:	481a      	ldr	r0, [pc, #104]	; (8007bbc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007b52:	f7ff fea3 	bl	800789c <LL_ADC_IsEnabled>
 8007b56:	4604      	mov	r4, r0
 8007b58:	4819      	ldr	r0, [pc, #100]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007b5a:	f7ff fe9f 	bl	800789c <LL_ADC_IsEnabled>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4323      	orrs	r3, r4
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf0c      	ite	eq
 8007b66:	2301      	moveq	r3, #1
 8007b68:	2300      	movne	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	e008      	b.n	8007b80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007b6e:	4817      	ldr	r0, [pc, #92]	; (8007bcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007b70:	f7ff fe94 	bl	800789c <LL_ADC_IsEnabled>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf0c      	ite	eq
 8007b7a:	2301      	moveq	r3, #1
 8007b7c:	2300      	movne	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d010      	beq.n	8007ba6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	4b11      	ldr	r3, [pc, #68]	; (8007bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b8e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b90:	e009      	b.n	8007ba6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007ba4:	e000      	b.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ba6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007bb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	377c      	adds	r7, #124	; 0x7c
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd90      	pop	{r4, r7, pc}
 8007bbc:	40022000 	.word	0x40022000
 8007bc0:	40022100 	.word	0x40022100
 8007bc4:	40022300 	.word	0x40022300
 8007bc8:	58026300 	.word	0x58026300
 8007bcc:	58026000 	.word	0x58026000
 8007bd0:	fffff0e0 	.word	0xfffff0e0

08007bd4 <__NVIC_SetPriorityGrouping>:
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <__NVIC_SetPriorityGrouping+0x40>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007bfc:	4b06      	ldr	r3, [pc, #24]	; (8007c18 <__NVIC_SetPriorityGrouping+0x44>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c02:	4a04      	ldr	r2, [pc, #16]	; (8007c14 <__NVIC_SetPriorityGrouping+0x40>)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	60d3      	str	r3, [r2, #12]
}
 8007c08:	bf00      	nop
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000ed00 	.word	0xe000ed00
 8007c18:	05fa0000 	.word	0x05fa0000

08007c1c <__NVIC_GetPriorityGrouping>:
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c20:	4b04      	ldr	r3, [pc, #16]	; (8007c34 <__NVIC_GetPriorityGrouping+0x18>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	f003 0307 	and.w	r3, r3, #7
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	e000ed00 	.word	0xe000ed00

08007c38 <__NVIC_EnableIRQ>:
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	db0b      	blt.n	8007c62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	f003 021f 	and.w	r2, r3, #31
 8007c50:	4907      	ldr	r1, [pc, #28]	; (8007c70 <__NVIC_EnableIRQ+0x38>)
 8007c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	2001      	movs	r0, #1
 8007c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	e000e100 	.word	0xe000e100

08007c74 <__NVIC_SetPriority>:
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	6039      	str	r1, [r7, #0]
 8007c7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	db0a      	blt.n	8007c9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	490c      	ldr	r1, [pc, #48]	; (8007cc0 <__NVIC_SetPriority+0x4c>)
 8007c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c92:	0112      	lsls	r2, r2, #4
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	440b      	add	r3, r1
 8007c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c9c:	e00a      	b.n	8007cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	4908      	ldr	r1, [pc, #32]	; (8007cc4 <__NVIC_SetPriority+0x50>)
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	3b04      	subs	r3, #4
 8007cac:	0112      	lsls	r2, r2, #4
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	761a      	strb	r2, [r3, #24]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	e000e100 	.word	0xe000e100
 8007cc4:	e000ed00 	.word	0xe000ed00

08007cc8 <NVIC_EncodePriority>:
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b089      	sub	sp, #36	; 0x24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f1c3 0307 	rsb	r3, r3, #7
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	bf28      	it	cs
 8007ce6:	2304      	movcs	r3, #4
 8007ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	3304      	adds	r3, #4
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d902      	bls.n	8007cf8 <NVIC_EncodePriority+0x30>
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	3b03      	subs	r3, #3
 8007cf6:	e000      	b.n	8007cfa <NVIC_EncodePriority+0x32>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	fa02 f303 	lsl.w	r3, r2, r3
 8007d06:	43da      	mvns	r2, r3
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	43d9      	mvns	r1, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d20:	4313      	orrs	r3, r2
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3724      	adds	r7, #36	; 0x24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ff4c 	bl	8007bd4 <__NVIC_SetPriorityGrouping>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d52:	f7ff ff63 	bl	8007c1c <__NVIC_GetPriorityGrouping>
 8007d56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	68b9      	ldr	r1, [r7, #8]
 8007d5c:	6978      	ldr	r0, [r7, #20]
 8007d5e:	f7ff ffb3 	bl	8007cc8 <NVIC_EncodePriority>
 8007d62:	4602      	mov	r2, r0
 8007d64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff ff82 	bl	8007c74 <__NVIC_SetPriority>
}
 8007d70:	bf00      	nop
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ff56 	bl	8007c38 <__NVIC_EnableIRQ>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d101      	bne.n	8007da6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e014      	b.n	8007dd0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	791b      	ldrb	r3, [r3, #4]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7f8 ff14 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e046      	b.n	8007e7a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	795b      	ldrb	r3, [r3, #5]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_DAC_Start+0x20>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e040      	b.n	8007e7a <HAL_DAC_Start+0xa2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2202      	movs	r2, #2
 8007e02:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	f003 0310 	and.w	r3, r3, #16
 8007e10:	2201      	movs	r2, #1
 8007e12:	409a      	lsls	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10f      	bne.n	8007e42 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d11d      	bne.n	8007e6c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f042 0201 	orr.w	r2, r2, #1
 8007e3e:	605a      	str	r2, [r3, #4]
 8007e40:	e014      	b.n	8007e6c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2102      	movs	r1, #2
 8007e54:	fa01 f303 	lsl.w	r3, r1, r3
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d107      	bne.n	8007e6c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0202 	orr.w	r2, r2, #2
 8007e6a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0a2      	b.n	8007fe6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	795b      	ldrb	r3, [r3, #5]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_DAC_Start_DMA+0x24>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e09c      	b.n	8007fe6 <HAL_DAC_Start_DMA+0x15e>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d129      	bne.n	8007f12 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	4a4b      	ldr	r2, [pc, #300]	; (8007ff0 <HAL_DAC_Start_DMA+0x168>)
 8007ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	4a4a      	ldr	r2, [pc, #296]	; (8007ff4 <HAL_DAC_Start_DMA+0x16c>)
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	4a49      	ldr	r2, [pc, #292]	; (8007ff8 <HAL_DAC_Start_DMA+0x170>)
 8007ed4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ee4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <HAL_DAC_Start_DMA+0x6c>
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d005      	beq.n	8007efe <HAL_DAC_Start_DMA+0x76>
 8007ef2:	e009      	b.n	8007f08 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3308      	adds	r3, #8
 8007efa:	613b      	str	r3, [r7, #16]
        break;
 8007efc:	e033      	b.n	8007f66 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	330c      	adds	r3, #12
 8007f04:	613b      	str	r3, [r7, #16]
        break;
 8007f06:	e02e      	b.n	8007f66 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	613b      	str	r3, [r7, #16]
        break;
 8007f10:	e029      	b.n	8007f66 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	4a39      	ldr	r2, [pc, #228]	; (8007ffc <HAL_DAC_Start_DMA+0x174>)
 8007f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	4a38      	ldr	r2, [pc, #224]	; (8008000 <HAL_DAC_Start_DMA+0x178>)
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	4a37      	ldr	r2, [pc, #220]	; (8008004 <HAL_DAC_Start_DMA+0x17c>)
 8007f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f38:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <HAL_DAC_Start_DMA+0xc0>
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d005      	beq.n	8007f52 <HAL_DAC_Start_DMA+0xca>
 8007f46:	e009      	b.n	8007f5c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	613b      	str	r3, [r7, #16]
        break;
 8007f50:	e009      	b.n	8007f66 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	3318      	adds	r3, #24
 8007f58:	613b      	str	r3, [r7, #16]
        break;
 8007f5a:	e004      	b.n	8007f66 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	331c      	adds	r3, #28
 8007f62:	613b      	str	r3, [r7, #16]
        break;
 8007f64:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d111      	bne.n	8007f90 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6898      	ldr	r0, [r3, #8]
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	f000 fe67 	bl	8008c58 <HAL_DMA_Start_IT>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
 8007f8e:	e010      	b.n	8007fb2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007f9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	68d8      	ldr	r0, [r3, #12]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	f000 fe55 	bl	8008c58 <HAL_DMA_Start_IT>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2201      	movs	r2, #1
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	e005      	b.n	8007fe4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f043 0204 	orr.w	r2, r3, #4
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	08008479 	.word	0x08008479
 8007ff4:	0800849b 	.word	0x0800849b
 8007ff8:	080084b7 	.word	0x080084b7
 8007ffc:	08008535 	.word	0x08008535
 8008000:	08008557 	.word	0x08008557
 8008004:	08008573 	.word	0x08008573

08008008 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e03e      	b.n	800809a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6819      	ldr	r1, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	43da      	mvns	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	400a      	ands	r2, r1
 8008038:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f003 0310 	and.w	r3, r3, #16
 8008046:	2201      	movs	r2, #1
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	43da      	mvns	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	400a      	ands	r2, r1
 8008054:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10d      	bne.n	8008078 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f863 	bl	800912c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	e00c      	b.n	8008092 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	4618      	mov	r0, r3
 800807e:	f001 f855 	bl	800912c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008090:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01d      	beq.n	8008100 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d018      	beq.n	8008100 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2204      	movs	r2, #4
 80080d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f043 0201 	orr.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80080e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f86f 	bl	80081de <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01d      	beq.n	8008146 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d018      	beq.n	8008146 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2204      	movs	r2, #4
 8008118:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f043 0202 	orr.w	r2, r3, #2
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800812e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800813e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9ed 	bl	8008520 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8008146:	bf00      	nop
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800815c:	2300      	movs	r3, #0
 800815e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e015      	b.n	8008196 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4413      	add	r3, r2
 800817c:	3308      	adds	r3, #8
 800817e:	617b      	str	r3, [r7, #20]
 8008180:	e004      	b.n	800818c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	3314      	adds	r3, #20
 800818a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	461a      	mov	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80081aa:	bf00      	nop
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b083      	sub	sp, #12
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80081d2:	bf00      	nop
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b08a      	sub	sp, #40	; 0x28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_DAC_ConfigChannel+0x1e>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e12a      	b.n	800846c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_DAC_ConfigChannel+0x2e>
 800821e:	2302      	movs	r3, #2
 8008220:	e124      	b.n	800846c <HAL_DAC_ConfigChannel+0x278>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2202      	movs	r2, #2
 800822c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2b04      	cmp	r3, #4
 8008234:	d17a      	bne.n	800832c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008236:	f7fe f88b 	bl	8006350 <HAL_GetTick>
 800823a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d13d      	bne.n	80082be <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008242:	e018      	b.n	8008276 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008244:	f7fe f884 	bl	8006350 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	d911      	bls.n	8008276 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008258:	4b86      	ldr	r3, [pc, #536]	; (8008474 <HAL_DAC_ConfigChannel+0x280>)
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f043 0208 	orr.w	r2, r3, #8
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2203      	movs	r2, #3
 8008270:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e0fa      	b.n	800846c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800827c:	4b7d      	ldr	r3, [pc, #500]	; (8008474 <HAL_DAC_ConfigChannel+0x280>)
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1df      	bne.n	8008244 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	6992      	ldr	r2, [r2, #24]
 800828c:	641a      	str	r2, [r3, #64]	; 0x40
 800828e:	e020      	b.n	80082d2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008290:	f7fe f85e 	bl	8006350 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b01      	cmp	r3, #1
 800829c:	d90f      	bls.n	80082be <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da0a      	bge.n	80082be <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f043 0208 	orr.w	r2, r3, #8
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2203      	movs	r2, #3
 80082b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e0d6      	b.n	800846c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dbe3      	blt.n	8008290 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	6992      	ldr	r2, [r2, #24]
 80082d0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80082e2:	fa01 f303 	lsl.w	r3, r1, r3
 80082e6:	43db      	mvns	r3, r3
 80082e8:	ea02 0103 	and.w	r1, r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	69da      	ldr	r2, [r3, #28]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	409a      	lsls	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f003 0310 	and.w	r3, r3, #16
 800830c:	21ff      	movs	r1, #255	; 0xff
 800830e:	fa01 f303 	lsl.w	r3, r1, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	ea02 0103 	and.w	r1, r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a1a      	ldr	r2, [r3, #32]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	409a      	lsls	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d11d      	bne.n	8008370 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	221f      	movs	r2, #31
 8008344:	fa02 f303 	lsl.w	r3, r2, r3
 8008348:	43db      	mvns	r3, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	4013      	ands	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	fa02 f303 	lsl.w	r3, r2, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4313      	orrs	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69ba      	ldr	r2, [r7, #24]
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f003 0310 	and.w	r3, r3, #16
 800837e:	2207      	movs	r2, #7
 8008380:	fa02 f303 	lsl.w	r3, r2, r3
 8008384:	43db      	mvns	r3, r3
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	4013      	ands	r3, r2
 800838a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008394:	2300      	movs	r3, #0
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
 8008398:	e00f      	b.n	80083ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d102      	bne.n	80083a8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80083a2:	2301      	movs	r3, #1
 80083a4:	627b      	str	r3, [r7, #36]	; 0x24
 80083a6:	e008      	b.n	80083ba <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80083b0:	2301      	movs	r3, #1
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
 80083b4:	e001      	b.n	80083ba <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	4313      	orrs	r3, r2
 80083c8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f003 0310 	and.w	r3, r3, #16
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	fa02 f303 	lsl.w	r3, r2, r3
 80083d6:	69ba      	ldr	r2, [r7, #24]
 80083d8:	4313      	orrs	r3, r2
 80083da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	69ba      	ldr	r2, [r7, #24]
 80083e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6819      	ldr	r1, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083f4:	fa02 f303 	lsl.w	r3, r2, r3
 80083f8:	43da      	mvns	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	400a      	ands	r2, r1
 8008400:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008414:	fa02 f303 	lsl.w	r3, r2, r3
 8008418:	43db      	mvns	r3, r3
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	4013      	ands	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	fa02 f303 	lsl.w	r3, r2, r3
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4313      	orrs	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6819      	ldr	r1, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	22c0      	movs	r2, #192	; 0xc0
 800844e:	fa02 f303 	lsl.w	r3, r2, r3
 8008452:	43da      	mvns	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	400a      	ands	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2201      	movs	r2, #1
 8008460:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	; 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20008000 	.word	0x20008000

08008478 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7ff fe8b 	bl	80081a2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	711a      	strb	r2, [r3, #4]
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fe84 	bl	80081b6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f043 0204 	orr.w	r2, r3, #4
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fe7a 	bl	80081ca <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	711a      	strb	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff ffce 	bl	80084e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	711a      	strb	r2, [r3, #4]
}
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7ff ffc7 	bl	80084f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f043 0204 	orr.w	r2, r3, #4
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff ffbd 	bl	800850c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	711a      	strb	r2, [r3, #4]
}
 8008598:	bf00      	nop
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80085a8:	f7fd fed2 	bl	8006350 <HAL_GetTick>
 80085ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e316      	b.n	8008be6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a66      	ldr	r2, [pc, #408]	; (8008758 <HAL_DMA_Init+0x1b8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d04a      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a65      	ldr	r2, [pc, #404]	; (800875c <HAL_DMA_Init+0x1bc>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d045      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a63      	ldr	r2, [pc, #396]	; (8008760 <HAL_DMA_Init+0x1c0>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d040      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a62      	ldr	r2, [pc, #392]	; (8008764 <HAL_DMA_Init+0x1c4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d03b      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a60      	ldr	r2, [pc, #384]	; (8008768 <HAL_DMA_Init+0x1c8>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d036      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a5f      	ldr	r2, [pc, #380]	; (800876c <HAL_DMA_Init+0x1cc>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d031      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a5d      	ldr	r2, [pc, #372]	; (8008770 <HAL_DMA_Init+0x1d0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d02c      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a5c      	ldr	r2, [pc, #368]	; (8008774 <HAL_DMA_Init+0x1d4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d027      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a5a      	ldr	r2, [pc, #360]	; (8008778 <HAL_DMA_Init+0x1d8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d022      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a59      	ldr	r2, [pc, #356]	; (800877c <HAL_DMA_Init+0x1dc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d01d      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a57      	ldr	r2, [pc, #348]	; (8008780 <HAL_DMA_Init+0x1e0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d018      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a56      	ldr	r2, [pc, #344]	; (8008784 <HAL_DMA_Init+0x1e4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d013      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a54      	ldr	r2, [pc, #336]	; (8008788 <HAL_DMA_Init+0x1e8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d00e      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a53      	ldr	r2, [pc, #332]	; (800878c <HAL_DMA_Init+0x1ec>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a51      	ldr	r2, [pc, #324]	; (8008790 <HAL_DMA_Init+0x1f0>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_DMA_Init+0xb8>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a50      	ldr	r2, [pc, #320]	; (8008794 <HAL_DMA_Init+0x1f4>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d101      	bne.n	800865c <HAL_DMA_Init+0xbc>
 8008658:	2301      	movs	r3, #1
 800865a:	e000      	b.n	800865e <HAL_DMA_Init+0xbe>
 800865c:	2300      	movs	r3, #0
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 813b 	beq.w	80088da <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a37      	ldr	r2, [pc, #220]	; (8008758 <HAL_DMA_Init+0x1b8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d04a      	beq.n	8008714 <HAL_DMA_Init+0x174>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a36      	ldr	r2, [pc, #216]	; (800875c <HAL_DMA_Init+0x1bc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d045      	beq.n	8008714 <HAL_DMA_Init+0x174>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a34      	ldr	r2, [pc, #208]	; (8008760 <HAL_DMA_Init+0x1c0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d040      	beq.n	8008714 <HAL_DMA_Init+0x174>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a33      	ldr	r2, [pc, #204]	; (8008764 <HAL_DMA_Init+0x1c4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d03b      	beq.n	8008714 <HAL_DMA_Init+0x174>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a31      	ldr	r2, [pc, #196]	; (8008768 <HAL_DMA_Init+0x1c8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d036      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a30      	ldr	r2, [pc, #192]	; (800876c <HAL_DMA_Init+0x1cc>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d031      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a2e      	ldr	r2, [pc, #184]	; (8008770 <HAL_DMA_Init+0x1d0>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d02c      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a2d      	ldr	r2, [pc, #180]	; (8008774 <HAL_DMA_Init+0x1d4>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d027      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a2b      	ldr	r2, [pc, #172]	; (8008778 <HAL_DMA_Init+0x1d8>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d022      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a2a      	ldr	r2, [pc, #168]	; (800877c <HAL_DMA_Init+0x1dc>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d01d      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a28      	ldr	r2, [pc, #160]	; (8008780 <HAL_DMA_Init+0x1e0>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d018      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a27      	ldr	r2, [pc, #156]	; (8008784 <HAL_DMA_Init+0x1e4>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a25      	ldr	r2, [pc, #148]	; (8008788 <HAL_DMA_Init+0x1e8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00e      	beq.n	8008714 <HAL_DMA_Init+0x174>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a24      	ldr	r2, [pc, #144]	; (800878c <HAL_DMA_Init+0x1ec>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_DMA_Init+0x174>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a22      	ldr	r2, [pc, #136]	; (8008790 <HAL_DMA_Init+0x1f0>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_DMA_Init+0x174>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a21      	ldr	r2, [pc, #132]	; (8008794 <HAL_DMA_Init+0x1f4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d108      	bne.n	8008726 <HAL_DMA_Init+0x186>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 0201 	bic.w	r2, r2, #1
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	e007      	b.n	8008736 <HAL_DMA_Init+0x196>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0201 	bic.w	r2, r2, #1
 8008734:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008736:	e02f      	b.n	8008798 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008738:	f7fd fe0a 	bl	8006350 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b05      	cmp	r3, #5
 8008744:	d928      	bls.n	8008798 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2203      	movs	r2, #3
 8008750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e246      	b.n	8008be6 <HAL_DMA_Init+0x646>
 8008758:	40020010 	.word	0x40020010
 800875c:	40020028 	.word	0x40020028
 8008760:	40020040 	.word	0x40020040
 8008764:	40020058 	.word	0x40020058
 8008768:	40020070 	.word	0x40020070
 800876c:	40020088 	.word	0x40020088
 8008770:	400200a0 	.word	0x400200a0
 8008774:	400200b8 	.word	0x400200b8
 8008778:	40020410 	.word	0x40020410
 800877c:	40020428 	.word	0x40020428
 8008780:	40020440 	.word	0x40020440
 8008784:	40020458 	.word	0x40020458
 8008788:	40020470 	.word	0x40020470
 800878c:	40020488 	.word	0x40020488
 8008790:	400204a0 	.word	0x400204a0
 8008794:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1c8      	bne.n	8008738 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4b83      	ldr	r3, [pc, #524]	; (80089c0 <HAL_DMA_Init+0x420>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80087be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80087ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d107      	bne.n	80087fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	4313      	orrs	r3, r2
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80087fc:	4b71      	ldr	r3, [pc, #452]	; (80089c4 <HAL_DMA_Init+0x424>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4b71      	ldr	r3, [pc, #452]	; (80089c8 <HAL_DMA_Init+0x428>)
 8008802:	4013      	ands	r3, r2
 8008804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008808:	d328      	bcc.n	800885c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	2b28      	cmp	r3, #40	; 0x28
 8008810:	d903      	bls.n	800881a <HAL_DMA_Init+0x27a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b2e      	cmp	r3, #46	; 0x2e
 8008818:	d917      	bls.n	800884a <HAL_DMA_Init+0x2aa>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	2b3e      	cmp	r3, #62	; 0x3e
 8008820:	d903      	bls.n	800882a <HAL_DMA_Init+0x28a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2b42      	cmp	r3, #66	; 0x42
 8008828:	d90f      	bls.n	800884a <HAL_DMA_Init+0x2aa>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b46      	cmp	r3, #70	; 0x46
 8008830:	d903      	bls.n	800883a <HAL_DMA_Init+0x29a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b48      	cmp	r3, #72	; 0x48
 8008838:	d907      	bls.n	800884a <HAL_DMA_Init+0x2aa>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b4e      	cmp	r3, #78	; 0x4e
 8008840:	d905      	bls.n	800884e <HAL_DMA_Init+0x2ae>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	2b52      	cmp	r3, #82	; 0x52
 8008848:	d801      	bhi.n	800884e <HAL_DMA_Init+0x2ae>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <HAL_DMA_Init+0x2b0>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800885a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0307 	bic.w	r3, r3, #7
 8008872:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b04      	cmp	r3, #4
 8008884:	d117      	bne.n	80088b6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	4313      	orrs	r3, r2
 800888e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00e      	beq.n	80088b6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f002 fb4d 	bl	800af38 <DMA_CheckFifoParam>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d008      	beq.n	80088b6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2240      	movs	r2, #64	; 0x40
 80088a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e197      	b.n	8008be6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fa88 	bl	800add4 <DMA_CalcBaseAndBitshift>
 80088c4:	4603      	mov	r3, r0
 80088c6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088cc:	f003 031f 	and.w	r3, r3, #31
 80088d0:	223f      	movs	r2, #63	; 0x3f
 80088d2:	409a      	lsls	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	609a      	str	r2, [r3, #8]
 80088d8:	e0cd      	b.n	8008a76 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a3b      	ldr	r2, [pc, #236]	; (80089cc <HAL_DMA_Init+0x42c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_DMA_Init+0x38a>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a39      	ldr	r2, [pc, #228]	; (80089d0 <HAL_DMA_Init+0x430>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d01d      	beq.n	800892a <HAL_DMA_Init+0x38a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a38      	ldr	r2, [pc, #224]	; (80089d4 <HAL_DMA_Init+0x434>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_DMA_Init+0x38a>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a36      	ldr	r2, [pc, #216]	; (80089d8 <HAL_DMA_Init+0x438>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_DMA_Init+0x38a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a35      	ldr	r2, [pc, #212]	; (80089dc <HAL_DMA_Init+0x43c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_DMA_Init+0x38a>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a33      	ldr	r2, [pc, #204]	; (80089e0 <HAL_DMA_Init+0x440>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_DMA_Init+0x38a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a32      	ldr	r2, [pc, #200]	; (80089e4 <HAL_DMA_Init+0x444>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_DMA_Init+0x38a>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a30      	ldr	r2, [pc, #192]	; (80089e8 <HAL_DMA_Init+0x448>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <HAL_DMA_Init+0x38e>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <HAL_DMA_Init+0x390>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 8097 	beq.w	8008a64 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a24      	ldr	r2, [pc, #144]	; (80089cc <HAL_DMA_Init+0x42c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d021      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a22      	ldr	r2, [pc, #136]	; (80089d0 <HAL_DMA_Init+0x430>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d01c      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a21      	ldr	r2, [pc, #132]	; (80089d4 <HAL_DMA_Init+0x434>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d017      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a1f      	ldr	r2, [pc, #124]	; (80089d8 <HAL_DMA_Init+0x438>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d012      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a1e      	ldr	r2, [pc, #120]	; (80089dc <HAL_DMA_Init+0x43c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d00d      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1c      	ldr	r2, [pc, #112]	; (80089e0 <HAL_DMA_Init+0x440>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d008      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <HAL_DMA_Init+0x444>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d003      	beq.n	8008984 <HAL_DMA_Init+0x3e4>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <HAL_DMA_Init+0x448>)
 8008982:	4293      	cmp	r3, r2
 8008984:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2202      	movs	r2, #2
 800898a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4b12      	ldr	r3, [pc, #72]	; (80089ec <HAL_DMA_Init+0x44c>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b40      	cmp	r3, #64	; 0x40
 80089ac:	d020      	beq.n	80089f0 <HAL_DMA_Init+0x450>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	2b80      	cmp	r3, #128	; 0x80
 80089b4:	d102      	bne.n	80089bc <HAL_DMA_Init+0x41c>
 80089b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089ba:	e01a      	b.n	80089f2 <HAL_DMA_Init+0x452>
 80089bc:	2300      	movs	r3, #0
 80089be:	e018      	b.n	80089f2 <HAL_DMA_Init+0x452>
 80089c0:	fe10803f 	.word	0xfe10803f
 80089c4:	5c001000 	.word	0x5c001000
 80089c8:	ffff0000 	.word	0xffff0000
 80089cc:	58025408 	.word	0x58025408
 80089d0:	5802541c 	.word	0x5802541c
 80089d4:	58025430 	.word	0x58025430
 80089d8:	58025444 	.word	0x58025444
 80089dc:	58025458 	.word	0x58025458
 80089e0:	5802546c 	.word	0x5802546c
 80089e4:	58025480 	.word	0x58025480
 80089e8:	58025494 	.word	0x58025494
 80089ec:	fffe000f 	.word	0xfffe000f
 80089f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80089f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008a00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008a08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008a10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008a18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008a20:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	4b6e      	ldr	r3, [pc, #440]	; (8008bf0 <HAL_DMA_Init+0x650>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	4a6e      	ldr	r2, [pc, #440]	; (8008bf4 <HAL_DMA_Init+0x654>)
 8008a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	009a      	lsls	r2, r3, #2
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f002 f9c3 	bl	800add4 <DMA_CalcBaseAndBitshift>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	409a      	lsls	r2, r3
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	605a      	str	r2, [r3, #4]
 8008a62:	e008      	b.n	8008a76 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2240      	movs	r2, #64	; 0x40
 8008a68:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e0b7      	b.n	8008be6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a5f      	ldr	r2, [pc, #380]	; (8008bf8 <HAL_DMA_Init+0x658>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d072      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a5d      	ldr	r2, [pc, #372]	; (8008bfc <HAL_DMA_Init+0x65c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d06d      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a5c      	ldr	r2, [pc, #368]	; (8008c00 <HAL_DMA_Init+0x660>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d068      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a5a      	ldr	r2, [pc, #360]	; (8008c04 <HAL_DMA_Init+0x664>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d063      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a59      	ldr	r2, [pc, #356]	; (8008c08 <HAL_DMA_Init+0x668>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d05e      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a57      	ldr	r2, [pc, #348]	; (8008c0c <HAL_DMA_Init+0x66c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d059      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a56      	ldr	r2, [pc, #344]	; (8008c10 <HAL_DMA_Init+0x670>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d054      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a54      	ldr	r2, [pc, #336]	; (8008c14 <HAL_DMA_Init+0x674>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d04f      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a53      	ldr	r2, [pc, #332]	; (8008c18 <HAL_DMA_Init+0x678>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d04a      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a51      	ldr	r2, [pc, #324]	; (8008c1c <HAL_DMA_Init+0x67c>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d045      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a50      	ldr	r2, [pc, #320]	; (8008c20 <HAL_DMA_Init+0x680>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d040      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a4e      	ldr	r2, [pc, #312]	; (8008c24 <HAL_DMA_Init+0x684>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d03b      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a4d      	ldr	r2, [pc, #308]	; (8008c28 <HAL_DMA_Init+0x688>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d036      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a4b      	ldr	r2, [pc, #300]	; (8008c2c <HAL_DMA_Init+0x68c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d031      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a4a      	ldr	r2, [pc, #296]	; (8008c30 <HAL_DMA_Init+0x690>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d02c      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a48      	ldr	r2, [pc, #288]	; (8008c34 <HAL_DMA_Init+0x694>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d027      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a47      	ldr	r2, [pc, #284]	; (8008c38 <HAL_DMA_Init+0x698>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d022      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a45      	ldr	r2, [pc, #276]	; (8008c3c <HAL_DMA_Init+0x69c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d01d      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a44      	ldr	r2, [pc, #272]	; (8008c40 <HAL_DMA_Init+0x6a0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d018      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a42      	ldr	r2, [pc, #264]	; (8008c44 <HAL_DMA_Init+0x6a4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a41      	ldr	r2, [pc, #260]	; (8008c48 <HAL_DMA_Init+0x6a8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00e      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a3f      	ldr	r2, [pc, #252]	; (8008c4c <HAL_DMA_Init+0x6ac>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d009      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a3e      	ldr	r2, [pc, #248]	; (8008c50 <HAL_DMA_Init+0x6b0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d004      	beq.n	8008b66 <HAL_DMA_Init+0x5c6>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a3c      	ldr	r2, [pc, #240]	; (8008c54 <HAL_DMA_Init+0x6b4>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d101      	bne.n	8008b6a <HAL_DMA_Init+0x5ca>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <HAL_DMA_Init+0x5cc>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d032      	beq.n	8008bd6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f002 fa5d 	bl	800b030 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	2b80      	cmp	r3, #128	; 0x80
 8008b7c:	d102      	bne.n	8008b84 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b8c:	b2d2      	uxtb	r2, r2
 8008b8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b98:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d010      	beq.n	8008bc4 <HAL_DMA_Init+0x624>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2b08      	cmp	r3, #8
 8008ba8:	d80c      	bhi.n	8008bc4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f002 fada 	bl	800b164 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008bc0:	605a      	str	r2, [r3, #4]
 8008bc2:	e008      	b.n	8008bd6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	a7fdabf8 	.word	0xa7fdabf8
 8008bf4:	cccccccd 	.word	0xcccccccd
 8008bf8:	40020010 	.word	0x40020010
 8008bfc:	40020028 	.word	0x40020028
 8008c00:	40020040 	.word	0x40020040
 8008c04:	40020058 	.word	0x40020058
 8008c08:	40020070 	.word	0x40020070
 8008c0c:	40020088 	.word	0x40020088
 8008c10:	400200a0 	.word	0x400200a0
 8008c14:	400200b8 	.word	0x400200b8
 8008c18:	40020410 	.word	0x40020410
 8008c1c:	40020428 	.word	0x40020428
 8008c20:	40020440 	.word	0x40020440
 8008c24:	40020458 	.word	0x40020458
 8008c28:	40020470 	.word	0x40020470
 8008c2c:	40020488 	.word	0x40020488
 8008c30:	400204a0 	.word	0x400204a0
 8008c34:	400204b8 	.word	0x400204b8
 8008c38:	58025408 	.word	0x58025408
 8008c3c:	5802541c 	.word	0x5802541c
 8008c40:	58025430 	.word	0x58025430
 8008c44:	58025444 	.word	0x58025444
 8008c48:	58025458 	.word	0x58025458
 8008c4c:	5802546c 	.word	0x5802546c
 8008c50:	58025480 	.word	0x58025480
 8008c54:	58025494 	.word	0x58025494

08008c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e226      	b.n	80090c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <HAL_DMA_Start_IT+0x2a>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e21f      	b.n	80090c2 <HAL_DMA_Start_IT+0x46a>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	f040 820a 	bne.w	80090ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a68      	ldr	r2, [pc, #416]	; (8008e4c <HAL_DMA_Start_IT+0x1f4>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d04a      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a66      	ldr	r2, [pc, #408]	; (8008e50 <HAL_DMA_Start_IT+0x1f8>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d045      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a65      	ldr	r2, [pc, #404]	; (8008e54 <HAL_DMA_Start_IT+0x1fc>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d040      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a63      	ldr	r2, [pc, #396]	; (8008e58 <HAL_DMA_Start_IT+0x200>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d03b      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a62      	ldr	r2, [pc, #392]	; (8008e5c <HAL_DMA_Start_IT+0x204>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d036      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a60      	ldr	r2, [pc, #384]	; (8008e60 <HAL_DMA_Start_IT+0x208>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d031      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a5f      	ldr	r2, [pc, #380]	; (8008e64 <HAL_DMA_Start_IT+0x20c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d02c      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a5d      	ldr	r2, [pc, #372]	; (8008e68 <HAL_DMA_Start_IT+0x210>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d027      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a5c      	ldr	r2, [pc, #368]	; (8008e6c <HAL_DMA_Start_IT+0x214>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d022      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a5a      	ldr	r2, [pc, #360]	; (8008e70 <HAL_DMA_Start_IT+0x218>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d01d      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a59      	ldr	r2, [pc, #356]	; (8008e74 <HAL_DMA_Start_IT+0x21c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d018      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a57      	ldr	r2, [pc, #348]	; (8008e78 <HAL_DMA_Start_IT+0x220>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d013      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a56      	ldr	r2, [pc, #344]	; (8008e7c <HAL_DMA_Start_IT+0x224>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d00e      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a54      	ldr	r2, [pc, #336]	; (8008e80 <HAL_DMA_Start_IT+0x228>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d009      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a53      	ldr	r2, [pc, #332]	; (8008e84 <HAL_DMA_Start_IT+0x22c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d004      	beq.n	8008d46 <HAL_DMA_Start_IT+0xee>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a51      	ldr	r2, [pc, #324]	; (8008e88 <HAL_DMA_Start_IT+0x230>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d108      	bne.n	8008d58 <HAL_DMA_Start_IT+0x100>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0201 	bic.w	r2, r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e007      	b.n	8008d68 <HAL_DMA_Start_IT+0x110>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0201 	bic.w	r2, r2, #1
 8008d66:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f001 fe84 	bl	800aa7c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a34      	ldr	r2, [pc, #208]	; (8008e4c <HAL_DMA_Start_IT+0x1f4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d04a      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a33      	ldr	r2, [pc, #204]	; (8008e50 <HAL_DMA_Start_IT+0x1f8>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d045      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a31      	ldr	r2, [pc, #196]	; (8008e54 <HAL_DMA_Start_IT+0x1fc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d040      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a30      	ldr	r2, [pc, #192]	; (8008e58 <HAL_DMA_Start_IT+0x200>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d03b      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a2e      	ldr	r2, [pc, #184]	; (8008e5c <HAL_DMA_Start_IT+0x204>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d036      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a2d      	ldr	r2, [pc, #180]	; (8008e60 <HAL_DMA_Start_IT+0x208>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d031      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a2b      	ldr	r2, [pc, #172]	; (8008e64 <HAL_DMA_Start_IT+0x20c>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d02c      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a2a      	ldr	r2, [pc, #168]	; (8008e68 <HAL_DMA_Start_IT+0x210>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d027      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a28      	ldr	r2, [pc, #160]	; (8008e6c <HAL_DMA_Start_IT+0x214>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d022      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a27      	ldr	r2, [pc, #156]	; (8008e70 <HAL_DMA_Start_IT+0x218>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d01d      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a25      	ldr	r2, [pc, #148]	; (8008e74 <HAL_DMA_Start_IT+0x21c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d018      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a24      	ldr	r2, [pc, #144]	; (8008e78 <HAL_DMA_Start_IT+0x220>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d013      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a22      	ldr	r2, [pc, #136]	; (8008e7c <HAL_DMA_Start_IT+0x224>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00e      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a21      	ldr	r2, [pc, #132]	; (8008e80 <HAL_DMA_Start_IT+0x228>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d009      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a1f      	ldr	r2, [pc, #124]	; (8008e84 <HAL_DMA_Start_IT+0x22c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d004      	beq.n	8008e14 <HAL_DMA_Start_IT+0x1bc>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a1e      	ldr	r2, [pc, #120]	; (8008e88 <HAL_DMA_Start_IT+0x230>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d101      	bne.n	8008e18 <HAL_DMA_Start_IT+0x1c0>
 8008e14:	2301      	movs	r3, #1
 8008e16:	e000      	b.n	8008e1a <HAL_DMA_Start_IT+0x1c2>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d036      	beq.n	8008e8c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f023 021e 	bic.w	r2, r3, #30
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f042 0216 	orr.w	r2, r2, #22
 8008e30:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d03e      	beq.n	8008eb8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f042 0208 	orr.w	r2, r2, #8
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	e035      	b.n	8008eb8 <HAL_DMA_Start_IT+0x260>
 8008e4c:	40020010 	.word	0x40020010
 8008e50:	40020028 	.word	0x40020028
 8008e54:	40020040 	.word	0x40020040
 8008e58:	40020058 	.word	0x40020058
 8008e5c:	40020070 	.word	0x40020070
 8008e60:	40020088 	.word	0x40020088
 8008e64:	400200a0 	.word	0x400200a0
 8008e68:	400200b8 	.word	0x400200b8
 8008e6c:	40020410 	.word	0x40020410
 8008e70:	40020428 	.word	0x40020428
 8008e74:	40020440 	.word	0x40020440
 8008e78:	40020458 	.word	0x40020458
 8008e7c:	40020470 	.word	0x40020470
 8008e80:	40020488 	.word	0x40020488
 8008e84:	400204a0 	.word	0x400204a0
 8008e88:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f023 020e 	bic.w	r2, r3, #14
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 020a 	orr.w	r2, r2, #10
 8008e9e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0204 	orr.w	r2, r2, #4
 8008eb6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a83      	ldr	r2, [pc, #524]	; (80090cc <HAL_DMA_Start_IT+0x474>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d072      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a82      	ldr	r2, [pc, #520]	; (80090d0 <HAL_DMA_Start_IT+0x478>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d06d      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a80      	ldr	r2, [pc, #512]	; (80090d4 <HAL_DMA_Start_IT+0x47c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d068      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a7f      	ldr	r2, [pc, #508]	; (80090d8 <HAL_DMA_Start_IT+0x480>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d063      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a7d      	ldr	r2, [pc, #500]	; (80090dc <HAL_DMA_Start_IT+0x484>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d05e      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a7c      	ldr	r2, [pc, #496]	; (80090e0 <HAL_DMA_Start_IT+0x488>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d059      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a7a      	ldr	r2, [pc, #488]	; (80090e4 <HAL_DMA_Start_IT+0x48c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d054      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a79      	ldr	r2, [pc, #484]	; (80090e8 <HAL_DMA_Start_IT+0x490>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d04f      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a77      	ldr	r2, [pc, #476]	; (80090ec <HAL_DMA_Start_IT+0x494>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d04a      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a76      	ldr	r2, [pc, #472]	; (80090f0 <HAL_DMA_Start_IT+0x498>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d045      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a74      	ldr	r2, [pc, #464]	; (80090f4 <HAL_DMA_Start_IT+0x49c>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d040      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a73      	ldr	r2, [pc, #460]	; (80090f8 <HAL_DMA_Start_IT+0x4a0>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d03b      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a71      	ldr	r2, [pc, #452]	; (80090fc <HAL_DMA_Start_IT+0x4a4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d036      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a70      	ldr	r2, [pc, #448]	; (8009100 <HAL_DMA_Start_IT+0x4a8>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d031      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a6e      	ldr	r2, [pc, #440]	; (8009104 <HAL_DMA_Start_IT+0x4ac>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d02c      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a6d      	ldr	r2, [pc, #436]	; (8009108 <HAL_DMA_Start_IT+0x4b0>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d027      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a6b      	ldr	r2, [pc, #428]	; (800910c <HAL_DMA_Start_IT+0x4b4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d022      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a6a      	ldr	r2, [pc, #424]	; (8009110 <HAL_DMA_Start_IT+0x4b8>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d01d      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a68      	ldr	r2, [pc, #416]	; (8009114 <HAL_DMA_Start_IT+0x4bc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d018      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a67      	ldr	r2, [pc, #412]	; (8009118 <HAL_DMA_Start_IT+0x4c0>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a65      	ldr	r2, [pc, #404]	; (800911c <HAL_DMA_Start_IT+0x4c4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d00e      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a64      	ldr	r2, [pc, #400]	; (8009120 <HAL_DMA_Start_IT+0x4c8>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d009      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a62      	ldr	r2, [pc, #392]	; (8009124 <HAL_DMA_Start_IT+0x4cc>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_DMA_Start_IT+0x350>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a61      	ldr	r2, [pc, #388]	; (8009128 <HAL_DMA_Start_IT+0x4d0>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d101      	bne.n	8008fac <HAL_DMA_Start_IT+0x354>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e000      	b.n	8008fae <HAL_DMA_Start_IT+0x356>
 8008fac:	2300      	movs	r3, #0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01a      	beq.n	8008fe8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d007      	beq.n	8008fd0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d007      	beq.n	8008fe8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fe6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a37      	ldr	r2, [pc, #220]	; (80090cc <HAL_DMA_Start_IT+0x474>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d04a      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a36      	ldr	r2, [pc, #216]	; (80090d0 <HAL_DMA_Start_IT+0x478>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d045      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a34      	ldr	r2, [pc, #208]	; (80090d4 <HAL_DMA_Start_IT+0x47c>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d040      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a33      	ldr	r2, [pc, #204]	; (80090d8 <HAL_DMA_Start_IT+0x480>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d03b      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a31      	ldr	r2, [pc, #196]	; (80090dc <HAL_DMA_Start_IT+0x484>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d036      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a30      	ldr	r2, [pc, #192]	; (80090e0 <HAL_DMA_Start_IT+0x488>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d031      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a2e      	ldr	r2, [pc, #184]	; (80090e4 <HAL_DMA_Start_IT+0x48c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d02c      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a2d      	ldr	r2, [pc, #180]	; (80090e8 <HAL_DMA_Start_IT+0x490>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d027      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <HAL_DMA_Start_IT+0x494>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d022      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a2a      	ldr	r2, [pc, #168]	; (80090f0 <HAL_DMA_Start_IT+0x498>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d01d      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a28      	ldr	r2, [pc, #160]	; (80090f4 <HAL_DMA_Start_IT+0x49c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d018      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a27      	ldr	r2, [pc, #156]	; (80090f8 <HAL_DMA_Start_IT+0x4a0>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d013      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a25      	ldr	r2, [pc, #148]	; (80090fc <HAL_DMA_Start_IT+0x4a4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00e      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a24      	ldr	r2, [pc, #144]	; (8009100 <HAL_DMA_Start_IT+0x4a8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d009      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a22      	ldr	r2, [pc, #136]	; (8009104 <HAL_DMA_Start_IT+0x4ac>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <HAL_DMA_Start_IT+0x430>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a21      	ldr	r2, [pc, #132]	; (8009108 <HAL_DMA_Start_IT+0x4b0>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d108      	bne.n	800909a <HAL_DMA_Start_IT+0x442>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0201 	orr.w	r2, r2, #1
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e012      	b.n	80090c0 <HAL_DMA_Start_IT+0x468>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f042 0201 	orr.w	r2, r2, #1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e009      	b.n	80090c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3718      	adds	r7, #24
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	40020010 	.word	0x40020010
 80090d0:	40020028 	.word	0x40020028
 80090d4:	40020040 	.word	0x40020040
 80090d8:	40020058 	.word	0x40020058
 80090dc:	40020070 	.word	0x40020070
 80090e0:	40020088 	.word	0x40020088
 80090e4:	400200a0 	.word	0x400200a0
 80090e8:	400200b8 	.word	0x400200b8
 80090ec:	40020410 	.word	0x40020410
 80090f0:	40020428 	.word	0x40020428
 80090f4:	40020440 	.word	0x40020440
 80090f8:	40020458 	.word	0x40020458
 80090fc:	40020470 	.word	0x40020470
 8009100:	40020488 	.word	0x40020488
 8009104:	400204a0 	.word	0x400204a0
 8009108:	400204b8 	.word	0x400204b8
 800910c:	58025408 	.word	0x58025408
 8009110:	5802541c 	.word	0x5802541c
 8009114:	58025430 	.word	0x58025430
 8009118:	58025444 	.word	0x58025444
 800911c:	58025458 	.word	0x58025458
 8009120:	5802546c 	.word	0x5802546c
 8009124:	58025480 	.word	0x58025480
 8009128:	58025494 	.word	0x58025494

0800912c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009134:	f7fd f90c 	bl	8006350 <HAL_GetTick>
 8009138:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e2dc      	b.n	80096fe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d008      	beq.n	8009162 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2280      	movs	r2, #128	; 0x80
 8009154:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800915e:	2301      	movs	r3, #1
 8009160:	e2cd      	b.n	80096fe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a76      	ldr	r2, [pc, #472]	; (8009340 <HAL_DMA_Abort+0x214>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d04a      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a74      	ldr	r2, [pc, #464]	; (8009344 <HAL_DMA_Abort+0x218>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d045      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a73      	ldr	r2, [pc, #460]	; (8009348 <HAL_DMA_Abort+0x21c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d040      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a71      	ldr	r2, [pc, #452]	; (800934c <HAL_DMA_Abort+0x220>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d03b      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a70      	ldr	r2, [pc, #448]	; (8009350 <HAL_DMA_Abort+0x224>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d036      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a6e      	ldr	r2, [pc, #440]	; (8009354 <HAL_DMA_Abort+0x228>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d031      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a6d      	ldr	r2, [pc, #436]	; (8009358 <HAL_DMA_Abort+0x22c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d02c      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a6b      	ldr	r2, [pc, #428]	; (800935c <HAL_DMA_Abort+0x230>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d027      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a6a      	ldr	r2, [pc, #424]	; (8009360 <HAL_DMA_Abort+0x234>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d022      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a68      	ldr	r2, [pc, #416]	; (8009364 <HAL_DMA_Abort+0x238>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01d      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a67      	ldr	r2, [pc, #412]	; (8009368 <HAL_DMA_Abort+0x23c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d018      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a65      	ldr	r2, [pc, #404]	; (800936c <HAL_DMA_Abort+0x240>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a64      	ldr	r2, [pc, #400]	; (8009370 <HAL_DMA_Abort+0x244>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00e      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a62      	ldr	r2, [pc, #392]	; (8009374 <HAL_DMA_Abort+0x248>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a61      	ldr	r2, [pc, #388]	; (8009378 <HAL_DMA_Abort+0x24c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_DMA_Abort+0xd6>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a5f      	ldr	r2, [pc, #380]	; (800937c <HAL_DMA_Abort+0x250>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d101      	bne.n	8009206 <HAL_DMA_Abort+0xda>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <HAL_DMA_Abort+0xdc>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d013      	beq.n	8009234 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f022 021e 	bic.w	r2, r2, #30
 800921a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800922a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	e00a      	b.n	800924a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 020e 	bic.w	r2, r2, #14
 8009242:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a3c      	ldr	r2, [pc, #240]	; (8009340 <HAL_DMA_Abort+0x214>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d072      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a3a      	ldr	r2, [pc, #232]	; (8009344 <HAL_DMA_Abort+0x218>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d06d      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a39      	ldr	r2, [pc, #228]	; (8009348 <HAL_DMA_Abort+0x21c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d068      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a37      	ldr	r2, [pc, #220]	; (800934c <HAL_DMA_Abort+0x220>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d063      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a36      	ldr	r2, [pc, #216]	; (8009350 <HAL_DMA_Abort+0x224>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d05e      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a34      	ldr	r2, [pc, #208]	; (8009354 <HAL_DMA_Abort+0x228>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d059      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a33      	ldr	r2, [pc, #204]	; (8009358 <HAL_DMA_Abort+0x22c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d054      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a31      	ldr	r2, [pc, #196]	; (800935c <HAL_DMA_Abort+0x230>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d04f      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a30      	ldr	r2, [pc, #192]	; (8009360 <HAL_DMA_Abort+0x234>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d04a      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a2e      	ldr	r2, [pc, #184]	; (8009364 <HAL_DMA_Abort+0x238>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d045      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a2d      	ldr	r2, [pc, #180]	; (8009368 <HAL_DMA_Abort+0x23c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d040      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a2b      	ldr	r2, [pc, #172]	; (800936c <HAL_DMA_Abort+0x240>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d03b      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a2a      	ldr	r2, [pc, #168]	; (8009370 <HAL_DMA_Abort+0x244>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d036      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a28      	ldr	r2, [pc, #160]	; (8009374 <HAL_DMA_Abort+0x248>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d031      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a27      	ldr	r2, [pc, #156]	; (8009378 <HAL_DMA_Abort+0x24c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d02c      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a25      	ldr	r2, [pc, #148]	; (800937c <HAL_DMA_Abort+0x250>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d027      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a24      	ldr	r2, [pc, #144]	; (8009380 <HAL_DMA_Abort+0x254>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d022      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a22      	ldr	r2, [pc, #136]	; (8009384 <HAL_DMA_Abort+0x258>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01d      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a21      	ldr	r2, [pc, #132]	; (8009388 <HAL_DMA_Abort+0x25c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d018      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1f      	ldr	r2, [pc, #124]	; (800938c <HAL_DMA_Abort+0x260>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1e      	ldr	r2, [pc, #120]	; (8009390 <HAL_DMA_Abort+0x264>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00e      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a1c      	ldr	r2, [pc, #112]	; (8009394 <HAL_DMA_Abort+0x268>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d009      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a1b      	ldr	r2, [pc, #108]	; (8009398 <HAL_DMA_Abort+0x26c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d004      	beq.n	800933a <HAL_DMA_Abort+0x20e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a19      	ldr	r2, [pc, #100]	; (800939c <HAL_DMA_Abort+0x270>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d132      	bne.n	80093a0 <HAL_DMA_Abort+0x274>
 800933a:	2301      	movs	r3, #1
 800933c:	e031      	b.n	80093a2 <HAL_DMA_Abort+0x276>
 800933e:	bf00      	nop
 8009340:	40020010 	.word	0x40020010
 8009344:	40020028 	.word	0x40020028
 8009348:	40020040 	.word	0x40020040
 800934c:	40020058 	.word	0x40020058
 8009350:	40020070 	.word	0x40020070
 8009354:	40020088 	.word	0x40020088
 8009358:	400200a0 	.word	0x400200a0
 800935c:	400200b8 	.word	0x400200b8
 8009360:	40020410 	.word	0x40020410
 8009364:	40020428 	.word	0x40020428
 8009368:	40020440 	.word	0x40020440
 800936c:	40020458 	.word	0x40020458
 8009370:	40020470 	.word	0x40020470
 8009374:	40020488 	.word	0x40020488
 8009378:	400204a0 	.word	0x400204a0
 800937c:	400204b8 	.word	0x400204b8
 8009380:	58025408 	.word	0x58025408
 8009384:	5802541c 	.word	0x5802541c
 8009388:	58025430 	.word	0x58025430
 800938c:	58025444 	.word	0x58025444
 8009390:	58025458 	.word	0x58025458
 8009394:	5802546c 	.word	0x5802546c
 8009398:	58025480 	.word	0x58025480
 800939c:	58025494 	.word	0x58025494
 80093a0:	2300      	movs	r3, #0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d007      	beq.n	80093b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a6d      	ldr	r2, [pc, #436]	; (8009570 <HAL_DMA_Abort+0x444>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d04a      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a6b      	ldr	r2, [pc, #428]	; (8009574 <HAL_DMA_Abort+0x448>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d045      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a6a      	ldr	r2, [pc, #424]	; (8009578 <HAL_DMA_Abort+0x44c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d040      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a68      	ldr	r2, [pc, #416]	; (800957c <HAL_DMA_Abort+0x450>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d03b      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a67      	ldr	r2, [pc, #412]	; (8009580 <HAL_DMA_Abort+0x454>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d036      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a65      	ldr	r2, [pc, #404]	; (8009584 <HAL_DMA_Abort+0x458>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d031      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a64      	ldr	r2, [pc, #400]	; (8009588 <HAL_DMA_Abort+0x45c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d02c      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a62      	ldr	r2, [pc, #392]	; (800958c <HAL_DMA_Abort+0x460>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d027      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a61      	ldr	r2, [pc, #388]	; (8009590 <HAL_DMA_Abort+0x464>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d022      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a5f      	ldr	r2, [pc, #380]	; (8009594 <HAL_DMA_Abort+0x468>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d01d      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a5e      	ldr	r2, [pc, #376]	; (8009598 <HAL_DMA_Abort+0x46c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d018      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a5c      	ldr	r2, [pc, #368]	; (800959c <HAL_DMA_Abort+0x470>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d013      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a5b      	ldr	r2, [pc, #364]	; (80095a0 <HAL_DMA_Abort+0x474>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d00e      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a59      	ldr	r2, [pc, #356]	; (80095a4 <HAL_DMA_Abort+0x478>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d009      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a58      	ldr	r2, [pc, #352]	; (80095a8 <HAL_DMA_Abort+0x47c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d004      	beq.n	8009456 <HAL_DMA_Abort+0x32a>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a56      	ldr	r2, [pc, #344]	; (80095ac <HAL_DMA_Abort+0x480>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d108      	bne.n	8009468 <HAL_DMA_Abort+0x33c>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	e007      	b.n	8009478 <HAL_DMA_Abort+0x34c>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0201 	bic.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009478:	e013      	b.n	80094a2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800947a:	f7fc ff69 	bl	8006350 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b05      	cmp	r3, #5
 8009486:	d90c      	bls.n	80094a2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2203      	movs	r2, #3
 8009492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e12d      	b.n	80096fe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a2f      	ldr	r2, [pc, #188]	; (8009570 <HAL_DMA_Abort+0x444>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d04a      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a2d      	ldr	r2, [pc, #180]	; (8009574 <HAL_DMA_Abort+0x448>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d045      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a2c      	ldr	r2, [pc, #176]	; (8009578 <HAL_DMA_Abort+0x44c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d040      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a2a      	ldr	r2, [pc, #168]	; (800957c <HAL_DMA_Abort+0x450>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d03b      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a29      	ldr	r2, [pc, #164]	; (8009580 <HAL_DMA_Abort+0x454>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d036      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a27      	ldr	r2, [pc, #156]	; (8009584 <HAL_DMA_Abort+0x458>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d031      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a26      	ldr	r2, [pc, #152]	; (8009588 <HAL_DMA_Abort+0x45c>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d02c      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a24      	ldr	r2, [pc, #144]	; (800958c <HAL_DMA_Abort+0x460>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d027      	beq.n	800954e <HAL_DMA_Abort+0x422>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a23      	ldr	r2, [pc, #140]	; (8009590 <HAL_DMA_Abort+0x464>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d022      	beq.n	800954e <HAL_DMA_Abort+0x422>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a21      	ldr	r2, [pc, #132]	; (8009594 <HAL_DMA_Abort+0x468>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01d      	beq.n	800954e <HAL_DMA_Abort+0x422>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a20      	ldr	r2, [pc, #128]	; (8009598 <HAL_DMA_Abort+0x46c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d018      	beq.n	800954e <HAL_DMA_Abort+0x422>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1e      	ldr	r2, [pc, #120]	; (800959c <HAL_DMA_Abort+0x470>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d013      	beq.n	800954e <HAL_DMA_Abort+0x422>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1d      	ldr	r2, [pc, #116]	; (80095a0 <HAL_DMA_Abort+0x474>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00e      	beq.n	800954e <HAL_DMA_Abort+0x422>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a1b      	ldr	r2, [pc, #108]	; (80095a4 <HAL_DMA_Abort+0x478>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d009      	beq.n	800954e <HAL_DMA_Abort+0x422>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1a      	ldr	r2, [pc, #104]	; (80095a8 <HAL_DMA_Abort+0x47c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d004      	beq.n	800954e <HAL_DMA_Abort+0x422>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a18      	ldr	r2, [pc, #96]	; (80095ac <HAL_DMA_Abort+0x480>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d101      	bne.n	8009552 <HAL_DMA_Abort+0x426>
 800954e:	2301      	movs	r3, #1
 8009550:	e000      	b.n	8009554 <HAL_DMA_Abort+0x428>
 8009552:	2300      	movs	r3, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d02b      	beq.n	80095b0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800955c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009562:	f003 031f 	and.w	r3, r3, #31
 8009566:	223f      	movs	r2, #63	; 0x3f
 8009568:	409a      	lsls	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	609a      	str	r2, [r3, #8]
 800956e:	e02a      	b.n	80095c6 <HAL_DMA_Abort+0x49a>
 8009570:	40020010 	.word	0x40020010
 8009574:	40020028 	.word	0x40020028
 8009578:	40020040 	.word	0x40020040
 800957c:	40020058 	.word	0x40020058
 8009580:	40020070 	.word	0x40020070
 8009584:	40020088 	.word	0x40020088
 8009588:	400200a0 	.word	0x400200a0
 800958c:	400200b8 	.word	0x400200b8
 8009590:	40020410 	.word	0x40020410
 8009594:	40020428 	.word	0x40020428
 8009598:	40020440 	.word	0x40020440
 800959c:	40020458 	.word	0x40020458
 80095a0:	40020470 	.word	0x40020470
 80095a4:	40020488 	.word	0x40020488
 80095a8:	400204a0 	.word	0x400204a0
 80095ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	2201      	movs	r2, #1
 80095c0:	409a      	lsls	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a4f      	ldr	r2, [pc, #316]	; (8009708 <HAL_DMA_Abort+0x5dc>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d072      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a4d      	ldr	r2, [pc, #308]	; (800970c <HAL_DMA_Abort+0x5e0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d06d      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a4c      	ldr	r2, [pc, #304]	; (8009710 <HAL_DMA_Abort+0x5e4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d068      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a4a      	ldr	r2, [pc, #296]	; (8009714 <HAL_DMA_Abort+0x5e8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d063      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a49      	ldr	r2, [pc, #292]	; (8009718 <HAL_DMA_Abort+0x5ec>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d05e      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a47      	ldr	r2, [pc, #284]	; (800971c <HAL_DMA_Abort+0x5f0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d059      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a46      	ldr	r2, [pc, #280]	; (8009720 <HAL_DMA_Abort+0x5f4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d054      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a44      	ldr	r2, [pc, #272]	; (8009724 <HAL_DMA_Abort+0x5f8>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d04f      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a43      	ldr	r2, [pc, #268]	; (8009728 <HAL_DMA_Abort+0x5fc>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d04a      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a41      	ldr	r2, [pc, #260]	; (800972c <HAL_DMA_Abort+0x600>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d045      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a40      	ldr	r2, [pc, #256]	; (8009730 <HAL_DMA_Abort+0x604>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d040      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a3e      	ldr	r2, [pc, #248]	; (8009734 <HAL_DMA_Abort+0x608>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d03b      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a3d      	ldr	r2, [pc, #244]	; (8009738 <HAL_DMA_Abort+0x60c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d036      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a3b      	ldr	r2, [pc, #236]	; (800973c <HAL_DMA_Abort+0x610>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d031      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a3a      	ldr	r2, [pc, #232]	; (8009740 <HAL_DMA_Abort+0x614>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d02c      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a38      	ldr	r2, [pc, #224]	; (8009744 <HAL_DMA_Abort+0x618>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d027      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a37      	ldr	r2, [pc, #220]	; (8009748 <HAL_DMA_Abort+0x61c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d022      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a35      	ldr	r2, [pc, #212]	; (800974c <HAL_DMA_Abort+0x620>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d01d      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a34      	ldr	r2, [pc, #208]	; (8009750 <HAL_DMA_Abort+0x624>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d018      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a32      	ldr	r2, [pc, #200]	; (8009754 <HAL_DMA_Abort+0x628>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d013      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a31      	ldr	r2, [pc, #196]	; (8009758 <HAL_DMA_Abort+0x62c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00e      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a2f      	ldr	r2, [pc, #188]	; (800975c <HAL_DMA_Abort+0x630>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d009      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a2e      	ldr	r2, [pc, #184]	; (8009760 <HAL_DMA_Abort+0x634>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d004      	beq.n	80096b6 <HAL_DMA_Abort+0x58a>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a2c      	ldr	r2, [pc, #176]	; (8009764 <HAL_DMA_Abort+0x638>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d101      	bne.n	80096ba <HAL_DMA_Abort+0x58e>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e000      	b.n	80096bc <HAL_DMA_Abort+0x590>
 80096ba:	2300      	movs	r3, #0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d015      	beq.n	80096ec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096c8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00c      	beq.n	80096ec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096e0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80096ea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	40020010 	.word	0x40020010
 800970c:	40020028 	.word	0x40020028
 8009710:	40020040 	.word	0x40020040
 8009714:	40020058 	.word	0x40020058
 8009718:	40020070 	.word	0x40020070
 800971c:	40020088 	.word	0x40020088
 8009720:	400200a0 	.word	0x400200a0
 8009724:	400200b8 	.word	0x400200b8
 8009728:	40020410 	.word	0x40020410
 800972c:	40020428 	.word	0x40020428
 8009730:	40020440 	.word	0x40020440
 8009734:	40020458 	.word	0x40020458
 8009738:	40020470 	.word	0x40020470
 800973c:	40020488 	.word	0x40020488
 8009740:	400204a0 	.word	0x400204a0
 8009744:	400204b8 	.word	0x400204b8
 8009748:	58025408 	.word	0x58025408
 800974c:	5802541c 	.word	0x5802541c
 8009750:	58025430 	.word	0x58025430
 8009754:	58025444 	.word	0x58025444
 8009758:	58025458 	.word	0x58025458
 800975c:	5802546c 	.word	0x5802546c
 8009760:	58025480 	.word	0x58025480
 8009764:	58025494 	.word	0x58025494

08009768 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d101      	bne.n	800977a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e237      	b.n	8009bea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b02      	cmp	r3, #2
 8009784:	d004      	beq.n	8009790 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2280      	movs	r2, #128	; 0x80
 800978a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e22c      	b.n	8009bea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a5c      	ldr	r2, [pc, #368]	; (8009908 <HAL_DMA_Abort_IT+0x1a0>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d04a      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a5b      	ldr	r2, [pc, #364]	; (800990c <HAL_DMA_Abort_IT+0x1a4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d045      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a59      	ldr	r2, [pc, #356]	; (8009910 <HAL_DMA_Abort_IT+0x1a8>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d040      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a58      	ldr	r2, [pc, #352]	; (8009914 <HAL_DMA_Abort_IT+0x1ac>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d03b      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a56      	ldr	r2, [pc, #344]	; (8009918 <HAL_DMA_Abort_IT+0x1b0>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d036      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a55      	ldr	r2, [pc, #340]	; (800991c <HAL_DMA_Abort_IT+0x1b4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d031      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a53      	ldr	r2, [pc, #332]	; (8009920 <HAL_DMA_Abort_IT+0x1b8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d02c      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a52      	ldr	r2, [pc, #328]	; (8009924 <HAL_DMA_Abort_IT+0x1bc>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d027      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a50      	ldr	r2, [pc, #320]	; (8009928 <HAL_DMA_Abort_IT+0x1c0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d022      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a4f      	ldr	r2, [pc, #316]	; (800992c <HAL_DMA_Abort_IT+0x1c4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d01d      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a4d      	ldr	r2, [pc, #308]	; (8009930 <HAL_DMA_Abort_IT+0x1c8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d018      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a4c      	ldr	r2, [pc, #304]	; (8009934 <HAL_DMA_Abort_IT+0x1cc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a4a      	ldr	r2, [pc, #296]	; (8009938 <HAL_DMA_Abort_IT+0x1d0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a49      	ldr	r2, [pc, #292]	; (800993c <HAL_DMA_Abort_IT+0x1d4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d009      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a47      	ldr	r2, [pc, #284]	; (8009940 <HAL_DMA_Abort_IT+0x1d8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d004      	beq.n	8009830 <HAL_DMA_Abort_IT+0xc8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a46      	ldr	r2, [pc, #280]	; (8009944 <HAL_DMA_Abort_IT+0x1dc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d101      	bne.n	8009834 <HAL_DMA_Abort_IT+0xcc>
 8009830:	2301      	movs	r3, #1
 8009832:	e000      	b.n	8009836 <HAL_DMA_Abort_IT+0xce>
 8009834:	2300      	movs	r3, #0
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8086 	beq.w	8009948 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2204      	movs	r2, #4
 8009840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a2f      	ldr	r2, [pc, #188]	; (8009908 <HAL_DMA_Abort_IT+0x1a0>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d04a      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a2e      	ldr	r2, [pc, #184]	; (800990c <HAL_DMA_Abort_IT+0x1a4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d045      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a2c      	ldr	r2, [pc, #176]	; (8009910 <HAL_DMA_Abort_IT+0x1a8>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d040      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a2b      	ldr	r2, [pc, #172]	; (8009914 <HAL_DMA_Abort_IT+0x1ac>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d03b      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a29      	ldr	r2, [pc, #164]	; (8009918 <HAL_DMA_Abort_IT+0x1b0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d036      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a28      	ldr	r2, [pc, #160]	; (800991c <HAL_DMA_Abort_IT+0x1b4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d031      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a26      	ldr	r2, [pc, #152]	; (8009920 <HAL_DMA_Abort_IT+0x1b8>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d02c      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a25      	ldr	r2, [pc, #148]	; (8009924 <HAL_DMA_Abort_IT+0x1bc>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d027      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a23      	ldr	r2, [pc, #140]	; (8009928 <HAL_DMA_Abort_IT+0x1c0>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d022      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a22      	ldr	r2, [pc, #136]	; (800992c <HAL_DMA_Abort_IT+0x1c4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d01d      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a20      	ldr	r2, [pc, #128]	; (8009930 <HAL_DMA_Abort_IT+0x1c8>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d018      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a1f      	ldr	r2, [pc, #124]	; (8009934 <HAL_DMA_Abort_IT+0x1cc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d013      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a1d      	ldr	r2, [pc, #116]	; (8009938 <HAL_DMA_Abort_IT+0x1d0>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d00e      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a1c      	ldr	r2, [pc, #112]	; (800993c <HAL_DMA_Abort_IT+0x1d4>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d009      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1a      	ldr	r2, [pc, #104]	; (8009940 <HAL_DMA_Abort_IT+0x1d8>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d004      	beq.n	80098e4 <HAL_DMA_Abort_IT+0x17c>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a19      	ldr	r2, [pc, #100]	; (8009944 <HAL_DMA_Abort_IT+0x1dc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d108      	bne.n	80098f6 <HAL_DMA_Abort_IT+0x18e>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e178      	b.n	8009be8 <HAL_DMA_Abort_IT+0x480>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0201 	bic.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	e16f      	b.n	8009be8 <HAL_DMA_Abort_IT+0x480>
 8009908:	40020010 	.word	0x40020010
 800990c:	40020028 	.word	0x40020028
 8009910:	40020040 	.word	0x40020040
 8009914:	40020058 	.word	0x40020058
 8009918:	40020070 	.word	0x40020070
 800991c:	40020088 	.word	0x40020088
 8009920:	400200a0 	.word	0x400200a0
 8009924:	400200b8 	.word	0x400200b8
 8009928:	40020410 	.word	0x40020410
 800992c:	40020428 	.word	0x40020428
 8009930:	40020440 	.word	0x40020440
 8009934:	40020458 	.word	0x40020458
 8009938:	40020470 	.word	0x40020470
 800993c:	40020488 	.word	0x40020488
 8009940:	400204a0 	.word	0x400204a0
 8009944:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 020e 	bic.w	r2, r2, #14
 8009956:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a6c      	ldr	r2, [pc, #432]	; (8009b10 <HAL_DMA_Abort_IT+0x3a8>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d04a      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a6b      	ldr	r2, [pc, #428]	; (8009b14 <HAL_DMA_Abort_IT+0x3ac>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d045      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a69      	ldr	r2, [pc, #420]	; (8009b18 <HAL_DMA_Abort_IT+0x3b0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d040      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a68      	ldr	r2, [pc, #416]	; (8009b1c <HAL_DMA_Abort_IT+0x3b4>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d03b      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a66      	ldr	r2, [pc, #408]	; (8009b20 <HAL_DMA_Abort_IT+0x3b8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d036      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a65      	ldr	r2, [pc, #404]	; (8009b24 <HAL_DMA_Abort_IT+0x3bc>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d031      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a63      	ldr	r2, [pc, #396]	; (8009b28 <HAL_DMA_Abort_IT+0x3c0>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d02c      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a62      	ldr	r2, [pc, #392]	; (8009b2c <HAL_DMA_Abort_IT+0x3c4>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d027      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a60      	ldr	r2, [pc, #384]	; (8009b30 <HAL_DMA_Abort_IT+0x3c8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d022      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a5f      	ldr	r2, [pc, #380]	; (8009b34 <HAL_DMA_Abort_IT+0x3cc>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d01d      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a5d      	ldr	r2, [pc, #372]	; (8009b38 <HAL_DMA_Abort_IT+0x3d0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d018      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a5c      	ldr	r2, [pc, #368]	; (8009b3c <HAL_DMA_Abort_IT+0x3d4>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d013      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a5a      	ldr	r2, [pc, #360]	; (8009b40 <HAL_DMA_Abort_IT+0x3d8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00e      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a59      	ldr	r2, [pc, #356]	; (8009b44 <HAL_DMA_Abort_IT+0x3dc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d009      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a57      	ldr	r2, [pc, #348]	; (8009b48 <HAL_DMA_Abort_IT+0x3e0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d004      	beq.n	80099f8 <HAL_DMA_Abort_IT+0x290>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a56      	ldr	r2, [pc, #344]	; (8009b4c <HAL_DMA_Abort_IT+0x3e4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d108      	bne.n	8009a0a <HAL_DMA_Abort_IT+0x2a2>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	e007      	b.n	8009a1a <HAL_DMA_Abort_IT+0x2b2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0201 	bic.w	r2, r2, #1
 8009a18:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a3c      	ldr	r2, [pc, #240]	; (8009b10 <HAL_DMA_Abort_IT+0x3a8>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d072      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a3a      	ldr	r2, [pc, #232]	; (8009b14 <HAL_DMA_Abort_IT+0x3ac>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d06d      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a39      	ldr	r2, [pc, #228]	; (8009b18 <HAL_DMA_Abort_IT+0x3b0>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d068      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a37      	ldr	r2, [pc, #220]	; (8009b1c <HAL_DMA_Abort_IT+0x3b4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d063      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a36      	ldr	r2, [pc, #216]	; (8009b20 <HAL_DMA_Abort_IT+0x3b8>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d05e      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a34      	ldr	r2, [pc, #208]	; (8009b24 <HAL_DMA_Abort_IT+0x3bc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d059      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a33      	ldr	r2, [pc, #204]	; (8009b28 <HAL_DMA_Abort_IT+0x3c0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d054      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a31      	ldr	r2, [pc, #196]	; (8009b2c <HAL_DMA_Abort_IT+0x3c4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d04f      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a30      	ldr	r2, [pc, #192]	; (8009b30 <HAL_DMA_Abort_IT+0x3c8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d04a      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a2e      	ldr	r2, [pc, #184]	; (8009b34 <HAL_DMA_Abort_IT+0x3cc>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d045      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a2d      	ldr	r2, [pc, #180]	; (8009b38 <HAL_DMA_Abort_IT+0x3d0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d040      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2b      	ldr	r2, [pc, #172]	; (8009b3c <HAL_DMA_Abort_IT+0x3d4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d03b      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2a      	ldr	r2, [pc, #168]	; (8009b40 <HAL_DMA_Abort_IT+0x3d8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d036      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a28      	ldr	r2, [pc, #160]	; (8009b44 <HAL_DMA_Abort_IT+0x3dc>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d031      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a27      	ldr	r2, [pc, #156]	; (8009b48 <HAL_DMA_Abort_IT+0x3e0>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d02c      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a25      	ldr	r2, [pc, #148]	; (8009b4c <HAL_DMA_Abort_IT+0x3e4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d027      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a24      	ldr	r2, [pc, #144]	; (8009b50 <HAL_DMA_Abort_IT+0x3e8>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d022      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a22      	ldr	r2, [pc, #136]	; (8009b54 <HAL_DMA_Abort_IT+0x3ec>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d01d      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a21      	ldr	r2, [pc, #132]	; (8009b58 <HAL_DMA_Abort_IT+0x3f0>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d018      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a1f      	ldr	r2, [pc, #124]	; (8009b5c <HAL_DMA_Abort_IT+0x3f4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d013      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <HAL_DMA_Abort_IT+0x3f8>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d00e      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1c      	ldr	r2, [pc, #112]	; (8009b64 <HAL_DMA_Abort_IT+0x3fc>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d009      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <HAL_DMA_Abort_IT+0x400>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d004      	beq.n	8009b0a <HAL_DMA_Abort_IT+0x3a2>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a19      	ldr	r2, [pc, #100]	; (8009b6c <HAL_DMA_Abort_IT+0x404>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d132      	bne.n	8009b70 <HAL_DMA_Abort_IT+0x408>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e031      	b.n	8009b72 <HAL_DMA_Abort_IT+0x40a>
 8009b0e:	bf00      	nop
 8009b10:	40020010 	.word	0x40020010
 8009b14:	40020028 	.word	0x40020028
 8009b18:	40020040 	.word	0x40020040
 8009b1c:	40020058 	.word	0x40020058
 8009b20:	40020070 	.word	0x40020070
 8009b24:	40020088 	.word	0x40020088
 8009b28:	400200a0 	.word	0x400200a0
 8009b2c:	400200b8 	.word	0x400200b8
 8009b30:	40020410 	.word	0x40020410
 8009b34:	40020428 	.word	0x40020428
 8009b38:	40020440 	.word	0x40020440
 8009b3c:	40020458 	.word	0x40020458
 8009b40:	40020470 	.word	0x40020470
 8009b44:	40020488 	.word	0x40020488
 8009b48:	400204a0 	.word	0x400204a0
 8009b4c:	400204b8 	.word	0x400204b8
 8009b50:	58025408 	.word	0x58025408
 8009b54:	5802541c 	.word	0x5802541c
 8009b58:	58025430 	.word	0x58025430
 8009b5c:	58025444 	.word	0x58025444
 8009b60:	58025458 	.word	0x58025458
 8009b64:	5802546c 	.word	0x5802546c
 8009b68:	58025480 	.word	0x58025480
 8009b6c:	58025494 	.word	0x58025494
 8009b70:	2300      	movs	r3, #0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d028      	beq.n	8009bc8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	2201      	movs	r2, #1
 8009b96:	409a      	lsls	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ba4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00c      	beq.n	8009bc8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009bc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08a      	sub	sp, #40	; 0x28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009c00:	4b67      	ldr	r3, [pc, #412]	; (8009da0 <HAL_DMA_IRQHandler+0x1ac>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a67      	ldr	r2, [pc, #412]	; (8009da4 <HAL_DMA_IRQHandler+0x1b0>)
 8009c06:	fba2 2303 	umull	r2, r3, r2, r3
 8009c0a:	0a9b      	lsrs	r3, r3, #10
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a5f      	ldr	r2, [pc, #380]	; (8009da8 <HAL_DMA_IRQHandler+0x1b4>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d04a      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a5d      	ldr	r2, [pc, #372]	; (8009dac <HAL_DMA_IRQHandler+0x1b8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d045      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a5c      	ldr	r2, [pc, #368]	; (8009db0 <HAL_DMA_IRQHandler+0x1bc>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d040      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a5a      	ldr	r2, [pc, #360]	; (8009db4 <HAL_DMA_IRQHandler+0x1c0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d03b      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a59      	ldr	r2, [pc, #356]	; (8009db8 <HAL_DMA_IRQHandler+0x1c4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d036      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a57      	ldr	r2, [pc, #348]	; (8009dbc <HAL_DMA_IRQHandler+0x1c8>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d031      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a56      	ldr	r2, [pc, #344]	; (8009dc0 <HAL_DMA_IRQHandler+0x1cc>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d02c      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a54      	ldr	r2, [pc, #336]	; (8009dc4 <HAL_DMA_IRQHandler+0x1d0>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d027      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a53      	ldr	r2, [pc, #332]	; (8009dc8 <HAL_DMA_IRQHandler+0x1d4>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d022      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a51      	ldr	r2, [pc, #324]	; (8009dcc <HAL_DMA_IRQHandler+0x1d8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d01d      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a50      	ldr	r2, [pc, #320]	; (8009dd0 <HAL_DMA_IRQHandler+0x1dc>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d018      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a4e      	ldr	r2, [pc, #312]	; (8009dd4 <HAL_DMA_IRQHandler+0x1e0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d013      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a4d      	ldr	r2, [pc, #308]	; (8009dd8 <HAL_DMA_IRQHandler+0x1e4>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00e      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a4b      	ldr	r2, [pc, #300]	; (8009ddc <HAL_DMA_IRQHandler+0x1e8>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d009      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a4a      	ldr	r2, [pc, #296]	; (8009de0 <HAL_DMA_IRQHandler+0x1ec>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d004      	beq.n	8009cc6 <HAL_DMA_IRQHandler+0xd2>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a48      	ldr	r2, [pc, #288]	; (8009de4 <HAL_DMA_IRQHandler+0x1f0>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d101      	bne.n	8009cca <HAL_DMA_IRQHandler+0xd6>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <HAL_DMA_IRQHandler+0xd8>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 842b 	beq.w	800a528 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd6:	f003 031f 	and.w	r3, r3, #31
 8009cda:	2208      	movs	r2, #8
 8009cdc:	409a      	lsls	r2, r3
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 80a2 	beq.w	8009e2c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a2e      	ldr	r2, [pc, #184]	; (8009da8 <HAL_DMA_IRQHandler+0x1b4>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d04a      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a2d      	ldr	r2, [pc, #180]	; (8009dac <HAL_DMA_IRQHandler+0x1b8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d045      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a2b      	ldr	r2, [pc, #172]	; (8009db0 <HAL_DMA_IRQHandler+0x1bc>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d040      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a2a      	ldr	r2, [pc, #168]	; (8009db4 <HAL_DMA_IRQHandler+0x1c0>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d03b      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a28      	ldr	r2, [pc, #160]	; (8009db8 <HAL_DMA_IRQHandler+0x1c4>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d036      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a27      	ldr	r2, [pc, #156]	; (8009dbc <HAL_DMA_IRQHandler+0x1c8>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d031      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a25      	ldr	r2, [pc, #148]	; (8009dc0 <HAL_DMA_IRQHandler+0x1cc>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d02c      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a24      	ldr	r2, [pc, #144]	; (8009dc4 <HAL_DMA_IRQHandler+0x1d0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d027      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a22      	ldr	r2, [pc, #136]	; (8009dc8 <HAL_DMA_IRQHandler+0x1d4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d022      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a21      	ldr	r2, [pc, #132]	; (8009dcc <HAL_DMA_IRQHandler+0x1d8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d01d      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a1f      	ldr	r2, [pc, #124]	; (8009dd0 <HAL_DMA_IRQHandler+0x1dc>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d018      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a1e      	ldr	r2, [pc, #120]	; (8009dd4 <HAL_DMA_IRQHandler+0x1e0>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d013      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1c      	ldr	r2, [pc, #112]	; (8009dd8 <HAL_DMA_IRQHandler+0x1e4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d00e      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a1b      	ldr	r2, [pc, #108]	; (8009ddc <HAL_DMA_IRQHandler+0x1e8>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d009      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a19      	ldr	r2, [pc, #100]	; (8009de0 <HAL_DMA_IRQHandler+0x1ec>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <HAL_DMA_IRQHandler+0x194>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a18      	ldr	r2, [pc, #96]	; (8009de4 <HAL_DMA_IRQHandler+0x1f0>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d12f      	bne.n	8009de8 <HAL_DMA_IRQHandler+0x1f4>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0304 	and.w	r3, r3, #4
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bf14      	ite	ne
 8009d96:	2301      	movne	r3, #1
 8009d98:	2300      	moveq	r3, #0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	e02e      	b.n	8009dfc <HAL_DMA_IRQHandler+0x208>
 8009d9e:	bf00      	nop
 8009da0:	240000c4 	.word	0x240000c4
 8009da4:	1b4e81b5 	.word	0x1b4e81b5
 8009da8:	40020010 	.word	0x40020010
 8009dac:	40020028 	.word	0x40020028
 8009db0:	40020040 	.word	0x40020040
 8009db4:	40020058 	.word	0x40020058
 8009db8:	40020070 	.word	0x40020070
 8009dbc:	40020088 	.word	0x40020088
 8009dc0:	400200a0 	.word	0x400200a0
 8009dc4:	400200b8 	.word	0x400200b8
 8009dc8:	40020410 	.word	0x40020410
 8009dcc:	40020428 	.word	0x40020428
 8009dd0:	40020440 	.word	0x40020440
 8009dd4:	40020458 	.word	0x40020458
 8009dd8:	40020470 	.word	0x40020470
 8009ddc:	40020488 	.word	0x40020488
 8009de0:	400204a0 	.word	0x400204a0
 8009de4:	400204b8 	.word	0x400204b8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f003 0308 	and.w	r3, r3, #8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bf14      	ite	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	2300      	moveq	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d015      	beq.n	8009e2c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0204 	bic.w	r2, r2, #4
 8009e0e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	2208      	movs	r2, #8
 8009e1a:	409a      	lsls	r2, r3
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e24:	f043 0201 	orr.w	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d06e      	beq.n	8009f20 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a69      	ldr	r2, [pc, #420]	; (8009fec <HAL_DMA_IRQHandler+0x3f8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d04a      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a67      	ldr	r2, [pc, #412]	; (8009ff0 <HAL_DMA_IRQHandler+0x3fc>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d045      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a66      	ldr	r2, [pc, #408]	; (8009ff4 <HAL_DMA_IRQHandler+0x400>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d040      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a64      	ldr	r2, [pc, #400]	; (8009ff8 <HAL_DMA_IRQHandler+0x404>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d03b      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a63      	ldr	r2, [pc, #396]	; (8009ffc <HAL_DMA_IRQHandler+0x408>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d036      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a61      	ldr	r2, [pc, #388]	; (800a000 <HAL_DMA_IRQHandler+0x40c>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d031      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a60      	ldr	r2, [pc, #384]	; (800a004 <HAL_DMA_IRQHandler+0x410>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d02c      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a5e      	ldr	r2, [pc, #376]	; (800a008 <HAL_DMA_IRQHandler+0x414>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d027      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a5d      	ldr	r2, [pc, #372]	; (800a00c <HAL_DMA_IRQHandler+0x418>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d022      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a5b      	ldr	r2, [pc, #364]	; (800a010 <HAL_DMA_IRQHandler+0x41c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d01d      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a5a      	ldr	r2, [pc, #360]	; (800a014 <HAL_DMA_IRQHandler+0x420>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d018      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a58      	ldr	r2, [pc, #352]	; (800a018 <HAL_DMA_IRQHandler+0x424>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d013      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a57      	ldr	r2, [pc, #348]	; (800a01c <HAL_DMA_IRQHandler+0x428>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00e      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a55      	ldr	r2, [pc, #340]	; (800a020 <HAL_DMA_IRQHandler+0x42c>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d009      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a54      	ldr	r2, [pc, #336]	; (800a024 <HAL_DMA_IRQHandler+0x430>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d004      	beq.n	8009ee2 <HAL_DMA_IRQHandler+0x2ee>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a52      	ldr	r2, [pc, #328]	; (800a028 <HAL_DMA_IRQHandler+0x434>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d10a      	bne.n	8009ef8 <HAL_DMA_IRQHandler+0x304>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bf14      	ite	ne
 8009ef0:	2301      	movne	r3, #1
 8009ef2:	2300      	moveq	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	e003      	b.n	8009f00 <HAL_DMA_IRQHandler+0x30c>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2300      	movs	r3, #0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00d      	beq.n	8009f20 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f08:	f003 031f 	and.w	r3, r3, #31
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	409a      	lsls	r2, r3
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f18:	f043 0202 	orr.w	r2, r3, #2
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	2204      	movs	r2, #4
 8009f2a:	409a      	lsls	r2, r3
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	4013      	ands	r3, r2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 808f 	beq.w	800a054 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a2c      	ldr	r2, [pc, #176]	; (8009fec <HAL_DMA_IRQHandler+0x3f8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d04a      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a2a      	ldr	r2, [pc, #168]	; (8009ff0 <HAL_DMA_IRQHandler+0x3fc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d045      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a29      	ldr	r2, [pc, #164]	; (8009ff4 <HAL_DMA_IRQHandler+0x400>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d040      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a27      	ldr	r2, [pc, #156]	; (8009ff8 <HAL_DMA_IRQHandler+0x404>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d03b      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a26      	ldr	r2, [pc, #152]	; (8009ffc <HAL_DMA_IRQHandler+0x408>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d036      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a24      	ldr	r2, [pc, #144]	; (800a000 <HAL_DMA_IRQHandler+0x40c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d031      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a23      	ldr	r2, [pc, #140]	; (800a004 <HAL_DMA_IRQHandler+0x410>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d02c      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a21      	ldr	r2, [pc, #132]	; (800a008 <HAL_DMA_IRQHandler+0x414>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d027      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a20      	ldr	r2, [pc, #128]	; (800a00c <HAL_DMA_IRQHandler+0x418>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d022      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1e      	ldr	r2, [pc, #120]	; (800a010 <HAL_DMA_IRQHandler+0x41c>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d01d      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a1d      	ldr	r2, [pc, #116]	; (800a014 <HAL_DMA_IRQHandler+0x420>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d018      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a1b      	ldr	r2, [pc, #108]	; (800a018 <HAL_DMA_IRQHandler+0x424>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d013      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a1a      	ldr	r2, [pc, #104]	; (800a01c <HAL_DMA_IRQHandler+0x428>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a18      	ldr	r2, [pc, #96]	; (800a020 <HAL_DMA_IRQHandler+0x42c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d009      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a17      	ldr	r2, [pc, #92]	; (800a024 <HAL_DMA_IRQHandler+0x430>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d004      	beq.n	8009fd6 <HAL_DMA_IRQHandler+0x3e2>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a15      	ldr	r2, [pc, #84]	; (800a028 <HAL_DMA_IRQHandler+0x434>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d12a      	bne.n	800a02c <HAL_DMA_IRQHandler+0x438>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf14      	ite	ne
 8009fe4:	2301      	movne	r3, #1
 8009fe6:	2300      	moveq	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	e023      	b.n	800a034 <HAL_DMA_IRQHandler+0x440>
 8009fec:	40020010 	.word	0x40020010
 8009ff0:	40020028 	.word	0x40020028
 8009ff4:	40020040 	.word	0x40020040
 8009ff8:	40020058 	.word	0x40020058
 8009ffc:	40020070 	.word	0x40020070
 800a000:	40020088 	.word	0x40020088
 800a004:	400200a0 	.word	0x400200a0
 800a008:	400200b8 	.word	0x400200b8
 800a00c:	40020410 	.word	0x40020410
 800a010:	40020428 	.word	0x40020428
 800a014:	40020440 	.word	0x40020440
 800a018:	40020458 	.word	0x40020458
 800a01c:	40020470 	.word	0x40020470
 800a020:	40020488 	.word	0x40020488
 800a024:	400204a0 	.word	0x400204a0
 800a028:	400204b8 	.word	0x400204b8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2300      	movs	r3, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00d      	beq.n	800a054 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a03c:	f003 031f 	and.w	r3, r3, #31
 800a040:	2204      	movs	r2, #4
 800a042:	409a      	lsls	r2, r3
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a04c:	f043 0204 	orr.w	r2, r3, #4
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a058:	f003 031f 	and.w	r3, r3, #31
 800a05c:	2210      	movs	r2, #16
 800a05e:	409a      	lsls	r2, r3
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	4013      	ands	r3, r2
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 80a6 	beq.w	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a85      	ldr	r2, [pc, #532]	; (800a284 <HAL_DMA_IRQHandler+0x690>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d04a      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a83      	ldr	r2, [pc, #524]	; (800a288 <HAL_DMA_IRQHandler+0x694>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d045      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a82      	ldr	r2, [pc, #520]	; (800a28c <HAL_DMA_IRQHandler+0x698>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d040      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a80      	ldr	r2, [pc, #512]	; (800a290 <HAL_DMA_IRQHandler+0x69c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d03b      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a7f      	ldr	r2, [pc, #508]	; (800a294 <HAL_DMA_IRQHandler+0x6a0>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d036      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a7d      	ldr	r2, [pc, #500]	; (800a298 <HAL_DMA_IRQHandler+0x6a4>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d031      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a7c      	ldr	r2, [pc, #496]	; (800a29c <HAL_DMA_IRQHandler+0x6a8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d02c      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a7a      	ldr	r2, [pc, #488]	; (800a2a0 <HAL_DMA_IRQHandler+0x6ac>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d027      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a79      	ldr	r2, [pc, #484]	; (800a2a4 <HAL_DMA_IRQHandler+0x6b0>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d022      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a77      	ldr	r2, [pc, #476]	; (800a2a8 <HAL_DMA_IRQHandler+0x6b4>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d01d      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a76      	ldr	r2, [pc, #472]	; (800a2ac <HAL_DMA_IRQHandler+0x6b8>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d018      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a74      	ldr	r2, [pc, #464]	; (800a2b0 <HAL_DMA_IRQHandler+0x6bc>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d013      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a73      	ldr	r2, [pc, #460]	; (800a2b4 <HAL_DMA_IRQHandler+0x6c0>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d00e      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a71      	ldr	r2, [pc, #452]	; (800a2b8 <HAL_DMA_IRQHandler+0x6c4>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d009      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a70      	ldr	r2, [pc, #448]	; (800a2bc <HAL_DMA_IRQHandler+0x6c8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d004      	beq.n	800a10a <HAL_DMA_IRQHandler+0x516>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a6e      	ldr	r2, [pc, #440]	; (800a2c0 <HAL_DMA_IRQHandler+0x6cc>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d10a      	bne.n	800a120 <HAL_DMA_IRQHandler+0x52c>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0308 	and.w	r3, r3, #8
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	e009      	b.n	800a134 <HAL_DMA_IRQHandler+0x540>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0304 	and.w	r3, r3, #4
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bf14      	ite	ne
 800a12e:	2301      	movne	r3, #1
 800a130:	2300      	moveq	r3, #0
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d03e      	beq.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a13c:	f003 031f 	and.w	r3, r3, #31
 800a140:	2210      	movs	r2, #16
 800a142:	409a      	lsls	r2, r3
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d018      	beq.n	800a188 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a160:	2b00      	cmp	r3, #0
 800a162:	d108      	bne.n	800a176 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d024      	beq.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
 800a174:	e01f      	b.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d01b      	beq.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
 800a186:	e016      	b.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a192:	2b00      	cmp	r3, #0
 800a194:	d107      	bne.n	800a1a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0208 	bic.w	r2, r2, #8
 800a1a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d003      	beq.n	800a1b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ba:	f003 031f 	and.w	r3, r3, #31
 800a1be:	2220      	movs	r2, #32
 800a1c0:	409a      	lsls	r2, r3
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 8110 	beq.w	800a3ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a2c      	ldr	r2, [pc, #176]	; (800a284 <HAL_DMA_IRQHandler+0x690>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d04a      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a2b      	ldr	r2, [pc, #172]	; (800a288 <HAL_DMA_IRQHandler+0x694>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d045      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a29      	ldr	r2, [pc, #164]	; (800a28c <HAL_DMA_IRQHandler+0x698>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d040      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a28      	ldr	r2, [pc, #160]	; (800a290 <HAL_DMA_IRQHandler+0x69c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d03b      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a26      	ldr	r2, [pc, #152]	; (800a294 <HAL_DMA_IRQHandler+0x6a0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d036      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a25      	ldr	r2, [pc, #148]	; (800a298 <HAL_DMA_IRQHandler+0x6a4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d031      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a23      	ldr	r2, [pc, #140]	; (800a29c <HAL_DMA_IRQHandler+0x6a8>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d02c      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a22      	ldr	r2, [pc, #136]	; (800a2a0 <HAL_DMA_IRQHandler+0x6ac>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d027      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <HAL_DMA_IRQHandler+0x6b0>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d022      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a1f      	ldr	r2, [pc, #124]	; (800a2a8 <HAL_DMA_IRQHandler+0x6b4>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d01d      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a1d      	ldr	r2, [pc, #116]	; (800a2ac <HAL_DMA_IRQHandler+0x6b8>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d018      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a1c      	ldr	r2, [pc, #112]	; (800a2b0 <HAL_DMA_IRQHandler+0x6bc>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d013      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a1a      	ldr	r2, [pc, #104]	; (800a2b4 <HAL_DMA_IRQHandler+0x6c0>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d00e      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a19      	ldr	r2, [pc, #100]	; (800a2b8 <HAL_DMA_IRQHandler+0x6c4>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d009      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <HAL_DMA_IRQHandler+0x6c8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d004      	beq.n	800a26c <HAL_DMA_IRQHandler+0x678>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a16      	ldr	r2, [pc, #88]	; (800a2c0 <HAL_DMA_IRQHandler+0x6cc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d12b      	bne.n	800a2c4 <HAL_DMA_IRQHandler+0x6d0>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0310 	and.w	r3, r3, #16
 800a276:	2b00      	cmp	r3, #0
 800a278:	bf14      	ite	ne
 800a27a:	2301      	movne	r3, #1
 800a27c:	2300      	moveq	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	e02a      	b.n	800a2d8 <HAL_DMA_IRQHandler+0x6e4>
 800a282:	bf00      	nop
 800a284:	40020010 	.word	0x40020010
 800a288:	40020028 	.word	0x40020028
 800a28c:	40020040 	.word	0x40020040
 800a290:	40020058 	.word	0x40020058
 800a294:	40020070 	.word	0x40020070
 800a298:	40020088 	.word	0x40020088
 800a29c:	400200a0 	.word	0x400200a0
 800a2a0:	400200b8 	.word	0x400200b8
 800a2a4:	40020410 	.word	0x40020410
 800a2a8:	40020428 	.word	0x40020428
 800a2ac:	40020440 	.word	0x40020440
 800a2b0:	40020458 	.word	0x40020458
 800a2b4:	40020470 	.word	0x40020470
 800a2b8:	40020488 	.word	0x40020488
 800a2bc:	400204a0 	.word	0x400204a0
 800a2c0:	400204b8 	.word	0x400204b8
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bf14      	ite	ne
 800a2d2:	2301      	movne	r3, #1
 800a2d4:	2300      	moveq	r3, #0
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 8087 	beq.w	800a3ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e2:	f003 031f 	and.w	r3, r3, #31
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	409a      	lsls	r2, r3
 800a2ea:	6a3b      	ldr	r3, [r7, #32]
 800a2ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d139      	bne.n	800a36e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0216 	bic.w	r2, r2, #22
 800a308:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a318:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <HAL_DMA_IRQHandler+0x736>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a326:	2b00      	cmp	r3, #0
 800a328:	d007      	beq.n	800a33a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0208 	bic.w	r2, r2, #8
 800a338:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a33e:	f003 031f 	and.w	r3, r3, #31
 800a342:	223f      	movs	r2, #63	; 0x3f
 800a344:	409a      	lsls	r2, r3
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 834a 	beq.w	800a9f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	4798      	blx	r3
          }
          return;
 800a36c:	e344      	b.n	800a9f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d018      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d108      	bne.n	800a39c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d02c      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
 800a39a:	e027      	b.n	800a3ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d023      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
 800a3ac:	e01e      	b.n	800a3ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10f      	bne.n	800a3dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f022 0210 	bic.w	r2, r2, #16
 800a3ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 8306 	beq.w	800aa02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 8088 	beq.w	800a514 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2204      	movs	r2, #4
 800a408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a7a      	ldr	r2, [pc, #488]	; (800a5fc <HAL_DMA_IRQHandler+0xa08>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d04a      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a79      	ldr	r2, [pc, #484]	; (800a600 <HAL_DMA_IRQHandler+0xa0c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d045      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a77      	ldr	r2, [pc, #476]	; (800a604 <HAL_DMA_IRQHandler+0xa10>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d040      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a76      	ldr	r2, [pc, #472]	; (800a608 <HAL_DMA_IRQHandler+0xa14>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d03b      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a74      	ldr	r2, [pc, #464]	; (800a60c <HAL_DMA_IRQHandler+0xa18>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d036      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a73      	ldr	r2, [pc, #460]	; (800a610 <HAL_DMA_IRQHandler+0xa1c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d031      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a71      	ldr	r2, [pc, #452]	; (800a614 <HAL_DMA_IRQHandler+0xa20>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d02c      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a70      	ldr	r2, [pc, #448]	; (800a618 <HAL_DMA_IRQHandler+0xa24>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d027      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a6e      	ldr	r2, [pc, #440]	; (800a61c <HAL_DMA_IRQHandler+0xa28>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d022      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a6d      	ldr	r2, [pc, #436]	; (800a620 <HAL_DMA_IRQHandler+0xa2c>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d01d      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a6b      	ldr	r2, [pc, #428]	; (800a624 <HAL_DMA_IRQHandler+0xa30>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d018      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a6a      	ldr	r2, [pc, #424]	; (800a628 <HAL_DMA_IRQHandler+0xa34>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d013      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a68      	ldr	r2, [pc, #416]	; (800a62c <HAL_DMA_IRQHandler+0xa38>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d00e      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a67      	ldr	r2, [pc, #412]	; (800a630 <HAL_DMA_IRQHandler+0xa3c>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d009      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a65      	ldr	r2, [pc, #404]	; (800a634 <HAL_DMA_IRQHandler+0xa40>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d004      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x8b8>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a64      	ldr	r2, [pc, #400]	; (800a638 <HAL_DMA_IRQHandler+0xa44>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d108      	bne.n	800a4be <HAL_DMA_IRQHandler+0x8ca>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 0201 	bic.w	r2, r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	e007      	b.n	800a4ce <HAL_DMA_IRQHandler+0x8da>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 0201 	bic.w	r2, r2, #1
 800a4cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d307      	bcc.n	800a4ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f2      	bne.n	800a4ce <HAL_DMA_IRQHandler+0x8da>
 800a4e8:	e000      	b.n	800a4ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 800a4ea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d004      	beq.n	800a504 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2203      	movs	r2, #3
 800a4fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800a502:	e003      	b.n	800a50c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 8272 	beq.w	800aa02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	4798      	blx	r3
 800a526:	e26c      	b.n	800aa02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a43      	ldr	r2, [pc, #268]	; (800a63c <HAL_DMA_IRQHandler+0xa48>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d022      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a42      	ldr	r2, [pc, #264]	; (800a640 <HAL_DMA_IRQHandler+0xa4c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d01d      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a40      	ldr	r2, [pc, #256]	; (800a644 <HAL_DMA_IRQHandler+0xa50>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d018      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a3f      	ldr	r2, [pc, #252]	; (800a648 <HAL_DMA_IRQHandler+0xa54>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d013      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a3d      	ldr	r2, [pc, #244]	; (800a64c <HAL_DMA_IRQHandler+0xa58>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d00e      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a3c      	ldr	r2, [pc, #240]	; (800a650 <HAL_DMA_IRQHandler+0xa5c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d009      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a3a      	ldr	r2, [pc, #232]	; (800a654 <HAL_DMA_IRQHandler+0xa60>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d004      	beq.n	800a578 <HAL_DMA_IRQHandler+0x984>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a39      	ldr	r2, [pc, #228]	; (800a658 <HAL_DMA_IRQHandler+0xa64>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d101      	bne.n	800a57c <HAL_DMA_IRQHandler+0x988>
 800a578:	2301      	movs	r3, #1
 800a57a:	e000      	b.n	800a57e <HAL_DMA_IRQHandler+0x98a>
 800a57c:	2300      	movs	r3, #0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f000 823f 	beq.w	800aa02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a590:	f003 031f 	and.w	r3, r3, #31
 800a594:	2204      	movs	r2, #4
 800a596:	409a      	lsls	r2, r3
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80cd 	beq.w	800a73c <HAL_DMA_IRQHandler+0xb48>
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 80c7 	beq.w	800a73c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b2:	f003 031f 	and.w	r3, r3, #31
 800a5b6:	2204      	movs	r2, #4
 800a5b8:	409a      	lsls	r2, r3
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d049      	beq.n	800a65c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8210 	beq.w	800a9fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5e4:	e20a      	b.n	800a9fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 8206 	beq.w	800a9fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a5f8:	e200      	b.n	800a9fc <HAL_DMA_IRQHandler+0xe08>
 800a5fa:	bf00      	nop
 800a5fc:	40020010 	.word	0x40020010
 800a600:	40020028 	.word	0x40020028
 800a604:	40020040 	.word	0x40020040
 800a608:	40020058 	.word	0x40020058
 800a60c:	40020070 	.word	0x40020070
 800a610:	40020088 	.word	0x40020088
 800a614:	400200a0 	.word	0x400200a0
 800a618:	400200b8 	.word	0x400200b8
 800a61c:	40020410 	.word	0x40020410
 800a620:	40020428 	.word	0x40020428
 800a624:	40020440 	.word	0x40020440
 800a628:	40020458 	.word	0x40020458
 800a62c:	40020470 	.word	0x40020470
 800a630:	40020488 	.word	0x40020488
 800a634:	400204a0 	.word	0x400204a0
 800a638:	400204b8 	.word	0x400204b8
 800a63c:	58025408 	.word	0x58025408
 800a640:	5802541c 	.word	0x5802541c
 800a644:	58025430 	.word	0x58025430
 800a648:	58025444 	.word	0x58025444
 800a64c:	58025458 	.word	0x58025458
 800a650:	5802546c 	.word	0x5802546c
 800a654:	58025480 	.word	0x58025480
 800a658:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	d160      	bne.n	800a728 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a7f      	ldr	r2, [pc, #508]	; (800a868 <HAL_DMA_IRQHandler+0xc74>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d04a      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a7d      	ldr	r2, [pc, #500]	; (800a86c <HAL_DMA_IRQHandler+0xc78>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d045      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a7c      	ldr	r2, [pc, #496]	; (800a870 <HAL_DMA_IRQHandler+0xc7c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d040      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a7a      	ldr	r2, [pc, #488]	; (800a874 <HAL_DMA_IRQHandler+0xc80>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d03b      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a79      	ldr	r2, [pc, #484]	; (800a878 <HAL_DMA_IRQHandler+0xc84>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d036      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a77      	ldr	r2, [pc, #476]	; (800a87c <HAL_DMA_IRQHandler+0xc88>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d031      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a76      	ldr	r2, [pc, #472]	; (800a880 <HAL_DMA_IRQHandler+0xc8c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d02c      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a74      	ldr	r2, [pc, #464]	; (800a884 <HAL_DMA_IRQHandler+0xc90>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d027      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a73      	ldr	r2, [pc, #460]	; (800a888 <HAL_DMA_IRQHandler+0xc94>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d022      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a71      	ldr	r2, [pc, #452]	; (800a88c <HAL_DMA_IRQHandler+0xc98>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d01d      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a70      	ldr	r2, [pc, #448]	; (800a890 <HAL_DMA_IRQHandler+0xc9c>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d018      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a6e      	ldr	r2, [pc, #440]	; (800a894 <HAL_DMA_IRQHandler+0xca0>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d013      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a6d      	ldr	r2, [pc, #436]	; (800a898 <HAL_DMA_IRQHandler+0xca4>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d00e      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a6b      	ldr	r2, [pc, #428]	; (800a89c <HAL_DMA_IRQHandler+0xca8>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d009      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a6a      	ldr	r2, [pc, #424]	; (800a8a0 <HAL_DMA_IRQHandler+0xcac>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d004      	beq.n	800a706 <HAL_DMA_IRQHandler+0xb12>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a68      	ldr	r2, [pc, #416]	; (800a8a4 <HAL_DMA_IRQHandler+0xcb0>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d108      	bne.n	800a718 <HAL_DMA_IRQHandler+0xb24>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0208 	bic.w	r2, r2, #8
 800a714:	601a      	str	r2, [r3, #0]
 800a716:	e007      	b.n	800a728 <HAL_DMA_IRQHandler+0xb34>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0204 	bic.w	r2, r2, #4
 800a726:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8165 	beq.w	800a9fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a73a:	e15f      	b.n	800a9fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	2202      	movs	r2, #2
 800a746:	409a      	lsls	r2, r3
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4013      	ands	r3, r2
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80c5 	beq.w	800a8dc <HAL_DMA_IRQHandler+0xce8>
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80bf 	beq.w	800a8dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a762:	f003 031f 	and.w	r3, r3, #31
 800a766:	2202      	movs	r2, #2
 800a768:	409a      	lsls	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d018      	beq.n	800a7aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d109      	bne.n	800a796 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 813a 	beq.w	800aa00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a794:	e134      	b.n	800aa00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	f000 8130 	beq.w	800aa00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a7a8:	e12a      	b.n	800aa00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	f003 0320 	and.w	r3, r3, #32
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f040 8089 	bne.w	800a8c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a2b      	ldr	r2, [pc, #172]	; (800a868 <HAL_DMA_IRQHandler+0xc74>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d04a      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a29      	ldr	r2, [pc, #164]	; (800a86c <HAL_DMA_IRQHandler+0xc78>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d045      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a28      	ldr	r2, [pc, #160]	; (800a870 <HAL_DMA_IRQHandler+0xc7c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d040      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a26      	ldr	r2, [pc, #152]	; (800a874 <HAL_DMA_IRQHandler+0xc80>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d03b      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a25      	ldr	r2, [pc, #148]	; (800a878 <HAL_DMA_IRQHandler+0xc84>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d036      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a23      	ldr	r2, [pc, #140]	; (800a87c <HAL_DMA_IRQHandler+0xc88>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d031      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a22      	ldr	r2, [pc, #136]	; (800a880 <HAL_DMA_IRQHandler+0xc8c>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d02c      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a20      	ldr	r2, [pc, #128]	; (800a884 <HAL_DMA_IRQHandler+0xc90>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d027      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a1f      	ldr	r2, [pc, #124]	; (800a888 <HAL_DMA_IRQHandler+0xc94>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d022      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <HAL_DMA_IRQHandler+0xc98>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d01d      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a1c      	ldr	r2, [pc, #112]	; (800a890 <HAL_DMA_IRQHandler+0xc9c>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d018      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a1a      	ldr	r2, [pc, #104]	; (800a894 <HAL_DMA_IRQHandler+0xca0>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d013      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a19      	ldr	r2, [pc, #100]	; (800a898 <HAL_DMA_IRQHandler+0xca4>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d00e      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a17      	ldr	r2, [pc, #92]	; (800a89c <HAL_DMA_IRQHandler+0xca8>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d009      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a16      	ldr	r2, [pc, #88]	; (800a8a0 <HAL_DMA_IRQHandler+0xcac>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d004      	beq.n	800a856 <HAL_DMA_IRQHandler+0xc62>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a14      	ldr	r2, [pc, #80]	; (800a8a4 <HAL_DMA_IRQHandler+0xcb0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d128      	bne.n	800a8a8 <HAL_DMA_IRQHandler+0xcb4>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0214 	bic.w	r2, r2, #20
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	e027      	b.n	800a8b8 <HAL_DMA_IRQHandler+0xcc4>
 800a868:	40020010 	.word	0x40020010
 800a86c:	40020028 	.word	0x40020028
 800a870:	40020040 	.word	0x40020040
 800a874:	40020058 	.word	0x40020058
 800a878:	40020070 	.word	0x40020070
 800a87c:	40020088 	.word	0x40020088
 800a880:	400200a0 	.word	0x400200a0
 800a884:	400200b8 	.word	0x400200b8
 800a888:	40020410 	.word	0x40020410
 800a88c:	40020428 	.word	0x40020428
 800a890:	40020440 	.word	0x40020440
 800a894:	40020458 	.word	0x40020458
 800a898:	40020470 	.word	0x40020470
 800a89c:	40020488 	.word	0x40020488
 800a8a0:	400204a0 	.word	0x400204a0
 800a8a4:	400204b8 	.word	0x400204b8
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f022 020a 	bic.w	r2, r2, #10
 800a8b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8097 	beq.w	800aa00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a8da:	e091      	b.n	800aa00 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e0:	f003 031f 	and.w	r3, r3, #31
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	409a      	lsls	r2, r3
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 8088 	beq.w	800aa02 <HAL_DMA_IRQHandler+0xe0e>
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f003 0308 	and.w	r3, r3, #8
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8082 	beq.w	800aa02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a41      	ldr	r2, [pc, #260]	; (800aa08 <HAL_DMA_IRQHandler+0xe14>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d04a      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a3f      	ldr	r2, [pc, #252]	; (800aa0c <HAL_DMA_IRQHandler+0xe18>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d045      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a3e      	ldr	r2, [pc, #248]	; (800aa10 <HAL_DMA_IRQHandler+0xe1c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d040      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a3c      	ldr	r2, [pc, #240]	; (800aa14 <HAL_DMA_IRQHandler+0xe20>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d03b      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a3b      	ldr	r2, [pc, #236]	; (800aa18 <HAL_DMA_IRQHandler+0xe24>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d036      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a39      	ldr	r2, [pc, #228]	; (800aa1c <HAL_DMA_IRQHandler+0xe28>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d031      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a38      	ldr	r2, [pc, #224]	; (800aa20 <HAL_DMA_IRQHandler+0xe2c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d02c      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a36      	ldr	r2, [pc, #216]	; (800aa24 <HAL_DMA_IRQHandler+0xe30>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d027      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a35      	ldr	r2, [pc, #212]	; (800aa28 <HAL_DMA_IRQHandler+0xe34>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d022      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a33      	ldr	r2, [pc, #204]	; (800aa2c <HAL_DMA_IRQHandler+0xe38>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d01d      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a32      	ldr	r2, [pc, #200]	; (800aa30 <HAL_DMA_IRQHandler+0xe3c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d018      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a30      	ldr	r2, [pc, #192]	; (800aa34 <HAL_DMA_IRQHandler+0xe40>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d013      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a2f      	ldr	r2, [pc, #188]	; (800aa38 <HAL_DMA_IRQHandler+0xe44>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d00e      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a2d      	ldr	r2, [pc, #180]	; (800aa3c <HAL_DMA_IRQHandler+0xe48>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d009      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a2c      	ldr	r2, [pc, #176]	; (800aa40 <HAL_DMA_IRQHandler+0xe4c>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d004      	beq.n	800a99e <HAL_DMA_IRQHandler+0xdaa>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a2a      	ldr	r2, [pc, #168]	; (800aa44 <HAL_DMA_IRQHandler+0xe50>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d108      	bne.n	800a9b0 <HAL_DMA_IRQHandler+0xdbc>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f022 021c 	bic.w	r2, r2, #28
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	e007      	b.n	800a9c0 <HAL_DMA_IRQHandler+0xdcc>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f022 020e 	bic.w	r2, r2, #14
 800a9be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9c4:	f003 031f 	and.w	r3, r3, #31
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	409a      	lsls	r2, r3
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	4798      	blx	r3
 800a9f6:	e004      	b.n	800aa02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a9f8:	bf00      	nop
 800a9fa:	e002      	b.n	800aa02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a9fc:	bf00      	nop
 800a9fe:	e000      	b.n	800aa02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aa00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800aa02:	3728      	adds	r7, #40	; 0x28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40020010 	.word	0x40020010
 800aa0c:	40020028 	.word	0x40020028
 800aa10:	40020040 	.word	0x40020040
 800aa14:	40020058 	.word	0x40020058
 800aa18:	40020070 	.word	0x40020070
 800aa1c:	40020088 	.word	0x40020088
 800aa20:	400200a0 	.word	0x400200a0
 800aa24:	400200b8 	.word	0x400200b8
 800aa28:	40020410 	.word	0x40020410
 800aa2c:	40020428 	.word	0x40020428
 800aa30:	40020440 	.word	0x40020440
 800aa34:	40020458 	.word	0x40020458
 800aa38:	40020470 	.word	0x40020470
 800aa3c:	40020488 	.word	0x40020488
 800aa40:	400204a0 	.word	0x400204a0
 800aa44:	400204b8 	.word	0x400204b8

0800aa48 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa56:	b2db      	uxtb	r3, r3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b087      	sub	sp, #28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa94:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a7f      	ldr	r2, [pc, #508]	; (800ac98 <DMA_SetConfig+0x21c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d072      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a7d      	ldr	r2, [pc, #500]	; (800ac9c <DMA_SetConfig+0x220>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d06d      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a7c      	ldr	r2, [pc, #496]	; (800aca0 <DMA_SetConfig+0x224>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d068      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a7a      	ldr	r2, [pc, #488]	; (800aca4 <DMA_SetConfig+0x228>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d063      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a79      	ldr	r2, [pc, #484]	; (800aca8 <DMA_SetConfig+0x22c>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d05e      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a77      	ldr	r2, [pc, #476]	; (800acac <DMA_SetConfig+0x230>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d059      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a76      	ldr	r2, [pc, #472]	; (800acb0 <DMA_SetConfig+0x234>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d054      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a74      	ldr	r2, [pc, #464]	; (800acb4 <DMA_SetConfig+0x238>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d04f      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a73      	ldr	r2, [pc, #460]	; (800acb8 <DMA_SetConfig+0x23c>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d04a      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a71      	ldr	r2, [pc, #452]	; (800acbc <DMA_SetConfig+0x240>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d045      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a70      	ldr	r2, [pc, #448]	; (800acc0 <DMA_SetConfig+0x244>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d040      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a6e      	ldr	r2, [pc, #440]	; (800acc4 <DMA_SetConfig+0x248>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d03b      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a6d      	ldr	r2, [pc, #436]	; (800acc8 <DMA_SetConfig+0x24c>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d036      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a6b      	ldr	r2, [pc, #428]	; (800accc <DMA_SetConfig+0x250>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d031      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a6a      	ldr	r2, [pc, #424]	; (800acd0 <DMA_SetConfig+0x254>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d02c      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a68      	ldr	r2, [pc, #416]	; (800acd4 <DMA_SetConfig+0x258>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d027      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4a67      	ldr	r2, [pc, #412]	; (800acd8 <DMA_SetConfig+0x25c>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d022      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a65      	ldr	r2, [pc, #404]	; (800acdc <DMA_SetConfig+0x260>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d01d      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a64      	ldr	r2, [pc, #400]	; (800ace0 <DMA_SetConfig+0x264>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d018      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4a62      	ldr	r2, [pc, #392]	; (800ace4 <DMA_SetConfig+0x268>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d013      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a61      	ldr	r2, [pc, #388]	; (800ace8 <DMA_SetConfig+0x26c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d00e      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a5f      	ldr	r2, [pc, #380]	; (800acec <DMA_SetConfig+0x270>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d009      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a5e      	ldr	r2, [pc, #376]	; (800acf0 <DMA_SetConfig+0x274>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d004      	beq.n	800ab86 <DMA_SetConfig+0x10a>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a5c      	ldr	r2, [pc, #368]	; (800acf4 <DMA_SetConfig+0x278>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d101      	bne.n	800ab8a <DMA_SetConfig+0x10e>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e000      	b.n	800ab8c <DMA_SetConfig+0x110>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00d      	beq.n	800abac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ab98:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d004      	beq.n	800abac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800abaa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a39      	ldr	r2, [pc, #228]	; (800ac98 <DMA_SetConfig+0x21c>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d04a      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a38      	ldr	r2, [pc, #224]	; (800ac9c <DMA_SetConfig+0x220>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d045      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a36      	ldr	r2, [pc, #216]	; (800aca0 <DMA_SetConfig+0x224>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d040      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a35      	ldr	r2, [pc, #212]	; (800aca4 <DMA_SetConfig+0x228>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d03b      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a33      	ldr	r2, [pc, #204]	; (800aca8 <DMA_SetConfig+0x22c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d036      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a32      	ldr	r2, [pc, #200]	; (800acac <DMA_SetConfig+0x230>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d031      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a30      	ldr	r2, [pc, #192]	; (800acb0 <DMA_SetConfig+0x234>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d02c      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a2f      	ldr	r2, [pc, #188]	; (800acb4 <DMA_SetConfig+0x238>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d027      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a2d      	ldr	r2, [pc, #180]	; (800acb8 <DMA_SetConfig+0x23c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d022      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a2c      	ldr	r2, [pc, #176]	; (800acbc <DMA_SetConfig+0x240>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d01d      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a2a      	ldr	r2, [pc, #168]	; (800acc0 <DMA_SetConfig+0x244>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d018      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a29      	ldr	r2, [pc, #164]	; (800acc4 <DMA_SetConfig+0x248>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d013      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a27      	ldr	r2, [pc, #156]	; (800acc8 <DMA_SetConfig+0x24c>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00e      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a26      	ldr	r2, [pc, #152]	; (800accc <DMA_SetConfig+0x250>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d009      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a24      	ldr	r2, [pc, #144]	; (800acd0 <DMA_SetConfig+0x254>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <DMA_SetConfig+0x1d0>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a23      	ldr	r2, [pc, #140]	; (800acd4 <DMA_SetConfig+0x258>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d101      	bne.n	800ac50 <DMA_SetConfig+0x1d4>
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e000      	b.n	800ac52 <DMA_SetConfig+0x1d6>
 800ac50:	2300      	movs	r3, #0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d059      	beq.n	800ad0a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5a:	f003 031f 	and.w	r3, r3, #31
 800ac5e:	223f      	movs	r2, #63	; 0x3f
 800ac60:	409a      	lsls	r2, r3
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac74:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	683a      	ldr	r2, [r7, #0]
 800ac7c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	2b40      	cmp	r3, #64	; 0x40
 800ac84:	d138      	bne.n	800acf8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800ac96:	e086      	b.n	800ada6 <DMA_SetConfig+0x32a>
 800ac98:	40020010 	.word	0x40020010
 800ac9c:	40020028 	.word	0x40020028
 800aca0:	40020040 	.word	0x40020040
 800aca4:	40020058 	.word	0x40020058
 800aca8:	40020070 	.word	0x40020070
 800acac:	40020088 	.word	0x40020088
 800acb0:	400200a0 	.word	0x400200a0
 800acb4:	400200b8 	.word	0x400200b8
 800acb8:	40020410 	.word	0x40020410
 800acbc:	40020428 	.word	0x40020428
 800acc0:	40020440 	.word	0x40020440
 800acc4:	40020458 	.word	0x40020458
 800acc8:	40020470 	.word	0x40020470
 800accc:	40020488 	.word	0x40020488
 800acd0:	400204a0 	.word	0x400204a0
 800acd4:	400204b8 	.word	0x400204b8
 800acd8:	58025408 	.word	0x58025408
 800acdc:	5802541c 	.word	0x5802541c
 800ace0:	58025430 	.word	0x58025430
 800ace4:	58025444 	.word	0x58025444
 800ace8:	58025458 	.word	0x58025458
 800acec:	5802546c 	.word	0x5802546c
 800acf0:	58025480 	.word	0x58025480
 800acf4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	60da      	str	r2, [r3, #12]
}
 800ad08:	e04d      	b.n	800ada6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a29      	ldr	r2, [pc, #164]	; (800adb4 <DMA_SetConfig+0x338>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d022      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a27      	ldr	r2, [pc, #156]	; (800adb8 <DMA_SetConfig+0x33c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01d      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a26      	ldr	r2, [pc, #152]	; (800adbc <DMA_SetConfig+0x340>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d018      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a24      	ldr	r2, [pc, #144]	; (800adc0 <DMA_SetConfig+0x344>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d013      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a23      	ldr	r2, [pc, #140]	; (800adc4 <DMA_SetConfig+0x348>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d00e      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <DMA_SetConfig+0x34c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d009      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a20      	ldr	r2, [pc, #128]	; (800adcc <DMA_SetConfig+0x350>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d004      	beq.n	800ad5a <DMA_SetConfig+0x2de>
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1e      	ldr	r2, [pc, #120]	; (800add0 <DMA_SetConfig+0x354>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d101      	bne.n	800ad5e <DMA_SetConfig+0x2e2>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e000      	b.n	800ad60 <DMA_SetConfig+0x2e4>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d020      	beq.n	800ada6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad68:	f003 031f 	and.w	r3, r3, #31
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	409a      	lsls	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	683a      	ldr	r2, [r7, #0]
 800ad7a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	2b40      	cmp	r3, #64	; 0x40
 800ad82:	d108      	bne.n	800ad96 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68ba      	ldr	r2, [r7, #8]
 800ad92:	60da      	str	r2, [r3, #12]
}
 800ad94:	e007      	b.n	800ada6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	60da      	str	r2, [r3, #12]
}
 800ada6:	bf00      	nop
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	58025408 	.word	0x58025408
 800adb8:	5802541c 	.word	0x5802541c
 800adbc:	58025430 	.word	0x58025430
 800adc0:	58025444 	.word	0x58025444
 800adc4:	58025458 	.word	0x58025458
 800adc8:	5802546c 	.word	0x5802546c
 800adcc:	58025480 	.word	0x58025480
 800add0:	58025494 	.word	0x58025494

0800add4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a42      	ldr	r2, [pc, #264]	; (800aeec <DMA_CalcBaseAndBitshift+0x118>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d04a      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a41      	ldr	r2, [pc, #260]	; (800aef0 <DMA_CalcBaseAndBitshift+0x11c>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d045      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a3f      	ldr	r2, [pc, #252]	; (800aef4 <DMA_CalcBaseAndBitshift+0x120>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d040      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a3e      	ldr	r2, [pc, #248]	; (800aef8 <DMA_CalcBaseAndBitshift+0x124>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d03b      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a3c      	ldr	r2, [pc, #240]	; (800aefc <DMA_CalcBaseAndBitshift+0x128>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d036      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a3b      	ldr	r2, [pc, #236]	; (800af00 <DMA_CalcBaseAndBitshift+0x12c>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d031      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a39      	ldr	r2, [pc, #228]	; (800af04 <DMA_CalcBaseAndBitshift+0x130>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d02c      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a38      	ldr	r2, [pc, #224]	; (800af08 <DMA_CalcBaseAndBitshift+0x134>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d027      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a36      	ldr	r2, [pc, #216]	; (800af0c <DMA_CalcBaseAndBitshift+0x138>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d022      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a35      	ldr	r2, [pc, #212]	; (800af10 <DMA_CalcBaseAndBitshift+0x13c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d01d      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a33      	ldr	r2, [pc, #204]	; (800af14 <DMA_CalcBaseAndBitshift+0x140>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d018      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a32      	ldr	r2, [pc, #200]	; (800af18 <DMA_CalcBaseAndBitshift+0x144>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d013      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a30      	ldr	r2, [pc, #192]	; (800af1c <DMA_CalcBaseAndBitshift+0x148>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d00e      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a2f      	ldr	r2, [pc, #188]	; (800af20 <DMA_CalcBaseAndBitshift+0x14c>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d009      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a2d      	ldr	r2, [pc, #180]	; (800af24 <DMA_CalcBaseAndBitshift+0x150>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d004      	beq.n	800ae7c <DMA_CalcBaseAndBitshift+0xa8>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a2c      	ldr	r2, [pc, #176]	; (800af28 <DMA_CalcBaseAndBitshift+0x154>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d101      	bne.n	800ae80 <DMA_CalcBaseAndBitshift+0xac>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e000      	b.n	800ae82 <DMA_CalcBaseAndBitshift+0xae>
 800ae80:	2300      	movs	r3, #0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d024      	beq.n	800aed0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	3b10      	subs	r3, #16
 800ae8e:	4a27      	ldr	r2, [pc, #156]	; (800af2c <DMA_CalcBaseAndBitshift+0x158>)
 800ae90:	fba2 2303 	umull	r2, r3, r2, r3
 800ae94:	091b      	lsrs	r3, r3, #4
 800ae96:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f003 0307 	and.w	r3, r3, #7
 800ae9e:	4a24      	ldr	r2, [pc, #144]	; (800af30 <DMA_CalcBaseAndBitshift+0x15c>)
 800aea0:	5cd3      	ldrb	r3, [r2, r3]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d908      	bls.n	800aec0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	4b1f      	ldr	r3, [pc, #124]	; (800af34 <DMA_CalcBaseAndBitshift+0x160>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	1d1a      	adds	r2, r3, #4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	659a      	str	r2, [r3, #88]	; 0x58
 800aebe:	e00d      	b.n	800aedc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	4b1b      	ldr	r3, [pc, #108]	; (800af34 <DMA_CalcBaseAndBitshift+0x160>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	6593      	str	r3, [r2, #88]	; 0x58
 800aece:	e005      	b.n	800aedc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	40020010 	.word	0x40020010
 800aef0:	40020028 	.word	0x40020028
 800aef4:	40020040 	.word	0x40020040
 800aef8:	40020058 	.word	0x40020058
 800aefc:	40020070 	.word	0x40020070
 800af00:	40020088 	.word	0x40020088
 800af04:	400200a0 	.word	0x400200a0
 800af08:	400200b8 	.word	0x400200b8
 800af0c:	40020410 	.word	0x40020410
 800af10:	40020428 	.word	0x40020428
 800af14:	40020440 	.word	0x40020440
 800af18:	40020458 	.word	0x40020458
 800af1c:	40020470 	.word	0x40020470
 800af20:	40020488 	.word	0x40020488
 800af24:	400204a0 	.word	0x400204a0
 800af28:	400204b8 	.word	0x400204b8
 800af2c:	aaaaaaab 	.word	0xaaaaaaab
 800af30:	0801b9c4 	.word	0x0801b9c4
 800af34:	fffffc00 	.word	0xfffffc00

0800af38 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d120      	bne.n	800af8e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af50:	2b03      	cmp	r3, #3
 800af52:	d858      	bhi.n	800b006 <DMA_CheckFifoParam+0xce>
 800af54:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <DMA_CheckFifoParam+0x24>)
 800af56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5a:	bf00      	nop
 800af5c:	0800af6d 	.word	0x0800af6d
 800af60:	0800af7f 	.word	0x0800af7f
 800af64:	0800af6d 	.word	0x0800af6d
 800af68:	0800b007 	.word	0x0800b007
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af74:	2b00      	cmp	r3, #0
 800af76:	d048      	beq.n	800b00a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800af7c:	e045      	b.n	800b00a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af86:	d142      	bne.n	800b00e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800af8c:	e03f      	b.n	800b00e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	699b      	ldr	r3, [r3, #24]
 800af92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af96:	d123      	bne.n	800afe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	2b03      	cmp	r3, #3
 800af9e:	d838      	bhi.n	800b012 <DMA_CheckFifoParam+0xda>
 800afa0:	a201      	add	r2, pc, #4	; (adr r2, 800afa8 <DMA_CheckFifoParam+0x70>)
 800afa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa6:	bf00      	nop
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afbf 	.word	0x0800afbf
 800afb0:	0800afb9 	.word	0x0800afb9
 800afb4:	0800afd1 	.word	0x0800afd1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	73fb      	strb	r3, [r7, #15]
        break;
 800afbc:	e030      	b.n	800b020 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d025      	beq.n	800b016 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afce:	e022      	b.n	800b016 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800afd8:	d11f      	bne.n	800b01a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800afde:	e01c      	b.n	800b01a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d902      	bls.n	800afee <DMA_CheckFifoParam+0xb6>
 800afe8:	2b03      	cmp	r3, #3
 800afea:	d003      	beq.n	800aff4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800afec:	e018      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
        break;
 800aff2:	e015      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00e      	beq.n	800b01e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
    break;
 800b004:	e00b      	b.n	800b01e <DMA_CheckFifoParam+0xe6>
        break;
 800b006:	bf00      	nop
 800b008:	e00a      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        break;
 800b00a:	bf00      	nop
 800b00c:	e008      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        break;
 800b00e:	bf00      	nop
 800b010:	e006      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        break;
 800b012:	bf00      	nop
 800b014:	e004      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        break;
 800b016:	bf00      	nop
 800b018:	e002      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
        break;
 800b01a:	bf00      	nop
 800b01c:	e000      	b.n	800b020 <DMA_CheckFifoParam+0xe8>
    break;
 800b01e:	bf00      	nop
    }
  }

  return status;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop

0800b030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a38      	ldr	r2, [pc, #224]	; (800b124 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d022      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a36      	ldr	r2, [pc, #216]	; (800b128 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d01d      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a35      	ldr	r2, [pc, #212]	; (800b12c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d018      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a33      	ldr	r2, [pc, #204]	; (800b130 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d013      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a32      	ldr	r2, [pc, #200]	; (800b134 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00e      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a30      	ldr	r2, [pc, #192]	; (800b138 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d009      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a2f      	ldr	r2, [pc, #188]	; (800b13c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a2d      	ldr	r2, [pc, #180]	; (800b140 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d101      	bne.n	800b092 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b092:	2300      	movs	r3, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d01a      	beq.n	800b0ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	3b08      	subs	r3, #8
 800b0a0:	4a28      	ldr	r2, [pc, #160]	; (800b144 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a6:	091b      	lsrs	r3, r3, #4
 800b0a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4b26      	ldr	r3, [pc, #152]	; (800b148 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a24      	ldr	r2, [pc, #144]	; (800b14c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b0bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f003 031f 	and.w	r3, r3, #31
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	409a      	lsls	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b0cc:	e024      	b.n	800b118 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	3b10      	subs	r3, #16
 800b0d6:	4a1e      	ldr	r2, [pc, #120]	; (800b150 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b0dc:	091b      	lsrs	r3, r3, #4
 800b0de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	4a1c      	ldr	r2, [pc, #112]	; (800b154 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d806      	bhi.n	800b0f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	4a1b      	ldr	r2, [pc, #108]	; (800b158 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d902      	bls.n	800b0f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	4b18      	ldr	r3, [pc, #96]	; (800b15c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b0fa:	4413      	add	r3, r2
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a16      	ldr	r2, [pc, #88]	; (800b160 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b108:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f003 031f 	and.w	r3, r3, #31
 800b110:	2201      	movs	r2, #1
 800b112:	409a      	lsls	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	58025408 	.word	0x58025408
 800b128:	5802541c 	.word	0x5802541c
 800b12c:	58025430 	.word	0x58025430
 800b130:	58025444 	.word	0x58025444
 800b134:	58025458 	.word	0x58025458
 800b138:	5802546c 	.word	0x5802546c
 800b13c:	58025480 	.word	0x58025480
 800b140:	58025494 	.word	0x58025494
 800b144:	cccccccd 	.word	0xcccccccd
 800b148:	16009600 	.word	0x16009600
 800b14c:	58025880 	.word	0x58025880
 800b150:	aaaaaaab 	.word	0xaaaaaaab
 800b154:	400204b8 	.word	0x400204b8
 800b158:	4002040f 	.word	0x4002040f
 800b15c:	10008200 	.word	0x10008200
 800b160:	40020880 	.word	0x40020880

0800b164 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	b2db      	uxtb	r3, r3
 800b172:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d04a      	beq.n	800b210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d847      	bhi.n	800b210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a25      	ldr	r2, [pc, #148]	; (800b21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d022      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a24      	ldr	r2, [pc, #144]	; (800b220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d01d      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a22      	ldr	r2, [pc, #136]	; (800b224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d018      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a21      	ldr	r2, [pc, #132]	; (800b228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d013      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d00e      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a1e      	ldr	r2, [pc, #120]	; (800b230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d009      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a1c      	ldr	r2, [pc, #112]	; (800b234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d004      	beq.n	800b1d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a1b      	ldr	r2, [pc, #108]	; (800b238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d101      	bne.n	800b1d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e000      	b.n	800b1d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	4b17      	ldr	r3, [pc, #92]	; (800b23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a15      	ldr	r2, [pc, #84]	; (800b240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b1ec:	671a      	str	r2, [r3, #112]	; 0x70
 800b1ee:	e009      	b.n	800b204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	4b14      	ldr	r3, [pc, #80]	; (800b244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a11      	ldr	r2, [pc, #68]	; (800b248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b202:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	3b01      	subs	r3, #1
 800b208:	2201      	movs	r2, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b210:	bf00      	nop
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	58025408 	.word	0x58025408
 800b220:	5802541c 	.word	0x5802541c
 800b224:	58025430 	.word	0x58025430
 800b228:	58025444 	.word	0x58025444
 800b22c:	58025458 	.word	0x58025458
 800b230:	5802546c 	.word	0x5802546c
 800b234:	58025480 	.word	0x58025480
 800b238:	58025494 	.word	0x58025494
 800b23c:	1600963f 	.word	0x1600963f
 800b240:	58025940 	.word	0x58025940
 800b244:	1000823f 	.word	0x1000823f
 800b248:	40020940 	.word	0x40020940

0800b24c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08a      	sub	sp, #40	; 0x28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800b260:	2308      	movs	r3, #8
 800b262:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b264:	4b40      	ldr	r3, [pc, #256]	; (800b368 <HAL_FLASH_Program+0x11c>)
 800b266:	7d1b      	ldrb	r3, [r3, #20]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d101      	bne.n	800b270 <HAL_FLASH_Program+0x24>
 800b26c:	2302      	movs	r3, #2
 800b26e:	e076      	b.n	800b35e <HAL_FLASH_Program+0x112>
 800b270:	4b3d      	ldr	r3, [pc, #244]	; (800b368 <HAL_FLASH_Program+0x11c>)
 800b272:	2201      	movs	r2, #1
 800b274:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b27c:	d306      	bcc.n	800b28c <HAL_FLASH_Program+0x40>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b284:	d202      	bcs.n	800b28c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800b286:	2301      	movs	r3, #1
 800b288:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800b28a:	e00c      	b.n	800b2a6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b292:	d306      	bcc.n	800b2a2 <HAL_FLASH_Program+0x56>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800b29a:	d202      	bcs.n	800b2a2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800b29c:	2302      	movs	r3, #2
 800b29e:	61bb      	str	r3, [r7, #24]
 800b2a0:	e001      	b.n	800b2a6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e05b      	b.n	800b35e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b2a6:	4b30      	ldr	r3, [pc, #192]	; (800b368 <HAL_FLASH_Program+0x11c>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b2ac:	69b9      	ldr	r1, [r7, #24]
 800b2ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2b2:	f000 f897 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800b2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d147      	bne.n	800b354 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d106      	bne.n	800b2d8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800b2ca:	4b28      	ldr	r3, [pc, #160]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	4a27      	ldr	r2, [pc, #156]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b2d0:	f043 0302 	orr.w	r3, r3, #2
 800b2d4:	60d3      	str	r3, [r2, #12]
 800b2d6:	e007      	b.n	800b2e8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b2da:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b2de:	4a23      	ldr	r2, [pc, #140]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b2e0:	f043 0302 	orr.w	r3, r3, #2
 800b2e4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800b2e8:	f3bf 8f6f 	isb	sy
}
 800b2ec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b2ee:	f3bf 8f4f 	dsb	sy
}
 800b2f2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	3304      	adds	r3, #4
 800b300:	623b      	str	r3, [r7, #32]
        src_addr++;
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	3304      	adds	r3, #4
 800b306:	61fb      	str	r3, [r7, #28]
        row_index--;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d1ef      	bne.n	800b2f4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800b314:	f3bf 8f6f 	isb	sy
}
 800b318:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b31a:	f3bf 8f4f 	dsb	sy
}
 800b31e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b320:	69b9      	ldr	r1, [r7, #24]
 800b322:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b326:	f000 f85d 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d106      	bne.n	800b344 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	4a0c      	ldr	r2, [pc, #48]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b33c:	f023 0302 	bic.w	r3, r3, #2
 800b340:	60d3      	str	r3, [r2, #12]
 800b342:	e007      	b.n	800b354 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800b344:	4b09      	ldr	r3, [pc, #36]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b346:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b34a:	4a08      	ldr	r2, [pc, #32]	; (800b36c <HAL_FLASH_Program+0x120>)
 800b34c:	f023 0302 	bic.w	r3, r3, #2
 800b350:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b354:	4b04      	ldr	r3, [pc, #16]	; (800b368 <HAL_FLASH_Program+0x11c>)
 800b356:	2200      	movs	r2, #0
 800b358:	751a      	strb	r2, [r3, #20]

  return status;
 800b35a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3728      	adds	r7, #40	; 0x28
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	2400206c 	.word	0x2400206c
 800b36c:	52002000 	.word	0x52002000

0800b370 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800b370:	b480      	push	{r7}
 800b372:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800b374:	4b18      	ldr	r3, [pc, #96]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	f003 0301 	and.w	r3, r3, #1
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00d      	beq.n	800b39c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800b380:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b382:	4a16      	ldr	r2, [pc, #88]	; (800b3dc <HAL_FLASH_Unlock+0x6c>)
 800b384:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800b386:	4b14      	ldr	r3, [pc, #80]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b388:	4a15      	ldr	r2, [pc, #84]	; (800b3e0 <HAL_FLASH_Unlock+0x70>)
 800b38a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800b38c:	4b12      	ldr	r3, [pc, #72]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f003 0301 	and.w	r3, r3, #1
 800b394:	2b00      	cmp	r3, #0
 800b396:	d001      	beq.n	800b39c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	e018      	b.n	800b3ce <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800b39c:	4b0e      	ldr	r3, [pc, #56]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b39e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3a2:	f003 0301 	and.w	r3, r3, #1
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d010      	beq.n	800b3cc <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800b3aa:	4b0b      	ldr	r3, [pc, #44]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b3ac:	4a0b      	ldr	r2, [pc, #44]	; (800b3dc <HAL_FLASH_Unlock+0x6c>)
 800b3ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800b3b2:	4b09      	ldr	r3, [pc, #36]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b3b4:	4a0a      	ldr	r2, [pc, #40]	; (800b3e0 <HAL_FLASH_Unlock+0x70>)
 800b3b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800b3ba:	4b07      	ldr	r3, [pc, #28]	; (800b3d8 <HAL_FLASH_Unlock+0x68>)
 800b3bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	52002000 	.word	0x52002000
 800b3dc:	45670123 	.word	0x45670123
 800b3e0:	cdef89ab 	.word	0xcdef89ab

0800b3e4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b086      	sub	sp, #24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800b3ee:	2304      	movs	r3, #4
 800b3f0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800b3f6:	f7fa ffab 	bl	8006350 <HAL_GetTick>
 800b3fa:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d113      	bne.n	800b42a <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800b402:	4b41      	ldr	r3, [pc, #260]	; (800b508 <FLASH_WaitForLastOperation+0x124>)
 800b404:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b406:	e010      	b.n	800b42a <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b40e:	d00c      	beq.n	800b42a <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b410:	f7fa ff9e 	bl	8006350 <HAL_GetTick>
 800b414:	4602      	mov	r2, r0
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	1ad3      	subs	r3, r2, r3
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d302      	bcc.n	800b426 <FLASH_WaitForLastOperation+0x42>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	e06a      	b.n	800b500 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4b37      	ldr	r3, [pc, #220]	; (800b50c <FLASH_WaitForLastOperation+0x128>)
 800b42e:	4013      	ands	r3, r2
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	429a      	cmp	r2, r3
 800b434:	d10a      	bne.n	800b44c <FLASH_WaitForLastOperation+0x68>
 800b436:	4b36      	ldr	r3, [pc, #216]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b438:	691a      	ldr	r2, [r3, #16]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	4013      	ands	r3, r2
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	429a      	cmp	r2, r3
 800b442:	bf0c      	ite	eq
 800b444:	2301      	moveq	r3, #1
 800b446:	2300      	movne	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	e00c      	b.n	800b466 <FLASH_WaitForLastOperation+0x82>
 800b44c:	4b30      	ldr	r3, [pc, #192]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b44e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b452:	43da      	mvns	r2, r3
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	4013      	ands	r3, r2
 800b458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	bf0c      	ite	eq
 800b460:	2301      	moveq	r3, #1
 800b462:	2300      	movne	r3, #0
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1ce      	bne.n	800b408 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d105      	bne.n	800b47c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800b470:	4b27      	ldr	r3, [pc, #156]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b472:	691a      	ldr	r2, [r3, #16]
 800b474:	4b27      	ldr	r3, [pc, #156]	; (800b514 <FLASH_WaitForLastOperation+0x130>)
 800b476:	4013      	ands	r3, r2
 800b478:	613b      	str	r3, [r7, #16]
 800b47a:	e007      	b.n	800b48c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800b47c:	4b24      	ldr	r3, [pc, #144]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b47e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800b482:	4b24      	ldr	r3, [pc, #144]	; (800b514 <FLASH_WaitForLastOperation+0x130>)
 800b484:	4013      	ands	r3, r2
 800b486:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b48a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d017      	beq.n	800b4c6 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800b496:	4b20      	ldr	r3, [pc, #128]	; (800b518 <FLASH_WaitForLastOperation+0x134>)
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <FLASH_WaitForLastOperation+0x134>)
 800b4a0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	4b19      	ldr	r3, [pc, #100]	; (800b50c <FLASH_WaitForLastOperation+0x128>)
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d103      	bne.n	800b4b6 <FLASH_WaitForLastOperation+0xd2>
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6153      	str	r3, [r2, #20]
 800b4b4:	e005      	b.n	800b4c2 <FLASH_WaitForLastOperation+0xde>
 800b4b6:	4a16      	ldr	r2, [pc, #88]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4be:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e01c      	b.n	800b500 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d10b      	bne.n	800b4e4 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800b4cc:	4b10      	ldr	r3, [pc, #64]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d8:	d111      	bne.n	800b4fe <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4e0:	615a      	str	r2, [r3, #20]
 800b4e2:	e00c      	b.n	800b4fe <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4f2:	d104      	bne.n	800b4fe <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800b4f4:	4b06      	ldr	r3, [pc, #24]	; (800b510 <FLASH_WaitForLastOperation+0x12c>)
 800b4f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b4fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	80000004 	.word	0x80000004
 800b50c:	1fef000f 	.word	0x1fef000f
 800b510:	52002000 	.word	0x52002000
 800b514:	17ee0000 	.word	0x17ee0000
 800b518:	2400206c 	.word	0x2400206c

0800b51c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b52a:	4b5e      	ldr	r3, [pc, #376]	; (800b6a4 <HAL_FLASHEx_Erase+0x188>)
 800b52c:	7d1b      	ldrb	r3, [r3, #20]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d101      	bne.n	800b536 <HAL_FLASHEx_Erase+0x1a>
 800b532:	2302      	movs	r3, #2
 800b534:	e0b2      	b.n	800b69c <HAL_FLASHEx_Erase+0x180>
 800b536:	4b5b      	ldr	r3, [pc, #364]	; (800b6a4 <HAL_FLASHEx_Erase+0x188>)
 800b538:	2201      	movs	r2, #1
 800b53a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b53c:	4b59      	ldr	r3, [pc, #356]	; (800b6a4 <HAL_FLASHEx_Erase+0x188>)
 800b53e:	2200      	movs	r2, #0
 800b540:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d009      	beq.n	800b562 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b54e:	2101      	movs	r1, #1
 800b550:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b554:	f7ff ff46 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b56e:	2102      	movs	r1, #2
 800b570:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b574:	f7ff ff36 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b578:	4603      	mov	r3, r0
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 8085 	bne.w	800b694 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d136      	bne.n	800b600 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	4619      	mov	r1, r3
 800b59c:	4610      	mov	r0, r2
 800b59e:	f000 f887 	bl	800b6b0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00f      	beq.n	800b5ce <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b5b4:	f7ff ff16 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800b5c2:	4b39      	ldr	r3, [pc, #228]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	4a38      	ldr	r2, [pc, #224]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b5c8:	f023 0308 	bic.w	r3, r3, #8
 800b5cc:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d05c      	beq.n	800b694 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800b5da:	2102      	movs	r1, #2
 800b5dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b5e0:	f7ff ff00 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800b5ee:	4b2e      	ldr	r3, [pc, #184]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b5f0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b5f4:	4a2c      	ldr	r2, [pc, #176]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b5f6:	f023 0308 	bic.w	r3, r3, #8
 800b5fa:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800b5fe:	e049      	b.n	800b694 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b606:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	60bb      	str	r3, [r7, #8]
 800b60e:	e039      	b.n	800b684 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6859      	ldr	r1, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	461a      	mov	r2, r3
 800b61a:	68b8      	ldr	r0, [r7, #8]
 800b61c:	f000 f8b2 	bl	800b784 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	f003 0301 	and.w	r3, r3, #1
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00c      	beq.n	800b646 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800b62c:	2101      	movs	r1, #1
 800b62e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b632:	f7ff fed7 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b636:	4603      	mov	r3, r0
 800b638:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	491a      	ldr	r1, [pc, #104]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b640:	4b1a      	ldr	r3, [pc, #104]	; (800b6ac <HAL_FLASHEx_Erase+0x190>)
 800b642:	4013      	ands	r3, r2
 800b644:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00e      	beq.n	800b670 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800b652:	2102      	movs	r1, #2
 800b654:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b658:	f7ff fec4 	bl	800b3e4 <FLASH_WaitForLastOperation>
 800b65c:	4603      	mov	r3, r0
 800b65e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800b660:	4b11      	ldr	r3, [pc, #68]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b662:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b666:	4910      	ldr	r1, [pc, #64]	; (800b6a8 <HAL_FLASHEx_Erase+0x18c>)
 800b668:	4b10      	ldr	r3, [pc, #64]	; (800b6ac <HAL_FLASHEx_Erase+0x190>)
 800b66a:	4013      	ands	r3, r2
 800b66c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	601a      	str	r2, [r3, #0]
          break;
 800b67c:	e00a      	b.n	800b694 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	3301      	adds	r3, #1
 800b682:	60bb      	str	r3, [r7, #8]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	4413      	add	r3, r2
 800b68e:	68ba      	ldr	r2, [r7, #8]
 800b690:	429a      	cmp	r2, r3
 800b692:	d3bd      	bcc.n	800b610 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b694:	4b03      	ldr	r3, [pc, #12]	; (800b6a4 <HAL_FLASHEx_Erase+0x188>)
 800b696:	2200      	movs	r2, #0
 800b698:	751a      	strb	r2, [r3, #20]

  return status;
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	2400206c 	.word	0x2400206c
 800b6a8:	52002000 	.word	0x52002000
 800b6ac:	fffff8fb 	.word	0xfffff8fb

0800b6b0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b083      	sub	sp, #12
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	f003 0303 	and.w	r3, r3, #3
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d122      	bne.n	800b70a <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b6c4:	4b2e      	ldr	r3, [pc, #184]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	4a2d      	ldr	r2, [pc, #180]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b6ce:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b6d0:	4b2b      	ldr	r3, [pc, #172]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6d2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b6d6:	4a2a      	ldr	r2, [pc, #168]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b6dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6e2:	68da      	ldr	r2, [r3, #12]
 800b6e4:	4926      	ldr	r1, [pc, #152]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800b6ec:	4b24      	ldr	r3, [pc, #144]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6ee:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b6f2:	4923      	ldr	r1, [pc, #140]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800b6fc:	4b20      	ldr	r3, [pc, #128]	; (800b780 <FLASH_MassErase+0xd0>)
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <FLASH_MassErase+0xd0>)
 800b702:	f043 0310 	orr.w	r3, r3, #16
 800b706:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800b708:	e033      	b.n	800b772 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d011      	beq.n	800b738 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800b714:	4b1a      	ldr	r3, [pc, #104]	; (800b780 <FLASH_MassErase+0xd0>)
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	4a19      	ldr	r2, [pc, #100]	; (800b780 <FLASH_MassErase+0xd0>)
 800b71a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b71e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800b720:	4b17      	ldr	r3, [pc, #92]	; (800b780 <FLASH_MassErase+0xd0>)
 800b722:	68da      	ldr	r2, [r3, #12]
 800b724:	4916      	ldr	r1, [pc, #88]	; (800b780 <FLASH_MassErase+0xd0>)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4313      	orrs	r3, r2
 800b72a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800b72c:	4b14      	ldr	r3, [pc, #80]	; (800b780 <FLASH_MassErase+0xd0>)
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	4a13      	ldr	r2, [pc, #76]	; (800b780 <FLASH_MassErase+0xd0>)
 800b732:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b736:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d017      	beq.n	800b772 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800b742:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <FLASH_MassErase+0xd0>)
 800b744:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b748:	4a0d      	ldr	r2, [pc, #52]	; (800b780 <FLASH_MassErase+0xd0>)
 800b74a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800b74e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800b752:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <FLASH_MassErase+0xd0>)
 800b754:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b758:	4909      	ldr	r1, [pc, #36]	; (800b780 <FLASH_MassErase+0xd0>)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800b762:	4b07      	ldr	r3, [pc, #28]	; (800b780 <FLASH_MassErase+0xd0>)
 800b764:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b768:	4a05      	ldr	r2, [pc, #20]	; (800b780 <FLASH_MassErase+0xd0>)
 800b76a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800b76e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800b772:	bf00      	nop
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	52002000 	.word	0x52002000

0800b784 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d010      	beq.n	800b7bc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b79a:	4b18      	ldr	r3, [pc, #96]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	4a17      	ldr	r2, [pc, #92]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7a0:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b7a4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b7a6:	4b15      	ldr	r3, [pc, #84]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	0219      	lsls	r1, r3, #8
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	4a11      	ldr	r2, [pc, #68]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7b6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b7ba:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d014      	beq.n	800b7f0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800b7c6:	4b0d      	ldr	r3, [pc, #52]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7c8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b7cc:	4a0b      	ldr	r2, [pc, #44]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7ce:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800b7d2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800b7d6:	4b09      	ldr	r3, [pc, #36]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7d8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	0219      	lsls	r1, r3, #8
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	4a05      	ldr	r2, [pc, #20]	; (800b7fc <FLASH_Erase_Sector+0x78>)
 800b7e8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800b7ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800b7f0:	bf00      	nop
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	52002000 	.word	0x52002000

0800b800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b800:	b480      	push	{r7}
 800b802:	b089      	sub	sp, #36	; 0x24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b80e:	4b89      	ldr	r3, [pc, #548]	; (800ba34 <HAL_GPIO_Init+0x234>)
 800b810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b812:	e194      	b.n	800bb3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	2101      	movs	r1, #1
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	fa01 f303 	lsl.w	r3, r1, r3
 800b820:	4013      	ands	r3, r2
 800b822:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8186 	beq.w	800bb38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	f003 0303 	and.w	r3, r3, #3
 800b834:	2b01      	cmp	r3, #1
 800b836:	d005      	beq.n	800b844 <HAL_GPIO_Init+0x44>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	f003 0303 	and.w	r3, r3, #3
 800b840:	2b02      	cmp	r3, #2
 800b842:	d130      	bne.n	800b8a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	2203      	movs	r2, #3
 800b850:	fa02 f303 	lsl.w	r3, r2, r3
 800b854:	43db      	mvns	r3, r3
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	4013      	ands	r3, r2
 800b85a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	fa02 f303 	lsl.w	r3, r2, r3
 800b868:	69ba      	ldr	r2, [r7, #24]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	69ba      	ldr	r2, [r7, #24]
 800b872:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b87a:	2201      	movs	r2, #1
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	fa02 f303 	lsl.w	r3, r2, r3
 800b882:	43db      	mvns	r3, r3
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	4013      	ands	r3, r2
 800b888:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	091b      	lsrs	r3, r3, #4
 800b890:	f003 0201 	and.w	r2, r3, #1
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	fa02 f303 	lsl.w	r3, r2, r3
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	69ba      	ldr	r2, [r7, #24]
 800b8a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f003 0303 	and.w	r3, r3, #3
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d017      	beq.n	800b8e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	005b      	lsls	r3, r3, #1
 800b8bc:	2203      	movs	r2, #3
 800b8be:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c2:	43db      	mvns	r3, r3
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	005b      	lsls	r3, r3, #1
 800b8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f003 0303 	and.w	r3, r3, #3
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	d123      	bne.n	800b936 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	08da      	lsrs	r2, r3, #3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3208      	adds	r2, #8
 800b8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	220f      	movs	r2, #15
 800b906:	fa02 f303 	lsl.w	r3, r2, r3
 800b90a:	43db      	mvns	r3, r3
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	4013      	ands	r3, r2
 800b910:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	69fb      	ldr	r3, [r7, #28]
 800b918:	f003 0307 	and.w	r3, r3, #7
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	fa02 f303 	lsl.w	r3, r2, r3
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	4313      	orrs	r3, r2
 800b926:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	08da      	lsrs	r2, r3, #3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3208      	adds	r2, #8
 800b930:	69b9      	ldr	r1, [r7, #24]
 800b932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	2203      	movs	r2, #3
 800b942:	fa02 f303 	lsl.w	r3, r2, r3
 800b946:	43db      	mvns	r3, r3
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	4013      	ands	r3, r2
 800b94c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f003 0203 	and.w	r2, r3, #3
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	fa02 f303 	lsl.w	r3, r2, r3
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	4313      	orrs	r3, r2
 800b962:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80e0 	beq.w	800bb38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b978:	4b2f      	ldr	r3, [pc, #188]	; (800ba38 <HAL_GPIO_Init+0x238>)
 800b97a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b97e:	4a2e      	ldr	r2, [pc, #184]	; (800ba38 <HAL_GPIO_Init+0x238>)
 800b980:	f043 0302 	orr.w	r3, r3, #2
 800b984:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b988:	4b2b      	ldr	r3, [pc, #172]	; (800ba38 <HAL_GPIO_Init+0x238>)
 800b98a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b98e:	f003 0302 	and.w	r3, r3, #2
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b996:	4a29      	ldr	r2, [pc, #164]	; (800ba3c <HAL_GPIO_Init+0x23c>)
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	089b      	lsrs	r3, r3, #2
 800b99c:	3302      	adds	r3, #2
 800b99e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	f003 0303 	and.w	r3, r3, #3
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	220f      	movs	r2, #15
 800b9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b9b2:	43db      	mvns	r3, r3
 800b9b4:	69ba      	ldr	r2, [r7, #24]
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a20      	ldr	r2, [pc, #128]	; (800ba40 <HAL_GPIO_Init+0x240>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d052      	beq.n	800ba68 <HAL_GPIO_Init+0x268>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a1f      	ldr	r2, [pc, #124]	; (800ba44 <HAL_GPIO_Init+0x244>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d031      	beq.n	800ba2e <HAL_GPIO_Init+0x22e>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ba48 <HAL_GPIO_Init+0x248>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d02b      	beq.n	800ba2a <HAL_GPIO_Init+0x22a>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <HAL_GPIO_Init+0x24c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d025      	beq.n	800ba26 <HAL_GPIO_Init+0x226>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1c      	ldr	r2, [pc, #112]	; (800ba50 <HAL_GPIO_Init+0x250>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d01f      	beq.n	800ba22 <HAL_GPIO_Init+0x222>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a1b      	ldr	r2, [pc, #108]	; (800ba54 <HAL_GPIO_Init+0x254>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d019      	beq.n	800ba1e <HAL_GPIO_Init+0x21e>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4a1a      	ldr	r2, [pc, #104]	; (800ba58 <HAL_GPIO_Init+0x258>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d013      	beq.n	800ba1a <HAL_GPIO_Init+0x21a>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4a19      	ldr	r2, [pc, #100]	; (800ba5c <HAL_GPIO_Init+0x25c>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d00d      	beq.n	800ba16 <HAL_GPIO_Init+0x216>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <HAL_GPIO_Init+0x260>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d007      	beq.n	800ba12 <HAL_GPIO_Init+0x212>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	4a17      	ldr	r2, [pc, #92]	; (800ba64 <HAL_GPIO_Init+0x264>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d101      	bne.n	800ba0e <HAL_GPIO_Init+0x20e>
 800ba0a:	2309      	movs	r3, #9
 800ba0c:	e02d      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba0e:	230a      	movs	r3, #10
 800ba10:	e02b      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba12:	2308      	movs	r3, #8
 800ba14:	e029      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba16:	2307      	movs	r3, #7
 800ba18:	e027      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba1a:	2306      	movs	r3, #6
 800ba1c:	e025      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba1e:	2305      	movs	r3, #5
 800ba20:	e023      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba22:	2304      	movs	r3, #4
 800ba24:	e021      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba26:	2303      	movs	r3, #3
 800ba28:	e01f      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e01d      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e01b      	b.n	800ba6a <HAL_GPIO_Init+0x26a>
 800ba32:	bf00      	nop
 800ba34:	58000080 	.word	0x58000080
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	58000400 	.word	0x58000400
 800ba40:	58020000 	.word	0x58020000
 800ba44:	58020400 	.word	0x58020400
 800ba48:	58020800 	.word	0x58020800
 800ba4c:	58020c00 	.word	0x58020c00
 800ba50:	58021000 	.word	0x58021000
 800ba54:	58021400 	.word	0x58021400
 800ba58:	58021800 	.word	0x58021800
 800ba5c:	58021c00 	.word	0x58021c00
 800ba60:	58022000 	.word	0x58022000
 800ba64:	58022400 	.word	0x58022400
 800ba68:	2300      	movs	r3, #0
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	f002 0203 	and.w	r2, r2, #3
 800ba70:	0092      	lsls	r2, r2, #2
 800ba72:	4093      	lsls	r3, r2
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ba7a:	4938      	ldr	r1, [pc, #224]	; (800bb5c <HAL_GPIO_Init+0x35c>)
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	089b      	lsrs	r3, r3, #2
 800ba80:	3302      	adds	r3, #2
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ba88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	43db      	mvns	r3, r3
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	4013      	ands	r3, r2
 800ba98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	4313      	orrs	r3, r2
 800baac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800baae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bab2:	69bb      	ldr	r3, [r7, #24]
 800bab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	43db      	mvns	r3, r3
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	4013      	ands	r3, r2
 800bac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bad4:	69ba      	ldr	r2, [r7, #24]
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	4313      	orrs	r3, r2
 800bada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800badc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	43db      	mvns	r3, r3
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	4013      	ands	r3, r2
 800baf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800bb00:	69ba      	ldr	r2, [r7, #24]
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	43db      	mvns	r3, r3
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800bb2a:	69ba      	ldr	r2, [r7, #24]
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	69ba      	ldr	r2, [r7, #24]
 800bb36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	69fb      	ldr	r3, [r7, #28]
 800bb44:	fa22 f303 	lsr.w	r3, r2, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f ae63 	bne.w	800b814 <HAL_GPIO_Init+0x14>
  }
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	3724      	adds	r7, #36	; 0x24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	58000400 	.word	0x58000400

0800bb60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	460b      	mov	r3, r1
 800bb6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	887b      	ldrh	r3, [r7, #2]
 800bb72:	4013      	ands	r3, r2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
 800bb7c:	e001      	b.n	800bb82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	807b      	strh	r3, [r7, #2]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bba0:	787b      	ldrb	r3, [r7, #1]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bba6:	887a      	ldrh	r2, [r7, #2]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bbac:	e003      	b.n	800bbb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bbae:	887b      	ldrh	r3, [r7, #2]
 800bbb0:	041a      	lsls	r2, r3, #16
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	619a      	str	r2, [r3, #24]
}
 800bbb6:	bf00      	nop
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
	...

0800bbc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d101      	bne.n	800bbd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e08b      	b.n	800bcee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d106      	bne.n	800bbf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7f6 ffd0 	bl	8002b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2224      	movs	r2, #36	; 0x24
 800bbf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0201 	bic.w	r2, r2, #1
 800bc06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bc14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689a      	ldr	r2, [r3, #8]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d107      	bne.n	800bc3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc3a:	609a      	str	r2, [r3, #8]
 800bc3c:	e006      	b.n	800bc4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689a      	ldr	r2, [r3, #8]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800bc4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d108      	bne.n	800bc66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc62:	605a      	str	r2, [r3, #4]
 800bc64:	e007      	b.n	800bc76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6859      	ldr	r1, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	4b1d      	ldr	r3, [pc, #116]	; (800bcf8 <HAL_I2C_Init+0x134>)
 800bc82:	430b      	orrs	r3, r1
 800bc84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691a      	ldr	r2, [r3, #16]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	430a      	orrs	r2, r1
 800bcae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	69d9      	ldr	r1, [r3, #28]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a1a      	ldr	r2, [r3, #32]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0201 	orr.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bcec:	2300      	movs	r3, #0
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	02008000 	.word	0x02008000

0800bcfc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08a      	sub	sp, #40	; 0x28
 800bd00:	af02      	add	r7, sp, #8
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	461a      	mov	r2, r3
 800bd08:	460b      	mov	r3, r1
 800bd0a:	817b      	strh	r3, [r7, #10]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800bd10:	2300      	movs	r3, #0
 800bd12:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b20      	cmp	r3, #32
 800bd1e:	f040 80ef 	bne.w	800bf00 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd30:	d101      	bne.n	800bd36 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800bd32:	2302      	movs	r3, #2
 800bd34:	e0e5      	b.n	800bf02 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_I2C_Master_Transmit_DMA+0x48>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e0de      	b.n	800bf02 <HAL_I2C_Master_Transmit_DMA+0x206>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2221      	movs	r2, #33	; 0x21
 800bd50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2210      	movs	r2, #16
 800bd58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	893a      	ldrh	r2, [r7, #8]
 800bd6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4a66      	ldr	r2, [pc, #408]	; (800bf0c <HAL_I2C_Master_Transmit_DMA+0x210>)
 800bd72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	4a66      	ldr	r2, [pc, #408]	; (800bf10 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800bd78:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	2bff      	cmp	r3, #255	; 0xff
 800bd82:	d906      	bls.n	800bd92 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	22ff      	movs	r2, #255	; 0xff
 800bd88:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bd8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	e007      	b.n	800bda2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bd9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bda0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d01a      	beq.n	800bde0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d074      	beq.n	800bed2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d022      	beq.n	800be36 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdf4:	4a47      	ldr	r2, [pc, #284]	; (800bf14 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800bdf6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	4a46      	ldr	r2, [pc, #280]	; (800bf18 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800bdfe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be04:	2200      	movs	r2, #0
 800be06:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0c:	2200      	movs	r2, #0
 800be0e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be20:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800be26:	f7fc ff17 	bl	8008c58 <HAL_DMA_Start_IT>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d13a      	bne.n	800beaa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800be34:	e013      	b.n	800be5e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2220      	movs	r2, #32
 800be3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e051      	b.n	800bf02 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be62:	b2db      	uxtb	r3, r3
 800be64:	3301      	adds	r3, #1
 800be66:	b2da      	uxtb	r2, r3
 800be68:	8979      	ldrh	r1, [r7, #10]
 800be6a:	4b2c      	ldr	r3, [pc, #176]	; (800bf1c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f002 f83b 	bl	800deec <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be80:	1ad3      	subs	r3, r2, r3
 800be82:	b29a      	uxth	r2, r3
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800be90:	2110      	movs	r1, #16
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f002 f85c 	bl	800df50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	e028      	b.n	800befc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bebe:	f043 0210 	orr.w	r2, r3, #16
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e017      	b.n	800bf02 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	4a12      	ldr	r2, [pc, #72]	; (800bf20 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800bed6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	8979      	ldrh	r1, [r7, #10]
 800bede:	4b0f      	ldr	r3, [pc, #60]	; (800bf1c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f002 f800 	bl	800deec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bef4:	2101      	movs	r1, #1
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f002 f82a 	bl	800df50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	e000      	b.n	800bf02 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800bf00:	2302      	movs	r3, #2
  }
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3720      	adds	r7, #32
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	ffff0000 	.word	0xffff0000
 800bf10:	0800c757 	.word	0x0800c757
 800bf14:	0800db0f 	.word	0x0800db0f
 800bf18:	0800dc3d 	.word	0x0800dc3d
 800bf1c:	80002000 	.word	0x80002000
 800bf20:	0800c2e7 	.word	0x0800c2e7

0800bf24 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	607a      	str	r2, [r7, #4]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	460b      	mov	r3, r1
 800bf32:	817b      	strh	r3, [r7, #10]
 800bf34:	4613      	mov	r3, r2
 800bf36:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	2b20      	cmp	r3, #32
 800bf42:	f040 80cd 	bne.w	800c0e0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	699b      	ldr	r3, [r3, #24]
 800bf4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bf50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf54:	d101      	bne.n	800bf5a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800bf56:	2302      	movs	r3, #2
 800bf58:	e0c3      	b.n	800c0e2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d101      	bne.n	800bf68 <HAL_I2C_Master_Receive_DMA+0x44>
 800bf64:	2302      	movs	r3, #2
 800bf66:	e0bc      	b.n	800c0e2 <HAL_I2C_Master_Receive_DMA+0x1be>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2222      	movs	r2, #34	; 0x22
 800bf74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2210      	movs	r2, #16
 800bf7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	893a      	ldrh	r2, [r7, #8]
 800bf90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	4a55      	ldr	r2, [pc, #340]	; (800c0ec <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800bf96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4a55      	ldr	r2, [pc, #340]	; (800c0f0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800bf9c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	2bff      	cmp	r3, #255	; 0xff
 800bfa6:	d906      	bls.n	800bfb6 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	22ff      	movs	r2, #255	; 0xff
 800bfac:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800bfae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	e007      	b.n	800bfc6 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bfc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfc4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d070      	beq.n	800c0b0 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d020      	beq.n	800c018 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfda:	4a46      	ldr	r2, [pc, #280]	; (800c0f4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800bfdc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe2:	4a45      	ldr	r2, [pc, #276]	; (800c0f8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800bfe4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfea:	2200      	movs	r2, #0
 800bfec:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bff2:	2200      	movs	r2, #0
 800bff4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3324      	adds	r3, #36	; 0x24
 800c000:	4619      	mov	r1, r3
 800c002:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800c008:	f7fc fe26 	bl	8008c58 <HAL_DMA_Start_IT>
 800c00c:	4603      	mov	r3, r0
 800c00e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c010:	7cfb      	ldrb	r3, [r7, #19]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d138      	bne.n	800c088 <HAL_I2C_Master_Receive_DMA+0x164>
 800c016:	e013      	b.n	800c040 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e050      	b.n	800c0e2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c044:	b2da      	uxtb	r2, r3
 800c046:	8979      	ldrh	r1, [r7, #10]
 800c048:	4b2c      	ldr	r3, [pc, #176]	; (800c0fc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f001 ff4c 	bl	800deec <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c058:	b29a      	uxth	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	b29a      	uxth	r2, r3
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c06e:	2110      	movs	r1, #16
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f001 ff6d 	bl	800df50 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	e029      	b.n	800c0dc <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2220      	movs	r2, #32
 800c08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09c:	f043 0210 	orr.w	r2, r3, #16
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e018      	b.n	800c0e2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4a13      	ldr	r2, [pc, #76]	; (800c100 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800c0b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	8979      	ldrh	r1, [r7, #10]
 800c0be:	4b0f      	ldr	r3, [pc, #60]	; (800c0fc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f001 ff10 	bl	800deec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c0d4:	2102      	movs	r1, #2
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f001 ff3a 	bl	800df50 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	e000      	b.n	800c0e2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800c0e0:	2302      	movs	r3, #2
  }
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	bf00      	nop
 800c0ec:	ffff0000 	.word	0xffff0000
 800c0f0:	0800c757 	.word	0x0800c757
 800c0f4:	0800dba5 	.word	0x0800dba5
 800c0f8:	0800dc3d 	.word	0x0800dc3d
 800c0fc:	80002400 	.word	0x80002400
 800c100:	0800c2e7 	.word	0x0800c2e7

0800c104 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c120:	2b00      	cmp	r3, #0
 800c122:	d005      	beq.n	800c130 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	4798      	blx	r3
  }
}
 800c130:	bf00      	nop
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	0a1b      	lsrs	r3, r3, #8
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d010      	beq.n	800c17e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	09db      	lsrs	r3, r3, #7
 800c160:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c164:	2b00      	cmp	r3, #0
 800c166:	d00a      	beq.n	800c17e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16c:	f043 0201 	orr.w	r2, r3, #1
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c17c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	0a9b      	lsrs	r3, r3, #10
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b00      	cmp	r3, #0
 800c188:	d010      	beq.n	800c1ac <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	09db      	lsrs	r3, r3, #7
 800c18e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00a      	beq.n	800c1ac <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19a:	f043 0208 	orr.w	r2, r3, #8
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	0a5b      	lsrs	r3, r3, #9
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d010      	beq.n	800c1da <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	09db      	lsrs	r3, r3, #7
 800c1bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00a      	beq.n	800c1da <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c8:	f043 0202 	orr.w	r2, r3, #2
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1d8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f003 030b 	and.w	r3, r3, #11
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c1ea:	68f9      	ldr	r1, [r7, #12]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 fb53 	bl	800d898 <I2C_ITError>
  }
}
 800c1f2:	bf00      	nop
 800c1f4:	3718      	adds	r7, #24
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c22a:	bf00      	nop
 800c22c:	370c      	adds	r7, #12
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr

0800c236 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c236:	b480      	push	{r7}
 800c238:	b083      	sub	sp, #12
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b083      	sub	sp, #12
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	460b      	mov	r3, r1
 800c254:	70fb      	strb	r3, [r7, #3]
 800c256:	4613      	mov	r3, r2
 800c258:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr

0800c266 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c266:	b480      	push	{r7}
 800c268:	b083      	sub	sp, #12
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c26e:	bf00      	nop
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr

0800c27a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c282:	bf00      	nop
 800c284:	370c      	adds	r7, #12
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr

0800c28e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2d8:	b2db      	uxtb	r3, r3
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	370c      	adds	r7, #12
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	af02      	add	r7, sp, #8
 800c2ec:	60f8      	str	r0, [r7, #12]
 800c2ee:	60b9      	str	r1, [r7, #8]
 800c2f0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <I2C_Master_ISR_IT+0x1e>
 800c300:	2302      	movs	r3, #2
 800c302:	e120      	b.n	800c546 <I2C_Master_ISR_IT+0x260>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	091b      	lsrs	r3, r3, #4
 800c310:	f003 0301 	and.w	r3, r3, #1
 800c314:	2b00      	cmp	r3, #0
 800c316:	d013      	beq.n	800c340 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	091b      	lsrs	r3, r3, #4
 800c31c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00d      	beq.n	800c340 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2210      	movs	r2, #16
 800c32a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c330:	f043 0204 	orr.w	r2, r3, #4
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	f001 fbc4 	bl	800dac6 <I2C_Flush_TXDR>
 800c33e:	e0ed      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	089b      	lsrs	r3, r3, #2
 800c344:	f003 0301 	and.w	r3, r3, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d023      	beq.n	800c394 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	089b      	lsrs	r3, r3, #2
 800c350:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c354:	2b00      	cmp	r3, #0
 800c356:	d01d      	beq.n	800c394 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f023 0304 	bic.w	r3, r3, #4
 800c35e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c37c:	3b01      	subs	r3, #1
 800c37e:	b29a      	uxth	r2, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c388:	b29b      	uxth	r3, r3
 800c38a:	3b01      	subs	r3, #1
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c392:	e0c3      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	099b      	lsrs	r3, r3, #6
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d12a      	bne.n	800c3f6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	085b      	lsrs	r3, r3, #1
 800c3a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d024      	beq.n	800c3f6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	085b      	lsrs	r3, r3, #1
 800c3b0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01e      	beq.n	800c3f6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 80ac 	beq.w	800c51c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3c8:	781a      	ldrb	r2, [r3, #0]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d4:	1c5a      	adds	r2, r3, #1
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	b29a      	uxth	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800c3f4:	e092      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	09db      	lsrs	r3, r3, #7
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d05d      	beq.n	800c4be <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	099b      	lsrs	r3, r3, #6
 800c406:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d057      	beq.n	800c4be <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d040      	beq.n	800c49a <I2C_Master_ISR_IT+0x1b4>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d13c      	bne.n	800c49a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	b29b      	uxth	r3, r3
 800c428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c42c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c432:	b29b      	uxth	r3, r3
 800c434:	2bff      	cmp	r3, #255	; 0xff
 800c436:	d90e      	bls.n	800c456 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	22ff      	movs	r2, #255	; 0xff
 800c43c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c442:	b2da      	uxtb	r2, r3
 800c444:	8a79      	ldrh	r1, [r7, #18]
 800c446:	2300      	movs	r3, #0
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f001 fd4c 	bl	800deec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c454:	e032      	b.n	800c4bc <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c468:	d00b      	beq.n	800c482 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c46e:	b2da      	uxtb	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c474:	8a79      	ldrh	r1, [r7, #18]
 800c476:	2000      	movs	r0, #0
 800c478:	9000      	str	r0, [sp, #0]
 800c47a:	68f8      	ldr	r0, [r7, #12]
 800c47c:	f001 fd36 	bl	800deec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c480:	e01c      	b.n	800c4bc <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c486:	b2da      	uxtb	r2, r3
 800c488:	8a79      	ldrh	r1, [r7, #18]
 800c48a:	2300      	movs	r3, #0
 800c48c:	9300      	str	r3, [sp, #0]
 800c48e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f001 fd2a 	bl	800deec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c498:	e010      	b.n	800c4bc <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4a8:	d003      	beq.n	800c4b2 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 fdde 	bl	800d06c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4b0:	e034      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c4b2:	2140      	movs	r1, #64	; 0x40
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f001 f9ef 	bl	800d898 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4ba:	e02f      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
 800c4bc:	e02e      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	099b      	lsrs	r3, r3, #6
 800c4c2:	f003 0301 	and.w	r3, r3, #1
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d028      	beq.n	800c51c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	099b      	lsrs	r3, r3, #6
 800c4ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d022      	beq.n	800c51c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d119      	bne.n	800c514 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ee:	d015      	beq.n	800c51c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c4f8:	d108      	bne.n	800c50c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c508:	605a      	str	r2, [r3, #4]
 800c50a:	e007      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 fdad 	bl	800d06c <I2C_ITMasterSeqCplt>
 800c512:	e003      	b.n	800c51c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c514:	2140      	movs	r1, #64	; 0x40
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f001 f9be 	bl	800d898 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	095b      	lsrs	r3, r3, #5
 800c520:	f003 0301 	and.w	r3, r3, #1
 800c524:	2b00      	cmp	r3, #0
 800c526:	d009      	beq.n	800c53c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	095b      	lsrs	r3, r3, #5
 800c52c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c530:	2b00      	cmp	r3, #0
 800c532:	d003      	beq.n	800c53c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c534:	6979      	ldr	r1, [r7, #20]
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f000 fe34 	bl	800d1a4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3718      	adds	r7, #24
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b086      	sub	sp, #24
 800c552:	af00      	add	r7, sp, #0
 800c554:	60f8      	str	r0, [r7, #12]
 800c556:	60b9      	str	r1, [r7, #8]
 800c558:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d101      	bne.n	800c572 <I2C_Slave_ISR_IT+0x24>
 800c56e:	2302      	movs	r3, #2
 800c570:	e0ed      	b.n	800c74e <I2C_Slave_ISR_IT+0x200>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2201      	movs	r2, #1
 800c576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	095b      	lsrs	r3, r3, #5
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00a      	beq.n	800c59c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	095b      	lsrs	r3, r3, #5
 800c58a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d004      	beq.n	800c59c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c592:	6939      	ldr	r1, [r7, #16]
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f000 fecf 	bl	800d338 <I2C_ITSlaveCplt>
 800c59a:	e0d3      	b.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	091b      	lsrs	r3, r3, #4
 800c5a0:	f003 0301 	and.w	r3, r3, #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d04d      	beq.n	800c644 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	091b      	lsrs	r3, r3, #4
 800c5ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d047      	beq.n	800c644 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d128      	bne.n	800c610 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b28      	cmp	r3, #40	; 0x28
 800c5c8:	d108      	bne.n	800c5dc <I2C_Slave_ISR_IT+0x8e>
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d0:	d104      	bne.n	800c5dc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c5d2:	6939      	ldr	r1, [r7, #16]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 f909 	bl	800d7ec <I2C_ITListenCplt>
 800c5da:	e032      	b.n	800c642 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b29      	cmp	r3, #41	; 0x29
 800c5e6:	d10e      	bne.n	800c606 <I2C_Slave_ISR_IT+0xb8>
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c5ee:	d00a      	beq.n	800c606 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2210      	movs	r2, #16
 800c5f6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f001 fa64 	bl	800dac6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f000 fd71 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
 800c604:	e01d      	b.n	800c642 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2210      	movs	r2, #16
 800c60c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c60e:	e096      	b.n	800c73e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2210      	movs	r2, #16
 800c616:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c61c:	f043 0204 	orr.w	r2, r3, #4
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d004      	beq.n	800c634 <I2C_Slave_ISR_IT+0xe6>
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c630:	f040 8085 	bne.w	800c73e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c638:	4619      	mov	r1, r3
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f001 f92c 	bl	800d898 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c640:	e07d      	b.n	800c73e <I2C_Slave_ISR_IT+0x1f0>
 800c642:	e07c      	b.n	800c73e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	089b      	lsrs	r3, r3, #2
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d030      	beq.n	800c6b2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	089b      	lsrs	r3, r3, #2
 800c654:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d02a      	beq.n	800c6b2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c660:	b29b      	uxth	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d018      	beq.n	800c698 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c670:	b2d2      	uxtb	r2, r2
 800c672:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c678:	1c5a      	adds	r2, r3, #1
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c682:	3b01      	subs	r3, #1
 800c684:	b29a      	uxth	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c68e:	b29b      	uxth	r3, r3
 800c690:	3b01      	subs	r3, #1
 800c692:	b29a      	uxth	r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d14f      	bne.n	800c742 <I2C_Slave_ISR_IT+0x1f4>
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c6a8:	d04b      	beq.n	800c742 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fd1b 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c6b0:	e047      	b.n	800c742 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	08db      	lsrs	r3, r3, #3
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	08db      	lsrs	r3, r3, #3
 800c6c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c6ca:	6939      	ldr	r1, [r7, #16]
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fc49 	bl	800cf64 <I2C_ITAddrCplt>
 800c6d2:	e037      	b.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	085b      	lsrs	r3, r3, #1
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d031      	beq.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	085b      	lsrs	r3, r3, #1
 800c6e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d02b      	beq.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d018      	beq.n	800c728 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fa:	781a      	ldrb	r2, [r3, #0]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c706:	1c5a      	adds	r2, r3, #1
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c710:	b29b      	uxth	r3, r3
 800c712:	3b01      	subs	r3, #1
 800c714:	b29a      	uxth	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c71e:	3b01      	subs	r3, #1
 800c720:	b29a      	uxth	r2, r3
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	851a      	strh	r2, [r3, #40]	; 0x28
 800c726:	e00d      	b.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c72e:	d002      	beq.n	800c736 <I2C_Slave_ISR_IT+0x1e8>
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d106      	bne.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c736:	68f8      	ldr	r0, [r7, #12]
 800c738:	f000 fcd5 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
 800c73c:	e002      	b.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800c73e:	bf00      	nop
 800c740:	e000      	b.n	800c744 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800c742:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b088      	sub	sp, #32
 800c75a:	af02      	add	r7, sp, #8
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <I2C_Master_ISR_DMA+0x1a>
 800c76c:	2302      	movs	r3, #2
 800c76e:	e0e1      	b.n	800c934 <I2C_Master_ISR_DMA+0x1de>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	091b      	lsrs	r3, r3, #4
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d017      	beq.n	800c7b4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d011      	beq.n	800c7b4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2210      	movs	r2, #16
 800c796:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c79c:	f043 0204 	orr.w	r2, r3, #4
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c7a4:	2120      	movs	r1, #32
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f001 fbd2 	bl	800df50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f001 f98a 	bl	800dac6 <I2C_Flush_TXDR>
 800c7b2:	e0ba      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	09db      	lsrs	r3, r3, #7
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d072      	beq.n	800c8a6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	099b      	lsrs	r3, r3, #6
 800c7c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d06c      	beq.n	800c8a6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7da:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d04e      	beq.n	800c884 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7f2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	2bff      	cmp	r3, #255	; 0xff
 800c7fc:	d906      	bls.n	800c80c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	22ff      	movs	r2, #255	; 0xff
 800c802:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800c804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c808:	617b      	str	r3, [r7, #20]
 800c80a:	e010      	b.n	800c82e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c810:	b29a      	uxth	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c81e:	d003      	beq.n	800c828 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	e002      	b.n	800c82e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c82c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c832:	b2da      	uxtb	r2, r3
 800c834:	8a79      	ldrh	r1, [r7, #18]
 800c836:	2300      	movs	r3, #0
 800c838:	9300      	str	r3, [sp, #0]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f001 fb55 	bl	800deec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c846:	b29a      	uxth	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	b29a      	uxth	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b22      	cmp	r3, #34	; 0x22
 800c85e:	d108      	bne.n	800c872 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c86e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c870:	e05b      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c880:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c882:	e052      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c88e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c892:	d003      	beq.n	800c89c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f000 fbe9 	bl	800d06c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c89a:	e046      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 fffa 	bl	800d898 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c8a4:	e041      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	099b      	lsrs	r3, r3, #6
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d029      	beq.n	800c906 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	099b      	lsrs	r3, r3, #6
 800c8b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d023      	beq.n	800c906 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d119      	bne.n	800c8fc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8d6:	d027      	beq.n	800c928 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c8e0:	d108      	bne.n	800c8f4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c8f0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c8f2:	e019      	b.n	800c928 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f000 fbb9 	bl	800d06c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c8fa:	e015      	b.n	800c928 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c8fc:	2140      	movs	r1, #64	; 0x40
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f000 ffca 	bl	800d898 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c904:	e010      	b.n	800c928 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	095b      	lsrs	r3, r3, #5
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	095b      	lsrs	r3, r3, #5
 800c916:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d005      	beq.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c91e:	68b9      	ldr	r1, [r7, #8]
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 fc3f 	bl	800d1a4 <I2C_ITMasterCplt>
 800c926:	e000      	b.n	800c92a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c928:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3718      	adds	r7, #24
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b088      	sub	sp, #32
 800c940:	af02      	add	r7, sp, #8
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c948:	4b92      	ldr	r3, [pc, #584]	; (800cb94 <I2C_Mem_ISR_DMA+0x258>)
 800c94a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <I2C_Mem_ISR_DMA+0x1e>
 800c956:	2302      	movs	r3, #2
 800c958:	e118      	b.n	800cb8c <I2C_Mem_ISR_DMA+0x250>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	091b      	lsrs	r3, r3, #4
 800c966:	f003 0301 	and.w	r3, r3, #1
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d017      	beq.n	800c99e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	091b      	lsrs	r3, r3, #4
 800c972:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c976:	2b00      	cmp	r3, #0
 800c978:	d011      	beq.n	800c99e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2210      	movs	r2, #16
 800c980:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c986:	f043 0204 	orr.w	r2, r3, #4
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c98e:	2120      	movs	r1, #32
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f001 fadd 	bl	800df50 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f001 f895 	bl	800dac6 <I2C_Flush_TXDR>
 800c99c:	e0f1      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	085b      	lsrs	r3, r3, #1
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00f      	beq.n	800c9ca <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	085b      	lsrs	r3, r3, #1
 800c9ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d009      	beq.n	800c9ca <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c9be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9c6:	651a      	str	r2, [r3, #80]	; 0x50
 800c9c8:	e0db      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	09db      	lsrs	r3, r3, #7
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d060      	beq.n	800ca98 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	099b      	lsrs	r3, r3, #6
 800c9da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d05a      	beq.n	800ca98 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f001 fb37 	bl	800e058 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c9ea:	2110      	movs	r1, #16
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f001 faaf 	bl	800df50 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d048      	beq.n	800ca8e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	2bff      	cmp	r3, #255	; 0xff
 800ca04:	d910      	bls.n	800ca28 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	22ff      	movs	r2, #255	; 0xff
 800ca0a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca10:	b299      	uxth	r1, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	2300      	movs	r3, #0
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f001 fa63 	bl	800deec <I2C_TransferConfig>
 800ca26:	e011      	b.n	800ca4c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca36:	b299      	uxth	r1, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	2300      	movs	r3, #0
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f001 fa50 	bl	800deec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b22      	cmp	r3, #34	; 0x22
 800ca68:	d108      	bne.n	800ca7c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ca7a:	e082      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca8a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800ca8c:	e079      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ca8e:	2140      	movs	r1, #64	; 0x40
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f000 ff01 	bl	800d898 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800ca96:	e074      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	099b      	lsrs	r3, r3, #6
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d05e      	beq.n	800cb62 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	099b      	lsrs	r3, r3, #6
 800caa8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800caac:	2b00      	cmp	r3, #0
 800caae:	d058      	beq.n	800cb62 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cab0:	2101      	movs	r1, #1
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f001 fad0 	bl	800e058 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cab8:	2110      	movs	r1, #16
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f001 fa48 	bl	800df50 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b22      	cmp	r3, #34	; 0x22
 800caca:	d101      	bne.n	800cad0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800cacc:	4b32      	ldr	r3, [pc, #200]	; (800cb98 <I2C_Mem_ISR_DMA+0x25c>)
 800cace:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	2bff      	cmp	r3, #255	; 0xff
 800cad8:	d910      	bls.n	800cafc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	22ff      	movs	r2, #255	; 0xff
 800cade:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cae4:	b299      	uxth	r1, r3
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caea:	b2da      	uxtb	r2, r3
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f001 f9f9 	bl	800deec <I2C_TransferConfig>
 800cafa:	e011      	b.n	800cb20 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb0a:	b299      	uxth	r1, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb10:	b2da      	uxtb	r2, r3
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f001 f9e6 	bl	800deec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b22      	cmp	r3, #34	; 0x22
 800cb3c:	d108      	bne.n	800cb50 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb4c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb4e:	e018      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb5e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb60:	e00f      	b.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	095b      	lsrs	r3, r3, #5
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d009      	beq.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	095b      	lsrs	r3, r3, #5
 800cb72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d003      	beq.n	800cb82 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f000 fb11 	bl	800d1a4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	80002000 	.word	0x80002000
 800cb98:	80002400 	.word	0x80002400

0800cb9c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b088      	sub	sp, #32
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d101      	bne.n	800cbc0 <I2C_Slave_ISR_DMA+0x24>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	e1cc      	b.n	800cf5a <I2C_Slave_ISR_DMA+0x3be>
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	095b      	lsrs	r3, r3, #5
 800cbcc:	f003 0301 	and.w	r3, r3, #1
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d00a      	beq.n	800cbea <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	095b      	lsrs	r3, r3, #5
 800cbd8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800cbe0:	68b9      	ldr	r1, [r7, #8]
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f000 fba8 	bl	800d338 <I2C_ITSlaveCplt>
 800cbe8:	e1b2      	b.n	800cf50 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	091b      	lsrs	r3, r3, #4
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f000 819c 	beq.w	800cf30 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	091b      	lsrs	r3, r3, #4
 800cbfc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8195 	beq.w	800cf30 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	0b9b      	lsrs	r3, r3, #14
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d106      	bne.n	800cc20 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	0bdb      	lsrs	r3, r3, #15
 800cc16:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f000 8181 	beq.w	800cf22 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d07c      	beq.n	800cd22 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	0bdb      	lsrs	r3, r3, #15
 800cc2c:	f003 0301 	and.w	r3, r3, #1
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d076      	beq.n	800cd22 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a75      	ldr	r2, [pc, #468]	; (800ce10 <I2C_Slave_ISR_DMA+0x274>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d059      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a73      	ldr	r2, [pc, #460]	; (800ce14 <I2C_Slave_ISR_DMA+0x278>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d053      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a71      	ldr	r2, [pc, #452]	; (800ce18 <I2C_Slave_ISR_DMA+0x27c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d04d      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a6f      	ldr	r2, [pc, #444]	; (800ce1c <I2C_Slave_ISR_DMA+0x280>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d047      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4a6d      	ldr	r2, [pc, #436]	; (800ce20 <I2C_Slave_ISR_DMA+0x284>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d041      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a6b      	ldr	r2, [pc, #428]	; (800ce24 <I2C_Slave_ISR_DMA+0x288>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d03b      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a69      	ldr	r2, [pc, #420]	; (800ce28 <I2C_Slave_ISR_DMA+0x28c>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d035      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4a67      	ldr	r2, [pc, #412]	; (800ce2c <I2C_Slave_ISR_DMA+0x290>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d02f      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a65      	ldr	r2, [pc, #404]	; (800ce30 <I2C_Slave_ISR_DMA+0x294>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d029      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a63      	ldr	r2, [pc, #396]	; (800ce34 <I2C_Slave_ISR_DMA+0x298>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d023      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a61      	ldr	r2, [pc, #388]	; (800ce38 <I2C_Slave_ISR_DMA+0x29c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d01d      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a5f      	ldr	r2, [pc, #380]	; (800ce3c <I2C_Slave_ISR_DMA+0x2a0>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d017      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a5d      	ldr	r2, [pc, #372]	; (800ce40 <I2C_Slave_ISR_DMA+0x2a4>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d011      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a5b      	ldr	r2, [pc, #364]	; (800ce44 <I2C_Slave_ISR_DMA+0x2a8>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d00b      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a59      	ldr	r2, [pc, #356]	; (800ce48 <I2C_Slave_ISR_DMA+0x2ac>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d005      	beq.n	800ccf4 <I2C_Slave_ISR_DMA+0x158>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a57      	ldr	r2, [pc, #348]	; (800ce4c <I2C_Slave_ISR_DMA+0x2b0>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d109      	bne.n	800cd08 <I2C_Slave_ISR_DMA+0x16c>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	685b      	ldr	r3, [r3, #4]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	bf0c      	ite	eq
 800cd00:	2301      	moveq	r3, #1
 800cd02:	2300      	movne	r3, #0
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	e008      	b.n	800cd1a <I2C_Slave_ISR_DMA+0x17e>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	bf0c      	ite	eq
 800cd14:	2301      	moveq	r3, #1
 800cd16:	2300      	movne	r3, #0
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	f000 809f 	beq.w	800ce6a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	0b9b      	lsrs	r3, r3, #14
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 8098 	beq.w	800ce6a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a33      	ldr	r2, [pc, #204]	; (800ce10 <I2C_Slave_ISR_DMA+0x274>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d059      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a31      	ldr	r2, [pc, #196]	; (800ce14 <I2C_Slave_ISR_DMA+0x278>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d053      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a2f      	ldr	r2, [pc, #188]	; (800ce18 <I2C_Slave_ISR_DMA+0x27c>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d04d      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a2d      	ldr	r2, [pc, #180]	; (800ce1c <I2C_Slave_ISR_DMA+0x280>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d047      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a2b      	ldr	r2, [pc, #172]	; (800ce20 <I2C_Slave_ISR_DMA+0x284>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d041      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a29      	ldr	r2, [pc, #164]	; (800ce24 <I2C_Slave_ISR_DMA+0x288>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d03b      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a27      	ldr	r2, [pc, #156]	; (800ce28 <I2C_Slave_ISR_DMA+0x28c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d035      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a25      	ldr	r2, [pc, #148]	; (800ce2c <I2C_Slave_ISR_DMA+0x290>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d02f      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a23      	ldr	r2, [pc, #140]	; (800ce30 <I2C_Slave_ISR_DMA+0x294>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d029      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a21      	ldr	r2, [pc, #132]	; (800ce34 <I2C_Slave_ISR_DMA+0x298>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d023      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a1f      	ldr	r2, [pc, #124]	; (800ce38 <I2C_Slave_ISR_DMA+0x29c>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d01d      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a1d      	ldr	r2, [pc, #116]	; (800ce3c <I2C_Slave_ISR_DMA+0x2a0>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d017      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a1b      	ldr	r2, [pc, #108]	; (800ce40 <I2C_Slave_ISR_DMA+0x2a4>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d011      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a19      	ldr	r2, [pc, #100]	; (800ce44 <I2C_Slave_ISR_DMA+0x2a8>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00b      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <I2C_Slave_ISR_DMA+0x2ac>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d005      	beq.n	800cdfa <I2C_Slave_ISR_DMA+0x25e>
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a15      	ldr	r2, [pc, #84]	; (800ce4c <I2C_Slave_ISR_DMA+0x2b0>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d12a      	bne.n	800ce50 <I2C_Slave_ISR_DMA+0x2b4>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	bf0c      	ite	eq
 800ce06:	2301      	moveq	r3, #1
 800ce08:	2300      	movne	r3, #0
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	e029      	b.n	800ce62 <I2C_Slave_ISR_DMA+0x2c6>
 800ce0e:	bf00      	nop
 800ce10:	40020010 	.word	0x40020010
 800ce14:	40020028 	.word	0x40020028
 800ce18:	40020040 	.word	0x40020040
 800ce1c:	40020058 	.word	0x40020058
 800ce20:	40020070 	.word	0x40020070
 800ce24:	40020088 	.word	0x40020088
 800ce28:	400200a0 	.word	0x400200a0
 800ce2c:	400200b8 	.word	0x400200b8
 800ce30:	40020410 	.word	0x40020410
 800ce34:	40020428 	.word	0x40020428
 800ce38:	40020440 	.word	0x40020440
 800ce3c:	40020458 	.word	0x40020458
 800ce40:	40020470 	.word	0x40020470
 800ce44:	40020488 	.word	0x40020488
 800ce48:	400204a0 	.word	0x400204a0
 800ce4c:	400204b8 	.word	0x400204b8
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bf0c      	ite	eq
 800ce5c:	2301      	moveq	r3, #1
 800ce5e:	2300      	movne	r3, #0
 800ce60:	b2db      	uxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800ce66:	2301      	movs	r3, #1
 800ce68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d128      	bne.n	800cec2 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b28      	cmp	r3, #40	; 0x28
 800ce7a:	d108      	bne.n	800ce8e <I2C_Slave_ISR_DMA+0x2f2>
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce82:	d104      	bne.n	800ce8e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ce84:	68b9      	ldr	r1, [r7, #8]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fcb0 	bl	800d7ec <I2C_ITListenCplt>
 800ce8c:	e048      	b.n	800cf20 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	2b29      	cmp	r3, #41	; 0x29
 800ce98:	d10e      	bne.n	800ceb8 <I2C_Slave_ISR_DMA+0x31c>
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cea0:	d00a      	beq.n	800ceb8 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2210      	movs	r2, #16
 800cea8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f000 fe0b 	bl	800dac6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f000 f918 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
 800ceb6:	e033      	b.n	800cf20 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2210      	movs	r2, #16
 800cebe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800cec0:	e034      	b.n	800cf2c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2210      	movs	r2, #16
 800cec8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cece:	f043 0204 	orr.w	r2, r3, #4
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cedc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d003      	beq.n	800ceec <I2C_Slave_ISR_DMA+0x350>
 800cee4:	69bb      	ldr	r3, [r7, #24]
 800cee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ceea:	d11f      	bne.n	800cf2c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	2b21      	cmp	r3, #33	; 0x21
 800cef0:	d002      	beq.n	800cef8 <I2C_Slave_ISR_DMA+0x35c>
 800cef2:	7dfb      	ldrb	r3, [r7, #23]
 800cef4:	2b29      	cmp	r3, #41	; 0x29
 800cef6:	d103      	bne.n	800cf00 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2221      	movs	r2, #33	; 0x21
 800cefc:	631a      	str	r2, [r3, #48]	; 0x30
 800cefe:	e008      	b.n	800cf12 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	2b22      	cmp	r3, #34	; 0x22
 800cf04:	d002      	beq.n	800cf0c <I2C_Slave_ISR_DMA+0x370>
 800cf06:	7dfb      	ldrb	r3, [r7, #23]
 800cf08:	2b2a      	cmp	r3, #42	; 0x2a
 800cf0a:	d102      	bne.n	800cf12 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2222      	movs	r2, #34	; 0x22
 800cf10:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf16:	4619      	mov	r1, r3
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 fcbd 	bl	800d898 <I2C_ITError>
      if (treatdmanack == 1U)
 800cf1e:	e005      	b.n	800cf2c <I2C_Slave_ISR_DMA+0x390>
 800cf20:	e004      	b.n	800cf2c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2210      	movs	r2, #16
 800cf28:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cf2a:	e011      	b.n	800cf50 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800cf2c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800cf2e:	e00f      	b.n	800cf50 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	08db      	lsrs	r3, r3, #3
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d009      	beq.n	800cf50 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	08db      	lsrs	r3, r3, #3
 800cf40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d003      	beq.n	800cf50 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800cf48:	68b9      	ldr	r1, [r7, #8]
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f000 f80a 	bl	800cf64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3720      	adds	r7, #32
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop

0800cf64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf7a:	2b28      	cmp	r3, #40	; 0x28
 800cf7c:	d16a      	bne.n	800d054 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	0c1b      	lsrs	r3, r3, #16
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	699b      	ldr	r3, [r3, #24]
 800cf94:	0c1b      	lsrs	r3, r3, #16
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cf9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cfb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d138      	bne.n	800d034 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cfc2:	897b      	ldrh	r3, [r7, #10]
 800cfc4:	09db      	lsrs	r3, r3, #7
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	89bb      	ldrh	r3, [r7, #12]
 800cfca:	4053      	eors	r3, r2
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	f003 0306 	and.w	r3, r3, #6
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d11c      	bne.n	800d010 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cfd6:	897b      	ldrh	r3, [r7, #10]
 800cfd8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d13b      	bne.n	800d064 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2208      	movs	r2, #8
 800cff8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d002:	89ba      	ldrh	r2, [r7, #12]
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff f91e 	bl	800c24a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d00e:	e029      	b.n	800d064 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d010:	893b      	ldrh	r3, [r7, #8]
 800d012:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f001 f81d 	bl	800e058 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d026:	89ba      	ldrh	r2, [r7, #12]
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff f90c 	bl	800c24a <HAL_I2C_AddrCallback>
}
 800d032:	e017      	b.n	800d064 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f80d 	bl	800e058 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d046:	89ba      	ldrh	r2, [r7, #12]
 800d048:	7bfb      	ldrb	r3, [r7, #15]
 800d04a:	4619      	mov	r1, r3
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff f8fc 	bl	800c24a <HAL_I2C_AddrCallback>
}
 800d052:	e007      	b.n	800d064 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2208      	movs	r2, #8
 800d05a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d064:	bf00      	nop
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d082:	b2db      	uxtb	r3, r3
 800d084:	2b21      	cmp	r3, #33	; 0x21
 800d086:	d115      	bne.n	800d0b4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2220      	movs	r2, #32
 800d08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2211      	movs	r2, #17
 800d094:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d09c:	2101      	movs	r1, #1
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 ffda 	bl	800e058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff f8a4 	bl	800c1fa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d0b2:	e014      	b.n	800d0de <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2212      	movs	r2, #18
 800d0c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d0c8:	2102      	movs	r1, #2
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 ffc4 	bl	800e058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff f898 	bl	800c20e <HAL_I2C_MasterRxCpltCallback>
}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	0b9b      	lsrs	r3, r3, #14
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	2b00      	cmp	r3, #0
 800d108:	d008      	beq.n	800d11c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d118:	601a      	str	r2, [r3, #0]
 800d11a:	e00d      	b.n	800d138 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	0bdb      	lsrs	r3, r3, #15
 800d120:	f003 0301 	and.w	r3, r3, #1
 800d124:	2b00      	cmp	r3, #0
 800d126:	d007      	beq.n	800d138 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d136:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d13e:	b2db      	uxtb	r3, r3
 800d140:	2b29      	cmp	r3, #41	; 0x29
 800d142:	d112      	bne.n	800d16a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2228      	movs	r2, #40	; 0x28
 800d148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2221      	movs	r2, #33	; 0x21
 800d150:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d152:	2101      	movs	r1, #1
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 ff7f 	bl	800e058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff f85d 	bl	800c222 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d168:	e017      	b.n	800d19a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d170:	b2db      	uxtb	r3, r3
 800d172:	2b2a      	cmp	r3, #42	; 0x2a
 800d174:	d111      	bne.n	800d19a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2228      	movs	r2, #40	; 0x28
 800d17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2222      	movs	r2, #34	; 0x22
 800d182:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d184:	2102      	movs	r1, #2
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 ff66 	bl	800e058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff f84e 	bl	800c236 <HAL_I2C_SlaveRxCpltCallback>
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}
	...

0800d1a4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2220      	movs	r2, #32
 800d1b8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b21      	cmp	r3, #33	; 0x21
 800d1c4:	d107      	bne.n	800d1d6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d1c6:	2101      	movs	r1, #1
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 ff45 	bl	800e058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2211      	movs	r2, #17
 800d1d2:	631a      	str	r2, [r3, #48]	; 0x30
 800d1d4:	e00c      	b.n	800d1f0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	2b22      	cmp	r3, #34	; 0x22
 800d1e0:	d106      	bne.n	800d1f0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d1e2:	2102      	movs	r1, #2
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 ff37 	bl	800e058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2212      	movs	r2, #18
 800d1ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6859      	ldr	r1, [r3, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	4b4d      	ldr	r3, [pc, #308]	; (800d330 <I2C_ITMasterCplt+0x18c>)
 800d1fc:	400b      	ands	r3, r1
 800d1fe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a4a      	ldr	r2, [pc, #296]	; (800d334 <I2C_ITMasterCplt+0x190>)
 800d20a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	091b      	lsrs	r3, r3, #4
 800d210:	f003 0301 	and.w	r3, r3, #1
 800d214:	2b00      	cmp	r3, #0
 800d216:	d009      	beq.n	800d22c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2210      	movs	r2, #16
 800d21e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d224:	f043 0204 	orr.w	r2, r3, #4
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b60      	cmp	r3, #96	; 0x60
 800d236:	d10b      	bne.n	800d250 <I2C_ITMasterCplt+0xac>
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	089b      	lsrs	r3, r3, #2
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	2b00      	cmp	r3, #0
 800d242:	d005      	beq.n	800d250 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800d24e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fc38 	bl	800dac6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d25a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b60      	cmp	r3, #96	; 0x60
 800d266:	d002      	beq.n	800d26e <I2C_ITMasterCplt+0xca>
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d006      	beq.n	800d27c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fb0f 	bl	800d898 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d27a:	e054      	b.n	800d326 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b21      	cmp	r3, #33	; 0x21
 800d286:	d124      	bne.n	800d2d2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2220      	movs	r2, #32
 800d28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2200      	movs	r2, #0
 800d294:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b40      	cmp	r3, #64	; 0x40
 800d2a0:	d10b      	bne.n	800d2ba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7fe ffe1 	bl	800c27a <HAL_I2C_MemTxCpltCallback>
}
 800d2b8:	e035      	b.n	800d326 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f7fe ff95 	bl	800c1fa <HAL_I2C_MasterTxCpltCallback>
}
 800d2d0:	e029      	b.n	800d326 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b22      	cmp	r3, #34	; 0x22
 800d2dc:	d123      	bne.n	800d326 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2220      	movs	r2, #32
 800d2e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b40      	cmp	r3, #64	; 0x40
 800d2f6:	d10b      	bne.n	800d310 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7fe ffc0 	bl	800c28e <HAL_I2C_MemRxCpltCallback>
}
 800d30e:	e00a      	b.n	800d326 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2200      	movs	r2, #0
 800d314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7fe ff74 	bl	800c20e <HAL_I2C_MasterRxCpltCallback>
}
 800d326:	bf00      	nop
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	fe00e800 	.word	0xfe00e800
 800d334:	ffff0000 	.word	0xffff0000

0800d338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b086      	sub	sp, #24
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d352:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d35a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2220      	movs	r2, #32
 800d362:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d364:	7afb      	ldrb	r3, [r7, #11]
 800d366:	2b21      	cmp	r3, #33	; 0x21
 800d368:	d002      	beq.n	800d370 <I2C_ITSlaveCplt+0x38>
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	2b29      	cmp	r3, #41	; 0x29
 800d36e:	d108      	bne.n	800d382 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d370:	f248 0101 	movw	r1, #32769	; 0x8001
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 fe6f 	bl	800e058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2221      	movs	r2, #33	; 0x21
 800d37e:	631a      	str	r2, [r3, #48]	; 0x30
 800d380:	e019      	b.n	800d3b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d382:	7afb      	ldrb	r3, [r7, #11]
 800d384:	2b22      	cmp	r3, #34	; 0x22
 800d386:	d002      	beq.n	800d38e <I2C_ITSlaveCplt+0x56>
 800d388:	7afb      	ldrb	r3, [r7, #11]
 800d38a:	2b2a      	cmp	r3, #42	; 0x2a
 800d38c:	d108      	bne.n	800d3a0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d38e:	f248 0102 	movw	r1, #32770	; 0x8002
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 fe60 	bl	800e058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2222      	movs	r2, #34	; 0x22
 800d39c:	631a      	str	r2, [r3, #48]	; 0x30
 800d39e:	e00a      	b.n	800d3b6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800d3a0:	7afb      	ldrb	r3, [r7, #11]
 800d3a2:	2b28      	cmp	r3, #40	; 0x28
 800d3a4:	d107      	bne.n	800d3b6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800d3a6:	f248 0103 	movw	r1, #32771	; 0x8003
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fe54 	bl	800e058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	685a      	ldr	r2, [r3, #4]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3c4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	6859      	ldr	r1, [r3, #4]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681a      	ldr	r2, [r3, #0]
 800d3d0:	4b80      	ldr	r3, [pc, #512]	; (800d5d4 <I2C_ITSlaveCplt+0x29c>)
 800d3d2:	400b      	ands	r3, r1
 800d3d4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fb75 	bl	800dac6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	0b9b      	lsrs	r3, r3, #14
 800d3e0:	f003 0301 	and.w	r3, r3, #1
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d07a      	beq.n	800d4de <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f000 8112 	beq.w	800d626 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a73      	ldr	r2, [pc, #460]	; (800d5d8 <I2C_ITSlaveCplt+0x2a0>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d059      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a71      	ldr	r2, [pc, #452]	; (800d5dc <I2C_ITSlaveCplt+0x2a4>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d053      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	4a6f      	ldr	r2, [pc, #444]	; (800d5e0 <I2C_ITSlaveCplt+0x2a8>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d04d      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a6d      	ldr	r2, [pc, #436]	; (800d5e4 <I2C_ITSlaveCplt+0x2ac>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d047      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a6b      	ldr	r2, [pc, #428]	; (800d5e8 <I2C_ITSlaveCplt+0x2b0>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d041      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a69      	ldr	r2, [pc, #420]	; (800d5ec <I2C_ITSlaveCplt+0x2b4>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d03b      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a67      	ldr	r2, [pc, #412]	; (800d5f0 <I2C_ITSlaveCplt+0x2b8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d035      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a65      	ldr	r2, [pc, #404]	; (800d5f4 <I2C_ITSlaveCplt+0x2bc>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d02f      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a63      	ldr	r2, [pc, #396]	; (800d5f8 <I2C_ITSlaveCplt+0x2c0>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d029      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a61      	ldr	r2, [pc, #388]	; (800d5fc <I2C_ITSlaveCplt+0x2c4>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d023      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a5f      	ldr	r2, [pc, #380]	; (800d600 <I2C_ITSlaveCplt+0x2c8>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d01d      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a5d      	ldr	r2, [pc, #372]	; (800d604 <I2C_ITSlaveCplt+0x2cc>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d017      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a5b      	ldr	r2, [pc, #364]	; (800d608 <I2C_ITSlaveCplt+0x2d0>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d011      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a59      	ldr	r2, [pc, #356]	; (800d60c <I2C_ITSlaveCplt+0x2d4>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d00b      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a57      	ldr	r2, [pc, #348]	; (800d610 <I2C_ITSlaveCplt+0x2d8>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d005      	beq.n	800d4c2 <I2C_ITSlaveCplt+0x18a>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a55      	ldr	r2, [pc, #340]	; (800d614 <I2C_ITSlaveCplt+0x2dc>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d105      	bne.n	800d4ce <I2C_ITSlaveCplt+0x196>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	e004      	b.n	800d4d8 <I2C_ITSlaveCplt+0x1a0>
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	8553      	strh	r3, [r2, #42]	; 0x2a
 800d4dc:	e0a3      	b.n	800d626 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	0bdb      	lsrs	r3, r3, #15
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 809d 	beq.w	800d626 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d4fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d500:	2b00      	cmp	r3, #0
 800d502:	f000 8090 	beq.w	800d626 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a32      	ldr	r2, [pc, #200]	; (800d5d8 <I2C_ITSlaveCplt+0x2a0>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d059      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a30      	ldr	r2, [pc, #192]	; (800d5dc <I2C_ITSlaveCplt+0x2a4>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d053      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a2e      	ldr	r2, [pc, #184]	; (800d5e0 <I2C_ITSlaveCplt+0x2a8>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d04d      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a2c      	ldr	r2, [pc, #176]	; (800d5e4 <I2C_ITSlaveCplt+0x2ac>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d047      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a2a      	ldr	r2, [pc, #168]	; (800d5e8 <I2C_ITSlaveCplt+0x2b0>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d041      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a28      	ldr	r2, [pc, #160]	; (800d5ec <I2C_ITSlaveCplt+0x2b4>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d03b      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a26      	ldr	r2, [pc, #152]	; (800d5f0 <I2C_ITSlaveCplt+0x2b8>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d035      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a24      	ldr	r2, [pc, #144]	; (800d5f4 <I2C_ITSlaveCplt+0x2bc>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d02f      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a22      	ldr	r2, [pc, #136]	; (800d5f8 <I2C_ITSlaveCplt+0x2c0>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d029      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a20      	ldr	r2, [pc, #128]	; (800d5fc <I2C_ITSlaveCplt+0x2c4>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d023      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <I2C_ITSlaveCplt+0x2c8>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d01d      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a1c      	ldr	r2, [pc, #112]	; (800d604 <I2C_ITSlaveCplt+0x2cc>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d017      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a1a      	ldr	r2, [pc, #104]	; (800d608 <I2C_ITSlaveCplt+0x2d0>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d011      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a18      	ldr	r2, [pc, #96]	; (800d60c <I2C_ITSlaveCplt+0x2d4>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d00b      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a16      	ldr	r2, [pc, #88]	; (800d610 <I2C_ITSlaveCplt+0x2d8>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d005      	beq.n	800d5c6 <I2C_ITSlaveCplt+0x28e>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a14      	ldr	r2, [pc, #80]	; (800d614 <I2C_ITSlaveCplt+0x2dc>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d128      	bne.n	800d618 <I2C_ITSlaveCplt+0x2e0>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	e027      	b.n	800d622 <I2C_ITSlaveCplt+0x2ea>
 800d5d2:	bf00      	nop
 800d5d4:	fe00e800 	.word	0xfe00e800
 800d5d8:	40020010 	.word	0x40020010
 800d5dc:	40020028 	.word	0x40020028
 800d5e0:	40020040 	.word	0x40020040
 800d5e4:	40020058 	.word	0x40020058
 800d5e8:	40020070 	.word	0x40020070
 800d5ec:	40020088 	.word	0x40020088
 800d5f0:	400200a0 	.word	0x400200a0
 800d5f4:	400200b8 	.word	0x400200b8
 800d5f8:	40020410 	.word	0x40020410
 800d5fc:	40020428 	.word	0x40020428
 800d600:	40020440 	.word	0x40020440
 800d604:	40020458 	.word	0x40020458
 800d608:	40020470 	.word	0x40020470
 800d60c:	40020488 	.word	0x40020488
 800d610:	400204a0 	.word	0x400204a0
 800d614:	400204b8 	.word	0x400204b8
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	b29b      	uxth	r3, r3
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	089b      	lsrs	r3, r3, #2
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d020      	beq.n	800d674 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f023 0304 	bic.w	r3, r3, #4
 800d638:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d644:	b2d2      	uxtb	r2, r2
 800d646:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00c      	beq.n	800d674 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d65e:	3b01      	subs	r3, #1
 800d660:	b29a      	uxth	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b29a      	uxth	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d678:	b29b      	uxth	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d005      	beq.n	800d68a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d682:	f043 0204 	orr.w	r2, r3, #4
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	091b      	lsrs	r3, r3, #4
 800d68e:	f003 0301 	and.w	r3, r3, #1
 800d692:	2b00      	cmp	r3, #0
 800d694:	d04a      	beq.n	800d72c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	091b      	lsrs	r3, r3, #4
 800d69a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d044      	beq.n	800d72c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d128      	bne.n	800d6fe <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b28      	cmp	r3, #40	; 0x28
 800d6b6:	d108      	bne.n	800d6ca <I2C_ITSlaveCplt+0x392>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d6be:	d104      	bne.n	800d6ca <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d6c0:	6979      	ldr	r1, [r7, #20]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 f892 	bl	800d7ec <I2C_ITListenCplt>
 800d6c8:	e030      	b.n	800d72c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b29      	cmp	r3, #41	; 0x29
 800d6d4:	d10e      	bne.n	800d6f4 <I2C_ITSlaveCplt+0x3bc>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d6dc:	d00a      	beq.n	800d6f4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	2210      	movs	r2, #16
 800d6e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 f9ed 	bl	800dac6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7ff fcfa 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
 800d6f2:	e01b      	b.n	800d72c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2210      	movs	r2, #16
 800d6fa:	61da      	str	r2, [r3, #28]
 800d6fc:	e016      	b.n	800d72c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2210      	movs	r2, #16
 800d704:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d70a:	f043 0204 	orr.w	r2, r3, #4
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d003      	beq.n	800d720 <I2C_ITSlaveCplt+0x3e8>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d71e:	d105      	bne.n	800d72c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d724:	4619      	mov	r1, r3
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f000 f8b6 	bl	800d898 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d010      	beq.n	800d764 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f8a5 	bl	800d898 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d754:	b2db      	uxtb	r3, r3
 800d756:	2b28      	cmp	r3, #40	; 0x28
 800d758:	d141      	bne.n	800d7de <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d75a:	6979      	ldr	r1, [r7, #20]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f845 	bl	800d7ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d762:	e03c      	b.n	800d7de <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d76c:	d014      	beq.n	800d798 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fcb9 	bl	800d0e6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a1c      	ldr	r2, [pc, #112]	; (800d7e8 <I2C_ITSlaveCplt+0x4b0>)
 800d778:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2220      	movs	r2, #32
 800d77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7fe fd68 	bl	800c266 <HAL_I2C_ListenCpltCallback>
}
 800d796:	e022      	b.n	800d7de <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b22      	cmp	r3, #34	; 0x22
 800d7a2:	d10e      	bne.n	800d7c2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2220      	movs	r2, #32
 800d7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7fe fd3b 	bl	800c236 <HAL_I2C_SlaveRxCpltCallback>
}
 800d7c0:	e00d      	b.n	800d7de <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7fe fd22 	bl	800c222 <HAL_I2C_SlaveTxCpltCallback>
}
 800d7de:	bf00      	nop
 800d7e0:	3718      	adds	r7, #24
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	ffff0000 	.word	0xffff0000

0800d7ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a26      	ldr	r2, [pc, #152]	; (800d894 <I2C_ITListenCplt+0xa8>)
 800d7fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2220      	movs	r2, #32
 800d806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	089b      	lsrs	r3, r3, #2
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d022      	beq.n	800d86a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	b2d2      	uxtb	r2, r2
 800d830:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	1c5a      	adds	r2, r3, #1
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d840:	2b00      	cmp	r3, #0
 800d842:	d012      	beq.n	800d86a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d848:	3b01      	subs	r3, #1
 800d84a:	b29a      	uxth	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d854:	b29b      	uxth	r3, r3
 800d856:	3b01      	subs	r3, #1
 800d858:	b29a      	uxth	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d862:	f043 0204 	orr.w	r2, r3, #4
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d86a:	f248 0103 	movw	r1, #32771	; 0x8003
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fbf2 	bl	800e058 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2210      	movs	r2, #16
 800d87a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7fe fcee 	bl	800c266 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	ffff0000 	.word	0xffff0000

0800d898 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8a8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a6d      	ldr	r2, [pc, #436]	; (800da6c <I2C_ITError+0x1d4>)
 800d8b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d8ca:	7bfb      	ldrb	r3, [r7, #15]
 800d8cc:	2b28      	cmp	r3, #40	; 0x28
 800d8ce:	d005      	beq.n	800d8dc <I2C_ITError+0x44>
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	2b29      	cmp	r3, #41	; 0x29
 800d8d4:	d002      	beq.n	800d8dc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8da:	d10b      	bne.n	800d8f4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d8dc:	2103      	movs	r1, #3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fbba 	bl	800e058 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2228      	movs	r2, #40	; 0x28
 800d8e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4a60      	ldr	r2, [pc, #384]	; (800da70 <I2C_ITError+0x1d8>)
 800d8f0:	635a      	str	r2, [r3, #52]	; 0x34
 800d8f2:	e030      	b.n	800d956 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d8f4:	f248 0103 	movw	r1, #32771	; 0x8003
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fbad 	bl	800e058 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f8e1 	bl	800dac6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b60      	cmp	r3, #96	; 0x60
 800d90e:	d01f      	beq.n	800d950 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2220      	movs	r2, #32
 800d914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	699b      	ldr	r3, [r3, #24]
 800d91e:	f003 0320 	and.w	r3, r3, #32
 800d922:	2b20      	cmp	r3, #32
 800d924:	d114      	bne.n	800d950 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	f003 0310 	and.w	r3, r3, #16
 800d930:	2b10      	cmp	r3, #16
 800d932:	d109      	bne.n	800d948 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2210      	movs	r2, #16
 800d93a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d940:	f043 0204 	orr.w	r2, r3, #4
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2220      	movs	r2, #32
 800d94e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d960:	2b00      	cmp	r3, #0
 800d962:	d039      	beq.n	800d9d8 <I2C_ITError+0x140>
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	2b11      	cmp	r3, #17
 800d968:	d002      	beq.n	800d970 <I2C_ITError+0xd8>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b21      	cmp	r3, #33	; 0x21
 800d96e:	d133      	bne.n	800d9d8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d97a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d97e:	d107      	bne.n	800d990 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d98e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	4618      	mov	r0, r3
 800d996:	f7fd f857 	bl	800aa48 <HAL_DMA_GetState>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d017      	beq.n	800d9d0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a4:	4a33      	ldr	r2, [pc, #204]	; (800da74 <I2C_ITError+0x1dc>)
 800d9a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f7fb fed7 	bl	8009768 <HAL_DMA_Abort_IT>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d04d      	beq.n	800da5c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9ce:	e045      	b.n	800da5c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f851 	bl	800da78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d9d6:	e041      	b.n	800da5c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d039      	beq.n	800da54 <I2C_ITError+0x1bc>
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2b12      	cmp	r3, #18
 800d9e4:	d002      	beq.n	800d9ec <I2C_ITError+0x154>
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	2b22      	cmp	r3, #34	; 0x22
 800d9ea:	d133      	bne.n	800da54 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9fa:	d107      	bne.n	800da0c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da10:	4618      	mov	r0, r3
 800da12:	f7fd f819 	bl	800aa48 <HAL_DMA_GetState>
 800da16:	4603      	mov	r3, r0
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d017      	beq.n	800da4c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da20:	4a14      	ldr	r2, [pc, #80]	; (800da74 <I2C_ITError+0x1dc>)
 800da22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da30:	4618      	mov	r0, r3
 800da32:	f7fb fe99 	bl	8009768 <HAL_DMA_Abort_IT>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d011      	beq.n	800da60 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800da46:	4610      	mov	r0, r2
 800da48:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da4a:	e009      	b.n	800da60 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f813 	bl	800da78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da52:	e005      	b.n	800da60 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 f80f 	bl	800da78 <I2C_TreatErrorCallback>
  }
}
 800da5a:	e002      	b.n	800da62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800da5c:	bf00      	nop
 800da5e:	e000      	b.n	800da62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800da60:	bf00      	nop
}
 800da62:	bf00      	nop
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	ffff0000 	.word	0xffff0000
 800da70:	0800c54f 	.word	0x0800c54f
 800da74:	0800deb1 	.word	0x0800deb1

0800da78 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b60      	cmp	r3, #96	; 0x60
 800da8a:	d10e      	bne.n	800daaa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2220      	movs	r2, #32
 800da90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2200      	movs	r2, #0
 800da9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7fe fc07 	bl	800c2b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800daa8:	e009      	b.n	800dabe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f7fe fbf2 	bl	800c2a2 <HAL_I2C_ErrorCallback>
}
 800dabe:	bf00      	nop
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	f003 0302 	and.w	r3, r3, #2
 800dad8:	2b02      	cmp	r3, #2
 800dada:	d103      	bne.n	800dae4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2200      	movs	r2, #0
 800dae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d007      	beq.n	800db02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	699a      	ldr	r2, [r3, #24]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f042 0201 	orr.w	r2, r2, #1
 800db00:	619a      	str	r2, [r3, #24]
  }
}
 800db02:	bf00      	nop
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800db2a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d104      	bne.n	800db40 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800db36:	2120      	movs	r1, #32
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 fa09 	bl	800df50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800db3e:	e02d      	b.n	800db9c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800db48:	441a      	add	r2, r3
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db52:	b29b      	uxth	r3, r3
 800db54:	2bff      	cmp	r3, #255	; 0xff
 800db56:	d903      	bls.n	800db60 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	22ff      	movs	r2, #255	; 0xff
 800db5c:	851a      	strh	r2, [r3, #40]	; 0x28
 800db5e:	e004      	b.n	800db6a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db64:	b29a      	uxth	r2, r3
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	4619      	mov	r1, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3328      	adds	r3, #40	; 0x28
 800db7a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800db80:	f7fb f86a 	bl	8008c58 <HAL_DMA_Start_IT>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800db8a:	2110      	movs	r1, #16
 800db8c:	68f8      	ldr	r0, [r7, #12]
 800db8e:	f7ff fe83 	bl	800d898 <I2C_ITError>
}
 800db92:	e003      	b.n	800db9c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800db94:	2140      	movs	r1, #64	; 0x40
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f000 f9da 	bl	800df50 <I2C_Enable_IRQ>
}
 800db9c:	bf00      	nop
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbc0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d104      	bne.n	800dbd6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800dbcc:	2120      	movs	r1, #32
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 f9be 	bl	800df50 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800dbd4:	e02d      	b.n	800dc32 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dbde:	441a      	add	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	2bff      	cmp	r3, #255	; 0xff
 800dbec:	d903      	bls.n	800dbf6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	22ff      	movs	r2, #255	; 0xff
 800dbf2:	851a      	strh	r2, [r3, #40]	; 0x28
 800dbf4:	e004      	b.n	800dc00 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	3324      	adds	r3, #36	; 0x24
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc10:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800dc16:	f7fb f81f 	bl	8008c58 <HAL_DMA_Start_IT>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800dc20:	2110      	movs	r1, #16
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff fe38 	bl	800d898 <I2C_ITError>
}
 800dc28:	e003      	b.n	800dc32 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800dc2a:	2140      	movs	r1, #64	; 0x40
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 f98f 	bl	800df50 <I2C_Enable_IRQ>
}
 800dc32:	bf00      	nop
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
	...

0800dc3c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d076      	beq.n	800dd44 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a71      	ldr	r2, [pc, #452]	; (800de24 <I2C_DMAError+0x1e8>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d059      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a6f      	ldr	r2, [pc, #444]	; (800de28 <I2C_DMAError+0x1ec>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d053      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a6d      	ldr	r2, [pc, #436]	; (800de2c <I2C_DMAError+0x1f0>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d04d      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a6b      	ldr	r2, [pc, #428]	; (800de30 <I2C_DMAError+0x1f4>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d047      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a69      	ldr	r2, [pc, #420]	; (800de34 <I2C_DMAError+0x1f8>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d041      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4a67      	ldr	r2, [pc, #412]	; (800de38 <I2C_DMAError+0x1fc>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d03b      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a65      	ldr	r2, [pc, #404]	; (800de3c <I2C_DMAError+0x200>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d035      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a63      	ldr	r2, [pc, #396]	; (800de40 <I2C_DMAError+0x204>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d02f      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4a61      	ldr	r2, [pc, #388]	; (800de44 <I2C_DMAError+0x208>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d029      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a5f      	ldr	r2, [pc, #380]	; (800de48 <I2C_DMAError+0x20c>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d023      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	4a5d      	ldr	r2, [pc, #372]	; (800de4c <I2C_DMAError+0x210>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d01d      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a5b      	ldr	r2, [pc, #364]	; (800de50 <I2C_DMAError+0x214>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d017      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4a59      	ldr	r2, [pc, #356]	; (800de54 <I2C_DMAError+0x218>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d011      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	4a57      	ldr	r2, [pc, #348]	; (800de58 <I2C_DMAError+0x21c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d00b      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	4a55      	ldr	r2, [pc, #340]	; (800de5c <I2C_DMAError+0x220>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d005      	beq.n	800dd16 <I2C_DMAError+0xda>
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a53      	ldr	r2, [pc, #332]	; (800de60 <I2C_DMAError+0x224>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d109      	bne.n	800dd2a <I2C_DMAError+0xee>
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bf0c      	ite	eq
 800dd22:	2301      	moveq	r3, #1
 800dd24:	2300      	movne	r3, #0
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	e008      	b.n	800dd3c <I2C_DMAError+0x100>
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	bf0c      	ite	eq
 800dd36:	2301      	moveq	r3, #1
 800dd38:	2300      	movne	r3, #0
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800dd40:	2301      	movs	r3, #1
 800dd42:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 8098 	beq.w	800de7e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a33      	ldr	r2, [pc, #204]	; (800de24 <I2C_DMAError+0x1e8>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d059      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a31      	ldr	r2, [pc, #196]	; (800de28 <I2C_DMAError+0x1ec>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d053      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a2f      	ldr	r2, [pc, #188]	; (800de2c <I2C_DMAError+0x1f0>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d04d      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a2d      	ldr	r2, [pc, #180]	; (800de30 <I2C_DMAError+0x1f4>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d047      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a2b      	ldr	r2, [pc, #172]	; (800de34 <I2C_DMAError+0x1f8>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d041      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a29      	ldr	r2, [pc, #164]	; (800de38 <I2C_DMAError+0x1fc>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d03b      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a27      	ldr	r2, [pc, #156]	; (800de3c <I2C_DMAError+0x200>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d035      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a25      	ldr	r2, [pc, #148]	; (800de40 <I2C_DMAError+0x204>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d02f      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a23      	ldr	r2, [pc, #140]	; (800de44 <I2C_DMAError+0x208>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d029      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a21      	ldr	r2, [pc, #132]	; (800de48 <I2C_DMAError+0x20c>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d023      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a1f      	ldr	r2, [pc, #124]	; (800de4c <I2C_DMAError+0x210>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d01d      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a1d      	ldr	r2, [pc, #116]	; (800de50 <I2C_DMAError+0x214>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d017      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a1b      	ldr	r2, [pc, #108]	; (800de54 <I2C_DMAError+0x218>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d011      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4a19      	ldr	r2, [pc, #100]	; (800de58 <I2C_DMAError+0x21c>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d00b      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a17      	ldr	r2, [pc, #92]	; (800de5c <I2C_DMAError+0x220>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d005      	beq.n	800de0e <I2C_DMAError+0x1d2>
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a15      	ldr	r2, [pc, #84]	; (800de60 <I2C_DMAError+0x224>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d12a      	bne.n	800de64 <I2C_DMAError+0x228>
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	bf0c      	ite	eq
 800de1a:	2301      	moveq	r3, #1
 800de1c:	2300      	movne	r3, #0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	e029      	b.n	800de76 <I2C_DMAError+0x23a>
 800de22:	bf00      	nop
 800de24:	40020010 	.word	0x40020010
 800de28:	40020028 	.word	0x40020028
 800de2c:	40020040 	.word	0x40020040
 800de30:	40020058 	.word	0x40020058
 800de34:	40020070 	.word	0x40020070
 800de38:	40020088 	.word	0x40020088
 800de3c:	400200a0 	.word	0x400200a0
 800de40:	400200b8 	.word	0x400200b8
 800de44:	40020410 	.word	0x40020410
 800de48:	40020428 	.word	0x40020428
 800de4c:	40020440 	.word	0x40020440
 800de50:	40020458 	.word	0x40020458
 800de54:	40020470 	.word	0x40020470
 800de58:	40020488 	.word	0x40020488
 800de5c:	400204a0 	.word	0x400204a0
 800de60:	400204b8 	.word	0x400204b8
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	bf0c      	ite	eq
 800de70:	2301      	moveq	r3, #1
 800de72:	2300      	movne	r3, #0
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800de7a:	2301      	movs	r3, #1
 800de7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7fc fdf0 	bl	800aa64 <HAL_DMA_GetError>
 800de84:	4603      	mov	r3, r0
 800de86:	2b02      	cmp	r3, #2
 800de88:	d00e      	beq.n	800dea8 <I2C_DMAError+0x26c>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d00b      	beq.n	800dea8 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	685a      	ldr	r2, [r3, #4]
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de9e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800dea0:	2110      	movs	r1, #16
 800dea2:	68b8      	ldr	r0, [r7, #8]
 800dea4:	f7ff fcf8 	bl	800d898 <I2C_ITError>
  }
}
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deca:	2200      	movs	r2, #0
 800decc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deda:	2200      	movs	r2, #0
 800dedc:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f7ff fdca 	bl	800da78 <I2C_TreatErrorCallback>
}
 800dee4:	bf00      	nop
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	607b      	str	r3, [r7, #4]
 800def6:	460b      	mov	r3, r1
 800def8:	817b      	strh	r3, [r7, #10]
 800defa:	4613      	mov	r3, r2
 800defc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800defe:	897b      	ldrh	r3, [r7, #10]
 800df00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800df04:	7a7b      	ldrb	r3, [r7, #9]
 800df06:	041b      	lsls	r3, r3, #16
 800df08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800df0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	4313      	orrs	r3, r2
 800df16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	685a      	ldr	r2, [r3, #4]
 800df22:	6a3b      	ldr	r3, [r7, #32]
 800df24:	0d5b      	lsrs	r3, r3, #21
 800df26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800df2a:	4b08      	ldr	r3, [pc, #32]	; (800df4c <I2C_TransferConfig+0x60>)
 800df2c:	430b      	orrs	r3, r1
 800df2e:	43db      	mvns	r3, r3
 800df30:	ea02 0103 	and.w	r1, r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	697a      	ldr	r2, [r7, #20]
 800df3a:	430a      	orrs	r2, r1
 800df3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800df3e:	bf00      	nop
 800df40:	371c      	adds	r7, #28
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	03ff63ff 	.word	0x03ff63ff

0800df50 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800df5c:	2300      	movs	r3, #0
 800df5e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df64:	4a39      	ldr	r2, [pc, #228]	; (800e04c <I2C_Enable_IRQ+0xfc>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d032      	beq.n	800dfd0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800df6e:	4a38      	ldr	r2, [pc, #224]	; (800e050 <I2C_Enable_IRQ+0x100>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d02d      	beq.n	800dfd0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800df78:	4a36      	ldr	r2, [pc, #216]	; (800e054 <I2C_Enable_IRQ+0x104>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d028      	beq.n	800dfd0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800df7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df82:	2b00      	cmp	r3, #0
 800df84:	da03      	bge.n	800df8e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800df8c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800df8e:	887b      	ldrh	r3, [r7, #2]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800df9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dfa0:	887b      	ldrh	r3, [r7, #2]
 800dfa2:	f003 0302 	and.w	r3, r3, #2
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d003      	beq.n	800dfb2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800dfb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800dfb2:	887b      	ldrh	r3, [r7, #2]
 800dfb4:	2b10      	cmp	r3, #16
 800dfb6:	d103      	bne.n	800dfc0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800dfbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dfc0:	887b      	ldrh	r3, [r7, #2]
 800dfc2:	2b20      	cmp	r3, #32
 800dfc4:	d133      	bne.n	800e02e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f043 0320 	orr.w	r3, r3, #32
 800dfcc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800dfce:	e02e      	b.n	800e02e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800dfd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	da03      	bge.n	800dfe0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800dfde:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800dfe0:	887b      	ldrh	r3, [r7, #2]
 800dfe2:	f003 0301 	and.w	r3, r3, #1
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800dff0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800dff2:	887b      	ldrh	r3, [r7, #2]
 800dff4:	f003 0302 	and.w	r3, r3, #2
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d003      	beq.n	800e004 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800e002:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e004:	887b      	ldrh	r3, [r7, #2]
 800e006:	2b10      	cmp	r3, #16
 800e008:	d103      	bne.n	800e012 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e010:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e012:	887b      	ldrh	r3, [r7, #2]
 800e014:	2b20      	cmp	r3, #32
 800e016:	d103      	bne.n	800e020 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e01e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e020:	887b      	ldrh	r3, [r7, #2]
 800e022:	2b40      	cmp	r3, #64	; 0x40
 800e024:	d103      	bne.n	800e02e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e02c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	430a      	orrs	r2, r1
 800e03c:	601a      	str	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop
 800e04c:	0800c757 	.word	0x0800c757
 800e050:	0800cb9d 	.word	0x0800cb9d
 800e054:	0800c93d 	.word	0x0800c93d

0800e058 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e064:	2300      	movs	r3, #0
 800e066:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e068:	887b      	ldrh	r3, [r7, #2]
 800e06a:	f003 0301 	and.w	r3, r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00f      	beq.n	800e092 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e078:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e080:	b2db      	uxtb	r3, r3
 800e082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e086:	2b28      	cmp	r3, #40	; 0x28
 800e088:	d003      	beq.n	800e092 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e090:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e092:	887b      	ldrh	r3, [r7, #2]
 800e094:	f003 0302 	and.w	r3, r3, #2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00f      	beq.n	800e0bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e0a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e0b0:	2b28      	cmp	r3, #40	; 0x28
 800e0b2:	d003      	beq.n	800e0bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e0ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e0bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	da03      	bge.n	800e0cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e0ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e0cc:	887b      	ldrh	r3, [r7, #2]
 800e0ce:	2b10      	cmp	r3, #16
 800e0d0:	d103      	bne.n	800e0da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e0d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e0da:	887b      	ldrh	r3, [r7, #2]
 800e0dc:	2b20      	cmp	r3, #32
 800e0de:	d103      	bne.n	800e0e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f043 0320 	orr.w	r3, r3, #32
 800e0e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e0e8:	887b      	ldrh	r3, [r7, #2]
 800e0ea:	2b40      	cmp	r3, #64	; 0x40
 800e0ec:	d103      	bne.n	800e0f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6819      	ldr	r1, [r3, #0]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	43da      	mvns	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	400a      	ands	r2, r1
 800e106:	601a      	str	r2, [r3, #0]
}
 800e108:	bf00      	nop
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e124:	b2db      	uxtb	r3, r3
 800e126:	2b20      	cmp	r3, #32
 800e128:	d138      	bne.n	800e19c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e130:	2b01      	cmp	r3, #1
 800e132:	d101      	bne.n	800e138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e134:	2302      	movs	r3, #2
 800e136:	e032      	b.n	800e19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2201      	movs	r2, #1
 800e13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2224      	movs	r2, #36	; 0x24
 800e144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f022 0201 	bic.w	r2, r2, #1
 800e156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	681a      	ldr	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6819      	ldr	r1, [r3, #0]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f042 0201 	orr.w	r2, r2, #1
 800e186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2220      	movs	r2, #32
 800e18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	e000      	b.n	800e19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e19c:	2302      	movs	r3, #2
  }
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr

0800e1aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	b085      	sub	sp, #20
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
 800e1b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	2b20      	cmp	r3, #32
 800e1be:	d139      	bne.n	800e234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d101      	bne.n	800e1ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e1ca:	2302      	movs	r3, #2
 800e1cc:	e033      	b.n	800e236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2224      	movs	r2, #36	; 0x24
 800e1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f022 0201 	bic.w	r2, r2, #1
 800e1ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e1fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	021b      	lsls	r3, r3, #8
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	4313      	orrs	r3, r2
 800e206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f042 0201 	orr.w	r2, r2, #1
 800e21e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2220      	movs	r2, #32
 800e224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	e000      	b.n	800e236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e234:	2302      	movs	r3, #2
  }
}
 800e236:	4618      	mov	r0, r3
 800e238:	3714      	adds	r7, #20
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
	...

0800e244 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e24c:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e24e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e252:	4a0c      	ldr	r2, [pc, #48]	; (800e284 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e254:	f043 0302 	orr.w	r3, r3, #2
 800e258:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800e25c:	4b09      	ldr	r3, [pc, #36]	; (800e284 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800e25e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e262:	f003 0302 	and.w	r3, r3, #2
 800e266:	60fb      	str	r3, [r7, #12]
 800e268:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800e26a:	4b07      	ldr	r3, [pc, #28]	; (800e288 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800e26c:	685a      	ldr	r2, [r3, #4]
 800e26e:	4906      	ldr	r1, [pc, #24]	; (800e288 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4313      	orrs	r3, r2
 800e274:	604b      	str	r3, [r1, #4]
}
 800e276:	bf00      	nop
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	58024400 	.word	0x58024400
 800e288:	58000400 	.word	0x58000400

0800e28c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e041      	b.n	800e322 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800e2a6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f245 5255 	movw	r2, #21845	; 0x5555
 800e2b0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	6852      	ldr	r2, [r2, #4]
 800e2ba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	6892      	ldr	r2, [r2, #8]
 800e2c4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800e2c6:	f7f8 f843 	bl	8006350 <HAL_GetTick>
 800e2ca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e2cc:	e00f      	b.n	800e2ee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800e2ce:	f7f8 f83f 	bl	8006350 <HAL_GetTick>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	2b31      	cmp	r3, #49	; 0x31
 800e2da:	d908      	bls.n	800e2ee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	f003 0307 	and.w	r3, r3, #7
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e019      	b.n	800e322 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	f003 0307 	and.w	r3, r3, #7
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d1e8      	bne.n	800e2ce <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	691a      	ldr	r2, [r3, #16]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	429a      	cmp	r2, r3
 800e308:	d005      	beq.n	800e316 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	68d2      	ldr	r2, [r2, #12]
 800e312:	611a      	str	r2, [r3, #16]
 800e314:	e004      	b.n	800e320 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e31e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800e32a:	b480      	push	{r7}
 800e32c:	b083      	sub	sp, #12
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800e33a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	370c      	adds	r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
	...

0800e34c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800e358:	4b18      	ldr	r3, [pc, #96]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f023 0201 	bic.w	r2, r3, #1
 800e360:	4916      	ldr	r1, [pc, #88]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4313      	orrs	r3, r2
 800e366:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800e368:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	4a13      	ldr	r2, [pc, #76]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e36e:	f023 0305 	bic.w	r3, r3, #5
 800e372:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800e374:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	4a10      	ldr	r2, [pc, #64]	; (800e3bc <HAL_PWR_EnterSTOPMode+0x70>)
 800e37a:	f023 0302 	bic.w	r3, r3, #2
 800e37e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800e380:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <HAL_PWR_EnterSTOPMode+0x74>)
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	4a0e      	ldr	r2, [pc, #56]	; (800e3c0 <HAL_PWR_EnterSTOPMode+0x74>)
 800e386:	f043 0304 	orr.w	r3, r3, #4
 800e38a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800e38c:	f3bf 8f4f 	dsb	sy
}
 800e390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e392:	f3bf 8f6f 	isb	sy
}
 800e396:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800e398:	78fb      	ldrb	r3, [r7, #3]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d101      	bne.n	800e3a2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800e39e:	bf30      	wfi
 800e3a0:	e000      	b.n	800e3a4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800e3a2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800e3a4:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <HAL_PWR_EnterSTOPMode+0x74>)
 800e3a6:	691b      	ldr	r3, [r3, #16]
 800e3a8:	4a05      	ldr	r2, [pc, #20]	; (800e3c0 <HAL_PWR_EnterSTOPMode+0x74>)
 800e3aa:	f023 0304 	bic.w	r3, r3, #4
 800e3ae:	6113      	str	r3, [r2, #16]
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr
 800e3bc:	58024800 	.word	0x58024800
 800e3c0:	e000ed00 	.word	0xe000ed00

0800e3c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e3cc:	4b19      	ldr	r3, [pc, #100]	; (800e434 <HAL_PWREx_ConfigSupply+0x70>)
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f003 0304 	and.w	r3, r3, #4
 800e3d4:	2b04      	cmp	r3, #4
 800e3d6:	d00a      	beq.n	800e3ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e3d8:	4b16      	ldr	r3, [pc, #88]	; (800e434 <HAL_PWREx_ConfigSupply+0x70>)
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	f003 0307 	and.w	r3, r3, #7
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	d001      	beq.n	800e3ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e01f      	b.n	800e42a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	e01d      	b.n	800e42a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e3ee:	4b11      	ldr	r3, [pc, #68]	; (800e434 <HAL_PWREx_ConfigSupply+0x70>)
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	f023 0207 	bic.w	r2, r3, #7
 800e3f6:	490f      	ldr	r1, [pc, #60]	; (800e434 <HAL_PWREx_ConfigSupply+0x70>)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e3fe:	f7f7 ffa7 	bl	8006350 <HAL_GetTick>
 800e402:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e404:	e009      	b.n	800e41a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e406:	f7f7 ffa3 	bl	8006350 <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e414:	d901      	bls.n	800e41a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	e007      	b.n	800e42a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e41a:	4b06      	ldr	r3, [pc, #24]	; (800e434 <HAL_PWREx_ConfigSupply+0x70>)
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e426:	d1ee      	bne.n	800e406 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	58024800 	.word	0x58024800

0800e438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08c      	sub	sp, #48	; 0x30
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d102      	bne.n	800e44c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	f000 bc48 	b.w	800ecdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f003 0301 	and.w	r3, r3, #1
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 8088 	beq.w	800e56a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e45a:	4b99      	ldr	r3, [pc, #612]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e462:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e464:	4b96      	ldr	r3, [pc, #600]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e468:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46c:	2b10      	cmp	r3, #16
 800e46e:	d007      	beq.n	800e480 <HAL_RCC_OscConfig+0x48>
 800e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e472:	2b18      	cmp	r3, #24
 800e474:	d111      	bne.n	800e49a <HAL_RCC_OscConfig+0x62>
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	f003 0303 	and.w	r3, r3, #3
 800e47c:	2b02      	cmp	r3, #2
 800e47e:	d10c      	bne.n	800e49a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e480:	4b8f      	ldr	r3, [pc, #572]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d06d      	beq.n	800e568 <HAL_RCC_OscConfig+0x130>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d169      	bne.n	800e568 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	f000 bc21 	b.w	800ecdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4a2:	d106      	bne.n	800e4b2 <HAL_RCC_OscConfig+0x7a>
 800e4a4:	4b86      	ldr	r3, [pc, #536]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4a85      	ldr	r2, [pc, #532]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	e02e      	b.n	800e510 <HAL_RCC_OscConfig+0xd8>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10c      	bne.n	800e4d4 <HAL_RCC_OscConfig+0x9c>
 800e4ba:	4b81      	ldr	r3, [pc, #516]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4a80      	ldr	r2, [pc, #512]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e4c4:	6013      	str	r3, [r2, #0]
 800e4c6:	4b7e      	ldr	r3, [pc, #504]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a7d      	ldr	r2, [pc, #500]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e4d0:	6013      	str	r3, [r2, #0]
 800e4d2:	e01d      	b.n	800e510 <HAL_RCC_OscConfig+0xd8>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4dc:	d10c      	bne.n	800e4f8 <HAL_RCC_OscConfig+0xc0>
 800e4de:	4b78      	ldr	r3, [pc, #480]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a77      	ldr	r2, [pc, #476]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e4e8:	6013      	str	r3, [r2, #0]
 800e4ea:	4b75      	ldr	r3, [pc, #468]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4a74      	ldr	r2, [pc, #464]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e4f4:	6013      	str	r3, [r2, #0]
 800e4f6:	e00b      	b.n	800e510 <HAL_RCC_OscConfig+0xd8>
 800e4f8:	4b71      	ldr	r3, [pc, #452]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a70      	ldr	r2, [pc, #448]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e4fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	4b6e      	ldr	r3, [pc, #440]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a6d      	ldr	r2, [pc, #436]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e50a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e50e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d013      	beq.n	800e540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e518:	f7f7 ff1a 	bl	8006350 <HAL_GetTick>
 800e51c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e51e:	e008      	b.n	800e532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e520:	f7f7 ff16 	bl	8006350 <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	2b64      	cmp	r3, #100	; 0x64
 800e52c:	d901      	bls.n	800e532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e3d4      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e532:	4b63      	ldr	r3, [pc, #396]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d0f0      	beq.n	800e520 <HAL_RCC_OscConfig+0xe8>
 800e53e:	e014      	b.n	800e56a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e540:	f7f7 ff06 	bl	8006350 <HAL_GetTick>
 800e544:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e546:	e008      	b.n	800e55a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e548:	f7f7 ff02 	bl	8006350 <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	2b64      	cmp	r3, #100	; 0x64
 800e554:	d901      	bls.n	800e55a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800e556:	2303      	movs	r3, #3
 800e558:	e3c0      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e55a:	4b59      	ldr	r3, [pc, #356]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1f0      	bne.n	800e548 <HAL_RCC_OscConfig+0x110>
 800e566:	e000      	b.n	800e56a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 80ca 	beq.w	800e70c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e578:	4b51      	ldr	r3, [pc, #324]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e57a:	691b      	ldr	r3, [r3, #16]
 800e57c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e580:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e582:	4b4f      	ldr	r3, [pc, #316]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e586:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e588:	6a3b      	ldr	r3, [r7, #32]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d007      	beq.n	800e59e <HAL_RCC_OscConfig+0x166>
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	2b18      	cmp	r3, #24
 800e592:	d156      	bne.n	800e642 <HAL_RCC_OscConfig+0x20a>
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	f003 0303 	and.w	r3, r3, #3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d151      	bne.n	800e642 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e59e:	4b48      	ldr	r3, [pc, #288]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f003 0304 	and.w	r3, r3, #4
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d005      	beq.n	800e5b6 <HAL_RCC_OscConfig+0x17e>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e392      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e5b6:	4b42      	ldr	r3, [pc, #264]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f023 0219 	bic.w	r2, r3, #25
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	493f      	ldr	r1, [pc, #252]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e5c8:	f7f7 fec2 	bl	8006350 <HAL_GetTick>
 800e5cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5ce:	e008      	b.n	800e5e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e5d0:	f7f7 febe 	bl	8006350 <HAL_GetTick>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d901      	bls.n	800e5e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800e5de:	2303      	movs	r3, #3
 800e5e0:	e37c      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5e2:	4b37      	ldr	r3, [pc, #220]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f003 0304 	and.w	r3, r3, #4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d0f0      	beq.n	800e5d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e5ee:	f7f7 febb 	bl	8006368 <HAL_GetREVID>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	f241 0203 	movw	r2, #4099	; 0x1003
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d817      	bhi.n	800e62c <HAL_RCC_OscConfig+0x1f4>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	2b40      	cmp	r3, #64	; 0x40
 800e602:	d108      	bne.n	800e616 <HAL_RCC_OscConfig+0x1de>
 800e604:	4b2e      	ldr	r3, [pc, #184]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e60c:	4a2c      	ldr	r2, [pc, #176]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e60e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e612:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e614:	e07a      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e616:	4b2a      	ldr	r3, [pc, #168]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	691b      	ldr	r3, [r3, #16]
 800e622:	031b      	lsls	r3, r3, #12
 800e624:	4926      	ldr	r1, [pc, #152]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e626:	4313      	orrs	r3, r2
 800e628:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e62a:	e06f      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e62c:	4b24      	ldr	r3, [pc, #144]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	691b      	ldr	r3, [r3, #16]
 800e638:	061b      	lsls	r3, r3, #24
 800e63a:	4921      	ldr	r1, [pc, #132]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e63c:	4313      	orrs	r3, r2
 800e63e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e640:	e064      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d047      	beq.n	800e6da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e64a:	4b1d      	ldr	r3, [pc, #116]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f023 0219 	bic.w	r2, r3, #25
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	491a      	ldr	r1, [pc, #104]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e658:	4313      	orrs	r3, r2
 800e65a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e65c:	f7f7 fe78 	bl	8006350 <HAL_GetTick>
 800e660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e662:	e008      	b.n	800e676 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e664:	f7f7 fe74 	bl	8006350 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d901      	bls.n	800e676 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800e672:	2303      	movs	r3, #3
 800e674:	e332      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e676:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f003 0304 	and.w	r3, r3, #4
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d0f0      	beq.n	800e664 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e682:	f7f7 fe71 	bl	8006368 <HAL_GetREVID>
 800e686:	4603      	mov	r3, r0
 800e688:	f241 0203 	movw	r2, #4099	; 0x1003
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d819      	bhi.n	800e6c4 <HAL_RCC_OscConfig+0x28c>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	2b40      	cmp	r3, #64	; 0x40
 800e696:	d108      	bne.n	800e6aa <HAL_RCC_OscConfig+0x272>
 800e698:	4b09      	ldr	r3, [pc, #36]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e6a0:	4a07      	ldr	r2, [pc, #28]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e6a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6a6:	6053      	str	r3, [r2, #4]
 800e6a8:	e030      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
 800e6aa:	4b05      	ldr	r3, [pc, #20]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	031b      	lsls	r3, r3, #12
 800e6b8:	4901      	ldr	r1, [pc, #4]	; (800e6c0 <HAL_RCC_OscConfig+0x288>)
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	604b      	str	r3, [r1, #4]
 800e6be:	e025      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
 800e6c0:	58024400 	.word	0x58024400
 800e6c4:	4b9a      	ldr	r3, [pc, #616]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	691b      	ldr	r3, [r3, #16]
 800e6d0:	061b      	lsls	r3, r3, #24
 800e6d2:	4997      	ldr	r1, [pc, #604]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	604b      	str	r3, [r1, #4]
 800e6d8:	e018      	b.n	800e70c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e6da:	4b95      	ldr	r3, [pc, #596]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a94      	ldr	r2, [pc, #592]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e6e0:	f023 0301 	bic.w	r3, r3, #1
 800e6e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e6e6:	f7f7 fe33 	bl	8006350 <HAL_GetTick>
 800e6ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e6ec:	e008      	b.n	800e700 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e6ee:	f7f7 fe2f 	bl	8006350 <HAL_GetTick>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d901      	bls.n	800e700 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800e6fc:	2303      	movs	r3, #3
 800e6fe:	e2ed      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e700:	4b8b      	ldr	r3, [pc, #556]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f003 0304 	and.w	r3, r3, #4
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1f0      	bne.n	800e6ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f003 0310 	and.w	r3, r3, #16
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 80a9 	beq.w	800e86c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e71a:	4b85      	ldr	r3, [pc, #532]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e722:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e724:	4b82      	ldr	r3, [pc, #520]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e728:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d007      	beq.n	800e740 <HAL_RCC_OscConfig+0x308>
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	2b18      	cmp	r3, #24
 800e734:	d13a      	bne.n	800e7ac <HAL_RCC_OscConfig+0x374>
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	f003 0303 	and.w	r3, r3, #3
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d135      	bne.n	800e7ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e740:	4b7b      	ldr	r3, [pc, #492]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <HAL_RCC_OscConfig+0x320>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	69db      	ldr	r3, [r3, #28]
 800e750:	2b80      	cmp	r3, #128	; 0x80
 800e752:	d001      	beq.n	800e758 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800e754:	2301      	movs	r3, #1
 800e756:	e2c1      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e758:	f7f7 fe06 	bl	8006368 <HAL_GetREVID>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f241 0203 	movw	r2, #4099	; 0x1003
 800e762:	4293      	cmp	r3, r2
 800e764:	d817      	bhi.n	800e796 <HAL_RCC_OscConfig+0x35e>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6a1b      	ldr	r3, [r3, #32]
 800e76a:	2b20      	cmp	r3, #32
 800e76c:	d108      	bne.n	800e780 <HAL_RCC_OscConfig+0x348>
 800e76e:	4b70      	ldr	r3, [pc, #448]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e776:	4a6e      	ldr	r2, [pc, #440]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e77c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e77e:	e075      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e780:	4b6b      	ldr	r3, [pc, #428]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	069b      	lsls	r3, r3, #26
 800e78e:	4968      	ldr	r1, [pc, #416]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e790:	4313      	orrs	r3, r2
 800e792:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e794:	e06a      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e796:	4b66      	ldr	r3, [pc, #408]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6a1b      	ldr	r3, [r3, #32]
 800e7a2:	061b      	lsls	r3, r3, #24
 800e7a4:	4962      	ldr	r1, [pc, #392]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e7aa:	e05f      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	69db      	ldr	r3, [r3, #28]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d042      	beq.n	800e83a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e7b4:	4b5e      	ldr	r3, [pc, #376]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a5d      	ldr	r2, [pc, #372]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e7ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c0:	f7f7 fdc6 	bl	8006350 <HAL_GetTick>
 800e7c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e7c6:	e008      	b.n	800e7da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e7c8:	f7f7 fdc2 	bl	8006350 <HAL_GetTick>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d901      	bls.n	800e7da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	e280      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e7da:	4b55      	ldr	r3, [pc, #340]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d0f0      	beq.n	800e7c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e7e6:	f7f7 fdbf 	bl	8006368 <HAL_GetREVID>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	f241 0203 	movw	r2, #4099	; 0x1003
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d817      	bhi.n	800e824 <HAL_RCC_OscConfig+0x3ec>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	2b20      	cmp	r3, #32
 800e7fa:	d108      	bne.n	800e80e <HAL_RCC_OscConfig+0x3d6>
 800e7fc:	4b4c      	ldr	r3, [pc, #304]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800e804:	4a4a      	ldr	r2, [pc, #296]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e80a:	6053      	str	r3, [r2, #4]
 800e80c:	e02e      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
 800e80e:	4b48      	ldr	r3, [pc, #288]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6a1b      	ldr	r3, [r3, #32]
 800e81a:	069b      	lsls	r3, r3, #26
 800e81c:	4944      	ldr	r1, [pc, #272]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e81e:	4313      	orrs	r3, r2
 800e820:	604b      	str	r3, [r1, #4]
 800e822:	e023      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
 800e824:	4b42      	ldr	r3, [pc, #264]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6a1b      	ldr	r3, [r3, #32]
 800e830:	061b      	lsls	r3, r3, #24
 800e832:	493f      	ldr	r1, [pc, #252]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e834:	4313      	orrs	r3, r2
 800e836:	60cb      	str	r3, [r1, #12]
 800e838:	e018      	b.n	800e86c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e83a:	4b3d      	ldr	r3, [pc, #244]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a3c      	ldr	r2, [pc, #240]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e846:	f7f7 fd83 	bl	8006350 <HAL_GetTick>
 800e84a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e84c:	e008      	b.n	800e860 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800e84e:	f7f7 fd7f 	bl	8006350 <HAL_GetTick>
 800e852:	4602      	mov	r2, r0
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	2b02      	cmp	r3, #2
 800e85a:	d901      	bls.n	800e860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800e85c:	2303      	movs	r3, #3
 800e85e:	e23d      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e860:	4b33      	ldr	r3, [pc, #204]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d1f0      	bne.n	800e84e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f003 0308 	and.w	r3, r3, #8
 800e874:	2b00      	cmp	r3, #0
 800e876:	d036      	beq.n	800e8e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d019      	beq.n	800e8b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e880:	4b2b      	ldr	r3, [pc, #172]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e884:	4a2a      	ldr	r2, [pc, #168]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e88c:	f7f7 fd60 	bl	8006350 <HAL_GetTick>
 800e890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e892:	e008      	b.n	800e8a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e894:	f7f7 fd5c 	bl	8006350 <HAL_GetTick>
 800e898:	4602      	mov	r2, r0
 800e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d901      	bls.n	800e8a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	e21a      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800e8a6:	4b22      	ldr	r3, [pc, #136]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8aa:	f003 0302 	and.w	r3, r3, #2
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d0f0      	beq.n	800e894 <HAL_RCC_OscConfig+0x45c>
 800e8b2:	e018      	b.n	800e8e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e8b4:	4b1e      	ldr	r3, [pc, #120]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e8b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8b8:	4a1d      	ldr	r2, [pc, #116]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e8ba:	f023 0301 	bic.w	r3, r3, #1
 800e8be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e8c0:	f7f7 fd46 	bl	8006350 <HAL_GetTick>
 800e8c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e8c6:	e008      	b.n	800e8da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e8c8:	f7f7 fd42 	bl	8006350 <HAL_GetTick>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	d901      	bls.n	800e8da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e8d6:	2303      	movs	r3, #3
 800e8d8:	e200      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e8da:	4b15      	ldr	r3, [pc, #84]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8de:	f003 0302 	and.w	r3, r3, #2
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1f0      	bne.n	800e8c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	f003 0320 	and.w	r3, r3, #32
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d039      	beq.n	800e966 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d01c      	beq.n	800e934 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e8fa:	4b0d      	ldr	r3, [pc, #52]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4a0c      	ldr	r2, [pc, #48]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e904:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e906:	f7f7 fd23 	bl	8006350 <HAL_GetTick>
 800e90a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e90c:	e008      	b.n	800e920 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e90e:	f7f7 fd1f 	bl	8006350 <HAL_GetTick>
 800e912:	4602      	mov	r2, r0
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	1ad3      	subs	r3, r2, r3
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d901      	bls.n	800e920 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e1dd      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e920:	4b03      	ldr	r3, [pc, #12]	; (800e930 <HAL_RCC_OscConfig+0x4f8>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d0f0      	beq.n	800e90e <HAL_RCC_OscConfig+0x4d6>
 800e92c:	e01b      	b.n	800e966 <HAL_RCC_OscConfig+0x52e>
 800e92e:	bf00      	nop
 800e930:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e934:	4b9b      	ldr	r3, [pc, #620]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a9a      	ldr	r2, [pc, #616]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e940:	f7f7 fd06 	bl	8006350 <HAL_GetTick>
 800e944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e946:	e008      	b.n	800e95a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e948:	f7f7 fd02 	bl	8006350 <HAL_GetTick>
 800e94c:	4602      	mov	r2, r0
 800e94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e950:	1ad3      	subs	r3, r2, r3
 800e952:	2b02      	cmp	r3, #2
 800e954:	d901      	bls.n	800e95a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e1c0      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e95a:	4b92      	ldr	r3, [pc, #584]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1f0      	bne.n	800e948 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f003 0304 	and.w	r3, r3, #4
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 8081 	beq.w	800ea76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e974:	4b8c      	ldr	r3, [pc, #560]	; (800eba8 <HAL_RCC_OscConfig+0x770>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a8b      	ldr	r2, [pc, #556]	; (800eba8 <HAL_RCC_OscConfig+0x770>)
 800e97a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e97e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e980:	f7f7 fce6 	bl	8006350 <HAL_GetTick>
 800e984:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e986:	e008      	b.n	800e99a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e988:	f7f7 fce2 	bl	8006350 <HAL_GetTick>
 800e98c:	4602      	mov	r2, r0
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	2b64      	cmp	r3, #100	; 0x64
 800e994:	d901      	bls.n	800e99a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e996:	2303      	movs	r3, #3
 800e998:	e1a0      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e99a:	4b83      	ldr	r3, [pc, #524]	; (800eba8 <HAL_RCC_OscConfig+0x770>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d0f0      	beq.n	800e988 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	2b01      	cmp	r3, #1
 800e9ac:	d106      	bne.n	800e9bc <HAL_RCC_OscConfig+0x584>
 800e9ae:	4b7d      	ldr	r3, [pc, #500]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9b2:	4a7c      	ldr	r2, [pc, #496]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9b4:	f043 0301 	orr.w	r3, r3, #1
 800e9b8:	6713      	str	r3, [r2, #112]	; 0x70
 800e9ba:	e02d      	b.n	800ea18 <HAL_RCC_OscConfig+0x5e0>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10c      	bne.n	800e9de <HAL_RCC_OscConfig+0x5a6>
 800e9c4:	4b77      	ldr	r3, [pc, #476]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c8:	4a76      	ldr	r2, [pc, #472]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9ca:	f023 0301 	bic.w	r3, r3, #1
 800e9ce:	6713      	str	r3, [r2, #112]	; 0x70
 800e9d0:	4b74      	ldr	r3, [pc, #464]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d4:	4a73      	ldr	r2, [pc, #460]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9d6:	f023 0304 	bic.w	r3, r3, #4
 800e9da:	6713      	str	r3, [r2, #112]	; 0x70
 800e9dc:	e01c      	b.n	800ea18 <HAL_RCC_OscConfig+0x5e0>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	2b05      	cmp	r3, #5
 800e9e4:	d10c      	bne.n	800ea00 <HAL_RCC_OscConfig+0x5c8>
 800e9e6:	4b6f      	ldr	r3, [pc, #444]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9ea:	4a6e      	ldr	r2, [pc, #440]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9ec:	f043 0304 	orr.w	r3, r3, #4
 800e9f0:	6713      	str	r3, [r2, #112]	; 0x70
 800e9f2:	4b6c      	ldr	r3, [pc, #432]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9f6:	4a6b      	ldr	r2, [pc, #428]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800e9f8:	f043 0301 	orr.w	r3, r3, #1
 800e9fc:	6713      	str	r3, [r2, #112]	; 0x70
 800e9fe:	e00b      	b.n	800ea18 <HAL_RCC_OscConfig+0x5e0>
 800ea00:	4b68      	ldr	r3, [pc, #416]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea04:	4a67      	ldr	r2, [pc, #412]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea06:	f023 0301 	bic.w	r3, r3, #1
 800ea0a:	6713      	str	r3, [r2, #112]	; 0x70
 800ea0c:	4b65      	ldr	r3, [pc, #404]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea10:	4a64      	ldr	r2, [pc, #400]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea12:	f023 0304 	bic.w	r3, r3, #4
 800ea16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d015      	beq.n	800ea4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea20:	f7f7 fc96 	bl	8006350 <HAL_GetTick>
 800ea24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea26:	e00a      	b.n	800ea3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea28:	f7f7 fc92 	bl	8006350 <HAL_GetTick>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d901      	bls.n	800ea3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ea3a:	2303      	movs	r3, #3
 800ea3c:	e14e      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ea3e:	4b59      	ldr	r3, [pc, #356]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea42:	f003 0302 	and.w	r3, r3, #2
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0ee      	beq.n	800ea28 <HAL_RCC_OscConfig+0x5f0>
 800ea4a:	e014      	b.n	800ea76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea4c:	f7f7 fc80 	bl	8006350 <HAL_GetTick>
 800ea50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea52:	e00a      	b.n	800ea6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ea54:	f7f7 fc7c 	bl	8006350 <HAL_GetTick>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d901      	bls.n	800ea6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ea66:	2303      	movs	r3, #3
 800ea68:	e138      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ea6a:	4b4e      	ldr	r3, [pc, #312]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6e:	f003 0302 	and.w	r3, r3, #2
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d1ee      	bne.n	800ea54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f000 812d 	beq.w	800ecda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ea80:	4b48      	ldr	r3, [pc, #288]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea82:	691b      	ldr	r3, [r3, #16]
 800ea84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea88:	2b18      	cmp	r3, #24
 800ea8a:	f000 80bd 	beq.w	800ec08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	f040 809e 	bne.w	800ebd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea98:	4b42      	ldr	r3, [pc, #264]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a41      	ldr	r2, [pc, #260]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800ea9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eaa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaa4:	f7f7 fc54 	bl	8006350 <HAL_GetTick>
 800eaa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eaaa:	e008      	b.n	800eabe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800eaac:	f7f7 fc50 	bl	8006350 <HAL_GetTick>
 800eab0:	4602      	mov	r2, r0
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d901      	bls.n	800eabe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800eaba:	2303      	movs	r3, #3
 800eabc:	e10e      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800eabe:	4b39      	ldr	r3, [pc, #228]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1f0      	bne.n	800eaac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eaca:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eacc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eace:	4b37      	ldr	r3, [pc, #220]	; (800ebac <HAL_RCC_OscConfig+0x774>)
 800ead0:	4013      	ands	r3, r2
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800eada:	0112      	lsls	r2, r2, #4
 800eadc:	430a      	orrs	r2, r1
 800eade:	4931      	ldr	r1, [pc, #196]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eae0:	4313      	orrs	r3, r2
 800eae2:	628b      	str	r3, [r1, #40]	; 0x28
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae8:	3b01      	subs	r3, #1
 800eaea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	025b      	lsls	r3, r3, #9
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	431a      	orrs	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafe:	3b01      	subs	r3, #1
 800eb00:	041b      	lsls	r3, r3, #16
 800eb02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800eb06:	431a      	orrs	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	061b      	lsls	r3, r3, #24
 800eb10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eb14:	4923      	ldr	r1, [pc, #140]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb16:	4313      	orrs	r3, r2
 800eb18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800eb1a:	4b22      	ldr	r3, [pc, #136]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb1e:	4a21      	ldr	r2, [pc, #132]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb20:	f023 0301 	bic.w	r3, r3, #1
 800eb24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800eb26:	4b1f      	ldr	r3, [pc, #124]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb2a:	4b21      	ldr	r3, [pc, #132]	; (800ebb0 <HAL_RCC_OscConfig+0x778>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800eb32:	00d2      	lsls	r2, r2, #3
 800eb34:	491b      	ldr	r1, [pc, #108]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb36:	4313      	orrs	r3, r2
 800eb38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800eb3a:	4b1a      	ldr	r3, [pc, #104]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3e:	f023 020c 	bic.w	r2, r3, #12
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb46:	4917      	ldr	r1, [pc, #92]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800eb4c:	4b15      	ldr	r3, [pc, #84]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb50:	f023 0202 	bic.w	r2, r3, #2
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb58:	4912      	ldr	r1, [pc, #72]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800eb5e:	4b11      	ldr	r3, [pc, #68]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb62:	4a10      	ldr	r2, [pc, #64]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb6a:	4b0e      	ldr	r3, [pc, #56]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb6e:	4a0d      	ldr	r2, [pc, #52]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800eb76:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	4a0a      	ldr	r2, [pc, #40]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800eb82:	4b08      	ldr	r3, [pc, #32]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb86:	4a07      	ldr	r2, [pc, #28]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb88:	f043 0301 	orr.w	r3, r3, #1
 800eb8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eb8e:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a04      	ldr	r2, [pc, #16]	; (800eba4 <HAL_RCC_OscConfig+0x76c>)
 800eb94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800eb98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb9a:	f7f7 fbd9 	bl	8006350 <HAL_GetTick>
 800eb9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800eba0:	e011      	b.n	800ebc6 <HAL_RCC_OscConfig+0x78e>
 800eba2:	bf00      	nop
 800eba4:	58024400 	.word	0x58024400
 800eba8:	58024800 	.word	0x58024800
 800ebac:	fffffc0c 	.word	0xfffffc0c
 800ebb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebb4:	f7f7 fbcc 	bl	8006350 <HAL_GetTick>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	d901      	bls.n	800ebc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ebc2:	2303      	movs	r3, #3
 800ebc4:	e08a      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ebc6:	4b47      	ldr	r3, [pc, #284]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d0f0      	beq.n	800ebb4 <HAL_RCC_OscConfig+0x77c>
 800ebd2:	e082      	b.n	800ecda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ebd4:	4b43      	ldr	r3, [pc, #268]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	4a42      	ldr	r2, [pc, #264]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ebda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ebde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebe0:	f7f7 fbb6 	bl	8006350 <HAL_GetTick>
 800ebe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebe6:	e008      	b.n	800ebfa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ebe8:	f7f7 fbb2 	bl	8006350 <HAL_GetTick>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	2b02      	cmp	r3, #2
 800ebf4:	d901      	bls.n	800ebfa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e070      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebfa:	4b3a      	ldr	r3, [pc, #232]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d1f0      	bne.n	800ebe8 <HAL_RCC_OscConfig+0x7b0>
 800ec06:	e068      	b.n	800ecda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ec08:	4b36      	ldr	r3, [pc, #216]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ec0e:	4b35      	ldr	r3, [pc, #212]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ec10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d031      	beq.n	800ec80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	f003 0203 	and.w	r2, r3, #3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d12a      	bne.n	800ec80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec2a:	693b      	ldr	r3, [r7, #16]
 800ec2c:	091b      	lsrs	r3, r3, #4
 800ec2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d122      	bne.n	800ec80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d11a      	bne.n	800ec80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	0a5b      	lsrs	r3, r3, #9
 800ec4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d111      	bne.n	800ec80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	0c1b      	lsrs	r3, r3, #16
 800ec60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d108      	bne.n	800ec80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	0e1b      	lsrs	r3, r3, #24
 800ec72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d001      	beq.n	800ec84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ec80:	2301      	movs	r3, #1
 800ec82:	e02b      	b.n	800ecdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ec84:	4b17      	ldr	r3, [pc, #92]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ec86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec88:	08db      	lsrs	r3, r3, #3
 800ec8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ec8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec94:	693a      	ldr	r2, [r7, #16]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d01f      	beq.n	800ecda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ec9a:	4b12      	ldr	r3, [pc, #72]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ec9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec9e:	4a11      	ldr	r2, [pc, #68]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800eca0:	f023 0301 	bic.w	r3, r3, #1
 800eca4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800eca6:	f7f7 fb53 	bl	8006350 <HAL_GetTick>
 800ecaa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ecac:	bf00      	nop
 800ecae:	f7f7 fb4f 	bl	8006350 <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d0f9      	beq.n	800ecae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ecba:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ecbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecbe:	4b0a      	ldr	r3, [pc, #40]	; (800ece8 <HAL_RCC_OscConfig+0x8b0>)
 800ecc0:	4013      	ands	r3, r2
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ecc6:	00d2      	lsls	r2, r2, #3
 800ecc8:	4906      	ldr	r1, [pc, #24]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ecca:	4313      	orrs	r3, r2
 800eccc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ecd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd2:	4a04      	ldr	r2, [pc, #16]	; (800ece4 <HAL_RCC_OscConfig+0x8ac>)
 800ecd4:	f043 0301 	orr.w	r3, r3, #1
 800ecd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3730      	adds	r7, #48	; 0x30
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	58024400 	.word	0x58024400
 800ece8:	ffff0007 	.word	0xffff0007

0800ecec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d101      	bne.n	800ed00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e19c      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ed00:	4b8a      	ldr	r3, [pc, #552]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 030f 	and.w	r3, r3, #15
 800ed08:	683a      	ldr	r2, [r7, #0]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d910      	bls.n	800ed30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ed0e:	4b87      	ldr	r3, [pc, #540]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f023 020f 	bic.w	r2, r3, #15
 800ed16:	4985      	ldr	r1, [pc, #532]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ed1e:	4b83      	ldr	r3, [pc, #524]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f003 030f 	and.w	r3, r3, #15
 800ed26:	683a      	ldr	r2, [r7, #0]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d001      	beq.n	800ed30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e184      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 0304 	and.w	r3, r3, #4
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d010      	beq.n	800ed5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	691a      	ldr	r2, [r3, #16]
 800ed40:	4b7b      	ldr	r3, [pc, #492]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed42:	699b      	ldr	r3, [r3, #24]
 800ed44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d908      	bls.n	800ed5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ed4c:	4b78      	ldr	r3, [pc, #480]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	4975      	ldr	r1, [pc, #468]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 0308 	and.w	r3, r3, #8
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d010      	beq.n	800ed8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	695a      	ldr	r2, [r3, #20]
 800ed6e:	4b70      	ldr	r3, [pc, #448]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed70:	69db      	ldr	r3, [r3, #28]
 800ed72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d908      	bls.n	800ed8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ed7a:	4b6d      	ldr	r3, [pc, #436]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed7c:	69db      	ldr	r3, [r3, #28]
 800ed7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	695b      	ldr	r3, [r3, #20]
 800ed86:	496a      	ldr	r1, [pc, #424]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f003 0310 	and.w	r3, r3, #16
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d010      	beq.n	800edba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	699a      	ldr	r2, [r3, #24]
 800ed9c:	4b64      	ldr	r3, [pc, #400]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d908      	bls.n	800edba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eda8:	4b61      	ldr	r3, [pc, #388]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800edaa:	69db      	ldr	r3, [r3, #28]
 800edac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	699b      	ldr	r3, [r3, #24]
 800edb4:	495e      	ldr	r1, [pc, #376]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800edb6:	4313      	orrs	r3, r2
 800edb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f003 0320 	and.w	r3, r3, #32
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d010      	beq.n	800ede8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	69da      	ldr	r2, [r3, #28]
 800edca:	4b59      	ldr	r3, [pc, #356]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800edcc:	6a1b      	ldr	r3, [r3, #32]
 800edce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d908      	bls.n	800ede8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800edd6:	4b56      	ldr	r3, [pc, #344]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800edd8:	6a1b      	ldr	r3, [r3, #32]
 800edda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	69db      	ldr	r3, [r3, #28]
 800ede2:	4953      	ldr	r1, [pc, #332]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ede4:	4313      	orrs	r3, r2
 800ede6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f003 0302 	and.w	r3, r3, #2
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d010      	beq.n	800ee16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	68da      	ldr	r2, [r3, #12]
 800edf8:	4b4d      	ldr	r3, [pc, #308]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	f003 030f 	and.w	r3, r3, #15
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d908      	bls.n	800ee16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee04:	4b4a      	ldr	r3, [pc, #296]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	f023 020f 	bic.w	r2, r3, #15
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	4947      	ldr	r1, [pc, #284]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee12:	4313      	orrs	r3, r2
 800ee14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f003 0301 	and.w	r3, r3, #1
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d055      	beq.n	800eece <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ee22:	4b43      	ldr	r3, [pc, #268]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	4940      	ldr	r1, [pc, #256]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee30:	4313      	orrs	r3, r2
 800ee32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d107      	bne.n	800ee4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ee3c:	4b3c      	ldr	r3, [pc, #240]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d121      	bne.n	800ee8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e0f6      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	2b03      	cmp	r3, #3
 800ee52:	d107      	bne.n	800ee64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ee54:	4b36      	ldr	r3, [pc, #216]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d115      	bne.n	800ee8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	e0ea      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d107      	bne.n	800ee7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ee6c:	4b30      	ldr	r3, [pc, #192]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d109      	bne.n	800ee8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e0de      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ee7c:	4b2c      	ldr	r3, [pc, #176]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d101      	bne.n	800ee8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e0d6      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ee8c:	4b28      	ldr	r3, [pc, #160]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	f023 0207 	bic.w	r2, r3, #7
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	4925      	ldr	r1, [pc, #148]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800ee9a:	4313      	orrs	r3, r2
 800ee9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee9e:	f7f7 fa57 	bl	8006350 <HAL_GetTick>
 800eea2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eea4:	e00a      	b.n	800eebc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eea6:	f7f7 fa53 	bl	8006350 <HAL_GetTick>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d901      	bls.n	800eebc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	e0be      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800eebc:	4b1c      	ldr	r3, [pc, #112]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800eebe:	691b      	ldr	r3, [r3, #16]
 800eec0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	00db      	lsls	r3, r3, #3
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d1eb      	bne.n	800eea6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f003 0302 	and.w	r3, r3, #2
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d010      	beq.n	800eefc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68da      	ldr	r2, [r3, #12]
 800eede:	4b14      	ldr	r3, [pc, #80]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800eee0:	699b      	ldr	r3, [r3, #24]
 800eee2:	f003 030f 	and.w	r3, r3, #15
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d208      	bcs.n	800eefc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eeea:	4b11      	ldr	r3, [pc, #68]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	f023 020f 	bic.w	r2, r3, #15
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	490e      	ldr	r1, [pc, #56]	; (800ef30 <HAL_RCC_ClockConfig+0x244>)
 800eef8:	4313      	orrs	r3, r2
 800eefa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800eefc:	4b0b      	ldr	r3, [pc, #44]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f003 030f 	and.w	r3, r3, #15
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d214      	bcs.n	800ef34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef0a:	4b08      	ldr	r3, [pc, #32]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f023 020f 	bic.w	r2, r3, #15
 800ef12:	4906      	ldr	r1, [pc, #24]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	4313      	orrs	r3, r2
 800ef18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef1a:	4b04      	ldr	r3, [pc, #16]	; (800ef2c <HAL_RCC_ClockConfig+0x240>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f003 030f 	and.w	r3, r3, #15
 800ef22:	683a      	ldr	r2, [r7, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d005      	beq.n	800ef34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ef28:	2301      	movs	r3, #1
 800ef2a:	e086      	b.n	800f03a <HAL_RCC_ClockConfig+0x34e>
 800ef2c:	52002000 	.word	0x52002000
 800ef30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f003 0304 	and.w	r3, r3, #4
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d010      	beq.n	800ef62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	691a      	ldr	r2, [r3, #16]
 800ef44:	4b3f      	ldr	r3, [pc, #252]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d208      	bcs.n	800ef62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ef50:	4b3c      	ldr	r3, [pc, #240]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef52:	699b      	ldr	r3, [r3, #24]
 800ef54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	691b      	ldr	r3, [r3, #16]
 800ef5c:	4939      	ldr	r1, [pc, #228]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 0308 	and.w	r3, r3, #8
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d010      	beq.n	800ef90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	695a      	ldr	r2, [r3, #20]
 800ef72:	4b34      	ldr	r3, [pc, #208]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef74:	69db      	ldr	r3, [r3, #28]
 800ef76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d208      	bcs.n	800ef90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef7e:	4b31      	ldr	r3, [pc, #196]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef80:	69db      	ldr	r3, [r3, #28]
 800ef82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	492e      	ldr	r1, [pc, #184]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f003 0310 	and.w	r3, r3, #16
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d010      	beq.n	800efbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	699a      	ldr	r2, [r3, #24]
 800efa0:	4b28      	ldr	r3, [pc, #160]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efa2:	69db      	ldr	r3, [r3, #28]
 800efa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d208      	bcs.n	800efbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800efac:	4b25      	ldr	r3, [pc, #148]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	4922      	ldr	r1, [pc, #136]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efba:	4313      	orrs	r3, r2
 800efbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f003 0320 	and.w	r3, r3, #32
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d010      	beq.n	800efec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69da      	ldr	r2, [r3, #28]
 800efce:	4b1d      	ldr	r3, [pc, #116]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d208      	bcs.n	800efec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800efda:	4b1a      	ldr	r3, [pc, #104]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	69db      	ldr	r3, [r3, #28]
 800efe6:	4917      	ldr	r1, [pc, #92]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800efe8:	4313      	orrs	r3, r2
 800efea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800efec:	f000 f834 	bl	800f058 <HAL_RCC_GetSysClockFreq>
 800eff0:	4602      	mov	r2, r0
 800eff2:	4b14      	ldr	r3, [pc, #80]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	0a1b      	lsrs	r3, r3, #8
 800eff8:	f003 030f 	and.w	r3, r3, #15
 800effc:	4912      	ldr	r1, [pc, #72]	; (800f048 <HAL_RCC_ClockConfig+0x35c>)
 800effe:	5ccb      	ldrb	r3, [r1, r3]
 800f000:	f003 031f 	and.w	r3, r3, #31
 800f004:	fa22 f303 	lsr.w	r3, r2, r3
 800f008:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f00a:	4b0e      	ldr	r3, [pc, #56]	; (800f044 <HAL_RCC_ClockConfig+0x358>)
 800f00c:	699b      	ldr	r3, [r3, #24]
 800f00e:	f003 030f 	and.w	r3, r3, #15
 800f012:	4a0d      	ldr	r2, [pc, #52]	; (800f048 <HAL_RCC_ClockConfig+0x35c>)
 800f014:	5cd3      	ldrb	r3, [r2, r3]
 800f016:	f003 031f 	and.w	r3, r3, #31
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	fa22 f303 	lsr.w	r3, r2, r3
 800f020:	4a0a      	ldr	r2, [pc, #40]	; (800f04c <HAL_RCC_ClockConfig+0x360>)
 800f022:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f024:	4a0a      	ldr	r2, [pc, #40]	; (800f050 <HAL_RCC_ClockConfig+0x364>)
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f02a:	4b0a      	ldr	r3, [pc, #40]	; (800f054 <HAL_RCC_ClockConfig+0x368>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7f5 fbe4 	bl	80047fc <HAL_InitTick>
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f038:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	58024400 	.word	0x58024400
 800f048:	0801b9b4 	.word	0x0801b9b4
 800f04c:	240000c8 	.word	0x240000c8
 800f050:	240000c4 	.word	0x240000c4
 800f054:	240000cc 	.word	0x240000cc

0800f058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f058:	b480      	push	{r7}
 800f05a:	b089      	sub	sp, #36	; 0x24
 800f05c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f05e:	4bb3      	ldr	r3, [pc, #716]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f066:	2b18      	cmp	r3, #24
 800f068:	f200 8155 	bhi.w	800f316 <HAL_RCC_GetSysClockFreq+0x2be>
 800f06c:	a201      	add	r2, pc, #4	; (adr r2, 800f074 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f072:	bf00      	nop
 800f074:	0800f0d9 	.word	0x0800f0d9
 800f078:	0800f317 	.word	0x0800f317
 800f07c:	0800f317 	.word	0x0800f317
 800f080:	0800f317 	.word	0x0800f317
 800f084:	0800f317 	.word	0x0800f317
 800f088:	0800f317 	.word	0x0800f317
 800f08c:	0800f317 	.word	0x0800f317
 800f090:	0800f317 	.word	0x0800f317
 800f094:	0800f0ff 	.word	0x0800f0ff
 800f098:	0800f317 	.word	0x0800f317
 800f09c:	0800f317 	.word	0x0800f317
 800f0a0:	0800f317 	.word	0x0800f317
 800f0a4:	0800f317 	.word	0x0800f317
 800f0a8:	0800f317 	.word	0x0800f317
 800f0ac:	0800f317 	.word	0x0800f317
 800f0b0:	0800f317 	.word	0x0800f317
 800f0b4:	0800f105 	.word	0x0800f105
 800f0b8:	0800f317 	.word	0x0800f317
 800f0bc:	0800f317 	.word	0x0800f317
 800f0c0:	0800f317 	.word	0x0800f317
 800f0c4:	0800f317 	.word	0x0800f317
 800f0c8:	0800f317 	.word	0x0800f317
 800f0cc:	0800f317 	.word	0x0800f317
 800f0d0:	0800f317 	.word	0x0800f317
 800f0d4:	0800f10b 	.word	0x0800f10b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0d8:	4b94      	ldr	r3, [pc, #592]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0320 	and.w	r3, r3, #32
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d009      	beq.n	800f0f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0e4:	4b91      	ldr	r3, [pc, #580]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	08db      	lsrs	r3, r3, #3
 800f0ea:	f003 0303 	and.w	r3, r3, #3
 800f0ee:	4a90      	ldr	r2, [pc, #576]	; (800f330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f0f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f0f6:	e111      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f0f8:	4b8d      	ldr	r3, [pc, #564]	; (800f330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f0fa:	61bb      	str	r3, [r7, #24]
      break;
 800f0fc:	e10e      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f0fe:	4b8d      	ldr	r3, [pc, #564]	; (800f334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f100:	61bb      	str	r3, [r7, #24]
      break;
 800f102:	e10b      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f104:	4b8c      	ldr	r3, [pc, #560]	; (800f338 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f106:	61bb      	str	r3, [r7, #24]
      break;
 800f108:	e108      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f10a:	4b88      	ldr	r3, [pc, #544]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10e:	f003 0303 	and.w	r3, r3, #3
 800f112:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f114:	4b85      	ldr	r3, [pc, #532]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f118:	091b      	lsrs	r3, r3, #4
 800f11a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f11e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f120:	4b82      	ldr	r3, [pc, #520]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f124:	f003 0301 	and.w	r3, r3, #1
 800f128:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f12a:	4b80      	ldr	r3, [pc, #512]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f12e:	08db      	lsrs	r3, r3, #3
 800f130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f134:	68fa      	ldr	r2, [r7, #12]
 800f136:	fb02 f303 	mul.w	r3, r2, r3
 800f13a:	ee07 3a90 	vmov	s15, r3
 800f13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f142:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 80e1 	beq.w	800f310 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2b02      	cmp	r3, #2
 800f152:	f000 8083 	beq.w	800f25c <HAL_RCC_GetSysClockFreq+0x204>
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	f200 80a1 	bhi.w	800f2a0 <HAL_RCC_GetSysClockFreq+0x248>
 800f15e:	697b      	ldr	r3, [r7, #20]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d003      	beq.n	800f16c <HAL_RCC_GetSysClockFreq+0x114>
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d056      	beq.n	800f218 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f16a:	e099      	b.n	800f2a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f16c:	4b6f      	ldr	r3, [pc, #444]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	f003 0320 	and.w	r3, r3, #32
 800f174:	2b00      	cmp	r3, #0
 800f176:	d02d      	beq.n	800f1d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f178:	4b6c      	ldr	r3, [pc, #432]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	08db      	lsrs	r3, r3, #3
 800f17e:	f003 0303 	and.w	r3, r3, #3
 800f182:	4a6b      	ldr	r2, [pc, #428]	; (800f330 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f184:	fa22 f303 	lsr.w	r3, r2, r3
 800f188:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	ee07 3a90 	vmov	s15, r3
 800f190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	ee07 3a90 	vmov	s15, r3
 800f19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f19e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1a2:	4b62      	ldr	r3, [pc, #392]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1aa:	ee07 3a90 	vmov	s15, r3
 800f1ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f1d2:	e087      	b.n	800f2e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	ee07 3a90 	vmov	s15, r3
 800f1da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1de:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f340 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1e6:	4b51      	ldr	r3, [pc, #324]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ee:	ee07 3a90 	vmov	s15, r3
 800f1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800f1fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f216:	e065      	b.n	800f2e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	ee07 3a90 	vmov	s15, r3
 800f21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f222:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f344 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f22a:	4b40      	ldr	r3, [pc, #256]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f22c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f232:	ee07 3a90 	vmov	s15, r3
 800f236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f23a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f23e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f24a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f25a:	e043      	b.n	800f2e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	ee07 3a90 	vmov	s15, r3
 800f262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f266:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f348 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f26e:	4b2f      	ldr	r3, [pc, #188]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f276:	ee07 3a90 	vmov	s15, r3
 800f27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f27e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f282:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f29a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f29e:	e021      	b.n	800f2e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	ee07 3a90 	vmov	s15, r3
 800f2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f344 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2b2:	4b1e      	ldr	r3, [pc, #120]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2ba:	ee07 3a90 	vmov	s15, r3
 800f2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f33c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f2e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f2e4:	4b11      	ldr	r3, [pc, #68]	; (800f32c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e8:	0a5b      	lsrs	r3, r3, #9
 800f2ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	ee07 3a90 	vmov	s15, r3
 800f2f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f2fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f308:	ee17 3a90 	vmov	r3, s15
 800f30c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f30e:	e005      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f310:	2300      	movs	r3, #0
 800f312:	61bb      	str	r3, [r7, #24]
      break;
 800f314:	e002      	b.n	800f31c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f316:	4b07      	ldr	r3, [pc, #28]	; (800f334 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f318:	61bb      	str	r3, [r7, #24]
      break;
 800f31a:	bf00      	nop
  }

  return sysclockfreq;
 800f31c:	69bb      	ldr	r3, [r7, #24]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3724      	adds	r7, #36	; 0x24
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	58024400 	.word	0x58024400
 800f330:	03d09000 	.word	0x03d09000
 800f334:	003d0900 	.word	0x003d0900
 800f338:	017d7840 	.word	0x017d7840
 800f33c:	46000000 	.word	0x46000000
 800f340:	4c742400 	.word	0x4c742400
 800f344:	4a742400 	.word	0x4a742400
 800f348:	4bbebc20 	.word	0x4bbebc20

0800f34c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f352:	f7ff fe81 	bl	800f058 <HAL_RCC_GetSysClockFreq>
 800f356:	4602      	mov	r2, r0
 800f358:	4b10      	ldr	r3, [pc, #64]	; (800f39c <HAL_RCC_GetHCLKFreq+0x50>)
 800f35a:	699b      	ldr	r3, [r3, #24]
 800f35c:	0a1b      	lsrs	r3, r3, #8
 800f35e:	f003 030f 	and.w	r3, r3, #15
 800f362:	490f      	ldr	r1, [pc, #60]	; (800f3a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f364:	5ccb      	ldrb	r3, [r1, r3]
 800f366:	f003 031f 	and.w	r3, r3, #31
 800f36a:	fa22 f303 	lsr.w	r3, r2, r3
 800f36e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f370:	4b0a      	ldr	r3, [pc, #40]	; (800f39c <HAL_RCC_GetHCLKFreq+0x50>)
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	f003 030f 	and.w	r3, r3, #15
 800f378:	4a09      	ldr	r2, [pc, #36]	; (800f3a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f37a:	5cd3      	ldrb	r3, [r2, r3]
 800f37c:	f003 031f 	and.w	r3, r3, #31
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	fa22 f303 	lsr.w	r3, r2, r3
 800f386:	4a07      	ldr	r2, [pc, #28]	; (800f3a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f388:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f38a:	4a07      	ldr	r2, [pc, #28]	; (800f3a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f390:	4b04      	ldr	r3, [pc, #16]	; (800f3a4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f392:	681b      	ldr	r3, [r3, #0]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3708      	adds	r7, #8
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	58024400 	.word	0x58024400
 800f3a0:	0801b9b4 	.word	0x0801b9b4
 800f3a4:	240000c8 	.word	0x240000c8
 800f3a8:	240000c4 	.word	0x240000c4

0800f3ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f3b0:	f7ff ffcc 	bl	800f34c <HAL_RCC_GetHCLKFreq>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	4b06      	ldr	r3, [pc, #24]	; (800f3d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3b8:	69db      	ldr	r3, [r3, #28]
 800f3ba:	091b      	lsrs	r3, r3, #4
 800f3bc:	f003 0307 	and.w	r3, r3, #7
 800f3c0:	4904      	ldr	r1, [pc, #16]	; (800f3d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f3c2:	5ccb      	ldrb	r3, [r1, r3]
 800f3c4:	f003 031f 	and.w	r3, r3, #31
 800f3c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	58024400 	.word	0x58024400
 800f3d4:	0801b9b4 	.word	0x0801b9b4

0800f3d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f3dc:	f7ff ffb6 	bl	800f34c <HAL_RCC_GetHCLKFreq>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	4b06      	ldr	r3, [pc, #24]	; (800f3fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800f3e4:	69db      	ldr	r3, [r3, #28]
 800f3e6:	0a1b      	lsrs	r3, r3, #8
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	4904      	ldr	r1, [pc, #16]	; (800f400 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f3ee:	5ccb      	ldrb	r3, [r1, r3]
 800f3f0:	f003 031f 	and.w	r3, r3, #31
 800f3f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	58024400 	.word	0x58024400
 800f400:	0801b9b4 	.word	0x0801b9b4

0800f404 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	223f      	movs	r2, #63	; 0x3f
 800f412:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f414:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	f003 0207 	and.w	r2, r3, #7
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800f420:	4b17      	ldr	r3, [pc, #92]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800f42c:	4b14      	ldr	r3, [pc, #80]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f42e:	699b      	ldr	r3, [r3, #24]
 800f430:	f003 020f 	and.w	r2, r3, #15
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800f438:	4b11      	ldr	r3, [pc, #68]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800f444:	4b0e      	ldr	r3, [pc, #56]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f446:	69db      	ldr	r3, [r3, #28]
 800f448:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f450:	4b0b      	ldr	r3, [pc, #44]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f452:	69db      	ldr	r3, [r3, #28]
 800f454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f45c:	4b08      	ldr	r3, [pc, #32]	; (800f480 <HAL_RCC_GetClockConfig+0x7c>)
 800f45e:	6a1b      	ldr	r3, [r3, #32]
 800f460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f468:	4b06      	ldr	r3, [pc, #24]	; (800f484 <HAL_RCC_GetClockConfig+0x80>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f003 020f 	and.w	r2, r3, #15
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	601a      	str	r2, [r3, #0]
}
 800f474:	bf00      	nop
 800f476:	370c      	adds	r7, #12
 800f478:	46bd      	mov	sp, r7
 800f47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47e:	4770      	bx	lr
 800f480:	58024400 	.word	0x58024400
 800f484:	52002000 	.word	0x52002000

0800f488 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f48c:	b0ca      	sub	sp, #296	; 0x128
 800f48e:	af00      	add	r7, sp, #0
 800f490:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f494:	2300      	movs	r3, #0
 800f496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f49a:	2300      	movs	r3, #0
 800f49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800f4ac:	2500      	movs	r5, #0
 800f4ae:	ea54 0305 	orrs.w	r3, r4, r5
 800f4b2:	d049      	beq.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f4be:	d02f      	beq.n	800f520 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f4c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f4c4:	d828      	bhi.n	800f518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f4c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4ca:	d01a      	beq.n	800f502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f4cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4d0:	d822      	bhi.n	800f518 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f4d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4da:	d007      	beq.n	800f4ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f4dc:	e01c      	b.n	800f518 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4de:	4bb8      	ldr	r3, [pc, #736]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e2:	4ab7      	ldr	r2, [pc, #732]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f4e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f4ea:	e01a      	b.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	2102      	movs	r1, #2
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f002 fb61 	bl	8011bbc <RCCEx_PLL2_Config>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f500:	e00f      	b.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f506:	3328      	adds	r3, #40	; 0x28
 800f508:	2102      	movs	r1, #2
 800f50a:	4618      	mov	r0, r3
 800f50c:	f002 fc08 	bl	8011d20 <RCCEx_PLL3_Config>
 800f510:	4603      	mov	r3, r0
 800f512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f516:	e004      	b.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f518:	2301      	movs	r3, #1
 800f51a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f51e:	e000      	b.n	800f522 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f526:	2b00      	cmp	r3, #0
 800f528:	d10a      	bne.n	800f540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f52a:	4ba5      	ldr	r3, [pc, #660]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f52e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800f532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f538:	4aa1      	ldr	r2, [pc, #644]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f53a:	430b      	orrs	r3, r1
 800f53c:	6513      	str	r3, [r2, #80]	; 0x50
 800f53e:	e003      	b.n	800f548 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f544:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f550:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800f554:	f04f 0900 	mov.w	r9, #0
 800f558:	ea58 0309 	orrs.w	r3, r8, r9
 800f55c:	d047      	beq.n	800f5ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800f55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f564:	2b04      	cmp	r3, #4
 800f566:	d82a      	bhi.n	800f5be <HAL_RCCEx_PeriphCLKConfig+0x136>
 800f568:	a201      	add	r2, pc, #4	; (adr r2, 800f570 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800f56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f56e:	bf00      	nop
 800f570:	0800f585 	.word	0x0800f585
 800f574:	0800f593 	.word	0x0800f593
 800f578:	0800f5a9 	.word	0x0800f5a9
 800f57c:	0800f5c7 	.word	0x0800f5c7
 800f580:	0800f5c7 	.word	0x0800f5c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f584:	4b8e      	ldr	r3, [pc, #568]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f588:	4a8d      	ldr	r2, [pc, #564]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f58a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f58e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f590:	e01a      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f596:	3308      	adds	r3, #8
 800f598:	2100      	movs	r1, #0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f002 fb0e 	bl	8011bbc <RCCEx_PLL2_Config>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f5a6:	e00f      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ac:	3328      	adds	r3, #40	; 0x28
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f002 fbb5 	bl	8011d20 <RCCEx_PLL3_Config>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f5bc:	e004      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5be:	2301      	movs	r3, #1
 800f5c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5c4:	e000      	b.n	800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800f5c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d10a      	bne.n	800f5e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f5d0:	4b7b      	ldr	r3, [pc, #492]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5d4:	f023 0107 	bic.w	r1, r3, #7
 800f5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5de:	4a78      	ldr	r2, [pc, #480]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f5e0:	430b      	orrs	r3, r1
 800f5e2:	6513      	str	r3, [r2, #80]	; 0x50
 800f5e4:	e003      	b.n	800f5ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800f5fa:	f04f 0b00 	mov.w	fp, #0
 800f5fe:	ea5a 030b 	orrs.w	r3, sl, fp
 800f602:	d04c      	beq.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800f604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f60e:	d030      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800f610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f614:	d829      	bhi.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f616:	2bc0      	cmp	r3, #192	; 0xc0
 800f618:	d02d      	beq.n	800f676 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800f61a:	2bc0      	cmp	r3, #192	; 0xc0
 800f61c:	d825      	bhi.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f61e:	2b80      	cmp	r3, #128	; 0x80
 800f620:	d018      	beq.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800f622:	2b80      	cmp	r3, #128	; 0x80
 800f624:	d821      	bhi.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800f626:	2b00      	cmp	r3, #0
 800f628:	d002      	beq.n	800f630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800f62a:	2b40      	cmp	r3, #64	; 0x40
 800f62c:	d007      	beq.n	800f63e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800f62e:	e01c      	b.n	800f66a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f630:	4b63      	ldr	r3, [pc, #396]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f634:	4a62      	ldr	r2, [pc, #392]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f63a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f63c:	e01c      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f642:	3308      	adds	r3, #8
 800f644:	2100      	movs	r1, #0
 800f646:	4618      	mov	r0, r3
 800f648:	f002 fab8 	bl	8011bbc <RCCEx_PLL2_Config>
 800f64c:	4603      	mov	r3, r0
 800f64e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f652:	e011      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f658:	3328      	adds	r3, #40	; 0x28
 800f65a:	2100      	movs	r1, #0
 800f65c:	4618      	mov	r0, r3
 800f65e:	f002 fb5f 	bl	8011d20 <RCCEx_PLL3_Config>
 800f662:	4603      	mov	r3, r0
 800f664:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800f668:	e006      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f66a:	2301      	movs	r3, #1
 800f66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f670:	e002      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f672:	bf00      	nop
 800f674:	e000      	b.n	800f678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800f676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f678:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10a      	bne.n	800f696 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f680:	4b4f      	ldr	r3, [pc, #316]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f684:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800f688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f68c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f68e:	4a4c      	ldr	r2, [pc, #304]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f690:	430b      	orrs	r3, r1
 800f692:	6513      	str	r3, [r2, #80]	; 0x50
 800f694:	e003      	b.n	800f69e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f696:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f69a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800f6aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800f6b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	d053      	beq.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f6c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f6ca:	d035      	beq.n	800f738 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800f6cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f6d0:	d82e      	bhi.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f6d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f6d6:	d031      	beq.n	800f73c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800f6d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f6dc:	d828      	bhi.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f6de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6e2:	d01a      	beq.n	800f71a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f6e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f6e8:	d822      	bhi.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d003      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800f6ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6f2:	d007      	beq.n	800f704 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800f6f4:	e01c      	b.n	800f730 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6f6:	4b32      	ldr	r3, [pc, #200]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6fa:	4a31      	ldr	r2, [pc, #196]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f6fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f700:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f702:	e01c      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f708:	3308      	adds	r3, #8
 800f70a:	2100      	movs	r1, #0
 800f70c:	4618      	mov	r0, r3
 800f70e:	f002 fa55 	bl	8011bbc <RCCEx_PLL2_Config>
 800f712:	4603      	mov	r3, r0
 800f714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f718:	e011      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f71e:	3328      	adds	r3, #40	; 0x28
 800f720:	2100      	movs	r1, #0
 800f722:	4618      	mov	r0, r3
 800f724:	f002 fafc 	bl	8011d20 <RCCEx_PLL3_Config>
 800f728:	4603      	mov	r3, r0
 800f72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f72e:	e006      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f736:	e002      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f738:	bf00      	nop
 800f73a:	e000      	b.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800f73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f73e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10b      	bne.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f746:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f74a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800f74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f756:	4a1a      	ldr	r2, [pc, #104]	; (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f758:	430b      	orrs	r3, r1
 800f75a:	6593      	str	r3, [r2, #88]	; 0x58
 800f75c:	e003      	b.n	800f766 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f75e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f762:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800f772:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f776:	2300      	movs	r3, #0
 800f778:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f77c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800f780:	460b      	mov	r3, r1
 800f782:	4313      	orrs	r3, r2
 800f784:	d056      	beq.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800f786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f78a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f78e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f792:	d038      	beq.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800f794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f798:	d831      	bhi.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f79a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f79e:	d034      	beq.n	800f80a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800f7a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f7a4:	d82b      	bhi.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f7a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7aa:	d01d      	beq.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800f7ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f7b0:	d825      	bhi.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d006      	beq.n	800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f7b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f7ba:	d00a      	beq.n	800f7d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f7bc:	e01f      	b.n	800f7fe <HAL_RCCEx_PeriphCLKConfig+0x376>
 800f7be:	bf00      	nop
 800f7c0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7c4:	4ba2      	ldr	r3, [pc, #648]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	4aa1      	ldr	r2, [pc, #644]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f7ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f7d0:	e01c      	b.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7d6:	3308      	adds	r3, #8
 800f7d8:	2100      	movs	r1, #0
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f002 f9ee 	bl	8011bbc <RCCEx_PLL2_Config>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800f7e6:	e011      	b.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7ec:	3328      	adds	r3, #40	; 0x28
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f002 fa95 	bl	8011d20 <RCCEx_PLL3_Config>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800f7fc:	e006      	b.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f804:	e002      	b.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f806:	bf00      	nop
 800f808:	e000      	b.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800f80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f80c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10b      	bne.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f814:	4b8e      	ldr	r3, [pc, #568]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f818:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800f81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f824:	4a8a      	ldr	r2, [pc, #552]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f826:	430b      	orrs	r3, r1
 800f828:	6593      	str	r3, [r2, #88]	; 0x58
 800f82a:	e003      	b.n	800f834 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f82c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800f840:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f844:	2300      	movs	r3, #0
 800f846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f84a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800f84e:	460b      	mov	r3, r1
 800f850:	4313      	orrs	r3, r2
 800f852:	d03a      	beq.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800f854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f85a:	2b30      	cmp	r3, #48	; 0x30
 800f85c:	d01f      	beq.n	800f89e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800f85e:	2b30      	cmp	r3, #48	; 0x30
 800f860:	d819      	bhi.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f862:	2b20      	cmp	r3, #32
 800f864:	d00c      	beq.n	800f880 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800f866:	2b20      	cmp	r3, #32
 800f868:	d815      	bhi.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d019      	beq.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800f86e:	2b10      	cmp	r3, #16
 800f870:	d111      	bne.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f872:	4b77      	ldr	r3, [pc, #476]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f876:	4a76      	ldr	r2, [pc, #472]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f87c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f87e:	e011      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f884:	3308      	adds	r3, #8
 800f886:	2102      	movs	r1, #2
 800f888:	4618      	mov	r0, r3
 800f88a:	f002 f997 	bl	8011bbc <RCCEx_PLL2_Config>
 800f88e:	4603      	mov	r3, r0
 800f890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800f894:	e006      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f896:	2301      	movs	r3, #1
 800f898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f89c:	e002      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f89e:	bf00      	nop
 800f8a0:	e000      	b.n	800f8a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800f8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10a      	bne.n	800f8c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f8ac:	4b68      	ldr	r3, [pc, #416]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8b0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800f8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ba:	4a65      	ldr	r2, [pc, #404]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f8bc:	430b      	orrs	r3, r1
 800f8be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f8c0:	e003      	b.n	800f8ca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f8ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f8d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f8e0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	d051      	beq.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8f4:	d035      	beq.n	800f962 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f8f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8fa:	d82e      	bhi.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f8fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f900:	d031      	beq.n	800f966 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f906:	d828      	bhi.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f90c:	d01a      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f90e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f912:	d822      	bhi.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f914:	2b00      	cmp	r3, #0
 800f916:	d003      	beq.n	800f920 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f91c:	d007      	beq.n	800f92e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f91e:	e01c      	b.n	800f95a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f920:	4b4b      	ldr	r3, [pc, #300]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f924:	4a4a      	ldr	r2, [pc, #296]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f92a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f92c:	e01c      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f92e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f932:	3308      	adds	r3, #8
 800f934:	2100      	movs	r1, #0
 800f936:	4618      	mov	r0, r3
 800f938:	f002 f940 	bl	8011bbc <RCCEx_PLL2_Config>
 800f93c:	4603      	mov	r3, r0
 800f93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f942:	e011      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f948:	3328      	adds	r3, #40	; 0x28
 800f94a:	2100      	movs	r1, #0
 800f94c:	4618      	mov	r0, r3
 800f94e:	f002 f9e7 	bl	8011d20 <RCCEx_PLL3_Config>
 800f952:	4603      	mov	r3, r0
 800f954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f958:	e006      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f960:	e002      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f962:	bf00      	nop
 800f964:	e000      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f966:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d10a      	bne.n	800f986 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f970:	4b37      	ldr	r3, [pc, #220]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f974:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f97c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f97e:	4a34      	ldr	r2, [pc, #208]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f980:	430b      	orrs	r3, r1
 800f982:	6513      	str	r3, [r2, #80]	; 0x50
 800f984:	e003      	b.n	800f98e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f98a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f996:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f99a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f99e:	2300      	movs	r3, #0
 800f9a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f9a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f9a8:	460b      	mov	r3, r1
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	d056      	beq.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9b8:	d033      	beq.n	800fa22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f9ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9be:	d82c      	bhi.n	800fa1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f9c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9c4:	d02f      	beq.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f9c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f9ca:	d826      	bhi.n	800fa1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f9cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9d0:	d02b      	beq.n	800fa2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f9d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f9d6:	d820      	bhi.n	800fa1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9dc:	d012      	beq.n	800fa04 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9e2:	d81a      	bhi.n	800fa1a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d022      	beq.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9ec:	d115      	bne.n	800fa1a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9f2:	3308      	adds	r3, #8
 800f9f4:	2101      	movs	r1, #1
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f002 f8e0 	bl	8011bbc <RCCEx_PLL2_Config>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fa02:	e015      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa08:	3328      	adds	r3, #40	; 0x28
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f002 f987 	bl	8011d20 <RCCEx_PLL3_Config>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fa18:	e00a      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fa20:	e006      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fa22:	bf00      	nop
 800fa24:	e004      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fa26:	bf00      	nop
 800fa28:	e002      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fa2a:	bf00      	nop
 800fa2c:	e000      	b.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fa2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d10d      	bne.n	800fa54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fa38:	4b05      	ldr	r3, [pc, #20]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa3c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800fa40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa46:	4a02      	ldr	r2, [pc, #8]	; (800fa50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fa48:	430b      	orrs	r3, r1
 800fa4a:	6513      	str	r3, [r2, #80]	; 0x50
 800fa4c:	e006      	b.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800fa4e:	bf00      	nop
 800fa50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fa58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800fa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800fa68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fa72:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800fa76:	460b      	mov	r3, r1
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	d055      	beq.n	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800fa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fa84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa88:	d033      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800fa8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fa8e:	d82c      	bhi.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fa90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa94:	d02f      	beq.n	800faf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800fa96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa9a:	d826      	bhi.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fa9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800faa0:	d02b      	beq.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800faa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800faa6:	d820      	bhi.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800faa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faac:	d012      	beq.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800faae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fab2:	d81a      	bhi.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d022      	beq.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0x676>
 800fab8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fabc:	d115      	bne.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac2:	3308      	adds	r3, #8
 800fac4:	2101      	movs	r1, #1
 800fac6:	4618      	mov	r0, r3
 800fac8:	f002 f878 	bl	8011bbc <RCCEx_PLL2_Config>
 800facc:	4603      	mov	r3, r0
 800face:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fad2:	e015      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fad8:	3328      	adds	r3, #40	; 0x28
 800fada:	2101      	movs	r1, #1
 800fadc:	4618      	mov	r0, r3
 800fade:	f002 f91f 	bl	8011d20 <RCCEx_PLL3_Config>
 800fae2:	4603      	mov	r3, r0
 800fae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800fae8:	e00a      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faf0:	e006      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800faf2:	bf00      	nop
 800faf4:	e004      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800faf6:	bf00      	nop
 800faf8:	e002      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fafa:	bf00      	nop
 800fafc:	e000      	b.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800fafe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10b      	bne.n	800fb20 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800fb08:	4ba3      	ldr	r3, [pc, #652]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb0c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800fb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800fb18:	4a9f      	ldr	r2, [pc, #636]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb1a:	430b      	orrs	r3, r1
 800fb1c:	6593      	str	r3, [r2, #88]	; 0x58
 800fb1e:	e003      	b.n	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800fb34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fb3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800fb42:	460b      	mov	r3, r1
 800fb44:	4313      	orrs	r3, r2
 800fb46:	d037      	beq.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800fb48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb52:	d00e      	beq.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800fb54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb58:	d816      	bhi.n	800fb88 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d018      	beq.n	800fb90 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800fb5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fb62:	d111      	bne.n	800fb88 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb64:	4b8c      	ldr	r3, [pc, #560]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb68:	4a8b      	ldr	r2, [pc, #556]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fb70:	e00f      	b.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb76:	3308      	adds	r3, #8
 800fb78:	2101      	movs	r1, #1
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f002 f81e 	bl	8011bbc <RCCEx_PLL2_Config>
 800fb80:	4603      	mov	r3, r0
 800fb82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800fb86:	e004      	b.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb8e:	e000      	b.n	800fb92 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800fb90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fb9a:	4b7f      	ldr	r3, [pc, #508]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb9e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fba8:	4a7b      	ldr	r2, [pc, #492]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fbaa:	430b      	orrs	r3, r1
 800fbac:	6513      	str	r3, [r2, #80]	; 0x50
 800fbae:	e003      	b.n	800fbb8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800fbc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fbc8:	2300      	movs	r3, #0
 800fbca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fbce:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	d039      	beq.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800fbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fbde:	2b03      	cmp	r3, #3
 800fbe0:	d81c      	bhi.n	800fc1c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800fbe2:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc25 	.word	0x0800fc25
 800fbec:	0800fbf9 	.word	0x0800fbf9
 800fbf0:	0800fc07 	.word	0x0800fc07
 800fbf4:	0800fc25 	.word	0x0800fc25
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbf8:	4b67      	ldr	r3, [pc, #412]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbfc:	4a66      	ldr	r2, [pc, #408]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fbfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fc02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fc04:	e00f      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc0a:	3308      	adds	r3, #8
 800fc0c:	2102      	movs	r1, #2
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f001 ffd4 	bl	8011bbc <RCCEx_PLL2_Config>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800fc1a:	e004      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc22:	e000      	b.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800fc24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10a      	bne.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fc2e:	4b5a      	ldr	r3, [pc, #360]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc32:	f023 0103 	bic.w	r1, r3, #3
 800fc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc3c:	4a56      	ldr	r2, [pc, #344]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fc3e:	430b      	orrs	r3, r1
 800fc40:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc42:	e003      	b.n	800fc4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800fc58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fc62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800fc66:	460b      	mov	r3, r1
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	f000 809f 	beq.w	800fdac <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fc6e:	4b4b      	ldr	r3, [pc, #300]	; (800fd9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	4a4a      	ldr	r2, [pc, #296]	; (800fd9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fc74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fc7a:	f7f6 fb69 	bl	8006350 <HAL_GetTick>
 800fc7e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fc82:	e00b      	b.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc84:	f7f6 fb64 	bl	8006350 <HAL_GetTick>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	2b64      	cmp	r3, #100	; 0x64
 800fc92:	d903      	bls.n	800fc9c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800fc94:	2303      	movs	r3, #3
 800fc96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc9a:	e005      	b.n	800fca8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fc9c:	4b3f      	ldr	r3, [pc, #252]	; (800fd9c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d0ed      	beq.n	800fc84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800fca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d179      	bne.n	800fda4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fcb0:	4b39      	ldr	r3, [pc, #228]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fcbc:	4053      	eors	r3, r2
 800fcbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d015      	beq.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fcc6:	4b34      	ldr	r3, [pc, #208]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fcd2:	4b31      	ldr	r3, [pc, #196]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd6:	4a30      	ldr	r2, [pc, #192]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fcdc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fcde:	4b2e      	ldr	r3, [pc, #184]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce2:	4a2d      	ldr	r2, [pc, #180]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fce8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fcea:	4a2b      	ldr	r2, [pc, #172]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fcec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fcf0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcfe:	d118      	bne.n	800fd32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd00:	f7f6 fb26 	bl	8006350 <HAL_GetTick>
 800fd04:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd08:	e00d      	b.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fd0a:	f7f6 fb21 	bl	8006350 <HAL_GetTick>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fd14:	1ad2      	subs	r2, r2, r3
 800fd16:	f241 3388 	movw	r3, #5000	; 0x1388
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d903      	bls.n	800fd26 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800fd24:	e005      	b.n	800fd32 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd26:	4b1c      	ldr	r3, [pc, #112]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd2a:	f003 0302 	and.w	r3, r3, #2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0eb      	beq.n	800fd0a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800fd32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d129      	bne.n	800fd8e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd4a:	d10e      	bne.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800fd4c:	4b12      	ldr	r3, [pc, #72]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800fd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd5c:	091a      	lsrs	r2, r3, #4
 800fd5e:	4b10      	ldr	r3, [pc, #64]	; (800fda0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800fd60:	4013      	ands	r3, r2
 800fd62:	4a0d      	ldr	r2, [pc, #52]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd64:	430b      	orrs	r3, r1
 800fd66:	6113      	str	r3, [r2, #16]
 800fd68:	e005      	b.n	800fd76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800fd6a:	4b0b      	ldr	r3, [pc, #44]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	4a0a      	ldr	r2, [pc, #40]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fd74:	6113      	str	r3, [r2, #16]
 800fd76:	4b08      	ldr	r3, [pc, #32]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd78:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fd7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd86:	4a04      	ldr	r2, [pc, #16]	; (800fd98 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800fd88:	430b      	orrs	r3, r1
 800fd8a:	6713      	str	r3, [r2, #112]	; 0x70
 800fd8c:	e00e      	b.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fd92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800fd96:	e009      	b.n	800fdac <HAL_RCCEx_PeriphCLKConfig+0x924>
 800fd98:	58024400 	.word	0x58024400
 800fd9c:	58024800 	.word	0x58024800
 800fda0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fda4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fda8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fdac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb4:	f002 0301 	and.w	r3, r2, #1
 800fdb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fdc2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	f000 8089 	beq.w	800fee0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800fdce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fdd4:	2b28      	cmp	r3, #40	; 0x28
 800fdd6:	d86b      	bhi.n	800feb0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800fdd8:	a201      	add	r2, pc, #4	; (adr r2, 800fde0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800fdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdde:	bf00      	nop
 800fde0:	0800feb9 	.word	0x0800feb9
 800fde4:	0800feb1 	.word	0x0800feb1
 800fde8:	0800feb1 	.word	0x0800feb1
 800fdec:	0800feb1 	.word	0x0800feb1
 800fdf0:	0800feb1 	.word	0x0800feb1
 800fdf4:	0800feb1 	.word	0x0800feb1
 800fdf8:	0800feb1 	.word	0x0800feb1
 800fdfc:	0800feb1 	.word	0x0800feb1
 800fe00:	0800fe85 	.word	0x0800fe85
 800fe04:	0800feb1 	.word	0x0800feb1
 800fe08:	0800feb1 	.word	0x0800feb1
 800fe0c:	0800feb1 	.word	0x0800feb1
 800fe10:	0800feb1 	.word	0x0800feb1
 800fe14:	0800feb1 	.word	0x0800feb1
 800fe18:	0800feb1 	.word	0x0800feb1
 800fe1c:	0800feb1 	.word	0x0800feb1
 800fe20:	0800fe9b 	.word	0x0800fe9b
 800fe24:	0800feb1 	.word	0x0800feb1
 800fe28:	0800feb1 	.word	0x0800feb1
 800fe2c:	0800feb1 	.word	0x0800feb1
 800fe30:	0800feb1 	.word	0x0800feb1
 800fe34:	0800feb1 	.word	0x0800feb1
 800fe38:	0800feb1 	.word	0x0800feb1
 800fe3c:	0800feb1 	.word	0x0800feb1
 800fe40:	0800feb9 	.word	0x0800feb9
 800fe44:	0800feb1 	.word	0x0800feb1
 800fe48:	0800feb1 	.word	0x0800feb1
 800fe4c:	0800feb1 	.word	0x0800feb1
 800fe50:	0800feb1 	.word	0x0800feb1
 800fe54:	0800feb1 	.word	0x0800feb1
 800fe58:	0800feb1 	.word	0x0800feb1
 800fe5c:	0800feb1 	.word	0x0800feb1
 800fe60:	0800feb9 	.word	0x0800feb9
 800fe64:	0800feb1 	.word	0x0800feb1
 800fe68:	0800feb1 	.word	0x0800feb1
 800fe6c:	0800feb1 	.word	0x0800feb1
 800fe70:	0800feb1 	.word	0x0800feb1
 800fe74:	0800feb1 	.word	0x0800feb1
 800fe78:	0800feb1 	.word	0x0800feb1
 800fe7c:	0800feb1 	.word	0x0800feb1
 800fe80:	0800feb9 	.word	0x0800feb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe88:	3308      	adds	r3, #8
 800fe8a:	2101      	movs	r1, #1
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f001 fe95 	bl	8011bbc <RCCEx_PLL2_Config>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800fe98:	e00f      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fe9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe9e:	3328      	adds	r3, #40	; 0x28
 800fea0:	2101      	movs	r1, #1
 800fea2:	4618      	mov	r0, r3
 800fea4:	f001 ff3c 	bl	8011d20 <RCCEx_PLL3_Config>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800feae:	e004      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800feb6:	e000      	b.n	800feba <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800feb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800feba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10a      	bne.n	800fed8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fec2:	4bbf      	ldr	r3, [pc, #764]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fec6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800feca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fed0:	4abb      	ldr	r2, [pc, #748]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800fed2:	430b      	orrs	r3, r1
 800fed4:	6553      	str	r3, [r2, #84]	; 0x54
 800fed6:	e003      	b.n	800fee0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fedc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	f002 0302 	and.w	r3, r2, #2
 800feec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fef0:	2300      	movs	r3, #0
 800fef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fef6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800fefa:	460b      	mov	r3, r1
 800fefc:	4313      	orrs	r3, r2
 800fefe:	d041      	beq.n	800ff84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ff00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff06:	2b05      	cmp	r3, #5
 800ff08:	d824      	bhi.n	800ff54 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ff0a:	a201      	add	r2, pc, #4	; (adr r2, 800ff10 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ff0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff10:	0800ff5d 	.word	0x0800ff5d
 800ff14:	0800ff29 	.word	0x0800ff29
 800ff18:	0800ff3f 	.word	0x0800ff3f
 800ff1c:	0800ff5d 	.word	0x0800ff5d
 800ff20:	0800ff5d 	.word	0x0800ff5d
 800ff24:	0800ff5d 	.word	0x0800ff5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ff28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff2c:	3308      	adds	r3, #8
 800ff2e:	2101      	movs	r1, #1
 800ff30:	4618      	mov	r0, r3
 800ff32:	f001 fe43 	bl	8011bbc <RCCEx_PLL2_Config>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ff3c:	e00f      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff42:	3328      	adds	r3, #40	; 0x28
 800ff44:	2101      	movs	r1, #1
 800ff46:	4618      	mov	r0, r3
 800ff48:	f001 feea 	bl	8011d20 <RCCEx_PLL3_Config>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ff52:	e004      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ff5a:	e000      	b.n	800ff5e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ff5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ff5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10a      	bne.n	800ff7c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ff66:	4b96      	ldr	r3, [pc, #600]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ff68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff6a:	f023 0107 	bic.w	r1, r3, #7
 800ff6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff74:	4a92      	ldr	r2, [pc, #584]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ff76:	430b      	orrs	r3, r1
 800ff78:	6553      	str	r3, [r2, #84]	; 0x54
 800ff7a:	e003      	b.n	800ff84 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ff84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8c:	f002 0304 	and.w	r3, r2, #4
 800ff90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ff94:	2300      	movs	r3, #0
 800ff96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ff9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	d044      	beq.n	801002e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ffa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ffac:	2b05      	cmp	r3, #5
 800ffae:	d825      	bhi.n	800fffc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800ffb0:	a201      	add	r2, pc, #4	; (adr r2, 800ffb8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800ffb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb6:	bf00      	nop
 800ffb8:	08010005 	.word	0x08010005
 800ffbc:	0800ffd1 	.word	0x0800ffd1
 800ffc0:	0800ffe7 	.word	0x0800ffe7
 800ffc4:	08010005 	.word	0x08010005
 800ffc8:	08010005 	.word	0x08010005
 800ffcc:	08010005 	.word	0x08010005
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ffd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	2101      	movs	r1, #1
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f001 fdef 	bl	8011bbc <RCCEx_PLL2_Config>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ffe4:	e00f      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ffe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ffea:	3328      	adds	r3, #40	; 0x28
 800ffec:	2101      	movs	r1, #1
 800ffee:	4618      	mov	r0, r3
 800fff0:	f001 fe96 	bl	8011d20 <RCCEx_PLL3_Config>
 800fff4:	4603      	mov	r3, r0
 800fff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800fffa:	e004      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010002:	e000      	b.n	8010006 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10b      	bne.n	8010026 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801000e:	4b6c      	ldr	r3, [pc, #432]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010012:	f023 0107 	bic.w	r1, r3, #7
 8010016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801001a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801001e:	4a68      	ldr	r2, [pc, #416]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010020:	430b      	orrs	r3, r1
 8010022:	6593      	str	r3, [r2, #88]	; 0x58
 8010024:	e003      	b.n	801002e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801002a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801002e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010036:	f002 0320 	and.w	r3, r2, #32
 801003a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801003e:	2300      	movs	r3, #0
 8010040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010048:	460b      	mov	r3, r1
 801004a:	4313      	orrs	r3, r2
 801004c:	d055      	beq.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801004e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801005a:	d033      	beq.n	80100c4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801005c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010060:	d82c      	bhi.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010066:	d02f      	beq.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801006c:	d826      	bhi.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801006e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010072:	d02b      	beq.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010078:	d820      	bhi.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801007a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801007e:	d012      	beq.n	80100a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010084:	d81a      	bhi.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010086:	2b00      	cmp	r3, #0
 8010088:	d022      	beq.n	80100d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801008a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801008e:	d115      	bne.n	80100bc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010094:	3308      	adds	r3, #8
 8010096:	2100      	movs	r1, #0
 8010098:	4618      	mov	r0, r3
 801009a:	f001 fd8f 	bl	8011bbc <RCCEx_PLL2_Config>
 801009e:	4603      	mov	r3, r0
 80100a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80100a4:	e015      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80100a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100aa:	3328      	adds	r3, #40	; 0x28
 80100ac:	2102      	movs	r1, #2
 80100ae:	4618      	mov	r0, r3
 80100b0:	f001 fe36 	bl	8011d20 <RCCEx_PLL3_Config>
 80100b4:	4603      	mov	r3, r0
 80100b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80100ba:	e00a      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80100bc:	2301      	movs	r3, #1
 80100be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80100c2:	e006      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80100c4:	bf00      	nop
 80100c6:	e004      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80100c8:	bf00      	nop
 80100ca:	e002      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80100cc:	bf00      	nop
 80100ce:	e000      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80100d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10b      	bne.n	80100f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80100da:	4b39      	ldr	r3, [pc, #228]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80100e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100ea:	4a35      	ldr	r2, [pc, #212]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80100ec:	430b      	orrs	r3, r1
 80100ee:	6553      	str	r3, [r2, #84]	; 0x54
 80100f0:	e003      	b.n	80100fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80100f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80100fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80100fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010102:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8010106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801010a:	2300      	movs	r3, #0
 801010c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010110:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8010114:	460b      	mov	r3, r1
 8010116:	4313      	orrs	r3, r2
 8010118:	d058      	beq.n	80101cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801011a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801011e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010122:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010126:	d033      	beq.n	8010190 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010128:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801012c:	d82c      	bhi.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801012e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010132:	d02f      	beq.n	8010194 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010138:	d826      	bhi.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801013a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801013e:	d02b      	beq.n	8010198 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010144:	d820      	bhi.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801014a:	d012      	beq.n	8010172 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801014c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010150:	d81a      	bhi.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010152:	2b00      	cmp	r3, #0
 8010154:	d022      	beq.n	801019c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801015a:	d115      	bne.n	8010188 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801015c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010160:	3308      	adds	r3, #8
 8010162:	2100      	movs	r1, #0
 8010164:	4618      	mov	r0, r3
 8010166:	f001 fd29 	bl	8011bbc <RCCEx_PLL2_Config>
 801016a:	4603      	mov	r3, r0
 801016c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010170:	e015      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010176:	3328      	adds	r3, #40	; 0x28
 8010178:	2102      	movs	r1, #2
 801017a:	4618      	mov	r0, r3
 801017c:	f001 fdd0 	bl	8011d20 <RCCEx_PLL3_Config>
 8010180:	4603      	mov	r3, r0
 8010182:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010186:	e00a      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801018e:	e006      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010190:	bf00      	nop
 8010192:	e004      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010194:	bf00      	nop
 8010196:	e002      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010198:	bf00      	nop
 801019a:	e000      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801019c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801019e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d10e      	bne.n	80101c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80101a6:	4b06      	ldr	r3, [pc, #24]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80101a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80101ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80101b6:	4a02      	ldr	r2, [pc, #8]	; (80101c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80101b8:	430b      	orrs	r3, r1
 80101ba:	6593      	str	r3, [r2, #88]	; 0x58
 80101bc:	e006      	b.n	80101cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80101be:	bf00      	nop
 80101c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80101cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80101d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80101dc:	2300      	movs	r3, #0
 80101de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80101e2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80101e6:	460b      	mov	r3, r1
 80101e8:	4313      	orrs	r3, r2
 80101ea:	d055      	beq.n	8010298 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80101ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80101f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80101f8:	d033      	beq.n	8010262 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80101fa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80101fe:	d82c      	bhi.n	801025a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010204:	d02f      	beq.n	8010266 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801020a:	d826      	bhi.n	801025a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801020c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010210:	d02b      	beq.n	801026a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010212:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010216:	d820      	bhi.n	801025a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801021c:	d012      	beq.n	8010244 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801021e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010222:	d81a      	bhi.n	801025a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010224:	2b00      	cmp	r3, #0
 8010226:	d022      	beq.n	801026e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801022c:	d115      	bne.n	801025a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801022e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010232:	3308      	adds	r3, #8
 8010234:	2100      	movs	r1, #0
 8010236:	4618      	mov	r0, r3
 8010238:	f001 fcc0 	bl	8011bbc <RCCEx_PLL2_Config>
 801023c:	4603      	mov	r3, r0
 801023e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010242:	e015      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010248:	3328      	adds	r3, #40	; 0x28
 801024a:	2102      	movs	r1, #2
 801024c:	4618      	mov	r0, r3
 801024e:	f001 fd67 	bl	8011d20 <RCCEx_PLL3_Config>
 8010252:	4603      	mov	r3, r0
 8010254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010258:	e00a      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801025a:	2301      	movs	r3, #1
 801025c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010260:	e006      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010262:	bf00      	nop
 8010264:	e004      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010266:	bf00      	nop
 8010268:	e002      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801026a:	bf00      	nop
 801026c:	e000      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801026e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010270:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10b      	bne.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010278:	4ba1      	ldr	r3, [pc, #644]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801027a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801027c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8010280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010288:	4a9d      	ldr	r2, [pc, #628]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801028a:	430b      	orrs	r3, r1
 801028c:	6593      	str	r3, [r2, #88]	; 0x58
 801028e:	e003      	b.n	8010298 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801029c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a0:	f002 0308 	and.w	r3, r2, #8
 80102a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80102a8:	2300      	movs	r3, #0
 80102aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80102ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80102b2:	460b      	mov	r3, r1
 80102b4:	4313      	orrs	r3, r2
 80102b6:	d01e      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80102b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102c4:	d10c      	bne.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80102c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ca:	3328      	adds	r3, #40	; 0x28
 80102cc:	2102      	movs	r1, #2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f001 fd26 	bl	8011d20 <RCCEx_PLL3_Config>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d002      	beq.n	80102e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80102da:	2301      	movs	r3, #1
 80102dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80102e0:	4b87      	ldr	r3, [pc, #540]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80102e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80102e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102f0:	4a83      	ldr	r2, [pc, #524]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80102f2:	430b      	orrs	r3, r1
 80102f4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80102f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	f002 0310 	and.w	r3, r2, #16
 8010302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010306:	2300      	movs	r3, #0
 8010308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801030c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8010310:	460b      	mov	r3, r1
 8010312:	4313      	orrs	r3, r2
 8010314:	d01e      	beq.n	8010354 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801031a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801031e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010322:	d10c      	bne.n	801033e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010328:	3328      	adds	r3, #40	; 0x28
 801032a:	2102      	movs	r1, #2
 801032c:	4618      	mov	r0, r3
 801032e:	f001 fcf7 	bl	8011d20 <RCCEx_PLL3_Config>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d002      	beq.n	801033e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8010338:	2301      	movs	r3, #1
 801033a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801033e:	4b70      	ldr	r3, [pc, #448]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8010346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801034a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801034e:	4a6c      	ldr	r2, [pc, #432]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010350:	430b      	orrs	r3, r1
 8010352:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801035c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8010360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010364:	2300      	movs	r3, #0
 8010366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801036a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801036e:	460b      	mov	r3, r1
 8010370:	4313      	orrs	r3, r2
 8010372:	d03e      	beq.n	80103f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801037c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010380:	d022      	beq.n	80103c8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8010382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010386:	d81b      	bhi.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801038c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010390:	d00b      	beq.n	80103aa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8010392:	e015      	b.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010398:	3308      	adds	r3, #8
 801039a:	2100      	movs	r1, #0
 801039c:	4618      	mov	r0, r3
 801039e:	f001 fc0d 	bl	8011bbc <RCCEx_PLL2_Config>
 80103a2:	4603      	mov	r3, r0
 80103a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80103a8:	e00f      	b.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80103aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ae:	3328      	adds	r3, #40	; 0x28
 80103b0:	2102      	movs	r1, #2
 80103b2:	4618      	mov	r0, r3
 80103b4:	f001 fcb4 	bl	8011d20 <RCCEx_PLL3_Config>
 80103b8:	4603      	mov	r3, r0
 80103ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80103be:	e004      	b.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103c0:	2301      	movs	r3, #1
 80103c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80103c6:	e000      	b.n	80103ca <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80103c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d10b      	bne.n	80103ea <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80103d2:	4b4b      	ldr	r3, [pc, #300]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80103da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80103e2:	4a47      	ldr	r2, [pc, #284]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80103e4:	430b      	orrs	r3, r1
 80103e6:	6593      	str	r3, [r2, #88]	; 0x58
 80103e8:	e003      	b.n	80103f2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80103f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80103fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8010400:	2300      	movs	r3, #0
 8010402:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010404:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010408:	460b      	mov	r3, r1
 801040a:	4313      	orrs	r3, r2
 801040c:	d03b      	beq.n	8010486 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801040e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801041a:	d01f      	beq.n	801045c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801041c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010420:	d818      	bhi.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8010422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010426:	d003      	beq.n	8010430 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8010428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801042c:	d007      	beq.n	801043e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801042e:	e011      	b.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010430:	4b33      	ldr	r3, [pc, #204]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010434:	4a32      	ldr	r2, [pc, #200]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801043a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801043c:	e00f      	b.n	801045e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801043e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010442:	3328      	adds	r3, #40	; 0x28
 8010444:	2101      	movs	r1, #1
 8010446:	4618      	mov	r0, r3
 8010448:	f001 fc6a 	bl	8011d20 <RCCEx_PLL3_Config>
 801044c:	4603      	mov	r3, r0
 801044e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8010452:	e004      	b.n	801045e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010454:	2301      	movs	r3, #1
 8010456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801045a:	e000      	b.n	801045e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801045c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801045e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010462:	2b00      	cmp	r3, #0
 8010464:	d10b      	bne.n	801047e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010466:	4b26      	ldr	r3, [pc, #152]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801046a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801046e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010476:	4a22      	ldr	r2, [pc, #136]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010478:	430b      	orrs	r3, r1
 801047a:	6553      	str	r3, [r2, #84]	; 0x54
 801047c:	e003      	b.n	8010486 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801047e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010482:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8010492:	673b      	str	r3, [r7, #112]	; 0x70
 8010494:	2300      	movs	r3, #0
 8010496:	677b      	str	r3, [r7, #116]	; 0x74
 8010498:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801049c:	460b      	mov	r3, r1
 801049e:	4313      	orrs	r3, r2
 80104a0:	d034      	beq.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80104a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d003      	beq.n	80104b4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80104ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104b0:	d007      	beq.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80104b2:	e011      	b.n	80104d8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104b4:	4b12      	ldr	r3, [pc, #72]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	4a11      	ldr	r2, [pc, #68]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80104c0:	e00e      	b.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80104c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104c6:	3308      	adds	r3, #8
 80104c8:	2102      	movs	r1, #2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f001 fb76 	bl	8011bbc <RCCEx_PLL2_Config>
 80104d0:	4603      	mov	r3, r0
 80104d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80104d6:	e003      	b.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80104d8:	2301      	movs	r3, #1
 80104da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80104de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d10d      	bne.n	8010504 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80104e8:	4b05      	ldr	r3, [pc, #20]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80104f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104f6:	4a02      	ldr	r2, [pc, #8]	; (8010500 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80104f8:	430b      	orrs	r3, r1
 80104fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104fc:	e006      	b.n	801050c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80104fe:	bf00      	nop
 8010500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801050c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8010518:	66bb      	str	r3, [r7, #104]	; 0x68
 801051a:	2300      	movs	r3, #0
 801051c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801051e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8010522:	460b      	mov	r3, r1
 8010524:	4313      	orrs	r3, r2
 8010526:	d00c      	beq.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801052c:	3328      	adds	r3, #40	; 0x28
 801052e:	2102      	movs	r1, #2
 8010530:	4618      	mov	r0, r3
 8010532:	f001 fbf5 	bl	8011d20 <RCCEx_PLL3_Config>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801053c:	2301      	movs	r3, #1
 801053e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8010542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801054e:	663b      	str	r3, [r7, #96]	; 0x60
 8010550:	2300      	movs	r3, #0
 8010552:	667b      	str	r3, [r7, #100]	; 0x64
 8010554:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8010558:	460b      	mov	r3, r1
 801055a:	4313      	orrs	r3, r2
 801055c:	d038      	beq.n	80105d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801055e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801056a:	d018      	beq.n	801059e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801056c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010570:	d811      	bhi.n	8010596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010576:	d014      	beq.n	80105a2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801057c:	d80b      	bhi.n	8010596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801057e:	2b00      	cmp	r3, #0
 8010580:	d011      	beq.n	80105a6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8010582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010586:	d106      	bne.n	8010596 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010588:	4bc3      	ldr	r3, [pc, #780]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801058a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058c:	4ac2      	ldr	r2, [pc, #776]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801058e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010594:	e008      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010596:	2301      	movs	r3, #1
 8010598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801059c:	e004      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801059e:	bf00      	nop
 80105a0:	e002      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80105a2:	bf00      	nop
 80105a4:	e000      	b.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80105a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80105a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d10b      	bne.n	80105c8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80105b0:	4bb9      	ldr	r3, [pc, #740]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105b4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80105b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105c0:	4ab5      	ldr	r2, [pc, #724]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105c2:	430b      	orrs	r3, r1
 80105c4:	6553      	str	r3, [r2, #84]	; 0x54
 80105c6:	e003      	b.n	80105d0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80105cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80105d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80105dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80105de:	2300      	movs	r3, #0
 80105e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80105e6:	460b      	mov	r3, r1
 80105e8:	4313      	orrs	r3, r2
 80105ea:	d009      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80105ec:	4baa      	ldr	r3, [pc, #680]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80105f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105fa:	4aa7      	ldr	r2, [pc, #668]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80105fc:	430b      	orrs	r3, r1
 80105fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 801060c:	653b      	str	r3, [r7, #80]	; 0x50
 801060e:	2300      	movs	r3, #0
 8010610:	657b      	str	r3, [r7, #84]	; 0x54
 8010612:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8010616:	460b      	mov	r3, r1
 8010618:	4313      	orrs	r3, r2
 801061a:	d00a      	beq.n	8010632 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801061c:	4b9e      	ldr	r3, [pc, #632]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801061e:	691b      	ldr	r3, [r3, #16]
 8010620:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8010624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010628:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801062c:	4a9a      	ldr	r2, [pc, #616]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801062e:	430b      	orrs	r3, r1
 8010630:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801063e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010640:	2300      	movs	r3, #0
 8010642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010644:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8010648:	460b      	mov	r3, r1
 801064a:	4313      	orrs	r3, r2
 801064c:	d009      	beq.n	8010662 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801064e:	4b92      	ldr	r3, [pc, #584]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010652:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8010656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801065a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065c:	4a8e      	ldr	r2, [pc, #568]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801065e:	430b      	orrs	r3, r1
 8010660:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801066a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801066e:	643b      	str	r3, [r7, #64]	; 0x40
 8010670:	2300      	movs	r3, #0
 8010672:	647b      	str	r3, [r7, #68]	; 0x44
 8010674:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8010678:	460b      	mov	r3, r1
 801067a:	4313      	orrs	r3, r2
 801067c:	d00e      	beq.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801067e:	4b86      	ldr	r3, [pc, #536]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010680:	691b      	ldr	r3, [r3, #16]
 8010682:	4a85      	ldr	r2, [pc, #532]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010684:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010688:	6113      	str	r3, [r2, #16]
 801068a:	4b83      	ldr	r3, [pc, #524]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801068c:	6919      	ldr	r1, [r3, #16]
 801068e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010692:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010696:	4a80      	ldr	r2, [pc, #512]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010698:	430b      	orrs	r3, r1
 801069a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801069c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80106a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80106aa:	2300      	movs	r3, #0
 80106ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80106b2:	460b      	mov	r3, r1
 80106b4:	4313      	orrs	r3, r2
 80106b6:	d009      	beq.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80106b8:	4b77      	ldr	r3, [pc, #476]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80106c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106c6:	4a74      	ldr	r2, [pc, #464]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106c8:	430b      	orrs	r3, r1
 80106ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80106cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80106d8:	633b      	str	r3, [r7, #48]	; 0x30
 80106da:	2300      	movs	r3, #0
 80106dc:	637b      	str	r3, [r7, #52]	; 0x34
 80106de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80106e2:	460b      	mov	r3, r1
 80106e4:	4313      	orrs	r3, r2
 80106e6:	d00a      	beq.n	80106fe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80106e8:	4b6b      	ldr	r3, [pc, #428]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80106f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106f8:	4a67      	ldr	r2, [pc, #412]	; (8010898 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80106fa:	430b      	orrs	r3, r1
 80106fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80106fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010706:	2100      	movs	r1, #0
 8010708:	62b9      	str	r1, [r7, #40]	; 0x28
 801070a:	f003 0301 	and.w	r3, r3, #1
 801070e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010710:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8010714:	460b      	mov	r3, r1
 8010716:	4313      	orrs	r3, r2
 8010718:	d011      	beq.n	801073e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801071a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801071e:	3308      	adds	r3, #8
 8010720:	2100      	movs	r1, #0
 8010722:	4618      	mov	r0, r3
 8010724:	f001 fa4a 	bl	8011bbc <RCCEx_PLL2_Config>
 8010728:	4603      	mov	r3, r0
 801072a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801072e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010732:	2b00      	cmp	r3, #0
 8010734:	d003      	beq.n	801073e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801073a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801073e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010746:	2100      	movs	r1, #0
 8010748:	6239      	str	r1, [r7, #32]
 801074a:	f003 0302 	and.w	r3, r3, #2
 801074e:	627b      	str	r3, [r7, #36]	; 0x24
 8010750:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010754:	460b      	mov	r3, r1
 8010756:	4313      	orrs	r3, r2
 8010758:	d011      	beq.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801075a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801075e:	3308      	adds	r3, #8
 8010760:	2101      	movs	r1, #1
 8010762:	4618      	mov	r0, r3
 8010764:	f001 fa2a 	bl	8011bbc <RCCEx_PLL2_Config>
 8010768:	4603      	mov	r3, r0
 801076a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801076e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010772:	2b00      	cmp	r3, #0
 8010774:	d003      	beq.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801077a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801077e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010786:	2100      	movs	r1, #0
 8010788:	61b9      	str	r1, [r7, #24]
 801078a:	f003 0304 	and.w	r3, r3, #4
 801078e:	61fb      	str	r3, [r7, #28]
 8010790:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010794:	460b      	mov	r3, r1
 8010796:	4313      	orrs	r3, r2
 8010798:	d011      	beq.n	80107be <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801079a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801079e:	3308      	adds	r3, #8
 80107a0:	2102      	movs	r1, #2
 80107a2:	4618      	mov	r0, r3
 80107a4:	f001 fa0a 	bl	8011bbc <RCCEx_PLL2_Config>
 80107a8:	4603      	mov	r3, r0
 80107aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80107ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d003      	beq.n	80107be <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80107be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c6:	2100      	movs	r1, #0
 80107c8:	6139      	str	r1, [r7, #16]
 80107ca:	f003 0308 	and.w	r3, r3, #8
 80107ce:	617b      	str	r3, [r7, #20]
 80107d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80107d4:	460b      	mov	r3, r1
 80107d6:	4313      	orrs	r3, r2
 80107d8:	d011      	beq.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80107da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107de:	3328      	adds	r3, #40	; 0x28
 80107e0:	2100      	movs	r1, #0
 80107e2:	4618      	mov	r0, r3
 80107e4:	f001 fa9c 	bl	8011d20 <RCCEx_PLL3_Config>
 80107e8:	4603      	mov	r3, r0
 80107ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80107ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80107fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010806:	2100      	movs	r1, #0
 8010808:	60b9      	str	r1, [r7, #8]
 801080a:	f003 0310 	and.w	r3, r3, #16
 801080e:	60fb      	str	r3, [r7, #12]
 8010810:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010814:	460b      	mov	r3, r1
 8010816:	4313      	orrs	r3, r2
 8010818:	d011      	beq.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801081a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801081e:	3328      	adds	r3, #40	; 0x28
 8010820:	2101      	movs	r1, #1
 8010822:	4618      	mov	r0, r3
 8010824:	f001 fa7c 	bl	8011d20 <RCCEx_PLL3_Config>
 8010828:	4603      	mov	r3, r0
 801082a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801082e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010836:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801083a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801083e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010846:	2100      	movs	r1, #0
 8010848:	6039      	str	r1, [r7, #0]
 801084a:	f003 0320 	and.w	r3, r3, #32
 801084e:	607b      	str	r3, [r7, #4]
 8010850:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010854:	460b      	mov	r3, r1
 8010856:	4313      	orrs	r3, r2
 8010858:	d011      	beq.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801085a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801085e:	3328      	adds	r3, #40	; 0x28
 8010860:	2102      	movs	r1, #2
 8010862:	4618      	mov	r0, r3
 8010864:	f001 fa5c 	bl	8011d20 <RCCEx_PLL3_Config>
 8010868:	4603      	mov	r3, r0
 801086a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801086e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010872:	2b00      	cmp	r3, #0
 8010874:	d003      	beq.n	801087e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801087a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 801087e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	e000      	b.n	801088c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801088a:	2301      	movs	r3, #1
}
 801088c:	4618      	mov	r0, r3
 801088e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8010892:	46bd      	mov	sp, r7
 8010894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010898:	58024400 	.word	0x58024400

0801089c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b090      	sub	sp, #64	; 0x40
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80108a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108aa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80108ae:	430b      	orrs	r3, r1
 80108b0:	f040 8094 	bne.w	80109dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80108b4:	4b9e      	ldr	r3, [pc, #632]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80108b8:	f003 0307 	and.w	r3, r3, #7
 80108bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80108be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c0:	2b04      	cmp	r3, #4
 80108c2:	f200 8087 	bhi.w	80109d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80108c6:	a201      	add	r2, pc, #4	; (adr r2, 80108cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80108c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108cc:	080108e1 	.word	0x080108e1
 80108d0:	08010909 	.word	0x08010909
 80108d4:	08010931 	.word	0x08010931
 80108d8:	080109cd 	.word	0x080109cd
 80108dc:	08010959 	.word	0x08010959
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108e0:	4b93      	ldr	r3, [pc, #588]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108ec:	d108      	bne.n	8010900 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108f2:	4618      	mov	r0, r3
 80108f4:	f001 f810 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108fc:	f000 bd45 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010900:	2300      	movs	r3, #0
 8010902:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010904:	f000 bd41 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010908:	4b89      	ldr	r3, [pc, #548]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010914:	d108      	bne.n	8010928 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010916:	f107 0318 	add.w	r3, r7, #24
 801091a:	4618      	mov	r0, r3
 801091c:	f000 fd54 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010924:	f000 bd31 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010928:	2300      	movs	r3, #0
 801092a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801092c:	f000 bd2d 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010930:	4b7f      	ldr	r3, [pc, #508]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801093c:	d108      	bne.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801093e:	f107 030c 	add.w	r3, r7, #12
 8010942:	4618      	mov	r0, r3
 8010944:	f000 fe94 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801094c:	f000 bd1d 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010950:	2300      	movs	r3, #0
 8010952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010954:	f000 bd19 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010958:	4b75      	ldr	r3, [pc, #468]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801095c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010960:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010962:	4b73      	ldr	r3, [pc, #460]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f003 0304 	and.w	r3, r3, #4
 801096a:	2b04      	cmp	r3, #4
 801096c:	d10c      	bne.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010974:	4b6e      	ldr	r3, [pc, #440]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	08db      	lsrs	r3, r3, #3
 801097a:	f003 0303 	and.w	r3, r3, #3
 801097e:	4a6d      	ldr	r2, [pc, #436]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010980:	fa22 f303 	lsr.w	r3, r2, r3
 8010984:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010986:	e01f      	b.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010988:	4b69      	ldr	r3, [pc, #420]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010994:	d106      	bne.n	80109a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010998:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801099c:	d102      	bne.n	80109a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801099e:	4b66      	ldr	r3, [pc, #408]	; (8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80109a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109a2:	e011      	b.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80109a4:	4b62      	ldr	r3, [pc, #392]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109b0:	d106      	bne.n	80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80109b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109b8:	d102      	bne.n	80109c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80109ba:	4b60      	ldr	r3, [pc, #384]	; (8010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80109bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109be:	e003      	b.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80109c0:	2300      	movs	r3, #0
 80109c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80109c4:	f000 bce1 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80109c8:	f000 bcdf 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80109cc:	4b5c      	ldr	r3, [pc, #368]	; (8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80109ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109d0:	f000 bcdb 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80109d4:	2300      	movs	r3, #0
 80109d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109d8:	f000 bcd7 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80109dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109e0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80109e4:	430b      	orrs	r3, r1
 80109e6:	f040 80ad 	bne.w	8010b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80109ea:	4b51      	ldr	r3, [pc, #324]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80109ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80109f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80109f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109fa:	d056      	beq.n	8010aaa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80109fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a02:	f200 8090 	bhi.w	8010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a08:	2bc0      	cmp	r3, #192	; 0xc0
 8010a0a:	f000 8088 	beq.w	8010b1e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	2bc0      	cmp	r3, #192	; 0xc0
 8010a12:	f200 8088 	bhi.w	8010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	2b80      	cmp	r3, #128	; 0x80
 8010a1a:	d032      	beq.n	8010a82 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	2b80      	cmp	r3, #128	; 0x80
 8010a20:	f200 8081 	bhi.w	8010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d003      	beq.n	8010a32 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2c:	2b40      	cmp	r3, #64	; 0x40
 8010a2e:	d014      	beq.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010a30:	e079      	b.n	8010b26 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a32:	4b3f      	ldr	r3, [pc, #252]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a3e:	d108      	bne.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a44:	4618      	mov	r0, r3
 8010a46:	f000 ff67 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a4e:	f000 bc9c 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a56:	f000 bc98 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a5a:	4b35      	ldr	r3, [pc, #212]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a66:	d108      	bne.n	8010a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a68:	f107 0318 	add.w	r3, r7, #24
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fcab 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a76:	f000 bc88 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a7e:	f000 bc84 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a82:	4b2b      	ldr	r3, [pc, #172]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a8e:	d108      	bne.n	8010aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a90:	f107 030c 	add.w	r3, r7, #12
 8010a94:	4618      	mov	r0, r3
 8010a96:	f000 fdeb 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a9e:	f000 bc74 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010aa6:	f000 bc70 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010aaa:	4b21      	ldr	r3, [pc, #132]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ab2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010ab4:	4b1e      	ldr	r3, [pc, #120]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	f003 0304 	and.w	r3, r3, #4
 8010abc:	2b04      	cmp	r3, #4
 8010abe:	d10c      	bne.n	8010ada <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d109      	bne.n	8010ada <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ac6:	4b1a      	ldr	r3, [pc, #104]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	08db      	lsrs	r3, r3, #3
 8010acc:	f003 0303 	and.w	r3, r3, #3
 8010ad0:	4a18      	ldr	r2, [pc, #96]	; (8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8010ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ad8:	e01f      	b.n	8010b1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ada:	4b15      	ldr	r3, [pc, #84]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ae6:	d106      	bne.n	8010af6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010aee:	d102      	bne.n	8010af6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010af0:	4b11      	ldr	r3, [pc, #68]	; (8010b38 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010af4:	e011      	b.n	8010b1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010af6:	4b0e      	ldr	r3, [pc, #56]	; (8010b30 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b02:	d106      	bne.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010b0a:	d102      	bne.n	8010b12 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010b0c:	4b0b      	ldr	r3, [pc, #44]	; (8010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b10:	e003      	b.n	8010b1a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010b12:	2300      	movs	r3, #0
 8010b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010b16:	f000 bc38 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b1a:	f000 bc36 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010b1e:	4b08      	ldr	r3, [pc, #32]	; (8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b22:	f000 bc32 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010b26:	2300      	movs	r3, #0
 8010b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b2a:	f000 bc2e 	b.w	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010b2e:	bf00      	nop
 8010b30:	58024400 	.word	0x58024400
 8010b34:	03d09000 	.word	0x03d09000
 8010b38:	003d0900 	.word	0x003d0900
 8010b3c:	017d7840 	.word	0x017d7840
 8010b40:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b48:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8010b4c:	430b      	orrs	r3, r1
 8010b4e:	f040 809c 	bne.w	8010c8a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010b52:	4b9e      	ldr	r3, [pc, #632]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b56:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010b5a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010b62:	d054      	beq.n	8010c0e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010b6a:	f200 808b 	bhi.w	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010b74:	f000 8083 	beq.w	8010c7e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010b7e:	f200 8081 	bhi.w	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b88:	d02f      	beq.n	8010bea <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b90:	d878      	bhi.n	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d004      	beq.n	8010ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b9e:	d012      	beq.n	8010bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010ba0:	e070      	b.n	8010c84 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ba2:	4b8a      	ldr	r3, [pc, #552]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010baa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010bae:	d107      	bne.n	8010bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f000 feaf 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010bbe:	e3e4      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bc4:	e3e1      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010bc6:	4b81      	ldr	r3, [pc, #516]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010bd2:	d107      	bne.n	8010be4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bd4:	f107 0318 	add.w	r3, r7, #24
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 fbf5 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010be2:	e3d2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010be4:	2300      	movs	r3, #0
 8010be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010be8:	e3cf      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010bea:	4b78      	ldr	r3, [pc, #480]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010bf6:	d107      	bne.n	8010c08 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 fd37 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010c06:	e3c0      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c0c:	e3bd      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010c0e:	4b6f      	ldr	r3, [pc, #444]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010c16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010c18:	4b6c      	ldr	r3, [pc, #432]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	f003 0304 	and.w	r3, r3, #4
 8010c20:	2b04      	cmp	r3, #4
 8010c22:	d10c      	bne.n	8010c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d109      	bne.n	8010c3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010c2a:	4b68      	ldr	r3, [pc, #416]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	08db      	lsrs	r3, r3, #3
 8010c30:	f003 0303 	and.w	r3, r3, #3
 8010c34:	4a66      	ldr	r2, [pc, #408]	; (8010dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010c36:	fa22 f303 	lsr.w	r3, r2, r3
 8010c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c3c:	e01e      	b.n	8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010c3e:	4b63      	ldr	r3, [pc, #396]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c4a:	d106      	bne.n	8010c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8010c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c52:	d102      	bne.n	8010c5a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010c54:	4b5f      	ldr	r3, [pc, #380]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c58:	e010      	b.n	8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010c5a:	4b5c      	ldr	r3, [pc, #368]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010c66:	d106      	bne.n	8010c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c6e:	d102      	bne.n	8010c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010c70:	4b59      	ldr	r3, [pc, #356]	; (8010dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c74:	e002      	b.n	8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010c7a:	e386      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010c7c:	e385      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010c7e:	4b57      	ldr	r3, [pc, #348]	; (8010ddc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c82:	e382      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010c84:	2300      	movs	r3, #0
 8010c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c88:	e37f      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8010c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c8e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8010c92:	430b      	orrs	r3, r1
 8010c94:	f040 80a7 	bne.w	8010de6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010c98:	4b4c      	ldr	r3, [pc, #304]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c9c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8010ca0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010ca8:	d055      	beq.n	8010d56 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010cb0:	f200 8096 	bhi.w	8010de0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010cba:	f000 8084 	beq.w	8010dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010cc4:	f200 808c 	bhi.w	8010de0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cce:	d030      	beq.n	8010d32 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cd6:	f200 8083 	bhi.w	8010de0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d004      	beq.n	8010cea <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010ce6:	d012      	beq.n	8010d0e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010ce8:	e07a      	b.n	8010de0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010cea:	4b38      	ldr	r3, [pc, #224]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010cf6:	d107      	bne.n	8010d08 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f000 fe0b 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d06:	e340      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d0c:	e33d      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010d0e:	4b2f      	ldr	r3, [pc, #188]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010d1a:	d107      	bne.n	8010d2c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d1c:	f107 0318 	add.w	r3, r7, #24
 8010d20:	4618      	mov	r0, r3
 8010d22:	f000 fb51 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d2a:	e32e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d30:	e32b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010d32:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d3e:	d107      	bne.n	8010d50 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d40:	f107 030c 	add.w	r3, r7, #12
 8010d44:	4618      	mov	r0, r3
 8010d46:	f000 fc93 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010d4e:	e31c      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010d50:	2300      	movs	r3, #0
 8010d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d54:	e319      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010d56:	4b1d      	ldr	r3, [pc, #116]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010d5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010d60:	4b1a      	ldr	r3, [pc, #104]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f003 0304 	and.w	r3, r3, #4
 8010d68:	2b04      	cmp	r3, #4
 8010d6a:	d10c      	bne.n	8010d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d109      	bne.n	8010d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010d72:	4b16      	ldr	r3, [pc, #88]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	08db      	lsrs	r3, r3, #3
 8010d78:	f003 0303 	and.w	r3, r3, #3
 8010d7c:	4a14      	ldr	r2, [pc, #80]	; (8010dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d84:	e01e      	b.n	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010d86:	4b11      	ldr	r3, [pc, #68]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d92:	d106      	bne.n	8010da2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d9a:	d102      	bne.n	8010da2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010d9c:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010da0:	e010      	b.n	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010da2:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010dae:	d106      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010db6:	d102      	bne.n	8010dbe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010db8:	4b07      	ldr	r3, [pc, #28]	; (8010dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010dbc:	e002      	b.n	8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010dc2:	e2e2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010dc4:	e2e1      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010dc6:	4b05      	ldr	r3, [pc, #20]	; (8010ddc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dca:	e2de      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010dcc:	58024400 	.word	0x58024400
 8010dd0:	03d09000 	.word	0x03d09000
 8010dd4:	003d0900 	.word	0x003d0900
 8010dd8:	017d7840 	.word	0x017d7840
 8010ddc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010de4:	e2d1      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010dea:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8010dee:	430b      	orrs	r3, r1
 8010df0:	f040 809c 	bne.w	8010f2c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010df4:	4b93      	ldr	r3, [pc, #588]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010df8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8010dfc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e04:	d054      	beq.n	8010eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e0c:	f200 808b 	bhi.w	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010e16:	f000 8083 	beq.w	8010f20 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010e20:	f200 8081 	bhi.w	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e2a:	d02f      	beq.n	8010e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e32:	d878      	bhi.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d004      	beq.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8010e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010e40:	d012      	beq.n	8010e68 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010e42:	e070      	b.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010e44:	4b7f      	ldr	r3, [pc, #508]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010e50:	d107      	bne.n	8010e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e56:	4618      	mov	r0, r3
 8010e58:	f000 fd5e 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e60:	e293      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e62:	2300      	movs	r3, #0
 8010e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e66:	e290      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010e68:	4b76      	ldr	r3, [pc, #472]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010e74:	d107      	bne.n	8010e86 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e76:	f107 0318 	add.w	r3, r7, #24
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 faa4 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010e84:	e281      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010e86:	2300      	movs	r3, #0
 8010e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e8a:	e27e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010e8c:	4b6d      	ldr	r3, [pc, #436]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e98:	d107      	bne.n	8010eaa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e9a:	f107 030c 	add.w	r3, r7, #12
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f000 fbe6 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010ea8:	e26f      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eae:	e26c      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010eb0:	4b64      	ldr	r3, [pc, #400]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010eb8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010eba:	4b62      	ldr	r3, [pc, #392]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f003 0304 	and.w	r3, r3, #4
 8010ec2:	2b04      	cmp	r3, #4
 8010ec4:	d10c      	bne.n	8010ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d109      	bne.n	8010ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ecc:	4b5d      	ldr	r3, [pc, #372]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	08db      	lsrs	r3, r3, #3
 8010ed2:	f003 0303 	and.w	r3, r3, #3
 8010ed6:	4a5c      	ldr	r2, [pc, #368]	; (8011048 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8010edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ede:	e01e      	b.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010ee0:	4b58      	ldr	r3, [pc, #352]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010eec:	d106      	bne.n	8010efc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010ef4:	d102      	bne.n	8010efc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010ef6:	4b55      	ldr	r3, [pc, #340]	; (801104c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010efa:	e010      	b.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010efc:	4b51      	ldr	r3, [pc, #324]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f08:	d106      	bne.n	8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010f10:	d102      	bne.n	8010f18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010f12:	4b4f      	ldr	r3, [pc, #316]	; (8011050 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f16:	e002      	b.n	8010f1e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010f1c:	e235      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010f1e:	e234      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010f20:	4b4c      	ldr	r3, [pc, #304]	; (8011054 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f24:	e231      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010f26:	2300      	movs	r3, #0
 8010f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f2a:	e22e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010f30:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010f34:	430b      	orrs	r3, r1
 8010f36:	f040 808f 	bne.w	8011058 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8010f3a:	4b42      	ldr	r3, [pc, #264]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f3e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010f42:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010f4a:	d06b      	beq.n	8011024 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010f52:	d874      	bhi.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010f5a:	d056      	beq.n	801100a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8010f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010f62:	d86c      	bhi.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010f6a:	d03b      	beq.n	8010fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010f72:	d864      	bhi.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f7a:	d021      	beq.n	8010fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f82:	d85c      	bhi.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d004      	beq.n	8010f94 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f90:	d004      	beq.n	8010f9c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010f92:	e054      	b.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010f94:	f7fe fa0a 	bl	800f3ac <HAL_RCC_GetPCLK1Freq>
 8010f98:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f9a:	e1f6      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010f9c:	4b29      	ldr	r3, [pc, #164]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010fa8:	d107      	bne.n	8010fba <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010faa:	f107 0318 	add.w	r3, r7, #24
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f000 fa0a 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010fb4:	69fb      	ldr	r3, [r7, #28]
 8010fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fb8:	e1e7      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fbe:	e1e4      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010fc0:	4b20      	ldr	r3, [pc, #128]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010fcc:	d107      	bne.n	8010fde <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fce:	f107 030c 	add.w	r3, r7, #12
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f000 fb4c 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010fdc:	e1d5      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fe2:	e1d2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010fe4:	4b17      	ldr	r3, [pc, #92]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f003 0304 	and.w	r3, r3, #4
 8010fec:	2b04      	cmp	r3, #4
 8010fee:	d109      	bne.n	8011004 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010ff0:	4b14      	ldr	r3, [pc, #80]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	08db      	lsrs	r3, r3, #3
 8010ff6:	f003 0303 	and.w	r3, r3, #3
 8010ffa:	4a13      	ldr	r2, [pc, #76]	; (8011048 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8011000:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011002:	e1c2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011004:	2300      	movs	r3, #0
 8011006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011008:	e1bf      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801100a:	4b0e      	ldr	r3, [pc, #56]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011016:	d102      	bne.n	801101e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011018:	4b0c      	ldr	r3, [pc, #48]	; (801104c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801101c:	e1b5      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011022:	e1b2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011024:	4b07      	ldr	r3, [pc, #28]	; (8011044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801102c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011030:	d102      	bne.n	8011038 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011032:	4b07      	ldr	r3, [pc, #28]	; (8011050 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011036:	e1a8      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801103c:	e1a5      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801103e:	2300      	movs	r3, #0
 8011040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011042:	e1a2      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011044:	58024400 	.word	0x58024400
 8011048:	03d09000 	.word	0x03d09000
 801104c:	003d0900 	.word	0x003d0900
 8011050:	017d7840 	.word	0x017d7840
 8011054:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011058:	e9d7 2300 	ldrd	r2, r3, [r7]
 801105c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8011060:	430b      	orrs	r3, r1
 8011062:	d173      	bne.n	801114c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011064:	4b9c      	ldr	r3, [pc, #624]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011068:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801106c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011074:	d02f      	beq.n	80110d6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801107c:	d863      	bhi.n	8011146 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011080:	2b00      	cmp	r3, #0
 8011082:	d004      	beq.n	801108e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801108a:	d012      	beq.n	80110b2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801108c:	e05b      	b.n	8011146 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801108e:	4b92      	ldr	r3, [pc, #584]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011096:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801109a:	d107      	bne.n	80110ac <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801109c:	f107 0318 	add.w	r3, r7, #24
 80110a0:	4618      	mov	r0, r3
 80110a2:	f000 f991 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110aa:	e16e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110b0:	e16b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80110b2:	4b89      	ldr	r3, [pc, #548]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80110ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80110be:	d107      	bne.n	80110d0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110c0:	f107 030c 	add.w	r3, r7, #12
 80110c4:	4618      	mov	r0, r3
 80110c6:	f000 fad3 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110ce:	e15c      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80110d0:	2300      	movs	r3, #0
 80110d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110d4:	e159      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80110d6:	4b80      	ldr	r3, [pc, #512]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80110de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80110e0:	4b7d      	ldr	r3, [pc, #500]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f003 0304 	and.w	r3, r3, #4
 80110e8:	2b04      	cmp	r3, #4
 80110ea:	d10c      	bne.n	8011106 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80110ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d109      	bne.n	8011106 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80110f2:	4b79      	ldr	r3, [pc, #484]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	08db      	lsrs	r3, r3, #3
 80110f8:	f003 0303 	and.w	r3, r3, #3
 80110fc:	4a77      	ldr	r2, [pc, #476]	; (80112dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80110fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011104:	e01e      	b.n	8011144 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011106:	4b74      	ldr	r3, [pc, #464]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801110e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011112:	d106      	bne.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801111a:	d102      	bne.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801111c:	4b70      	ldr	r3, [pc, #448]	; (80112e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801111e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011120:	e010      	b.n	8011144 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011122:	4b6d      	ldr	r3, [pc, #436]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801112a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801112e:	d106      	bne.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011136:	d102      	bne.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011138:	4b6a      	ldr	r3, [pc, #424]	; (80112e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801113a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801113c:	e002      	b.n	8011144 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801113e:	2300      	movs	r3, #0
 8011140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011142:	e122      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011144:	e121      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011146:	2300      	movs	r3, #0
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801114a:	e11e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801114c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011150:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8011154:	430b      	orrs	r3, r1
 8011156:	d133      	bne.n	80111c0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011158:	4b5f      	ldr	r3, [pc, #380]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011160:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011164:	2b00      	cmp	r3, #0
 8011166:	d004      	beq.n	8011172 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801116e:	d012      	beq.n	8011196 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011170:	e023      	b.n	80111ba <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011172:	4b59      	ldr	r3, [pc, #356]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801117a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801117e:	d107      	bne.n	8011190 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011184:	4618      	mov	r0, r3
 8011186:	f000 fbc7 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801118e:	e0fc      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011190:	2300      	movs	r3, #0
 8011192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011194:	e0f9      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011196:	4b50      	ldr	r3, [pc, #320]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801119e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80111a2:	d107      	bne.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111a4:	f107 0318 	add.w	r3, r7, #24
 80111a8:	4618      	mov	r0, r3
 80111aa:	f000 f90d 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111b2:	e0ea      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111b8:	e0e7      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111be:	e0e4      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80111c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111c4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80111c8:	430b      	orrs	r3, r1
 80111ca:	f040 808d 	bne.w	80112e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80111ce:	4b42      	ldr	r3, [pc, #264]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80111d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80111d6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80111d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80111de:	d06b      	beq.n	80112b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80111e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80111e6:	d874      	bhi.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80111e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111ee:	d056      	beq.n	801129e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80111f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111f6:	d86c      	bhi.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80111f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80111fe:	d03b      	beq.n	8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011206:	d864      	bhi.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801120e:	d021      	beq.n	8011254 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011216:	d85c      	bhi.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801121a:	2b00      	cmp	r3, #0
 801121c:	d004      	beq.n	8011228 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011224:	d004      	beq.n	8011230 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011226:	e054      	b.n	80112d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011228:	f000 f8b8 	bl	801139c <HAL_RCCEx_GetD3PCLK1Freq>
 801122c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801122e:	e0ac      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011230:	4b29      	ldr	r3, [pc, #164]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801123c:	d107      	bne.n	801124e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801123e:	f107 0318 	add.w	r3, r7, #24
 8011242:	4618      	mov	r0, r3
 8011244:	f000 f8c0 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801124c:	e09d      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801124e:	2300      	movs	r3, #0
 8011250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011252:	e09a      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011254:	4b20      	ldr	r3, [pc, #128]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801125c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011260:	d107      	bne.n	8011272 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011262:	f107 030c 	add.w	r3, r7, #12
 8011266:	4618      	mov	r0, r3
 8011268:	f000 fa02 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011270:	e08b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011272:	2300      	movs	r3, #0
 8011274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011276:	e088      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011278:	4b17      	ldr	r3, [pc, #92]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f003 0304 	and.w	r3, r3, #4
 8011280:	2b04      	cmp	r3, #4
 8011282:	d109      	bne.n	8011298 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011284:	4b14      	ldr	r3, [pc, #80]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	08db      	lsrs	r3, r3, #3
 801128a:	f003 0303 	and.w	r3, r3, #3
 801128e:	4a13      	ldr	r2, [pc, #76]	; (80112dc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011290:	fa22 f303 	lsr.w	r3, r2, r3
 8011294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011296:	e078      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011298:	2300      	movs	r3, #0
 801129a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801129c:	e075      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801129e:	4b0e      	ldr	r3, [pc, #56]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80112a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112aa:	d102      	bne.n	80112b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80112ac:	4b0c      	ldr	r3, [pc, #48]	; (80112e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80112ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112b0:	e06b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80112b2:	2300      	movs	r3, #0
 80112b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112b6:	e068      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80112b8:	4b07      	ldr	r3, [pc, #28]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80112c4:	d102      	bne.n	80112cc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80112c6:	4b07      	ldr	r3, [pc, #28]	; (80112e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80112c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80112ca:	e05e      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80112cc:	2300      	movs	r3, #0
 80112ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d0:	e05b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d6:	e058      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80112d8:	58024400 	.word	0x58024400
 80112dc:	03d09000 	.word	0x03d09000
 80112e0:	003d0900 	.word	0x003d0900
 80112e4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80112e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80112ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80112f0:	430b      	orrs	r3, r1
 80112f2:	d148      	bne.n	8011386 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80112f4:	4b27      	ldr	r3, [pc, #156]	; (8011394 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80112f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80112fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80112fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011304:	d02a      	beq.n	801135c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8011306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801130c:	d838      	bhi.n	8011380 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801130e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011310:	2b00      	cmp	r3, #0
 8011312:	d004      	beq.n	801131e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801131a:	d00d      	beq.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801131c:	e030      	b.n	8011380 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801131e:	4b1d      	ldr	r3, [pc, #116]	; (8011394 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801132a:	d102      	bne.n	8011332 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801132c:	4b1a      	ldr	r3, [pc, #104]	; (8011398 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801132e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011330:	e02b      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011336:	e028      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011338:	4b16      	ldr	r3, [pc, #88]	; (8011394 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011344:	d107      	bne.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801134a:	4618      	mov	r0, r3
 801134c:	f000 fae4 	bl	8011918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011354:	e019      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011356:	2300      	movs	r3, #0
 8011358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801135a:	e016      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801135c:	4b0d      	ldr	r3, [pc, #52]	; (8011394 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011368:	d107      	bne.n	801137a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801136a:	f107 0318 	add.w	r3, r7, #24
 801136e:	4618      	mov	r0, r3
 8011370:	f000 f82a 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011378:	e007      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801137a:	2300      	movs	r3, #0
 801137c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801137e:	e004      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011380:	2300      	movs	r3, #0
 8011382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011384:	e001      	b.n	801138a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8011386:	2300      	movs	r3, #0
 8011388:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801138a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801138c:	4618      	mov	r0, r3
 801138e:	3740      	adds	r7, #64	; 0x40
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	58024400 	.word	0x58024400
 8011398:	017d7840 	.word	0x017d7840

0801139c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80113a0:	f7fd ffd4 	bl	800f34c <HAL_RCC_GetHCLKFreq>
 80113a4:	4602      	mov	r2, r0
 80113a6:	4b06      	ldr	r3, [pc, #24]	; (80113c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80113a8:	6a1b      	ldr	r3, [r3, #32]
 80113aa:	091b      	lsrs	r3, r3, #4
 80113ac:	f003 0307 	and.w	r3, r3, #7
 80113b0:	4904      	ldr	r1, [pc, #16]	; (80113c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80113b2:	5ccb      	ldrb	r3, [r1, r3]
 80113b4:	f003 031f 	and.w	r3, r3, #31
 80113b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80113bc:	4618      	mov	r0, r3
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	58024400 	.word	0x58024400
 80113c4:	0801b9b4 	.word	0x0801b9b4

080113c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b089      	sub	sp, #36	; 0x24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80113d0:	4ba1      	ldr	r3, [pc, #644]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80113d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d4:	f003 0303 	and.w	r3, r3, #3
 80113d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80113da:	4b9f      	ldr	r3, [pc, #636]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80113dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113de:	0b1b      	lsrs	r3, r3, #12
 80113e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80113e6:	4b9c      	ldr	r3, [pc, #624]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80113e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ea:	091b      	lsrs	r3, r3, #4
 80113ec:	f003 0301 	and.w	r3, r3, #1
 80113f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80113f2:	4b99      	ldr	r3, [pc, #612]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80113f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113f6:	08db      	lsrs	r3, r3, #3
 80113f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80113fc:	693a      	ldr	r2, [r7, #16]
 80113fe:	fb02 f303 	mul.w	r3, r2, r3
 8011402:	ee07 3a90 	vmov	s15, r3
 8011406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801140a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 8111 	beq.w	8011638 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	2b02      	cmp	r3, #2
 801141a:	f000 8083 	beq.w	8011524 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	2b02      	cmp	r3, #2
 8011422:	f200 80a1 	bhi.w	8011568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d003      	beq.n	8011434 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801142c:	69bb      	ldr	r3, [r7, #24]
 801142e:	2b01      	cmp	r3, #1
 8011430:	d056      	beq.n	80114e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011432:	e099      	b.n	8011568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011434:	4b88      	ldr	r3, [pc, #544]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f003 0320 	and.w	r3, r3, #32
 801143c:	2b00      	cmp	r3, #0
 801143e:	d02d      	beq.n	801149c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011440:	4b85      	ldr	r3, [pc, #532]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	08db      	lsrs	r3, r3, #3
 8011446:	f003 0303 	and.w	r3, r3, #3
 801144a:	4a84      	ldr	r2, [pc, #528]	; (801165c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801144c:	fa22 f303 	lsr.w	r3, r2, r3
 8011450:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	ee07 3a90 	vmov	s15, r3
 8011458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	ee07 3a90 	vmov	s15, r3
 8011462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801146a:	4b7b      	ldr	r3, [pc, #492]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801146e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011472:	ee07 3a90 	vmov	s15, r3
 8011476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801147a:	ed97 6a03 	vldr	s12, [r7, #12]
 801147e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801148a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801148e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801149a:	e087      	b.n	80115ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	ee07 3a90 	vmov	s15, r3
 80114a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8011664 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80114aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114ae:	4b6a      	ldr	r3, [pc, #424]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80114b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114b6:	ee07 3a90 	vmov	s15, r3
 80114ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80114be:	ed97 6a03 	vldr	s12, [r7, #12]
 80114c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80114c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80114ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80114ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80114de:	e065      	b.n	80115ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	ee07 3a90 	vmov	s15, r3
 80114e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80114ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80114ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80114f2:	4b59      	ldr	r3, [pc, #356]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80114f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114fa:	ee07 3a90 	vmov	s15, r3
 80114fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011502:	ed97 6a03 	vldr	s12, [r7, #12]
 8011506:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801150a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801150e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801151e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011522:	e043      	b.n	80115ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	ee07 3a90 	vmov	s15, r3
 801152a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801152e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801166c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8011532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011536:	4b48      	ldr	r3, [pc, #288]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801153e:	ee07 3a90 	vmov	s15, r3
 8011542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011546:	ed97 6a03 	vldr	s12, [r7, #12]
 801154a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801154e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801155a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011566:	e021      	b.n	80115ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	ee07 3a90 	vmov	s15, r3
 801156e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801157a:	4b37      	ldr	r3, [pc, #220]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801157c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801157e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011582:	ee07 3a90 	vmov	s15, r3
 8011586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801158a:	ed97 6a03 	vldr	s12, [r7, #12]
 801158e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801159a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801159e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80115aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80115ac:	4b2a      	ldr	r3, [pc, #168]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b0:	0a5b      	lsrs	r3, r3, #9
 80115b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115b6:	ee07 3a90 	vmov	s15, r3
 80115ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80115ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115d2:	ee17 2a90 	vmov	r2, s15
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80115da:	4b1f      	ldr	r3, [pc, #124]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80115dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115de:	0c1b      	lsrs	r3, r3, #16
 80115e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115e4:	ee07 3a90 	vmov	s15, r3
 80115e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80115f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80115f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80115f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80115fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011600:	ee17 2a90 	vmov	r2, s15
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011608:	4b13      	ldr	r3, [pc, #76]	; (8011658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801160c:	0e1b      	lsrs	r3, r3, #24
 801160e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011612:	ee07 3a90 	vmov	s15, r3
 8011616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801161a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801161e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011622:	edd7 6a07 	vldr	s13, [r7, #28]
 8011626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801162a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801162e:	ee17 2a90 	vmov	r2, s15
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011636:	e008      	b.n	801164a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2200      	movs	r2, #0
 801163c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2200      	movs	r2, #0
 8011648:	609a      	str	r2, [r3, #8]
}
 801164a:	bf00      	nop
 801164c:	3724      	adds	r7, #36	; 0x24
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	58024400 	.word	0x58024400
 801165c:	03d09000 	.word	0x03d09000
 8011660:	46000000 	.word	0x46000000
 8011664:	4c742400 	.word	0x4c742400
 8011668:	4a742400 	.word	0x4a742400
 801166c:	4bbebc20 	.word	0x4bbebc20

08011670 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8011670:	b480      	push	{r7}
 8011672:	b089      	sub	sp, #36	; 0x24
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011678:	4ba1      	ldr	r3, [pc, #644]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801167c:	f003 0303 	and.w	r3, r3, #3
 8011680:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8011682:	4b9f      	ldr	r3, [pc, #636]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011686:	0d1b      	lsrs	r3, r3, #20
 8011688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801168c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801168e:	4b9c      	ldr	r3, [pc, #624]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011692:	0a1b      	lsrs	r3, r3, #8
 8011694:	f003 0301 	and.w	r3, r3, #1
 8011698:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801169a:	4b99      	ldr	r3, [pc, #612]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801169e:	08db      	lsrs	r3, r3, #3
 80116a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80116a4:	693a      	ldr	r2, [r7, #16]
 80116a6:	fb02 f303 	mul.w	r3, r2, r3
 80116aa:	ee07 3a90 	vmov	s15, r3
 80116ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80116b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f000 8111 	beq.w	80118e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80116be:	69bb      	ldr	r3, [r7, #24]
 80116c0:	2b02      	cmp	r3, #2
 80116c2:	f000 8083 	beq.w	80117cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	f200 80a1 	bhi.w	8011810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d003      	beq.n	80116dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d056      	beq.n	8011788 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80116da:	e099      	b.n	8011810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80116dc:	4b88      	ldr	r3, [pc, #544]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 0320 	and.w	r3, r3, #32
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d02d      	beq.n	8011744 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80116e8:	4b85      	ldr	r3, [pc, #532]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	08db      	lsrs	r3, r3, #3
 80116ee:	f003 0303 	and.w	r3, r3, #3
 80116f2:	4a84      	ldr	r2, [pc, #528]	; (8011904 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80116f4:	fa22 f303 	lsr.w	r3, r2, r3
 80116f8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	ee07 3a90 	vmov	s15, r3
 8011700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	ee07 3a90 	vmov	s15, r3
 801170a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801170e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011712:	4b7b      	ldr	r3, [pc, #492]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801171a:	ee07 3a90 	vmov	s15, r3
 801171e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011722:	ed97 6a03 	vldr	s12, [r7, #12]
 8011726:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801172a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801172e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801173e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011742:	e087      	b.n	8011854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	ee07 3a90 	vmov	s15, r3
 801174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801174e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801190c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8011752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011756:	4b6a      	ldr	r3, [pc, #424]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801175e:	ee07 3a90 	vmov	s15, r3
 8011762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011766:	ed97 6a03 	vldr	s12, [r7, #12]
 801176a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801176e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801177a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011786:	e065      	b.n	8011854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	ee07 3a90 	vmov	s15, r3
 801178e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011792:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801179a:	4b59      	ldr	r3, [pc, #356]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a2:	ee07 3a90 	vmov	s15, r3
 80117a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80117ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80117b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80117be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80117ca:	e043      	b.n	8011854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	ee07 3a90 	vmov	s15, r3
 80117d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80117d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80117da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117de:	4b48      	ldr	r3, [pc, #288]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80117e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117e6:	ee07 3a90 	vmov	s15, r3
 80117ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80117ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80117f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80117f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80117fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80117fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011806:	ee67 7a27 	vmul.f32	s15, s14, s15
 801180a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801180e:	e021      	b.n	8011854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	ee07 3a90 	vmov	s15, r3
 8011816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801181a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801181e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011822:	4b37      	ldr	r3, [pc, #220]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801182a:	ee07 3a90 	vmov	s15, r3
 801182e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011832:	ed97 6a03 	vldr	s12, [r7, #12]
 8011836:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801183a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801183e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801184a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801184e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011852:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8011854:	4b2a      	ldr	r3, [pc, #168]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011858:	0a5b      	lsrs	r3, r3, #9
 801185a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801185e:	ee07 3a90 	vmov	s15, r3
 8011862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801186a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801186e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801187a:	ee17 2a90 	vmov	r2, s15
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8011882:	4b1f      	ldr	r3, [pc, #124]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011886:	0c1b      	lsrs	r3, r3, #16
 8011888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801188c:	ee07 3a90 	vmov	s15, r3
 8011890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011898:	ee37 7a87 	vadd.f32	s14, s15, s14
 801189c:	edd7 6a07 	vldr	s13, [r7, #28]
 80118a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118a8:	ee17 2a90 	vmov	r2, s15
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80118b0:	4b13      	ldr	r3, [pc, #76]	; (8011900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80118b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b4:	0e1b      	lsrs	r3, r3, #24
 80118b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118ba:	ee07 3a90 	vmov	s15, r3
 80118be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80118ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80118ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80118d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118d6:	ee17 2a90 	vmov	r2, s15
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80118de:	e008      	b.n	80118f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	609a      	str	r2, [r3, #8]
}
 80118f2:	bf00      	nop
 80118f4:	3724      	adds	r7, #36	; 0x24
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	58024400 	.word	0x58024400
 8011904:	03d09000 	.word	0x03d09000
 8011908:	46000000 	.word	0x46000000
 801190c:	4c742400 	.word	0x4c742400
 8011910:	4a742400 	.word	0x4a742400
 8011914:	4bbebc20 	.word	0x4bbebc20

08011918 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011918:	b480      	push	{r7}
 801191a:	b089      	sub	sp, #36	; 0x24
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011920:	4ba0      	ldr	r3, [pc, #640]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011924:	f003 0303 	and.w	r3, r3, #3
 8011928:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801192a:	4b9e      	ldr	r3, [pc, #632]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192e:	091b      	lsrs	r3, r3, #4
 8011930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011934:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011936:	4b9b      	ldr	r3, [pc, #620]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801193a:	f003 0301 	and.w	r3, r3, #1
 801193e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011940:	4b98      	ldr	r3, [pc, #608]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011944:	08db      	lsrs	r3, r3, #3
 8011946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801194a:	693a      	ldr	r2, [r7, #16]
 801194c:	fb02 f303 	mul.w	r3, r2, r3
 8011950:	ee07 3a90 	vmov	s15, r3
 8011954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011958:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	2b00      	cmp	r3, #0
 8011960:	f000 8111 	beq.w	8011b86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	2b02      	cmp	r3, #2
 8011968:	f000 8083 	beq.w	8011a72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	2b02      	cmp	r3, #2
 8011970:	f200 80a1 	bhi.w	8011ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d003      	beq.n	8011982 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	2b01      	cmp	r3, #1
 801197e:	d056      	beq.n	8011a2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011980:	e099      	b.n	8011ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011982:	4b88      	ldr	r3, [pc, #544]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f003 0320 	and.w	r3, r3, #32
 801198a:	2b00      	cmp	r3, #0
 801198c:	d02d      	beq.n	80119ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801198e:	4b85      	ldr	r3, [pc, #532]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	08db      	lsrs	r3, r3, #3
 8011994:	f003 0303 	and.w	r3, r3, #3
 8011998:	4a83      	ldr	r2, [pc, #524]	; (8011ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801199a:	fa22 f303 	lsr.w	r3, r2, r3
 801199e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	ee07 3a90 	vmov	s15, r3
 80119a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	ee07 3a90 	vmov	s15, r3
 80119b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119b8:	4b7a      	ldr	r3, [pc, #488]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80119ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119c0:	ee07 3a90 	vmov	s15, r3
 80119c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80119cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80119d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80119dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80119e8:	e087      	b.n	8011afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	ee07 3a90 	vmov	s15, r3
 80119f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80119f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119fc:	4b69      	ldr	r3, [pc, #420]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80119fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a04:	ee07 3a90 	vmov	s15, r3
 8011a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a10:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a2c:	e065      	b.n	8011afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	ee07 3a90 	vmov	s15, r3
 8011a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a40:	4b58      	ldr	r3, [pc, #352]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a48:	ee07 3a90 	vmov	s15, r3
 8011a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a50:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a54:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a70:	e043      	b.n	8011afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	ee07 3a90 	vmov	s15, r3
 8011a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a84:	4b47      	ldr	r3, [pc, #284]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a8c:	ee07 3a90 	vmov	s15, r3
 8011a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a98:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ab0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011ab4:	e021      	b.n	8011afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	ee07 3a90 	vmov	s15, r3
 8011abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ac0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ac8:	4b36      	ldr	r3, [pc, #216]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ad0:	ee07 3a90 	vmov	s15, r3
 8011ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ad8:	ed97 6a03 	vldr	s12, [r7, #12]
 8011adc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011af4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011af8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011afa:	4b2a      	ldr	r3, [pc, #168]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011afe:	0a5b      	lsrs	r3, r3, #9
 8011b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b04:	ee07 3a90 	vmov	s15, r3
 8011b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b20:	ee17 2a90 	vmov	r2, s15
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011b28:	4b1e      	ldr	r3, [pc, #120]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b2c:	0c1b      	lsrs	r3, r3, #16
 8011b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b32:	ee07 3a90 	vmov	s15, r3
 8011b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b4e:	ee17 2a90 	vmov	r2, s15
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011b56:	4b13      	ldr	r3, [pc, #76]	; (8011ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5a:	0e1b      	lsrs	r3, r3, #24
 8011b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b60:	ee07 3a90 	vmov	s15, r3
 8011b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b7c:	ee17 2a90 	vmov	r2, s15
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011b84:	e008      	b.n	8011b98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	609a      	str	r2, [r3, #8]
}
 8011b98:	bf00      	nop
 8011b9a:	3724      	adds	r7, #36	; 0x24
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba2:	4770      	bx	lr
 8011ba4:	58024400 	.word	0x58024400
 8011ba8:	03d09000 	.word	0x03d09000
 8011bac:	46000000 	.word	0x46000000
 8011bb0:	4c742400 	.word	0x4c742400
 8011bb4:	4a742400 	.word	0x4a742400
 8011bb8:	4bbebc20 	.word	0x4bbebc20

08011bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011bca:	4b53      	ldr	r3, [pc, #332]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bce:	f003 0303 	and.w	r3, r3, #3
 8011bd2:	2b03      	cmp	r3, #3
 8011bd4:	d101      	bne.n	8011bda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	e099      	b.n	8011d0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011bda:	4b4f      	ldr	r3, [pc, #316]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a4e      	ldr	r2, [pc, #312]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011be6:	f7f4 fbb3 	bl	8006350 <HAL_GetTick>
 8011bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011bec:	e008      	b.n	8011c00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011bee:	f7f4 fbaf 	bl	8006350 <HAL_GetTick>
 8011bf2:	4602      	mov	r2, r0
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	2b02      	cmp	r3, #2
 8011bfa:	d901      	bls.n	8011c00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	e086      	b.n	8011d0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011c00:	4b45      	ldr	r3, [pc, #276]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d1f0      	bne.n	8011bee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011c0c:	4b42      	ldr	r3, [pc, #264]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	031b      	lsls	r3, r3, #12
 8011c1a:	493f      	ldr	r1, [pc, #252]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	3b01      	subs	r3, #1
 8011c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	689b      	ldr	r3, [r3, #8]
 8011c2e:	3b01      	subs	r3, #1
 8011c30:	025b      	lsls	r3, r3, #9
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	431a      	orrs	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	041b      	lsls	r3, r3, #16
 8011c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011c42:	431a      	orrs	r2, r3
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	061b      	lsls	r3, r3, #24
 8011c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011c50:	4931      	ldr	r1, [pc, #196]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c52:	4313      	orrs	r3, r2
 8011c54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011c56:	4b30      	ldr	r3, [pc, #192]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	695b      	ldr	r3, [r3, #20]
 8011c62:	492d      	ldr	r1, [pc, #180]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c64:	4313      	orrs	r3, r2
 8011c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011c68:	4b2b      	ldr	r3, [pc, #172]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6c:	f023 0220 	bic.w	r2, r3, #32
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	4928      	ldr	r1, [pc, #160]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c76:	4313      	orrs	r3, r2
 8011c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011c7a:	4b27      	ldr	r3, [pc, #156]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7e:	4a26      	ldr	r2, [pc, #152]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c80:	f023 0310 	bic.w	r3, r3, #16
 8011c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011c86:	4b24      	ldr	r3, [pc, #144]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c8a:	4b24      	ldr	r3, [pc, #144]	; (8011d1c <RCCEx_PLL2_Config+0x160>)
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	69d2      	ldr	r2, [r2, #28]
 8011c92:	00d2      	lsls	r2, r2, #3
 8011c94:	4920      	ldr	r1, [pc, #128]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c96:	4313      	orrs	r3, r2
 8011c98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011c9a:	4b1f      	ldr	r3, [pc, #124]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9e:	4a1e      	ldr	r2, [pc, #120]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011ca0:	f043 0310 	orr.w	r3, r3, #16
 8011ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d106      	bne.n	8011cba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011cac:	4b1a      	ldr	r3, [pc, #104]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb0:	4a19      	ldr	r2, [pc, #100]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011cb8:	e00f      	b.n	8011cda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d106      	bne.n	8011cce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011cc0:	4b15      	ldr	r3, [pc, #84]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc4:	4a14      	ldr	r2, [pc, #80]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011ccc:	e005      	b.n	8011cda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011cce:	4b12      	ldr	r3, [pc, #72]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd2:	4a11      	ldr	r2, [pc, #68]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011cda:	4b0f      	ldr	r3, [pc, #60]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4a0e      	ldr	r2, [pc, #56]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011ce6:	f7f4 fb33 	bl	8006350 <HAL_GetTick>
 8011cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011cec:	e008      	b.n	8011d00 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011cee:	f7f4 fb2f 	bl	8006350 <HAL_GetTick>
 8011cf2:	4602      	mov	r2, r0
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d901      	bls.n	8011d00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011cfc:	2303      	movs	r3, #3
 8011cfe:	e006      	b.n	8011d0e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011d00:	4b05      	ldr	r3, [pc, #20]	; (8011d18 <RCCEx_PLL2_Config+0x15c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d0f0      	beq.n	8011cee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	58024400 	.word	0x58024400
 8011d1c:	ffff0007 	.word	0xffff0007

08011d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b084      	sub	sp, #16
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011d2e:	4b53      	ldr	r3, [pc, #332]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d32:	f003 0303 	and.w	r3, r3, #3
 8011d36:	2b03      	cmp	r3, #3
 8011d38:	d101      	bne.n	8011d3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e099      	b.n	8011e72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011d3e:	4b4f      	ldr	r3, [pc, #316]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4a4e      	ldr	r2, [pc, #312]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011d4a:	f7f4 fb01 	bl	8006350 <HAL_GetTick>
 8011d4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011d50:	e008      	b.n	8011d64 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011d52:	f7f4 fafd 	bl	8006350 <HAL_GetTick>
 8011d56:	4602      	mov	r2, r0
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	1ad3      	subs	r3, r2, r3
 8011d5c:	2b02      	cmp	r3, #2
 8011d5e:	d901      	bls.n	8011d64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011d60:	2303      	movs	r3, #3
 8011d62:	e086      	b.n	8011e72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011d64:	4b45      	ldr	r3, [pc, #276]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d1f0      	bne.n	8011d52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011d70:	4b42      	ldr	r3, [pc, #264]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	051b      	lsls	r3, r3, #20
 8011d7e:	493f      	ldr	r1, [pc, #252]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011d80:	4313      	orrs	r3, r2
 8011d82:	628b      	str	r3, [r1, #40]	; 0x28
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	689b      	ldr	r3, [r3, #8]
 8011d92:	3b01      	subs	r3, #1
 8011d94:	025b      	lsls	r3, r3, #9
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	431a      	orrs	r2, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	041b      	lsls	r3, r3, #16
 8011da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011da6:	431a      	orrs	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	691b      	ldr	r3, [r3, #16]
 8011dac:	3b01      	subs	r3, #1
 8011dae:	061b      	lsls	r3, r3, #24
 8011db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011db4:	4931      	ldr	r1, [pc, #196]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011db6:	4313      	orrs	r3, r2
 8011db8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011dba:	4b30      	ldr	r3, [pc, #192]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	492d      	ldr	r1, [pc, #180]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dc8:	4313      	orrs	r3, r2
 8011dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011dcc:	4b2b      	ldr	r3, [pc, #172]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	699b      	ldr	r3, [r3, #24]
 8011dd8:	4928      	ldr	r1, [pc, #160]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dda:	4313      	orrs	r3, r2
 8011ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011dde:	4b27      	ldr	r3, [pc, #156]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de2:	4a26      	ldr	r2, [pc, #152]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011dea:	4b24      	ldr	r3, [pc, #144]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011dee:	4b24      	ldr	r3, [pc, #144]	; (8011e80 <RCCEx_PLL3_Config+0x160>)
 8011df0:	4013      	ands	r3, r2
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	69d2      	ldr	r2, [r2, #28]
 8011df6:	00d2      	lsls	r2, r2, #3
 8011df8:	4920      	ldr	r1, [pc, #128]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011dfe:	4b1f      	ldr	r3, [pc, #124]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e02:	4a1e      	ldr	r2, [pc, #120]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d106      	bne.n	8011e1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011e10:	4b1a      	ldr	r3, [pc, #104]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e14:	4a19      	ldr	r2, [pc, #100]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e1c:	e00f      	b.n	8011e3e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d106      	bne.n	8011e32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011e24:	4b15      	ldr	r3, [pc, #84]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e28:	4a14      	ldr	r2, [pc, #80]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e30:	e005      	b.n	8011e3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011e32:	4b12      	ldr	r3, [pc, #72]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e36:	4a11      	ldr	r2, [pc, #68]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011e3e:	4b0f      	ldr	r3, [pc, #60]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4a0e      	ldr	r2, [pc, #56]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011e4a:	f7f4 fa81 	bl	8006350 <HAL_GetTick>
 8011e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011e50:	e008      	b.n	8011e64 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011e52:	f7f4 fa7d 	bl	8006350 <HAL_GetTick>
 8011e56:	4602      	mov	r2, r0
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	2b02      	cmp	r3, #2
 8011e5e:	d901      	bls.n	8011e64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011e60:	2303      	movs	r3, #3
 8011e62:	e006      	b.n	8011e72 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011e64:	4b05      	ldr	r3, [pc, #20]	; (8011e7c <RCCEx_PLL3_Config+0x15c>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d0f0      	beq.n	8011e52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	58024400 	.word	0x58024400
 8011e80:	ffff0007 	.word	0xffff0007

08011e84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d071      	beq.n	8011f7a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7f2 f8d8 	bl	8004060 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	f003 0310 	and.w	r3, r3, #16
 8011ec2:	2b10      	cmp	r3, #16
 8011ec4:	d050      	beq.n	8011f68 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	22ca      	movs	r2, #202	; 0xca
 8011ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2253      	movs	r2, #83	; 0x53
 8011ed4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 fa4a 	bl	8012370 <RTC_EnterInitMode>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011ee0:	7bfb      	ldrb	r3, [r7, #15]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d124      	bne.n	8011f30 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	6899      	ldr	r1, [r3, #8]
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	4b24      	ldr	r3, [pc, #144]	; (8011f84 <HAL_RTC_Init+0x100>)
 8011ef2:	400b      	ands	r3, r1
 8011ef4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	6899      	ldr	r1, [r3, #8]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	691b      	ldr	r3, [r3, #16]
 8011f04:	431a      	orrs	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	699b      	ldr	r3, [r3, #24]
 8011f0a:	431a      	orrs	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	430a      	orrs	r2, r1
 8011f12:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	0419      	lsls	r1, r3, #16
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	68da      	ldr	r2, [r3, #12]
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	430a      	orrs	r2, r1
 8011f24:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f000 fa56 	bl	80123d8 <RTC_ExitInitMode>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011f30:	7bfb      	ldrb	r3, [r7, #15]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d113      	bne.n	8011f5e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	f022 0203 	bic.w	r2, r2, #3
 8011f44:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	69da      	ldr	r2, [r3, #28]
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	695b      	ldr	r3, [r3, #20]
 8011f54:	431a      	orrs	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	430a      	orrs	r2, r1
 8011f5c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	22ff      	movs	r2, #255	; 0xff
 8011f64:	625a      	str	r2, [r3, #36]	; 0x24
 8011f66:	e001      	b.n	8011f6c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8011f6c:	7bfb      	ldrb	r3, [r7, #15]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d103      	bne.n	8011f7a <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2201      	movs	r2, #1
 8011f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8011f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3710      	adds	r7, #16
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	ff8fffbf 	.word	0xff8fffbf

08011f88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8011f88:	b590      	push	{r4, r7, lr}
 8011f8a:	b087      	sub	sp, #28
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	60f8      	str	r0, [r7, #12]
 8011f90:	60b9      	str	r1, [r7, #8]
 8011f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d101      	bne.n	8011fa2 <HAL_RTC_SetTime+0x1a>
 8011f9e:	2302      	movs	r3, #2
 8011fa0:	e089      	b.n	80120b6 <HAL_RTC_SetTime+0x12e>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2202      	movs	r2, #2
 8011fae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	22ca      	movs	r2, #202	; 0xca
 8011fb8:	625a      	str	r2, [r3, #36]	; 0x24
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	2253      	movs	r2, #83	; 0x53
 8011fc0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011fc2:	68f8      	ldr	r0, [r7, #12]
 8011fc4:	f000 f9d4 	bl	8012370 <RTC_EnterInitMode>
 8011fc8:	4603      	mov	r3, r0
 8011fca:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011fcc:	7cfb      	ldrb	r3, [r7, #19]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d161      	bne.n	8012096 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d126      	bne.n	8012026 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	689b      	ldr	r3, [r3, #8]
 8011fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d102      	bne.n	8011fec <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	2200      	movs	r2, #0
 8011fea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f000 fa2f 	bl	8012454 <RTC_ByteToBcd2>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	785b      	ldrb	r3, [r3, #1]
 8011ffe:	4618      	mov	r0, r3
 8012000:	f000 fa28 	bl	8012454 <RTC_ByteToBcd2>
 8012004:	4603      	mov	r3, r0
 8012006:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012008:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	789b      	ldrb	r3, [r3, #2]
 801200e:	4618      	mov	r0, r3
 8012010:	f000 fa20 	bl	8012454 <RTC_ByteToBcd2>
 8012014:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012016:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	78db      	ldrb	r3, [r3, #3]
 801201e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012020:	4313      	orrs	r3, r2
 8012022:	617b      	str	r3, [r7, #20]
 8012024:	e018      	b.n	8012058 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012030:	2b00      	cmp	r3, #0
 8012032:	d102      	bne.n	801203a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	2200      	movs	r2, #0
 8012038:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	785b      	ldrb	r3, [r3, #1]
 8012044:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012046:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012048:	68ba      	ldr	r2, [r7, #8]
 801204a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801204c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	78db      	ldrb	r3, [r3, #3]
 8012052:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012054:	4313      	orrs	r3, r2
 8012056:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	6979      	ldr	r1, [r7, #20]
 801205e:	4b18      	ldr	r3, [pc, #96]	; (80120c0 <HAL_RTC_SetTime+0x138>)
 8012060:	400b      	ands	r3, r1
 8012062:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	689a      	ldr	r2, [r3, #8]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012072:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	6899      	ldr	r1, [r3, #8]
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	68da      	ldr	r2, [r3, #12]
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	691b      	ldr	r3, [r3, #16]
 8012082:	431a      	orrs	r2, r3
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	430a      	orrs	r2, r1
 801208a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 f9a3 	bl	80123d8 <RTC_ExitInitMode>
 8012092:	4603      	mov	r3, r0
 8012094:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	22ff      	movs	r2, #255	; 0xff
 801209c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801209e:	7cfb      	ldrb	r3, [r7, #19]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d103      	bne.n	80120ac <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2201      	movs	r2, #1
 80120a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2200      	movs	r2, #0
 80120b0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80120b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	371c      	adds	r7, #28
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd90      	pop	{r4, r7, pc}
 80120be:	bf00      	nop
 80120c0:	007f7f7f 	.word	0x007f7f7f

080120c4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	691b      	ldr	r3, [r3, #16]
 80120e0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	4b22      	ldr	r3, [pc, #136]	; (8012178 <HAL_RTC_GetTime+0xb4>)
 80120f0:	4013      	ands	r3, r2
 80120f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	0c1b      	lsrs	r3, r3, #16
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120fe:	b2da      	uxtb	r2, r3
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	0a1b      	lsrs	r3, r3, #8
 8012108:	b2db      	uxtb	r3, r3
 801210a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801210e:	b2da      	uxtb	r2, r3
 8012110:	68bb      	ldr	r3, [r7, #8]
 8012112:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	b2db      	uxtb	r3, r3
 8012118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801211c:	b2da      	uxtb	r2, r3
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	0d9b      	lsrs	r3, r3, #22
 8012126:	b2db      	uxtb	r3, r3
 8012128:	f003 0301 	and.w	r3, r3, #1
 801212c:	b2da      	uxtb	r2, r3
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d11a      	bne.n	801216e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	4618      	mov	r0, r3
 801213e:	f000 f9a9 	bl	8012494 <RTC_Bcd2ToByte>
 8012142:	4603      	mov	r3, r0
 8012144:	461a      	mov	r2, r3
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	785b      	ldrb	r3, [r3, #1]
 801214e:	4618      	mov	r0, r3
 8012150:	f000 f9a0 	bl	8012494 <RTC_Bcd2ToByte>
 8012154:	4603      	mov	r3, r0
 8012156:	461a      	mov	r2, r3
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	789b      	ldrb	r3, [r3, #2]
 8012160:	4618      	mov	r0, r3
 8012162:	f000 f997 	bl	8012494 <RTC_Bcd2ToByte>
 8012166:	4603      	mov	r3, r0
 8012168:	461a      	mov	r2, r3
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3718      	adds	r7, #24
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	007f7f7f 	.word	0x007f7f7f

0801217c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801217c:	b590      	push	{r4, r7, lr}
 801217e:	b087      	sub	sp, #28
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801218e:	2b01      	cmp	r3, #1
 8012190:	d101      	bne.n	8012196 <HAL_RTC_SetDate+0x1a>
 8012192:	2302      	movs	r3, #2
 8012194:	e073      	b.n	801227e <HAL_RTC_SetDate+0x102>
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2201      	movs	r2, #1
 801219a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2202      	movs	r2, #2
 80121a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d10e      	bne.n	80121ca <HAL_RTC_SetDate+0x4e>
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	785b      	ldrb	r3, [r3, #1]
 80121b0:	f003 0310 	and.w	r3, r3, #16
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d008      	beq.n	80121ca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	785b      	ldrb	r3, [r3, #1]
 80121bc:	f023 0310 	bic.w	r3, r3, #16
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	330a      	adds	r3, #10
 80121c4:	b2da      	uxtb	r2, r3
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d11c      	bne.n	801220a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	78db      	ldrb	r3, [r3, #3]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f000 f93d 	bl	8012454 <RTC_ByteToBcd2>
 80121da:	4603      	mov	r3, r0
 80121dc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	785b      	ldrb	r3, [r3, #1]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 f936 	bl	8012454 <RTC_ByteToBcd2>
 80121e8:	4603      	mov	r3, r0
 80121ea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80121ec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	789b      	ldrb	r3, [r3, #2]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f000 f92e 	bl	8012454 <RTC_ByteToBcd2>
 80121f8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80121fa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012204:	4313      	orrs	r3, r2
 8012206:	617b      	str	r3, [r7, #20]
 8012208:	e00e      	b.n	8012228 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	78db      	ldrb	r3, [r3, #3]
 801220e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	785b      	ldrb	r3, [r3, #1]
 8012214:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012216:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801221c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012224:	4313      	orrs	r3, r2
 8012226:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	22ca      	movs	r2, #202	; 0xca
 801222e:	625a      	str	r2, [r3, #36]	; 0x24
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	2253      	movs	r2, #83	; 0x53
 8012236:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012238:	68f8      	ldr	r0, [r7, #12]
 801223a:	f000 f899 	bl	8012370 <RTC_EnterInitMode>
 801223e:	4603      	mov	r3, r0
 8012240:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012242:	7cfb      	ldrb	r3, [r7, #19]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d10a      	bne.n	801225e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	6979      	ldr	r1, [r7, #20]
 801224e:	4b0e      	ldr	r3, [pc, #56]	; (8012288 <HAL_RTC_SetDate+0x10c>)
 8012250:	400b      	ands	r3, r1
 8012252:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f000 f8bf 	bl	80123d8 <RTC_ExitInitMode>
 801225a:	4603      	mov	r3, r0
 801225c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	22ff      	movs	r2, #255	; 0xff
 8012264:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012266:	7cfb      	ldrb	r3, [r7, #19]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d103      	bne.n	8012274 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2201      	movs	r2, #1
 8012270:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2200      	movs	r2, #0
 8012278:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 801227c:	7cfb      	ldrb	r3, [r7, #19]


}
 801227e:	4618      	mov	r0, r3
 8012280:	371c      	adds	r7, #28
 8012282:	46bd      	mov	sp, r7
 8012284:	bd90      	pop	{r4, r7, pc}
 8012286:	bf00      	nop
 8012288:	00ffff3f 	.word	0x00ffff3f

0801228c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	685a      	ldr	r2, [r3, #4]
 801229e:	4b21      	ldr	r3, [pc, #132]	; (8012324 <HAL_RTC_GetDate+0x98>)
 80122a0:	4013      	ands	r3, r2
 80122a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	0c1b      	lsrs	r3, r3, #16
 80122a8:	b2da      	uxtb	r2, r3
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	0a1b      	lsrs	r3, r3, #8
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	f003 031f 	and.w	r3, r3, #31
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80122c6:	b2da      	uxtb	r2, r3
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	0b5b      	lsrs	r3, r3, #13
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	f003 0307 	and.w	r3, r3, #7
 80122d6:	b2da      	uxtb	r2, r3
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d11a      	bne.n	8012318 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	78db      	ldrb	r3, [r3, #3]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f000 f8d4 	bl	8012494 <RTC_Bcd2ToByte>
 80122ec:	4603      	mov	r3, r0
 80122ee:	461a      	mov	r2, r3
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	785b      	ldrb	r3, [r3, #1]
 80122f8:	4618      	mov	r0, r3
 80122fa:	f000 f8cb 	bl	8012494 <RTC_Bcd2ToByte>
 80122fe:	4603      	mov	r3, r0
 8012300:	461a      	mov	r2, r3
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	789b      	ldrb	r3, [r3, #2]
 801230a:	4618      	mov	r0, r3
 801230c:	f000 f8c2 	bl	8012494 <RTC_Bcd2ToByte>
 8012310:	4603      	mov	r3, r0
 8012312:	461a      	mov	r2, r3
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	3718      	adds	r7, #24
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	00ffff3f 	.word	0x00ffff3f

08012328 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a0d      	ldr	r2, [pc, #52]	; (801236c <HAL_RTC_WaitForSynchro+0x44>)
 8012336:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8012338:	f7f4 f80a 	bl	8006350 <HAL_GetTick>
 801233c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801233e:	e009      	b.n	8012354 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012340:	f7f4 f806 	bl	8006350 <HAL_GetTick>
 8012344:	4602      	mov	r2, r0
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801234e:	d901      	bls.n	8012354 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8012350:	2303      	movs	r3, #3
 8012352:	e007      	b.n	8012364 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	f003 0320 	and.w	r3, r3, #32
 801235e:	2b00      	cmp	r3, #0
 8012360:	d0ee      	beq.n	8012340 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8012362:	2300      	movs	r3, #0
}
 8012364:	4618      	mov	r0, r3
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	0003ff5f 	.word	0x0003ff5f

08012370 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b084      	sub	sp, #16
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012378:	2300      	movs	r3, #0
 801237a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012386:	2b00      	cmp	r3, #0
 8012388:	d120      	bne.n	80123cc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012392:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8012394:	f7f3 ffdc 	bl	8006350 <HAL_GetTick>
 8012398:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801239a:	e00d      	b.n	80123b8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 801239c:	f7f3 ffd8 	bl	8006350 <HAL_GetTick>
 80123a0:	4602      	mov	r2, r0
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80123aa:	d905      	bls.n	80123b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80123ac:	2303      	movs	r3, #3
 80123ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2203      	movs	r2, #3
 80123b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d102      	bne.n	80123cc <RTC_EnterInitMode+0x5c>
 80123c6:	7bfb      	ldrb	r3, [r7, #15]
 80123c8:	2b03      	cmp	r3, #3
 80123ca:	d1e7      	bne.n	801239c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80123cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3710      	adds	r7, #16
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b084      	sub	sp, #16
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80123e0:	2300      	movs	r3, #0
 80123e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80123e4:	4b1a      	ldr	r3, [pc, #104]	; (8012450 <RTC_ExitInitMode+0x78>)
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	4a19      	ldr	r2, [pc, #100]	; (8012450 <RTC_ExitInitMode+0x78>)
 80123ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80123ee:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80123f0:	4b17      	ldr	r3, [pc, #92]	; (8012450 <RTC_ExitInitMode+0x78>)
 80123f2:	689b      	ldr	r3, [r3, #8]
 80123f4:	f003 0320 	and.w	r3, r3, #32
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d10c      	bne.n	8012416 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7ff ff93 	bl	8012328 <HAL_RTC_WaitForSynchro>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d01e      	beq.n	8012446 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2203      	movs	r2, #3
 801240c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012410:	2303      	movs	r3, #3
 8012412:	73fb      	strb	r3, [r7, #15]
 8012414:	e017      	b.n	8012446 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8012416:	4b0e      	ldr	r3, [pc, #56]	; (8012450 <RTC_ExitInitMode+0x78>)
 8012418:	689b      	ldr	r3, [r3, #8]
 801241a:	4a0d      	ldr	r2, [pc, #52]	; (8012450 <RTC_ExitInitMode+0x78>)
 801241c:	f023 0320 	bic.w	r3, r3, #32
 8012420:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f7ff ff80 	bl	8012328 <HAL_RTC_WaitForSynchro>
 8012428:	4603      	mov	r3, r0
 801242a:	2b00      	cmp	r3, #0
 801242c:	d005      	beq.n	801243a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2203      	movs	r2, #3
 8012432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8012436:	2303      	movs	r3, #3
 8012438:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801243a:	4b05      	ldr	r3, [pc, #20]	; (8012450 <RTC_ExitInitMode+0x78>)
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	4a04      	ldr	r2, [pc, #16]	; (8012450 <RTC_ExitInitMode+0x78>)
 8012440:	f043 0320 	orr.w	r3, r3, #32
 8012444:	6093      	str	r3, [r2, #8]
  }

  return status;
 8012446:	7bfb      	ldrb	r3, [r7, #15]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3710      	adds	r7, #16
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	58004000 	.word	0x58004000

08012454 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8012454:	b480      	push	{r7}
 8012456:	b085      	sub	sp, #20
 8012458:	af00      	add	r7, sp, #0
 801245a:	4603      	mov	r3, r0
 801245c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8012462:	79fb      	ldrb	r3, [r7, #7]
 8012464:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8012466:	e005      	b.n	8012474 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	3301      	adds	r3, #1
 801246c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 801246e:	7afb      	ldrb	r3, [r7, #11]
 8012470:	3b0a      	subs	r3, #10
 8012472:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8012474:	7afb      	ldrb	r3, [r7, #11]
 8012476:	2b09      	cmp	r3, #9
 8012478:	d8f6      	bhi.n	8012468 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	b2db      	uxtb	r3, r3
 801247e:	011b      	lsls	r3, r3, #4
 8012480:	b2da      	uxtb	r2, r3
 8012482:	7afb      	ldrb	r3, [r7, #11]
 8012484:	4313      	orrs	r3, r2
 8012486:	b2db      	uxtb	r3, r3
}
 8012488:	4618      	mov	r0, r3
 801248a:	3714      	adds	r7, #20
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	4603      	mov	r3, r0
 801249c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	091b      	lsrs	r3, r3, #4
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	461a      	mov	r2, r3
 80124a6:	0092      	lsls	r2, r2, #2
 80124a8:	4413      	add	r3, r2
 80124aa:	005b      	lsls	r3, r3, #1
 80124ac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80124ae:	79fb      	ldrb	r3, [r7, #7]
 80124b0:	f003 030f 	and.w	r3, r3, #15
 80124b4:	b2da      	uxtb	r2, r3
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	4413      	add	r3, r2
 80124ba:	b2db      	uxtb	r3, r3
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3714      	adds	r7, #20
 80124c0:	46bd      	mov	sp, r7
 80124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c6:	4770      	bx	lr

080124c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d101      	bne.n	80124da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80124d6:	2301      	movs	r3, #1
 80124d8:	e10f      	b.n	80126fa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2200      	movs	r2, #0
 80124de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	4a87      	ldr	r2, [pc, #540]	; (8012704 <HAL_SPI_Init+0x23c>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d00f      	beq.n	801250a <HAL_SPI_Init+0x42>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4a86      	ldr	r2, [pc, #536]	; (8012708 <HAL_SPI_Init+0x240>)
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d00a      	beq.n	801250a <HAL_SPI_Init+0x42>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	4a84      	ldr	r2, [pc, #528]	; (801270c <HAL_SPI_Init+0x244>)
 80124fa:	4293      	cmp	r3, r2
 80124fc:	d005      	beq.n	801250a <HAL_SPI_Init+0x42>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	2b0f      	cmp	r3, #15
 8012504:	d901      	bls.n	801250a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8012506:	2301      	movs	r3, #1
 8012508:	e0f7      	b.n	80126fa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801250a:	6878      	ldr	r0, [r7, #4]
 801250c:	f000 fd60 	bl	8012fd0 <SPI_GetPacketSize>
 8012510:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	4a7b      	ldr	r2, [pc, #492]	; (8012704 <HAL_SPI_Init+0x23c>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d00c      	beq.n	8012536 <HAL_SPI_Init+0x6e>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	4a79      	ldr	r2, [pc, #484]	; (8012708 <HAL_SPI_Init+0x240>)
 8012522:	4293      	cmp	r3, r2
 8012524:	d007      	beq.n	8012536 <HAL_SPI_Init+0x6e>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a78      	ldr	r2, [pc, #480]	; (801270c <HAL_SPI_Init+0x244>)
 801252c:	4293      	cmp	r3, r2
 801252e:	d002      	beq.n	8012536 <HAL_SPI_Init+0x6e>
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	2b08      	cmp	r3, #8
 8012534:	d811      	bhi.n	801255a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801253a:	4a72      	ldr	r2, [pc, #456]	; (8012704 <HAL_SPI_Init+0x23c>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d009      	beq.n	8012554 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	4a70      	ldr	r2, [pc, #448]	; (8012708 <HAL_SPI_Init+0x240>)
 8012546:	4293      	cmp	r3, r2
 8012548:	d004      	beq.n	8012554 <HAL_SPI_Init+0x8c>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	4a6f      	ldr	r2, [pc, #444]	; (801270c <HAL_SPI_Init+0x244>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d104      	bne.n	801255e <HAL_SPI_Init+0x96>
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b10      	cmp	r3, #16
 8012558:	d901      	bls.n	801255e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801255a:	2301      	movs	r3, #1
 801255c:	e0cd      	b.n	80126fa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012564:	b2db      	uxtb	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	2200      	movs	r2, #0
 801256e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7f1 fff8 	bl	8004568 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2202      	movs	r2, #2
 801257c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	f022 0201 	bic.w	r2, r2, #1
 801258e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801259a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80125a4:	d119      	bne.n	80125da <HAL_SPI_Init+0x112>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80125ae:	d103      	bne.n	80125b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d008      	beq.n	80125ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d10c      	bne.n	80125da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80125c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80125c8:	d107      	bne.n	80125da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80125d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00f      	beq.n	8012606 <HAL_SPI_Init+0x13e>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	2b06      	cmp	r3, #6
 80125ec:	d90b      	bls.n	8012606 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	430a      	orrs	r2, r1
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	e007      	b.n	8012616 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012614:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	69da      	ldr	r2, [r3, #28]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801261e:	431a      	orrs	r2, r3
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	431a      	orrs	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012628:	ea42 0103 	orr.w	r1, r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	68da      	ldr	r2, [r3, #12]
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	430a      	orrs	r2, r1
 8012636:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012640:	431a      	orrs	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012646:	431a      	orrs	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	431a      	orrs	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	691b      	ldr	r3, [r3, #16]
 8012652:	431a      	orrs	r2, r3
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	695b      	ldr	r3, [r3, #20]
 8012658:	431a      	orrs	r2, r3
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6a1b      	ldr	r3, [r3, #32]
 801265e:	431a      	orrs	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	431a      	orrs	r2, r3
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801266a:	431a      	orrs	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	431a      	orrs	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012676:	ea42 0103 	orr.w	r1, r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	430a      	orrs	r2, r1
 8012684:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d113      	bne.n	80126b6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	689b      	ldr	r3, [r3, #8]
 8012694:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80126a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80126b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f022 0201 	bic.w	r2, r2, #1
 80126c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00a      	beq.n	80126e8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	68db      	ldr	r3, [r3, #12]
 80126d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	430a      	orrs	r2, r1
 80126e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2200      	movs	r2, #0
 80126ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2201      	movs	r2, #1
 80126f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	4618      	mov	r0, r3
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	40013000 	.word	0x40013000
 8012708:	40003800 	.word	0x40003800
 801270c:	40003c00 	.word	0x40003c00

08012710 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b084      	sub	sp, #16
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	4613      	mov	r3, r2
 801271c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012724:	b2db      	uxtb	r3, r3
 8012726:	2b01      	cmp	r3, #1
 8012728:	d005      	beq.n	8012736 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	2200      	movs	r2, #0
 801272e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8012732:	2302      	movs	r3, #2
 8012734:	e127      	b.n	8012986 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d002      	beq.n	8012742 <HAL_SPI_Receive_DMA+0x32>
 801273c:	88fb      	ldrh	r3, [r7, #6]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d105      	bne.n	801274e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2200      	movs	r2, #0
 8012746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801274a:	2301      	movs	r3, #1
 801274c:	e11b      	b.n	8012986 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012754:	2b01      	cmp	r3, #1
 8012756:	d101      	bne.n	801275c <HAL_SPI_Receive_DMA+0x4c>
 8012758:	2302      	movs	r3, #2
 801275a:	e114      	b.n	8012986 <HAL_SPI_Receive_DMA+0x276>
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	2201      	movs	r2, #1
 8012760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2204      	movs	r2, #4
 8012768:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2200      	movs	r2, #0
 8012770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	88fa      	ldrh	r2, [r7, #6]
 801277e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	88fa      	ldrh	r2, [r7, #6]
 8012786:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2200      	movs	r2, #0
 801278e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2200      	movs	r2, #0
 8012794:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2200      	movs	r2, #0
 801279a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2200      	movs	r2, #0
 80127a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	689b      	ldr	r3, [r3, #8]
 80127aa:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80127ae:	d108      	bne.n	80127c2 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80127be:	601a      	str	r2, [r3, #0]
 80127c0:	e009      	b.n	80127d6 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	68db      	ldr	r3, [r3, #12]
 80127c8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80127d4:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	68db      	ldr	r3, [r3, #12]
 80127da:	2b0f      	cmp	r3, #15
 80127dc:	d905      	bls.n	80127ea <HAL_SPI_Receive_DMA+0xda>
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127e2:	699b      	ldr	r3, [r3, #24]
 80127e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80127e8:	d10f      	bne.n	801280a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80127ee:	2b07      	cmp	r3, #7
 80127f0:	d911      	bls.n	8012816 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80127fc:	d00b      	beq.n	8012816 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012802:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012808:	d005      	beq.n	8012816 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2200      	movs	r2, #0
 801280e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8012812:	2301      	movs	r3, #1
 8012814:	e0b7      	b.n	8012986 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	689a      	ldr	r2, [r3, #8]
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012824:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	68db      	ldr	r3, [r3, #12]
 801282a:	2b07      	cmp	r3, #7
 801282c:	d820      	bhi.n	8012870 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012838:	d109      	bne.n	801284e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012840:	b29b      	uxth	r3, r3
 8012842:	3301      	adds	r3, #1
 8012844:	105b      	asrs	r3, r3, #1
 8012846:	b29a      	uxth	r2, r3
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012852:	699b      	ldr	r3, [r3, #24]
 8012854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012858:	d11e      	bne.n	8012898 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012860:	b29b      	uxth	r3, r3
 8012862:	3303      	adds	r3, #3
 8012864:	109b      	asrs	r3, r3, #2
 8012866:	b29a      	uxth	r2, r3
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801286e:	e013      	b.n	8012898 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	2b0f      	cmp	r3, #15
 8012876:	d80f      	bhi.n	8012898 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801287c:	699b      	ldr	r3, [r3, #24]
 801287e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012882:	d109      	bne.n	8012898 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801288a:	b29b      	uxth	r3, r3
 801288c:	3301      	adds	r3, #1
 801288e:	105b      	asrs	r3, r3, #1
 8012890:	b29a      	uxth	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801289c:	4a3c      	ldr	r2, [pc, #240]	; (8012990 <HAL_SPI_Receive_DMA+0x280>)
 801289e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128a4:	4a3b      	ldr	r2, [pc, #236]	; (8012994 <HAL_SPI_Receive_DMA+0x284>)
 80128a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128ac:	4a3a      	ldr	r2, [pc, #232]	; (8012998 <HAL_SPI_Receive_DMA+0x288>)
 80128ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128b4:	2200      	movs	r2, #0
 80128b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	3330      	adds	r3, #48	; 0x30
 80128c2:	4619      	mov	r1, r3
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80128d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80128d2:	f7f6 f9c1 	bl	8008c58 <HAL_DMA_Start_IT>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d011      	beq.n	8012900 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128e2:	f043 0210 	orr.w	r2, r3, #16
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80128fc:	2301      	movs	r3, #1
 80128fe:	e042      	b.n	8012986 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012904:	69db      	ldr	r3, [r3, #28]
 8012906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801290a:	d108      	bne.n	801291e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	6859      	ldr	r1, [r3, #4]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681a      	ldr	r2, [r3, #0]
 8012916:	4b21      	ldr	r3, [pc, #132]	; (801299c <HAL_SPI_Receive_DMA+0x28c>)
 8012918:	400b      	ands	r3, r1
 801291a:	6053      	str	r3, [r2, #4]
 801291c:	e009      	b.n	8012932 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	4b1d      	ldr	r3, [pc, #116]	; (801299c <HAL_SPI_Receive_DMA+0x28c>)
 8012926:	4013      	ands	r3, r2
 8012928:	88f9      	ldrh	r1, [r7, #6]
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	6812      	ldr	r2, [r2, #0]
 801292e:	430b      	orrs	r3, r1
 8012930:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	689a      	ldr	r2, [r3, #8]
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012940:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	691a      	ldr	r2, [r3, #16]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012950:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f042 0201 	orr.w	r2, r2, #1
 8012960:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	685b      	ldr	r3, [r3, #4]
 8012966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801296a:	d107      	bne.n	801297c <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801297a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2200      	movs	r2, #0
 8012980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3710      	adds	r7, #16
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	08012dfb 	.word	0x08012dfb
 8012994:	08012db5 	.word	0x08012db5
 8012998:	08012e17 	.word	0x08012e17
 801299c:	ffff0000 	.word	0xffff0000

080129a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b08a      	sub	sp, #40	; 0x28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	691b      	ldr	r3, [r3, #16]
 80129ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	695b      	ldr	r3, [r3, #20]
 80129b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80129b8:	6a3a      	ldr	r2, [r7, #32]
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	4013      	ands	r3, r2
 80129be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	689b      	ldr	r3, [r3, #8]
 80129c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80129c8:	2300      	movs	r3, #0
 80129ca:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80129d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	3330      	adds	r3, #48	; 0x30
 80129da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80129dc:	69fb      	ldr	r3, [r7, #28]
 80129de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d010      	beq.n	8012a08 <HAL_SPI_IRQHandler+0x68>
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	f003 0308 	and.w	r3, r3, #8
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00b      	beq.n	8012a08 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	699a      	ldr	r2, [r3, #24]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80129fe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f000 f9cd 	bl	8012da0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012a06:	e192      	b.n	8012d2e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d113      	bne.n	8012a3a <HAL_SPI_IRQHandler+0x9a>
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	f003 0320 	and.w	r3, r3, #32
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d10e      	bne.n	8012a3a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012a1c:	69bb      	ldr	r3, [r7, #24]
 8012a1e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d009      	beq.n	8012a3a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	4798      	blx	r3
    handled = 1UL;
 8012a36:	2301      	movs	r3, #1
 8012a38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d10f      	bne.n	8012a64 <HAL_SPI_IRQHandler+0xc4>
 8012a44:	69bb      	ldr	r3, [r7, #24]
 8012a46:	f003 0301 	and.w	r3, r3, #1
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00a      	beq.n	8012a64 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012a4e:	69bb      	ldr	r3, [r7, #24]
 8012a50:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d105      	bne.n	8012a64 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	4798      	blx	r3
    handled = 1UL;
 8012a60:	2301      	movs	r3, #1
 8012a62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	f003 0320 	and.w	r3, r3, #32
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d10f      	bne.n	8012a8e <HAL_SPI_IRQHandler+0xee>
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	f003 0302 	and.w	r3, r3, #2
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d00a      	beq.n	8012a8e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d105      	bne.n	8012a8e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	4798      	blx	r3
    handled = 1UL;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f040 8147 	bne.w	8012d24 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012a96:	69bb      	ldr	r3, [r7, #24]
 8012a98:	f003 0308 	and.w	r3, r3, #8
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f000 808b 	beq.w	8012bb8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	699a      	ldr	r2, [r3, #24]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f042 0208 	orr.w	r2, r2, #8
 8012ab0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	699a      	ldr	r2, [r3, #24]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f042 0210 	orr.w	r2, r2, #16
 8012ac0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	699a      	ldr	r2, [r3, #24]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012ad0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	691a      	ldr	r2, [r3, #16]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	f022 0208 	bic.w	r2, r2, #8
 8012ae0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	689b      	ldr	r3, [r3, #8]
 8012ae8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d13d      	bne.n	8012b6c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012af0:	e036      	b.n	8012b60 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	2b0f      	cmp	r3, #15
 8012af8:	d90b      	bls.n	8012b12 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681a      	ldr	r2, [r3, #0]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012b04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b0a:	1d1a      	adds	r2, r3, #4
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	665a      	str	r2, [r3, #100]	; 0x64
 8012b10:	e01d      	b.n	8012b4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	2b07      	cmp	r3, #7
 8012b18:	d90b      	bls.n	8012b32 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	8812      	ldrh	r2, [r2, #0]
 8012b22:	b292      	uxth	r2, r2
 8012b24:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b2a:	1c9a      	adds	r2, r3, #2
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	665a      	str	r2, [r3, #100]	; 0x64
 8012b30:	e00d      	b.n	8012b4e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b3e:	7812      	ldrb	r2, [r2, #0]
 8012b40:	b2d2      	uxtb	r2, r2
 8012b42:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012b54:	b29b      	uxth	r3, r3
 8012b56:	3b01      	subs	r3, #1
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d1c2      	bne.n	8012af2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f000 f98f 	bl	8012e90 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2201      	movs	r2, #1
 8012b76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d003      	beq.n	8012b8c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 f901 	bl	8012d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012b8a:	e0d0      	b.n	8012d2e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012b8c:	7cfb      	ldrb	r3, [r7, #19]
 8012b8e:	2b05      	cmp	r3, #5
 8012b90:	d103      	bne.n	8012b9a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 f8e6 	bl	8012d64 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012b98:	e0c6      	b.n	8012d28 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012b9a:	7cfb      	ldrb	r3, [r7, #19]
 8012b9c:	2b04      	cmp	r3, #4
 8012b9e:	d103      	bne.n	8012ba8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f000 f8d5 	bl	8012d50 <HAL_SPI_RxCpltCallback>
    return;
 8012ba6:	e0bf      	b.n	8012d28 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012ba8:	7cfb      	ldrb	r3, [r7, #19]
 8012baa:	2b03      	cmp	r3, #3
 8012bac:	f040 80bc 	bne.w	8012d28 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 f8c3 	bl	8012d3c <HAL_SPI_TxCpltCallback>
    return;
 8012bb6:	e0b7      	b.n	8012d28 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	f000 80b5 	beq.w	8012d2e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00f      	beq.n	8012bee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bd4:	f043 0204 	orr.w	r2, r3, #4
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	699a      	ldr	r2, [r3, #24]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012bec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012bee:	69bb      	ldr	r3, [r7, #24]
 8012bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d00f      	beq.n	8012c18 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bfe:	f043 0201 	orr.w	r2, r3, #1
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	699a      	ldr	r2, [r3, #24]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012c18:	69bb      	ldr	r3, [r7, #24]
 8012c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00f      	beq.n	8012c42 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c28:	f043 0208 	orr.w	r2, r3, #8
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	699a      	ldr	r2, [r3, #24]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012c40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	f003 0320 	and.w	r3, r3, #32
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00f      	beq.n	8012c6c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	699a      	ldr	r2, [r3, #24]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f042 0220 	orr.w	r2, r2, #32
 8012c6a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d05a      	beq.n	8012d2c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f022 0201 	bic.w	r2, r2, #1
 8012c84:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	6919      	ldr	r1, [r3, #16]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	4b28      	ldr	r3, [pc, #160]	; (8012d34 <HAL_SPI_IRQHandler+0x394>)
 8012c92:	400b      	ands	r3, r1
 8012c94:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012c9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012ca0:	d138      	bne.n	8012d14 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	689a      	ldr	r2, [r3, #8]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012cb0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d013      	beq.n	8012ce2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cbe:	4a1e      	ldr	r2, [pc, #120]	; (8012d38 <HAL_SPI_IRQHandler+0x398>)
 8012cc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7f6 fd4e 	bl	8009768 <HAL_DMA_Abort_IT>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d007      	beq.n	8012ce2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d020      	beq.n	8012d2c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cee:	4a12      	ldr	r2, [pc, #72]	; (8012d38 <HAL_SPI_IRQHandler+0x398>)
 8012cf0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f6 fd36 	bl	8009768 <HAL_DMA_Abort_IT>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d014      	beq.n	8012d2c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012d12:	e00b      	b.n	8012d2c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 f835 	bl	8012d8c <HAL_SPI_ErrorCallback>
    return;
 8012d22:	e003      	b.n	8012d2c <HAL_SPI_IRQHandler+0x38c>
    return;
 8012d24:	bf00      	nop
 8012d26:	e002      	b.n	8012d2e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012d28:	bf00      	nop
 8012d2a:	e000      	b.n	8012d2e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012d2c:	bf00      	nop
  }
}
 8012d2e:	3728      	adds	r7, #40	; 0x28
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	fffffc94 	.word	0xfffffc94
 8012d38:	08012e5d 	.word	0x08012e5d

08012d3c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d3c:	b480      	push	{r7}
 8012d3e:	b083      	sub	sp, #12
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012d44:	bf00      	nop
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012d58:	bf00      	nop
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012d6c:	bf00      	nop
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8012d80:	bf00      	nop
 8012d82:	370c      	adds	r7, #12
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012d94:	bf00      	nop
 8012d96:	370c      	adds	r7, #12
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012da8:	bf00      	nop
 8012daa:	370c      	adds	r7, #12
 8012dac:	46bd      	mov	sp, r7
 8012dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db2:	4770      	bx	lr

08012db4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b084      	sub	sp, #16
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dc0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	2b07      	cmp	r3, #7
 8012dcc:	d011      	beq.n	8012df2 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012dd2:	69db      	ldr	r3, [r3, #28]
 8012dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dd8:	d103      	bne.n	8012de2 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7ff ffb8 	bl	8012d50 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012de0:	e007      	b.n	8012df2 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	691a      	ldr	r2, [r3, #16]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f042 0208 	orr.w	r2, r2, #8
 8012df0:	611a      	str	r2, [r3, #16]
}
 8012df2:	bf00      	nop
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b084      	sub	sp, #16
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e06:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f7ff ffb5 	bl	8012d78 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012e0e:	bf00      	nop
 8012e10:	3710      	adds	r7, #16
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}

08012e16 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012e16:	b580      	push	{r7, lr}
 8012e18:	b084      	sub	sp, #16
 8012e1a:	af00      	add	r7, sp, #0
 8012e1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e22:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7f7 fe1d 	bl	800aa64 <HAL_DMA_GetError>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b02      	cmp	r3, #2
 8012e2e:	d011      	beq.n	8012e54 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f000 f82d 	bl	8012e90 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e3c:	f043 0210 	orr.w	r2, r3, #16
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2201      	movs	r2, #1
 8012e4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f7ff ff9c 	bl	8012d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012e54:	bf00      	nop
 8012e56:	3710      	adds	r7, #16
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}

08012e5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012e82:	68f8      	ldr	r0, [r7, #12]
 8012e84:	f7ff ff82 	bl	8012d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012e88:	bf00      	nop
 8012e8a:	3710      	adds	r7, #16
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b085      	sub	sp, #20
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	695b      	ldr	r3, [r3, #20]
 8012e9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	699a      	ldr	r2, [r3, #24]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	f042 0208 	orr.w	r2, r2, #8
 8012eae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	699a      	ldr	r2, [r3, #24]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f042 0210 	orr.w	r2, r2, #16
 8012ebe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	f022 0201 	bic.w	r2, r2, #1
 8012ece:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	6919      	ldr	r1, [r3, #16]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	4b3c      	ldr	r3, [pc, #240]	; (8012fcc <SPI_CloseTransfer+0x13c>)
 8012edc:	400b      	ands	r3, r1
 8012ede:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	689a      	ldr	r2, [r3, #8]
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012eee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	2b04      	cmp	r3, #4
 8012efa:	d014      	beq.n	8012f26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	f003 0320 	and.w	r3, r3, #32
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00f      	beq.n	8012f26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	699a      	ldr	r2, [r3, #24]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f042 0220 	orr.w	r2, r2, #32
 8012f24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b03      	cmp	r3, #3
 8012f30:	d014      	beq.n	8012f5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d00f      	beq.n	8012f5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f42:	f043 0204 	orr.w	r2, r3, #4
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	699a      	ldr	r2, [r3, #24]
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00f      	beq.n	8012f86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f6c:	f043 0201 	orr.w	r2, r3, #1
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	699a      	ldr	r2, [r3, #24]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d00f      	beq.n	8012fb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f96:	f043 0208 	orr.w	r2, r3, #8
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	699a      	ldr	r2, [r3, #24]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012fae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012fc0:	bf00      	nop
 8012fc2:	3714      	adds	r7, #20
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	fffffc90 	.word	0xfffffc90

08012fd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fdc:	095b      	lsrs	r3, r3, #5
 8012fde:	3301      	adds	r3, #1
 8012fe0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	3307      	adds	r3, #7
 8012fee:	08db      	lsrs	r3, r3, #3
 8012ff0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	fb02 f303 	mul.w	r3, r2, r3
}
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3714      	adds	r7, #20
 8012ffe:	46bd      	mov	sp, r7
 8013000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013004:	4770      	bx	lr

08013006 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b082      	sub	sp, #8
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d101      	bne.n	8013018 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013014:	2301      	movs	r3, #1
 8013016:	e049      	b.n	80130ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d106      	bne.n	8013032 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2200      	movs	r2, #0
 8013028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801302c:	6878      	ldr	r0, [r7, #4]
 801302e:	f7f1 ffa7 	bl	8004f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2202      	movs	r2, #2
 8013036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681a      	ldr	r2, [r3, #0]
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	3304      	adds	r3, #4
 8013042:	4619      	mov	r1, r3
 8013044:	4610      	mov	r0, r2
 8013046:	f000 fe7d 	bl	8013d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2201      	movs	r2, #1
 801304e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2201      	movs	r2, #1
 8013056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	2201      	movs	r2, #1
 801305e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2201      	movs	r2, #1
 8013066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2201      	movs	r2, #1
 801306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2201      	movs	r2, #1
 8013076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2201      	movs	r2, #1
 8013086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	2201      	movs	r2, #1
 801308e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2201      	movs	r2, #1
 8013096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2201      	movs	r2, #1
 801309e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2201      	movs	r2, #1
 80130a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80130aa:	2300      	movs	r3, #0
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d001      	beq.n	80130cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80130c8:	2301      	movs	r3, #1
 80130ca:	e054      	b.n	8013176 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2202      	movs	r2, #2
 80130d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	68da      	ldr	r2, [r3, #12]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f042 0201 	orr.w	r2, r2, #1
 80130e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	4a26      	ldr	r2, [pc, #152]	; (8013184 <HAL_TIM_Base_Start_IT+0xd0>)
 80130ea:	4293      	cmp	r3, r2
 80130ec:	d022      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130f6:	d01d      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a22      	ldr	r2, [pc, #136]	; (8013188 <HAL_TIM_Base_Start_IT+0xd4>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d018      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	4a21      	ldr	r2, [pc, #132]	; (801318c <HAL_TIM_Base_Start_IT+0xd8>)
 8013108:	4293      	cmp	r3, r2
 801310a:	d013      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	4a1f      	ldr	r2, [pc, #124]	; (8013190 <HAL_TIM_Base_Start_IT+0xdc>)
 8013112:	4293      	cmp	r3, r2
 8013114:	d00e      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	4a1e      	ldr	r2, [pc, #120]	; (8013194 <HAL_TIM_Base_Start_IT+0xe0>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d009      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4a1c      	ldr	r2, [pc, #112]	; (8013198 <HAL_TIM_Base_Start_IT+0xe4>)
 8013126:	4293      	cmp	r3, r2
 8013128:	d004      	beq.n	8013134 <HAL_TIM_Base_Start_IT+0x80>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4a1b      	ldr	r2, [pc, #108]	; (801319c <HAL_TIM_Base_Start_IT+0xe8>)
 8013130:	4293      	cmp	r3, r2
 8013132:	d115      	bne.n	8013160 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	689a      	ldr	r2, [r3, #8]
 801313a:	4b19      	ldr	r3, [pc, #100]	; (80131a0 <HAL_TIM_Base_Start_IT+0xec>)
 801313c:	4013      	ands	r3, r2
 801313e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b06      	cmp	r3, #6
 8013144:	d015      	beq.n	8013172 <HAL_TIM_Base_Start_IT+0xbe>
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801314c:	d011      	beq.n	8013172 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f042 0201 	orr.w	r2, r2, #1
 801315c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801315e:	e008      	b.n	8013172 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f042 0201 	orr.w	r2, r2, #1
 801316e:	601a      	str	r2, [r3, #0]
 8013170:	e000      	b.n	8013174 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013174:	2300      	movs	r3, #0
}
 8013176:	4618      	mov	r0, r3
 8013178:	3714      	adds	r7, #20
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr
 8013182:	bf00      	nop
 8013184:	40010000 	.word	0x40010000
 8013188:	40000400 	.word	0x40000400
 801318c:	40000800 	.word	0x40000800
 8013190:	40000c00 	.word	0x40000c00
 8013194:	40010400 	.word	0x40010400
 8013198:	40001800 	.word	0x40001800
 801319c:	40014000 	.word	0x40014000
 80131a0:	00010007 	.word	0x00010007

080131a4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b084      	sub	sp, #16
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80131ae:	2300      	movs	r3, #0
 80131b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d109      	bne.n	80131cc <HAL_TIM_OC_Start_IT+0x28>
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131be:	b2db      	uxtb	r3, r3
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	bf14      	ite	ne
 80131c4:	2301      	movne	r3, #1
 80131c6:	2300      	moveq	r3, #0
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	e03c      	b.n	8013246 <HAL_TIM_OC_Start_IT+0xa2>
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	2b04      	cmp	r3, #4
 80131d0:	d109      	bne.n	80131e6 <HAL_TIM_OC_Start_IT+0x42>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	2b01      	cmp	r3, #1
 80131dc:	bf14      	ite	ne
 80131de:	2301      	movne	r3, #1
 80131e0:	2300      	moveq	r3, #0
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	e02f      	b.n	8013246 <HAL_TIM_OC_Start_IT+0xa2>
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	2b08      	cmp	r3, #8
 80131ea:	d109      	bne.n	8013200 <HAL_TIM_OC_Start_IT+0x5c>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	2b01      	cmp	r3, #1
 80131f6:	bf14      	ite	ne
 80131f8:	2301      	movne	r3, #1
 80131fa:	2300      	moveq	r3, #0
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	e022      	b.n	8013246 <HAL_TIM_OC_Start_IT+0xa2>
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	2b0c      	cmp	r3, #12
 8013204:	d109      	bne.n	801321a <HAL_TIM_OC_Start_IT+0x76>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b01      	cmp	r3, #1
 8013210:	bf14      	ite	ne
 8013212:	2301      	movne	r3, #1
 8013214:	2300      	moveq	r3, #0
 8013216:	b2db      	uxtb	r3, r3
 8013218:	e015      	b.n	8013246 <HAL_TIM_OC_Start_IT+0xa2>
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	2b10      	cmp	r3, #16
 801321e:	d109      	bne.n	8013234 <HAL_TIM_OC_Start_IT+0x90>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013226:	b2db      	uxtb	r3, r3
 8013228:	2b01      	cmp	r3, #1
 801322a:	bf14      	ite	ne
 801322c:	2301      	movne	r3, #1
 801322e:	2300      	moveq	r3, #0
 8013230:	b2db      	uxtb	r3, r3
 8013232:	e008      	b.n	8013246 <HAL_TIM_OC_Start_IT+0xa2>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b01      	cmp	r3, #1
 801323e:	bf14      	ite	ne
 8013240:	2301      	movne	r3, #1
 8013242:	2300      	moveq	r3, #0
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801324a:	2301      	movs	r3, #1
 801324c:	e0ec      	b.n	8013428 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d104      	bne.n	801325e <HAL_TIM_OC_Start_IT+0xba>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2202      	movs	r2, #2
 8013258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801325c:	e023      	b.n	80132a6 <HAL_TIM_OC_Start_IT+0x102>
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	2b04      	cmp	r3, #4
 8013262:	d104      	bne.n	801326e <HAL_TIM_OC_Start_IT+0xca>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2202      	movs	r2, #2
 8013268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801326c:	e01b      	b.n	80132a6 <HAL_TIM_OC_Start_IT+0x102>
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	2b08      	cmp	r3, #8
 8013272:	d104      	bne.n	801327e <HAL_TIM_OC_Start_IT+0xda>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2202      	movs	r2, #2
 8013278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801327c:	e013      	b.n	80132a6 <HAL_TIM_OC_Start_IT+0x102>
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	2b0c      	cmp	r3, #12
 8013282:	d104      	bne.n	801328e <HAL_TIM_OC_Start_IT+0xea>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2202      	movs	r2, #2
 8013288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801328c:	e00b      	b.n	80132a6 <HAL_TIM_OC_Start_IT+0x102>
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	2b10      	cmp	r3, #16
 8013292:	d104      	bne.n	801329e <HAL_TIM_OC_Start_IT+0xfa>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2202      	movs	r2, #2
 8013298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801329c:	e003      	b.n	80132a6 <HAL_TIM_OC_Start_IT+0x102>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2202      	movs	r2, #2
 80132a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	2b0c      	cmp	r3, #12
 80132aa:	d841      	bhi.n	8013330 <HAL_TIM_OC_Start_IT+0x18c>
 80132ac:	a201      	add	r2, pc, #4	; (adr r2, 80132b4 <HAL_TIM_OC_Start_IT+0x110>)
 80132ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b2:	bf00      	nop
 80132b4:	080132e9 	.word	0x080132e9
 80132b8:	08013331 	.word	0x08013331
 80132bc:	08013331 	.word	0x08013331
 80132c0:	08013331 	.word	0x08013331
 80132c4:	080132fb 	.word	0x080132fb
 80132c8:	08013331 	.word	0x08013331
 80132cc:	08013331 	.word	0x08013331
 80132d0:	08013331 	.word	0x08013331
 80132d4:	0801330d 	.word	0x0801330d
 80132d8:	08013331 	.word	0x08013331
 80132dc:	08013331 	.word	0x08013331
 80132e0:	08013331 	.word	0x08013331
 80132e4:	0801331f 	.word	0x0801331f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	68da      	ldr	r2, [r3, #12]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	f042 0202 	orr.w	r2, r2, #2
 80132f6:	60da      	str	r2, [r3, #12]
      break;
 80132f8:	e01d      	b.n	8013336 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	68da      	ldr	r2, [r3, #12]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f042 0204 	orr.w	r2, r2, #4
 8013308:	60da      	str	r2, [r3, #12]
      break;
 801330a:	e014      	b.n	8013336 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	68da      	ldr	r2, [r3, #12]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f042 0208 	orr.w	r2, r2, #8
 801331a:	60da      	str	r2, [r3, #12]
      break;
 801331c:	e00b      	b.n	8013336 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	68da      	ldr	r2, [r3, #12]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f042 0210 	orr.w	r2, r2, #16
 801332c:	60da      	str	r2, [r3, #12]
      break;
 801332e:	e002      	b.n	8013336 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013330:	2301      	movs	r3, #1
 8013332:	73fb      	strb	r3, [r7, #15]
      break;
 8013334:	bf00      	nop
  }

  if (status == HAL_OK)
 8013336:	7bfb      	ldrb	r3, [r7, #15]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d174      	bne.n	8013426 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	2201      	movs	r2, #1
 8013342:	6839      	ldr	r1, [r7, #0]
 8013344:	4618      	mov	r0, r3
 8013346:	f001 f917 	bl	8014578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a38      	ldr	r2, [pc, #224]	; (8013430 <HAL_TIM_OC_Start_IT+0x28c>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d013      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x1d8>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	4a36      	ldr	r2, [pc, #216]	; (8013434 <HAL_TIM_OC_Start_IT+0x290>)
 801335a:	4293      	cmp	r3, r2
 801335c:	d00e      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x1d8>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4a35      	ldr	r2, [pc, #212]	; (8013438 <HAL_TIM_OC_Start_IT+0x294>)
 8013364:	4293      	cmp	r3, r2
 8013366:	d009      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x1d8>
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a33      	ldr	r2, [pc, #204]	; (801343c <HAL_TIM_OC_Start_IT+0x298>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d004      	beq.n	801337c <HAL_TIM_OC_Start_IT+0x1d8>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	4a32      	ldr	r2, [pc, #200]	; (8013440 <HAL_TIM_OC_Start_IT+0x29c>)
 8013378:	4293      	cmp	r3, r2
 801337a:	d101      	bne.n	8013380 <HAL_TIM_OC_Start_IT+0x1dc>
 801337c:	2301      	movs	r3, #1
 801337e:	e000      	b.n	8013382 <HAL_TIM_OC_Start_IT+0x1de>
 8013380:	2300      	movs	r3, #0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d007      	beq.n	8013396 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013394:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4a25      	ldr	r2, [pc, #148]	; (8013430 <HAL_TIM_OC_Start_IT+0x28c>)
 801339c:	4293      	cmp	r3, r2
 801339e:	d022      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80133a8:	d01d      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	4a25      	ldr	r2, [pc, #148]	; (8013444 <HAL_TIM_OC_Start_IT+0x2a0>)
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d018      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4a23      	ldr	r2, [pc, #140]	; (8013448 <HAL_TIM_OC_Start_IT+0x2a4>)
 80133ba:	4293      	cmp	r3, r2
 80133bc:	d013      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	4a22      	ldr	r2, [pc, #136]	; (801344c <HAL_TIM_OC_Start_IT+0x2a8>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d00e      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	4a19      	ldr	r2, [pc, #100]	; (8013434 <HAL_TIM_OC_Start_IT+0x290>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d009      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a1e      	ldr	r2, [pc, #120]	; (8013450 <HAL_TIM_OC_Start_IT+0x2ac>)
 80133d8:	4293      	cmp	r3, r2
 80133da:	d004      	beq.n	80133e6 <HAL_TIM_OC_Start_IT+0x242>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4a15      	ldr	r2, [pc, #84]	; (8013438 <HAL_TIM_OC_Start_IT+0x294>)
 80133e2:	4293      	cmp	r3, r2
 80133e4:	d115      	bne.n	8013412 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	689a      	ldr	r2, [r3, #8]
 80133ec:	4b19      	ldr	r3, [pc, #100]	; (8013454 <HAL_TIM_OC_Start_IT+0x2b0>)
 80133ee:	4013      	ands	r3, r2
 80133f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	2b06      	cmp	r3, #6
 80133f6:	d015      	beq.n	8013424 <HAL_TIM_OC_Start_IT+0x280>
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133fe:	d011      	beq.n	8013424 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	f042 0201 	orr.w	r2, r2, #1
 801340e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013410:	e008      	b.n	8013424 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	681a      	ldr	r2, [r3, #0]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f042 0201 	orr.w	r2, r2, #1
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	e000      	b.n	8013426 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013424:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8013426:	7bfb      	ldrb	r3, [r7, #15]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	40010000 	.word	0x40010000
 8013434:	40010400 	.word	0x40010400
 8013438:	40014000 	.word	0x40014000
 801343c:	40014400 	.word	0x40014400
 8013440:	40014800 	.word	0x40014800
 8013444:	40000400 	.word	0x40000400
 8013448:	40000800 	.word	0x40000800
 801344c:	40000c00 	.word	0x40000c00
 8013450:	40001800 	.word	0x40001800
 8013454:	00010007 	.word	0x00010007

08013458 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
 8013460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013462:	2300      	movs	r3, #0
 8013464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	2b0c      	cmp	r3, #12
 801346a:	d841      	bhi.n	80134f0 <HAL_TIM_OC_Stop_IT+0x98>
 801346c:	a201      	add	r2, pc, #4	; (adr r2, 8013474 <HAL_TIM_OC_Stop_IT+0x1c>)
 801346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013472:	bf00      	nop
 8013474:	080134a9 	.word	0x080134a9
 8013478:	080134f1 	.word	0x080134f1
 801347c:	080134f1 	.word	0x080134f1
 8013480:	080134f1 	.word	0x080134f1
 8013484:	080134bb 	.word	0x080134bb
 8013488:	080134f1 	.word	0x080134f1
 801348c:	080134f1 	.word	0x080134f1
 8013490:	080134f1 	.word	0x080134f1
 8013494:	080134cd 	.word	0x080134cd
 8013498:	080134f1 	.word	0x080134f1
 801349c:	080134f1 	.word	0x080134f1
 80134a0:	080134f1 	.word	0x080134f1
 80134a4:	080134df 	.word	0x080134df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	68da      	ldr	r2, [r3, #12]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f022 0202 	bic.w	r2, r2, #2
 80134b6:	60da      	str	r2, [r3, #12]
      break;
 80134b8:	e01d      	b.n	80134f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	68da      	ldr	r2, [r3, #12]
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f022 0204 	bic.w	r2, r2, #4
 80134c8:	60da      	str	r2, [r3, #12]
      break;
 80134ca:	e014      	b.n	80134f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	68da      	ldr	r2, [r3, #12]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	f022 0208 	bic.w	r2, r2, #8
 80134da:	60da      	str	r2, [r3, #12]
      break;
 80134dc:	e00b      	b.n	80134f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	68da      	ldr	r2, [r3, #12]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	f022 0210 	bic.w	r2, r2, #16
 80134ec:	60da      	str	r2, [r3, #12]
      break;
 80134ee:	e002      	b.n	80134f6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80134f0:	2301      	movs	r3, #1
 80134f2:	73fb      	strb	r3, [r7, #15]
      break;
 80134f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80134f6:	7bfb      	ldrb	r3, [r7, #15]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f040 8081 	bne.w	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	2200      	movs	r2, #0
 8013504:	6839      	ldr	r1, [r7, #0]
 8013506:	4618      	mov	r0, r3
 8013508:	f001 f836 	bl	8014578 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	4a3e      	ldr	r2, [pc, #248]	; (801360c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d013      	beq.n	801353e <HAL_TIM_OC_Stop_IT+0xe6>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	4a3d      	ldr	r2, [pc, #244]	; (8013610 <HAL_TIM_OC_Stop_IT+0x1b8>)
 801351c:	4293      	cmp	r3, r2
 801351e:	d00e      	beq.n	801353e <HAL_TIM_OC_Stop_IT+0xe6>
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4a3b      	ldr	r2, [pc, #236]	; (8013614 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8013526:	4293      	cmp	r3, r2
 8013528:	d009      	beq.n	801353e <HAL_TIM_OC_Stop_IT+0xe6>
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4a3a      	ldr	r2, [pc, #232]	; (8013618 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8013530:	4293      	cmp	r3, r2
 8013532:	d004      	beq.n	801353e <HAL_TIM_OC_Stop_IT+0xe6>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4a38      	ldr	r2, [pc, #224]	; (801361c <HAL_TIM_OC_Stop_IT+0x1c4>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d101      	bne.n	8013542 <HAL_TIM_OC_Stop_IT+0xea>
 801353e:	2301      	movs	r3, #1
 8013540:	e000      	b.n	8013544 <HAL_TIM_OC_Stop_IT+0xec>
 8013542:	2300      	movs	r3, #0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d017      	beq.n	8013578 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	6a1a      	ldr	r2, [r3, #32]
 801354e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013552:	4013      	ands	r3, r2
 8013554:	2b00      	cmp	r3, #0
 8013556:	d10f      	bne.n	8013578 <HAL_TIM_OC_Stop_IT+0x120>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	6a1a      	ldr	r2, [r3, #32]
 801355e:	f240 4344 	movw	r3, #1092	; 0x444
 8013562:	4013      	ands	r3, r2
 8013564:	2b00      	cmp	r3, #0
 8013566:	d107      	bne.n	8013578 <HAL_TIM_OC_Stop_IT+0x120>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013576:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	6a1a      	ldr	r2, [r3, #32]
 801357e:	f241 1311 	movw	r3, #4369	; 0x1111
 8013582:	4013      	ands	r3, r2
 8013584:	2b00      	cmp	r3, #0
 8013586:	d10f      	bne.n	80135a8 <HAL_TIM_OC_Stop_IT+0x150>
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	6a1a      	ldr	r2, [r3, #32]
 801358e:	f240 4344 	movw	r3, #1092	; 0x444
 8013592:	4013      	ands	r3, r2
 8013594:	2b00      	cmp	r3, #0
 8013596:	d107      	bne.n	80135a8 <HAL_TIM_OC_Stop_IT+0x150>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	f022 0201 	bic.w	r2, r2, #1
 80135a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80135a8:	683b      	ldr	r3, [r7, #0]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d104      	bne.n	80135b8 <HAL_TIM_OC_Stop_IT+0x160>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2201      	movs	r2, #1
 80135b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80135b6:	e023      	b.n	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	2b04      	cmp	r3, #4
 80135bc:	d104      	bne.n	80135c8 <HAL_TIM_OC_Stop_IT+0x170>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2201      	movs	r2, #1
 80135c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80135c6:	e01b      	b.n	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
 80135c8:	683b      	ldr	r3, [r7, #0]
 80135ca:	2b08      	cmp	r3, #8
 80135cc:	d104      	bne.n	80135d8 <HAL_TIM_OC_Stop_IT+0x180>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2201      	movs	r2, #1
 80135d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80135d6:	e013      	b.n	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	2b0c      	cmp	r3, #12
 80135dc:	d104      	bne.n	80135e8 <HAL_TIM_OC_Stop_IT+0x190>
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	2201      	movs	r2, #1
 80135e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80135e6:	e00b      	b.n	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	2b10      	cmp	r3, #16
 80135ec:	d104      	bne.n	80135f8 <HAL_TIM_OC_Stop_IT+0x1a0>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2201      	movs	r2, #1
 80135f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80135f6:	e003      	b.n	8013600 <HAL_TIM_OC_Stop_IT+0x1a8>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2201      	movs	r2, #1
 80135fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013600:	7bfb      	ldrb	r3, [r7, #15]
}
 8013602:	4618      	mov	r0, r3
 8013604:	3710      	adds	r7, #16
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	40010000 	.word	0x40010000
 8013610:	40010400 	.word	0x40010400
 8013614:	40014000 	.word	0x40014000
 8013618:	40014400 	.word	0x40014400
 801361c:	40014800 	.word	0x40014800

08013620 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b082      	sub	sp, #8
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d101      	bne.n	8013632 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801362e:	2301      	movs	r3, #1
 8013630:	e049      	b.n	80136c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013638:	b2db      	uxtb	r3, r3
 801363a:	2b00      	cmp	r3, #0
 801363c:	d106      	bne.n	801364c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f841 	bl	80136ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2202      	movs	r2, #2
 8013650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	3304      	adds	r3, #4
 801365c:	4619      	mov	r1, r3
 801365e:	4610      	mov	r0, r2
 8013660:	f000 fb70 	bl	8013d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2201      	movs	r2, #1
 8013668:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2201      	movs	r2, #1
 8013670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2201      	movs	r2, #1
 8013678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2201      	movs	r2, #1
 8013680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2201      	movs	r2, #1
 8013688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2201      	movs	r2, #1
 8013690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2201      	movs	r2, #1
 8013698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2201      	movs	r2, #1
 80136a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2201      	movs	r2, #1
 80136b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2201      	movs	r2, #1
 80136b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2201      	movs	r2, #1
 80136c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3708      	adds	r7, #8
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}

080136ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80136ce:	b480      	push	{r7}
 80136d0:	b083      	sub	sp, #12
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80136d6:	bf00      	nop
 80136d8:	370c      	adds	r7, #12
 80136da:	46bd      	mov	sp, r7
 80136dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e0:	4770      	bx	lr

080136e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b084      	sub	sp, #16
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	691b      	ldr	r3, [r3, #16]
 80136f8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	f003 0302 	and.w	r3, r3, #2
 8013700:	2b00      	cmp	r3, #0
 8013702:	d020      	beq.n	8013746 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	f003 0302 	and.w	r3, r3, #2
 801370a:	2b00      	cmp	r3, #0
 801370c:	d01b      	beq.n	8013746 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f06f 0202 	mvn.w	r2, #2
 8013716:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2201      	movs	r2, #1
 801371c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	f003 0303 	and.w	r3, r3, #3
 8013728:	2b00      	cmp	r3, #0
 801372a:	d003      	beq.n	8013734 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 faeb 	bl	8013d08 <HAL_TIM_IC_CaptureCallback>
 8013732:	e005      	b.n	8013740 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ef fb3d 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f000 faee 	bl	8013d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2200      	movs	r2, #0
 8013744:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f003 0304 	and.w	r3, r3, #4
 801374c:	2b00      	cmp	r3, #0
 801374e:	d020      	beq.n	8013792 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	f003 0304 	and.w	r3, r3, #4
 8013756:	2b00      	cmp	r3, #0
 8013758:	d01b      	beq.n	8013792 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f06f 0204 	mvn.w	r2, #4
 8013762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2202      	movs	r2, #2
 8013768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013774:	2b00      	cmp	r3, #0
 8013776:	d003      	beq.n	8013780 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 fac5 	bl	8013d08 <HAL_TIM_IC_CaptureCallback>
 801377e:	e005      	b.n	801378c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ef fb17 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013786:	6878      	ldr	r0, [r7, #4]
 8013788:	f000 fac8 	bl	8013d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	f003 0308 	and.w	r3, r3, #8
 8013798:	2b00      	cmp	r3, #0
 801379a:	d020      	beq.n	80137de <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	f003 0308 	and.w	r3, r3, #8
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d01b      	beq.n	80137de <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f06f 0208 	mvn.w	r2, #8
 80137ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2204      	movs	r2, #4
 80137b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	69db      	ldr	r3, [r3, #28]
 80137bc:	f003 0303 	and.w	r3, r3, #3
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d003      	beq.n	80137cc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 fa9f 	bl	8013d08 <HAL_TIM_IC_CaptureCallback>
 80137ca:	e005      	b.n	80137d8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f7ef faf1 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f000 faa2 	bl	8013d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	2200      	movs	r2, #0
 80137dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	f003 0310 	and.w	r3, r3, #16
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d020      	beq.n	801382a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f003 0310 	and.w	r3, r3, #16
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d01b      	beq.n	801382a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	f06f 0210 	mvn.w	r2, #16
 80137fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2208      	movs	r2, #8
 8013800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	69db      	ldr	r3, [r3, #28]
 8013808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801380c:	2b00      	cmp	r3, #0
 801380e:	d003      	beq.n	8013818 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 fa79 	bl	8013d08 <HAL_TIM_IC_CaptureCallback>
 8013816:	e005      	b.n	8013824 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	f7ef facb 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f000 fa7c 	bl	8013d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2200      	movs	r2, #0
 8013828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	f003 0301 	and.w	r3, r3, #1
 8013830:	2b00      	cmp	r3, #0
 8013832:	d00c      	beq.n	801384e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f003 0301 	and.w	r3, r3, #1
 801383a:	2b00      	cmp	r3, #0
 801383c:	d007      	beq.n	801384e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f06f 0201 	mvn.w	r2, #1
 8013846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	f7f0 f98d 	bl	8003b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013854:	2b00      	cmp	r3, #0
 8013856:	d104      	bne.n	8013862 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00c      	beq.n	801387c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013868:	2b00      	cmp	r3, #0
 801386a:	d007      	beq.n	801387c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8013874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 ffba 	bl	80147f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013882:	2b00      	cmp	r3, #0
 8013884:	d00c      	beq.n	80138a0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801388c:	2b00      	cmp	r3, #0
 801388e:	d007      	beq.n	80138a0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8013898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f000 ffb2 	bl	8014804 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00c      	beq.n	80138c4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d007      	beq.n	80138c4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80138bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 fa36 	bl	8013d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	f003 0320 	and.w	r3, r3, #32
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00c      	beq.n	80138e8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f003 0320 	and.w	r3, r3, #32
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d007      	beq.n	80138e8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f06f 0220 	mvn.w	r2, #32
 80138e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f000 ff7a 	bl	80147dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80138e8:	bf00      	nop
 80138ea:	3710      	adds	r7, #16
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013906:	2b01      	cmp	r3, #1
 8013908:	d101      	bne.n	801390e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801390a:	2302      	movs	r3, #2
 801390c:	e0ff      	b.n	8013b0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2201      	movs	r2, #1
 8013912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	2b14      	cmp	r3, #20
 801391a:	f200 80f0 	bhi.w	8013afe <HAL_TIM_PWM_ConfigChannel+0x20e>
 801391e:	a201      	add	r2, pc, #4	; (adr r2, 8013924 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013924:	08013979 	.word	0x08013979
 8013928:	08013aff 	.word	0x08013aff
 801392c:	08013aff 	.word	0x08013aff
 8013930:	08013aff 	.word	0x08013aff
 8013934:	080139b9 	.word	0x080139b9
 8013938:	08013aff 	.word	0x08013aff
 801393c:	08013aff 	.word	0x08013aff
 8013940:	08013aff 	.word	0x08013aff
 8013944:	080139fb 	.word	0x080139fb
 8013948:	08013aff 	.word	0x08013aff
 801394c:	08013aff 	.word	0x08013aff
 8013950:	08013aff 	.word	0x08013aff
 8013954:	08013a3b 	.word	0x08013a3b
 8013958:	08013aff 	.word	0x08013aff
 801395c:	08013aff 	.word	0x08013aff
 8013960:	08013aff 	.word	0x08013aff
 8013964:	08013a7d 	.word	0x08013a7d
 8013968:	08013aff 	.word	0x08013aff
 801396c:	08013aff 	.word	0x08013aff
 8013970:	08013aff 	.word	0x08013aff
 8013974:	08013abd 	.word	0x08013abd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	68b9      	ldr	r1, [r7, #8]
 801397e:	4618      	mov	r0, r3
 8013980:	f000 fa86 	bl	8013e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	699a      	ldr	r2, [r3, #24]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f042 0208 	orr.w	r2, r2, #8
 8013992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	699a      	ldr	r2, [r3, #24]
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f022 0204 	bic.w	r2, r2, #4
 80139a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	6999      	ldr	r1, [r3, #24]
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	691a      	ldr	r2, [r3, #16]
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	430a      	orrs	r2, r1
 80139b4:	619a      	str	r2, [r3, #24]
      break;
 80139b6:	e0a5      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	4618      	mov	r0, r3
 80139c0:	f000 faf6 	bl	8013fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	699a      	ldr	r2, [r3, #24]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80139d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	699a      	ldr	r2, [r3, #24]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80139e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	6999      	ldr	r1, [r3, #24]
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	021a      	lsls	r2, r3, #8
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	430a      	orrs	r2, r1
 80139f6:	619a      	str	r2, [r3, #24]
      break;
 80139f8:	e084      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f000 fb5f 	bl	80140c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	69da      	ldr	r2, [r3, #28]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	f042 0208 	orr.w	r2, r2, #8
 8013a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	69da      	ldr	r2, [r3, #28]
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f022 0204 	bic.w	r2, r2, #4
 8013a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	69d9      	ldr	r1, [r3, #28]
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	691a      	ldr	r2, [r3, #16]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	430a      	orrs	r2, r1
 8013a36:	61da      	str	r2, [r3, #28]
      break;
 8013a38:	e064      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	68b9      	ldr	r1, [r7, #8]
 8013a40:	4618      	mov	r0, r3
 8013a42:	f000 fbc7 	bl	80141d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	69da      	ldr	r2, [r3, #28]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	69da      	ldr	r2, [r3, #28]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	69d9      	ldr	r1, [r3, #28]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	691b      	ldr	r3, [r3, #16]
 8013a70:	021a      	lsls	r2, r3, #8
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	430a      	orrs	r2, r1
 8013a78:	61da      	str	r2, [r3, #28]
      break;
 8013a7a:	e043      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	68b9      	ldr	r1, [r7, #8]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f000 fc10 	bl	80142a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f042 0208 	orr.w	r2, r2, #8
 8013a96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f022 0204 	bic.w	r2, r2, #4
 8013aa6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	691a      	ldr	r2, [r3, #16]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	430a      	orrs	r2, r1
 8013ab8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013aba:	e023      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	68b9      	ldr	r1, [r7, #8]
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f000 fc54 	bl	8014370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013ad6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013ae6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	691b      	ldr	r3, [r3, #16]
 8013af2:	021a      	lsls	r2, r3, #8
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	430a      	orrs	r2, r1
 8013afa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013afc:	e002      	b.n	8013b04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013afe:	2301      	movs	r3, #1
 8013b00:	75fb      	strb	r3, [r7, #23]
      break;
 8013b02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2200      	movs	r2, #0
 8013b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3718      	adds	r7, #24
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop

08013b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013b22:	2300      	movs	r3, #0
 8013b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d101      	bne.n	8013b34 <HAL_TIM_ConfigClockSource+0x1c>
 8013b30:	2302      	movs	r3, #2
 8013b32:	e0dc      	b.n	8013cee <HAL_TIM_ConfigClockSource+0x1d6>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2201      	movs	r2, #1
 8013b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2202      	movs	r2, #2
 8013b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	689b      	ldr	r3, [r3, #8]
 8013b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	4b6a      	ldr	r3, [pc, #424]	; (8013cf8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013b50:	4013      	ands	r3, r2
 8013b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	68ba      	ldr	r2, [r7, #8]
 8013b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a64      	ldr	r2, [pc, #400]	; (8013cfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8013b6a:	4293      	cmp	r3, r2
 8013b6c:	f000 80a9 	beq.w	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013b70:	4a62      	ldr	r2, [pc, #392]	; (8013cfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	f200 80ae 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013b78:	4a61      	ldr	r2, [pc, #388]	; (8013d00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	f000 80a1 	beq.w	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013b80:	4a5f      	ldr	r2, [pc, #380]	; (8013d00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	f200 80a6 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013b88:	4a5e      	ldr	r2, [pc, #376]	; (8013d04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	f000 8099 	beq.w	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013b90:	4a5c      	ldr	r2, [pc, #368]	; (8013d04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8013b92:	4293      	cmp	r3, r2
 8013b94:	f200 809e 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013b98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013b9c:	f000 8091 	beq.w	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013ba0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8013ba4:	f200 8096 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013bac:	f000 8089 	beq.w	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013bb4:	f200 808e 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013bbc:	d03e      	beq.n	8013c3c <HAL_TIM_ConfigClockSource+0x124>
 8013bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013bc2:	f200 8087 	bhi.w	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013bca:	f000 8086 	beq.w	8013cda <HAL_TIM_ConfigClockSource+0x1c2>
 8013bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013bd2:	d87f      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bd4:	2b70      	cmp	r3, #112	; 0x70
 8013bd6:	d01a      	beq.n	8013c0e <HAL_TIM_ConfigClockSource+0xf6>
 8013bd8:	2b70      	cmp	r3, #112	; 0x70
 8013bda:	d87b      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bdc:	2b60      	cmp	r3, #96	; 0x60
 8013bde:	d050      	beq.n	8013c82 <HAL_TIM_ConfigClockSource+0x16a>
 8013be0:	2b60      	cmp	r3, #96	; 0x60
 8013be2:	d877      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013be4:	2b50      	cmp	r3, #80	; 0x50
 8013be6:	d03c      	beq.n	8013c62 <HAL_TIM_ConfigClockSource+0x14a>
 8013be8:	2b50      	cmp	r3, #80	; 0x50
 8013bea:	d873      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bec:	2b40      	cmp	r3, #64	; 0x40
 8013bee:	d058      	beq.n	8013ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8013bf0:	2b40      	cmp	r3, #64	; 0x40
 8013bf2:	d86f      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bf4:	2b30      	cmp	r3, #48	; 0x30
 8013bf6:	d064      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013bf8:	2b30      	cmp	r3, #48	; 0x30
 8013bfa:	d86b      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013bfc:	2b20      	cmp	r3, #32
 8013bfe:	d060      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013c00:	2b20      	cmp	r3, #32
 8013c02:	d867      	bhi.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d05c      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013c08:	2b10      	cmp	r3, #16
 8013c0a:	d05a      	beq.n	8013cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013c0c:	e062      	b.n	8013cd4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6818      	ldr	r0, [r3, #0]
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	6899      	ldr	r1, [r3, #8]
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	685a      	ldr	r2, [r3, #4]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	f000 fc8b 	bl	8014538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	689b      	ldr	r3, [r3, #8]
 8013c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	68ba      	ldr	r2, [r7, #8]
 8013c38:	609a      	str	r2, [r3, #8]
      break;
 8013c3a:	e04f      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	6899      	ldr	r1, [r3, #8]
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	685a      	ldr	r2, [r3, #4]
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	f000 fc74 	bl	8014538 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	689a      	ldr	r2, [r3, #8]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013c5e:	609a      	str	r2, [r3, #8]
      break;
 8013c60:	e03c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	6818      	ldr	r0, [r3, #0]
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	6859      	ldr	r1, [r3, #4]
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	461a      	mov	r2, r3
 8013c70:	f000 fbe4 	bl	801443c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2150      	movs	r1, #80	; 0x50
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f000 fc3e 	bl	80144fc <TIM_ITRx_SetConfig>
      break;
 8013c80:	e02c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6818      	ldr	r0, [r3, #0]
 8013c86:	683b      	ldr	r3, [r7, #0]
 8013c88:	6859      	ldr	r1, [r3, #4]
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	68db      	ldr	r3, [r3, #12]
 8013c8e:	461a      	mov	r2, r3
 8013c90:	f000 fc03 	bl	801449a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2160      	movs	r1, #96	; 0x60
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	f000 fc2e 	bl	80144fc <TIM_ITRx_SetConfig>
      break;
 8013ca0:	e01c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6818      	ldr	r0, [r3, #0]
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	6859      	ldr	r1, [r3, #4]
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	461a      	mov	r2, r3
 8013cb0:	f000 fbc4 	bl	801443c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2140      	movs	r1, #64	; 0x40
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 fc1e 	bl	80144fc <TIM_ITRx_SetConfig>
      break;
 8013cc0:	e00c      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4619      	mov	r1, r3
 8013ccc:	4610      	mov	r0, r2
 8013cce:	f000 fc15 	bl	80144fc <TIM_ITRx_SetConfig>
      break;
 8013cd2:	e003      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013cd4:	2301      	movs	r3, #1
 8013cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8013cd8:	e000      	b.n	8013cdc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	2201      	movs	r2, #1
 8013ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3710      	adds	r7, #16
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	ffceff88 	.word	0xffceff88
 8013cfc:	00100040 	.word	0x00100040
 8013d00:	00100030 	.word	0x00100030
 8013d04:	00100020 	.word	0x00100020

08013d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013d08:	b480      	push	{r7}
 8013d0a:	b083      	sub	sp, #12
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013d10:	bf00      	nop
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1a:	4770      	bx	lr

08013d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013d24:	bf00      	nop
 8013d26:	370c      	adds	r7, #12
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2e:	4770      	bx	lr

08013d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013d30:	b480      	push	{r7}
 8013d32:	b083      	sub	sp, #12
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013d38:	bf00      	nop
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b085      	sub	sp, #20
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4a46      	ldr	r2, [pc, #280]	; (8013e70 <TIM_Base_SetConfig+0x12c>)
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	d013      	beq.n	8013d84 <TIM_Base_SetConfig+0x40>
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d62:	d00f      	beq.n	8013d84 <TIM_Base_SetConfig+0x40>
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	4a43      	ldr	r2, [pc, #268]	; (8013e74 <TIM_Base_SetConfig+0x130>)
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d00b      	beq.n	8013d84 <TIM_Base_SetConfig+0x40>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4a42      	ldr	r2, [pc, #264]	; (8013e78 <TIM_Base_SetConfig+0x134>)
 8013d70:	4293      	cmp	r3, r2
 8013d72:	d007      	beq.n	8013d84 <TIM_Base_SetConfig+0x40>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4a41      	ldr	r2, [pc, #260]	; (8013e7c <TIM_Base_SetConfig+0x138>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d003      	beq.n	8013d84 <TIM_Base_SetConfig+0x40>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	4a40      	ldr	r2, [pc, #256]	; (8013e80 <TIM_Base_SetConfig+0x13c>)
 8013d80:	4293      	cmp	r3, r2
 8013d82:	d108      	bne.n	8013d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	68fa      	ldr	r2, [r7, #12]
 8013d92:	4313      	orrs	r3, r2
 8013d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	4a35      	ldr	r2, [pc, #212]	; (8013e70 <TIM_Base_SetConfig+0x12c>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d01f      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013da4:	d01b      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	4a32      	ldr	r2, [pc, #200]	; (8013e74 <TIM_Base_SetConfig+0x130>)
 8013daa:	4293      	cmp	r3, r2
 8013dac:	d017      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	4a31      	ldr	r2, [pc, #196]	; (8013e78 <TIM_Base_SetConfig+0x134>)
 8013db2:	4293      	cmp	r3, r2
 8013db4:	d013      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4a30      	ldr	r2, [pc, #192]	; (8013e7c <TIM_Base_SetConfig+0x138>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d00f      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	4a2f      	ldr	r2, [pc, #188]	; (8013e80 <TIM_Base_SetConfig+0x13c>)
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	d00b      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4a2e      	ldr	r2, [pc, #184]	; (8013e84 <TIM_Base_SetConfig+0x140>)
 8013dca:	4293      	cmp	r3, r2
 8013dcc:	d007      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	4a2d      	ldr	r2, [pc, #180]	; (8013e88 <TIM_Base_SetConfig+0x144>)
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	d003      	beq.n	8013dde <TIM_Base_SetConfig+0x9a>
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	4a2c      	ldr	r2, [pc, #176]	; (8013e8c <TIM_Base_SetConfig+0x148>)
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	d108      	bne.n	8013df0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	68fa      	ldr	r2, [r7, #12]
 8013dec:	4313      	orrs	r3, r2
 8013dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	695b      	ldr	r3, [r3, #20]
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013e04:	683b      	ldr	r3, [r7, #0]
 8013e06:	689a      	ldr	r2, [r3, #8]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4a16      	ldr	r2, [pc, #88]	; (8013e70 <TIM_Base_SetConfig+0x12c>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d00f      	beq.n	8013e3c <TIM_Base_SetConfig+0xf8>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	4a18      	ldr	r2, [pc, #96]	; (8013e80 <TIM_Base_SetConfig+0x13c>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d00b      	beq.n	8013e3c <TIM_Base_SetConfig+0xf8>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	4a17      	ldr	r2, [pc, #92]	; (8013e84 <TIM_Base_SetConfig+0x140>)
 8013e28:	4293      	cmp	r3, r2
 8013e2a:	d007      	beq.n	8013e3c <TIM_Base_SetConfig+0xf8>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4a16      	ldr	r2, [pc, #88]	; (8013e88 <TIM_Base_SetConfig+0x144>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d003      	beq.n	8013e3c <TIM_Base_SetConfig+0xf8>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a15      	ldr	r2, [pc, #84]	; (8013e8c <TIM_Base_SetConfig+0x148>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d103      	bne.n	8013e44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	691a      	ldr	r2, [r3, #16]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2201      	movs	r2, #1
 8013e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	691b      	ldr	r3, [r3, #16]
 8013e4e:	f003 0301 	and.w	r3, r3, #1
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	d105      	bne.n	8013e62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	691b      	ldr	r3, [r3, #16]
 8013e5a:	f023 0201 	bic.w	r2, r3, #1
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	611a      	str	r2, [r3, #16]
  }
}
 8013e62:	bf00      	nop
 8013e64:	3714      	adds	r7, #20
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop
 8013e70:	40010000 	.word	0x40010000
 8013e74:	40000400 	.word	0x40000400
 8013e78:	40000800 	.word	0x40000800
 8013e7c:	40000c00 	.word	0x40000c00
 8013e80:	40010400 	.word	0x40010400
 8013e84:	40014000 	.word	0x40014000
 8013e88:	40014400 	.word	0x40014400
 8013e8c:	40014800 	.word	0x40014800

08013e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013e90:	b480      	push	{r7}
 8013e92:	b087      	sub	sp, #28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a1b      	ldr	r3, [r3, #32]
 8013e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6a1b      	ldr	r3, [r3, #32]
 8013ea4:	f023 0201 	bic.w	r2, r3, #1
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	685b      	ldr	r3, [r3, #4]
 8013eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	699b      	ldr	r3, [r3, #24]
 8013eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013eb8:	68fa      	ldr	r2, [r7, #12]
 8013eba:	4b37      	ldr	r3, [pc, #220]	; (8013f98 <TIM_OC1_SetConfig+0x108>)
 8013ebc:	4013      	ands	r3, r2
 8013ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	f023 0303 	bic.w	r3, r3, #3
 8013ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	68fa      	ldr	r2, [r7, #12]
 8013ece:	4313      	orrs	r3, r2
 8013ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f023 0302 	bic.w	r3, r3, #2
 8013ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	689b      	ldr	r3, [r3, #8]
 8013ede:	697a      	ldr	r2, [r7, #20]
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	4a2d      	ldr	r2, [pc, #180]	; (8013f9c <TIM_OC1_SetConfig+0x10c>)
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d00f      	beq.n	8013f0c <TIM_OC1_SetConfig+0x7c>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	4a2c      	ldr	r2, [pc, #176]	; (8013fa0 <TIM_OC1_SetConfig+0x110>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d00b      	beq.n	8013f0c <TIM_OC1_SetConfig+0x7c>
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4a2b      	ldr	r2, [pc, #172]	; (8013fa4 <TIM_OC1_SetConfig+0x114>)
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	d007      	beq.n	8013f0c <TIM_OC1_SetConfig+0x7c>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	4a2a      	ldr	r2, [pc, #168]	; (8013fa8 <TIM_OC1_SetConfig+0x118>)
 8013f00:	4293      	cmp	r3, r2
 8013f02:	d003      	beq.n	8013f0c <TIM_OC1_SetConfig+0x7c>
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	4a29      	ldr	r2, [pc, #164]	; (8013fac <TIM_OC1_SetConfig+0x11c>)
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	d10c      	bne.n	8013f26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	f023 0308 	bic.w	r3, r3, #8
 8013f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	68db      	ldr	r3, [r3, #12]
 8013f18:	697a      	ldr	r2, [r7, #20]
 8013f1a:	4313      	orrs	r3, r2
 8013f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	f023 0304 	bic.w	r3, r3, #4
 8013f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4a1c      	ldr	r2, [pc, #112]	; (8013f9c <TIM_OC1_SetConfig+0x10c>)
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	d00f      	beq.n	8013f4e <TIM_OC1_SetConfig+0xbe>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4a1b      	ldr	r2, [pc, #108]	; (8013fa0 <TIM_OC1_SetConfig+0x110>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d00b      	beq.n	8013f4e <TIM_OC1_SetConfig+0xbe>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	4a1a      	ldr	r2, [pc, #104]	; (8013fa4 <TIM_OC1_SetConfig+0x114>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d007      	beq.n	8013f4e <TIM_OC1_SetConfig+0xbe>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	4a19      	ldr	r2, [pc, #100]	; (8013fa8 <TIM_OC1_SetConfig+0x118>)
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d003      	beq.n	8013f4e <TIM_OC1_SetConfig+0xbe>
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	4a18      	ldr	r2, [pc, #96]	; (8013fac <TIM_OC1_SetConfig+0x11c>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d111      	bne.n	8013f72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	695b      	ldr	r3, [r3, #20]
 8013f62:	693a      	ldr	r2, [r7, #16]
 8013f64:	4313      	orrs	r3, r2
 8013f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	699b      	ldr	r3, [r3, #24]
 8013f6c:	693a      	ldr	r2, [r7, #16]
 8013f6e:	4313      	orrs	r3, r2
 8013f70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	693a      	ldr	r2, [r7, #16]
 8013f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	68fa      	ldr	r2, [r7, #12]
 8013f7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	685a      	ldr	r2, [r3, #4]
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	697a      	ldr	r2, [r7, #20]
 8013f8a:	621a      	str	r2, [r3, #32]
}
 8013f8c:	bf00      	nop
 8013f8e:	371c      	adds	r7, #28
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr
 8013f98:	fffeff8f 	.word	0xfffeff8f
 8013f9c:	40010000 	.word	0x40010000
 8013fa0:	40010400 	.word	0x40010400
 8013fa4:	40014000 	.word	0x40014000
 8013fa8:	40014400 	.word	0x40014400
 8013fac:	40014800 	.word	0x40014800

08013fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013fb0:	b480      	push	{r7}
 8013fb2:	b087      	sub	sp, #28
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6a1b      	ldr	r3, [r3, #32]
 8013fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6a1b      	ldr	r3, [r3, #32]
 8013fc4:	f023 0210 	bic.w	r2, r3, #16
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	699b      	ldr	r3, [r3, #24]
 8013fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	4b34      	ldr	r3, [pc, #208]	; (80140ac <TIM_OC2_SetConfig+0xfc>)
 8013fdc:	4013      	ands	r3, r2
 8013fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	021b      	lsls	r3, r3, #8
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	4313      	orrs	r3, r2
 8013ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	f023 0320 	bic.w	r3, r3, #32
 8013ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013ffc:	683b      	ldr	r3, [r7, #0]
 8013ffe:	689b      	ldr	r3, [r3, #8]
 8014000:	011b      	lsls	r3, r3, #4
 8014002:	697a      	ldr	r2, [r7, #20]
 8014004:	4313      	orrs	r3, r2
 8014006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	4a29      	ldr	r2, [pc, #164]	; (80140b0 <TIM_OC2_SetConfig+0x100>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d003      	beq.n	8014018 <TIM_OC2_SetConfig+0x68>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	4a28      	ldr	r2, [pc, #160]	; (80140b4 <TIM_OC2_SetConfig+0x104>)
 8014014:	4293      	cmp	r3, r2
 8014016:	d10d      	bne.n	8014034 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	011b      	lsls	r3, r3, #4
 8014026:	697a      	ldr	r2, [r7, #20]
 8014028:	4313      	orrs	r3, r2
 801402a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014032:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	4a1e      	ldr	r2, [pc, #120]	; (80140b0 <TIM_OC2_SetConfig+0x100>)
 8014038:	4293      	cmp	r3, r2
 801403a:	d00f      	beq.n	801405c <TIM_OC2_SetConfig+0xac>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4a1d      	ldr	r2, [pc, #116]	; (80140b4 <TIM_OC2_SetConfig+0x104>)
 8014040:	4293      	cmp	r3, r2
 8014042:	d00b      	beq.n	801405c <TIM_OC2_SetConfig+0xac>
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	4a1c      	ldr	r2, [pc, #112]	; (80140b8 <TIM_OC2_SetConfig+0x108>)
 8014048:	4293      	cmp	r3, r2
 801404a:	d007      	beq.n	801405c <TIM_OC2_SetConfig+0xac>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	4a1b      	ldr	r2, [pc, #108]	; (80140bc <TIM_OC2_SetConfig+0x10c>)
 8014050:	4293      	cmp	r3, r2
 8014052:	d003      	beq.n	801405c <TIM_OC2_SetConfig+0xac>
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	4a1a      	ldr	r2, [pc, #104]	; (80140c0 <TIM_OC2_SetConfig+0x110>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d113      	bne.n	8014084 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801405c:	693b      	ldr	r3, [r7, #16]
 801405e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801406a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	695b      	ldr	r3, [r3, #20]
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	693a      	ldr	r2, [r7, #16]
 8014074:	4313      	orrs	r3, r2
 8014076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	699b      	ldr	r3, [r3, #24]
 801407c:	009b      	lsls	r3, r3, #2
 801407e:	693a      	ldr	r2, [r7, #16]
 8014080:	4313      	orrs	r3, r2
 8014082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	693a      	ldr	r2, [r7, #16]
 8014088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	685a      	ldr	r2, [r3, #4]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	697a      	ldr	r2, [r7, #20]
 801409c:	621a      	str	r2, [r3, #32]
}
 801409e:	bf00      	nop
 80140a0:	371c      	adds	r7, #28
 80140a2:	46bd      	mov	sp, r7
 80140a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a8:	4770      	bx	lr
 80140aa:	bf00      	nop
 80140ac:	feff8fff 	.word	0xfeff8fff
 80140b0:	40010000 	.word	0x40010000
 80140b4:	40010400 	.word	0x40010400
 80140b8:	40014000 	.word	0x40014000
 80140bc:	40014400 	.word	0x40014400
 80140c0:	40014800 	.word	0x40014800

080140c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b087      	sub	sp, #28
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a1b      	ldr	r3, [r3, #32]
 80140d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6a1b      	ldr	r3, [r3, #32]
 80140d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	69db      	ldr	r3, [r3, #28]
 80140ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	4b33      	ldr	r3, [pc, #204]	; (80141bc <TIM_OC3_SetConfig+0xf8>)
 80140f0:	4013      	ands	r3, r2
 80140f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	f023 0303 	bic.w	r3, r3, #3
 80140fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	4313      	orrs	r3, r2
 8014104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	689b      	ldr	r3, [r3, #8]
 8014112:	021b      	lsls	r3, r3, #8
 8014114:	697a      	ldr	r2, [r7, #20]
 8014116:	4313      	orrs	r3, r2
 8014118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4a28      	ldr	r2, [pc, #160]	; (80141c0 <TIM_OC3_SetConfig+0xfc>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d003      	beq.n	801412a <TIM_OC3_SetConfig+0x66>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4a27      	ldr	r2, [pc, #156]	; (80141c4 <TIM_OC3_SetConfig+0x100>)
 8014126:	4293      	cmp	r3, r2
 8014128:	d10d      	bne.n	8014146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	68db      	ldr	r3, [r3, #12]
 8014136:	021b      	lsls	r3, r3, #8
 8014138:	697a      	ldr	r2, [r7, #20]
 801413a:	4313      	orrs	r3, r2
 801413c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801413e:	697b      	ldr	r3, [r7, #20]
 8014140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	4a1d      	ldr	r2, [pc, #116]	; (80141c0 <TIM_OC3_SetConfig+0xfc>)
 801414a:	4293      	cmp	r3, r2
 801414c:	d00f      	beq.n	801416e <TIM_OC3_SetConfig+0xaa>
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	4a1c      	ldr	r2, [pc, #112]	; (80141c4 <TIM_OC3_SetConfig+0x100>)
 8014152:	4293      	cmp	r3, r2
 8014154:	d00b      	beq.n	801416e <TIM_OC3_SetConfig+0xaa>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4a1b      	ldr	r2, [pc, #108]	; (80141c8 <TIM_OC3_SetConfig+0x104>)
 801415a:	4293      	cmp	r3, r2
 801415c:	d007      	beq.n	801416e <TIM_OC3_SetConfig+0xaa>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	4a1a      	ldr	r2, [pc, #104]	; (80141cc <TIM_OC3_SetConfig+0x108>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d003      	beq.n	801416e <TIM_OC3_SetConfig+0xaa>
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4a19      	ldr	r2, [pc, #100]	; (80141d0 <TIM_OC3_SetConfig+0x10c>)
 801416a:	4293      	cmp	r3, r2
 801416c:	d113      	bne.n	8014196 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014176:	693b      	ldr	r3, [r7, #16]
 8014178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801417c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	011b      	lsls	r3, r3, #4
 8014184:	693a      	ldr	r2, [r7, #16]
 8014186:	4313      	orrs	r3, r2
 8014188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	699b      	ldr	r3, [r3, #24]
 801418e:	011b      	lsls	r3, r3, #4
 8014190:	693a      	ldr	r2, [r7, #16]
 8014192:	4313      	orrs	r3, r2
 8014194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	693a      	ldr	r2, [r7, #16]
 801419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	68fa      	ldr	r2, [r7, #12]
 80141a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	685a      	ldr	r2, [r3, #4]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	621a      	str	r2, [r3, #32]
}
 80141b0:	bf00      	nop
 80141b2:	371c      	adds	r7, #28
 80141b4:	46bd      	mov	sp, r7
 80141b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ba:	4770      	bx	lr
 80141bc:	fffeff8f 	.word	0xfffeff8f
 80141c0:	40010000 	.word	0x40010000
 80141c4:	40010400 	.word	0x40010400
 80141c8:	40014000 	.word	0x40014000
 80141cc:	40014400 	.word	0x40014400
 80141d0:	40014800 	.word	0x40014800

080141d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80141d4:	b480      	push	{r7}
 80141d6:	b087      	sub	sp, #28
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	6a1b      	ldr	r3, [r3, #32]
 80141e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6a1b      	ldr	r3, [r3, #32]
 80141e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	69db      	ldr	r3, [r3, #28]
 80141fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80141fc:	68fa      	ldr	r2, [r7, #12]
 80141fe:	4b24      	ldr	r3, [pc, #144]	; (8014290 <TIM_OC4_SetConfig+0xbc>)
 8014200:	4013      	ands	r3, r2
 8014202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801420c:	683b      	ldr	r3, [r7, #0]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	021b      	lsls	r3, r3, #8
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	4313      	orrs	r3, r2
 8014216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801421e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014220:	683b      	ldr	r3, [r7, #0]
 8014222:	689b      	ldr	r3, [r3, #8]
 8014224:	031b      	lsls	r3, r3, #12
 8014226:	693a      	ldr	r2, [r7, #16]
 8014228:	4313      	orrs	r3, r2
 801422a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	4a19      	ldr	r2, [pc, #100]	; (8014294 <TIM_OC4_SetConfig+0xc0>)
 8014230:	4293      	cmp	r3, r2
 8014232:	d00f      	beq.n	8014254 <TIM_OC4_SetConfig+0x80>
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	4a18      	ldr	r2, [pc, #96]	; (8014298 <TIM_OC4_SetConfig+0xc4>)
 8014238:	4293      	cmp	r3, r2
 801423a:	d00b      	beq.n	8014254 <TIM_OC4_SetConfig+0x80>
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	4a17      	ldr	r2, [pc, #92]	; (801429c <TIM_OC4_SetConfig+0xc8>)
 8014240:	4293      	cmp	r3, r2
 8014242:	d007      	beq.n	8014254 <TIM_OC4_SetConfig+0x80>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	4a16      	ldr	r2, [pc, #88]	; (80142a0 <TIM_OC4_SetConfig+0xcc>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d003      	beq.n	8014254 <TIM_OC4_SetConfig+0x80>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	4a15      	ldr	r2, [pc, #84]	; (80142a4 <TIM_OC4_SetConfig+0xd0>)
 8014250:	4293      	cmp	r3, r2
 8014252:	d109      	bne.n	8014268 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801425a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	695b      	ldr	r3, [r3, #20]
 8014260:	019b      	lsls	r3, r3, #6
 8014262:	697a      	ldr	r2, [r7, #20]
 8014264:	4313      	orrs	r3, r2
 8014266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	697a      	ldr	r2, [r7, #20]
 801426c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	68fa      	ldr	r2, [r7, #12]
 8014272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	685a      	ldr	r2, [r3, #4]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	693a      	ldr	r2, [r7, #16]
 8014280:	621a      	str	r2, [r3, #32]
}
 8014282:	bf00      	nop
 8014284:	371c      	adds	r7, #28
 8014286:	46bd      	mov	sp, r7
 8014288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	feff8fff 	.word	0xfeff8fff
 8014294:	40010000 	.word	0x40010000
 8014298:	40010400 	.word	0x40010400
 801429c:	40014000 	.word	0x40014000
 80142a0:	40014400 	.word	0x40014400
 80142a4:	40014800 	.word	0x40014800

080142a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80142a8:	b480      	push	{r7}
 80142aa:	b087      	sub	sp, #28
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	6a1b      	ldr	r3, [r3, #32]
 80142b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a1b      	ldr	r3, [r3, #32]
 80142bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80142d0:	68fa      	ldr	r2, [r7, #12]
 80142d2:	4b21      	ldr	r3, [pc, #132]	; (8014358 <TIM_OC5_SetConfig+0xb0>)
 80142d4:	4013      	ands	r3, r2
 80142d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	68fa      	ldr	r2, [r7, #12]
 80142de:	4313      	orrs	r3, r2
 80142e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80142e2:	693b      	ldr	r3, [r7, #16]
 80142e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80142e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	689b      	ldr	r3, [r3, #8]
 80142ee:	041b      	lsls	r3, r3, #16
 80142f0:	693a      	ldr	r2, [r7, #16]
 80142f2:	4313      	orrs	r3, r2
 80142f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	4a18      	ldr	r2, [pc, #96]	; (801435c <TIM_OC5_SetConfig+0xb4>)
 80142fa:	4293      	cmp	r3, r2
 80142fc:	d00f      	beq.n	801431e <TIM_OC5_SetConfig+0x76>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4a17      	ldr	r2, [pc, #92]	; (8014360 <TIM_OC5_SetConfig+0xb8>)
 8014302:	4293      	cmp	r3, r2
 8014304:	d00b      	beq.n	801431e <TIM_OC5_SetConfig+0x76>
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4a16      	ldr	r2, [pc, #88]	; (8014364 <TIM_OC5_SetConfig+0xbc>)
 801430a:	4293      	cmp	r3, r2
 801430c:	d007      	beq.n	801431e <TIM_OC5_SetConfig+0x76>
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	4a15      	ldr	r2, [pc, #84]	; (8014368 <TIM_OC5_SetConfig+0xc0>)
 8014312:	4293      	cmp	r3, r2
 8014314:	d003      	beq.n	801431e <TIM_OC5_SetConfig+0x76>
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	4a14      	ldr	r2, [pc, #80]	; (801436c <TIM_OC5_SetConfig+0xc4>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d109      	bne.n	8014332 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	695b      	ldr	r3, [r3, #20]
 801432a:	021b      	lsls	r3, r3, #8
 801432c:	697a      	ldr	r2, [r7, #20]
 801432e:	4313      	orrs	r3, r2
 8014330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	697a      	ldr	r2, [r7, #20]
 8014336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	685a      	ldr	r2, [r3, #4]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	693a      	ldr	r2, [r7, #16]
 801434a:	621a      	str	r2, [r3, #32]
}
 801434c:	bf00      	nop
 801434e:	371c      	adds	r7, #28
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr
 8014358:	fffeff8f 	.word	0xfffeff8f
 801435c:	40010000 	.word	0x40010000
 8014360:	40010400 	.word	0x40010400
 8014364:	40014000 	.word	0x40014000
 8014368:	40014400 	.word	0x40014400
 801436c:	40014800 	.word	0x40014800

08014370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014370:	b480      	push	{r7}
 8014372:	b087      	sub	sp, #28
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6a1b      	ldr	r3, [r3, #32]
 801437e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6a1b      	ldr	r3, [r3, #32]
 8014384:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014398:	68fa      	ldr	r2, [r7, #12]
 801439a:	4b22      	ldr	r3, [pc, #136]	; (8014424 <TIM_OC6_SetConfig+0xb4>)
 801439c:	4013      	ands	r3, r2
 801439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	021b      	lsls	r3, r3, #8
 80143a6:	68fa      	ldr	r2, [r7, #12]
 80143a8:	4313      	orrs	r3, r2
 80143aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80143b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	689b      	ldr	r3, [r3, #8]
 80143b8:	051b      	lsls	r3, r3, #20
 80143ba:	693a      	ldr	r2, [r7, #16]
 80143bc:	4313      	orrs	r3, r2
 80143be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	4a19      	ldr	r2, [pc, #100]	; (8014428 <TIM_OC6_SetConfig+0xb8>)
 80143c4:	4293      	cmp	r3, r2
 80143c6:	d00f      	beq.n	80143e8 <TIM_OC6_SetConfig+0x78>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4a18      	ldr	r2, [pc, #96]	; (801442c <TIM_OC6_SetConfig+0xbc>)
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d00b      	beq.n	80143e8 <TIM_OC6_SetConfig+0x78>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	4a17      	ldr	r2, [pc, #92]	; (8014430 <TIM_OC6_SetConfig+0xc0>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d007      	beq.n	80143e8 <TIM_OC6_SetConfig+0x78>
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a16      	ldr	r2, [pc, #88]	; (8014434 <TIM_OC6_SetConfig+0xc4>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d003      	beq.n	80143e8 <TIM_OC6_SetConfig+0x78>
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	4a15      	ldr	r2, [pc, #84]	; (8014438 <TIM_OC6_SetConfig+0xc8>)
 80143e4:	4293      	cmp	r3, r2
 80143e6:	d109      	bne.n	80143fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80143ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	695b      	ldr	r3, [r3, #20]
 80143f4:	029b      	lsls	r3, r3, #10
 80143f6:	697a      	ldr	r2, [r7, #20]
 80143f8:	4313      	orrs	r3, r2
 80143fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	697a      	ldr	r2, [r7, #20]
 8014400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	68fa      	ldr	r2, [r7, #12]
 8014406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	685a      	ldr	r2, [r3, #4]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	693a      	ldr	r2, [r7, #16]
 8014414:	621a      	str	r2, [r3, #32]
}
 8014416:	bf00      	nop
 8014418:	371c      	adds	r7, #28
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	feff8fff 	.word	0xfeff8fff
 8014428:	40010000 	.word	0x40010000
 801442c:	40010400 	.word	0x40010400
 8014430:	40014000 	.word	0x40014000
 8014434:	40014400 	.word	0x40014400
 8014438:	40014800 	.word	0x40014800

0801443c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801443c:	b480      	push	{r7}
 801443e:	b087      	sub	sp, #28
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	6a1b      	ldr	r3, [r3, #32]
 801444c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	6a1b      	ldr	r3, [r3, #32]
 8014452:	f023 0201 	bic.w	r2, r3, #1
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	699b      	ldr	r3, [r3, #24]
 801445e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	011b      	lsls	r3, r3, #4
 801446c:	693a      	ldr	r2, [r7, #16]
 801446e:	4313      	orrs	r3, r2
 8014470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	f023 030a 	bic.w	r3, r3, #10
 8014478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801447a:	697a      	ldr	r2, [r7, #20]
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	4313      	orrs	r3, r2
 8014480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	693a      	ldr	r2, [r7, #16]
 8014486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	697a      	ldr	r2, [r7, #20]
 801448c:	621a      	str	r2, [r3, #32]
}
 801448e:	bf00      	nop
 8014490:	371c      	adds	r7, #28
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801449a:	b480      	push	{r7}
 801449c:	b087      	sub	sp, #28
 801449e:	af00      	add	r7, sp, #0
 80144a0:	60f8      	str	r0, [r7, #12]
 80144a2:	60b9      	str	r1, [r7, #8]
 80144a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	6a1b      	ldr	r3, [r3, #32]
 80144aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	6a1b      	ldr	r3, [r3, #32]
 80144b0:	f023 0210 	bic.w	r2, r3, #16
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	699b      	ldr	r3, [r3, #24]
 80144bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80144c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	031b      	lsls	r3, r3, #12
 80144ca:	693a      	ldr	r2, [r7, #16]
 80144cc:	4313      	orrs	r3, r2
 80144ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80144d0:	697b      	ldr	r3, [r7, #20]
 80144d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80144d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	011b      	lsls	r3, r3, #4
 80144dc:	697a      	ldr	r2, [r7, #20]
 80144de:	4313      	orrs	r3, r2
 80144e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	693a      	ldr	r2, [r7, #16]
 80144e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	697a      	ldr	r2, [r7, #20]
 80144ec:	621a      	str	r2, [r3, #32]
}
 80144ee:	bf00      	nop
 80144f0:	371c      	adds	r7, #28
 80144f2:	46bd      	mov	sp, r7
 80144f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f8:	4770      	bx	lr
	...

080144fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80144fc:	b480      	push	{r7}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	689b      	ldr	r3, [r3, #8]
 801450a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801450c:	68fa      	ldr	r2, [r7, #12]
 801450e:	4b09      	ldr	r3, [pc, #36]	; (8014534 <TIM_ITRx_SetConfig+0x38>)
 8014510:	4013      	ands	r3, r2
 8014512:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014514:	683a      	ldr	r2, [r7, #0]
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	4313      	orrs	r3, r2
 801451a:	f043 0307 	orr.w	r3, r3, #7
 801451e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	68fa      	ldr	r2, [r7, #12]
 8014524:	609a      	str	r2, [r3, #8]
}
 8014526:	bf00      	nop
 8014528:	3714      	adds	r7, #20
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	ffcfff8f 	.word	0xffcfff8f

08014538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014538:	b480      	push	{r7}
 801453a:	b087      	sub	sp, #28
 801453c:	af00      	add	r7, sp, #0
 801453e:	60f8      	str	r0, [r7, #12]
 8014540:	60b9      	str	r1, [r7, #8]
 8014542:	607a      	str	r2, [r7, #4]
 8014544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	021a      	lsls	r2, r3, #8
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	431a      	orrs	r2, r3
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	4313      	orrs	r3, r2
 8014560:	697a      	ldr	r2, [r7, #20]
 8014562:	4313      	orrs	r3, r2
 8014564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	697a      	ldr	r2, [r7, #20]
 801456a:	609a      	str	r2, [r3, #8]
}
 801456c:	bf00      	nop
 801456e:	371c      	adds	r7, #28
 8014570:	46bd      	mov	sp, r7
 8014572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014576:	4770      	bx	lr

08014578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014578:	b480      	push	{r7}
 801457a:	b087      	sub	sp, #28
 801457c:	af00      	add	r7, sp, #0
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	60b9      	str	r1, [r7, #8]
 8014582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	f003 031f 	and.w	r3, r3, #31
 801458a:	2201      	movs	r2, #1
 801458c:	fa02 f303 	lsl.w	r3, r2, r3
 8014590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	6a1a      	ldr	r2, [r3, #32]
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	43db      	mvns	r3, r3
 801459a:	401a      	ands	r2, r3
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	6a1a      	ldr	r2, [r3, #32]
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	f003 031f 	and.w	r3, r3, #31
 80145aa:	6879      	ldr	r1, [r7, #4]
 80145ac:	fa01 f303 	lsl.w	r3, r1, r3
 80145b0:	431a      	orrs	r2, r3
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	621a      	str	r2, [r3, #32]
}
 80145b6:	bf00      	nop
 80145b8:	371c      	adds	r7, #28
 80145ba:	46bd      	mov	sp, r7
 80145bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c0:	4770      	bx	lr
	...

080145c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80145c4:	b480      	push	{r7}
 80145c6:	b085      	sub	sp, #20
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d101      	bne.n	80145dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80145d8:	2302      	movs	r3, #2
 80145da:	e06d      	b.n	80146b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2201      	movs	r2, #1
 80145e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2202      	movs	r2, #2
 80145e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4a30      	ldr	r2, [pc, #192]	; (80146c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014602:	4293      	cmp	r3, r2
 8014604:	d004      	beq.n	8014610 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	4a2f      	ldr	r2, [pc, #188]	; (80146c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801460c:	4293      	cmp	r3, r2
 801460e:	d108      	bne.n	8014622 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014616:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	68fa      	ldr	r2, [r7, #12]
 801461e:	4313      	orrs	r3, r2
 8014620:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	4313      	orrs	r3, r2
 8014632:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	68fa      	ldr	r2, [r7, #12]
 801463a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4a20      	ldr	r2, [pc, #128]	; (80146c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014642:	4293      	cmp	r3, r2
 8014644:	d022      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801464e:	d01d      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4a1d      	ldr	r2, [pc, #116]	; (80146cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014656:	4293      	cmp	r3, r2
 8014658:	d018      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4a1c      	ldr	r2, [pc, #112]	; (80146d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014660:	4293      	cmp	r3, r2
 8014662:	d013      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4a1a      	ldr	r2, [pc, #104]	; (80146d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801466a:	4293      	cmp	r3, r2
 801466c:	d00e      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	4a15      	ldr	r2, [pc, #84]	; (80146c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014674:	4293      	cmp	r3, r2
 8014676:	d009      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	4a16      	ldr	r2, [pc, #88]	; (80146d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801467e:	4293      	cmp	r3, r2
 8014680:	d004      	beq.n	801468c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	4a15      	ldr	r2, [pc, #84]	; (80146dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014688:	4293      	cmp	r3, r2
 801468a:	d10c      	bne.n	80146a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	68ba      	ldr	r2, [r7, #8]
 801469a:	4313      	orrs	r3, r2
 801469c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	68ba      	ldr	r2, [r7, #8]
 80146a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2201      	movs	r2, #1
 80146aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2200      	movs	r2, #0
 80146b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80146b6:	2300      	movs	r3, #0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3714      	adds	r7, #20
 80146bc:	46bd      	mov	sp, r7
 80146be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c2:	4770      	bx	lr
 80146c4:	40010000 	.word	0x40010000
 80146c8:	40010400 	.word	0x40010400
 80146cc:	40000400 	.word	0x40000400
 80146d0:	40000800 	.word	0x40000800
 80146d4:	40000c00 	.word	0x40000c00
 80146d8:	40001800 	.word	0x40001800
 80146dc:	40014000 	.word	0x40014000

080146e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b085      	sub	sp, #20
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80146ea:	2300      	movs	r3, #0
 80146ec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	d101      	bne.n	80146fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80146f8:	2302      	movs	r3, #2
 80146fa:	e065      	b.n	80147c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2201      	movs	r2, #1
 8014700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	68db      	ldr	r3, [r3, #12]
 801470e:	4313      	orrs	r3, r2
 8014710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014718:	683b      	ldr	r3, [r7, #0]
 801471a:	689b      	ldr	r3, [r3, #8]
 801471c:	4313      	orrs	r3, r2
 801471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	4313      	orrs	r3, r2
 801472c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4313      	orrs	r3, r2
 801473a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014742:	683b      	ldr	r3, [r7, #0]
 8014744:	691b      	ldr	r3, [r3, #16]
 8014746:	4313      	orrs	r3, r2
 8014748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	695b      	ldr	r3, [r3, #20]
 8014754:	4313      	orrs	r3, r2
 8014756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014762:	4313      	orrs	r3, r2
 8014764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	699b      	ldr	r3, [r3, #24]
 8014770:	041b      	lsls	r3, r3, #16
 8014772:	4313      	orrs	r3, r2
 8014774:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a16      	ldr	r2, [pc, #88]	; (80147d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801477c:	4293      	cmp	r3, r2
 801477e:	d004      	beq.n	801478a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4a14      	ldr	r2, [pc, #80]	; (80147d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8014786:	4293      	cmp	r3, r2
 8014788:	d115      	bne.n	80147b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014794:	051b      	lsls	r3, r3, #20
 8014796:	4313      	orrs	r3, r2
 8014798:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	69db      	ldr	r3, [r3, #28]
 80147a4:	4313      	orrs	r3, r2
 80147a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	6a1b      	ldr	r3, [r3, #32]
 80147b2:	4313      	orrs	r3, r2
 80147b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80147c6:	2300      	movs	r3, #0
}
 80147c8:	4618      	mov	r0, r3
 80147ca:	3714      	adds	r7, #20
 80147cc:	46bd      	mov	sp, r7
 80147ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	40010000 	.word	0x40010000
 80147d8:	40010400 	.word	0x40010400

080147dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80147dc:	b480      	push	{r7}
 80147de:	b083      	sub	sp, #12
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80147e4:	bf00      	nop
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80147f8:	bf00      	nop
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014804:	b480      	push	{r7}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801480c:	bf00      	nop
 801480e:	370c      	adds	r7, #12
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr

08014818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d101      	bne.n	801482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014826:	2301      	movs	r3, #1
 8014828:	e042      	b.n	80148b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014830:	2b00      	cmp	r3, #0
 8014832:	d106      	bne.n	8014842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2200      	movs	r2, #0
 8014838:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801483c:	6878      	ldr	r0, [r7, #4]
 801483e:	f7f0 ff15 	bl	800566c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2224      	movs	r2, #36	; 0x24
 8014846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	681a      	ldr	r2, [r3, #0]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	f022 0201 	bic.w	r2, r2, #1
 8014858:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801485e:	2b00      	cmp	r3, #0
 8014860:	d002      	beq.n	8014868 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8014862:	6878      	ldr	r0, [r7, #4]
 8014864:	f001 fbc2 	bl	8015fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 fe57 	bl	801551c <UART_SetConfig>
 801486e:	4603      	mov	r3, r0
 8014870:	2b01      	cmp	r3, #1
 8014872:	d101      	bne.n	8014878 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8014874:	2301      	movs	r3, #1
 8014876:	e01b      	b.n	80148b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	685a      	ldr	r2, [r3, #4]
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	689a      	ldr	r2, [r3, #8]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	681a      	ldr	r2, [r3, #0]
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	f042 0201 	orr.w	r2, r2, #1
 80148a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f001 fc41 	bl	8016130 <UART_CheckIdleState>
 80148ae:	4603      	mov	r3, r0
}
 80148b0:	4618      	mov	r0, r3
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b08a      	sub	sp, #40	; 0x28
 80148bc:	af02      	add	r7, sp, #8
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	60b9      	str	r1, [r7, #8]
 80148c2:	603b      	str	r3, [r7, #0]
 80148c4:	4613      	mov	r3, r2
 80148c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80148ce:	2b20      	cmp	r3, #32
 80148d0:	d17b      	bne.n	80149ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <HAL_UART_Transmit+0x26>
 80148d8:	88fb      	ldrh	r3, [r7, #6]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d101      	bne.n	80148e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80148de:	2301      	movs	r3, #1
 80148e0:	e074      	b.n	80149cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2200      	movs	r2, #0
 80148e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	2221      	movs	r2, #33	; 0x21
 80148ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80148f2:	f7f1 fd2d 	bl	8006350 <HAL_GetTick>
 80148f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	88fa      	ldrh	r2, [r7, #6]
 80148fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	88fa      	ldrh	r2, [r7, #6]
 8014904:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	689b      	ldr	r3, [r3, #8]
 801490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014910:	d108      	bne.n	8014924 <HAL_UART_Transmit+0x6c>
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	691b      	ldr	r3, [r3, #16]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d104      	bne.n	8014924 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801491a:	2300      	movs	r3, #0
 801491c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	61bb      	str	r3, [r7, #24]
 8014922:	e003      	b.n	801492c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014924:	68bb      	ldr	r3, [r7, #8]
 8014926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014928:	2300      	movs	r3, #0
 801492a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801492c:	e030      	b.n	8014990 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801492e:	683b      	ldr	r3, [r7, #0]
 8014930:	9300      	str	r3, [sp, #0]
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	2200      	movs	r2, #0
 8014936:	2180      	movs	r1, #128	; 0x80
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f001 fca3 	bl	8016284 <UART_WaitOnFlagUntilTimeout>
 801493e:	4603      	mov	r3, r0
 8014940:	2b00      	cmp	r3, #0
 8014942:	d005      	beq.n	8014950 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2220      	movs	r2, #32
 8014948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801494c:	2303      	movs	r3, #3
 801494e:	e03d      	b.n	80149cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d10b      	bne.n	801496e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	881b      	ldrh	r3, [r3, #0]
 801495a:	461a      	mov	r2, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014964:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	3302      	adds	r3, #2
 801496a:	61bb      	str	r3, [r7, #24]
 801496c:	e007      	b.n	801497e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	781a      	ldrb	r2, [r3, #0]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	3301      	adds	r3, #1
 801497c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014984:	b29b      	uxth	r3, r3
 8014986:	3b01      	subs	r3, #1
 8014988:	b29a      	uxth	r2, r3
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014996:	b29b      	uxth	r3, r3
 8014998:	2b00      	cmp	r3, #0
 801499a:	d1c8      	bne.n	801492e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	9300      	str	r3, [sp, #0]
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	2200      	movs	r2, #0
 80149a4:	2140      	movs	r1, #64	; 0x40
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f001 fc6c 	bl	8016284 <UART_WaitOnFlagUntilTimeout>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d005      	beq.n	80149be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2220      	movs	r2, #32
 80149b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80149ba:	2303      	movs	r3, #3
 80149bc:	e006      	b.n	80149cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2220      	movs	r2, #32
 80149c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80149c6:	2300      	movs	r3, #0
 80149c8:	e000      	b.n	80149cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80149ca:	2302      	movs	r3, #2
  }
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3720      	adds	r7, #32
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b08a      	sub	sp, #40	; 0x28
 80149d8:	af02      	add	r7, sp, #8
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	603b      	str	r3, [r7, #0]
 80149e0:	4613      	mov	r3, r2
 80149e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80149ea:	2b20      	cmp	r3, #32
 80149ec:	f040 80b5 	bne.w	8014b5a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d002      	beq.n	80149fc <HAL_UART_Receive+0x28>
 80149f6:	88fb      	ldrh	r3, [r7, #6]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d101      	bne.n	8014a00 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80149fc:	2301      	movs	r3, #1
 80149fe:	e0ad      	b.n	8014b5c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2200      	movs	r2, #0
 8014a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2222      	movs	r2, #34	; 0x22
 8014a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2200      	movs	r2, #0
 8014a14:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014a16:	f7f1 fc9b 	bl	8006350 <HAL_GetTick>
 8014a1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	88fa      	ldrh	r2, [r7, #6]
 8014a20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	88fa      	ldrh	r2, [r7, #6]
 8014a28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a34:	d10e      	bne.n	8014a54 <HAL_UART_Receive+0x80>
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	691b      	ldr	r3, [r3, #16]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d105      	bne.n	8014a4a <HAL_UART_Receive+0x76>
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014a44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a48:	e02d      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	22ff      	movs	r2, #255	; 0xff
 8014a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a52:	e028      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	689b      	ldr	r3, [r3, #8]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d10d      	bne.n	8014a78 <HAL_UART_Receive+0xa4>
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	691b      	ldr	r3, [r3, #16]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d104      	bne.n	8014a6e <HAL_UART_Receive+0x9a>
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	22ff      	movs	r2, #255	; 0xff
 8014a68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a6c:	e01b      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	227f      	movs	r2, #127	; 0x7f
 8014a72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a76:	e016      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	689b      	ldr	r3, [r3, #8]
 8014a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014a80:	d10d      	bne.n	8014a9e <HAL_UART_Receive+0xca>
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d104      	bne.n	8014a94 <HAL_UART_Receive+0xc0>
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	227f      	movs	r2, #127	; 0x7f
 8014a8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a92:	e008      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	223f      	movs	r2, #63	; 0x3f
 8014a98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014a9c:	e003      	b.n	8014aa6 <HAL_UART_Receive+0xd2>
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aac:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	689b      	ldr	r3, [r3, #8]
 8014ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ab6:	d108      	bne.n	8014aca <HAL_UART_Receive+0xf6>
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	691b      	ldr	r3, [r3, #16]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d104      	bne.n	8014aca <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8014ac4:	68bb      	ldr	r3, [r7, #8]
 8014ac6:	61bb      	str	r3, [r7, #24]
 8014ac8:	e003      	b.n	8014ad2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014ad2:	e036      	b.n	8014b42 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	9300      	str	r3, [sp, #0]
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	2200      	movs	r2, #0
 8014adc:	2120      	movs	r1, #32
 8014ade:	68f8      	ldr	r0, [r7, #12]
 8014ae0:	f001 fbd0 	bl	8016284 <UART_WaitOnFlagUntilTimeout>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d005      	beq.n	8014af6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	2220      	movs	r2, #32
 8014aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014af2:	2303      	movs	r3, #3
 8014af4:	e032      	b.n	8014b5c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d10c      	bne.n	8014b16 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b02:	b29a      	uxth	r2, r3
 8014b04:	8a7b      	ldrh	r3, [r7, #18]
 8014b06:	4013      	ands	r3, r2
 8014b08:	b29a      	uxth	r2, r3
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	3302      	adds	r3, #2
 8014b12:	61bb      	str	r3, [r7, #24]
 8014b14:	e00c      	b.n	8014b30 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b1c:	b2da      	uxtb	r2, r3
 8014b1e:	8a7b      	ldrh	r3, [r7, #18]
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	4013      	ands	r3, r2
 8014b24:	b2da      	uxtb	r2, r3
 8014b26:	69fb      	ldr	r3, [r7, #28]
 8014b28:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8014b2a:	69fb      	ldr	r3, [r7, #28]
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	b29a      	uxth	r2, r3
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d1c2      	bne.n	8014ad4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2220      	movs	r2, #32
 8014b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014b56:	2300      	movs	r3, #0
 8014b58:	e000      	b.n	8014b5c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8014b5a:	2302      	movs	r3, #2
  }
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3720      	adds	r7, #32
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b08a      	sub	sp, #40	; 0x28
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	4613      	mov	r3, r2
 8014b70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014b78:	2b20      	cmp	r3, #32
 8014b7a:	d137      	bne.n	8014bec <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d002      	beq.n	8014b88 <HAL_UART_Receive_IT+0x24>
 8014b82:	88fb      	ldrh	r3, [r7, #6]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d101      	bne.n	8014b8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014b88:	2301      	movs	r3, #1
 8014b8a:	e030      	b.n	8014bee <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	681b      	ldr	r3, [r3, #0]
 8014b96:	4a18      	ldr	r2, [pc, #96]	; (8014bf8 <HAL_UART_Receive_IT+0x94>)
 8014b98:	4293      	cmp	r3, r2
 8014b9a:	d01f      	beq.n	8014bdc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d018      	beq.n	8014bdc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	e853 3f00 	ldrex	r3, [r3]
 8014bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	461a      	mov	r2, r3
 8014bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc8:	623b      	str	r3, [r7, #32]
 8014bca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bcc:	69f9      	ldr	r1, [r7, #28]
 8014bce:	6a3a      	ldr	r2, [r7, #32]
 8014bd0:	e841 2300 	strex	r3, r2, [r1]
 8014bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8014bd6:	69bb      	ldr	r3, [r7, #24]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d1e6      	bne.n	8014baa <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014bdc:	88fb      	ldrh	r3, [r7, #6]
 8014bde:	461a      	mov	r2, r3
 8014be0:	68b9      	ldr	r1, [r7, #8]
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f001 fbbc 	bl	8016360 <UART_Start_Receive_IT>
 8014be8:	4603      	mov	r3, r0
 8014bea:	e000      	b.n	8014bee <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8014bec:	2302      	movs	r3, #2
  }
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3728      	adds	r7, #40	; 0x28
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	58000c00 	.word	0x58000c00

08014bfc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b09a      	sub	sp, #104	; 0x68
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c0c:	e853 3f00 	ldrex	r3, [r3]
 8014c10:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014c18:	667b      	str	r3, [r7, #100]	; 0x64
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	461a      	mov	r2, r3
 8014c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014c22:	657b      	str	r3, [r7, #84]	; 0x54
 8014c24:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014c2a:	e841 2300 	strex	r3, r2, [r1]
 8014c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d1e6      	bne.n	8014c04 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	3308      	adds	r3, #8
 8014c3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c40:	e853 3f00 	ldrex	r3, [r3]
 8014c44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c48:	4b46      	ldr	r3, [pc, #280]	; (8014d64 <HAL_UART_AbortReceive+0x168>)
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	3308      	adds	r3, #8
 8014c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014c56:	643a      	str	r2, [r7, #64]	; 0x40
 8014c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014c5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c5e:	e841 2300 	strex	r3, r2, [r1]
 8014c62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d1e5      	bne.n	8014c36 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	d118      	bne.n	8014ca4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c78:	6a3b      	ldr	r3, [r7, #32]
 8014c7a:	e853 3f00 	ldrex	r3, [r3]
 8014c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	f023 0310 	bic.w	r3, r3, #16
 8014c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c98:	e841 2300 	strex	r3, r2, [r1]
 8014c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d1e6      	bne.n	8014c72 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	689b      	ldr	r3, [r3, #8]
 8014caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cae:	2b40      	cmp	r3, #64	; 0x40
 8014cb0:	d13b      	bne.n	8014d2a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	3308      	adds	r3, #8
 8014cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	e853 3f00 	ldrex	r3, [r3]
 8014cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	3308      	adds	r3, #8
 8014cd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014cd2:	61ba      	str	r2, [r7, #24]
 8014cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014cd6:	6979      	ldr	r1, [r7, #20]
 8014cd8:	69ba      	ldr	r2, [r7, #24]
 8014cda:	e841 2300 	strex	r3, r2, [r1]
 8014cde:	613b      	str	r3, [r7, #16]
   return(result);
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d1e5      	bne.n	8014cb2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d01c      	beq.n	8014d2a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f4 fa13 	bl	800912c <HAL_DMA_Abort>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d00e      	beq.n	8014d2a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f5 fea6 	bl	800aa64 <HAL_DMA_GetError>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b20      	cmp	r3, #32
 8014d1c:	d105      	bne.n	8014d2a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2210      	movs	r2, #16
 8014d22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014d26:	2303      	movs	r3, #3
 8014d28:	e017      	b.n	8014d5a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	220f      	movs	r2, #15
 8014d38:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	699a      	ldr	r2, [r3, #24]
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	f042 0208 	orr.w	r2, r2, #8
 8014d48:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2220      	movs	r2, #32
 8014d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2200      	movs	r2, #0
 8014d56:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014d58:	2300      	movs	r3, #0
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3768      	adds	r7, #104	; 0x68
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	effffffe 	.word	0xeffffffe

08014d68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b0ba      	sub	sp, #232	; 0xe8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	69db      	ldr	r3, [r3, #28]
 8014d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	689b      	ldr	r3, [r3, #8]
 8014d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014d8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014d92:	f640 030f 	movw	r3, #2063	; 0x80f
 8014d96:	4013      	ands	r3, r2
 8014d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d11b      	bne.n	8014ddc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014da8:	f003 0320 	and.w	r3, r3, #32
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d015      	beq.n	8014ddc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014db4:	f003 0320 	and.w	r3, r3, #32
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d105      	bne.n	8014dc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d009      	beq.n	8014ddc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f000 8377 	beq.w	80154c0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	4798      	blx	r3
      }
      return;
 8014dda:	e371      	b.n	80154c0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014ddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	f000 8123 	beq.w	801502c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014de6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014dea:	4b8d      	ldr	r3, [pc, #564]	; (8015020 <HAL_UART_IRQHandler+0x2b8>)
 8014dec:	4013      	ands	r3, r2
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d106      	bne.n	8014e00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014df2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014df6:	4b8b      	ldr	r3, [pc, #556]	; (8015024 <HAL_UART_IRQHandler+0x2bc>)
 8014df8:	4013      	ands	r3, r2
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f000 8116 	beq.w	801502c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e04:	f003 0301 	and.w	r3, r3, #1
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d011      	beq.n	8014e30 <HAL_UART_IRQHandler+0xc8>
 8014e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d00b      	beq.n	8014e30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e26:	f043 0201 	orr.w	r2, r3, #1
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e34:	f003 0302 	and.w	r3, r3, #2
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d011      	beq.n	8014e60 <HAL_UART_IRQHandler+0xf8>
 8014e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e40:	f003 0301 	and.w	r3, r3, #1
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d00b      	beq.n	8014e60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2202      	movs	r2, #2
 8014e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e56:	f043 0204 	orr.w	r2, r3, #4
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e64:	f003 0304 	and.w	r3, r3, #4
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d011      	beq.n	8014e90 <HAL_UART_IRQHandler+0x128>
 8014e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014e70:	f003 0301 	and.w	r3, r3, #1
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d00b      	beq.n	8014e90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2204      	movs	r2, #4
 8014e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014e86:	f043 0202 	orr.w	r2, r3, #2
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014e94:	f003 0308 	and.w	r3, r3, #8
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d017      	beq.n	8014ecc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ea0:	f003 0320 	and.w	r3, r3, #32
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d105      	bne.n	8014eb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014ea8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014eac:	4b5c      	ldr	r3, [pc, #368]	; (8015020 <HAL_UART_IRQHandler+0x2b8>)
 8014eae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00b      	beq.n	8014ecc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2208      	movs	r2, #8
 8014eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ec2:	f043 0208 	orr.w	r2, r3, #8
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d012      	beq.n	8014efe <HAL_UART_IRQHandler+0x196>
 8014ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d00c      	beq.n	8014efe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ef4:	f043 0220 	orr.w	r2, r3, #32
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f000 82dd 	beq.w	80154c4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f0e:	f003 0320 	and.w	r3, r3, #32
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d013      	beq.n	8014f3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014f1a:	f003 0320 	and.w	r3, r3, #32
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d105      	bne.n	8014f2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d007      	beq.n	8014f3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d003      	beq.n	8014f3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f52:	2b40      	cmp	r3, #64	; 0x40
 8014f54:	d005      	beq.n	8014f62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014f5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d054      	beq.n	801500c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f001 fb1e 	bl	80165a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	689b      	ldr	r3, [r3, #8]
 8014f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f72:	2b40      	cmp	r3, #64	; 0x40
 8014f74:	d146      	bne.n	8015004 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	3308      	adds	r3, #8
 8014f7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014f84:	e853 3f00 	ldrex	r3, [r3]
 8014f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014f8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	3308      	adds	r3, #8
 8014f9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014fa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014faa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014fae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014fb2:	e841 2300 	strex	r3, r2, [r1]
 8014fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d1d9      	bne.n	8014f76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d017      	beq.n	8014ffc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fd2:	4a15      	ldr	r2, [pc, #84]	; (8015028 <HAL_UART_IRQHandler+0x2c0>)
 8014fd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f7f4 fbc3 	bl	8009768 <HAL_DMA_Abort_IT>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d019      	beq.n	801501c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014ff6:	4610      	mov	r0, r2
 8014ff8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ffa:	e00f      	b.n	801501c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f000 fa77 	bl	80154f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015002:	e00b      	b.n	801501c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f000 fa73 	bl	80154f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801500a:	e007      	b.n	801501c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f000 fa6f 	bl	80154f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2200      	movs	r2, #0
 8015016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801501a:	e253      	b.n	80154c4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801501c:	bf00      	nop
    return;
 801501e:	e251      	b.n	80154c4 <HAL_UART_IRQHandler+0x75c>
 8015020:	10000001 	.word	0x10000001
 8015024:	04000120 	.word	0x04000120
 8015028:	08016671 	.word	0x08016671

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015030:	2b01      	cmp	r3, #1
 8015032:	f040 81e7 	bne.w	8015404 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801503a:	f003 0310 	and.w	r3, r3, #16
 801503e:	2b00      	cmp	r3, #0
 8015040:	f000 81e0 	beq.w	8015404 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015048:	f003 0310 	and.w	r3, r3, #16
 801504c:	2b00      	cmp	r3, #0
 801504e:	f000 81d9 	beq.w	8015404 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	2210      	movs	r2, #16
 8015058:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	689b      	ldr	r3, [r3, #8]
 8015060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015064:	2b40      	cmp	r3, #64	; 0x40
 8015066:	f040 8151 	bne.w	801530c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	4a96      	ldr	r2, [pc, #600]	; (80152cc <HAL_UART_IRQHandler+0x564>)
 8015074:	4293      	cmp	r3, r2
 8015076:	d068      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4a93      	ldr	r2, [pc, #588]	; (80152d0 <HAL_UART_IRQHandler+0x568>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d061      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	4a91      	ldr	r2, [pc, #580]	; (80152d4 <HAL_UART_IRQHandler+0x56c>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d05a      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	4a8e      	ldr	r2, [pc, #568]	; (80152d8 <HAL_UART_IRQHandler+0x570>)
 801509e:	4293      	cmp	r3, r2
 80150a0:	d053      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4a8c      	ldr	r2, [pc, #560]	; (80152dc <HAL_UART_IRQHandler+0x574>)
 80150ac:	4293      	cmp	r3, r2
 80150ae:	d04c      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	4a89      	ldr	r2, [pc, #548]	; (80152e0 <HAL_UART_IRQHandler+0x578>)
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d045      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	4a87      	ldr	r2, [pc, #540]	; (80152e4 <HAL_UART_IRQHandler+0x57c>)
 80150c8:	4293      	cmp	r3, r2
 80150ca:	d03e      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4a84      	ldr	r2, [pc, #528]	; (80152e8 <HAL_UART_IRQHandler+0x580>)
 80150d6:	4293      	cmp	r3, r2
 80150d8:	d037      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	4a82      	ldr	r2, [pc, #520]	; (80152ec <HAL_UART_IRQHandler+0x584>)
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d030      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4a7f      	ldr	r2, [pc, #508]	; (80152f0 <HAL_UART_IRQHandler+0x588>)
 80150f2:	4293      	cmp	r3, r2
 80150f4:	d029      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	4a7d      	ldr	r2, [pc, #500]	; (80152f4 <HAL_UART_IRQHandler+0x58c>)
 8015100:	4293      	cmp	r3, r2
 8015102:	d022      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	4a7a      	ldr	r2, [pc, #488]	; (80152f8 <HAL_UART_IRQHandler+0x590>)
 801510e:	4293      	cmp	r3, r2
 8015110:	d01b      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4a78      	ldr	r2, [pc, #480]	; (80152fc <HAL_UART_IRQHandler+0x594>)
 801511c:	4293      	cmp	r3, r2
 801511e:	d014      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4a75      	ldr	r2, [pc, #468]	; (8015300 <HAL_UART_IRQHandler+0x598>)
 801512a:	4293      	cmp	r3, r2
 801512c:	d00d      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4a73      	ldr	r2, [pc, #460]	; (8015304 <HAL_UART_IRQHandler+0x59c>)
 8015138:	4293      	cmp	r3, r2
 801513a:	d006      	beq.n	801514a <HAL_UART_IRQHandler+0x3e2>
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	4a70      	ldr	r2, [pc, #448]	; (8015308 <HAL_UART_IRQHandler+0x5a0>)
 8015146:	4293      	cmp	r3, r2
 8015148:	d106      	bne.n	8015158 <HAL_UART_IRQHandler+0x3f0>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	b29b      	uxth	r3, r3
 8015156:	e005      	b.n	8015164 <HAL_UART_IRQHandler+0x3fc>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	b29b      	uxth	r3, r3
 8015164:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801516c:	2b00      	cmp	r3, #0
 801516e:	f000 81ab 	beq.w	80154c8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015178:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801517c:	429a      	cmp	r2, r3
 801517e:	f080 81a3 	bcs.w	80154c8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015188:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015192:	69db      	ldr	r3, [r3, #28]
 8015194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015198:	f000 8087 	beq.w	80152aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151a8:	e853 3f00 	ldrex	r3, [r3]
 80151ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80151b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80151b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80151b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	461a      	mov	r2, r3
 80151c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80151c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80151ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80151d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80151d6:	e841 2300 	strex	r3, r2, [r1]
 80151da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80151de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d1da      	bne.n	801519c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	3308      	adds	r3, #8
 80151ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151f0:	e853 3f00 	ldrex	r3, [r3]
 80151f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80151f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80151f8:	f023 0301 	bic.w	r3, r3, #1
 80151fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	3308      	adds	r3, #8
 8015206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801520a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801520e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015216:	e841 2300 	strex	r3, r2, [r1]
 801521a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801521c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1e1      	bne.n	80151e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	3308      	adds	r3, #8
 8015228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801522a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801522c:	e853 3f00 	ldrex	r3, [r3]
 8015230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	3308      	adds	r3, #8
 8015242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801524a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801524c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801524e:	e841 2300 	strex	r3, r2, [r1]
 8015252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015256:	2b00      	cmp	r3, #0
 8015258:	d1e3      	bne.n	8015222 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	2220      	movs	r2, #32
 801525e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2200      	movs	r2, #0
 8015266:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015270:	e853 3f00 	ldrex	r3, [r3]
 8015274:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015278:	f023 0310 	bic.w	r3, r3, #16
 801527c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	461a      	mov	r2, r3
 8015286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801528a:	65bb      	str	r3, [r7, #88]	; 0x58
 801528c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801528e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015292:	e841 2300 	strex	r3, r2, [r1]
 8015296:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1e4      	bne.n	8015268 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7f3 ff41 	bl	800912c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2202      	movs	r2, #2
 80152ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80152bc:	b29b      	uxth	r3, r3
 80152be:	1ad3      	subs	r3, r2, r3
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	4619      	mov	r1, r3
 80152c4:	6878      	ldr	r0, [r7, #4]
 80152c6:	f000 f91d 	bl	8015504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80152ca:	e0fd      	b.n	80154c8 <HAL_UART_IRQHandler+0x760>
 80152cc:	40020010 	.word	0x40020010
 80152d0:	40020028 	.word	0x40020028
 80152d4:	40020040 	.word	0x40020040
 80152d8:	40020058 	.word	0x40020058
 80152dc:	40020070 	.word	0x40020070
 80152e0:	40020088 	.word	0x40020088
 80152e4:	400200a0 	.word	0x400200a0
 80152e8:	400200b8 	.word	0x400200b8
 80152ec:	40020410 	.word	0x40020410
 80152f0:	40020428 	.word	0x40020428
 80152f4:	40020440 	.word	0x40020440
 80152f8:	40020458 	.word	0x40020458
 80152fc:	40020470 	.word	0x40020470
 8015300:	40020488 	.word	0x40020488
 8015304:	400204a0 	.word	0x400204a0
 8015308:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015318:	b29b      	uxth	r3, r3
 801531a:	1ad3      	subs	r3, r2, r3
 801531c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015326:	b29b      	uxth	r3, r3
 8015328:	2b00      	cmp	r3, #0
 801532a:	f000 80cf 	beq.w	80154cc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801532e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015332:	2b00      	cmp	r3, #0
 8015334:	f000 80ca 	beq.w	80154cc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015340:	e853 3f00 	ldrex	r3, [r3]
 8015344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801534c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	461a      	mov	r2, r3
 8015356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801535a:	647b      	str	r3, [r7, #68]	; 0x44
 801535c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801535e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015362:	e841 2300 	strex	r3, r2, [r1]
 8015366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801536a:	2b00      	cmp	r3, #0
 801536c:	d1e4      	bne.n	8015338 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	3308      	adds	r3, #8
 8015374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015378:	e853 3f00 	ldrex	r3, [r3]
 801537c:	623b      	str	r3, [r7, #32]
   return(result);
 801537e:	6a3a      	ldr	r2, [r7, #32]
 8015380:	4b55      	ldr	r3, [pc, #340]	; (80154d8 <HAL_UART_IRQHandler+0x770>)
 8015382:	4013      	ands	r3, r2
 8015384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	3308      	adds	r3, #8
 801538e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8015392:	633a      	str	r2, [r7, #48]	; 0x30
 8015394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801539a:	e841 2300 	strex	r3, r2, [r1]
 801539e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80153a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d1e3      	bne.n	801536e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2220      	movs	r2, #32
 80153aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2200      	movs	r2, #0
 80153b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	2200      	movs	r2, #0
 80153b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	e853 3f00 	ldrex	r3, [r3]
 80153c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	f023 0310 	bic.w	r3, r3, #16
 80153ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	461a      	mov	r2, r3
 80153d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80153dc:	61fb      	str	r3, [r7, #28]
 80153de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153e0:	69b9      	ldr	r1, [r7, #24]
 80153e2:	69fa      	ldr	r2, [r7, #28]
 80153e4:	e841 2300 	strex	r3, r2, [r1]
 80153e8:	617b      	str	r3, [r7, #20]
   return(result);
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d1e4      	bne.n	80153ba <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	2202      	movs	r2, #2
 80153f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80153f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80153fa:	4619      	mov	r1, r3
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 f881 	bl	8015504 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015402:	e063      	b.n	80154cc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801540c:	2b00      	cmp	r3, #0
 801540e:	d00e      	beq.n	801542e <HAL_UART_IRQHandler+0x6c6>
 8015410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015418:	2b00      	cmp	r3, #0
 801541a:	d008      	beq.n	801542e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8015424:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f001 fe80 	bl	801712c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801542c:	e051      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801542e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015436:	2b00      	cmp	r3, #0
 8015438:	d014      	beq.n	8015464 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801543a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015442:	2b00      	cmp	r3, #0
 8015444:	d105      	bne.n	8015452 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8015446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801544a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801544e:	2b00      	cmp	r3, #0
 8015450:	d008      	beq.n	8015464 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015456:	2b00      	cmp	r3, #0
 8015458:	d03a      	beq.n	80154d0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	4798      	blx	r3
    }
    return;
 8015462:	e035      	b.n	80154d0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8015464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801546c:	2b00      	cmp	r3, #0
 801546e:	d009      	beq.n	8015484 <HAL_UART_IRQHandler+0x71c>
 8015470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015478:	2b00      	cmp	r3, #0
 801547a:	d003      	beq.n	8015484 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801547c:	6878      	ldr	r0, [r7, #4]
 801547e:	f001 f90d 	bl	801669c <UART_EndTransmit_IT>
    return;
 8015482:	e026      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801548c:	2b00      	cmp	r3, #0
 801548e:	d009      	beq.n	80154a4 <HAL_UART_IRQHandler+0x73c>
 8015490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015494:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015498:	2b00      	cmp	r3, #0
 801549a:	d003      	beq.n	80154a4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801549c:	6878      	ldr	r0, [r7, #4]
 801549e:	f001 fe59 	bl	8017154 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80154a2:	e016      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80154a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80154a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d010      	beq.n	80154d2 <HAL_UART_IRQHandler+0x76a>
 80154b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	da0c      	bge.n	80154d2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f001 fe41 	bl	8017140 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80154be:	e008      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80154c0:	bf00      	nop
 80154c2:	e006      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
    return;
 80154c4:	bf00      	nop
 80154c6:	e004      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80154c8:	bf00      	nop
 80154ca:	e002      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
      return;
 80154cc:	bf00      	nop
 80154ce:	e000      	b.n	80154d2 <HAL_UART_IRQHandler+0x76a>
    return;
 80154d0:	bf00      	nop
  }
}
 80154d2:	37e8      	adds	r7, #232	; 0xe8
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	effffffe 	.word	0xeffffffe

080154dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80154dc:	b480      	push	{r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80154e4:	bf00      	nop
 80154e6:	370c      	adds	r7, #12
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80154f8:	bf00      	nop
 80154fa:	370c      	adds	r7, #12
 80154fc:	46bd      	mov	sp, r7
 80154fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015502:	4770      	bx	lr

08015504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015504:	b480      	push	{r7}
 8015506:	b083      	sub	sp, #12
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	460b      	mov	r3, r1
 801550e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015510:	bf00      	nop
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015520:	b092      	sub	sp, #72	; 0x48
 8015522:	af00      	add	r7, sp, #0
 8015524:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8015526:	2300      	movs	r3, #0
 8015528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	689a      	ldr	r2, [r3, #8]
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	431a      	orrs	r2, r3
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	695b      	ldr	r3, [r3, #20]
 801553a:	431a      	orrs	r2, r3
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	69db      	ldr	r3, [r3, #28]
 8015540:	4313      	orrs	r3, r2
 8015542:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	4bbe      	ldr	r3, [pc, #760]	; (8015844 <UART_SetConfig+0x328>)
 801554c:	4013      	ands	r3, r2
 801554e:	697a      	ldr	r2, [r7, #20]
 8015550:	6812      	ldr	r2, [r2, #0]
 8015552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015554:	430b      	orrs	r3, r1
 8015556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	68da      	ldr	r2, [r3, #12]
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	430a      	orrs	r2, r1
 801556c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	699b      	ldr	r3, [r3, #24]
 8015572:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4ab3      	ldr	r2, [pc, #716]	; (8015848 <UART_SetConfig+0x32c>)
 801557a:	4293      	cmp	r3, r2
 801557c:	d004      	beq.n	8015588 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	6a1b      	ldr	r3, [r3, #32]
 8015582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015584:	4313      	orrs	r3, r2
 8015586:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	689a      	ldr	r2, [r3, #8]
 801558e:	4baf      	ldr	r3, [pc, #700]	; (801584c <UART_SetConfig+0x330>)
 8015590:	4013      	ands	r3, r2
 8015592:	697a      	ldr	r2, [r7, #20]
 8015594:	6812      	ldr	r2, [r2, #0]
 8015596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015598:	430b      	orrs	r3, r1
 801559a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155a2:	f023 010f 	bic.w	r1, r3, #15
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	430a      	orrs	r2, r1
 80155b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4aa6      	ldr	r2, [pc, #664]	; (8015850 <UART_SetConfig+0x334>)
 80155b8:	4293      	cmp	r3, r2
 80155ba:	d177      	bne.n	80156ac <UART_SetConfig+0x190>
 80155bc:	4ba5      	ldr	r3, [pc, #660]	; (8015854 <UART_SetConfig+0x338>)
 80155be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80155c4:	2b28      	cmp	r3, #40	; 0x28
 80155c6:	d86d      	bhi.n	80156a4 <UART_SetConfig+0x188>
 80155c8:	a201      	add	r2, pc, #4	; (adr r2, 80155d0 <UART_SetConfig+0xb4>)
 80155ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ce:	bf00      	nop
 80155d0:	08015675 	.word	0x08015675
 80155d4:	080156a5 	.word	0x080156a5
 80155d8:	080156a5 	.word	0x080156a5
 80155dc:	080156a5 	.word	0x080156a5
 80155e0:	080156a5 	.word	0x080156a5
 80155e4:	080156a5 	.word	0x080156a5
 80155e8:	080156a5 	.word	0x080156a5
 80155ec:	080156a5 	.word	0x080156a5
 80155f0:	0801567d 	.word	0x0801567d
 80155f4:	080156a5 	.word	0x080156a5
 80155f8:	080156a5 	.word	0x080156a5
 80155fc:	080156a5 	.word	0x080156a5
 8015600:	080156a5 	.word	0x080156a5
 8015604:	080156a5 	.word	0x080156a5
 8015608:	080156a5 	.word	0x080156a5
 801560c:	080156a5 	.word	0x080156a5
 8015610:	08015685 	.word	0x08015685
 8015614:	080156a5 	.word	0x080156a5
 8015618:	080156a5 	.word	0x080156a5
 801561c:	080156a5 	.word	0x080156a5
 8015620:	080156a5 	.word	0x080156a5
 8015624:	080156a5 	.word	0x080156a5
 8015628:	080156a5 	.word	0x080156a5
 801562c:	080156a5 	.word	0x080156a5
 8015630:	0801568d 	.word	0x0801568d
 8015634:	080156a5 	.word	0x080156a5
 8015638:	080156a5 	.word	0x080156a5
 801563c:	080156a5 	.word	0x080156a5
 8015640:	080156a5 	.word	0x080156a5
 8015644:	080156a5 	.word	0x080156a5
 8015648:	080156a5 	.word	0x080156a5
 801564c:	080156a5 	.word	0x080156a5
 8015650:	08015695 	.word	0x08015695
 8015654:	080156a5 	.word	0x080156a5
 8015658:	080156a5 	.word	0x080156a5
 801565c:	080156a5 	.word	0x080156a5
 8015660:	080156a5 	.word	0x080156a5
 8015664:	080156a5 	.word	0x080156a5
 8015668:	080156a5 	.word	0x080156a5
 801566c:	080156a5 	.word	0x080156a5
 8015670:	0801569d 	.word	0x0801569d
 8015674:	2301      	movs	r3, #1
 8015676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801567a:	e222      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801567c:	2304      	movs	r3, #4
 801567e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015682:	e21e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015684:	2308      	movs	r3, #8
 8015686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801568a:	e21a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801568c:	2310      	movs	r3, #16
 801568e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015692:	e216      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015694:	2320      	movs	r3, #32
 8015696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801569a:	e212      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801569c:	2340      	movs	r3, #64	; 0x40
 801569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156a2:	e20e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80156a4:	2380      	movs	r3, #128	; 0x80
 80156a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156aa:	e20a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	4a69      	ldr	r2, [pc, #420]	; (8015858 <UART_SetConfig+0x33c>)
 80156b2:	4293      	cmp	r3, r2
 80156b4:	d130      	bne.n	8015718 <UART_SetConfig+0x1fc>
 80156b6:	4b67      	ldr	r3, [pc, #412]	; (8015854 <UART_SetConfig+0x338>)
 80156b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156ba:	f003 0307 	and.w	r3, r3, #7
 80156be:	2b05      	cmp	r3, #5
 80156c0:	d826      	bhi.n	8015710 <UART_SetConfig+0x1f4>
 80156c2:	a201      	add	r2, pc, #4	; (adr r2, 80156c8 <UART_SetConfig+0x1ac>)
 80156c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c8:	080156e1 	.word	0x080156e1
 80156cc:	080156e9 	.word	0x080156e9
 80156d0:	080156f1 	.word	0x080156f1
 80156d4:	080156f9 	.word	0x080156f9
 80156d8:	08015701 	.word	0x08015701
 80156dc:	08015709 	.word	0x08015709
 80156e0:	2300      	movs	r3, #0
 80156e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156e6:	e1ec      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80156e8:	2304      	movs	r3, #4
 80156ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ee:	e1e8      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80156f0:	2308      	movs	r3, #8
 80156f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156f6:	e1e4      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80156f8:	2310      	movs	r3, #16
 80156fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156fe:	e1e0      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015700:	2320      	movs	r3, #32
 8015702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015706:	e1dc      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015708:	2340      	movs	r3, #64	; 0x40
 801570a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801570e:	e1d8      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015710:	2380      	movs	r3, #128	; 0x80
 8015712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015716:	e1d4      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	4a4f      	ldr	r2, [pc, #316]	; (801585c <UART_SetConfig+0x340>)
 801571e:	4293      	cmp	r3, r2
 8015720:	d130      	bne.n	8015784 <UART_SetConfig+0x268>
 8015722:	4b4c      	ldr	r3, [pc, #304]	; (8015854 <UART_SetConfig+0x338>)
 8015724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015726:	f003 0307 	and.w	r3, r3, #7
 801572a:	2b05      	cmp	r3, #5
 801572c:	d826      	bhi.n	801577c <UART_SetConfig+0x260>
 801572e:	a201      	add	r2, pc, #4	; (adr r2, 8015734 <UART_SetConfig+0x218>)
 8015730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015734:	0801574d 	.word	0x0801574d
 8015738:	08015755 	.word	0x08015755
 801573c:	0801575d 	.word	0x0801575d
 8015740:	08015765 	.word	0x08015765
 8015744:	0801576d 	.word	0x0801576d
 8015748:	08015775 	.word	0x08015775
 801574c:	2300      	movs	r3, #0
 801574e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015752:	e1b6      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015754:	2304      	movs	r3, #4
 8015756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801575a:	e1b2      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801575c:	2308      	movs	r3, #8
 801575e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015762:	e1ae      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015764:	2310      	movs	r3, #16
 8015766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801576a:	e1aa      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801576c:	2320      	movs	r3, #32
 801576e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015772:	e1a6      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015774:	2340      	movs	r3, #64	; 0x40
 8015776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801577a:	e1a2      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801577c:	2380      	movs	r3, #128	; 0x80
 801577e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015782:	e19e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4a35      	ldr	r2, [pc, #212]	; (8015860 <UART_SetConfig+0x344>)
 801578a:	4293      	cmp	r3, r2
 801578c:	d130      	bne.n	80157f0 <UART_SetConfig+0x2d4>
 801578e:	4b31      	ldr	r3, [pc, #196]	; (8015854 <UART_SetConfig+0x338>)
 8015790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015792:	f003 0307 	and.w	r3, r3, #7
 8015796:	2b05      	cmp	r3, #5
 8015798:	d826      	bhi.n	80157e8 <UART_SetConfig+0x2cc>
 801579a:	a201      	add	r2, pc, #4	; (adr r2, 80157a0 <UART_SetConfig+0x284>)
 801579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a0:	080157b9 	.word	0x080157b9
 80157a4:	080157c1 	.word	0x080157c1
 80157a8:	080157c9 	.word	0x080157c9
 80157ac:	080157d1 	.word	0x080157d1
 80157b0:	080157d9 	.word	0x080157d9
 80157b4:	080157e1 	.word	0x080157e1
 80157b8:	2300      	movs	r3, #0
 80157ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157be:	e180      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157c0:	2304      	movs	r3, #4
 80157c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157c6:	e17c      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157c8:	2308      	movs	r3, #8
 80157ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ce:	e178      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157d0:	2310      	movs	r3, #16
 80157d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157d6:	e174      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157d8:	2320      	movs	r3, #32
 80157da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157de:	e170      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157e0:	2340      	movs	r3, #64	; 0x40
 80157e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157e6:	e16c      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157e8:	2380      	movs	r3, #128	; 0x80
 80157ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ee:	e168      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4a1b      	ldr	r2, [pc, #108]	; (8015864 <UART_SetConfig+0x348>)
 80157f6:	4293      	cmp	r3, r2
 80157f8:	d142      	bne.n	8015880 <UART_SetConfig+0x364>
 80157fa:	4b16      	ldr	r3, [pc, #88]	; (8015854 <UART_SetConfig+0x338>)
 80157fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80157fe:	f003 0307 	and.w	r3, r3, #7
 8015802:	2b05      	cmp	r3, #5
 8015804:	d838      	bhi.n	8015878 <UART_SetConfig+0x35c>
 8015806:	a201      	add	r2, pc, #4	; (adr r2, 801580c <UART_SetConfig+0x2f0>)
 8015808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801580c:	08015825 	.word	0x08015825
 8015810:	0801582d 	.word	0x0801582d
 8015814:	08015835 	.word	0x08015835
 8015818:	0801583d 	.word	0x0801583d
 801581c:	08015869 	.word	0x08015869
 8015820:	08015871 	.word	0x08015871
 8015824:	2300      	movs	r3, #0
 8015826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801582a:	e14a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801582c:	2304      	movs	r3, #4
 801582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015832:	e146      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015834:	2308      	movs	r3, #8
 8015836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801583a:	e142      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 801583c:	2310      	movs	r3, #16
 801583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015842:	e13e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015844:	cfff69f3 	.word	0xcfff69f3
 8015848:	58000c00 	.word	0x58000c00
 801584c:	11fff4ff 	.word	0x11fff4ff
 8015850:	40011000 	.word	0x40011000
 8015854:	58024400 	.word	0x58024400
 8015858:	40004400 	.word	0x40004400
 801585c:	40004800 	.word	0x40004800
 8015860:	40004c00 	.word	0x40004c00
 8015864:	40005000 	.word	0x40005000
 8015868:	2320      	movs	r3, #32
 801586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801586e:	e128      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015870:	2340      	movs	r3, #64	; 0x40
 8015872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015876:	e124      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015878:	2380      	movs	r3, #128	; 0x80
 801587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801587e:	e120      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	4acb      	ldr	r2, [pc, #812]	; (8015bb4 <UART_SetConfig+0x698>)
 8015886:	4293      	cmp	r3, r2
 8015888:	d176      	bne.n	8015978 <UART_SetConfig+0x45c>
 801588a:	4bcb      	ldr	r3, [pc, #812]	; (8015bb8 <UART_SetConfig+0x69c>)
 801588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801588e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015892:	2b28      	cmp	r3, #40	; 0x28
 8015894:	d86c      	bhi.n	8015970 <UART_SetConfig+0x454>
 8015896:	a201      	add	r2, pc, #4	; (adr r2, 801589c <UART_SetConfig+0x380>)
 8015898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589c:	08015941 	.word	0x08015941
 80158a0:	08015971 	.word	0x08015971
 80158a4:	08015971 	.word	0x08015971
 80158a8:	08015971 	.word	0x08015971
 80158ac:	08015971 	.word	0x08015971
 80158b0:	08015971 	.word	0x08015971
 80158b4:	08015971 	.word	0x08015971
 80158b8:	08015971 	.word	0x08015971
 80158bc:	08015949 	.word	0x08015949
 80158c0:	08015971 	.word	0x08015971
 80158c4:	08015971 	.word	0x08015971
 80158c8:	08015971 	.word	0x08015971
 80158cc:	08015971 	.word	0x08015971
 80158d0:	08015971 	.word	0x08015971
 80158d4:	08015971 	.word	0x08015971
 80158d8:	08015971 	.word	0x08015971
 80158dc:	08015951 	.word	0x08015951
 80158e0:	08015971 	.word	0x08015971
 80158e4:	08015971 	.word	0x08015971
 80158e8:	08015971 	.word	0x08015971
 80158ec:	08015971 	.word	0x08015971
 80158f0:	08015971 	.word	0x08015971
 80158f4:	08015971 	.word	0x08015971
 80158f8:	08015971 	.word	0x08015971
 80158fc:	08015959 	.word	0x08015959
 8015900:	08015971 	.word	0x08015971
 8015904:	08015971 	.word	0x08015971
 8015908:	08015971 	.word	0x08015971
 801590c:	08015971 	.word	0x08015971
 8015910:	08015971 	.word	0x08015971
 8015914:	08015971 	.word	0x08015971
 8015918:	08015971 	.word	0x08015971
 801591c:	08015961 	.word	0x08015961
 8015920:	08015971 	.word	0x08015971
 8015924:	08015971 	.word	0x08015971
 8015928:	08015971 	.word	0x08015971
 801592c:	08015971 	.word	0x08015971
 8015930:	08015971 	.word	0x08015971
 8015934:	08015971 	.word	0x08015971
 8015938:	08015971 	.word	0x08015971
 801593c:	08015969 	.word	0x08015969
 8015940:	2301      	movs	r3, #1
 8015942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015946:	e0bc      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015948:	2304      	movs	r3, #4
 801594a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801594e:	e0b8      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015950:	2308      	movs	r3, #8
 8015952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015956:	e0b4      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015958:	2310      	movs	r3, #16
 801595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801595e:	e0b0      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015960:	2320      	movs	r3, #32
 8015962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015966:	e0ac      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015968:	2340      	movs	r3, #64	; 0x40
 801596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801596e:	e0a8      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015970:	2380      	movs	r3, #128	; 0x80
 8015972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015976:	e0a4      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4a8f      	ldr	r2, [pc, #572]	; (8015bbc <UART_SetConfig+0x6a0>)
 801597e:	4293      	cmp	r3, r2
 8015980:	d130      	bne.n	80159e4 <UART_SetConfig+0x4c8>
 8015982:	4b8d      	ldr	r3, [pc, #564]	; (8015bb8 <UART_SetConfig+0x69c>)
 8015984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015986:	f003 0307 	and.w	r3, r3, #7
 801598a:	2b05      	cmp	r3, #5
 801598c:	d826      	bhi.n	80159dc <UART_SetConfig+0x4c0>
 801598e:	a201      	add	r2, pc, #4	; (adr r2, 8015994 <UART_SetConfig+0x478>)
 8015990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015994:	080159ad 	.word	0x080159ad
 8015998:	080159b5 	.word	0x080159b5
 801599c:	080159bd 	.word	0x080159bd
 80159a0:	080159c5 	.word	0x080159c5
 80159a4:	080159cd 	.word	0x080159cd
 80159a8:	080159d5 	.word	0x080159d5
 80159ac:	2300      	movs	r3, #0
 80159ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159b2:	e086      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159b4:	2304      	movs	r3, #4
 80159b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159ba:	e082      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159bc:	2308      	movs	r3, #8
 80159be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159c2:	e07e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159c4:	2310      	movs	r3, #16
 80159c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159ca:	e07a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159cc:	2320      	movs	r3, #32
 80159ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159d2:	e076      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159d4:	2340      	movs	r3, #64	; 0x40
 80159d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159da:	e072      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159dc:	2380      	movs	r3, #128	; 0x80
 80159de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80159e2:	e06e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	4a75      	ldr	r2, [pc, #468]	; (8015bc0 <UART_SetConfig+0x6a4>)
 80159ea:	4293      	cmp	r3, r2
 80159ec:	d130      	bne.n	8015a50 <UART_SetConfig+0x534>
 80159ee:	4b72      	ldr	r3, [pc, #456]	; (8015bb8 <UART_SetConfig+0x69c>)
 80159f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159f2:	f003 0307 	and.w	r3, r3, #7
 80159f6:	2b05      	cmp	r3, #5
 80159f8:	d826      	bhi.n	8015a48 <UART_SetConfig+0x52c>
 80159fa:	a201      	add	r2, pc, #4	; (adr r2, 8015a00 <UART_SetConfig+0x4e4>)
 80159fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a00:	08015a19 	.word	0x08015a19
 8015a04:	08015a21 	.word	0x08015a21
 8015a08:	08015a29 	.word	0x08015a29
 8015a0c:	08015a31 	.word	0x08015a31
 8015a10:	08015a39 	.word	0x08015a39
 8015a14:	08015a41 	.word	0x08015a41
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a1e:	e050      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a20:	2304      	movs	r3, #4
 8015a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a26:	e04c      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a28:	2308      	movs	r3, #8
 8015a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a2e:	e048      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a30:	2310      	movs	r3, #16
 8015a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a36:	e044      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a38:	2320      	movs	r3, #32
 8015a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a3e:	e040      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a40:	2340      	movs	r3, #64	; 0x40
 8015a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a46:	e03c      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a48:	2380      	movs	r3, #128	; 0x80
 8015a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a4e:	e038      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4a5b      	ldr	r2, [pc, #364]	; (8015bc4 <UART_SetConfig+0x6a8>)
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d130      	bne.n	8015abc <UART_SetConfig+0x5a0>
 8015a5a:	4b57      	ldr	r3, [pc, #348]	; (8015bb8 <UART_SetConfig+0x69c>)
 8015a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a5e:	f003 0307 	and.w	r3, r3, #7
 8015a62:	2b05      	cmp	r3, #5
 8015a64:	d826      	bhi.n	8015ab4 <UART_SetConfig+0x598>
 8015a66:	a201      	add	r2, pc, #4	; (adr r2, 8015a6c <UART_SetConfig+0x550>)
 8015a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a6c:	08015a85 	.word	0x08015a85
 8015a70:	08015a8d 	.word	0x08015a8d
 8015a74:	08015a95 	.word	0x08015a95
 8015a78:	08015a9d 	.word	0x08015a9d
 8015a7c:	08015aa5 	.word	0x08015aa5
 8015a80:	08015aad 	.word	0x08015aad
 8015a84:	2302      	movs	r3, #2
 8015a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a8a:	e01a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a8c:	2304      	movs	r3, #4
 8015a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a92:	e016      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a94:	2308      	movs	r3, #8
 8015a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015a9a:	e012      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015a9c:	2310      	movs	r3, #16
 8015a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015aa2:	e00e      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015aa4:	2320      	movs	r3, #32
 8015aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015aaa:	e00a      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015aac:	2340      	movs	r3, #64	; 0x40
 8015aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015ab2:	e006      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015ab4:	2380      	movs	r3, #128	; 0x80
 8015ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015aba:	e002      	b.n	8015ac2 <UART_SetConfig+0x5a6>
 8015abc:	2380      	movs	r3, #128	; 0x80
 8015abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	4a3f      	ldr	r2, [pc, #252]	; (8015bc4 <UART_SetConfig+0x6a8>)
 8015ac8:	4293      	cmp	r3, r2
 8015aca:	f040 80f8 	bne.w	8015cbe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015ace:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015ad2:	2b20      	cmp	r3, #32
 8015ad4:	dc46      	bgt.n	8015b64 <UART_SetConfig+0x648>
 8015ad6:	2b02      	cmp	r3, #2
 8015ad8:	f2c0 8082 	blt.w	8015be0 <UART_SetConfig+0x6c4>
 8015adc:	3b02      	subs	r3, #2
 8015ade:	2b1e      	cmp	r3, #30
 8015ae0:	d87e      	bhi.n	8015be0 <UART_SetConfig+0x6c4>
 8015ae2:	a201      	add	r2, pc, #4	; (adr r2, 8015ae8 <UART_SetConfig+0x5cc>)
 8015ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ae8:	08015b6b 	.word	0x08015b6b
 8015aec:	08015be1 	.word	0x08015be1
 8015af0:	08015b73 	.word	0x08015b73
 8015af4:	08015be1 	.word	0x08015be1
 8015af8:	08015be1 	.word	0x08015be1
 8015afc:	08015be1 	.word	0x08015be1
 8015b00:	08015b83 	.word	0x08015b83
 8015b04:	08015be1 	.word	0x08015be1
 8015b08:	08015be1 	.word	0x08015be1
 8015b0c:	08015be1 	.word	0x08015be1
 8015b10:	08015be1 	.word	0x08015be1
 8015b14:	08015be1 	.word	0x08015be1
 8015b18:	08015be1 	.word	0x08015be1
 8015b1c:	08015be1 	.word	0x08015be1
 8015b20:	08015b93 	.word	0x08015b93
 8015b24:	08015be1 	.word	0x08015be1
 8015b28:	08015be1 	.word	0x08015be1
 8015b2c:	08015be1 	.word	0x08015be1
 8015b30:	08015be1 	.word	0x08015be1
 8015b34:	08015be1 	.word	0x08015be1
 8015b38:	08015be1 	.word	0x08015be1
 8015b3c:	08015be1 	.word	0x08015be1
 8015b40:	08015be1 	.word	0x08015be1
 8015b44:	08015be1 	.word	0x08015be1
 8015b48:	08015be1 	.word	0x08015be1
 8015b4c:	08015be1 	.word	0x08015be1
 8015b50:	08015be1 	.word	0x08015be1
 8015b54:	08015be1 	.word	0x08015be1
 8015b58:	08015be1 	.word	0x08015be1
 8015b5c:	08015be1 	.word	0x08015be1
 8015b60:	08015bd3 	.word	0x08015bd3
 8015b64:	2b40      	cmp	r3, #64	; 0x40
 8015b66:	d037      	beq.n	8015bd8 <UART_SetConfig+0x6bc>
 8015b68:	e03a      	b.n	8015be0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8015b6a:	f7fb fc17 	bl	801139c <HAL_RCCEx_GetD3PCLK1Freq>
 8015b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b70:	e03c      	b.n	8015bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b76:	4618      	mov	r0, r3
 8015b78:	f7fb fc26 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b80:	e034      	b.n	8015bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015b82:	f107 0318 	add.w	r3, r7, #24
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fb fd72 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b90:	e02c      	b.n	8015bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015b92:	4b09      	ldr	r3, [pc, #36]	; (8015bb8 <UART_SetConfig+0x69c>)
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	f003 0320 	and.w	r3, r3, #32
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d016      	beq.n	8015bcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015b9e:	4b06      	ldr	r3, [pc, #24]	; (8015bb8 <UART_SetConfig+0x69c>)
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	08db      	lsrs	r3, r3, #3
 8015ba4:	f003 0303 	and.w	r3, r3, #3
 8015ba8:	4a07      	ldr	r2, [pc, #28]	; (8015bc8 <UART_SetConfig+0x6ac>)
 8015baa:	fa22 f303 	lsr.w	r3, r2, r3
 8015bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015bb0:	e01c      	b.n	8015bec <UART_SetConfig+0x6d0>
 8015bb2:	bf00      	nop
 8015bb4:	40011400 	.word	0x40011400
 8015bb8:	58024400 	.word	0x58024400
 8015bbc:	40007800 	.word	0x40007800
 8015bc0:	40007c00 	.word	0x40007c00
 8015bc4:	58000c00 	.word	0x58000c00
 8015bc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015bcc:	4b9d      	ldr	r3, [pc, #628]	; (8015e44 <UART_SetConfig+0x928>)
 8015bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015bd0:	e00c      	b.n	8015bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015bd2:	4b9d      	ldr	r3, [pc, #628]	; (8015e48 <UART_SetConfig+0x92c>)
 8015bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015bd6:	e009      	b.n	8015bec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015bde:	e005      	b.n	8015bec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015be0:	2300      	movs	r3, #0
 8015be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015be4:	2301      	movs	r3, #1
 8015be6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015bea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	f000 81de 	beq.w	8015fb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf8:	4a94      	ldr	r2, [pc, #592]	; (8015e4c <UART_SetConfig+0x930>)
 8015bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015bfe:	461a      	mov	r2, r3
 8015c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c06:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	685a      	ldr	r2, [r3, #4]
 8015c0c:	4613      	mov	r3, r2
 8015c0e:	005b      	lsls	r3, r3, #1
 8015c10:	4413      	add	r3, r2
 8015c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d305      	bcc.n	8015c24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015c18:	697b      	ldr	r3, [r7, #20]
 8015c1a:	685b      	ldr	r3, [r3, #4]
 8015c1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d903      	bls.n	8015c2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015c24:	2301      	movs	r3, #1
 8015c26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015c2a:	e1c1      	b.n	8015fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015c2e:	2200      	movs	r2, #0
 8015c30:	60bb      	str	r3, [r7, #8]
 8015c32:	60fa      	str	r2, [r7, #12]
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c38:	4a84      	ldr	r2, [pc, #528]	; (8015e4c <UART_SetConfig+0x930>)
 8015c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	2200      	movs	r2, #0
 8015c42:	603b      	str	r3, [r7, #0]
 8015c44:	607a      	str	r2, [r7, #4]
 8015c46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015c4e:	f7ea fb47 	bl	80002e0 <__aeabi_uldivmod>
 8015c52:	4602      	mov	r2, r0
 8015c54:	460b      	mov	r3, r1
 8015c56:	4610      	mov	r0, r2
 8015c58:	4619      	mov	r1, r3
 8015c5a:	f04f 0200 	mov.w	r2, #0
 8015c5e:	f04f 0300 	mov.w	r3, #0
 8015c62:	020b      	lsls	r3, r1, #8
 8015c64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015c68:	0202      	lsls	r2, r0, #8
 8015c6a:	6979      	ldr	r1, [r7, #20]
 8015c6c:	6849      	ldr	r1, [r1, #4]
 8015c6e:	0849      	lsrs	r1, r1, #1
 8015c70:	2000      	movs	r0, #0
 8015c72:	460c      	mov	r4, r1
 8015c74:	4605      	mov	r5, r0
 8015c76:	eb12 0804 	adds.w	r8, r2, r4
 8015c7a:	eb43 0905 	adc.w	r9, r3, r5
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	685b      	ldr	r3, [r3, #4]
 8015c82:	2200      	movs	r2, #0
 8015c84:	469a      	mov	sl, r3
 8015c86:	4693      	mov	fp, r2
 8015c88:	4652      	mov	r2, sl
 8015c8a:	465b      	mov	r3, fp
 8015c8c:	4640      	mov	r0, r8
 8015c8e:	4649      	mov	r1, r9
 8015c90:	f7ea fb26 	bl	80002e0 <__aeabi_uldivmod>
 8015c94:	4602      	mov	r2, r0
 8015c96:	460b      	mov	r3, r1
 8015c98:	4613      	mov	r3, r2
 8015c9a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015ca2:	d308      	bcc.n	8015cb6 <UART_SetConfig+0x79a>
 8015ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015caa:	d204      	bcs.n	8015cb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cb2:	60da      	str	r2, [r3, #12]
 8015cb4:	e17c      	b.n	8015fb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015cbc:	e178      	b.n	8015fb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	69db      	ldr	r3, [r3, #28]
 8015cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015cc6:	f040 80c5 	bne.w	8015e54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8015cca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015cce:	2b20      	cmp	r3, #32
 8015cd0:	dc48      	bgt.n	8015d64 <UART_SetConfig+0x848>
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	db7b      	blt.n	8015dce <UART_SetConfig+0x8b2>
 8015cd6:	2b20      	cmp	r3, #32
 8015cd8:	d879      	bhi.n	8015dce <UART_SetConfig+0x8b2>
 8015cda:	a201      	add	r2, pc, #4	; (adr r2, 8015ce0 <UART_SetConfig+0x7c4>)
 8015cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce0:	08015d6b 	.word	0x08015d6b
 8015ce4:	08015d73 	.word	0x08015d73
 8015ce8:	08015dcf 	.word	0x08015dcf
 8015cec:	08015dcf 	.word	0x08015dcf
 8015cf0:	08015d7b 	.word	0x08015d7b
 8015cf4:	08015dcf 	.word	0x08015dcf
 8015cf8:	08015dcf 	.word	0x08015dcf
 8015cfc:	08015dcf 	.word	0x08015dcf
 8015d00:	08015d8b 	.word	0x08015d8b
 8015d04:	08015dcf 	.word	0x08015dcf
 8015d08:	08015dcf 	.word	0x08015dcf
 8015d0c:	08015dcf 	.word	0x08015dcf
 8015d10:	08015dcf 	.word	0x08015dcf
 8015d14:	08015dcf 	.word	0x08015dcf
 8015d18:	08015dcf 	.word	0x08015dcf
 8015d1c:	08015dcf 	.word	0x08015dcf
 8015d20:	08015d9b 	.word	0x08015d9b
 8015d24:	08015dcf 	.word	0x08015dcf
 8015d28:	08015dcf 	.word	0x08015dcf
 8015d2c:	08015dcf 	.word	0x08015dcf
 8015d30:	08015dcf 	.word	0x08015dcf
 8015d34:	08015dcf 	.word	0x08015dcf
 8015d38:	08015dcf 	.word	0x08015dcf
 8015d3c:	08015dcf 	.word	0x08015dcf
 8015d40:	08015dcf 	.word	0x08015dcf
 8015d44:	08015dcf 	.word	0x08015dcf
 8015d48:	08015dcf 	.word	0x08015dcf
 8015d4c:	08015dcf 	.word	0x08015dcf
 8015d50:	08015dcf 	.word	0x08015dcf
 8015d54:	08015dcf 	.word	0x08015dcf
 8015d58:	08015dcf 	.word	0x08015dcf
 8015d5c:	08015dcf 	.word	0x08015dcf
 8015d60:	08015dc1 	.word	0x08015dc1
 8015d64:	2b40      	cmp	r3, #64	; 0x40
 8015d66:	d02e      	beq.n	8015dc6 <UART_SetConfig+0x8aa>
 8015d68:	e031      	b.n	8015dce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015d6a:	f7f9 fb1f 	bl	800f3ac <HAL_RCC_GetPCLK1Freq>
 8015d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015d70:	e033      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015d72:	f7f9 fb31 	bl	800f3d8 <HAL_RCC_GetPCLK2Freq>
 8015d76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015d78:	e02f      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7fb fb22 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015d88:	e027      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015d8a:	f107 0318 	add.w	r3, r7, #24
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7fb fc6e 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015d94:	69fb      	ldr	r3, [r7, #28]
 8015d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015d98:	e01f      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015d9a:	4b2d      	ldr	r3, [pc, #180]	; (8015e50 <UART_SetConfig+0x934>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	f003 0320 	and.w	r3, r3, #32
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d009      	beq.n	8015dba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015da6:	4b2a      	ldr	r3, [pc, #168]	; (8015e50 <UART_SetConfig+0x934>)
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	08db      	lsrs	r3, r3, #3
 8015dac:	f003 0303 	and.w	r3, r3, #3
 8015db0:	4a24      	ldr	r2, [pc, #144]	; (8015e44 <UART_SetConfig+0x928>)
 8015db2:	fa22 f303 	lsr.w	r3, r2, r3
 8015db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015db8:	e00f      	b.n	8015dda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015dba:	4b22      	ldr	r3, [pc, #136]	; (8015e44 <UART_SetConfig+0x928>)
 8015dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015dbe:	e00c      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015dc0:	4b21      	ldr	r3, [pc, #132]	; (8015e48 <UART_SetConfig+0x92c>)
 8015dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015dc4:	e009      	b.n	8015dda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015dcc:	e005      	b.n	8015dda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f000 80e7 	beq.w	8015fb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de6:	4a19      	ldr	r2, [pc, #100]	; (8015e4c <UART_SetConfig+0x930>)
 8015de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dec:	461a      	mov	r2, r3
 8015dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015df0:	fbb3 f3f2 	udiv	r3, r3, r2
 8015df4:	005a      	lsls	r2, r3, #1
 8015df6:	697b      	ldr	r3, [r7, #20]
 8015df8:	685b      	ldr	r3, [r3, #4]
 8015dfa:	085b      	lsrs	r3, r3, #1
 8015dfc:	441a      	add	r2, r3
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	685b      	ldr	r3, [r3, #4]
 8015e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8015e06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0a:	2b0f      	cmp	r3, #15
 8015e0c:	d916      	bls.n	8015e3c <UART_SetConfig+0x920>
 8015e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e14:	d212      	bcs.n	8015e3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	f023 030f 	bic.w	r3, r3, #15
 8015e1e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e22:	085b      	lsrs	r3, r3, #1
 8015e24:	b29b      	uxth	r3, r3
 8015e26:	f003 0307 	and.w	r3, r3, #7
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e38:	60da      	str	r2, [r3, #12]
 8015e3a:	e0b9      	b.n	8015fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015e42:	e0b5      	b.n	8015fb0 <UART_SetConfig+0xa94>
 8015e44:	03d09000 	.word	0x03d09000
 8015e48:	003d0900 	.word	0x003d0900
 8015e4c:	0801b9cc 	.word	0x0801b9cc
 8015e50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015e54:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015e58:	2b20      	cmp	r3, #32
 8015e5a:	dc49      	bgt.n	8015ef0 <UART_SetConfig+0x9d4>
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	db7c      	blt.n	8015f5a <UART_SetConfig+0xa3e>
 8015e60:	2b20      	cmp	r3, #32
 8015e62:	d87a      	bhi.n	8015f5a <UART_SetConfig+0xa3e>
 8015e64:	a201      	add	r2, pc, #4	; (adr r2, 8015e6c <UART_SetConfig+0x950>)
 8015e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e6a:	bf00      	nop
 8015e6c:	08015ef7 	.word	0x08015ef7
 8015e70:	08015eff 	.word	0x08015eff
 8015e74:	08015f5b 	.word	0x08015f5b
 8015e78:	08015f5b 	.word	0x08015f5b
 8015e7c:	08015f07 	.word	0x08015f07
 8015e80:	08015f5b 	.word	0x08015f5b
 8015e84:	08015f5b 	.word	0x08015f5b
 8015e88:	08015f5b 	.word	0x08015f5b
 8015e8c:	08015f17 	.word	0x08015f17
 8015e90:	08015f5b 	.word	0x08015f5b
 8015e94:	08015f5b 	.word	0x08015f5b
 8015e98:	08015f5b 	.word	0x08015f5b
 8015e9c:	08015f5b 	.word	0x08015f5b
 8015ea0:	08015f5b 	.word	0x08015f5b
 8015ea4:	08015f5b 	.word	0x08015f5b
 8015ea8:	08015f5b 	.word	0x08015f5b
 8015eac:	08015f27 	.word	0x08015f27
 8015eb0:	08015f5b 	.word	0x08015f5b
 8015eb4:	08015f5b 	.word	0x08015f5b
 8015eb8:	08015f5b 	.word	0x08015f5b
 8015ebc:	08015f5b 	.word	0x08015f5b
 8015ec0:	08015f5b 	.word	0x08015f5b
 8015ec4:	08015f5b 	.word	0x08015f5b
 8015ec8:	08015f5b 	.word	0x08015f5b
 8015ecc:	08015f5b 	.word	0x08015f5b
 8015ed0:	08015f5b 	.word	0x08015f5b
 8015ed4:	08015f5b 	.word	0x08015f5b
 8015ed8:	08015f5b 	.word	0x08015f5b
 8015edc:	08015f5b 	.word	0x08015f5b
 8015ee0:	08015f5b 	.word	0x08015f5b
 8015ee4:	08015f5b 	.word	0x08015f5b
 8015ee8:	08015f5b 	.word	0x08015f5b
 8015eec:	08015f4d 	.word	0x08015f4d
 8015ef0:	2b40      	cmp	r3, #64	; 0x40
 8015ef2:	d02e      	beq.n	8015f52 <UART_SetConfig+0xa36>
 8015ef4:	e031      	b.n	8015f5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015ef6:	f7f9 fa59 	bl	800f3ac <HAL_RCC_GetPCLK1Freq>
 8015efa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015efc:	e033      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015efe:	f7f9 fa6b 	bl	800f3d8 <HAL_RCC_GetPCLK2Freq>
 8015f02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015f04:	e02f      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7fb fa5c 	bl	80113c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f14:	e027      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015f16:	f107 0318 	add.w	r3, r7, #24
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7fb fba8 	bl	8011670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f24:	e01f      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015f26:	4b2d      	ldr	r3, [pc, #180]	; (8015fdc <UART_SetConfig+0xac0>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f003 0320 	and.w	r3, r3, #32
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d009      	beq.n	8015f46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015f32:	4b2a      	ldr	r3, [pc, #168]	; (8015fdc <UART_SetConfig+0xac0>)
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	08db      	lsrs	r3, r3, #3
 8015f38:	f003 0303 	and.w	r3, r3, #3
 8015f3c:	4a28      	ldr	r2, [pc, #160]	; (8015fe0 <UART_SetConfig+0xac4>)
 8015f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8015f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015f44:	e00f      	b.n	8015f66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015f46:	4b26      	ldr	r3, [pc, #152]	; (8015fe0 <UART_SetConfig+0xac4>)
 8015f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f4a:	e00c      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015f4c:	4b25      	ldr	r3, [pc, #148]	; (8015fe4 <UART_SetConfig+0xac8>)
 8015f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f50:	e009      	b.n	8015f66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015f58:	e005      	b.n	8015f66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015f5e:	2301      	movs	r3, #1
 8015f60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015f64:	bf00      	nop
    }

    if (pclk != 0U)
 8015f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d021      	beq.n	8015fb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f70:	4a1d      	ldr	r2, [pc, #116]	; (8015fe8 <UART_SetConfig+0xacc>)
 8015f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015f76:	461a      	mov	r2, r3
 8015f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	685b      	ldr	r3, [r3, #4]
 8015f82:	085b      	lsrs	r3, r3, #1
 8015f84:	441a      	add	r2, r3
 8015f86:	697b      	ldr	r3, [r7, #20]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f92:	2b0f      	cmp	r3, #15
 8015f94:	d909      	bls.n	8015faa <UART_SetConfig+0xa8e>
 8015f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f9c:	d205      	bcs.n	8015faa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa0:	b29a      	uxth	r2, r3
 8015fa2:	697b      	ldr	r3, [r7, #20]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	60da      	str	r2, [r3, #12]
 8015fa8:	e002      	b.n	8015fb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8015faa:	2301      	movs	r3, #1
 8015fac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	2201      	movs	r2, #1
 8015fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	2201      	movs	r2, #1
 8015fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8015fcc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3748      	adds	r7, #72	; 0x48
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015fda:	bf00      	nop
 8015fdc:	58024400 	.word	0x58024400
 8015fe0:	03d09000 	.word	0x03d09000
 8015fe4:	003d0900 	.word	0x003d0900
 8015fe8:	0801b9cc 	.word	0x0801b9cc

08015fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ff8:	f003 0308 	and.w	r3, r3, #8
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d00a      	beq.n	8016016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	430a      	orrs	r2, r1
 8016014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801601a:	f003 0301 	and.w	r3, r3, #1
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00a      	beq.n	8016038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	430a      	orrs	r2, r1
 8016036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801603c:	f003 0302 	and.w	r3, r3, #2
 8016040:	2b00      	cmp	r3, #0
 8016042:	d00a      	beq.n	801605a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	430a      	orrs	r2, r1
 8016058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801605e:	f003 0304 	and.w	r3, r3, #4
 8016062:	2b00      	cmp	r3, #0
 8016064:	d00a      	beq.n	801607c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	430a      	orrs	r2, r1
 801607a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016080:	f003 0310 	and.w	r3, r3, #16
 8016084:	2b00      	cmp	r3, #0
 8016086:	d00a      	beq.n	801609e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	689b      	ldr	r3, [r3, #8]
 801608e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	430a      	orrs	r2, r1
 801609c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160a2:	f003 0320 	and.w	r3, r3, #32
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d00a      	beq.n	80160c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	689b      	ldr	r3, [r3, #8]
 80160b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	430a      	orrs	r2, r1
 80160be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d01a      	beq.n	8016102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	430a      	orrs	r2, r1
 80160e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80160ea:	d10a      	bne.n	8016102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	430a      	orrs	r2, r1
 8016100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801610a:	2b00      	cmp	r3, #0
 801610c:	d00a      	beq.n	8016124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	685b      	ldr	r3, [r3, #4]
 8016114:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	430a      	orrs	r2, r1
 8016122:	605a      	str	r2, [r3, #4]
  }
}
 8016124:	bf00      	nop
 8016126:	370c      	adds	r7, #12
 8016128:	46bd      	mov	sp, r7
 801612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612e:	4770      	bx	lr

08016130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b098      	sub	sp, #96	; 0x60
 8016134:	af02      	add	r7, sp, #8
 8016136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	2200      	movs	r2, #0
 801613c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016140:	f7f0 f906 	bl	8006350 <HAL_GetTick>
 8016144:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f003 0308 	and.w	r3, r3, #8
 8016150:	2b08      	cmp	r3, #8
 8016152:	d12f      	bne.n	80161b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016154:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016158:	9300      	str	r3, [sp, #0]
 801615a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801615c:	2200      	movs	r2, #0
 801615e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016162:	6878      	ldr	r0, [r7, #4]
 8016164:	f000 f88e 	bl	8016284 <UART_WaitOnFlagUntilTimeout>
 8016168:	4603      	mov	r3, r0
 801616a:	2b00      	cmp	r3, #0
 801616c:	d022      	beq.n	80161b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016176:	e853 3f00 	ldrex	r3, [r3]
 801617a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016182:	653b      	str	r3, [r7, #80]	; 0x50
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	461a      	mov	r2, r3
 801618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801618c:	647b      	str	r3, [r7, #68]	; 0x44
 801618e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016194:	e841 2300 	strex	r3, r2, [r1]
 8016198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801619c:	2b00      	cmp	r3, #0
 801619e:	d1e6      	bne.n	801616e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2220      	movs	r2, #32
 80161a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2200      	movs	r2, #0
 80161ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80161b0:	2303      	movs	r3, #3
 80161b2:	e063      	b.n	801627c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	f003 0304 	and.w	r3, r3, #4
 80161be:	2b04      	cmp	r3, #4
 80161c0:	d149      	bne.n	8016256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80161c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80161c6:	9300      	str	r3, [sp, #0]
 80161c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161ca:	2200      	movs	r2, #0
 80161cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f857 	bl	8016284 <UART_WaitOnFlagUntilTimeout>
 80161d6:	4603      	mov	r3, r0
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d03c      	beq.n	8016256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	e853 3f00 	ldrex	r3, [r3]
 80161e8:	623b      	str	r3, [r7, #32]
   return(result);
 80161ea:	6a3b      	ldr	r3, [r7, #32]
 80161ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80161f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	461a      	mov	r2, r3
 80161f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80161fa:	633b      	str	r3, [r7, #48]	; 0x30
 80161fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016202:	e841 2300 	strex	r3, r2, [r1]
 8016206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1e6      	bne.n	80161dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	3308      	adds	r3, #8
 8016214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016216:	693b      	ldr	r3, [r7, #16]
 8016218:	e853 3f00 	ldrex	r3, [r3]
 801621c:	60fb      	str	r3, [r7, #12]
   return(result);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	f023 0301 	bic.w	r3, r3, #1
 8016224:	64bb      	str	r3, [r7, #72]	; 0x48
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	3308      	adds	r3, #8
 801622c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801622e:	61fa      	str	r2, [r7, #28]
 8016230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016232:	69b9      	ldr	r1, [r7, #24]
 8016234:	69fa      	ldr	r2, [r7, #28]
 8016236:	e841 2300 	strex	r3, r2, [r1]
 801623a:	617b      	str	r3, [r7, #20]
   return(result);
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1e5      	bne.n	801620e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	2220      	movs	r2, #32
 8016246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2200      	movs	r2, #0
 801624e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016252:	2303      	movs	r3, #3
 8016254:	e012      	b.n	801627c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2220      	movs	r2, #32
 801625a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	2220      	movs	r2, #32
 8016262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	2200      	movs	r2, #0
 801626a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	2200      	movs	r2, #0
 8016270:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2200      	movs	r2, #0
 8016276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801627a:	2300      	movs	r3, #0
}
 801627c:	4618      	mov	r0, r3
 801627e:	3758      	adds	r7, #88	; 0x58
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b084      	sub	sp, #16
 8016288:	af00      	add	r7, sp, #0
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	603b      	str	r3, [r7, #0]
 8016290:	4613      	mov	r3, r2
 8016292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016294:	e04f      	b.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801629c:	d04b      	beq.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801629e:	f7f0 f857 	bl	8006350 <HAL_GetTick>
 80162a2:	4602      	mov	r2, r0
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	1ad3      	subs	r3, r2, r3
 80162a8:	69ba      	ldr	r2, [r7, #24]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d302      	bcc.n	80162b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d101      	bne.n	80162b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80162b4:	2303      	movs	r3, #3
 80162b6:	e04e      	b.n	8016356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	f003 0304 	and.w	r3, r3, #4
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d037      	beq.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	2b80      	cmp	r3, #128	; 0x80
 80162ca:	d034      	beq.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	2b40      	cmp	r3, #64	; 0x40
 80162d0:	d031      	beq.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	69db      	ldr	r3, [r3, #28]
 80162d8:	f003 0308 	and.w	r3, r3, #8
 80162dc:	2b08      	cmp	r3, #8
 80162de:	d110      	bne.n	8016302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2208      	movs	r2, #8
 80162e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80162e8:	68f8      	ldr	r0, [r7, #12]
 80162ea:	f000 f95b 	bl	80165a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2208      	movs	r2, #8
 80162f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	2200      	movs	r2, #0
 80162fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80162fe:	2301      	movs	r3, #1
 8016300:	e029      	b.n	8016356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	69db      	ldr	r3, [r3, #28]
 8016308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016310:	d111      	bne.n	8016336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801631a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801631c:	68f8      	ldr	r0, [r7, #12]
 801631e:	f000 f941 	bl	80165a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	2220      	movs	r2, #32
 8016326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	2200      	movs	r2, #0
 801632e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8016332:	2303      	movs	r3, #3
 8016334:	e00f      	b.n	8016356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	69da      	ldr	r2, [r3, #28]
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	4013      	ands	r3, r2
 8016340:	68ba      	ldr	r2, [r7, #8]
 8016342:	429a      	cmp	r2, r3
 8016344:	bf0c      	ite	eq
 8016346:	2301      	moveq	r3, #1
 8016348:	2300      	movne	r3, #0
 801634a:	b2db      	uxtb	r3, r3
 801634c:	461a      	mov	r2, r3
 801634e:	79fb      	ldrb	r3, [r7, #7]
 8016350:	429a      	cmp	r2, r3
 8016352:	d0a0      	beq.n	8016296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016354:	2300      	movs	r3, #0
}
 8016356:	4618      	mov	r0, r3
 8016358:	3710      	adds	r7, #16
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
	...

08016360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016360:	b480      	push	{r7}
 8016362:	b0a3      	sub	sp, #140	; 0x8c
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	4613      	mov	r3, r2
 801636c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	88fa      	ldrh	r2, [r7, #6]
 8016378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	88fa      	ldrh	r2, [r7, #6]
 8016380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	689b      	ldr	r3, [r3, #8]
 801638e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016392:	d10e      	bne.n	80163b2 <UART_Start_Receive_IT+0x52>
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	691b      	ldr	r3, [r3, #16]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d105      	bne.n	80163a8 <UART_Start_Receive_IT+0x48>
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80163a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163a6:	e02d      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	22ff      	movs	r2, #255	; 0xff
 80163ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163b0:	e028      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	689b      	ldr	r3, [r3, #8]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d10d      	bne.n	80163d6 <UART_Start_Receive_IT+0x76>
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	691b      	ldr	r3, [r3, #16]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d104      	bne.n	80163cc <UART_Start_Receive_IT+0x6c>
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	22ff      	movs	r2, #255	; 0xff
 80163c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163ca:	e01b      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	227f      	movs	r2, #127	; 0x7f
 80163d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163d4:	e016      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	689b      	ldr	r3, [r3, #8]
 80163da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80163de:	d10d      	bne.n	80163fc <UART_Start_Receive_IT+0x9c>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	691b      	ldr	r3, [r3, #16]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d104      	bne.n	80163f2 <UART_Start_Receive_IT+0x92>
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	227f      	movs	r2, #127	; 0x7f
 80163ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163f0:	e008      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	223f      	movs	r2, #63	; 0x3f
 80163f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80163fa:	e003      	b.n	8016404 <UART_Start_Receive_IT+0xa4>
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2200      	movs	r2, #0
 8016400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	2200      	movs	r2, #0
 8016408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2222      	movs	r2, #34	; 0x22
 8016410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	3308      	adds	r3, #8
 801641a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801641e:	e853 3f00 	ldrex	r3, [r3]
 8016422:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016426:	f043 0301 	orr.w	r3, r3, #1
 801642a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	3308      	adds	r3, #8
 8016434:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016438:	673a      	str	r2, [r7, #112]	; 0x70
 801643a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801643c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801643e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016440:	e841 2300 	strex	r3, r2, [r1]
 8016444:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8016446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016448:	2b00      	cmp	r3, #0
 801644a:	d1e3      	bne.n	8016414 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016454:	d14f      	bne.n	80164f6 <UART_Start_Receive_IT+0x196>
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801645c:	88fa      	ldrh	r2, [r7, #6]
 801645e:	429a      	cmp	r2, r3
 8016460:	d349      	bcc.n	80164f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	689b      	ldr	r3, [r3, #8]
 8016466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801646a:	d107      	bne.n	801647c <UART_Start_Receive_IT+0x11c>
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	691b      	ldr	r3, [r3, #16]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d103      	bne.n	801647c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	4a47      	ldr	r2, [pc, #284]	; (8016594 <UART_Start_Receive_IT+0x234>)
 8016478:	675a      	str	r2, [r3, #116]	; 0x74
 801647a:	e002      	b.n	8016482 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	4a46      	ldr	r2, [pc, #280]	; (8016598 <UART_Start_Receive_IT+0x238>)
 8016480:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	691b      	ldr	r3, [r3, #16]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d01a      	beq.n	80164c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016492:	e853 3f00 	ldrex	r3, [r3]
 8016496:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801649a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801649e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	461a      	mov	r2, r3
 80164a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80164ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80164ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80164b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80164b4:	e841 2300 	strex	r3, r2, [r1]
 80164b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80164ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d1e4      	bne.n	801648a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	3308      	adds	r3, #8
 80164c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164ca:	e853 3f00 	ldrex	r3, [r3]
 80164ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80164d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	3308      	adds	r3, #8
 80164de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80164e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80164e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80164e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80164e8:	e841 2300 	strex	r3, r2, [r1]
 80164ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80164ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1e5      	bne.n	80164c0 <UART_Start_Receive_IT+0x160>
 80164f4:	e046      	b.n	8016584 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	689b      	ldr	r3, [r3, #8]
 80164fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164fe:	d107      	bne.n	8016510 <UART_Start_Receive_IT+0x1b0>
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	691b      	ldr	r3, [r3, #16]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d103      	bne.n	8016510 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	4a24      	ldr	r2, [pc, #144]	; (801659c <UART_Start_Receive_IT+0x23c>)
 801650c:	675a      	str	r2, [r3, #116]	; 0x74
 801650e:	e002      	b.n	8016516 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	4a23      	ldr	r2, [pc, #140]	; (80165a0 <UART_Start_Receive_IT+0x240>)
 8016514:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	691b      	ldr	r3, [r3, #16]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d019      	beq.n	8016552 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016526:	e853 3f00 	ldrex	r3, [r3]
 801652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8016532:	677b      	str	r3, [r7, #116]	; 0x74
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	461a      	mov	r2, r3
 801653a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801653c:	637b      	str	r3, [r7, #52]	; 0x34
 801653e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016544:	e841 2300 	strex	r3, r2, [r1]
 8016548:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1e6      	bne.n	801651e <UART_Start_Receive_IT+0x1be>
 8016550:	e018      	b.n	8016584 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	e853 3f00 	ldrex	r3, [r3]
 801655e:	613b      	str	r3, [r7, #16]
   return(result);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	f043 0320 	orr.w	r3, r3, #32
 8016566:	67bb      	str	r3, [r7, #120]	; 0x78
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	461a      	mov	r2, r3
 801656e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016570:	623b      	str	r3, [r7, #32]
 8016572:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016574:	69f9      	ldr	r1, [r7, #28]
 8016576:	6a3a      	ldr	r2, [r7, #32]
 8016578:	e841 2300 	strex	r3, r2, [r1]
 801657c:	61bb      	str	r3, [r7, #24]
   return(result);
 801657e:	69bb      	ldr	r3, [r7, #24]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d1e6      	bne.n	8016552 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8016584:	2300      	movs	r3, #0
}
 8016586:	4618      	mov	r0, r3
 8016588:	378c      	adds	r7, #140	; 0x8c
 801658a:	46bd      	mov	sp, r7
 801658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop
 8016594:	08016dc5 	.word	0x08016dc5
 8016598:	08016a65 	.word	0x08016a65
 801659c:	080168ad 	.word	0x080168ad
 80165a0:	080166f5 	.word	0x080166f5

080165a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80165a4:	b480      	push	{r7}
 80165a6:	b095      	sub	sp, #84	; 0x54
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165b4:	e853 3f00 	ldrex	r3, [r3]
 80165b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80165c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	461a      	mov	r2, r3
 80165c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165ca:	643b      	str	r3, [r7, #64]	; 0x40
 80165cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80165d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80165d2:	e841 2300 	strex	r3, r2, [r1]
 80165d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80165d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d1e6      	bne.n	80165ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	3308      	adds	r3, #8
 80165e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	e853 3f00 	ldrex	r3, [r3]
 80165ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80165ee:	69fa      	ldr	r2, [r7, #28]
 80165f0:	4b1e      	ldr	r3, [pc, #120]	; (801666c <UART_EndRxTransfer+0xc8>)
 80165f2:	4013      	ands	r3, r2
 80165f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	3308      	adds	r3, #8
 80165fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80165fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016606:	e841 2300 	strex	r3, r2, [r1]
 801660a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1e5      	bne.n	80165de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016616:	2b01      	cmp	r3, #1
 8016618:	d118      	bne.n	801664c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	e853 3f00 	ldrex	r3, [r3]
 8016626:	60bb      	str	r3, [r7, #8]
   return(result);
 8016628:	68bb      	ldr	r3, [r7, #8]
 801662a:	f023 0310 	bic.w	r3, r3, #16
 801662e:	647b      	str	r3, [r7, #68]	; 0x44
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	461a      	mov	r2, r3
 8016636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016638:	61bb      	str	r3, [r7, #24]
 801663a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801663c:	6979      	ldr	r1, [r7, #20]
 801663e:	69ba      	ldr	r2, [r7, #24]
 8016640:	e841 2300 	strex	r3, r2, [r1]
 8016644:	613b      	str	r3, [r7, #16]
   return(result);
 8016646:	693b      	ldr	r3, [r7, #16]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d1e6      	bne.n	801661a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	2220      	movs	r2, #32
 8016650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	2200      	movs	r2, #0
 8016658:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8016660:	bf00      	nop
 8016662:	3754      	adds	r7, #84	; 0x54
 8016664:	46bd      	mov	sp, r7
 8016666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666a:	4770      	bx	lr
 801666c:	effffffe 	.word	0xeffffffe

08016670 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b084      	sub	sp, #16
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801667c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2200      	movs	r2, #0
 8016682:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2200      	movs	r2, #0
 801668a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801668e:	68f8      	ldr	r0, [r7, #12]
 8016690:	f7fe ff2e 	bl	80154f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016694:	bf00      	nop
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801669c:	b580      	push	{r7, lr}
 801669e:	b088      	sub	sp, #32
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	e853 3f00 	ldrex	r3, [r3]
 80166b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80166b2:	68bb      	ldr	r3, [r7, #8]
 80166b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80166b8:	61fb      	str	r3, [r7, #28]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	461a      	mov	r2, r3
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	61bb      	str	r3, [r7, #24]
 80166c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c6:	6979      	ldr	r1, [r7, #20]
 80166c8:	69ba      	ldr	r2, [r7, #24]
 80166ca:	e841 2300 	strex	r3, r2, [r1]
 80166ce:	613b      	str	r3, [r7, #16]
   return(result);
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d1e6      	bne.n	80166a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	2220      	movs	r2, #32
 80166da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2200      	movs	r2, #0
 80166e2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7fe fef9 	bl	80154dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80166ea:	bf00      	nop
 80166ec:	3720      	adds	r7, #32
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
	...

080166f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b09c      	sub	sp, #112	; 0x70
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016702:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801670c:	2b22      	cmp	r3, #34	; 0x22
 801670e:	f040 80be 	bne.w	801688e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016718:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801671c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8016720:	b2d9      	uxtb	r1, r3
 8016722:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016726:	b2da      	uxtb	r2, r3
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801672c:	400a      	ands	r2, r1
 801672e:	b2d2      	uxtb	r2, r2
 8016730:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016736:	1c5a      	adds	r2, r3, #1
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016742:	b29b      	uxth	r3, r3
 8016744:	3b01      	subs	r3, #1
 8016746:	b29a      	uxth	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016754:	b29b      	uxth	r3, r3
 8016756:	2b00      	cmp	r3, #0
 8016758:	f040 80a1 	bne.w	801689e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016764:	e853 3f00 	ldrex	r3, [r3]
 8016768:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801676a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801676c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016770:	66bb      	str	r3, [r7, #104]	; 0x68
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	461a      	mov	r2, r3
 8016778:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801677a:	65bb      	str	r3, [r7, #88]	; 0x58
 801677c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801677e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016782:	e841 2300 	strex	r3, r2, [r1]
 8016786:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801678a:	2b00      	cmp	r3, #0
 801678c:	d1e6      	bne.n	801675c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	3308      	adds	r3, #8
 8016794:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016798:	e853 3f00 	ldrex	r3, [r3]
 801679c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167a0:	f023 0301 	bic.w	r3, r3, #1
 80167a4:	667b      	str	r3, [r7, #100]	; 0x64
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	3308      	adds	r3, #8
 80167ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80167ae:	647a      	str	r2, [r7, #68]	; 0x44
 80167b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80167b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80167b6:	e841 2300 	strex	r3, r2, [r1]
 80167ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80167bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1e5      	bne.n	801678e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2220      	movs	r2, #32
 80167c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2200      	movs	r2, #0
 80167d4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4a33      	ldr	r2, [pc, #204]	; (80168a8 <UART_RxISR_8BIT+0x1b4>)
 80167dc:	4293      	cmp	r3, r2
 80167de:	d01f      	beq.n	8016820 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	685b      	ldr	r3, [r3, #4]
 80167e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d018      	beq.n	8016820 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f6:	e853 3f00 	ldrex	r3, [r3]
 80167fa:	623b      	str	r3, [r7, #32]
   return(result);
 80167fc:	6a3b      	ldr	r3, [r7, #32]
 80167fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016802:	663b      	str	r3, [r7, #96]	; 0x60
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	461a      	mov	r2, r3
 801680a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801680c:	633b      	str	r3, [r7, #48]	; 0x30
 801680e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016814:	e841 2300 	strex	r3, r2, [r1]
 8016818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681c:	2b00      	cmp	r3, #0
 801681e:	d1e6      	bne.n	80167ee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016824:	2b01      	cmp	r3, #1
 8016826:	d12e      	bne.n	8016886 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	2200      	movs	r2, #0
 801682c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	e853 3f00 	ldrex	r3, [r3]
 801683a:	60fb      	str	r3, [r7, #12]
   return(result);
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	f023 0310 	bic.w	r3, r3, #16
 8016842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	461a      	mov	r2, r3
 801684a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801684c:	61fb      	str	r3, [r7, #28]
 801684e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016850:	69b9      	ldr	r1, [r7, #24]
 8016852:	69fa      	ldr	r2, [r7, #28]
 8016854:	e841 2300 	strex	r3, r2, [r1]
 8016858:	617b      	str	r3, [r7, #20]
   return(result);
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d1e6      	bne.n	801682e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	69db      	ldr	r3, [r3, #28]
 8016866:	f003 0310 	and.w	r3, r3, #16
 801686a:	2b10      	cmp	r3, #16
 801686c:	d103      	bne.n	8016876 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	2210      	movs	r2, #16
 8016874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801687c:	4619      	mov	r1, r3
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f7fe fe40 	bl	8015504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016884:	e00b      	b.n	801689e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f7ec faf0 	bl	8002e6c <HAL_UART_RxCpltCallback>
}
 801688c:	e007      	b.n	801689e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	699a      	ldr	r2, [r3, #24]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f042 0208 	orr.w	r2, r2, #8
 801689c:	619a      	str	r2, [r3, #24]
}
 801689e:	bf00      	nop
 80168a0:	3770      	adds	r7, #112	; 0x70
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	58000c00 	.word	0x58000c00

080168ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b09c      	sub	sp, #112	; 0x70
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80168ba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80168c4:	2b22      	cmp	r3, #34	; 0x22
 80168c6:	f040 80be 	bne.w	8016a46 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168d8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80168da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80168de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80168e2:	4013      	ands	r3, r2
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80168e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80168ee:	1c9a      	adds	r2, r3, #2
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	3b01      	subs	r3, #1
 80168fe:	b29a      	uxth	r2, r3
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801690c:	b29b      	uxth	r3, r3
 801690e:	2b00      	cmp	r3, #0
 8016910:	f040 80a1 	bne.w	8016a56 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801691a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801691c:	e853 3f00 	ldrex	r3, [r3]
 8016920:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016928:	667b      	str	r3, [r7, #100]	; 0x64
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	461a      	mov	r2, r3
 8016930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016932:	657b      	str	r3, [r7, #84]	; 0x54
 8016934:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016938:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801693a:	e841 2300 	strex	r3, r2, [r1]
 801693e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016942:	2b00      	cmp	r3, #0
 8016944:	d1e6      	bne.n	8016914 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	3308      	adds	r3, #8
 801694c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801694e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016950:	e853 3f00 	ldrex	r3, [r3]
 8016954:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016958:	f023 0301 	bic.w	r3, r3, #1
 801695c:	663b      	str	r3, [r7, #96]	; 0x60
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	3308      	adds	r3, #8
 8016964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016966:	643a      	str	r2, [r7, #64]	; 0x40
 8016968:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801696a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801696c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801696e:	e841 2300 	strex	r3, r2, [r1]
 8016972:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016976:	2b00      	cmp	r3, #0
 8016978:	d1e5      	bne.n	8016946 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2220      	movs	r2, #32
 801697e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2200      	movs	r2, #0
 8016986:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2200      	movs	r2, #0
 801698c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	4a33      	ldr	r2, [pc, #204]	; (8016a60 <UART_RxISR_16BIT+0x1b4>)
 8016994:	4293      	cmp	r3, r2
 8016996:	d01f      	beq.n	80169d8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	685b      	ldr	r3, [r3, #4]
 801699e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d018      	beq.n	80169d8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	e853 3f00 	ldrex	r3, [r3]
 80169b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80169ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	461a      	mov	r2, r3
 80169c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169c6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169cc:	e841 2300 	strex	r3, r2, [r1]
 80169d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d1e6      	bne.n	80169a6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169dc:	2b01      	cmp	r3, #1
 80169de:	d12e      	bne.n	8016a3e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2200      	movs	r2, #0
 80169e4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	e853 3f00 	ldrex	r3, [r3]
 80169f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	f023 0310 	bic.w	r3, r3, #16
 80169fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	461a      	mov	r2, r3
 8016a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016a04:	61bb      	str	r3, [r7, #24]
 8016a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a08:	6979      	ldr	r1, [r7, #20]
 8016a0a:	69ba      	ldr	r2, [r7, #24]
 8016a0c:	e841 2300 	strex	r3, r2, [r1]
 8016a10:	613b      	str	r3, [r7, #16]
   return(result);
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d1e6      	bne.n	80169e6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	69db      	ldr	r3, [r3, #28]
 8016a1e:	f003 0310 	and.w	r3, r3, #16
 8016a22:	2b10      	cmp	r3, #16
 8016a24:	d103      	bne.n	8016a2e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2210      	movs	r2, #16
 8016a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016a34:	4619      	mov	r1, r3
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7fe fd64 	bl	8015504 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016a3c:	e00b      	b.n	8016a56 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7ec fa14 	bl	8002e6c <HAL_UART_RxCpltCallback>
}
 8016a44:	e007      	b.n	8016a56 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	699a      	ldr	r2, [r3, #24]
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f042 0208 	orr.w	r2, r2, #8
 8016a54:	619a      	str	r2, [r3, #24]
}
 8016a56:	bf00      	nop
 8016a58:	3770      	adds	r7, #112	; 0x70
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	58000c00 	.word	0x58000c00

08016a64 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b0ac      	sub	sp, #176	; 0xb0
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	69db      	ldr	r3, [r3, #28]
 8016a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	689b      	ldr	r3, [r3, #8]
 8016a90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016a9a:	2b22      	cmp	r3, #34	; 0x22
 8016a9c:	f040 8180 	bne.w	8016da0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016aa6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016aaa:	e123      	b.n	8016cf4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016ab6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8016aba:	b2d9      	uxtb	r1, r3
 8016abc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8016ac0:	b2da      	uxtb	r2, r3
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ac6:	400a      	ands	r2, r1
 8016ac8:	b2d2      	uxtb	r2, r2
 8016aca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016ad0:	1c5a      	adds	r2, r3, #1
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	3b01      	subs	r3, #1
 8016ae0:	b29a      	uxth	r2, r3
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	69db      	ldr	r3, [r3, #28]
 8016aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016af6:	f003 0307 	and.w	r3, r3, #7
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d053      	beq.n	8016ba6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016b02:	f003 0301 	and.w	r3, r3, #1
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d011      	beq.n	8016b2e <UART_RxISR_8BIT_FIFOEN+0xca>
 8016b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00b      	beq.n	8016b2e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	2201      	movs	r2, #1
 8016b1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b24:	f043 0201 	orr.w	r2, r3, #1
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016b32:	f003 0302 	and.w	r3, r3, #2
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d011      	beq.n	8016b5e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016b3e:	f003 0301 	and.w	r3, r3, #1
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d00b      	beq.n	8016b5e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2202      	movs	r2, #2
 8016b4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b54:	f043 0204 	orr.w	r2, r3, #4
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016b62:	f003 0304 	and.w	r3, r3, #4
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d011      	beq.n	8016b8e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016b6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016b6e:	f003 0301 	and.w	r3, r3, #1
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00b      	beq.n	8016b8e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	2204      	movs	r2, #4
 8016b7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b84:	f043 0202 	orr.w	r2, r3, #2
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d006      	beq.n	8016ba6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f7fe fca9 	bl	80154f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016bac:	b29b      	uxth	r3, r3
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	f040 80a0 	bne.w	8016cf4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016bbc:	e853 3f00 	ldrex	r3, [r3]
 8016bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8016bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	461a      	mov	r2, r3
 8016bd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016bd8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016bdc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016bde:	e841 2300 	strex	r3, r2, [r1]
 8016be2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d1e4      	bne.n	8016bb4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	3308      	adds	r3, #8
 8016bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bf4:	e853 3f00 	ldrex	r3, [r3]
 8016bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016bfc:	4b6e      	ldr	r3, [pc, #440]	; (8016db8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8016bfe:	4013      	ands	r3, r2
 8016c00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	3308      	adds	r3, #8
 8016c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016c0e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016c10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c12:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016c14:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016c16:	e841 2300 	strex	r3, r2, [r1]
 8016c1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d1e3      	bne.n	8016bea <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2220      	movs	r2, #32
 8016c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	4a60      	ldr	r2, [pc, #384]	; (8016dbc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d021      	beq.n	8016c84 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d01a      	beq.n	8016c84 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c56:	e853 3f00 	ldrex	r3, [r3]
 8016c5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016c62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016c70:	657b      	str	r3, [r7, #84]	; 0x54
 8016c72:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016c76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c78:	e841 2300 	strex	r3, r2, [r1]
 8016c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1e4      	bne.n	8016c4e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c88:	2b01      	cmp	r3, #1
 8016c8a:	d130      	bne.n	8016cee <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2200      	movs	r2, #0
 8016c90:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c9a:	e853 3f00 	ldrex	r3, [r3]
 8016c9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	f023 0310 	bic.w	r3, r3, #16
 8016ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	461a      	mov	r2, r3
 8016cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8016cb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016cb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016cba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016cbc:	e841 2300 	strex	r3, r2, [r1]
 8016cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d1e4      	bne.n	8016c92 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	69db      	ldr	r3, [r3, #28]
 8016cce:	f003 0310 	and.w	r3, r3, #16
 8016cd2:	2b10      	cmp	r3, #16
 8016cd4:	d103      	bne.n	8016cde <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	2210      	movs	r2, #16
 8016cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016ce4:	4619      	mov	r1, r3
 8016ce6:	6878      	ldr	r0, [r7, #4]
 8016ce8:	f7fe fc0c 	bl	8015504 <HAL_UARTEx_RxEventCallback>
 8016cec:	e002      	b.n	8016cf4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f7ec f8bc 	bl	8002e6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016cf4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d006      	beq.n	8016d0a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8016cfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016d00:	f003 0320 	and.w	r3, r3, #32
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	f47f aed1 	bne.w	8016aac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016d10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016d14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d049      	beq.n	8016db0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d22:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d242      	bcs.n	8016db0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	3308      	adds	r3, #8
 8016d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d32:	6a3b      	ldr	r3, [r7, #32]
 8016d34:	e853 3f00 	ldrex	r3, [r3]
 8016d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	3308      	adds	r3, #8
 8016d4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8016d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d56:	e841 2300 	strex	r3, r2, [r1]
 8016d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1e3      	bne.n	8016d2a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	4a16      	ldr	r2, [pc, #88]	; (8016dc0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016d66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	e853 3f00 	ldrex	r3, [r3]
 8016d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	f043 0320 	orr.w	r3, r3, #32
 8016d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	461a      	mov	r2, r3
 8016d86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d8a:	61bb      	str	r3, [r7, #24]
 8016d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d8e:	6979      	ldr	r1, [r7, #20]
 8016d90:	69ba      	ldr	r2, [r7, #24]
 8016d92:	e841 2300 	strex	r3, r2, [r1]
 8016d96:	613b      	str	r3, [r7, #16]
   return(result);
 8016d98:	693b      	ldr	r3, [r7, #16]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d1e4      	bne.n	8016d68 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016d9e:	e007      	b.n	8016db0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	699a      	ldr	r2, [r3, #24]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	f042 0208 	orr.w	r2, r2, #8
 8016dae:	619a      	str	r2, [r3, #24]
}
 8016db0:	bf00      	nop
 8016db2:	37b0      	adds	r7, #176	; 0xb0
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	effffffe 	.word	0xeffffffe
 8016dbc:	58000c00 	.word	0x58000c00
 8016dc0:	080166f5 	.word	0x080166f5

08016dc4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b0ae      	sub	sp, #184	; 0xb8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016dd2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	69db      	ldr	r3, [r3, #28]
 8016ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016dfa:	2b22      	cmp	r3, #34	; 0x22
 8016dfc:	f040 8184 	bne.w	8017108 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016e06:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016e0a:	e127      	b.n	801705c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e12:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8016e1e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016e22:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016e26:	4013      	ands	r3, r2
 8016e28:	b29a      	uxth	r2, r3
 8016e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016e2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e34:	1c9a      	adds	r2, r3, #2
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	3b01      	subs	r3, #1
 8016e44:	b29a      	uxth	r2, r3
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	69db      	ldr	r3, [r3, #28]
 8016e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016e5a:	f003 0307 	and.w	r3, r3, #7
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d053      	beq.n	8016f0a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016e62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016e66:	f003 0301 	and.w	r3, r3, #1
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d011      	beq.n	8016e92 <UART_RxISR_16BIT_FIFOEN+0xce>
 8016e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d00b      	beq.n	8016e92 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	2201      	movs	r2, #1
 8016e80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016e88:	f043 0201 	orr.w	r2, r3, #1
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016e96:	f003 0302 	and.w	r3, r3, #2
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d011      	beq.n	8016ec2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ea2:	f003 0301 	and.w	r3, r3, #1
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d00b      	beq.n	8016ec2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	2202      	movs	r2, #2
 8016eb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eb8:	f043 0204 	orr.w	r2, r3, #4
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016ec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016ec6:	f003 0304 	and.w	r3, r3, #4
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d011      	beq.n	8016ef2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016ed2:	f003 0301 	and.w	r3, r3, #1
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d00b      	beq.n	8016ef2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	2204      	movs	r2, #4
 8016ee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ee8:	f043 0202 	orr.w	r2, r3, #2
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d006      	beq.n	8016f0a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f7fe faf7 	bl	80154f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	2200      	movs	r2, #0
 8016f06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016f10:	b29b      	uxth	r3, r3
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	f040 80a2 	bne.w	801705c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016f20:	e853 3f00 	ldrex	r3, [r3]
 8016f24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	461a      	mov	r2, r3
 8016f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016f3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016f42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f46:	e841 2300 	strex	r3, r2, [r1]
 8016f4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d1e2      	bne.n	8016f18 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	3308      	adds	r3, #8
 8016f58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f5c:	e853 3f00 	ldrex	r3, [r3]
 8016f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016f62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016f64:	4b6e      	ldr	r3, [pc, #440]	; (8017120 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016f66:	4013      	ands	r3, r2
 8016f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	3308      	adds	r3, #8
 8016f72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8016f76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016f78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016f7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f7e:	e841 2300 	strex	r3, r2, [r1]
 8016f82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d1e3      	bne.n	8016f52 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2220      	movs	r2, #32
 8016f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2200      	movs	r2, #0
 8016f96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	4a60      	ldr	r2, [pc, #384]	; (8017124 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8016fa4:	4293      	cmp	r3, r2
 8016fa6:	d021      	beq.n	8016fec <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d01a      	beq.n	8016fec <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fbe:	e853 3f00 	ldrex	r3, [r3]
 8016fc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016fd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8016fda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016fe0:	e841 2300 	strex	r3, r2, [r1]
 8016fe4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d1e4      	bne.n	8016fb6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ff0:	2b01      	cmp	r3, #1
 8016ff2:	d130      	bne.n	8017056 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017002:	e853 3f00 	ldrex	r3, [r3]
 8017006:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801700a:	f023 0310 	bic.w	r3, r3, #16
 801700e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	461a      	mov	r2, r3
 8017018:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801701c:	647b      	str	r3, [r7, #68]	; 0x44
 801701e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017024:	e841 2300 	strex	r3, r2, [r1]
 8017028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801702a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801702c:	2b00      	cmp	r3, #0
 801702e:	d1e4      	bne.n	8016ffa <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	69db      	ldr	r3, [r3, #28]
 8017036:	f003 0310 	and.w	r3, r3, #16
 801703a:	2b10      	cmp	r3, #16
 801703c:	d103      	bne.n	8017046 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	2210      	movs	r2, #16
 8017044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801704c:	4619      	mov	r1, r3
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f7fe fa58 	bl	8015504 <HAL_UARTEx_RxEventCallback>
 8017054:	e002      	b.n	801705c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f7eb ff08 	bl	8002e6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801705c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8017060:	2b00      	cmp	r3, #0
 8017062:	d006      	beq.n	8017072 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8017064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017068:	f003 0320 	and.w	r3, r3, #32
 801706c:	2b00      	cmp	r3, #0
 801706e:	f47f aecd 	bne.w	8016e0c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017078:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801707c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8017080:	2b00      	cmp	r3, #0
 8017082:	d049      	beq.n	8017118 <UART_RxISR_16BIT_FIFOEN+0x354>
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801708a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801708e:	429a      	cmp	r2, r3
 8017090:	d242      	bcs.n	8017118 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	3308      	adds	r3, #8
 8017098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801709c:	e853 3f00 	ldrex	r3, [r3]
 80170a0:	623b      	str	r3, [r7, #32]
   return(result);
 80170a2:	6a3b      	ldr	r3, [r7, #32]
 80170a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80170a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	3308      	adds	r3, #8
 80170b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80170b6:	633a      	str	r2, [r7, #48]	; 0x30
 80170b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170be:	e841 2300 	strex	r3, r2, [r1]
 80170c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80170c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d1e3      	bne.n	8017092 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	4a16      	ldr	r2, [pc, #88]	; (8017128 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80170ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170d6:	693b      	ldr	r3, [r7, #16]
 80170d8:	e853 3f00 	ldrex	r3, [r3]
 80170dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	f043 0320 	orr.w	r3, r3, #32
 80170e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	461a      	mov	r2, r3
 80170ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80170f2:	61fb      	str	r3, [r7, #28]
 80170f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170f6:	69b9      	ldr	r1, [r7, #24]
 80170f8:	69fa      	ldr	r2, [r7, #28]
 80170fa:	e841 2300 	strex	r3, r2, [r1]
 80170fe:	617b      	str	r3, [r7, #20]
   return(result);
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d1e4      	bne.n	80170d0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017106:	e007      	b.n	8017118 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	699a      	ldr	r2, [r3, #24]
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	f042 0208 	orr.w	r2, r2, #8
 8017116:	619a      	str	r2, [r3, #24]
}
 8017118:	bf00      	nop
 801711a:	37b8      	adds	r7, #184	; 0xb8
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}
 8017120:	effffffe 	.word	0xeffffffe
 8017124:	58000c00 	.word	0x58000c00
 8017128:	080168ad 	.word	0x080168ad

0801712c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017134:	bf00      	nop
 8017136:	370c      	adds	r7, #12
 8017138:	46bd      	mov	sp, r7
 801713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713e:	4770      	bx	lr

08017140 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017140:	b480      	push	{r7}
 8017142:	b083      	sub	sp, #12
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8017148:	bf00      	nop
 801714a:	370c      	adds	r7, #12
 801714c:	46bd      	mov	sp, r7
 801714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017152:	4770      	bx	lr

08017154 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8017154:	b480      	push	{r7}
 8017156:	b083      	sub	sp, #12
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801715c:	bf00      	nop
 801715e:	370c      	adds	r7, #12
 8017160:	46bd      	mov	sp, r7
 8017162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017166:	4770      	bx	lr

08017168 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8017168:	b480      	push	{r7}
 801716a:	b089      	sub	sp, #36	; 0x24
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017176:	2b01      	cmp	r3, #1
 8017178:	d101      	bne.n	801717e <HAL_UARTEx_EnableStopMode+0x16>
 801717a:	2302      	movs	r3, #2
 801717c:	e021      	b.n	80171c2 <HAL_UARTEx_EnableStopMode+0x5a>
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2201      	movs	r2, #1
 8017182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	e853 3f00 	ldrex	r3, [r3]
 8017192:	60bb      	str	r3, [r7, #8]
   return(result);
 8017194:	68bb      	ldr	r3, [r7, #8]
 8017196:	f043 0302 	orr.w	r3, r3, #2
 801719a:	61fb      	str	r3, [r7, #28]
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	461a      	mov	r2, r3
 80171a2:	69fb      	ldr	r3, [r7, #28]
 80171a4:	61bb      	str	r3, [r7, #24]
 80171a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171a8:	6979      	ldr	r1, [r7, #20]
 80171aa:	69ba      	ldr	r2, [r7, #24]
 80171ac:	e841 2300 	strex	r3, r2, [r1]
 80171b0:	613b      	str	r3, [r7, #16]
   return(result);
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d1e6      	bne.n	8017186 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2200      	movs	r2, #0
 80171bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80171c0:	2300      	movs	r3, #0
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3724      	adds	r7, #36	; 0x24
 80171c6:	46bd      	mov	sp, r7
 80171c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171cc:	4770      	bx	lr

080171ce <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80171ce:	b580      	push	{r7, lr}
 80171d0:	b084      	sub	sp, #16
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80171dc:	2b01      	cmp	r3, #1
 80171de:	d101      	bne.n	80171e4 <HAL_UARTEx_EnableFifoMode+0x16>
 80171e0:	2302      	movs	r3, #2
 80171e2:	e02b      	b.n	801723c <HAL_UARTEx_EnableFifoMode+0x6e>
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2201      	movs	r2, #1
 80171e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2224      	movs	r2, #36	; 0x24
 80171f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	f022 0201 	bic.w	r2, r2, #1
 801720a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017212:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801721a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f000 f8c3 	bl	80173b0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2220      	movs	r2, #32
 801722e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	2200      	movs	r2, #0
 8017236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801723a:	2300      	movs	r3, #0
}
 801723c:	4618      	mov	r0, r3
 801723e:	3710      	adds	r7, #16
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}

08017244 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017244:	b480      	push	{r7}
 8017246:	b085      	sub	sp, #20
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017252:	2b01      	cmp	r3, #1
 8017254:	d101      	bne.n	801725a <HAL_UARTEx_DisableFifoMode+0x16>
 8017256:	2302      	movs	r3, #2
 8017258:	e027      	b.n	80172aa <HAL_UARTEx_DisableFifoMode+0x66>
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	2201      	movs	r2, #1
 801725e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2224      	movs	r2, #36	; 0x24
 8017266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	681a      	ldr	r2, [r3, #0]
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	f022 0201 	bic.w	r2, r2, #1
 8017280:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017288:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2200      	movs	r2, #0
 801728e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	68fa      	ldr	r2, [r7, #12]
 8017296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2220      	movs	r2, #32
 801729c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	2200      	movs	r2, #0
 80172a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80172a8:	2300      	movs	r3, #0
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	3714      	adds	r7, #20
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr

080172b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b084      	sub	sp, #16
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d101      	bne.n	80172ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80172ca:	2302      	movs	r3, #2
 80172cc:	e02d      	b.n	801732a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2201      	movs	r2, #1
 80172d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2224      	movs	r2, #36	; 0x24
 80172da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	681a      	ldr	r2, [r3, #0]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f022 0201 	bic.w	r2, r2, #1
 80172f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	689b      	ldr	r3, [r3, #8]
 80172fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	683a      	ldr	r2, [r7, #0]
 8017306:	430a      	orrs	r2, r1
 8017308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801730a:	6878      	ldr	r0, [r7, #4]
 801730c:	f000 f850 	bl	80173b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	68fa      	ldr	r2, [r7, #12]
 8017316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2220      	movs	r2, #32
 801731c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2200      	movs	r2, #0
 8017324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017328:	2300      	movs	r3, #0
}
 801732a:	4618      	mov	r0, r3
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}

08017332 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017332:	b580      	push	{r7, lr}
 8017334:	b084      	sub	sp, #16
 8017336:	af00      	add	r7, sp, #0
 8017338:	6078      	str	r0, [r7, #4]
 801733a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017342:	2b01      	cmp	r3, #1
 8017344:	d101      	bne.n	801734a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017346:	2302      	movs	r3, #2
 8017348:	e02d      	b.n	80173a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	2201      	movs	r2, #1
 801734e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2224      	movs	r2, #36	; 0x24
 8017356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f022 0201 	bic.w	r2, r2, #1
 8017370:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	683a      	ldr	r2, [r7, #0]
 8017382:	430a      	orrs	r2, r1
 8017384:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f000 f812 	bl	80173b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	68fa      	ldr	r2, [r7, #12]
 8017392:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	2220      	movs	r2, #32
 8017398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2200      	movs	r2, #0
 80173a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80173a4:	2300      	movs	r3, #0
}
 80173a6:	4618      	mov	r0, r3
 80173a8:	3710      	adds	r7, #16
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}
	...

080173b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80173b0:	b480      	push	{r7}
 80173b2:	b085      	sub	sp, #20
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d108      	bne.n	80173d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2201      	movs	r2, #1
 80173c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	2201      	movs	r2, #1
 80173cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80173d0:	e031      	b.n	8017436 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80173d2:	2310      	movs	r3, #16
 80173d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80173d6:	2310      	movs	r3, #16
 80173d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	689b      	ldr	r3, [r3, #8]
 80173e0:	0e5b      	lsrs	r3, r3, #25
 80173e2:	b2db      	uxtb	r3, r3
 80173e4:	f003 0307 	and.w	r3, r3, #7
 80173e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	689b      	ldr	r3, [r3, #8]
 80173f0:	0f5b      	lsrs	r3, r3, #29
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	f003 0307 	and.w	r3, r3, #7
 80173f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80173fa:	7bbb      	ldrb	r3, [r7, #14]
 80173fc:	7b3a      	ldrb	r2, [r7, #12]
 80173fe:	4911      	ldr	r1, [pc, #68]	; (8017444 <UARTEx_SetNbDataToProcess+0x94>)
 8017400:	5c8a      	ldrb	r2, [r1, r2]
 8017402:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017406:	7b3a      	ldrb	r2, [r7, #12]
 8017408:	490f      	ldr	r1, [pc, #60]	; (8017448 <UARTEx_SetNbDataToProcess+0x98>)
 801740a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801740c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017410:	b29a      	uxth	r2, r3
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017418:	7bfb      	ldrb	r3, [r7, #15]
 801741a:	7b7a      	ldrb	r2, [r7, #13]
 801741c:	4909      	ldr	r1, [pc, #36]	; (8017444 <UARTEx_SetNbDataToProcess+0x94>)
 801741e:	5c8a      	ldrb	r2, [r1, r2]
 8017420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017424:	7b7a      	ldrb	r2, [r7, #13]
 8017426:	4908      	ldr	r1, [pc, #32]	; (8017448 <UARTEx_SetNbDataToProcess+0x98>)
 8017428:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801742a:	fb93 f3f2 	sdiv	r3, r3, r2
 801742e:	b29a      	uxth	r2, r3
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8017436:	bf00      	nop
 8017438:	3714      	adds	r7, #20
 801743a:	46bd      	mov	sp, r7
 801743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017440:	4770      	bx	lr
 8017442:	bf00      	nop
 8017444:	0801b9e4 	.word	0x0801b9e4
 8017448:	0801b9ec 	.word	0x0801b9ec

0801744c <__NVIC_SetPriority>:
{
 801744c:	b480      	push	{r7}
 801744e:	b083      	sub	sp, #12
 8017450:	af00      	add	r7, sp, #0
 8017452:	4603      	mov	r3, r0
 8017454:	6039      	str	r1, [r7, #0]
 8017456:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801745c:	2b00      	cmp	r3, #0
 801745e:	db0a      	blt.n	8017476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	b2da      	uxtb	r2, r3
 8017464:	490c      	ldr	r1, [pc, #48]	; (8017498 <__NVIC_SetPriority+0x4c>)
 8017466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801746a:	0112      	lsls	r2, r2, #4
 801746c:	b2d2      	uxtb	r2, r2
 801746e:	440b      	add	r3, r1
 8017470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017474:	e00a      	b.n	801748c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	b2da      	uxtb	r2, r3
 801747a:	4908      	ldr	r1, [pc, #32]	; (801749c <__NVIC_SetPriority+0x50>)
 801747c:	88fb      	ldrh	r3, [r7, #6]
 801747e:	f003 030f 	and.w	r3, r3, #15
 8017482:	3b04      	subs	r3, #4
 8017484:	0112      	lsls	r2, r2, #4
 8017486:	b2d2      	uxtb	r2, r2
 8017488:	440b      	add	r3, r1
 801748a:	761a      	strb	r2, [r3, #24]
}
 801748c:	bf00      	nop
 801748e:	370c      	adds	r7, #12
 8017490:	46bd      	mov	sp, r7
 8017492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017496:	4770      	bx	lr
 8017498:	e000e100 	.word	0xe000e100
 801749c:	e000ed00 	.word	0xe000ed00

080174a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80174a0:	b580      	push	{r7, lr}
 80174a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80174a4:	4b05      	ldr	r3, [pc, #20]	; (80174bc <SysTick_Handler+0x1c>)
 80174a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80174a8:	f002 faa0 	bl	80199ec <xTaskGetSchedulerState>
 80174ac:	4603      	mov	r3, r0
 80174ae:	2b01      	cmp	r3, #1
 80174b0:	d001      	beq.n	80174b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80174b2:	f003 f8c1 	bl	801a638 <xPortSysTickHandler>
  }
}
 80174b6:	bf00      	nop
 80174b8:	bd80      	pop	{r7, pc}
 80174ba:	bf00      	nop
 80174bc:	e000e010 	.word	0xe000e010

080174c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80174c0:	b580      	push	{r7, lr}
 80174c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80174c4:	2100      	movs	r1, #0
 80174c6:	f06f 0004 	mvn.w	r0, #4
 80174ca:	f7ff ffbf 	bl	801744c <__NVIC_SetPriority>
#endif
}
 80174ce:	bf00      	nop
 80174d0:	bd80      	pop	{r7, pc}
	...

080174d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80174d4:	b480      	push	{r7}
 80174d6:	b083      	sub	sp, #12
 80174d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174da:	f3ef 8305 	mrs	r3, IPSR
 80174de:	603b      	str	r3, [r7, #0]
  return(result);
 80174e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d003      	beq.n	80174ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80174e6:	f06f 0305 	mvn.w	r3, #5
 80174ea:	607b      	str	r3, [r7, #4]
 80174ec:	e00c      	b.n	8017508 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80174ee:	4b0a      	ldr	r3, [pc, #40]	; (8017518 <osKernelInitialize+0x44>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d105      	bne.n	8017502 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80174f6:	4b08      	ldr	r3, [pc, #32]	; (8017518 <osKernelInitialize+0x44>)
 80174f8:	2201      	movs	r2, #1
 80174fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80174fc:	2300      	movs	r3, #0
 80174fe:	607b      	str	r3, [r7, #4]
 8017500:	e002      	b.n	8017508 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8017502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017506:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017508:	687b      	ldr	r3, [r7, #4]
}
 801750a:	4618      	mov	r0, r3
 801750c:	370c      	adds	r7, #12
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	24002088 	.word	0x24002088

0801751c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017522:	f3ef 8305 	mrs	r3, IPSR
 8017526:	603b      	str	r3, [r7, #0]
  return(result);
 8017528:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801752a:	2b00      	cmp	r3, #0
 801752c:	d003      	beq.n	8017536 <osKernelStart+0x1a>
    stat = osErrorISR;
 801752e:	f06f 0305 	mvn.w	r3, #5
 8017532:	607b      	str	r3, [r7, #4]
 8017534:	e010      	b.n	8017558 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8017536:	4b0b      	ldr	r3, [pc, #44]	; (8017564 <osKernelStart+0x48>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2b01      	cmp	r3, #1
 801753c:	d109      	bne.n	8017552 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801753e:	f7ff ffbf 	bl	80174c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8017542:	4b08      	ldr	r3, [pc, #32]	; (8017564 <osKernelStart+0x48>)
 8017544:	2202      	movs	r2, #2
 8017546:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017548:	f001 fd54 	bl	8018ff4 <vTaskStartScheduler>
      stat = osOK;
 801754c:	2300      	movs	r3, #0
 801754e:	607b      	str	r3, [r7, #4]
 8017550:	e002      	b.n	8017558 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8017552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017558:	687b      	ldr	r3, [r7, #4]
}
 801755a:	4618      	mov	r0, r3
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	24002088 	.word	0x24002088

08017568 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017568:	b580      	push	{r7, lr}
 801756a:	b08e      	sub	sp, #56	; 0x38
 801756c:	af04      	add	r7, sp, #16
 801756e:	60f8      	str	r0, [r7, #12]
 8017570:	60b9      	str	r1, [r7, #8]
 8017572:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017574:	2300      	movs	r3, #0
 8017576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017578:	f3ef 8305 	mrs	r3, IPSR
 801757c:	617b      	str	r3, [r7, #20]
  return(result);
 801757e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8017580:	2b00      	cmp	r3, #0
 8017582:	d17e      	bne.n	8017682 <osThreadNew+0x11a>
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d07b      	beq.n	8017682 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801758a:	2380      	movs	r3, #128	; 0x80
 801758c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801758e:	2318      	movs	r3, #24
 8017590:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8017592:	2300      	movs	r3, #0
 8017594:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801759a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d045      	beq.n	801762e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d002      	beq.n	80175b0 <osThreadNew+0x48>
        name = attr->name;
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	699b      	ldr	r3, [r3, #24]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d002      	beq.n	80175be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	699b      	ldr	r3, [r3, #24]
 80175bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80175be:	69fb      	ldr	r3, [r7, #28]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d008      	beq.n	80175d6 <osThreadNew+0x6e>
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	2b38      	cmp	r3, #56	; 0x38
 80175c8:	d805      	bhi.n	80175d6 <osThreadNew+0x6e>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	f003 0301 	and.w	r3, r3, #1
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d001      	beq.n	80175da <osThreadNew+0x72>
        return (NULL);
 80175d6:	2300      	movs	r3, #0
 80175d8:	e054      	b.n	8017684 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	695b      	ldr	r3, [r3, #20]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d003      	beq.n	80175ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	695b      	ldr	r3, [r3, #20]
 80175e6:	089b      	lsrs	r3, r3, #2
 80175e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	689b      	ldr	r3, [r3, #8]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d00e      	beq.n	8017610 <osThreadNew+0xa8>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	68db      	ldr	r3, [r3, #12]
 80175f6:	2b5b      	cmp	r3, #91	; 0x5b
 80175f8:	d90a      	bls.n	8017610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d006      	beq.n	8017610 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	695b      	ldr	r3, [r3, #20]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d002      	beq.n	8017610 <osThreadNew+0xa8>
        mem = 1;
 801760a:	2301      	movs	r3, #1
 801760c:	61bb      	str	r3, [r7, #24]
 801760e:	e010      	b.n	8017632 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	689b      	ldr	r3, [r3, #8]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d10c      	bne.n	8017632 <osThreadNew+0xca>
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	68db      	ldr	r3, [r3, #12]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d108      	bne.n	8017632 <osThreadNew+0xca>
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	691b      	ldr	r3, [r3, #16]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d104      	bne.n	8017632 <osThreadNew+0xca>
          mem = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	61bb      	str	r3, [r7, #24]
 801762c:	e001      	b.n	8017632 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801762e:	2300      	movs	r3, #0
 8017630:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8017632:	69bb      	ldr	r3, [r7, #24]
 8017634:	2b01      	cmp	r3, #1
 8017636:	d110      	bne.n	801765a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801763c:	687a      	ldr	r2, [r7, #4]
 801763e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8017640:	9202      	str	r2, [sp, #8]
 8017642:	9301      	str	r3, [sp, #4]
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	9300      	str	r3, [sp, #0]
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	6a3a      	ldr	r2, [r7, #32]
 801764c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801764e:	68f8      	ldr	r0, [r7, #12]
 8017650:	f001 f9f4 	bl	8018a3c <xTaskCreateStatic>
 8017654:	4603      	mov	r3, r0
 8017656:	613b      	str	r3, [r7, #16]
 8017658:	e013      	b.n	8017682 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801765a:	69bb      	ldr	r3, [r7, #24]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d110      	bne.n	8017682 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8017660:	6a3b      	ldr	r3, [r7, #32]
 8017662:	b29a      	uxth	r2, r3
 8017664:	f107 0310 	add.w	r3, r7, #16
 8017668:	9301      	str	r3, [sp, #4]
 801766a:	69fb      	ldr	r3, [r7, #28]
 801766c:	9300      	str	r3, [sp, #0]
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017672:	68f8      	ldr	r0, [r7, #12]
 8017674:	f001 fa3f 	bl	8018af6 <xTaskCreate>
 8017678:	4603      	mov	r3, r0
 801767a:	2b01      	cmp	r3, #1
 801767c:	d001      	beq.n	8017682 <osThreadNew+0x11a>
            hTask = NULL;
 801767e:	2300      	movs	r3, #0
 8017680:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8017682:	693b      	ldr	r3, [r7, #16]
}
 8017684:	4618      	mov	r0, r3
 8017686:	3728      	adds	r7, #40	; 0x28
 8017688:	46bd      	mov	sp, r7
 801768a:	bd80      	pop	{r7, pc}

0801768c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801768c:	b480      	push	{r7}
 801768e:	b083      	sub	sp, #12
 8017690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017692:	f3ef 8305 	mrs	r3, IPSR
 8017696:	603b      	str	r3, [r7, #0]
  return(result);
 8017698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801769a:	2b00      	cmp	r3, #0
 801769c:	d003      	beq.n	80176a6 <osThreadYield+0x1a>
    stat = osErrorISR;
 801769e:	f06f 0305 	mvn.w	r3, #5
 80176a2:	607b      	str	r3, [r7, #4]
 80176a4:	e009      	b.n	80176ba <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80176a6:	2300      	movs	r3, #0
 80176a8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80176aa:	4b07      	ldr	r3, [pc, #28]	; (80176c8 <osThreadYield+0x3c>)
 80176ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176b0:	601a      	str	r2, [r3, #0]
 80176b2:	f3bf 8f4f 	dsb	sy
 80176b6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80176ba:	687b      	ldr	r3, [r7, #4]
}
 80176bc:	4618      	mov	r0, r3
 80176be:	370c      	adds	r7, #12
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr
 80176c8:	e000ed04 	.word	0xe000ed04

080176cc <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b086      	sub	sp, #24
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176d8:	f3ef 8305 	mrs	r3, IPSR
 80176dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80176de:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d003      	beq.n	80176ec <osThreadSuspend+0x20>
    stat = osErrorISR;
 80176e4:	f06f 0305 	mvn.w	r3, #5
 80176e8:	617b      	str	r3, [r7, #20]
 80176ea:	e00b      	b.n	8017704 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d103      	bne.n	80176fa <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80176f2:	f06f 0303 	mvn.w	r3, #3
 80176f6:	617b      	str	r3, [r7, #20]
 80176f8:	e004      	b.n	8017704 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80176fa:	2300      	movs	r3, #0
 80176fc:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80176fe:	6938      	ldr	r0, [r7, #16]
 8017700:	f001 fb72 	bl	8018de8 <vTaskSuspend>
  }

  return (stat);
 8017704:	697b      	ldr	r3, [r7, #20]
}
 8017706:	4618      	mov	r0, r3
 8017708:	3718      	adds	r7, #24
 801770a:	46bd      	mov	sp, r7
 801770c:	bd80      	pop	{r7, pc}

0801770e <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 801770e:	b580      	push	{r7, lr}
 8017710:	b086      	sub	sp, #24
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801771a:	f3ef 8305 	mrs	r3, IPSR
 801771e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017720:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017722:	2b00      	cmp	r3, #0
 8017724:	d003      	beq.n	801772e <osThreadResume+0x20>
    stat = osErrorISR;
 8017726:	f06f 0305 	mvn.w	r3, #5
 801772a:	617b      	str	r3, [r7, #20]
 801772c:	e00b      	b.n	8017746 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 801772e:	693b      	ldr	r3, [r7, #16]
 8017730:	2b00      	cmp	r3, #0
 8017732:	d103      	bne.n	801773c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8017734:	f06f 0303 	mvn.w	r3, #3
 8017738:	617b      	str	r3, [r7, #20]
 801773a:	e004      	b.n	8017746 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 801773c:	2300      	movs	r3, #0
 801773e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8017740:	6938      	ldr	r0, [r7, #16]
 8017742:	f001 fbf9 	bl	8018f38 <vTaskResume>
  }

  return (stat);
 8017746:	697b      	ldr	r3, [r7, #20]
}
 8017748:	4618      	mov	r0, r3
 801774a:	3718      	adds	r7, #24
 801774c:	46bd      	mov	sp, r7
 801774e:	bd80      	pop	{r7, pc}

08017750 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017750:	b580      	push	{r7, lr}
 8017752:	b084      	sub	sp, #16
 8017754:	af00      	add	r7, sp, #0
 8017756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017758:	f3ef 8305 	mrs	r3, IPSR
 801775c:	60bb      	str	r3, [r7, #8]
  return(result);
 801775e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017760:	2b00      	cmp	r3, #0
 8017762:	d003      	beq.n	801776c <osDelay+0x1c>
    stat = osErrorISR;
 8017764:	f06f 0305 	mvn.w	r3, #5
 8017768:	60fb      	str	r3, [r7, #12]
 801776a:	e007      	b.n	801777c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801776c:	2300      	movs	r3, #0
 801776e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d002      	beq.n	801777c <osDelay+0x2c>
      vTaskDelay(ticks);
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f001 fb02 	bl	8018d80 <vTaskDelay>
    }
  }

  return (stat);
 801777c:	68fb      	ldr	r3, [r7, #12]
}
 801777e:	4618      	mov	r0, r3
 8017780:	3710      	adds	r7, #16
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}

08017786 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8017786:	b580      	push	{r7, lr}
 8017788:	b086      	sub	sp, #24
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801778e:	2300      	movs	r3, #0
 8017790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017792:	f3ef 8305 	mrs	r3, IPSR
 8017796:	60fb      	str	r3, [r7, #12]
  return(result);
 8017798:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801779a:	2b00      	cmp	r3, #0
 801779c:	d12d      	bne.n	80177fa <osEventFlagsNew+0x74>
    mem = -1;
 801779e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177a2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d015      	beq.n	80177d6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	689b      	ldr	r3, [r3, #8]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d006      	beq.n	80177c0 <osEventFlagsNew+0x3a>
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	68db      	ldr	r3, [r3, #12]
 80177b6:	2b1f      	cmp	r3, #31
 80177b8:	d902      	bls.n	80177c0 <osEventFlagsNew+0x3a>
        mem = 1;
 80177ba:	2301      	movs	r3, #1
 80177bc:	613b      	str	r3, [r7, #16]
 80177be:	e00c      	b.n	80177da <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	689b      	ldr	r3, [r3, #8]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d108      	bne.n	80177da <osEventFlagsNew+0x54>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d104      	bne.n	80177da <osEventFlagsNew+0x54>
          mem = 0;
 80177d0:	2300      	movs	r3, #0
 80177d2:	613b      	str	r3, [r7, #16]
 80177d4:	e001      	b.n	80177da <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80177d6:	2300      	movs	r3, #0
 80177d8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80177da:	693b      	ldr	r3, [r7, #16]
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d106      	bne.n	80177ee <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	689b      	ldr	r3, [r3, #8]
 80177e4:	4618      	mov	r0, r3
 80177e6:	f000 f91d 	bl	8017a24 <xEventGroupCreateStatic>
 80177ea:	6178      	str	r0, [r7, #20]
 80177ec:	e005      	b.n	80177fa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d102      	bne.n	80177fa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80177f4:	f000 f94d 	bl	8017a92 <xEventGroupCreate>
 80177f8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80177fa:	697b      	ldr	r3, [r7, #20]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3718      	adds	r7, #24
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8017804:	b580      	push	{r7, lr}
 8017806:	b086      	sub	sp, #24
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d004      	beq.n	8017822 <osEventFlagsSet+0x1e>
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801781e:	2b00      	cmp	r3, #0
 8017820:	d003      	beq.n	801782a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8017822:	f06f 0303 	mvn.w	r3, #3
 8017826:	617b      	str	r3, [r7, #20]
 8017828:	e028      	b.n	801787c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801782a:	f3ef 8305 	mrs	r3, IPSR
 801782e:	60fb      	str	r3, [r7, #12]
  return(result);
 8017830:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017832:	2b00      	cmp	r3, #0
 8017834:	d01d      	beq.n	8017872 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8017836:	2300      	movs	r3, #0
 8017838:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801783a:	f107 0308 	add.w	r3, r7, #8
 801783e:	461a      	mov	r2, r3
 8017840:	6839      	ldr	r1, [r7, #0]
 8017842:	6938      	ldr	r0, [r7, #16]
 8017844:	f000 fb46 	bl	8017ed4 <xEventGroupSetBitsFromISR>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d103      	bne.n	8017856 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801784e:	f06f 0302 	mvn.w	r3, #2
 8017852:	617b      	str	r3, [r7, #20]
 8017854:	e012      	b.n	801787c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8017856:	683b      	ldr	r3, [r7, #0]
 8017858:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801785a:	68bb      	ldr	r3, [r7, #8]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d00d      	beq.n	801787c <osEventFlagsSet+0x78>
 8017860:	4b09      	ldr	r3, [pc, #36]	; (8017888 <osEventFlagsSet+0x84>)
 8017862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017866:	601a      	str	r2, [r3, #0]
 8017868:	f3bf 8f4f 	dsb	sy
 801786c:	f3bf 8f6f 	isb	sy
 8017870:	e004      	b.n	801787c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8017872:	6839      	ldr	r1, [r7, #0]
 8017874:	6938      	ldr	r0, [r7, #16]
 8017876:	f000 fa65 	bl	8017d44 <xEventGroupSetBits>
 801787a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801787c:	697b      	ldr	r3, [r7, #20]
}
 801787e:	4618      	mov	r0, r3
 8017880:	3718      	adds	r7, #24
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}
 8017886:	bf00      	nop
 8017888:	e000ed04 	.word	0xe000ed04

0801788c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801788c:	b580      	push	{r7, lr}
 801788e:	b086      	sub	sp, #24
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
 8017894:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801789a:	693b      	ldr	r3, [r7, #16]
 801789c:	2b00      	cmp	r3, #0
 801789e:	d004      	beq.n	80178aa <osEventFlagsClear+0x1e>
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d003      	beq.n	80178b2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80178aa:	f06f 0303 	mvn.w	r3, #3
 80178ae:	617b      	str	r3, [r7, #20]
 80178b0:	e019      	b.n	80178e6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178b2:	f3ef 8305 	mrs	r3, IPSR
 80178b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80178b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d00e      	beq.n	80178dc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80178be:	6938      	ldr	r0, [r7, #16]
 80178c0:	f000 fa1c 	bl	8017cfc <xEventGroupGetBitsFromISR>
 80178c4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80178c6:	6839      	ldr	r1, [r7, #0]
 80178c8:	6938      	ldr	r0, [r7, #16]
 80178ca:	f000 fa03 	bl	8017cd4 <xEventGroupClearBitsFromISR>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d108      	bne.n	80178e6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80178d4:	f06f 0302 	mvn.w	r3, #2
 80178d8:	617b      	str	r3, [r7, #20]
 80178da:	e004      	b.n	80178e6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80178dc:	6839      	ldr	r1, [r7, #0]
 80178de:	6938      	ldr	r0, [r7, #16]
 80178e0:	f000 f9c0 	bl	8017c64 <xEventGroupClearBits>
 80178e4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80178e6:	697b      	ldr	r3, [r7, #20]
}
 80178e8:	4618      	mov	r0, r3
 80178ea:	3718      	adds	r7, #24
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}

080178f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b08c      	sub	sp, #48	; 0x30
 80178f4:	af02      	add	r7, sp, #8
 80178f6:	60f8      	str	r0, [r7, #12]
 80178f8:	60b9      	str	r1, [r7, #8]
 80178fa:	607a      	str	r2, [r7, #4]
 80178fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8017902:	69bb      	ldr	r3, [r7, #24]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d004      	beq.n	8017912 <osEventFlagsWait+0x22>
 8017908:	68bb      	ldr	r3, [r7, #8]
 801790a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801790e:	2b00      	cmp	r3, #0
 8017910:	d003      	beq.n	801791a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8017912:	f06f 0303 	mvn.w	r3, #3
 8017916:	61fb      	str	r3, [r7, #28]
 8017918:	e04b      	b.n	80179b2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801791a:	f3ef 8305 	mrs	r3, IPSR
 801791e:	617b      	str	r3, [r7, #20]
  return(result);
 8017920:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8017922:	2b00      	cmp	r3, #0
 8017924:	d003      	beq.n	801792e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8017926:	f06f 0305 	mvn.w	r3, #5
 801792a:	61fb      	str	r3, [r7, #28]
 801792c:	e041      	b.n	80179b2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f003 0301 	and.w	r3, r3, #1
 8017934:	2b00      	cmp	r3, #0
 8017936:	d002      	beq.n	801793e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8017938:	2301      	movs	r3, #1
 801793a:	627b      	str	r3, [r7, #36]	; 0x24
 801793c:	e001      	b.n	8017942 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801793e:	2300      	movs	r3, #0
 8017940:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f003 0302 	and.w	r3, r3, #2
 8017948:	2b00      	cmp	r3, #0
 801794a:	d002      	beq.n	8017952 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801794c:	2300      	movs	r3, #0
 801794e:	623b      	str	r3, [r7, #32]
 8017950:	e001      	b.n	8017956 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8017952:	2301      	movs	r3, #1
 8017954:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8017956:	683b      	ldr	r3, [r7, #0]
 8017958:	9300      	str	r3, [sp, #0]
 801795a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801795c:	6a3a      	ldr	r2, [r7, #32]
 801795e:	68b9      	ldr	r1, [r7, #8]
 8017960:	69b8      	ldr	r0, [r7, #24]
 8017962:	f000 f8b1 	bl	8017ac8 <xEventGroupWaitBits>
 8017966:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f003 0301 	and.w	r3, r3, #1
 801796e:	2b00      	cmp	r3, #0
 8017970:	d010      	beq.n	8017994 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8017972:	68ba      	ldr	r2, [r7, #8]
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	4013      	ands	r3, r2
 8017978:	68ba      	ldr	r2, [r7, #8]
 801797a:	429a      	cmp	r2, r3
 801797c:	d019      	beq.n	80179b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801797e:	683b      	ldr	r3, [r7, #0]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d003      	beq.n	801798c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8017984:	f06f 0301 	mvn.w	r3, #1
 8017988:	61fb      	str	r3, [r7, #28]
 801798a:	e012      	b.n	80179b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801798c:	f06f 0302 	mvn.w	r3, #2
 8017990:	61fb      	str	r3, [r7, #28]
 8017992:	e00e      	b.n	80179b2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8017994:	68ba      	ldr	r2, [r7, #8]
 8017996:	69fb      	ldr	r3, [r7, #28]
 8017998:	4013      	ands	r3, r2
 801799a:	2b00      	cmp	r3, #0
 801799c:	d109      	bne.n	80179b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d003      	beq.n	80179ac <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80179a4:	f06f 0301 	mvn.w	r3, #1
 80179a8:	61fb      	str	r3, [r7, #28]
 80179aa:	e002      	b.n	80179b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80179ac:	f06f 0302 	mvn.w	r3, #2
 80179b0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80179b2:	69fb      	ldr	r3, [r7, #28]
}
 80179b4:	4618      	mov	r0, r3
 80179b6:	3728      	adds	r7, #40	; 0x28
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80179bc:	b480      	push	{r7}
 80179be:	b085      	sub	sp, #20
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	4a07      	ldr	r2, [pc, #28]	; (80179e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80179cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	4a06      	ldr	r2, [pc, #24]	; (80179ec <vApplicationGetIdleTaskMemory+0x30>)
 80179d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2280      	movs	r2, #128	; 0x80
 80179d8:	601a      	str	r2, [r3, #0]
}
 80179da:	bf00      	nop
 80179dc:	3714      	adds	r7, #20
 80179de:	46bd      	mov	sp, r7
 80179e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e4:	4770      	bx	lr
 80179e6:	bf00      	nop
 80179e8:	2400208c 	.word	0x2400208c
 80179ec:	240020e8 	.word	0x240020e8

080179f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80179f0:	b480      	push	{r7}
 80179f2:	b085      	sub	sp, #20
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	60f8      	str	r0, [r7, #12]
 80179f8:	60b9      	str	r1, [r7, #8]
 80179fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	4a07      	ldr	r2, [pc, #28]	; (8017a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8017a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	4a06      	ldr	r2, [pc, #24]	; (8017a20 <vApplicationGetTimerTaskMemory+0x30>)
 8017a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017a0e:	601a      	str	r2, [r3, #0]
}
 8017a10:	bf00      	nop
 8017a12:	3714      	adds	r7, #20
 8017a14:	46bd      	mov	sp, r7
 8017a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1a:	4770      	bx	lr
 8017a1c:	240022e8 	.word	0x240022e8
 8017a20:	24002344 	.word	0x24002344

08017a24 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b086      	sub	sp, #24
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d10a      	bne.n	8017a48 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8017a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a36:	f383 8811 	msr	BASEPRI, r3
 8017a3a:	f3bf 8f6f 	isb	sy
 8017a3e:	f3bf 8f4f 	dsb	sy
 8017a42:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8017a44:	bf00      	nop
 8017a46:	e7fe      	b.n	8017a46 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8017a48:	2320      	movs	r3, #32
 8017a4a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	2b20      	cmp	r3, #32
 8017a50:	d00a      	beq.n	8017a68 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8017a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a56:	f383 8811 	msr	BASEPRI, r3
 8017a5a:	f3bf 8f6f 	isb	sy
 8017a5e:	f3bf 8f4f 	dsb	sy
 8017a62:	60fb      	str	r3, [r7, #12]
}
 8017a64:	bf00      	nop
 8017a66:	e7fe      	b.n	8017a66 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d00a      	beq.n	8017a88 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	2200      	movs	r2, #0
 8017a76:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	3304      	adds	r3, #4
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f000 fa3d 	bl	8017efc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	2201      	movs	r2, #1
 8017a86:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017a88:	697b      	ldr	r3, [r7, #20]
	}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	3718      	adds	r7, #24
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}

08017a92 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8017a92:	b580      	push	{r7, lr}
 8017a94:	b082      	sub	sp, #8
 8017a96:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017a98:	2020      	movs	r0, #32
 8017a9a:	f002 fe5d 	bl	801a758 <pvPortMalloc>
 8017a9e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d00a      	beq.n	8017abc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	3304      	adds	r3, #4
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f000 fa23 	bl	8017efc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2200      	movs	r2, #0
 8017aba:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017abc:	687b      	ldr	r3, [r7, #4]
	}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
	...

08017ac8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b090      	sub	sp, #64	; 0x40
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	60f8      	str	r0, [r7, #12]
 8017ad0:	60b9      	str	r1, [r7, #8]
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017ada:	2300      	movs	r3, #0
 8017adc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8017ade:	2300      	movs	r3, #0
 8017ae0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d10a      	bne.n	8017afe <xEventGroupWaitBits+0x36>
	__asm volatile
 8017ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aec:	f383 8811 	msr	BASEPRI, r3
 8017af0:	f3bf 8f6f 	isb	sy
 8017af4:	f3bf 8f4f 	dsb	sy
 8017af8:	623b      	str	r3, [r7, #32]
}
 8017afa:	bf00      	nop
 8017afc:	e7fe      	b.n	8017afc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017afe:	68bb      	ldr	r3, [r7, #8]
 8017b00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d00a      	beq.n	8017b1e <xEventGroupWaitBits+0x56>
	__asm volatile
 8017b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b0c:	f383 8811 	msr	BASEPRI, r3
 8017b10:	f3bf 8f6f 	isb	sy
 8017b14:	f3bf 8f4f 	dsb	sy
 8017b18:	61fb      	str	r3, [r7, #28]
}
 8017b1a:	bf00      	nop
 8017b1c:	e7fe      	b.n	8017b1c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d10a      	bne.n	8017b3a <xEventGroupWaitBits+0x72>
	__asm volatile
 8017b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b28:	f383 8811 	msr	BASEPRI, r3
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f3bf 8f4f 	dsb	sy
 8017b34:	61bb      	str	r3, [r7, #24]
}
 8017b36:	bf00      	nop
 8017b38:	e7fe      	b.n	8017b38 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017b3a:	f001 ff57 	bl	80199ec <xTaskGetSchedulerState>
 8017b3e:	4603      	mov	r3, r0
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d102      	bne.n	8017b4a <xEventGroupWaitBits+0x82>
 8017b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d101      	bne.n	8017b4e <xEventGroupWaitBits+0x86>
 8017b4a:	2301      	movs	r3, #1
 8017b4c:	e000      	b.n	8017b50 <xEventGroupWaitBits+0x88>
 8017b4e:	2300      	movs	r3, #0
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d10a      	bne.n	8017b6a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b58:	f383 8811 	msr	BASEPRI, r3
 8017b5c:	f3bf 8f6f 	isb	sy
 8017b60:	f3bf 8f4f 	dsb	sy
 8017b64:	617b      	str	r3, [r7, #20]
}
 8017b66:	bf00      	nop
 8017b68:	e7fe      	b.n	8017b68 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017b6a:	f001 faa9 	bl	80190c0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8017b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017b74:	683a      	ldr	r2, [r7, #0]
 8017b76:	68b9      	ldr	r1, [r7, #8]
 8017b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b7a:	f000 f988 	bl	8017e8e <prvTestWaitCondition>
 8017b7e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8017b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00e      	beq.n	8017ba4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b88:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d028      	beq.n	8017be6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b96:	681a      	ldr	r2, [r3, #0]
 8017b98:	68bb      	ldr	r3, [r7, #8]
 8017b9a:	43db      	mvns	r3, r3
 8017b9c:	401a      	ands	r2, r3
 8017b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba0:	601a      	str	r2, [r3, #0]
 8017ba2:	e020      	b.n	8017be6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d104      	bne.n	8017bb4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8017bae:	2301      	movs	r3, #1
 8017bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8017bb2:	e018      	b.n	8017be6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d003      	beq.n	8017bc2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017bc0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d003      	beq.n	8017bd0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017bce:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8017bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bd2:	1d18      	adds	r0, r3, #4
 8017bd4:	68ba      	ldr	r2, [r7, #8]
 8017bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd8:	4313      	orrs	r3, r2
 8017bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bdc:	4619      	mov	r1, r3
 8017bde:	f001 fc7d 	bl	80194dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8017be2:	2300      	movs	r3, #0
 8017be4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017be6:	f001 fa79 	bl	80190dc <xTaskResumeAll>
 8017bea:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d031      	beq.n	8017c56 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8017bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d107      	bne.n	8017c08 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8017bf8:	4b19      	ldr	r3, [pc, #100]	; (8017c60 <xEventGroupWaitBits+0x198>)
 8017bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bfe:	601a      	str	r2, [r3, #0]
 8017c00:	f3bf 8f4f 	dsb	sy
 8017c04:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8017c08:	f001 ff7c 	bl	8019b04 <uxTaskResetEventItemValue>
 8017c0c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8017c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d11a      	bne.n	8017c4e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8017c18:	f002 fc7c 	bl	801a514 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8017c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8017c22:	683a      	ldr	r2, [r7, #0]
 8017c24:	68b9      	ldr	r1, [r7, #8]
 8017c26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c28:	f000 f931 	bl	8017e8e <prvTestWaitCondition>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d009      	beq.n	8017c46 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d006      	beq.n	8017c46 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c3a:	681a      	ldr	r2, [r3, #0]
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	43db      	mvns	r3, r3
 8017c40:	401a      	ands	r2, r3
 8017c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c44:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8017c46:	2301      	movs	r3, #1
 8017c48:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8017c4a:	f002 fc93 	bl	801a574 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017c54:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017c58:	4618      	mov	r0, r3
 8017c5a:	3740      	adds	r7, #64	; 0x40
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	bd80      	pop	{r7, pc}
 8017c60:	e000ed04 	.word	0xe000ed04

08017c64 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b086      	sub	sp, #24
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
 8017c6c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d10a      	bne.n	8017c8e <xEventGroupClearBits+0x2a>
	__asm volatile
 8017c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c7c:	f383 8811 	msr	BASEPRI, r3
 8017c80:	f3bf 8f6f 	isb	sy
 8017c84:	f3bf 8f4f 	dsb	sy
 8017c88:	60fb      	str	r3, [r7, #12]
}
 8017c8a:	bf00      	nop
 8017c8c:	e7fe      	b.n	8017c8c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d00a      	beq.n	8017cae <xEventGroupClearBits+0x4a>
	__asm volatile
 8017c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c9c:	f383 8811 	msr	BASEPRI, r3
 8017ca0:	f3bf 8f6f 	isb	sy
 8017ca4:	f3bf 8f4f 	dsb	sy
 8017ca8:	60bb      	str	r3, [r7, #8]
}
 8017caa:	bf00      	nop
 8017cac:	e7fe      	b.n	8017cac <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8017cae:	f002 fc31 	bl	801a514 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017cb8:	697b      	ldr	r3, [r7, #20]
 8017cba:	681a      	ldr	r2, [r3, #0]
 8017cbc:	683b      	ldr	r3, [r7, #0]
 8017cbe:	43db      	mvns	r3, r3
 8017cc0:	401a      	ands	r2, r3
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017cc6:	f002 fc55 	bl	801a574 <vPortExitCritical>

	return uxReturn;
 8017cca:	693b      	ldr	r3, [r7, #16]
}
 8017ccc:	4618      	mov	r0, r3
 8017cce:	3718      	adds	r7, #24
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	bd80      	pop	{r7, pc}

08017cd4 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b084      	sub	sp, #16
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017cde:	2300      	movs	r3, #0
 8017ce0:	683a      	ldr	r2, [r7, #0]
 8017ce2:	6879      	ldr	r1, [r7, #4]
 8017ce4:	4804      	ldr	r0, [pc, #16]	; (8017cf8 <xEventGroupClearBitsFromISR+0x24>)
 8017ce6:	f002 fac7 	bl	801a278 <xTimerPendFunctionCallFromISR>
 8017cea:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017cec:	68fb      	ldr	r3, [r7, #12]
	}
 8017cee:	4618      	mov	r0, r3
 8017cf0:	3710      	adds	r7, #16
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}
 8017cf6:	bf00      	nop
 8017cf8:	08017e75 	.word	0x08017e75

08017cfc <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	b089      	sub	sp, #36	; 0x24
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8017d08:	f3ef 8211 	mrs	r2, BASEPRI
 8017d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d10:	f383 8811 	msr	BASEPRI, r3
 8017d14:	f3bf 8f6f 	isb	sy
 8017d18:	f3bf 8f4f 	dsb	sy
 8017d1c:	60fa      	str	r2, [r7, #12]
 8017d1e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017d20:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017d22:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8017d24:	69fb      	ldr	r3, [r7, #28]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	617b      	str	r3, [r7, #20]
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8017d34:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8017d36:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3724      	adds	r7, #36	; 0x24
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d42:	4770      	bx	lr

08017d44 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b08e      	sub	sp, #56	; 0x38
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017d56:	2300      	movs	r3, #0
 8017d58:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d10a      	bne.n	8017d76 <xEventGroupSetBits+0x32>
	__asm volatile
 8017d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d64:	f383 8811 	msr	BASEPRI, r3
 8017d68:	f3bf 8f6f 	isb	sy
 8017d6c:	f3bf 8f4f 	dsb	sy
 8017d70:	613b      	str	r3, [r7, #16]
}
 8017d72:	bf00      	nop
 8017d74:	e7fe      	b.n	8017d74 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017d76:	683b      	ldr	r3, [r7, #0]
 8017d78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d00a      	beq.n	8017d96 <xEventGroupSetBits+0x52>
	__asm volatile
 8017d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d84:	f383 8811 	msr	BASEPRI, r3
 8017d88:	f3bf 8f6f 	isb	sy
 8017d8c:	f3bf 8f4f 	dsb	sy
 8017d90:	60fb      	str	r3, [r7, #12]
}
 8017d92:	bf00      	nop
 8017d94:	e7fe      	b.n	8017d94 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d98:	3304      	adds	r3, #4
 8017d9a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9e:	3308      	adds	r3, #8
 8017da0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8017da2:	f001 f98d 	bl	80190c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da8:	68db      	ldr	r3, [r3, #12]
 8017daa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dae:	681a      	ldr	r2, [r3, #0]
 8017db0:	683b      	ldr	r3, [r7, #0]
 8017db2:	431a      	orrs	r2, r3
 8017db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017db8:	e03c      	b.n	8017e34 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dbc:	685b      	ldr	r3, [r3, #4]
 8017dbe:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8017dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017dca:	69bb      	ldr	r3, [r7, #24]
 8017dcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017dd0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017dd8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017de0:	2b00      	cmp	r3, #0
 8017de2:	d108      	bne.n	8017df6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de6:	681a      	ldr	r2, [r3, #0]
 8017de8:	69bb      	ldr	r3, [r7, #24]
 8017dea:	4013      	ands	r3, r2
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d00b      	beq.n	8017e08 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8017df0:	2301      	movs	r3, #1
 8017df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017df4:	e008      	b.n	8017e08 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8017df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df8:	681a      	ldr	r2, [r3, #0]
 8017dfa:	69bb      	ldr	r3, [r7, #24]
 8017dfc:	4013      	ands	r3, r2
 8017dfe:	69ba      	ldr	r2, [r7, #24]
 8017e00:	429a      	cmp	r2, r3
 8017e02:	d101      	bne.n	8017e08 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8017e04:	2301      	movs	r3, #1
 8017e06:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8017e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d010      	beq.n	8017e30 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d003      	beq.n	8017e20 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8017e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	4313      	orrs	r3, r2
 8017e1e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8017e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8017e28:	4619      	mov	r1, r3
 8017e2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e2c:	f001 fc22 	bl	8019674 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8017e30:	69fb      	ldr	r3, [r7, #28]
 8017e32:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8017e34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e36:	6a3b      	ldr	r3, [r7, #32]
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	d1be      	bne.n	8017dba <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e42:	43db      	mvns	r3, r3
 8017e44:	401a      	ands	r2, r3
 8017e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e48:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8017e4a:	f001 f947 	bl	80190dc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8017e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e50:	681b      	ldr	r3, [r3, #0]
}
 8017e52:	4618      	mov	r0, r3
 8017e54:	3738      	adds	r7, #56	; 0x38
 8017e56:	46bd      	mov	sp, r7
 8017e58:	bd80      	pop	{r7, pc}

08017e5a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017e5a:	b580      	push	{r7, lr}
 8017e5c:	b082      	sub	sp, #8
 8017e5e:	af00      	add	r7, sp, #0
 8017e60:	6078      	str	r0, [r7, #4]
 8017e62:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017e64:	6839      	ldr	r1, [r7, #0]
 8017e66:	6878      	ldr	r0, [r7, #4]
 8017e68:	f7ff ff6c 	bl	8017d44 <xEventGroupSetBits>
}
 8017e6c:	bf00      	nop
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b082      	sub	sp, #8
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017e7e:	6839      	ldr	r1, [r7, #0]
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f7ff feef 	bl	8017c64 <xEventGroupClearBits>
}
 8017e86:	bf00      	nop
 8017e88:	3708      	adds	r7, #8
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}

08017e8e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8017e8e:	b480      	push	{r7}
 8017e90:	b087      	sub	sp, #28
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	60f8      	str	r0, [r7, #12]
 8017e96:	60b9      	str	r1, [r7, #8]
 8017e98:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d107      	bne.n	8017eb4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017ea4:	68fa      	ldr	r2, [r7, #12]
 8017ea6:	68bb      	ldr	r3, [r7, #8]
 8017ea8:	4013      	ands	r3, r2
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d00a      	beq.n	8017ec4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017eae:	2301      	movs	r3, #1
 8017eb0:	617b      	str	r3, [r7, #20]
 8017eb2:	e007      	b.n	8017ec4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017eb4:	68fa      	ldr	r2, [r7, #12]
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	4013      	ands	r3, r2
 8017eba:	68ba      	ldr	r2, [r7, #8]
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d101      	bne.n	8017ec4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8017ec0:	2301      	movs	r3, #1
 8017ec2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017ec4:	697b      	ldr	r3, [r7, #20]
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	371c      	adds	r7, #28
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed0:	4770      	bx	lr
	...

08017ed4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b086      	sub	sp, #24
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	60f8      	str	r0, [r7, #12]
 8017edc:	60b9      	str	r1, [r7, #8]
 8017ede:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	68ba      	ldr	r2, [r7, #8]
 8017ee4:	68f9      	ldr	r1, [r7, #12]
 8017ee6:	4804      	ldr	r0, [pc, #16]	; (8017ef8 <xEventGroupSetBitsFromISR+0x24>)
 8017ee8:	f002 f9c6 	bl	801a278 <xTimerPendFunctionCallFromISR>
 8017eec:	6178      	str	r0, [r7, #20]

		return xReturn;
 8017eee:	697b      	ldr	r3, [r7, #20]
	}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3718      	adds	r7, #24
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	08017e5b 	.word	0x08017e5b

08017efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8017efc:	b480      	push	{r7}
 8017efe:	b083      	sub	sp, #12
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	f103 0208 	add.w	r2, r3, #8
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	f103 0208 	add.w	r2, r3, #8
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f103 0208 	add.w	r2, r3, #8
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017f30:	bf00      	nop
 8017f32:	370c      	adds	r7, #12
 8017f34:	46bd      	mov	sp, r7
 8017f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f3a:	4770      	bx	lr

08017f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017f3c:	b480      	push	{r7}
 8017f3e:	b083      	sub	sp, #12
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	2200      	movs	r2, #0
 8017f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017f4a:	bf00      	nop
 8017f4c:	370c      	adds	r7, #12
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f54:	4770      	bx	lr

08017f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017f56:	b480      	push	{r7}
 8017f58:	b085      	sub	sp, #20
 8017f5a:	af00      	add	r7, sp, #0
 8017f5c:	6078      	str	r0, [r7, #4]
 8017f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	685b      	ldr	r3, [r3, #4]
 8017f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017f66:	683b      	ldr	r3, [r7, #0]
 8017f68:	68fa      	ldr	r2, [r7, #12]
 8017f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	689a      	ldr	r2, [r3, #8]
 8017f70:	683b      	ldr	r3, [r7, #0]
 8017f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	689b      	ldr	r3, [r3, #8]
 8017f78:	683a      	ldr	r2, [r7, #0]
 8017f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	683a      	ldr	r2, [r7, #0]
 8017f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	687a      	ldr	r2, [r7, #4]
 8017f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	1c5a      	adds	r2, r3, #1
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	601a      	str	r2, [r3, #0]
}
 8017f92:	bf00      	nop
 8017f94:	3714      	adds	r7, #20
 8017f96:	46bd      	mov	sp, r7
 8017f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9c:	4770      	bx	lr

08017f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017f9e:	b480      	push	{r7}
 8017fa0:	b085      	sub	sp, #20
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
 8017fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017fae:	68bb      	ldr	r3, [r7, #8]
 8017fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fb4:	d103      	bne.n	8017fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	691b      	ldr	r3, [r3, #16]
 8017fba:	60fb      	str	r3, [r7, #12]
 8017fbc:	e00c      	b.n	8017fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	3308      	adds	r3, #8
 8017fc2:	60fb      	str	r3, [r7, #12]
 8017fc4:	e002      	b.n	8017fcc <vListInsert+0x2e>
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	685b      	ldr	r3, [r3, #4]
 8017fca:	60fb      	str	r3, [r7, #12]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	68ba      	ldr	r2, [r7, #8]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d2f6      	bcs.n	8017fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	685a      	ldr	r2, [r3, #4]
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	683a      	ldr	r2, [r7, #0]
 8017fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	68fa      	ldr	r2, [r7, #12]
 8017fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	683a      	ldr	r2, [r7, #0]
 8017ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	687a      	ldr	r2, [r7, #4]
 8017ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	1c5a      	adds	r2, r3, #1
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	601a      	str	r2, [r3, #0]
}
 8018004:	bf00      	nop
 8018006:	3714      	adds	r7, #20
 8018008:	46bd      	mov	sp, r7
 801800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800e:	4770      	bx	lr

08018010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018010:	b480      	push	{r7}
 8018012:	b085      	sub	sp, #20
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	691b      	ldr	r3, [r3, #16]
 801801c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	685b      	ldr	r3, [r3, #4]
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	6892      	ldr	r2, [r2, #8]
 8018026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	689b      	ldr	r3, [r3, #8]
 801802c:	687a      	ldr	r2, [r7, #4]
 801802e:	6852      	ldr	r2, [r2, #4]
 8018030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	687a      	ldr	r2, [r7, #4]
 8018038:	429a      	cmp	r2, r3
 801803a:	d103      	bne.n	8018044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	689a      	ldr	r2, [r3, #8]
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2200      	movs	r2, #0
 8018048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	1e5a      	subs	r2, r3, #1
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
}
 8018058:	4618      	mov	r0, r3
 801805a:	3714      	adds	r7, #20
 801805c:	46bd      	mov	sp, r7
 801805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018062:	4770      	bx	lr

08018064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b084      	sub	sp, #16
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d10a      	bne.n	801808e <xQueueGenericReset+0x2a>
	__asm volatile
 8018078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801807c:	f383 8811 	msr	BASEPRI, r3
 8018080:	f3bf 8f6f 	isb	sy
 8018084:	f3bf 8f4f 	dsb	sy
 8018088:	60bb      	str	r3, [r7, #8]
}
 801808a:	bf00      	nop
 801808c:	e7fe      	b.n	801808c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801808e:	f002 fa41 	bl	801a514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801809a:	68f9      	ldr	r1, [r7, #12]
 801809c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801809e:	fb01 f303 	mul.w	r3, r1, r3
 80180a2:	441a      	add	r2, r3
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2200      	movs	r2, #0
 80180ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80180ae:	68fb      	ldr	r3, [r7, #12]
 80180b0:	681a      	ldr	r2, [r3, #0]
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80180b6:	68fb      	ldr	r3, [r7, #12]
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180be:	3b01      	subs	r3, #1
 80180c0:	68f9      	ldr	r1, [r7, #12]
 80180c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80180c4:	fb01 f303 	mul.w	r3, r1, r3
 80180c8:	441a      	add	r2, r3
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	22ff      	movs	r2, #255	; 0xff
 80180d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	22ff      	movs	r2, #255	; 0xff
 80180da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d114      	bne.n	801810e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	691b      	ldr	r3, [r3, #16]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d01a      	beq.n	8018122 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	3310      	adds	r3, #16
 80180f0:	4618      	mov	r0, r3
 80180f2:	f001 fa5b 	bl	80195ac <xTaskRemoveFromEventList>
 80180f6:	4603      	mov	r3, r0
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d012      	beq.n	8018122 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80180fc:	4b0c      	ldr	r3, [pc, #48]	; (8018130 <xQueueGenericReset+0xcc>)
 80180fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018102:	601a      	str	r2, [r3, #0]
 8018104:	f3bf 8f4f 	dsb	sy
 8018108:	f3bf 8f6f 	isb	sy
 801810c:	e009      	b.n	8018122 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	3310      	adds	r3, #16
 8018112:	4618      	mov	r0, r3
 8018114:	f7ff fef2 	bl	8017efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	3324      	adds	r3, #36	; 0x24
 801811c:	4618      	mov	r0, r3
 801811e:	f7ff feed 	bl	8017efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018122:	f002 fa27 	bl	801a574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018126:	2301      	movs	r3, #1
}
 8018128:	4618      	mov	r0, r3
 801812a:	3710      	adds	r7, #16
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	e000ed04 	.word	0xe000ed04

08018134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018134:	b580      	push	{r7, lr}
 8018136:	b08e      	sub	sp, #56	; 0x38
 8018138:	af02      	add	r7, sp, #8
 801813a:	60f8      	str	r0, [r7, #12]
 801813c:	60b9      	str	r1, [r7, #8]
 801813e:	607a      	str	r2, [r7, #4]
 8018140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d10a      	bne.n	801815e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801814c:	f383 8811 	msr	BASEPRI, r3
 8018150:	f3bf 8f6f 	isb	sy
 8018154:	f3bf 8f4f 	dsb	sy
 8018158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801815a:	bf00      	nop
 801815c:	e7fe      	b.n	801815c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d10a      	bne.n	801817a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8018164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018168:	f383 8811 	msr	BASEPRI, r3
 801816c:	f3bf 8f6f 	isb	sy
 8018170:	f3bf 8f4f 	dsb	sy
 8018174:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018176:	bf00      	nop
 8018178:	e7fe      	b.n	8018178 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d002      	beq.n	8018186 <xQueueGenericCreateStatic+0x52>
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d001      	beq.n	801818a <xQueueGenericCreateStatic+0x56>
 8018186:	2301      	movs	r3, #1
 8018188:	e000      	b.n	801818c <xQueueGenericCreateStatic+0x58>
 801818a:	2300      	movs	r3, #0
 801818c:	2b00      	cmp	r3, #0
 801818e:	d10a      	bne.n	80181a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8018190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018194:	f383 8811 	msr	BASEPRI, r3
 8018198:	f3bf 8f6f 	isb	sy
 801819c:	f3bf 8f4f 	dsb	sy
 80181a0:	623b      	str	r3, [r7, #32]
}
 80181a2:	bf00      	nop
 80181a4:	e7fe      	b.n	80181a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d102      	bne.n	80181b2 <xQueueGenericCreateStatic+0x7e>
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d101      	bne.n	80181b6 <xQueueGenericCreateStatic+0x82>
 80181b2:	2301      	movs	r3, #1
 80181b4:	e000      	b.n	80181b8 <xQueueGenericCreateStatic+0x84>
 80181b6:	2300      	movs	r3, #0
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d10a      	bne.n	80181d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80181bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181c0:	f383 8811 	msr	BASEPRI, r3
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	61fb      	str	r3, [r7, #28]
}
 80181ce:	bf00      	nop
 80181d0:	e7fe      	b.n	80181d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80181d2:	2350      	movs	r3, #80	; 0x50
 80181d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	2b50      	cmp	r3, #80	; 0x50
 80181da:	d00a      	beq.n	80181f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80181dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181e0:	f383 8811 	msr	BASEPRI, r3
 80181e4:	f3bf 8f6f 	isb	sy
 80181e8:	f3bf 8f4f 	dsb	sy
 80181ec:	61bb      	str	r3, [r7, #24]
}
 80181ee:	bf00      	nop
 80181f0:	e7fe      	b.n	80181f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80181f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80181f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00d      	beq.n	801821a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80181fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018200:	2201      	movs	r2, #1
 8018202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018206:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801820c:	9300      	str	r3, [sp, #0]
 801820e:	4613      	mov	r3, r2
 8018210:	687a      	ldr	r2, [r7, #4]
 8018212:	68b9      	ldr	r1, [r7, #8]
 8018214:	68f8      	ldr	r0, [r7, #12]
 8018216:	f000 f805 	bl	8018224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801821a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801821c:	4618      	mov	r0, r3
 801821e:	3730      	adds	r7, #48	; 0x30
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}

08018224 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	60f8      	str	r0, [r7, #12]
 801822c:	60b9      	str	r1, [r7, #8]
 801822e:	607a      	str	r2, [r7, #4]
 8018230:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d103      	bne.n	8018240 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018238:	69bb      	ldr	r3, [r7, #24]
 801823a:	69ba      	ldr	r2, [r7, #24]
 801823c:	601a      	str	r2, [r3, #0]
 801823e:	e002      	b.n	8018246 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018240:	69bb      	ldr	r3, [r7, #24]
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018246:	69bb      	ldr	r3, [r7, #24]
 8018248:	68fa      	ldr	r2, [r7, #12]
 801824a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801824c:	69bb      	ldr	r3, [r7, #24]
 801824e:	68ba      	ldr	r2, [r7, #8]
 8018250:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018252:	2101      	movs	r1, #1
 8018254:	69b8      	ldr	r0, [r7, #24]
 8018256:	f7ff ff05 	bl	8018064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801825a:	69bb      	ldr	r3, [r7, #24]
 801825c:	78fa      	ldrb	r2, [r7, #3]
 801825e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018262:	bf00      	nop
 8018264:	3710      	adds	r7, #16
 8018266:	46bd      	mov	sp, r7
 8018268:	bd80      	pop	{r7, pc}
	...

0801826c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801826c:	b580      	push	{r7, lr}
 801826e:	b08e      	sub	sp, #56	; 0x38
 8018270:	af00      	add	r7, sp, #0
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	60b9      	str	r1, [r7, #8]
 8018276:	607a      	str	r2, [r7, #4]
 8018278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801827a:	2300      	movs	r3, #0
 801827c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018284:	2b00      	cmp	r3, #0
 8018286:	d10a      	bne.n	801829e <xQueueGenericSend+0x32>
	__asm volatile
 8018288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801828c:	f383 8811 	msr	BASEPRI, r3
 8018290:	f3bf 8f6f 	isb	sy
 8018294:	f3bf 8f4f 	dsb	sy
 8018298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801829a:	bf00      	nop
 801829c:	e7fe      	b.n	801829c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801829e:	68bb      	ldr	r3, [r7, #8]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d103      	bne.n	80182ac <xQueueGenericSend+0x40>
 80182a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d101      	bne.n	80182b0 <xQueueGenericSend+0x44>
 80182ac:	2301      	movs	r3, #1
 80182ae:	e000      	b.n	80182b2 <xQueueGenericSend+0x46>
 80182b0:	2300      	movs	r3, #0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d10a      	bne.n	80182cc <xQueueGenericSend+0x60>
	__asm volatile
 80182b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ba:	f383 8811 	msr	BASEPRI, r3
 80182be:	f3bf 8f6f 	isb	sy
 80182c2:	f3bf 8f4f 	dsb	sy
 80182c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80182c8:	bf00      	nop
 80182ca:	e7fe      	b.n	80182ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80182cc:	683b      	ldr	r3, [r7, #0]
 80182ce:	2b02      	cmp	r3, #2
 80182d0:	d103      	bne.n	80182da <xQueueGenericSend+0x6e>
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182d6:	2b01      	cmp	r3, #1
 80182d8:	d101      	bne.n	80182de <xQueueGenericSend+0x72>
 80182da:	2301      	movs	r3, #1
 80182dc:	e000      	b.n	80182e0 <xQueueGenericSend+0x74>
 80182de:	2300      	movs	r3, #0
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d10a      	bne.n	80182fa <xQueueGenericSend+0x8e>
	__asm volatile
 80182e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182e8:	f383 8811 	msr	BASEPRI, r3
 80182ec:	f3bf 8f6f 	isb	sy
 80182f0:	f3bf 8f4f 	dsb	sy
 80182f4:	623b      	str	r3, [r7, #32]
}
 80182f6:	bf00      	nop
 80182f8:	e7fe      	b.n	80182f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80182fa:	f001 fb77 	bl	80199ec <xTaskGetSchedulerState>
 80182fe:	4603      	mov	r3, r0
 8018300:	2b00      	cmp	r3, #0
 8018302:	d102      	bne.n	801830a <xQueueGenericSend+0x9e>
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d101      	bne.n	801830e <xQueueGenericSend+0xa2>
 801830a:	2301      	movs	r3, #1
 801830c:	e000      	b.n	8018310 <xQueueGenericSend+0xa4>
 801830e:	2300      	movs	r3, #0
 8018310:	2b00      	cmp	r3, #0
 8018312:	d10a      	bne.n	801832a <xQueueGenericSend+0xbe>
	__asm volatile
 8018314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018318:	f383 8811 	msr	BASEPRI, r3
 801831c:	f3bf 8f6f 	isb	sy
 8018320:	f3bf 8f4f 	dsb	sy
 8018324:	61fb      	str	r3, [r7, #28]
}
 8018326:	bf00      	nop
 8018328:	e7fe      	b.n	8018328 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801832a:	f002 f8f3 	bl	801a514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018336:	429a      	cmp	r2, r3
 8018338:	d302      	bcc.n	8018340 <xQueueGenericSend+0xd4>
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	2b02      	cmp	r3, #2
 801833e:	d129      	bne.n	8018394 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018340:	683a      	ldr	r2, [r7, #0]
 8018342:	68b9      	ldr	r1, [r7, #8]
 8018344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018346:	f000 fa0b 	bl	8018760 <prvCopyDataToQueue>
 801834a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018350:	2b00      	cmp	r3, #0
 8018352:	d010      	beq.n	8018376 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018356:	3324      	adds	r3, #36	; 0x24
 8018358:	4618      	mov	r0, r3
 801835a:	f001 f927 	bl	80195ac <xTaskRemoveFromEventList>
 801835e:	4603      	mov	r3, r0
 8018360:	2b00      	cmp	r3, #0
 8018362:	d013      	beq.n	801838c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018364:	4b3f      	ldr	r3, [pc, #252]	; (8018464 <xQueueGenericSend+0x1f8>)
 8018366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801836a:	601a      	str	r2, [r3, #0]
 801836c:	f3bf 8f4f 	dsb	sy
 8018370:	f3bf 8f6f 	isb	sy
 8018374:	e00a      	b.n	801838c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018378:	2b00      	cmp	r3, #0
 801837a:	d007      	beq.n	801838c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801837c:	4b39      	ldr	r3, [pc, #228]	; (8018464 <xQueueGenericSend+0x1f8>)
 801837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018382:	601a      	str	r2, [r3, #0]
 8018384:	f3bf 8f4f 	dsb	sy
 8018388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801838c:	f002 f8f2 	bl	801a574 <vPortExitCritical>
				return pdPASS;
 8018390:	2301      	movs	r3, #1
 8018392:	e063      	b.n	801845c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d103      	bne.n	80183a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801839a:	f002 f8eb 	bl	801a574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801839e:	2300      	movs	r3, #0
 80183a0:	e05c      	b.n	801845c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80183a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d106      	bne.n	80183b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80183a8:	f107 0314 	add.w	r3, r7, #20
 80183ac:	4618      	mov	r0, r3
 80183ae:	f001 f9c3 	bl	8019738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80183b2:	2301      	movs	r3, #1
 80183b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80183b6:	f002 f8dd 	bl	801a574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80183ba:	f000 fe81 	bl	80190c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80183be:	f002 f8a9 	bl	801a514 <vPortEnterCritical>
 80183c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80183c8:	b25b      	sxtb	r3, r3
 80183ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183ce:	d103      	bne.n	80183d8 <xQueueGenericSend+0x16c>
 80183d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d2:	2200      	movs	r2, #0
 80183d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80183d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80183de:	b25b      	sxtb	r3, r3
 80183e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80183e4:	d103      	bne.n	80183ee <xQueueGenericSend+0x182>
 80183e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e8:	2200      	movs	r2, #0
 80183ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80183ee:	f002 f8c1 	bl	801a574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80183f2:	1d3a      	adds	r2, r7, #4
 80183f4:	f107 0314 	add.w	r3, r7, #20
 80183f8:	4611      	mov	r1, r2
 80183fa:	4618      	mov	r0, r3
 80183fc:	f001 f9b2 	bl	8019764 <xTaskCheckForTimeOut>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d124      	bne.n	8018450 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018408:	f000 faa2 	bl	8018950 <prvIsQueueFull>
 801840c:	4603      	mov	r3, r0
 801840e:	2b00      	cmp	r3, #0
 8018410:	d018      	beq.n	8018444 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018414:	3310      	adds	r3, #16
 8018416:	687a      	ldr	r2, [r7, #4]
 8018418:	4611      	mov	r1, r2
 801841a:	4618      	mov	r0, r3
 801841c:	f001 f83a 	bl	8019494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8018420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018422:	f000 fa2d 	bl	8018880 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8018426:	f000 fe59 	bl	80190dc <xTaskResumeAll>
 801842a:	4603      	mov	r3, r0
 801842c:	2b00      	cmp	r3, #0
 801842e:	f47f af7c 	bne.w	801832a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8018432:	4b0c      	ldr	r3, [pc, #48]	; (8018464 <xQueueGenericSend+0x1f8>)
 8018434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018438:	601a      	str	r2, [r3, #0]
 801843a:	f3bf 8f4f 	dsb	sy
 801843e:	f3bf 8f6f 	isb	sy
 8018442:	e772      	b.n	801832a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8018444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018446:	f000 fa1b 	bl	8018880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801844a:	f000 fe47 	bl	80190dc <xTaskResumeAll>
 801844e:	e76c      	b.n	801832a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8018450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018452:	f000 fa15 	bl	8018880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018456:	f000 fe41 	bl	80190dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801845a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801845c:	4618      	mov	r0, r3
 801845e:	3738      	adds	r7, #56	; 0x38
 8018460:	46bd      	mov	sp, r7
 8018462:	bd80      	pop	{r7, pc}
 8018464:	e000ed04 	.word	0xe000ed04

08018468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b090      	sub	sp, #64	; 0x40
 801846c:	af00      	add	r7, sp, #0
 801846e:	60f8      	str	r0, [r7, #12]
 8018470:	60b9      	str	r1, [r7, #8]
 8018472:	607a      	str	r2, [r7, #4]
 8018474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801847c:	2b00      	cmp	r3, #0
 801847e:	d10a      	bne.n	8018496 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8018480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018484:	f383 8811 	msr	BASEPRI, r3
 8018488:	f3bf 8f6f 	isb	sy
 801848c:	f3bf 8f4f 	dsb	sy
 8018490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018492:	bf00      	nop
 8018494:	e7fe      	b.n	8018494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d103      	bne.n	80184a4 <xQueueGenericSendFromISR+0x3c>
 801849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801849e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d101      	bne.n	80184a8 <xQueueGenericSendFromISR+0x40>
 80184a4:	2301      	movs	r3, #1
 80184a6:	e000      	b.n	80184aa <xQueueGenericSendFromISR+0x42>
 80184a8:	2300      	movs	r3, #0
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d10a      	bne.n	80184c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80184ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184b2:	f383 8811 	msr	BASEPRI, r3
 80184b6:	f3bf 8f6f 	isb	sy
 80184ba:	f3bf 8f4f 	dsb	sy
 80184be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80184c0:	bf00      	nop
 80184c2:	e7fe      	b.n	80184c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	2b02      	cmp	r3, #2
 80184c8:	d103      	bne.n	80184d2 <xQueueGenericSendFromISR+0x6a>
 80184ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184ce:	2b01      	cmp	r3, #1
 80184d0:	d101      	bne.n	80184d6 <xQueueGenericSendFromISR+0x6e>
 80184d2:	2301      	movs	r3, #1
 80184d4:	e000      	b.n	80184d8 <xQueueGenericSendFromISR+0x70>
 80184d6:	2300      	movs	r3, #0
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d10a      	bne.n	80184f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80184dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e0:	f383 8811 	msr	BASEPRI, r3
 80184e4:	f3bf 8f6f 	isb	sy
 80184e8:	f3bf 8f4f 	dsb	sy
 80184ec:	623b      	str	r3, [r7, #32]
}
 80184ee:	bf00      	nop
 80184f0:	e7fe      	b.n	80184f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80184f2:	f002 f8f1 	bl	801a6d8 <vPortValidateInterruptPriority>
	__asm volatile
 80184f6:	f3ef 8211 	mrs	r2, BASEPRI
 80184fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184fe:	f383 8811 	msr	BASEPRI, r3
 8018502:	f3bf 8f6f 	isb	sy
 8018506:	f3bf 8f4f 	dsb	sy
 801850a:	61fa      	str	r2, [r7, #28]
 801850c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801850e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8018510:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801851a:	429a      	cmp	r2, r3
 801851c:	d302      	bcc.n	8018524 <xQueueGenericSendFromISR+0xbc>
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	2b02      	cmp	r3, #2
 8018522:	d12f      	bne.n	8018584 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8018524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801852a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018532:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018534:	683a      	ldr	r2, [r7, #0]
 8018536:	68b9      	ldr	r1, [r7, #8]
 8018538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801853a:	f000 f911 	bl	8018760 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801853e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8018542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018546:	d112      	bne.n	801856e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801854a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801854c:	2b00      	cmp	r3, #0
 801854e:	d016      	beq.n	801857e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018552:	3324      	adds	r3, #36	; 0x24
 8018554:	4618      	mov	r0, r3
 8018556:	f001 f829 	bl	80195ac <xTaskRemoveFromEventList>
 801855a:	4603      	mov	r3, r0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d00e      	beq.n	801857e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00b      	beq.n	801857e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2201      	movs	r2, #1
 801856a:	601a      	str	r2, [r3, #0]
 801856c:	e007      	b.n	801857e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801856e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8018572:	3301      	adds	r3, #1
 8018574:	b2db      	uxtb	r3, r3
 8018576:	b25a      	sxtb	r2, r3
 8018578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801857a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801857e:	2301      	movs	r3, #1
 8018580:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8018582:	e001      	b.n	8018588 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018584:	2300      	movs	r3, #0
 8018586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801858a:	617b      	str	r3, [r7, #20]
	__asm volatile
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	f383 8811 	msr	BASEPRI, r3
}
 8018592:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018596:	4618      	mov	r0, r3
 8018598:	3740      	adds	r7, #64	; 0x40
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}
	...

080185a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b08c      	sub	sp, #48	; 0x30
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80185ac:	2300      	movs	r3, #0
 80185ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80185b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d10a      	bne.n	80185d0 <xQueueReceive+0x30>
	__asm volatile
 80185ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185be:	f383 8811 	msr	BASEPRI, r3
 80185c2:	f3bf 8f6f 	isb	sy
 80185c6:	f3bf 8f4f 	dsb	sy
 80185ca:	623b      	str	r3, [r7, #32]
}
 80185cc:	bf00      	nop
 80185ce:	e7fe      	b.n	80185ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d103      	bne.n	80185de <xQueueReceive+0x3e>
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d101      	bne.n	80185e2 <xQueueReceive+0x42>
 80185de:	2301      	movs	r3, #1
 80185e0:	e000      	b.n	80185e4 <xQueueReceive+0x44>
 80185e2:	2300      	movs	r3, #0
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d10a      	bne.n	80185fe <xQueueReceive+0x5e>
	__asm volatile
 80185e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185ec:	f383 8811 	msr	BASEPRI, r3
 80185f0:	f3bf 8f6f 	isb	sy
 80185f4:	f3bf 8f4f 	dsb	sy
 80185f8:	61fb      	str	r3, [r7, #28]
}
 80185fa:	bf00      	nop
 80185fc:	e7fe      	b.n	80185fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80185fe:	f001 f9f5 	bl	80199ec <xTaskGetSchedulerState>
 8018602:	4603      	mov	r3, r0
 8018604:	2b00      	cmp	r3, #0
 8018606:	d102      	bne.n	801860e <xQueueReceive+0x6e>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d101      	bne.n	8018612 <xQueueReceive+0x72>
 801860e:	2301      	movs	r3, #1
 8018610:	e000      	b.n	8018614 <xQueueReceive+0x74>
 8018612:	2300      	movs	r3, #0
 8018614:	2b00      	cmp	r3, #0
 8018616:	d10a      	bne.n	801862e <xQueueReceive+0x8e>
	__asm volatile
 8018618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801861c:	f383 8811 	msr	BASEPRI, r3
 8018620:	f3bf 8f6f 	isb	sy
 8018624:	f3bf 8f4f 	dsb	sy
 8018628:	61bb      	str	r3, [r7, #24]
}
 801862a:	bf00      	nop
 801862c:	e7fe      	b.n	801862c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801862e:	f001 ff71 	bl	801a514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018636:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801863a:	2b00      	cmp	r3, #0
 801863c:	d01f      	beq.n	801867e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801863e:	68b9      	ldr	r1, [r7, #8]
 8018640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018642:	f000 f8f7 	bl	8018834 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018648:	1e5a      	subs	r2, r3, #1
 801864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801864c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018650:	691b      	ldr	r3, [r3, #16]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00f      	beq.n	8018676 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018658:	3310      	adds	r3, #16
 801865a:	4618      	mov	r0, r3
 801865c:	f000 ffa6 	bl	80195ac <xTaskRemoveFromEventList>
 8018660:	4603      	mov	r3, r0
 8018662:	2b00      	cmp	r3, #0
 8018664:	d007      	beq.n	8018676 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8018666:	4b3d      	ldr	r3, [pc, #244]	; (801875c <xQueueReceive+0x1bc>)
 8018668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801866c:	601a      	str	r2, [r3, #0]
 801866e:	f3bf 8f4f 	dsb	sy
 8018672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8018676:	f001 ff7d 	bl	801a574 <vPortExitCritical>
				return pdPASS;
 801867a:	2301      	movs	r3, #1
 801867c:	e069      	b.n	8018752 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d103      	bne.n	801868c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018684:	f001 ff76 	bl	801a574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018688:	2300      	movs	r3, #0
 801868a:	e062      	b.n	8018752 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801868e:	2b00      	cmp	r3, #0
 8018690:	d106      	bne.n	80186a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018692:	f107 0310 	add.w	r3, r7, #16
 8018696:	4618      	mov	r0, r3
 8018698:	f001 f84e 	bl	8019738 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801869c:	2301      	movs	r3, #1
 801869e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80186a0:	f001 ff68 	bl	801a574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80186a4:	f000 fd0c 	bl	80190c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80186a8:	f001 ff34 	bl	801a514 <vPortEnterCritical>
 80186ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80186b2:	b25b      	sxtb	r3, r3
 80186b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186b8:	d103      	bne.n	80186c2 <xQueueReceive+0x122>
 80186ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186bc:	2200      	movs	r2, #0
 80186be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80186c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80186c8:	b25b      	sxtb	r3, r3
 80186ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80186ce:	d103      	bne.n	80186d8 <xQueueReceive+0x138>
 80186d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d2:	2200      	movs	r2, #0
 80186d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80186d8:	f001 ff4c 	bl	801a574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80186dc:	1d3a      	adds	r2, r7, #4
 80186de:	f107 0310 	add.w	r3, r7, #16
 80186e2:	4611      	mov	r1, r2
 80186e4:	4618      	mov	r0, r3
 80186e6:	f001 f83d 	bl	8019764 <xTaskCheckForTimeOut>
 80186ea:	4603      	mov	r3, r0
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d123      	bne.n	8018738 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80186f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186f2:	f000 f917 	bl	8018924 <prvIsQueueEmpty>
 80186f6:	4603      	mov	r3, r0
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d017      	beq.n	801872c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80186fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fe:	3324      	adds	r3, #36	; 0x24
 8018700:	687a      	ldr	r2, [r7, #4]
 8018702:	4611      	mov	r1, r2
 8018704:	4618      	mov	r0, r3
 8018706:	f000 fec5 	bl	8019494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801870a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801870c:	f000 f8b8 	bl	8018880 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018710:	f000 fce4 	bl	80190dc <xTaskResumeAll>
 8018714:	4603      	mov	r3, r0
 8018716:	2b00      	cmp	r3, #0
 8018718:	d189      	bne.n	801862e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801871a:	4b10      	ldr	r3, [pc, #64]	; (801875c <xQueueReceive+0x1bc>)
 801871c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018720:	601a      	str	r2, [r3, #0]
 8018722:	f3bf 8f4f 	dsb	sy
 8018726:	f3bf 8f6f 	isb	sy
 801872a:	e780      	b.n	801862e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801872c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801872e:	f000 f8a7 	bl	8018880 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018732:	f000 fcd3 	bl	80190dc <xTaskResumeAll>
 8018736:	e77a      	b.n	801862e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8018738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801873a:	f000 f8a1 	bl	8018880 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801873e:	f000 fccd 	bl	80190dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018744:	f000 f8ee 	bl	8018924 <prvIsQueueEmpty>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	f43f af6f 	beq.w	801862e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018752:	4618      	mov	r0, r3
 8018754:	3730      	adds	r7, #48	; 0x30
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	e000ed04 	.word	0xe000ed04

08018760 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b086      	sub	sp, #24
 8018764:	af00      	add	r7, sp, #0
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801876c:	2300      	movs	r3, #0
 801876e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018774:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801877a:	2b00      	cmp	r3, #0
 801877c:	d10d      	bne.n	801879a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d14d      	bne.n	8018822 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	689b      	ldr	r3, [r3, #8]
 801878a:	4618      	mov	r0, r3
 801878c:	f001 f94c 	bl	8019a28 <xTaskPriorityDisinherit>
 8018790:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	2200      	movs	r2, #0
 8018796:	609a      	str	r2, [r3, #8]
 8018798:	e043      	b.n	8018822 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d119      	bne.n	80187d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	6858      	ldr	r0, [r3, #4]
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187a8:	461a      	mov	r2, r3
 80187aa:	68b9      	ldr	r1, [r7, #8]
 80187ac:	f002 f9e8 	bl	801ab80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	685a      	ldr	r2, [r3, #4]
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187b8:	441a      	add	r2, r3
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	685a      	ldr	r2, [r3, #4]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	689b      	ldr	r3, [r3, #8]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d32b      	bcc.n	8018822 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	681a      	ldr	r2, [r3, #0]
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	605a      	str	r2, [r3, #4]
 80187d2:	e026      	b.n	8018822 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	68d8      	ldr	r0, [r3, #12]
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187dc:	461a      	mov	r2, r3
 80187de:	68b9      	ldr	r1, [r7, #8]
 80187e0:	f002 f9ce 	bl	801ab80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	68da      	ldr	r2, [r3, #12]
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187ec:	425b      	negs	r3, r3
 80187ee:	441a      	add	r2, r3
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	68da      	ldr	r2, [r3, #12]
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d207      	bcs.n	8018810 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	689a      	ldr	r2, [r3, #8]
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018808:	425b      	negs	r3, r3
 801880a:	441a      	add	r2, r3
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	2b02      	cmp	r3, #2
 8018814:	d105      	bne.n	8018822 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018816:	693b      	ldr	r3, [r7, #16]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d002      	beq.n	8018822 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801881c:	693b      	ldr	r3, [r7, #16]
 801881e:	3b01      	subs	r3, #1
 8018820:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	1c5a      	adds	r2, r3, #1
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801882a:	697b      	ldr	r3, [r7, #20]
}
 801882c:	4618      	mov	r0, r3
 801882e:	3718      	adds	r7, #24
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}

08018834 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018842:	2b00      	cmp	r3, #0
 8018844:	d018      	beq.n	8018878 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	68da      	ldr	r2, [r3, #12]
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801884e:	441a      	add	r2, r3
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	68da      	ldr	r2, [r3, #12]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	689b      	ldr	r3, [r3, #8]
 801885c:	429a      	cmp	r2, r3
 801885e:	d303      	bcc.n	8018868 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681a      	ldr	r2, [r3, #0]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	68d9      	ldr	r1, [r3, #12]
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018870:	461a      	mov	r2, r3
 8018872:	6838      	ldr	r0, [r7, #0]
 8018874:	f002 f984 	bl	801ab80 <memcpy>
	}
}
 8018878:	bf00      	nop
 801887a:	3708      	adds	r7, #8
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}

08018880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b084      	sub	sp, #16
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018888:	f001 fe44 	bl	801a514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018892:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018894:	e011      	b.n	80188ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	2b00      	cmp	r3, #0
 801889c:	d012      	beq.n	80188c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	3324      	adds	r3, #36	; 0x24
 80188a2:	4618      	mov	r0, r3
 80188a4:	f000 fe82 	bl	80195ac <xTaskRemoveFromEventList>
 80188a8:	4603      	mov	r3, r0
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d001      	beq.n	80188b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80188ae:	f000 ffbb 	bl	8019828 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80188b2:	7bfb      	ldrb	r3, [r7, #15]
 80188b4:	3b01      	subs	r3, #1
 80188b6:	b2db      	uxtb	r3, r3
 80188b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80188ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	dce9      	bgt.n	8018896 <prvUnlockQueue+0x16>
 80188c2:	e000      	b.n	80188c6 <prvUnlockQueue+0x46>
					break;
 80188c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	22ff      	movs	r2, #255	; 0xff
 80188ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80188ce:	f001 fe51 	bl	801a574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80188d2:	f001 fe1f 	bl	801a514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80188de:	e011      	b.n	8018904 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	691b      	ldr	r3, [r3, #16]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d012      	beq.n	801890e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	3310      	adds	r3, #16
 80188ec:	4618      	mov	r0, r3
 80188ee:	f000 fe5d 	bl	80195ac <xTaskRemoveFromEventList>
 80188f2:	4603      	mov	r3, r0
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d001      	beq.n	80188fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80188f8:	f000 ff96 	bl	8019828 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80188fc:	7bbb      	ldrb	r3, [r7, #14]
 80188fe:	3b01      	subs	r3, #1
 8018900:	b2db      	uxtb	r3, r3
 8018902:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018908:	2b00      	cmp	r3, #0
 801890a:	dce9      	bgt.n	80188e0 <prvUnlockQueue+0x60>
 801890c:	e000      	b.n	8018910 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801890e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	22ff      	movs	r2, #255	; 0xff
 8018914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018918:	f001 fe2c 	bl	801a574 <vPortExitCritical>
}
 801891c:	bf00      	nop
 801891e:	3710      	adds	r7, #16
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801892c:	f001 fdf2 	bl	801a514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018934:	2b00      	cmp	r3, #0
 8018936:	d102      	bne.n	801893e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018938:	2301      	movs	r3, #1
 801893a:	60fb      	str	r3, [r7, #12]
 801893c:	e001      	b.n	8018942 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801893e:	2300      	movs	r3, #0
 8018940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018942:	f001 fe17 	bl	801a574 <vPortExitCritical>

	return xReturn;
 8018946:	68fb      	ldr	r3, [r7, #12]
}
 8018948:	4618      	mov	r0, r3
 801894a:	3710      	adds	r7, #16
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b084      	sub	sp, #16
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018958:	f001 fddc 	bl	801a514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018964:	429a      	cmp	r2, r3
 8018966:	d102      	bne.n	801896e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018968:	2301      	movs	r3, #1
 801896a:	60fb      	str	r3, [r7, #12]
 801896c:	e001      	b.n	8018972 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801896e:	2300      	movs	r3, #0
 8018970:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018972:	f001 fdff 	bl	801a574 <vPortExitCritical>

	return xReturn;
 8018976:	68fb      	ldr	r3, [r7, #12]
}
 8018978:	4618      	mov	r0, r3
 801897a:	3710      	adds	r7, #16
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}

08018980 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018980:	b480      	push	{r7}
 8018982:	b085      	sub	sp, #20
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801898a:	2300      	movs	r3, #0
 801898c:	60fb      	str	r3, [r7, #12]
 801898e:	e014      	b.n	80189ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018990:	4a0f      	ldr	r2, [pc, #60]	; (80189d0 <vQueueAddToRegistry+0x50>)
 8018992:	68fb      	ldr	r3, [r7, #12]
 8018994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d10b      	bne.n	80189b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801899c:	490c      	ldr	r1, [pc, #48]	; (80189d0 <vQueueAddToRegistry+0x50>)
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80189a6:	4a0a      	ldr	r2, [pc, #40]	; (80189d0 <vQueueAddToRegistry+0x50>)
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	00db      	lsls	r3, r3, #3
 80189ac:	4413      	add	r3, r2
 80189ae:	687a      	ldr	r2, [r7, #4]
 80189b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80189b2:	e006      	b.n	80189c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	3301      	adds	r3, #1
 80189b8:	60fb      	str	r3, [r7, #12]
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	2b07      	cmp	r3, #7
 80189be:	d9e7      	bls.n	8018990 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80189c0:	bf00      	nop
 80189c2:	bf00      	nop
 80189c4:	3714      	adds	r7, #20
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop
 80189d0:	24002744 	.word	0x24002744

080189d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b086      	sub	sp, #24
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80189e4:	f001 fd96 	bl	801a514 <vPortEnterCritical>
 80189e8:	697b      	ldr	r3, [r7, #20]
 80189ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80189ee:	b25b      	sxtb	r3, r3
 80189f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80189f4:	d103      	bne.n	80189fe <vQueueWaitForMessageRestricted+0x2a>
 80189f6:	697b      	ldr	r3, [r7, #20]
 80189f8:	2200      	movs	r2, #0
 80189fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80189fe:	697b      	ldr	r3, [r7, #20]
 8018a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018a04:	b25b      	sxtb	r3, r3
 8018a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018a0a:	d103      	bne.n	8018a14 <vQueueWaitForMessageRestricted+0x40>
 8018a0c:	697b      	ldr	r3, [r7, #20]
 8018a0e:	2200      	movs	r2, #0
 8018a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018a14:	f001 fdae 	bl	801a574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018a18:	697b      	ldr	r3, [r7, #20]
 8018a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d106      	bne.n	8018a2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018a20:	697b      	ldr	r3, [r7, #20]
 8018a22:	3324      	adds	r3, #36	; 0x24
 8018a24:	687a      	ldr	r2, [r7, #4]
 8018a26:	68b9      	ldr	r1, [r7, #8]
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f000 fd93 	bl	8019554 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018a2e:	6978      	ldr	r0, [r7, #20]
 8018a30:	f7ff ff26 	bl	8018880 <prvUnlockQueue>
	}
 8018a34:	bf00      	nop
 8018a36:	3718      	adds	r7, #24
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bd80      	pop	{r7, pc}

08018a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b08e      	sub	sp, #56	; 0x38
 8018a40:	af04      	add	r7, sp, #16
 8018a42:	60f8      	str	r0, [r7, #12]
 8018a44:	60b9      	str	r1, [r7, #8]
 8018a46:	607a      	str	r2, [r7, #4]
 8018a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8018a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d10a      	bne.n	8018a66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8018a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a54:	f383 8811 	msr	BASEPRI, r3
 8018a58:	f3bf 8f6f 	isb	sy
 8018a5c:	f3bf 8f4f 	dsb	sy
 8018a60:	623b      	str	r3, [r7, #32]
}
 8018a62:	bf00      	nop
 8018a64:	e7fe      	b.n	8018a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d10a      	bne.n	8018a82 <xTaskCreateStatic+0x46>
	__asm volatile
 8018a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a70:	f383 8811 	msr	BASEPRI, r3
 8018a74:	f3bf 8f6f 	isb	sy
 8018a78:	f3bf 8f4f 	dsb	sy
 8018a7c:	61fb      	str	r3, [r7, #28]
}
 8018a7e:	bf00      	nop
 8018a80:	e7fe      	b.n	8018a80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8018a82:	235c      	movs	r3, #92	; 0x5c
 8018a84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	2b5c      	cmp	r3, #92	; 0x5c
 8018a8a:	d00a      	beq.n	8018aa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8018a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a90:	f383 8811 	msr	BASEPRI, r3
 8018a94:	f3bf 8f6f 	isb	sy
 8018a98:	f3bf 8f4f 	dsb	sy
 8018a9c:	61bb      	str	r3, [r7, #24]
}
 8018a9e:	bf00      	nop
 8018aa0:	e7fe      	b.n	8018aa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8018aa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d01e      	beq.n	8018ae8 <xTaskCreateStatic+0xac>
 8018aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d01b      	beq.n	8018ae8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ab2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018ab8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abc:	2202      	movs	r2, #2
 8018abe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	9303      	str	r3, [sp, #12]
 8018ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac8:	9302      	str	r3, [sp, #8]
 8018aca:	f107 0314 	add.w	r3, r7, #20
 8018ace:	9301      	str	r3, [sp, #4]
 8018ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	683b      	ldr	r3, [r7, #0]
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	68b9      	ldr	r1, [r7, #8]
 8018ada:	68f8      	ldr	r0, [r7, #12]
 8018adc:	f000 f850 	bl	8018b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ae2:	f000 f8dd 	bl	8018ca0 <prvAddNewTaskToReadyList>
 8018ae6:	e001      	b.n	8018aec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018aec:	697b      	ldr	r3, [r7, #20]
	}
 8018aee:	4618      	mov	r0, r3
 8018af0:	3728      	adds	r7, #40	; 0x28
 8018af2:	46bd      	mov	sp, r7
 8018af4:	bd80      	pop	{r7, pc}

08018af6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8018af6:	b580      	push	{r7, lr}
 8018af8:	b08c      	sub	sp, #48	; 0x30
 8018afa:	af04      	add	r7, sp, #16
 8018afc:	60f8      	str	r0, [r7, #12]
 8018afe:	60b9      	str	r1, [r7, #8]
 8018b00:	603b      	str	r3, [r7, #0]
 8018b02:	4613      	mov	r3, r2
 8018b04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8018b06:	88fb      	ldrh	r3, [r7, #6]
 8018b08:	009b      	lsls	r3, r3, #2
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f001 fe24 	bl	801a758 <pvPortMalloc>
 8018b10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d00e      	beq.n	8018b36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8018b18:	205c      	movs	r0, #92	; 0x5c
 8018b1a:	f001 fe1d 	bl	801a758 <pvPortMalloc>
 8018b1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018b20:	69fb      	ldr	r3, [r7, #28]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d003      	beq.n	8018b2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018b26:	69fb      	ldr	r3, [r7, #28]
 8018b28:	697a      	ldr	r2, [r7, #20]
 8018b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8018b2c:	e005      	b.n	8018b3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018b2e:	6978      	ldr	r0, [r7, #20]
 8018b30:	f001 fede 	bl	801a8f0 <vPortFree>
 8018b34:	e001      	b.n	8018b3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018b36:	2300      	movs	r3, #0
 8018b38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8018b3a:	69fb      	ldr	r3, [r7, #28]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d017      	beq.n	8018b70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	2200      	movs	r2, #0
 8018b44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018b48:	88fa      	ldrh	r2, [r7, #6]
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	9303      	str	r3, [sp, #12]
 8018b4e:	69fb      	ldr	r3, [r7, #28]
 8018b50:	9302      	str	r3, [sp, #8]
 8018b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b54:	9301      	str	r3, [sp, #4]
 8018b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b58:	9300      	str	r3, [sp, #0]
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	68b9      	ldr	r1, [r7, #8]
 8018b5e:	68f8      	ldr	r0, [r7, #12]
 8018b60:	f000 f80e 	bl	8018b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018b64:	69f8      	ldr	r0, [r7, #28]
 8018b66:	f000 f89b 	bl	8018ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	61bb      	str	r3, [r7, #24]
 8018b6e:	e002      	b.n	8018b76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8018b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018b76:	69bb      	ldr	r3, [r7, #24]
	}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3720      	adds	r7, #32
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b088      	sub	sp, #32
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	60f8      	str	r0, [r7, #12]
 8018b88:	60b9      	str	r1, [r7, #8]
 8018b8a:	607a      	str	r2, [r7, #4]
 8018b8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8018b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	009b      	lsls	r3, r3, #2
 8018b96:	461a      	mov	r2, r3
 8018b98:	21a5      	movs	r1, #165	; 0xa5
 8018b9a:	f001 ffff 	bl	801ab9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018ba2:	6879      	ldr	r1, [r7, #4]
 8018ba4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018ba8:	440b      	add	r3, r1
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	4413      	add	r3, r2
 8018bae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	f023 0307 	bic.w	r3, r3, #7
 8018bb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018bb8:	69bb      	ldr	r3, [r7, #24]
 8018bba:	f003 0307 	and.w	r3, r3, #7
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d00a      	beq.n	8018bd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8018bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bc6:	f383 8811 	msr	BASEPRI, r3
 8018bca:	f3bf 8f6f 	isb	sy
 8018bce:	f3bf 8f4f 	dsb	sy
 8018bd2:	617b      	str	r3, [r7, #20]
}
 8018bd4:	bf00      	nop
 8018bd6:	e7fe      	b.n	8018bd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d01f      	beq.n	8018c1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018bde:	2300      	movs	r3, #0
 8018be0:	61fb      	str	r3, [r7, #28]
 8018be2:	e012      	b.n	8018c0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018be4:	68ba      	ldr	r2, [r7, #8]
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	4413      	add	r3, r2
 8018bea:	7819      	ldrb	r1, [r3, #0]
 8018bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bee:	69fb      	ldr	r3, [r7, #28]
 8018bf0:	4413      	add	r3, r2
 8018bf2:	3334      	adds	r3, #52	; 0x34
 8018bf4:	460a      	mov	r2, r1
 8018bf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8018bf8:	68ba      	ldr	r2, [r7, #8]
 8018bfa:	69fb      	ldr	r3, [r7, #28]
 8018bfc:	4413      	add	r3, r2
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d006      	beq.n	8018c12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8018c04:	69fb      	ldr	r3, [r7, #28]
 8018c06:	3301      	adds	r3, #1
 8018c08:	61fb      	str	r3, [r7, #28]
 8018c0a:	69fb      	ldr	r3, [r7, #28]
 8018c0c:	2b0f      	cmp	r3, #15
 8018c0e:	d9e9      	bls.n	8018be4 <prvInitialiseNewTask+0x64>
 8018c10:	e000      	b.n	8018c14 <prvInitialiseNewTask+0x94>
			{
				break;
 8018c12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8018c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c16:	2200      	movs	r2, #0
 8018c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018c1c:	e003      	b.n	8018c26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8018c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c20:	2200      	movs	r2, #0
 8018c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8018c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c28:	2b37      	cmp	r3, #55	; 0x37
 8018c2a:	d901      	bls.n	8018c30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8018c2c:	2337      	movs	r3, #55	; 0x37
 8018c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8018c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8018c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c3e:	2200      	movs	r2, #0
 8018c40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8018c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c44:	3304      	adds	r3, #4
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7ff f978 	bl	8017f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c4e:	3318      	adds	r3, #24
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7ff f973 	bl	8017f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c6e:	2200      	movs	r2, #0
 8018c70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c74:	2200      	movs	r2, #0
 8018c76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018c7a:	683a      	ldr	r2, [r7, #0]
 8018c7c:	68f9      	ldr	r1, [r7, #12]
 8018c7e:	69b8      	ldr	r0, [r7, #24]
 8018c80:	f001 fb1a 	bl	801a2b8 <pxPortInitialiseStack>
 8018c84:	4602      	mov	r2, r0
 8018c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d002      	beq.n	8018c96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018c96:	bf00      	nop
 8018c98:	3720      	adds	r7, #32
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bd80      	pop	{r7, pc}
	...

08018ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018ca8:	f001 fc34 	bl	801a514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018cac:	4b2d      	ldr	r3, [pc, #180]	; (8018d64 <prvAddNewTaskToReadyList+0xc4>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	4a2c      	ldr	r2, [pc, #176]	; (8018d64 <prvAddNewTaskToReadyList+0xc4>)
 8018cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018cb6:	4b2c      	ldr	r3, [pc, #176]	; (8018d68 <prvAddNewTaskToReadyList+0xc8>)
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d109      	bne.n	8018cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8018cbe:	4a2a      	ldr	r2, [pc, #168]	; (8018d68 <prvAddNewTaskToReadyList+0xc8>)
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018cc4:	4b27      	ldr	r3, [pc, #156]	; (8018d64 <prvAddNewTaskToReadyList+0xc4>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	2b01      	cmp	r3, #1
 8018cca:	d110      	bne.n	8018cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018ccc:	f000 fdd0 	bl	8019870 <prvInitialiseTaskLists>
 8018cd0:	e00d      	b.n	8018cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018cd2:	4b26      	ldr	r3, [pc, #152]	; (8018d6c <prvAddNewTaskToReadyList+0xcc>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d109      	bne.n	8018cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018cda:	4b23      	ldr	r3, [pc, #140]	; (8018d68 <prvAddNewTaskToReadyList+0xc8>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ce4:	429a      	cmp	r2, r3
 8018ce6:	d802      	bhi.n	8018cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018ce8:	4a1f      	ldr	r2, [pc, #124]	; (8018d68 <prvAddNewTaskToReadyList+0xc8>)
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8018cee:	4b20      	ldr	r3, [pc, #128]	; (8018d70 <prvAddNewTaskToReadyList+0xd0>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	3301      	adds	r3, #1
 8018cf4:	4a1e      	ldr	r2, [pc, #120]	; (8018d70 <prvAddNewTaskToReadyList+0xd0>)
 8018cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018cf8:	4b1d      	ldr	r3, [pc, #116]	; (8018d70 <prvAddNewTaskToReadyList+0xd0>)
 8018cfa:	681a      	ldr	r2, [r3, #0]
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d04:	4b1b      	ldr	r3, [pc, #108]	; (8018d74 <prvAddNewTaskToReadyList+0xd4>)
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	d903      	bls.n	8018d14 <prvAddNewTaskToReadyList+0x74>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d10:	4a18      	ldr	r2, [pc, #96]	; (8018d74 <prvAddNewTaskToReadyList+0xd4>)
 8018d12:	6013      	str	r3, [r2, #0]
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d18:	4613      	mov	r3, r2
 8018d1a:	009b      	lsls	r3, r3, #2
 8018d1c:	4413      	add	r3, r2
 8018d1e:	009b      	lsls	r3, r3, #2
 8018d20:	4a15      	ldr	r2, [pc, #84]	; (8018d78 <prvAddNewTaskToReadyList+0xd8>)
 8018d22:	441a      	add	r2, r3
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	3304      	adds	r3, #4
 8018d28:	4619      	mov	r1, r3
 8018d2a:	4610      	mov	r0, r2
 8018d2c:	f7ff f913 	bl	8017f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8018d30:	f001 fc20 	bl	801a574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8018d34:	4b0d      	ldr	r3, [pc, #52]	; (8018d6c <prvAddNewTaskToReadyList+0xcc>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d00e      	beq.n	8018d5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8018d3c:	4b0a      	ldr	r3, [pc, #40]	; (8018d68 <prvAddNewTaskToReadyList+0xc8>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d46:	429a      	cmp	r2, r3
 8018d48:	d207      	bcs.n	8018d5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8018d4a:	4b0c      	ldr	r3, [pc, #48]	; (8018d7c <prvAddNewTaskToReadyList+0xdc>)
 8018d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d50:	601a      	str	r2, [r3, #0]
 8018d52:	f3bf 8f4f 	dsb	sy
 8018d56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018d5a:	bf00      	nop
 8018d5c:	3708      	adds	r7, #8
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}
 8018d62:	bf00      	nop
 8018d64:	24002c58 	.word	0x24002c58
 8018d68:	24002784 	.word	0x24002784
 8018d6c:	24002c64 	.word	0x24002c64
 8018d70:	24002c74 	.word	0x24002c74
 8018d74:	24002c60 	.word	0x24002c60
 8018d78:	24002788 	.word	0x24002788
 8018d7c:	e000ed04 	.word	0xe000ed04

08018d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d017      	beq.n	8018dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018d92:	4b13      	ldr	r3, [pc, #76]	; (8018de0 <vTaskDelay+0x60>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d00a      	beq.n	8018db0 <vTaskDelay+0x30>
	__asm volatile
 8018d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d9e:	f383 8811 	msr	BASEPRI, r3
 8018da2:	f3bf 8f6f 	isb	sy
 8018da6:	f3bf 8f4f 	dsb	sy
 8018daa:	60bb      	str	r3, [r7, #8]
}
 8018dac:	bf00      	nop
 8018dae:	e7fe      	b.n	8018dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018db0:	f000 f986 	bl	80190c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018db4:	2100      	movs	r1, #0
 8018db6:	6878      	ldr	r0, [r7, #4]
 8018db8:	f000 febc 	bl	8019b34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018dbc:	f000 f98e 	bl	80190dc <xTaskResumeAll>
 8018dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d107      	bne.n	8018dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018dc8:	4b06      	ldr	r3, [pc, #24]	; (8018de4 <vTaskDelay+0x64>)
 8018dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dce:	601a      	str	r2, [r3, #0]
 8018dd0:	f3bf 8f4f 	dsb	sy
 8018dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018dd8:	bf00      	nop
 8018dda:	3710      	adds	r7, #16
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	24002c80 	.word	0x24002c80
 8018de4:	e000ed04 	.word	0xe000ed04

08018de8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8018df0:	f001 fb90 	bl	801a514 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d102      	bne.n	8018e00 <vTaskSuspend+0x18>
 8018dfa:	4b30      	ldr	r3, [pc, #192]	; (8018ebc <vTaskSuspend+0xd4>)
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	e000      	b.n	8018e02 <vTaskSuspend+0x1a>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	3304      	adds	r3, #4
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7ff f901 	bl	8018010 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d004      	beq.n	8018e20 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	3318      	adds	r3, #24
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	f7ff f8f8 	bl	8018010 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	3304      	adds	r3, #4
 8018e24:	4619      	mov	r1, r3
 8018e26:	4826      	ldr	r0, [pc, #152]	; (8018ec0 <vTaskSuspend+0xd8>)
 8018e28:	f7ff f895 	bl	8017f56 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	2b01      	cmp	r3, #1
 8018e36:	d103      	bne.n	8018e40 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8018e40:	f001 fb98 	bl	801a574 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8018e44:	4b1f      	ldr	r3, [pc, #124]	; (8018ec4 <vTaskSuspend+0xdc>)
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d005      	beq.n	8018e58 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8018e4c:	f001 fb62 	bl	801a514 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8018e50:	f000 fdac 	bl	80199ac <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8018e54:	f001 fb8e 	bl	801a574 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8018e58:	4b18      	ldr	r3, [pc, #96]	; (8018ebc <vTaskSuspend+0xd4>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	68fa      	ldr	r2, [r7, #12]
 8018e5e:	429a      	cmp	r2, r3
 8018e60:	d127      	bne.n	8018eb2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8018e62:	4b18      	ldr	r3, [pc, #96]	; (8018ec4 <vTaskSuspend+0xdc>)
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d017      	beq.n	8018e9a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8018e6a:	4b17      	ldr	r3, [pc, #92]	; (8018ec8 <vTaskSuspend+0xe0>)
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d00a      	beq.n	8018e88 <vTaskSuspend+0xa0>
	__asm volatile
 8018e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e76:	f383 8811 	msr	BASEPRI, r3
 8018e7a:	f3bf 8f6f 	isb	sy
 8018e7e:	f3bf 8f4f 	dsb	sy
 8018e82:	60bb      	str	r3, [r7, #8]
}
 8018e84:	bf00      	nop
 8018e86:	e7fe      	b.n	8018e86 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8018e88:	4b10      	ldr	r3, [pc, #64]	; (8018ecc <vTaskSuspend+0xe4>)
 8018e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e8e:	601a      	str	r2, [r3, #0]
 8018e90:	f3bf 8f4f 	dsb	sy
 8018e94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e98:	e00b      	b.n	8018eb2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8018e9a:	4b09      	ldr	r3, [pc, #36]	; (8018ec0 <vTaskSuspend+0xd8>)
 8018e9c:	681a      	ldr	r2, [r3, #0]
 8018e9e:	4b0c      	ldr	r3, [pc, #48]	; (8018ed0 <vTaskSuspend+0xe8>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	429a      	cmp	r2, r3
 8018ea4:	d103      	bne.n	8018eae <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8018ea6:	4b05      	ldr	r3, [pc, #20]	; (8018ebc <vTaskSuspend+0xd4>)
 8018ea8:	2200      	movs	r2, #0
 8018eaa:	601a      	str	r2, [r3, #0]
	}
 8018eac:	e001      	b.n	8018eb2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8018eae:	f000 fa85 	bl	80193bc <vTaskSwitchContext>
	}
 8018eb2:	bf00      	nop
 8018eb4:	3710      	adds	r7, #16
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}
 8018eba:	bf00      	nop
 8018ebc:	24002784 	.word	0x24002784
 8018ec0:	24002c44 	.word	0x24002c44
 8018ec4:	24002c64 	.word	0x24002c64
 8018ec8:	24002c80 	.word	0x24002c80
 8018ecc:	e000ed04 	.word	0xe000ed04
 8018ed0:	24002c58 	.word	0x24002c58

08018ed4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8018ed4:	b480      	push	{r7}
 8018ed6:	b087      	sub	sp, #28
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8018edc:	2300      	movs	r3, #0
 8018ede:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d10a      	bne.n	8018f00 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8018eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eee:	f383 8811 	msr	BASEPRI, r3
 8018ef2:	f3bf 8f6f 	isb	sy
 8018ef6:	f3bf 8f4f 	dsb	sy
 8018efa:	60fb      	str	r3, [r7, #12]
}
 8018efc:	bf00      	nop
 8018efe:	e7fe      	b.n	8018efe <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018f00:	693b      	ldr	r3, [r7, #16]
 8018f02:	695b      	ldr	r3, [r3, #20]
 8018f04:	4a0a      	ldr	r2, [pc, #40]	; (8018f30 <prvTaskIsTaskSuspended+0x5c>)
 8018f06:	4293      	cmp	r3, r2
 8018f08:	d10a      	bne.n	8018f20 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8018f0a:	693b      	ldr	r3, [r7, #16]
 8018f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f0e:	4a09      	ldr	r2, [pc, #36]	; (8018f34 <prvTaskIsTaskSuspended+0x60>)
 8018f10:	4293      	cmp	r3, r2
 8018f12:	d005      	beq.n	8018f20 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d101      	bne.n	8018f20 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018f20:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8018f22:	4618      	mov	r0, r3
 8018f24:	371c      	adds	r7, #28
 8018f26:	46bd      	mov	sp, r7
 8018f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2c:	4770      	bx	lr
 8018f2e:	bf00      	nop
 8018f30:	24002c44 	.word	0x24002c44
 8018f34:	24002c18 	.word	0x24002c18

08018f38 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d10a      	bne.n	8018f60 <vTaskResume+0x28>
	__asm volatile
 8018f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f4e:	f383 8811 	msr	BASEPRI, r3
 8018f52:	f3bf 8f6f 	isb	sy
 8018f56:	f3bf 8f4f 	dsb	sy
 8018f5a:	60bb      	str	r3, [r7, #8]
}
 8018f5c:	bf00      	nop
 8018f5e:	e7fe      	b.n	8018f5e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8018f60:	4b20      	ldr	r3, [pc, #128]	; (8018fe4 <vTaskResume+0xac>)
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	68fa      	ldr	r2, [r7, #12]
 8018f66:	429a      	cmp	r2, r3
 8018f68:	d038      	beq.n	8018fdc <vTaskResume+0xa4>
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d035      	beq.n	8018fdc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8018f70:	f001 fad0 	bl	801a514 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8018f74:	68f8      	ldr	r0, [r7, #12]
 8018f76:	f7ff ffad 	bl	8018ed4 <prvTaskIsTaskSuspended>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d02b      	beq.n	8018fd8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	3304      	adds	r3, #4
 8018f84:	4618      	mov	r0, r3
 8018f86:	f7ff f843 	bl	8018010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f8e:	4b16      	ldr	r3, [pc, #88]	; (8018fe8 <vTaskResume+0xb0>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	429a      	cmp	r2, r3
 8018f94:	d903      	bls.n	8018f9e <vTaskResume+0x66>
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f9a:	4a13      	ldr	r2, [pc, #76]	; (8018fe8 <vTaskResume+0xb0>)
 8018f9c:	6013      	str	r3, [r2, #0]
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fa2:	4613      	mov	r3, r2
 8018fa4:	009b      	lsls	r3, r3, #2
 8018fa6:	4413      	add	r3, r2
 8018fa8:	009b      	lsls	r3, r3, #2
 8018faa:	4a10      	ldr	r2, [pc, #64]	; (8018fec <vTaskResume+0xb4>)
 8018fac:	441a      	add	r2, r3
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	3304      	adds	r3, #4
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	4610      	mov	r0, r2
 8018fb6:	f7fe ffce 	bl	8017f56 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fbe:	4b09      	ldr	r3, [pc, #36]	; (8018fe4 <vTaskResume+0xac>)
 8018fc0:	681b      	ldr	r3, [r3, #0]
 8018fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	d307      	bcc.n	8018fd8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8018fc8:	4b09      	ldr	r3, [pc, #36]	; (8018ff0 <vTaskResume+0xb8>)
 8018fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018fce:	601a      	str	r2, [r3, #0]
 8018fd0:	f3bf 8f4f 	dsb	sy
 8018fd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8018fd8:	f001 facc 	bl	801a574 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018fdc:	bf00      	nop
 8018fde:	3710      	adds	r7, #16
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	24002784 	.word	0x24002784
 8018fe8:	24002c60 	.word	0x24002c60
 8018fec:	24002788 	.word	0x24002788
 8018ff0:	e000ed04 	.word	0xe000ed04

08018ff4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b08a      	sub	sp, #40	; 0x28
 8018ff8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018ffe:	2300      	movs	r3, #0
 8019000:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019002:	463a      	mov	r2, r7
 8019004:	1d39      	adds	r1, r7, #4
 8019006:	f107 0308 	add.w	r3, r7, #8
 801900a:	4618      	mov	r0, r3
 801900c:	f7fe fcd6 	bl	80179bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019010:	6839      	ldr	r1, [r7, #0]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	68ba      	ldr	r2, [r7, #8]
 8019016:	9202      	str	r2, [sp, #8]
 8019018:	9301      	str	r3, [sp, #4]
 801901a:	2300      	movs	r3, #0
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	2300      	movs	r3, #0
 8019020:	460a      	mov	r2, r1
 8019022:	4921      	ldr	r1, [pc, #132]	; (80190a8 <vTaskStartScheduler+0xb4>)
 8019024:	4821      	ldr	r0, [pc, #132]	; (80190ac <vTaskStartScheduler+0xb8>)
 8019026:	f7ff fd09 	bl	8018a3c <xTaskCreateStatic>
 801902a:	4603      	mov	r3, r0
 801902c:	4a20      	ldr	r2, [pc, #128]	; (80190b0 <vTaskStartScheduler+0xbc>)
 801902e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019030:	4b1f      	ldr	r3, [pc, #124]	; (80190b0 <vTaskStartScheduler+0xbc>)
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d002      	beq.n	801903e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019038:	2301      	movs	r3, #1
 801903a:	617b      	str	r3, [r7, #20]
 801903c:	e001      	b.n	8019042 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801903e:	2300      	movs	r3, #0
 8019040:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	2b01      	cmp	r3, #1
 8019046:	d102      	bne.n	801904e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019048:	f000 fdc8 	bl	8019bdc <xTimerCreateTimerTask>
 801904c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801904e:	697b      	ldr	r3, [r7, #20]
 8019050:	2b01      	cmp	r3, #1
 8019052:	d116      	bne.n	8019082 <vTaskStartScheduler+0x8e>
	__asm volatile
 8019054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019058:	f383 8811 	msr	BASEPRI, r3
 801905c:	f3bf 8f6f 	isb	sy
 8019060:	f3bf 8f4f 	dsb	sy
 8019064:	613b      	str	r3, [r7, #16]
}
 8019066:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019068:	4b12      	ldr	r3, [pc, #72]	; (80190b4 <vTaskStartScheduler+0xc0>)
 801906a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801906e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019070:	4b11      	ldr	r3, [pc, #68]	; (80190b8 <vTaskStartScheduler+0xc4>)
 8019072:	2201      	movs	r2, #1
 8019074:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019076:	4b11      	ldr	r3, [pc, #68]	; (80190bc <vTaskStartScheduler+0xc8>)
 8019078:	2200      	movs	r2, #0
 801907a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801907c:	f001 f9a8 	bl	801a3d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019080:	e00e      	b.n	80190a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019088:	d10a      	bne.n	80190a0 <vTaskStartScheduler+0xac>
	__asm volatile
 801908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801908e:	f383 8811 	msr	BASEPRI, r3
 8019092:	f3bf 8f6f 	isb	sy
 8019096:	f3bf 8f4f 	dsb	sy
 801909a:	60fb      	str	r3, [r7, #12]
}
 801909c:	bf00      	nop
 801909e:	e7fe      	b.n	801909e <vTaskStartScheduler+0xaa>
}
 80190a0:	bf00      	nop
 80190a2:	3718      	adds	r7, #24
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}
 80190a8:	0801b810 	.word	0x0801b810
 80190ac:	08019841 	.word	0x08019841
 80190b0:	24002c7c 	.word	0x24002c7c
 80190b4:	24002c78 	.word	0x24002c78
 80190b8:	24002c64 	.word	0x24002c64
 80190bc:	24002c5c 	.word	0x24002c5c

080190c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80190c0:	b480      	push	{r7}
 80190c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80190c4:	4b04      	ldr	r3, [pc, #16]	; (80190d8 <vTaskSuspendAll+0x18>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	3301      	adds	r3, #1
 80190ca:	4a03      	ldr	r2, [pc, #12]	; (80190d8 <vTaskSuspendAll+0x18>)
 80190cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80190ce:	bf00      	nop
 80190d0:	46bd      	mov	sp, r7
 80190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d6:	4770      	bx	lr
 80190d8:	24002c80 	.word	0x24002c80

080190dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80190e2:	2300      	movs	r3, #0
 80190e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80190e6:	2300      	movs	r3, #0
 80190e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80190ea:	4b42      	ldr	r3, [pc, #264]	; (80191f4 <xTaskResumeAll+0x118>)
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d10a      	bne.n	8019108 <xTaskResumeAll+0x2c>
	__asm volatile
 80190f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190f6:	f383 8811 	msr	BASEPRI, r3
 80190fa:	f3bf 8f6f 	isb	sy
 80190fe:	f3bf 8f4f 	dsb	sy
 8019102:	603b      	str	r3, [r7, #0]
}
 8019104:	bf00      	nop
 8019106:	e7fe      	b.n	8019106 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019108:	f001 fa04 	bl	801a514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801910c:	4b39      	ldr	r3, [pc, #228]	; (80191f4 <xTaskResumeAll+0x118>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	3b01      	subs	r3, #1
 8019112:	4a38      	ldr	r2, [pc, #224]	; (80191f4 <xTaskResumeAll+0x118>)
 8019114:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019116:	4b37      	ldr	r3, [pc, #220]	; (80191f4 <xTaskResumeAll+0x118>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d162      	bne.n	80191e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801911e:	4b36      	ldr	r3, [pc, #216]	; (80191f8 <xTaskResumeAll+0x11c>)
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	2b00      	cmp	r3, #0
 8019124:	d05e      	beq.n	80191e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019126:	e02f      	b.n	8019188 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019128:	4b34      	ldr	r3, [pc, #208]	; (80191fc <xTaskResumeAll+0x120>)
 801912a:	68db      	ldr	r3, [r3, #12]
 801912c:	68db      	ldr	r3, [r3, #12]
 801912e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	3318      	adds	r3, #24
 8019134:	4618      	mov	r0, r3
 8019136:	f7fe ff6b 	bl	8018010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	3304      	adds	r3, #4
 801913e:	4618      	mov	r0, r3
 8019140:	f7fe ff66 	bl	8018010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019148:	4b2d      	ldr	r3, [pc, #180]	; (8019200 <xTaskResumeAll+0x124>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	429a      	cmp	r2, r3
 801914e:	d903      	bls.n	8019158 <xTaskResumeAll+0x7c>
 8019150:	68fb      	ldr	r3, [r7, #12]
 8019152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019154:	4a2a      	ldr	r2, [pc, #168]	; (8019200 <xTaskResumeAll+0x124>)
 8019156:	6013      	str	r3, [r2, #0]
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801915c:	4613      	mov	r3, r2
 801915e:	009b      	lsls	r3, r3, #2
 8019160:	4413      	add	r3, r2
 8019162:	009b      	lsls	r3, r3, #2
 8019164:	4a27      	ldr	r2, [pc, #156]	; (8019204 <xTaskResumeAll+0x128>)
 8019166:	441a      	add	r2, r3
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	3304      	adds	r3, #4
 801916c:	4619      	mov	r1, r3
 801916e:	4610      	mov	r0, r2
 8019170:	f7fe fef1 	bl	8017f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019178:	4b23      	ldr	r3, [pc, #140]	; (8019208 <xTaskResumeAll+0x12c>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801917e:	429a      	cmp	r2, r3
 8019180:	d302      	bcc.n	8019188 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019182:	4b22      	ldr	r3, [pc, #136]	; (801920c <xTaskResumeAll+0x130>)
 8019184:	2201      	movs	r2, #1
 8019186:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019188:	4b1c      	ldr	r3, [pc, #112]	; (80191fc <xTaskResumeAll+0x120>)
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d1cb      	bne.n	8019128 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	2b00      	cmp	r3, #0
 8019194:	d001      	beq.n	801919a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019196:	f000 fc09 	bl	80199ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801919a:	4b1d      	ldr	r3, [pc, #116]	; (8019210 <xTaskResumeAll+0x134>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d010      	beq.n	80191c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80191a6:	f000 f847 	bl	8019238 <xTaskIncrementTick>
 80191aa:	4603      	mov	r3, r0
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d002      	beq.n	80191b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80191b0:	4b16      	ldr	r3, [pc, #88]	; (801920c <xTaskResumeAll+0x130>)
 80191b2:	2201      	movs	r2, #1
 80191b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	3b01      	subs	r3, #1
 80191ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d1f1      	bne.n	80191a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80191c2:	4b13      	ldr	r3, [pc, #76]	; (8019210 <xTaskResumeAll+0x134>)
 80191c4:	2200      	movs	r2, #0
 80191c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80191c8:	4b10      	ldr	r3, [pc, #64]	; (801920c <xTaskResumeAll+0x130>)
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d009      	beq.n	80191e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80191d0:	2301      	movs	r3, #1
 80191d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80191d4:	4b0f      	ldr	r3, [pc, #60]	; (8019214 <xTaskResumeAll+0x138>)
 80191d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191da:	601a      	str	r2, [r3, #0]
 80191dc:	f3bf 8f4f 	dsb	sy
 80191e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80191e4:	f001 f9c6 	bl	801a574 <vPortExitCritical>

	return xAlreadyYielded;
 80191e8:	68bb      	ldr	r3, [r7, #8]
}
 80191ea:	4618      	mov	r0, r3
 80191ec:	3710      	adds	r7, #16
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}
 80191f2:	bf00      	nop
 80191f4:	24002c80 	.word	0x24002c80
 80191f8:	24002c58 	.word	0x24002c58
 80191fc:	24002c18 	.word	0x24002c18
 8019200:	24002c60 	.word	0x24002c60
 8019204:	24002788 	.word	0x24002788
 8019208:	24002784 	.word	0x24002784
 801920c:	24002c6c 	.word	0x24002c6c
 8019210:	24002c68 	.word	0x24002c68
 8019214:	e000ed04 	.word	0xe000ed04

08019218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019218:	b480      	push	{r7}
 801921a:	b083      	sub	sp, #12
 801921c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801921e:	4b05      	ldr	r3, [pc, #20]	; (8019234 <xTaskGetTickCount+0x1c>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019224:	687b      	ldr	r3, [r7, #4]
}
 8019226:	4618      	mov	r0, r3
 8019228:	370c      	adds	r7, #12
 801922a:	46bd      	mov	sp, r7
 801922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019230:	4770      	bx	lr
 8019232:	bf00      	nop
 8019234:	24002c5c 	.word	0x24002c5c

08019238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b086      	sub	sp, #24
 801923c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801923e:	2300      	movs	r3, #0
 8019240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019242:	4b53      	ldr	r3, [pc, #332]	; (8019390 <xTaskIncrementTick+0x158>)
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	2b00      	cmp	r3, #0
 8019248:	f040 8095 	bne.w	8019376 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801924c:	4b51      	ldr	r3, [pc, #324]	; (8019394 <xTaskIncrementTick+0x15c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	3301      	adds	r3, #1
 8019252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019254:	4a4f      	ldr	r2, [pc, #316]	; (8019394 <xTaskIncrementTick+0x15c>)
 8019256:	693b      	ldr	r3, [r7, #16]
 8019258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801925a:	693b      	ldr	r3, [r7, #16]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d120      	bne.n	80192a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019260:	4b4d      	ldr	r3, [pc, #308]	; (8019398 <xTaskIncrementTick+0x160>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d00a      	beq.n	8019280 <xTaskIncrementTick+0x48>
	__asm volatile
 801926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801926e:	f383 8811 	msr	BASEPRI, r3
 8019272:	f3bf 8f6f 	isb	sy
 8019276:	f3bf 8f4f 	dsb	sy
 801927a:	603b      	str	r3, [r7, #0]
}
 801927c:	bf00      	nop
 801927e:	e7fe      	b.n	801927e <xTaskIncrementTick+0x46>
 8019280:	4b45      	ldr	r3, [pc, #276]	; (8019398 <xTaskIncrementTick+0x160>)
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	60fb      	str	r3, [r7, #12]
 8019286:	4b45      	ldr	r3, [pc, #276]	; (801939c <xTaskIncrementTick+0x164>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	4a43      	ldr	r2, [pc, #268]	; (8019398 <xTaskIncrementTick+0x160>)
 801928c:	6013      	str	r3, [r2, #0]
 801928e:	4a43      	ldr	r2, [pc, #268]	; (801939c <xTaskIncrementTick+0x164>)
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	6013      	str	r3, [r2, #0]
 8019294:	4b42      	ldr	r3, [pc, #264]	; (80193a0 <xTaskIncrementTick+0x168>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	3301      	adds	r3, #1
 801929a:	4a41      	ldr	r2, [pc, #260]	; (80193a0 <xTaskIncrementTick+0x168>)
 801929c:	6013      	str	r3, [r2, #0]
 801929e:	f000 fb85 	bl	80199ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80192a2:	4b40      	ldr	r3, [pc, #256]	; (80193a4 <xTaskIncrementTick+0x16c>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	693a      	ldr	r2, [r7, #16]
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d349      	bcc.n	8019340 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80192ac:	4b3a      	ldr	r3, [pc, #232]	; (8019398 <xTaskIncrementTick+0x160>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d104      	bne.n	80192c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80192b6:	4b3b      	ldr	r3, [pc, #236]	; (80193a4 <xTaskIncrementTick+0x16c>)
 80192b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80192bc:	601a      	str	r2, [r3, #0]
					break;
 80192be:	e03f      	b.n	8019340 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80192c0:	4b35      	ldr	r3, [pc, #212]	; (8019398 <xTaskIncrementTick+0x160>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	68db      	ldr	r3, [r3, #12]
 80192c6:	68db      	ldr	r3, [r3, #12]
 80192c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80192ca:	68bb      	ldr	r3, [r7, #8]
 80192cc:	685b      	ldr	r3, [r3, #4]
 80192ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80192d0:	693a      	ldr	r2, [r7, #16]
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	429a      	cmp	r2, r3
 80192d6:	d203      	bcs.n	80192e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80192d8:	4a32      	ldr	r2, [pc, #200]	; (80193a4 <xTaskIncrementTick+0x16c>)
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80192de:	e02f      	b.n	8019340 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80192e0:	68bb      	ldr	r3, [r7, #8]
 80192e2:	3304      	adds	r3, #4
 80192e4:	4618      	mov	r0, r3
 80192e6:	f7fe fe93 	bl	8018010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80192ea:	68bb      	ldr	r3, [r7, #8]
 80192ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d004      	beq.n	80192fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80192f2:	68bb      	ldr	r3, [r7, #8]
 80192f4:	3318      	adds	r3, #24
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fe fe8a 	bl	8018010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80192fc:	68bb      	ldr	r3, [r7, #8]
 80192fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019300:	4b29      	ldr	r3, [pc, #164]	; (80193a8 <xTaskIncrementTick+0x170>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	429a      	cmp	r2, r3
 8019306:	d903      	bls.n	8019310 <xTaskIncrementTick+0xd8>
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801930c:	4a26      	ldr	r2, [pc, #152]	; (80193a8 <xTaskIncrementTick+0x170>)
 801930e:	6013      	str	r3, [r2, #0]
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019314:	4613      	mov	r3, r2
 8019316:	009b      	lsls	r3, r3, #2
 8019318:	4413      	add	r3, r2
 801931a:	009b      	lsls	r3, r3, #2
 801931c:	4a23      	ldr	r2, [pc, #140]	; (80193ac <xTaskIncrementTick+0x174>)
 801931e:	441a      	add	r2, r3
 8019320:	68bb      	ldr	r3, [r7, #8]
 8019322:	3304      	adds	r3, #4
 8019324:	4619      	mov	r1, r3
 8019326:	4610      	mov	r0, r2
 8019328:	f7fe fe15 	bl	8017f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801932c:	68bb      	ldr	r3, [r7, #8]
 801932e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019330:	4b1f      	ldr	r3, [pc, #124]	; (80193b0 <xTaskIncrementTick+0x178>)
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019336:	429a      	cmp	r2, r3
 8019338:	d3b8      	bcc.n	80192ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801933a:	2301      	movs	r3, #1
 801933c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801933e:	e7b5      	b.n	80192ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019340:	4b1b      	ldr	r3, [pc, #108]	; (80193b0 <xTaskIncrementTick+0x178>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019346:	4919      	ldr	r1, [pc, #100]	; (80193ac <xTaskIncrementTick+0x174>)
 8019348:	4613      	mov	r3, r2
 801934a:	009b      	lsls	r3, r3, #2
 801934c:	4413      	add	r3, r2
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	440b      	add	r3, r1
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	2b01      	cmp	r3, #1
 8019356:	d901      	bls.n	801935c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8019358:	2301      	movs	r3, #1
 801935a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801935c:	4b15      	ldr	r3, [pc, #84]	; (80193b4 <xTaskIncrementTick+0x17c>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d101      	bne.n	8019368 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8019364:	f7e9 f8e2 	bl	800252c <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019368:	4b13      	ldr	r3, [pc, #76]	; (80193b8 <xTaskIncrementTick+0x180>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d009      	beq.n	8019384 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8019370:	2301      	movs	r3, #1
 8019372:	617b      	str	r3, [r7, #20]
 8019374:	e006      	b.n	8019384 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019376:	4b0f      	ldr	r3, [pc, #60]	; (80193b4 <xTaskIncrementTick+0x17c>)
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	3301      	adds	r3, #1
 801937c:	4a0d      	ldr	r2, [pc, #52]	; (80193b4 <xTaskIncrementTick+0x17c>)
 801937e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8019380:	f7e9 f8d4 	bl	800252c <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8019384:	697b      	ldr	r3, [r7, #20]
}
 8019386:	4618      	mov	r0, r3
 8019388:	3718      	adds	r7, #24
 801938a:	46bd      	mov	sp, r7
 801938c:	bd80      	pop	{r7, pc}
 801938e:	bf00      	nop
 8019390:	24002c80 	.word	0x24002c80
 8019394:	24002c5c 	.word	0x24002c5c
 8019398:	24002c10 	.word	0x24002c10
 801939c:	24002c14 	.word	0x24002c14
 80193a0:	24002c70 	.word	0x24002c70
 80193a4:	24002c78 	.word	0x24002c78
 80193a8:	24002c60 	.word	0x24002c60
 80193ac:	24002788 	.word	0x24002788
 80193b0:	24002784 	.word	0x24002784
 80193b4:	24002c68 	.word	0x24002c68
 80193b8:	24002c6c 	.word	0x24002c6c

080193bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80193bc:	b580      	push	{r7, lr}
 80193be:	b084      	sub	sp, #16
 80193c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80193c2:	4b2f      	ldr	r3, [pc, #188]	; (8019480 <vTaskSwitchContext+0xc4>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d003      	beq.n	80193d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80193ca:	4b2e      	ldr	r3, [pc, #184]	; (8019484 <vTaskSwitchContext+0xc8>)
 80193cc:	2201      	movs	r2, #1
 80193ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80193d0:	e052      	b.n	8019478 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 80193d2:	4b2c      	ldr	r3, [pc, #176]	; (8019484 <vTaskSwitchContext+0xc8>)
 80193d4:	2200      	movs	r2, #0
 80193d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80193d8:	4b2b      	ldr	r3, [pc, #172]	; (8019488 <vTaskSwitchContext+0xcc>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	681a      	ldr	r2, [r3, #0]
 80193de:	4b2a      	ldr	r3, [pc, #168]	; (8019488 <vTaskSwitchContext+0xcc>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d808      	bhi.n	80193fa <vTaskSwitchContext+0x3e>
 80193e8:	4b27      	ldr	r3, [pc, #156]	; (8019488 <vTaskSwitchContext+0xcc>)
 80193ea:	681a      	ldr	r2, [r3, #0]
 80193ec:	4b26      	ldr	r3, [pc, #152]	; (8019488 <vTaskSwitchContext+0xcc>)
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	3334      	adds	r3, #52	; 0x34
 80193f2:	4619      	mov	r1, r3
 80193f4:	4610      	mov	r0, r2
 80193f6:	f7e9 f8a7 	bl	8002548 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80193fa:	4b24      	ldr	r3, [pc, #144]	; (801948c <vTaskSwitchContext+0xd0>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	60fb      	str	r3, [r7, #12]
 8019400:	e010      	b.n	8019424 <vTaskSwitchContext+0x68>
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d10a      	bne.n	801941e <vTaskSwitchContext+0x62>
	__asm volatile
 8019408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801940c:	f383 8811 	msr	BASEPRI, r3
 8019410:	f3bf 8f6f 	isb	sy
 8019414:	f3bf 8f4f 	dsb	sy
 8019418:	607b      	str	r3, [r7, #4]
}
 801941a:	bf00      	nop
 801941c:	e7fe      	b.n	801941c <vTaskSwitchContext+0x60>
 801941e:	68fb      	ldr	r3, [r7, #12]
 8019420:	3b01      	subs	r3, #1
 8019422:	60fb      	str	r3, [r7, #12]
 8019424:	491a      	ldr	r1, [pc, #104]	; (8019490 <vTaskSwitchContext+0xd4>)
 8019426:	68fa      	ldr	r2, [r7, #12]
 8019428:	4613      	mov	r3, r2
 801942a:	009b      	lsls	r3, r3, #2
 801942c:	4413      	add	r3, r2
 801942e:	009b      	lsls	r3, r3, #2
 8019430:	440b      	add	r3, r1
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d0e4      	beq.n	8019402 <vTaskSwitchContext+0x46>
 8019438:	68fa      	ldr	r2, [r7, #12]
 801943a:	4613      	mov	r3, r2
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	4413      	add	r3, r2
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	4a13      	ldr	r2, [pc, #76]	; (8019490 <vTaskSwitchContext+0xd4>)
 8019444:	4413      	add	r3, r2
 8019446:	60bb      	str	r3, [r7, #8]
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	685b      	ldr	r3, [r3, #4]
 801944c:	685a      	ldr	r2, [r3, #4]
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	605a      	str	r2, [r3, #4]
 8019452:	68bb      	ldr	r3, [r7, #8]
 8019454:	685a      	ldr	r2, [r3, #4]
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	3308      	adds	r3, #8
 801945a:	429a      	cmp	r2, r3
 801945c:	d104      	bne.n	8019468 <vTaskSwitchContext+0xac>
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	685b      	ldr	r3, [r3, #4]
 8019462:	685a      	ldr	r2, [r3, #4]
 8019464:	68bb      	ldr	r3, [r7, #8]
 8019466:	605a      	str	r2, [r3, #4]
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	685b      	ldr	r3, [r3, #4]
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	4a06      	ldr	r2, [pc, #24]	; (8019488 <vTaskSwitchContext+0xcc>)
 8019470:	6013      	str	r3, [r2, #0]
 8019472:	4a06      	ldr	r2, [pc, #24]	; (801948c <vTaskSwitchContext+0xd0>)
 8019474:	68fb      	ldr	r3, [r7, #12]
 8019476:	6013      	str	r3, [r2, #0]
}
 8019478:	bf00      	nop
 801947a:	3710      	adds	r7, #16
 801947c:	46bd      	mov	sp, r7
 801947e:	bd80      	pop	{r7, pc}
 8019480:	24002c80 	.word	0x24002c80
 8019484:	24002c6c 	.word	0x24002c6c
 8019488:	24002784 	.word	0x24002784
 801948c:	24002c60 	.word	0x24002c60
 8019490:	24002788 	.word	0x24002788

08019494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019494:	b580      	push	{r7, lr}
 8019496:	b084      	sub	sp, #16
 8019498:	af00      	add	r7, sp, #0
 801949a:	6078      	str	r0, [r7, #4]
 801949c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d10a      	bne.n	80194ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80194a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194a8:	f383 8811 	msr	BASEPRI, r3
 80194ac:	f3bf 8f6f 	isb	sy
 80194b0:	f3bf 8f4f 	dsb	sy
 80194b4:	60fb      	str	r3, [r7, #12]
}
 80194b6:	bf00      	nop
 80194b8:	e7fe      	b.n	80194b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80194ba:	4b07      	ldr	r3, [pc, #28]	; (80194d8 <vTaskPlaceOnEventList+0x44>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	3318      	adds	r3, #24
 80194c0:	4619      	mov	r1, r3
 80194c2:	6878      	ldr	r0, [r7, #4]
 80194c4:	f7fe fd6b 	bl	8017f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80194c8:	2101      	movs	r1, #1
 80194ca:	6838      	ldr	r0, [r7, #0]
 80194cc:	f000 fb32 	bl	8019b34 <prvAddCurrentTaskToDelayedList>
}
 80194d0:	bf00      	nop
 80194d2:	3710      	adds	r7, #16
 80194d4:	46bd      	mov	sp, r7
 80194d6:	bd80      	pop	{r7, pc}
 80194d8:	24002784 	.word	0x24002784

080194dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b086      	sub	sp, #24
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	60f8      	str	r0, [r7, #12]
 80194e4:	60b9      	str	r1, [r7, #8]
 80194e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d10a      	bne.n	8019504 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80194ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194f2:	f383 8811 	msr	BASEPRI, r3
 80194f6:	f3bf 8f6f 	isb	sy
 80194fa:	f3bf 8f4f 	dsb	sy
 80194fe:	617b      	str	r3, [r7, #20]
}
 8019500:	bf00      	nop
 8019502:	e7fe      	b.n	8019502 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8019504:	4b11      	ldr	r3, [pc, #68]	; (801954c <vTaskPlaceOnUnorderedEventList+0x70>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d10a      	bne.n	8019522 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019510:	f383 8811 	msr	BASEPRI, r3
 8019514:	f3bf 8f6f 	isb	sy
 8019518:	f3bf 8f4f 	dsb	sy
 801951c:	613b      	str	r3, [r7, #16]
}
 801951e:	bf00      	nop
 8019520:	e7fe      	b.n	8019520 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8019522:	4b0b      	ldr	r3, [pc, #44]	; (8019550 <vTaskPlaceOnUnorderedEventList+0x74>)
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	68ba      	ldr	r2, [r7, #8]
 8019528:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801952c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801952e:	4b08      	ldr	r3, [pc, #32]	; (8019550 <vTaskPlaceOnUnorderedEventList+0x74>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	3318      	adds	r3, #24
 8019534:	4619      	mov	r1, r3
 8019536:	68f8      	ldr	r0, [r7, #12]
 8019538:	f7fe fd0d 	bl	8017f56 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801953c:	2101      	movs	r1, #1
 801953e:	6878      	ldr	r0, [r7, #4]
 8019540:	f000 faf8 	bl	8019b34 <prvAddCurrentTaskToDelayedList>
}
 8019544:	bf00      	nop
 8019546:	3718      	adds	r7, #24
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	24002c80 	.word	0x24002c80
 8019550:	24002784 	.word	0x24002784

08019554 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019554:	b580      	push	{r7, lr}
 8019556:	b086      	sub	sp, #24
 8019558:	af00      	add	r7, sp, #0
 801955a:	60f8      	str	r0, [r7, #12]
 801955c:	60b9      	str	r1, [r7, #8]
 801955e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d10a      	bne.n	801957c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8019566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801956a:	f383 8811 	msr	BASEPRI, r3
 801956e:	f3bf 8f6f 	isb	sy
 8019572:	f3bf 8f4f 	dsb	sy
 8019576:	617b      	str	r3, [r7, #20]
}
 8019578:	bf00      	nop
 801957a:	e7fe      	b.n	801957a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801957c:	4b0a      	ldr	r3, [pc, #40]	; (80195a8 <vTaskPlaceOnEventListRestricted+0x54>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	3318      	adds	r3, #24
 8019582:	4619      	mov	r1, r3
 8019584:	68f8      	ldr	r0, [r7, #12]
 8019586:	f7fe fce6 	bl	8017f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d002      	beq.n	8019596 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019594:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019596:	6879      	ldr	r1, [r7, #4]
 8019598:	68b8      	ldr	r0, [r7, #8]
 801959a:	f000 facb 	bl	8019b34 <prvAddCurrentTaskToDelayedList>
	}
 801959e:	bf00      	nop
 80195a0:	3718      	adds	r7, #24
 80195a2:	46bd      	mov	sp, r7
 80195a4:	bd80      	pop	{r7, pc}
 80195a6:	bf00      	nop
 80195a8:	24002784 	.word	0x24002784

080195ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80195ac:	b580      	push	{r7, lr}
 80195ae:	b086      	sub	sp, #24
 80195b0:	af00      	add	r7, sp, #0
 80195b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	68db      	ldr	r3, [r3, #12]
 80195b8:	68db      	ldr	r3, [r3, #12]
 80195ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80195bc:	693b      	ldr	r3, [r7, #16]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d10a      	bne.n	80195d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80195c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195c6:	f383 8811 	msr	BASEPRI, r3
 80195ca:	f3bf 8f6f 	isb	sy
 80195ce:	f3bf 8f4f 	dsb	sy
 80195d2:	60fb      	str	r3, [r7, #12]
}
 80195d4:	bf00      	nop
 80195d6:	e7fe      	b.n	80195d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80195d8:	693b      	ldr	r3, [r7, #16]
 80195da:	3318      	adds	r3, #24
 80195dc:	4618      	mov	r0, r3
 80195de:	f7fe fd17 	bl	8018010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80195e2:	4b1e      	ldr	r3, [pc, #120]	; (801965c <xTaskRemoveFromEventList+0xb0>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d11d      	bne.n	8019626 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80195ea:	693b      	ldr	r3, [r7, #16]
 80195ec:	3304      	adds	r3, #4
 80195ee:	4618      	mov	r0, r3
 80195f0:	f7fe fd0e 	bl	8018010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80195f4:	693b      	ldr	r3, [r7, #16]
 80195f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80195f8:	4b19      	ldr	r3, [pc, #100]	; (8019660 <xTaskRemoveFromEventList+0xb4>)
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	429a      	cmp	r2, r3
 80195fe:	d903      	bls.n	8019608 <xTaskRemoveFromEventList+0x5c>
 8019600:	693b      	ldr	r3, [r7, #16]
 8019602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019604:	4a16      	ldr	r2, [pc, #88]	; (8019660 <xTaskRemoveFromEventList+0xb4>)
 8019606:	6013      	str	r3, [r2, #0]
 8019608:	693b      	ldr	r3, [r7, #16]
 801960a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801960c:	4613      	mov	r3, r2
 801960e:	009b      	lsls	r3, r3, #2
 8019610:	4413      	add	r3, r2
 8019612:	009b      	lsls	r3, r3, #2
 8019614:	4a13      	ldr	r2, [pc, #76]	; (8019664 <xTaskRemoveFromEventList+0xb8>)
 8019616:	441a      	add	r2, r3
 8019618:	693b      	ldr	r3, [r7, #16]
 801961a:	3304      	adds	r3, #4
 801961c:	4619      	mov	r1, r3
 801961e:	4610      	mov	r0, r2
 8019620:	f7fe fc99 	bl	8017f56 <vListInsertEnd>
 8019624:	e005      	b.n	8019632 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	3318      	adds	r3, #24
 801962a:	4619      	mov	r1, r3
 801962c:	480e      	ldr	r0, [pc, #56]	; (8019668 <xTaskRemoveFromEventList+0xbc>)
 801962e:	f7fe fc92 	bl	8017f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019632:	693b      	ldr	r3, [r7, #16]
 8019634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019636:	4b0d      	ldr	r3, [pc, #52]	; (801966c <xTaskRemoveFromEventList+0xc0>)
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801963c:	429a      	cmp	r2, r3
 801963e:	d905      	bls.n	801964c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019640:	2301      	movs	r3, #1
 8019642:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019644:	4b0a      	ldr	r3, [pc, #40]	; (8019670 <xTaskRemoveFromEventList+0xc4>)
 8019646:	2201      	movs	r2, #1
 8019648:	601a      	str	r2, [r3, #0]
 801964a:	e001      	b.n	8019650 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801964c:	2300      	movs	r3, #0
 801964e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019650:	697b      	ldr	r3, [r7, #20]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3718      	adds	r7, #24
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}
 801965a:	bf00      	nop
 801965c:	24002c80 	.word	0x24002c80
 8019660:	24002c60 	.word	0x24002c60
 8019664:	24002788 	.word	0x24002788
 8019668:	24002c18 	.word	0x24002c18
 801966c:	24002784 	.word	0x24002784
 8019670:	24002c6c 	.word	0x24002c6c

08019674 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b086      	sub	sp, #24
 8019678:	af00      	add	r7, sp, #0
 801967a:	6078      	str	r0, [r7, #4]
 801967c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801967e:	4b29      	ldr	r3, [pc, #164]	; (8019724 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8019680:	681b      	ldr	r3, [r3, #0]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d10a      	bne.n	801969c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8019686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801968a:	f383 8811 	msr	BASEPRI, r3
 801968e:	f3bf 8f6f 	isb	sy
 8019692:	f3bf 8f4f 	dsb	sy
 8019696:	613b      	str	r3, [r7, #16]
}
 8019698:	bf00      	nop
 801969a:	e7fe      	b.n	801969a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801969c:	683b      	ldr	r3, [r7, #0]
 801969e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	68db      	ldr	r3, [r3, #12]
 80196aa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d10a      	bne.n	80196c8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80196b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196b6:	f383 8811 	msr	BASEPRI, r3
 80196ba:	f3bf 8f6f 	isb	sy
 80196be:	f3bf 8f4f 	dsb	sy
 80196c2:	60fb      	str	r3, [r7, #12]
}
 80196c4:	bf00      	nop
 80196c6:	e7fe      	b.n	80196c6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f7fe fca1 	bl	8018010 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	3304      	adds	r3, #4
 80196d2:	4618      	mov	r0, r3
 80196d4:	f7fe fc9c 	bl	8018010 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80196d8:	697b      	ldr	r3, [r7, #20]
 80196da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196dc:	4b12      	ldr	r3, [pc, #72]	; (8019728 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	429a      	cmp	r2, r3
 80196e2:	d903      	bls.n	80196ec <vTaskRemoveFromUnorderedEventList+0x78>
 80196e4:	697b      	ldr	r3, [r7, #20]
 80196e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196e8:	4a0f      	ldr	r2, [pc, #60]	; (8019728 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80196ea:	6013      	str	r3, [r2, #0]
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196f0:	4613      	mov	r3, r2
 80196f2:	009b      	lsls	r3, r3, #2
 80196f4:	4413      	add	r3, r2
 80196f6:	009b      	lsls	r3, r3, #2
 80196f8:	4a0c      	ldr	r2, [pc, #48]	; (801972c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80196fa:	441a      	add	r2, r3
 80196fc:	697b      	ldr	r3, [r7, #20]
 80196fe:	3304      	adds	r3, #4
 8019700:	4619      	mov	r1, r3
 8019702:	4610      	mov	r0, r2
 8019704:	f7fe fc27 	bl	8017f56 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019708:	697b      	ldr	r3, [r7, #20]
 801970a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801970c:	4b08      	ldr	r3, [pc, #32]	; (8019730 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019712:	429a      	cmp	r2, r3
 8019714:	d902      	bls.n	801971c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8019716:	4b07      	ldr	r3, [pc, #28]	; (8019734 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8019718:	2201      	movs	r2, #1
 801971a:	601a      	str	r2, [r3, #0]
	}
}
 801971c:	bf00      	nop
 801971e:	3718      	adds	r7, #24
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}
 8019724:	24002c80 	.word	0x24002c80
 8019728:	24002c60 	.word	0x24002c60
 801972c:	24002788 	.word	0x24002788
 8019730:	24002784 	.word	0x24002784
 8019734:	24002c6c 	.word	0x24002c6c

08019738 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019738:	b480      	push	{r7}
 801973a:	b083      	sub	sp, #12
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019740:	4b06      	ldr	r3, [pc, #24]	; (801975c <vTaskInternalSetTimeOutState+0x24>)
 8019742:	681a      	ldr	r2, [r3, #0]
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019748:	4b05      	ldr	r3, [pc, #20]	; (8019760 <vTaskInternalSetTimeOutState+0x28>)
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	605a      	str	r2, [r3, #4]
}
 8019750:	bf00      	nop
 8019752:	370c      	adds	r7, #12
 8019754:	46bd      	mov	sp, r7
 8019756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975a:	4770      	bx	lr
 801975c:	24002c70 	.word	0x24002c70
 8019760:	24002c5c 	.word	0x24002c5c

08019764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b088      	sub	sp, #32
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d10a      	bne.n	801978a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019778:	f383 8811 	msr	BASEPRI, r3
 801977c:	f3bf 8f6f 	isb	sy
 8019780:	f3bf 8f4f 	dsb	sy
 8019784:	613b      	str	r3, [r7, #16]
}
 8019786:	bf00      	nop
 8019788:	e7fe      	b.n	8019788 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801978a:	683b      	ldr	r3, [r7, #0]
 801978c:	2b00      	cmp	r3, #0
 801978e:	d10a      	bne.n	80197a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019794:	f383 8811 	msr	BASEPRI, r3
 8019798:	f3bf 8f6f 	isb	sy
 801979c:	f3bf 8f4f 	dsb	sy
 80197a0:	60fb      	str	r3, [r7, #12]
}
 80197a2:	bf00      	nop
 80197a4:	e7fe      	b.n	80197a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80197a6:	f000 feb5 	bl	801a514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80197aa:	4b1d      	ldr	r3, [pc, #116]	; (8019820 <xTaskCheckForTimeOut+0xbc>)
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	685b      	ldr	r3, [r3, #4]
 80197b4:	69ba      	ldr	r2, [r7, #24]
 80197b6:	1ad3      	subs	r3, r2, r3
 80197b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	681b      	ldr	r3, [r3, #0]
 80197be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197c2:	d102      	bne.n	80197ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80197c4:	2300      	movs	r3, #0
 80197c6:	61fb      	str	r3, [r7, #28]
 80197c8:	e023      	b.n	8019812 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681a      	ldr	r2, [r3, #0]
 80197ce:	4b15      	ldr	r3, [pc, #84]	; (8019824 <xTaskCheckForTimeOut+0xc0>)
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	429a      	cmp	r2, r3
 80197d4:	d007      	beq.n	80197e6 <xTaskCheckForTimeOut+0x82>
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	685b      	ldr	r3, [r3, #4]
 80197da:	69ba      	ldr	r2, [r7, #24]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d302      	bcc.n	80197e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80197e0:	2301      	movs	r3, #1
 80197e2:	61fb      	str	r3, [r7, #28]
 80197e4:	e015      	b.n	8019812 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	697a      	ldr	r2, [r7, #20]
 80197ec:	429a      	cmp	r2, r3
 80197ee:	d20b      	bcs.n	8019808 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80197f0:	683b      	ldr	r3, [r7, #0]
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	1ad2      	subs	r2, r2, r3
 80197f8:	683b      	ldr	r3, [r7, #0]
 80197fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80197fc:	6878      	ldr	r0, [r7, #4]
 80197fe:	f7ff ff9b 	bl	8019738 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019802:	2300      	movs	r3, #0
 8019804:	61fb      	str	r3, [r7, #28]
 8019806:	e004      	b.n	8019812 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	2200      	movs	r2, #0
 801980c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801980e:	2301      	movs	r3, #1
 8019810:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019812:	f000 feaf 	bl	801a574 <vPortExitCritical>

	return xReturn;
 8019816:	69fb      	ldr	r3, [r7, #28]
}
 8019818:	4618      	mov	r0, r3
 801981a:	3720      	adds	r7, #32
 801981c:	46bd      	mov	sp, r7
 801981e:	bd80      	pop	{r7, pc}
 8019820:	24002c5c 	.word	0x24002c5c
 8019824:	24002c70 	.word	0x24002c70

08019828 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019828:	b480      	push	{r7}
 801982a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801982c:	4b03      	ldr	r3, [pc, #12]	; (801983c <vTaskMissedYield+0x14>)
 801982e:	2201      	movs	r2, #1
 8019830:	601a      	str	r2, [r3, #0]
}
 8019832:	bf00      	nop
 8019834:	46bd      	mov	sp, r7
 8019836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983a:	4770      	bx	lr
 801983c:	24002c6c 	.word	0x24002c6c

08019840 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019848:	f000 f852 	bl	80198f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801984c:	4b06      	ldr	r3, [pc, #24]	; (8019868 <prvIdleTask+0x28>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	2b01      	cmp	r3, #1
 8019852:	d9f9      	bls.n	8019848 <prvIdleTask+0x8>
			{
				taskYIELD();
 8019854:	4b05      	ldr	r3, [pc, #20]	; (801986c <prvIdleTask+0x2c>)
 8019856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801985a:	601a      	str	r2, [r3, #0]
 801985c:	f3bf 8f4f 	dsb	sy
 8019860:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8019864:	e7f0      	b.n	8019848 <prvIdleTask+0x8>
 8019866:	bf00      	nop
 8019868:	24002788 	.word	0x24002788
 801986c:	e000ed04 	.word	0xe000ed04

08019870 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b082      	sub	sp, #8
 8019874:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019876:	2300      	movs	r3, #0
 8019878:	607b      	str	r3, [r7, #4]
 801987a:	e00c      	b.n	8019896 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801987c:	687a      	ldr	r2, [r7, #4]
 801987e:	4613      	mov	r3, r2
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	4413      	add	r3, r2
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	4a12      	ldr	r2, [pc, #72]	; (80198d0 <prvInitialiseTaskLists+0x60>)
 8019888:	4413      	add	r3, r2
 801988a:	4618      	mov	r0, r3
 801988c:	f7fe fb36 	bl	8017efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	3301      	adds	r3, #1
 8019894:	607b      	str	r3, [r7, #4]
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	2b37      	cmp	r3, #55	; 0x37
 801989a:	d9ef      	bls.n	801987c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801989c:	480d      	ldr	r0, [pc, #52]	; (80198d4 <prvInitialiseTaskLists+0x64>)
 801989e:	f7fe fb2d 	bl	8017efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80198a2:	480d      	ldr	r0, [pc, #52]	; (80198d8 <prvInitialiseTaskLists+0x68>)
 80198a4:	f7fe fb2a 	bl	8017efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80198a8:	480c      	ldr	r0, [pc, #48]	; (80198dc <prvInitialiseTaskLists+0x6c>)
 80198aa:	f7fe fb27 	bl	8017efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80198ae:	480c      	ldr	r0, [pc, #48]	; (80198e0 <prvInitialiseTaskLists+0x70>)
 80198b0:	f7fe fb24 	bl	8017efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80198b4:	480b      	ldr	r0, [pc, #44]	; (80198e4 <prvInitialiseTaskLists+0x74>)
 80198b6:	f7fe fb21 	bl	8017efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80198ba:	4b0b      	ldr	r3, [pc, #44]	; (80198e8 <prvInitialiseTaskLists+0x78>)
 80198bc:	4a05      	ldr	r2, [pc, #20]	; (80198d4 <prvInitialiseTaskLists+0x64>)
 80198be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80198c0:	4b0a      	ldr	r3, [pc, #40]	; (80198ec <prvInitialiseTaskLists+0x7c>)
 80198c2:	4a05      	ldr	r2, [pc, #20]	; (80198d8 <prvInitialiseTaskLists+0x68>)
 80198c4:	601a      	str	r2, [r3, #0]
}
 80198c6:	bf00      	nop
 80198c8:	3708      	adds	r7, #8
 80198ca:	46bd      	mov	sp, r7
 80198cc:	bd80      	pop	{r7, pc}
 80198ce:	bf00      	nop
 80198d0:	24002788 	.word	0x24002788
 80198d4:	24002be8 	.word	0x24002be8
 80198d8:	24002bfc 	.word	0x24002bfc
 80198dc:	24002c18 	.word	0x24002c18
 80198e0:	24002c2c 	.word	0x24002c2c
 80198e4:	24002c44 	.word	0x24002c44
 80198e8:	24002c10 	.word	0x24002c10
 80198ec:	24002c14 	.word	0x24002c14

080198f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b082      	sub	sp, #8
 80198f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80198f6:	e019      	b.n	801992c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80198f8:	f000 fe0c 	bl	801a514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80198fc:	4b10      	ldr	r3, [pc, #64]	; (8019940 <prvCheckTasksWaitingTermination+0x50>)
 80198fe:	68db      	ldr	r3, [r3, #12]
 8019900:	68db      	ldr	r3, [r3, #12]
 8019902:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	3304      	adds	r3, #4
 8019908:	4618      	mov	r0, r3
 801990a:	f7fe fb81 	bl	8018010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801990e:	4b0d      	ldr	r3, [pc, #52]	; (8019944 <prvCheckTasksWaitingTermination+0x54>)
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	3b01      	subs	r3, #1
 8019914:	4a0b      	ldr	r2, [pc, #44]	; (8019944 <prvCheckTasksWaitingTermination+0x54>)
 8019916:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8019918:	4b0b      	ldr	r3, [pc, #44]	; (8019948 <prvCheckTasksWaitingTermination+0x58>)
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	3b01      	subs	r3, #1
 801991e:	4a0a      	ldr	r2, [pc, #40]	; (8019948 <prvCheckTasksWaitingTermination+0x58>)
 8019920:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8019922:	f000 fe27 	bl	801a574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8019926:	6878      	ldr	r0, [r7, #4]
 8019928:	f000 f810 	bl	801994c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801992c:	4b06      	ldr	r3, [pc, #24]	; (8019948 <prvCheckTasksWaitingTermination+0x58>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	2b00      	cmp	r3, #0
 8019932:	d1e1      	bne.n	80198f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8019934:	bf00      	nop
 8019936:	bf00      	nop
 8019938:	3708      	adds	r7, #8
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop
 8019940:	24002c2c 	.word	0x24002c2c
 8019944:	24002c58 	.word	0x24002c58
 8019948:	24002c40 	.word	0x24002c40

0801994c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801994c:	b580      	push	{r7, lr}
 801994e:	b084      	sub	sp, #16
 8019950:	af00      	add	r7, sp, #0
 8019952:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801995a:	2b00      	cmp	r3, #0
 801995c:	d108      	bne.n	8019970 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019962:	4618      	mov	r0, r3
 8019964:	f000 ffc4 	bl	801a8f0 <vPortFree>
				vPortFree( pxTCB );
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f000 ffc1 	bl	801a8f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801996e:	e018      	b.n	80199a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019976:	2b01      	cmp	r3, #1
 8019978:	d103      	bne.n	8019982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801997a:	6878      	ldr	r0, [r7, #4]
 801997c:	f000 ffb8 	bl	801a8f0 <vPortFree>
	}
 8019980:	e00f      	b.n	80199a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8019988:	2b02      	cmp	r3, #2
 801998a:	d00a      	beq.n	80199a2 <prvDeleteTCB+0x56>
	__asm volatile
 801998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019990:	f383 8811 	msr	BASEPRI, r3
 8019994:	f3bf 8f6f 	isb	sy
 8019998:	f3bf 8f4f 	dsb	sy
 801999c:	60fb      	str	r3, [r7, #12]
}
 801999e:	bf00      	nop
 80199a0:	e7fe      	b.n	80199a0 <prvDeleteTCB+0x54>
	}
 80199a2:	bf00      	nop
 80199a4:	3710      	adds	r7, #16
 80199a6:	46bd      	mov	sp, r7
 80199a8:	bd80      	pop	{r7, pc}
	...

080199ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80199ac:	b480      	push	{r7}
 80199ae:	b083      	sub	sp, #12
 80199b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80199b2:	4b0c      	ldr	r3, [pc, #48]	; (80199e4 <prvResetNextTaskUnblockTime+0x38>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d104      	bne.n	80199c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80199bc:	4b0a      	ldr	r3, [pc, #40]	; (80199e8 <prvResetNextTaskUnblockTime+0x3c>)
 80199be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80199c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80199c4:	e008      	b.n	80199d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80199c6:	4b07      	ldr	r3, [pc, #28]	; (80199e4 <prvResetNextTaskUnblockTime+0x38>)
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	68db      	ldr	r3, [r3, #12]
 80199cc:	68db      	ldr	r3, [r3, #12]
 80199ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	685b      	ldr	r3, [r3, #4]
 80199d4:	4a04      	ldr	r2, [pc, #16]	; (80199e8 <prvResetNextTaskUnblockTime+0x3c>)
 80199d6:	6013      	str	r3, [r2, #0]
}
 80199d8:	bf00      	nop
 80199da:	370c      	adds	r7, #12
 80199dc:	46bd      	mov	sp, r7
 80199de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e2:	4770      	bx	lr
 80199e4:	24002c10 	.word	0x24002c10
 80199e8:	24002c78 	.word	0x24002c78

080199ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80199ec:	b480      	push	{r7}
 80199ee:	b083      	sub	sp, #12
 80199f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80199f2:	4b0b      	ldr	r3, [pc, #44]	; (8019a20 <xTaskGetSchedulerState+0x34>)
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d102      	bne.n	8019a00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80199fa:	2301      	movs	r3, #1
 80199fc:	607b      	str	r3, [r7, #4]
 80199fe:	e008      	b.n	8019a12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a00:	4b08      	ldr	r3, [pc, #32]	; (8019a24 <xTaskGetSchedulerState+0x38>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d102      	bne.n	8019a0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8019a08:	2302      	movs	r3, #2
 8019a0a:	607b      	str	r3, [r7, #4]
 8019a0c:	e001      	b.n	8019a12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8019a0e:	2300      	movs	r3, #0
 8019a10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8019a12:	687b      	ldr	r3, [r7, #4]
	}
 8019a14:	4618      	mov	r0, r3
 8019a16:	370c      	adds	r7, #12
 8019a18:	46bd      	mov	sp, r7
 8019a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1e:	4770      	bx	lr
 8019a20:	24002c64 	.word	0x24002c64
 8019a24:	24002c80 	.word	0x24002c80

08019a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8019a28:	b580      	push	{r7, lr}
 8019a2a:	b086      	sub	sp, #24
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8019a34:	2300      	movs	r3, #0
 8019a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d056      	beq.n	8019aec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8019a3e:	4b2e      	ldr	r3, [pc, #184]	; (8019af8 <xTaskPriorityDisinherit+0xd0>)
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	693a      	ldr	r2, [r7, #16]
 8019a44:	429a      	cmp	r2, r3
 8019a46:	d00a      	beq.n	8019a5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8019a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a4c:	f383 8811 	msr	BASEPRI, r3
 8019a50:	f3bf 8f6f 	isb	sy
 8019a54:	f3bf 8f4f 	dsb	sy
 8019a58:	60fb      	str	r3, [r7, #12]
}
 8019a5a:	bf00      	nop
 8019a5c:	e7fe      	b.n	8019a5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8019a5e:	693b      	ldr	r3, [r7, #16]
 8019a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d10a      	bne.n	8019a7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8019a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a6a:	f383 8811 	msr	BASEPRI, r3
 8019a6e:	f3bf 8f6f 	isb	sy
 8019a72:	f3bf 8f4f 	dsb	sy
 8019a76:	60bb      	str	r3, [r7, #8]
}
 8019a78:	bf00      	nop
 8019a7a:	e7fe      	b.n	8019a7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8019a7c:	693b      	ldr	r3, [r7, #16]
 8019a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a80:	1e5a      	subs	r2, r3, #1
 8019a82:	693b      	ldr	r3, [r7, #16]
 8019a84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019a86:	693b      	ldr	r3, [r7, #16]
 8019a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019a8a:	693b      	ldr	r3, [r7, #16]
 8019a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a8e:	429a      	cmp	r2, r3
 8019a90:	d02c      	beq.n	8019aec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019a92:	693b      	ldr	r3, [r7, #16]
 8019a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d128      	bne.n	8019aec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019a9a:	693b      	ldr	r3, [r7, #16]
 8019a9c:	3304      	adds	r3, #4
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7fe fab6 	bl	8018010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019aa4:	693b      	ldr	r3, [r7, #16]
 8019aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019aac:	693b      	ldr	r3, [r7, #16]
 8019aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019ab4:	693b      	ldr	r3, [r7, #16]
 8019ab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8019ab8:	693b      	ldr	r3, [r7, #16]
 8019aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019abc:	4b0f      	ldr	r3, [pc, #60]	; (8019afc <xTaskPriorityDisinherit+0xd4>)
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	429a      	cmp	r2, r3
 8019ac2:	d903      	bls.n	8019acc <xTaskPriorityDisinherit+0xa4>
 8019ac4:	693b      	ldr	r3, [r7, #16]
 8019ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ac8:	4a0c      	ldr	r2, [pc, #48]	; (8019afc <xTaskPriorityDisinherit+0xd4>)
 8019aca:	6013      	str	r3, [r2, #0]
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ad0:	4613      	mov	r3, r2
 8019ad2:	009b      	lsls	r3, r3, #2
 8019ad4:	4413      	add	r3, r2
 8019ad6:	009b      	lsls	r3, r3, #2
 8019ad8:	4a09      	ldr	r2, [pc, #36]	; (8019b00 <xTaskPriorityDisinherit+0xd8>)
 8019ada:	441a      	add	r2, r3
 8019adc:	693b      	ldr	r3, [r7, #16]
 8019ade:	3304      	adds	r3, #4
 8019ae0:	4619      	mov	r1, r3
 8019ae2:	4610      	mov	r0, r2
 8019ae4:	f7fe fa37 	bl	8017f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8019ae8:	2301      	movs	r3, #1
 8019aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019aec:	697b      	ldr	r3, [r7, #20]
	}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3718      	adds	r7, #24
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	24002784 	.word	0x24002784
 8019afc:	24002c60 	.word	0x24002c60
 8019b00:	24002788 	.word	0x24002788

08019b04 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8019b04:	b480      	push	{r7}
 8019b06:	b083      	sub	sp, #12
 8019b08:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8019b0a:	4b09      	ldr	r3, [pc, #36]	; (8019b30 <uxTaskResetEventItemValue+0x2c>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	699b      	ldr	r3, [r3, #24]
 8019b10:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b12:	4b07      	ldr	r3, [pc, #28]	; (8019b30 <uxTaskResetEventItemValue+0x2c>)
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b18:	4b05      	ldr	r3, [pc, #20]	; (8019b30 <uxTaskResetEventItemValue+0x2c>)
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8019b20:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8019b22:	687b      	ldr	r3, [r7, #4]
}
 8019b24:	4618      	mov	r0, r3
 8019b26:	370c      	adds	r7, #12
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b2e:	4770      	bx	lr
 8019b30:	24002784 	.word	0x24002784

08019b34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8019b34:	b580      	push	{r7, lr}
 8019b36:	b084      	sub	sp, #16
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
 8019b3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8019b3e:	4b21      	ldr	r3, [pc, #132]	; (8019bc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019b44:	4b20      	ldr	r3, [pc, #128]	; (8019bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	3304      	adds	r3, #4
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7fe fa60 	bl	8018010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019b56:	d10a      	bne.n	8019b6e <prvAddCurrentTaskToDelayedList+0x3a>
 8019b58:	683b      	ldr	r3, [r7, #0]
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d007      	beq.n	8019b6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019b5e:	4b1a      	ldr	r3, [pc, #104]	; (8019bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	3304      	adds	r3, #4
 8019b64:	4619      	mov	r1, r3
 8019b66:	4819      	ldr	r0, [pc, #100]	; (8019bcc <prvAddCurrentTaskToDelayedList+0x98>)
 8019b68:	f7fe f9f5 	bl	8017f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019b6c:	e026      	b.n	8019bbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8019b6e:	68fa      	ldr	r2, [r7, #12]
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	4413      	add	r3, r2
 8019b74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019b76:	4b14      	ldr	r3, [pc, #80]	; (8019bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	68ba      	ldr	r2, [r7, #8]
 8019b7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8019b7e:	68ba      	ldr	r2, [r7, #8]
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	429a      	cmp	r2, r3
 8019b84:	d209      	bcs.n	8019b9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019b86:	4b12      	ldr	r3, [pc, #72]	; (8019bd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019b88:	681a      	ldr	r2, [r3, #0]
 8019b8a:	4b0f      	ldr	r3, [pc, #60]	; (8019bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	3304      	adds	r3, #4
 8019b90:	4619      	mov	r1, r3
 8019b92:	4610      	mov	r0, r2
 8019b94:	f7fe fa03 	bl	8017f9e <vListInsert>
}
 8019b98:	e010      	b.n	8019bbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019b9a:	4b0e      	ldr	r3, [pc, #56]	; (8019bd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8019b9c:	681a      	ldr	r2, [r3, #0]
 8019b9e:	4b0a      	ldr	r3, [pc, #40]	; (8019bc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	3304      	adds	r3, #4
 8019ba4:	4619      	mov	r1, r3
 8019ba6:	4610      	mov	r0, r2
 8019ba8:	f7fe f9f9 	bl	8017f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8019bac:	4b0a      	ldr	r3, [pc, #40]	; (8019bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	68ba      	ldr	r2, [r7, #8]
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	d202      	bcs.n	8019bbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019bb6:	4a08      	ldr	r2, [pc, #32]	; (8019bd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019bb8:	68bb      	ldr	r3, [r7, #8]
 8019bba:	6013      	str	r3, [r2, #0]
}
 8019bbc:	bf00      	nop
 8019bbe:	3710      	adds	r7, #16
 8019bc0:	46bd      	mov	sp, r7
 8019bc2:	bd80      	pop	{r7, pc}
 8019bc4:	24002c5c 	.word	0x24002c5c
 8019bc8:	24002784 	.word	0x24002784
 8019bcc:	24002c44 	.word	0x24002c44
 8019bd0:	24002c14 	.word	0x24002c14
 8019bd4:	24002c10 	.word	0x24002c10
 8019bd8:	24002c78 	.word	0x24002c78

08019bdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8019bdc:	b580      	push	{r7, lr}
 8019bde:	b08a      	sub	sp, #40	; 0x28
 8019be0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019be2:	2300      	movs	r3, #0
 8019be4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019be6:	f000 fb07 	bl	801a1f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8019bea:	4b1c      	ldr	r3, [pc, #112]	; (8019c5c <xTimerCreateTimerTask+0x80>)
 8019bec:	681b      	ldr	r3, [r3, #0]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d021      	beq.n	8019c36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8019bfa:	1d3a      	adds	r2, r7, #4
 8019bfc:	f107 0108 	add.w	r1, r7, #8
 8019c00:	f107 030c 	add.w	r3, r7, #12
 8019c04:	4618      	mov	r0, r3
 8019c06:	f7fd fef3 	bl	80179f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8019c0a:	6879      	ldr	r1, [r7, #4]
 8019c0c:	68bb      	ldr	r3, [r7, #8]
 8019c0e:	68fa      	ldr	r2, [r7, #12]
 8019c10:	9202      	str	r2, [sp, #8]
 8019c12:	9301      	str	r3, [sp, #4]
 8019c14:	2302      	movs	r3, #2
 8019c16:	9300      	str	r3, [sp, #0]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	460a      	mov	r2, r1
 8019c1c:	4910      	ldr	r1, [pc, #64]	; (8019c60 <xTimerCreateTimerTask+0x84>)
 8019c1e:	4811      	ldr	r0, [pc, #68]	; (8019c64 <xTimerCreateTimerTask+0x88>)
 8019c20:	f7fe ff0c 	bl	8018a3c <xTaskCreateStatic>
 8019c24:	4603      	mov	r3, r0
 8019c26:	4a10      	ldr	r2, [pc, #64]	; (8019c68 <xTimerCreateTimerTask+0x8c>)
 8019c28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8019c2a:	4b0f      	ldr	r3, [pc, #60]	; (8019c68 <xTimerCreateTimerTask+0x8c>)
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d001      	beq.n	8019c36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8019c32:	2301      	movs	r3, #1
 8019c34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d10a      	bne.n	8019c52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8019c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c40:	f383 8811 	msr	BASEPRI, r3
 8019c44:	f3bf 8f6f 	isb	sy
 8019c48:	f3bf 8f4f 	dsb	sy
 8019c4c:	613b      	str	r3, [r7, #16]
}
 8019c4e:	bf00      	nop
 8019c50:	e7fe      	b.n	8019c50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8019c52:	697b      	ldr	r3, [r7, #20]
}
 8019c54:	4618      	mov	r0, r3
 8019c56:	3718      	adds	r7, #24
 8019c58:	46bd      	mov	sp, r7
 8019c5a:	bd80      	pop	{r7, pc}
 8019c5c:	24002cb4 	.word	0x24002cb4
 8019c60:	0801b818 	.word	0x0801b818
 8019c64:	08019da1 	.word	0x08019da1
 8019c68:	24002cb8 	.word	0x24002cb8

08019c6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b08a      	sub	sp, #40	; 0x28
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	60f8      	str	r0, [r7, #12]
 8019c74:	60b9      	str	r1, [r7, #8]
 8019c76:	607a      	str	r2, [r7, #4]
 8019c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8019c7a:	2300      	movs	r3, #0
 8019c7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	d10a      	bne.n	8019c9a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c88:	f383 8811 	msr	BASEPRI, r3
 8019c8c:	f3bf 8f6f 	isb	sy
 8019c90:	f3bf 8f4f 	dsb	sy
 8019c94:	623b      	str	r3, [r7, #32]
}
 8019c96:	bf00      	nop
 8019c98:	e7fe      	b.n	8019c98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8019c9a:	4b1a      	ldr	r3, [pc, #104]	; (8019d04 <xTimerGenericCommand+0x98>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d02a      	beq.n	8019cf8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019ca2:	68bb      	ldr	r3, [r7, #8]
 8019ca4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019caa:	68fb      	ldr	r3, [r7, #12]
 8019cac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	2b05      	cmp	r3, #5
 8019cb2:	dc18      	bgt.n	8019ce6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019cb4:	f7ff fe9a 	bl	80199ec <xTaskGetSchedulerState>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	2b02      	cmp	r3, #2
 8019cbc:	d109      	bne.n	8019cd2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019cbe:	4b11      	ldr	r3, [pc, #68]	; (8019d04 <xTimerGenericCommand+0x98>)
 8019cc0:	6818      	ldr	r0, [r3, #0]
 8019cc2:	f107 0110 	add.w	r1, r7, #16
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019cca:	f7fe facf 	bl	801826c <xQueueGenericSend>
 8019cce:	6278      	str	r0, [r7, #36]	; 0x24
 8019cd0:	e012      	b.n	8019cf8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019cd2:	4b0c      	ldr	r3, [pc, #48]	; (8019d04 <xTimerGenericCommand+0x98>)
 8019cd4:	6818      	ldr	r0, [r3, #0]
 8019cd6:	f107 0110 	add.w	r1, r7, #16
 8019cda:	2300      	movs	r3, #0
 8019cdc:	2200      	movs	r2, #0
 8019cde:	f7fe fac5 	bl	801826c <xQueueGenericSend>
 8019ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8019ce4:	e008      	b.n	8019cf8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019ce6:	4b07      	ldr	r3, [pc, #28]	; (8019d04 <xTimerGenericCommand+0x98>)
 8019ce8:	6818      	ldr	r0, [r3, #0]
 8019cea:	f107 0110 	add.w	r1, r7, #16
 8019cee:	2300      	movs	r3, #0
 8019cf0:	683a      	ldr	r2, [r7, #0]
 8019cf2:	f7fe fbb9 	bl	8018468 <xQueueGenericSendFromISR>
 8019cf6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3728      	adds	r7, #40	; 0x28
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}
 8019d02:	bf00      	nop
 8019d04:	24002cb4 	.word	0x24002cb4

08019d08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8019d08:	b580      	push	{r7, lr}
 8019d0a:	b088      	sub	sp, #32
 8019d0c:	af02      	add	r7, sp, #8
 8019d0e:	6078      	str	r0, [r7, #4]
 8019d10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019d12:	4b22      	ldr	r3, [pc, #136]	; (8019d9c <prvProcessExpiredTimer+0x94>)
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	68db      	ldr	r3, [r3, #12]
 8019d18:	68db      	ldr	r3, [r3, #12]
 8019d1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019d1c:	697b      	ldr	r3, [r7, #20]
 8019d1e:	3304      	adds	r3, #4
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7fe f975 	bl	8018010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019d26:	697b      	ldr	r3, [r7, #20]
 8019d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d2c:	f003 0304 	and.w	r3, r3, #4
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d022      	beq.n	8019d7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019d34:	697b      	ldr	r3, [r7, #20]
 8019d36:	699a      	ldr	r2, [r3, #24]
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	18d1      	adds	r1, r2, r3
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	683a      	ldr	r2, [r7, #0]
 8019d40:	6978      	ldr	r0, [r7, #20]
 8019d42:	f000 f8d1 	bl	8019ee8 <prvInsertTimerInActiveList>
 8019d46:	4603      	mov	r3, r0
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d01f      	beq.n	8019d8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019d4c:	2300      	movs	r3, #0
 8019d4e:	9300      	str	r3, [sp, #0]
 8019d50:	2300      	movs	r3, #0
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	2100      	movs	r1, #0
 8019d56:	6978      	ldr	r0, [r7, #20]
 8019d58:	f7ff ff88 	bl	8019c6c <xTimerGenericCommand>
 8019d5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8019d5e:	693b      	ldr	r3, [r7, #16]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d113      	bne.n	8019d8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d68:	f383 8811 	msr	BASEPRI, r3
 8019d6c:	f3bf 8f6f 	isb	sy
 8019d70:	f3bf 8f4f 	dsb	sy
 8019d74:	60fb      	str	r3, [r7, #12]
}
 8019d76:	bf00      	nop
 8019d78:	e7fe      	b.n	8019d78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019d80:	f023 0301 	bic.w	r3, r3, #1
 8019d84:	b2da      	uxtb	r2, r3
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019d8c:	697b      	ldr	r3, [r7, #20]
 8019d8e:	6a1b      	ldr	r3, [r3, #32]
 8019d90:	6978      	ldr	r0, [r7, #20]
 8019d92:	4798      	blx	r3
}
 8019d94:	bf00      	nop
 8019d96:	3718      	adds	r7, #24
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	24002cac 	.word	0x24002cac

08019da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b084      	sub	sp, #16
 8019da4:	af00      	add	r7, sp, #0
 8019da6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019da8:	f107 0308 	add.w	r3, r7, #8
 8019dac:	4618      	mov	r0, r3
 8019dae:	f000 f857 	bl	8019e60 <prvGetNextExpireTime>
 8019db2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	4619      	mov	r1, r3
 8019db8:	68f8      	ldr	r0, [r7, #12]
 8019dba:	f000 f803 	bl	8019dc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019dbe:	f000 f8d5 	bl	8019f6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019dc2:	e7f1      	b.n	8019da8 <prvTimerTask+0x8>

08019dc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b084      	sub	sp, #16
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019dce:	f7ff f977 	bl	80190c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019dd2:	f107 0308 	add.w	r3, r7, #8
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	f000 f866 	bl	8019ea8 <prvSampleTimeNow>
 8019ddc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019dde:	68bb      	ldr	r3, [r7, #8]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d130      	bne.n	8019e46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d10a      	bne.n	8019e00 <prvProcessTimerOrBlockTask+0x3c>
 8019dea:	687a      	ldr	r2, [r7, #4]
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	429a      	cmp	r2, r3
 8019df0:	d806      	bhi.n	8019e00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019df2:	f7ff f973 	bl	80190dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019df6:	68f9      	ldr	r1, [r7, #12]
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f7ff ff85 	bl	8019d08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019dfe:	e024      	b.n	8019e4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d008      	beq.n	8019e18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8019e06:	4b13      	ldr	r3, [pc, #76]	; (8019e54 <prvProcessTimerOrBlockTask+0x90>)
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d101      	bne.n	8019e14 <prvProcessTimerOrBlockTask+0x50>
 8019e10:	2301      	movs	r3, #1
 8019e12:	e000      	b.n	8019e16 <prvProcessTimerOrBlockTask+0x52>
 8019e14:	2300      	movs	r3, #0
 8019e16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019e18:	4b0f      	ldr	r3, [pc, #60]	; (8019e58 <prvProcessTimerOrBlockTask+0x94>)
 8019e1a:	6818      	ldr	r0, [r3, #0]
 8019e1c:	687a      	ldr	r2, [r7, #4]
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	1ad3      	subs	r3, r2, r3
 8019e22:	683a      	ldr	r2, [r7, #0]
 8019e24:	4619      	mov	r1, r3
 8019e26:	f7fe fdd5 	bl	80189d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019e2a:	f7ff f957 	bl	80190dc <xTaskResumeAll>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d10a      	bne.n	8019e4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8019e34:	4b09      	ldr	r3, [pc, #36]	; (8019e5c <prvProcessTimerOrBlockTask+0x98>)
 8019e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e3a:	601a      	str	r2, [r3, #0]
 8019e3c:	f3bf 8f4f 	dsb	sy
 8019e40:	f3bf 8f6f 	isb	sy
}
 8019e44:	e001      	b.n	8019e4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8019e46:	f7ff f949 	bl	80190dc <xTaskResumeAll>
}
 8019e4a:	bf00      	nop
 8019e4c:	3710      	adds	r7, #16
 8019e4e:	46bd      	mov	sp, r7
 8019e50:	bd80      	pop	{r7, pc}
 8019e52:	bf00      	nop
 8019e54:	24002cb0 	.word	0x24002cb0
 8019e58:	24002cb4 	.word	0x24002cb4
 8019e5c:	e000ed04 	.word	0xe000ed04

08019e60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019e60:	b480      	push	{r7}
 8019e62:	b085      	sub	sp, #20
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019e68:	4b0e      	ldr	r3, [pc, #56]	; (8019ea4 <prvGetNextExpireTime+0x44>)
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d101      	bne.n	8019e76 <prvGetNextExpireTime+0x16>
 8019e72:	2201      	movs	r2, #1
 8019e74:	e000      	b.n	8019e78 <prvGetNextExpireTime+0x18>
 8019e76:	2200      	movs	r2, #0
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d105      	bne.n	8019e90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019e84:	4b07      	ldr	r3, [pc, #28]	; (8019ea4 <prvGetNextExpireTime+0x44>)
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	68db      	ldr	r3, [r3, #12]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	60fb      	str	r3, [r7, #12]
 8019e8e:	e001      	b.n	8019e94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019e90:	2300      	movs	r3, #0
 8019e92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019e94:	68fb      	ldr	r3, [r7, #12]
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	3714      	adds	r7, #20
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea0:	4770      	bx	lr
 8019ea2:	bf00      	nop
 8019ea4:	24002cac 	.word	0x24002cac

08019ea8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b084      	sub	sp, #16
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019eb0:	f7ff f9b2 	bl	8019218 <xTaskGetTickCount>
 8019eb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019eb6:	4b0b      	ldr	r3, [pc, #44]	; (8019ee4 <prvSampleTimeNow+0x3c>)
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	68fa      	ldr	r2, [r7, #12]
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	d205      	bcs.n	8019ecc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019ec0:	f000 f936 	bl	801a130 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2201      	movs	r2, #1
 8019ec8:	601a      	str	r2, [r3, #0]
 8019eca:	e002      	b.n	8019ed2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019ed2:	4a04      	ldr	r2, [pc, #16]	; (8019ee4 <prvSampleTimeNow+0x3c>)
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3710      	adds	r7, #16
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}
 8019ee2:	bf00      	nop
 8019ee4:	24002cbc 	.word	0x24002cbc

08019ee8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b086      	sub	sp, #24
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	60f8      	str	r0, [r7, #12]
 8019ef0:	60b9      	str	r1, [r7, #8]
 8019ef2:	607a      	str	r2, [r7, #4]
 8019ef4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019efa:	68fb      	ldr	r3, [r7, #12]
 8019efc:	68ba      	ldr	r2, [r7, #8]
 8019efe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	68fa      	ldr	r2, [r7, #12]
 8019f04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8019f06:	68ba      	ldr	r2, [r7, #8]
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d812      	bhi.n	8019f34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f0e:	687a      	ldr	r2, [r7, #4]
 8019f10:	683b      	ldr	r3, [r7, #0]
 8019f12:	1ad2      	subs	r2, r2, r3
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	699b      	ldr	r3, [r3, #24]
 8019f18:	429a      	cmp	r2, r3
 8019f1a:	d302      	bcc.n	8019f22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	617b      	str	r3, [r7, #20]
 8019f20:	e01b      	b.n	8019f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8019f22:	4b10      	ldr	r3, [pc, #64]	; (8019f64 <prvInsertTimerInActiveList+0x7c>)
 8019f24:	681a      	ldr	r2, [r3, #0]
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	3304      	adds	r3, #4
 8019f2a:	4619      	mov	r1, r3
 8019f2c:	4610      	mov	r0, r2
 8019f2e:	f7fe f836 	bl	8017f9e <vListInsert>
 8019f32:	e012      	b.n	8019f5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8019f34:	687a      	ldr	r2, [r7, #4]
 8019f36:	683b      	ldr	r3, [r7, #0]
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d206      	bcs.n	8019f4a <prvInsertTimerInActiveList+0x62>
 8019f3c:	68ba      	ldr	r2, [r7, #8]
 8019f3e:	683b      	ldr	r3, [r7, #0]
 8019f40:	429a      	cmp	r2, r3
 8019f42:	d302      	bcc.n	8019f4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8019f44:	2301      	movs	r3, #1
 8019f46:	617b      	str	r3, [r7, #20]
 8019f48:	e007      	b.n	8019f5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019f4a:	4b07      	ldr	r3, [pc, #28]	; (8019f68 <prvInsertTimerInActiveList+0x80>)
 8019f4c:	681a      	ldr	r2, [r3, #0]
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	3304      	adds	r3, #4
 8019f52:	4619      	mov	r1, r3
 8019f54:	4610      	mov	r0, r2
 8019f56:	f7fe f822 	bl	8017f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019f5a:	697b      	ldr	r3, [r7, #20]
}
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	3718      	adds	r7, #24
 8019f60:	46bd      	mov	sp, r7
 8019f62:	bd80      	pop	{r7, pc}
 8019f64:	24002cb0 	.word	0x24002cb0
 8019f68:	24002cac 	.word	0x24002cac

08019f6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b08e      	sub	sp, #56	; 0x38
 8019f70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019f72:	e0ca      	b.n	801a10a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	da18      	bge.n	8019fac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019f7a:	1d3b      	adds	r3, r7, #4
 8019f7c:	3304      	adds	r3, #4
 8019f7e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d10a      	bne.n	8019f9c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f8a:	f383 8811 	msr	BASEPRI, r3
 8019f8e:	f3bf 8f6f 	isb	sy
 8019f92:	f3bf 8f4f 	dsb	sy
 8019f96:	61fb      	str	r3, [r7, #28]
}
 8019f98:	bf00      	nop
 8019f9a:	e7fe      	b.n	8019f9a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fa2:	6850      	ldr	r0, [r2, #4]
 8019fa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fa6:	6892      	ldr	r2, [r2, #8]
 8019fa8:	4611      	mov	r1, r2
 8019faa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	f2c0 80aa 	blt.w	801a108 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fba:	695b      	ldr	r3, [r3, #20]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d004      	beq.n	8019fca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc2:	3304      	adds	r3, #4
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7fe f823 	bl	8018010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019fca:	463b      	mov	r3, r7
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7ff ff6b 	bl	8019ea8 <prvSampleTimeNow>
 8019fd2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	2b09      	cmp	r3, #9
 8019fd8:	f200 8097 	bhi.w	801a10a <prvProcessReceivedCommands+0x19e>
 8019fdc:	a201      	add	r2, pc, #4	; (adr r2, 8019fe4 <prvProcessReceivedCommands+0x78>)
 8019fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019fe2:	bf00      	nop
 8019fe4:	0801a00d 	.word	0x0801a00d
 8019fe8:	0801a00d 	.word	0x0801a00d
 8019fec:	0801a00d 	.word	0x0801a00d
 8019ff0:	0801a081 	.word	0x0801a081
 8019ff4:	0801a095 	.word	0x0801a095
 8019ff8:	0801a0df 	.word	0x0801a0df
 8019ffc:	0801a00d 	.word	0x0801a00d
 801a000:	0801a00d 	.word	0x0801a00d
 801a004:	0801a081 	.word	0x0801a081
 801a008:	0801a095 	.word	0x0801a095
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a012:	f043 0301 	orr.w	r3, r3, #1
 801a016:	b2da      	uxtb	r2, r3
 801a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801a01e:	68ba      	ldr	r2, [r7, #8]
 801a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a022:	699b      	ldr	r3, [r3, #24]
 801a024:	18d1      	adds	r1, r2, r3
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a02a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a02c:	f7ff ff5c 	bl	8019ee8 <prvInsertTimerInActiveList>
 801a030:	4603      	mov	r3, r0
 801a032:	2b00      	cmp	r3, #0
 801a034:	d069      	beq.n	801a10a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a038:	6a1b      	ldr	r3, [r3, #32]
 801a03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a03c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a044:	f003 0304 	and.w	r3, r3, #4
 801a048:	2b00      	cmp	r3, #0
 801a04a:	d05e      	beq.n	801a10a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801a04c:	68ba      	ldr	r2, [r7, #8]
 801a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a050:	699b      	ldr	r3, [r3, #24]
 801a052:	441a      	add	r2, r3
 801a054:	2300      	movs	r3, #0
 801a056:	9300      	str	r3, [sp, #0]
 801a058:	2300      	movs	r3, #0
 801a05a:	2100      	movs	r1, #0
 801a05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a05e:	f7ff fe05 	bl	8019c6c <xTimerGenericCommand>
 801a062:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801a064:	6a3b      	ldr	r3, [r7, #32]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d14f      	bne.n	801a10a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a06e:	f383 8811 	msr	BASEPRI, r3
 801a072:	f3bf 8f6f 	isb	sy
 801a076:	f3bf 8f4f 	dsb	sy
 801a07a:	61bb      	str	r3, [r7, #24]
}
 801a07c:	bf00      	nop
 801a07e:	e7fe      	b.n	801a07e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a086:	f023 0301 	bic.w	r3, r3, #1
 801a08a:	b2da      	uxtb	r2, r3
 801a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801a092:	e03a      	b.n	801a10a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a09a:	f043 0301 	orr.w	r3, r3, #1
 801a09e:	b2da      	uxtb	r2, r3
 801a0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801a0a6:	68ba      	ldr	r2, [r7, #8]
 801a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801a0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ae:	699b      	ldr	r3, [r3, #24]
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	d10a      	bne.n	801a0ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0b8:	f383 8811 	msr	BASEPRI, r3
 801a0bc:	f3bf 8f6f 	isb	sy
 801a0c0:	f3bf 8f4f 	dsb	sy
 801a0c4:	617b      	str	r3, [r7, #20]
}
 801a0c6:	bf00      	nop
 801a0c8:	e7fe      	b.n	801a0c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0cc:	699a      	ldr	r2, [r3, #24]
 801a0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d0:	18d1      	adds	r1, r2, r3
 801a0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0d8:	f7ff ff06 	bl	8019ee8 <prvInsertTimerInActiveList>
					break;
 801a0dc:	e015      	b.n	801a10a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a0e4:	f003 0302 	and.w	r3, r3, #2
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d103      	bne.n	801a0f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801a0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0ee:	f000 fbff 	bl	801a8f0 <vPortFree>
 801a0f2:	e00a      	b.n	801a10a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a0fa:	f023 0301 	bic.w	r3, r3, #1
 801a0fe:	b2da      	uxtb	r2, r3
 801a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801a106:	e000      	b.n	801a10a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801a108:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801a10a:	4b08      	ldr	r3, [pc, #32]	; (801a12c <prvProcessReceivedCommands+0x1c0>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	1d39      	adds	r1, r7, #4
 801a110:	2200      	movs	r2, #0
 801a112:	4618      	mov	r0, r3
 801a114:	f7fe fa44 	bl	80185a0 <xQueueReceive>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f47f af2a 	bne.w	8019f74 <prvProcessReceivedCommands+0x8>
	}
}
 801a120:	bf00      	nop
 801a122:	bf00      	nop
 801a124:	3730      	adds	r7, #48	; 0x30
 801a126:	46bd      	mov	sp, r7
 801a128:	bd80      	pop	{r7, pc}
 801a12a:	bf00      	nop
 801a12c:	24002cb4 	.word	0x24002cb4

0801a130 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b088      	sub	sp, #32
 801a134:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a136:	e048      	b.n	801a1ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801a138:	4b2d      	ldr	r3, [pc, #180]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	68db      	ldr	r3, [r3, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a142:	4b2b      	ldr	r3, [pc, #172]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	68db      	ldr	r3, [r3, #12]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	3304      	adds	r3, #4
 801a150:	4618      	mov	r0, r3
 801a152:	f7fd ff5d 	bl	8018010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	6a1b      	ldr	r3, [r3, #32]
 801a15a:	68f8      	ldr	r0, [r7, #12]
 801a15c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a15e:	68fb      	ldr	r3, [r7, #12]
 801a160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a164:	f003 0304 	and.w	r3, r3, #4
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d02e      	beq.n	801a1ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	699b      	ldr	r3, [r3, #24]
 801a170:	693a      	ldr	r2, [r7, #16]
 801a172:	4413      	add	r3, r2
 801a174:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801a176:	68ba      	ldr	r2, [r7, #8]
 801a178:	693b      	ldr	r3, [r7, #16]
 801a17a:	429a      	cmp	r2, r3
 801a17c:	d90e      	bls.n	801a19c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	68ba      	ldr	r2, [r7, #8]
 801a182:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	68fa      	ldr	r2, [r7, #12]
 801a188:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801a18a:	4b19      	ldr	r3, [pc, #100]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a18c:	681a      	ldr	r2, [r3, #0]
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	3304      	adds	r3, #4
 801a192:	4619      	mov	r1, r3
 801a194:	4610      	mov	r0, r2
 801a196:	f7fd ff02 	bl	8017f9e <vListInsert>
 801a19a:	e016      	b.n	801a1ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a19c:	2300      	movs	r3, #0
 801a19e:	9300      	str	r3, [sp, #0]
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	693a      	ldr	r2, [r7, #16]
 801a1a4:	2100      	movs	r1, #0
 801a1a6:	68f8      	ldr	r0, [r7, #12]
 801a1a8:	f7ff fd60 	bl	8019c6c <xTimerGenericCommand>
 801a1ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d10a      	bne.n	801a1ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 801a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b8:	f383 8811 	msr	BASEPRI, r3
 801a1bc:	f3bf 8f6f 	isb	sy
 801a1c0:	f3bf 8f4f 	dsb	sy
 801a1c4:	603b      	str	r3, [r7, #0]
}
 801a1c6:	bf00      	nop
 801a1c8:	e7fe      	b.n	801a1c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801a1ca:	4b09      	ldr	r3, [pc, #36]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d1b1      	bne.n	801a138 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801a1d4:	4b06      	ldr	r3, [pc, #24]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801a1da:	4b06      	ldr	r3, [pc, #24]	; (801a1f4 <prvSwitchTimerLists+0xc4>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	4a04      	ldr	r2, [pc, #16]	; (801a1f0 <prvSwitchTimerLists+0xc0>)
 801a1e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801a1e2:	4a04      	ldr	r2, [pc, #16]	; (801a1f4 <prvSwitchTimerLists+0xc4>)
 801a1e4:	697b      	ldr	r3, [r7, #20]
 801a1e6:	6013      	str	r3, [r2, #0]
}
 801a1e8:	bf00      	nop
 801a1ea:	3718      	adds	r7, #24
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	24002cac 	.word	0x24002cac
 801a1f4:	24002cb0 	.word	0x24002cb0

0801a1f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801a1fe:	f000 f989 	bl	801a514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801a202:	4b15      	ldr	r3, [pc, #84]	; (801a258 <prvCheckForValidListAndQueue+0x60>)
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d120      	bne.n	801a24c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801a20a:	4814      	ldr	r0, [pc, #80]	; (801a25c <prvCheckForValidListAndQueue+0x64>)
 801a20c:	f7fd fe76 	bl	8017efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801a210:	4813      	ldr	r0, [pc, #76]	; (801a260 <prvCheckForValidListAndQueue+0x68>)
 801a212:	f7fd fe73 	bl	8017efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801a216:	4b13      	ldr	r3, [pc, #76]	; (801a264 <prvCheckForValidListAndQueue+0x6c>)
 801a218:	4a10      	ldr	r2, [pc, #64]	; (801a25c <prvCheckForValidListAndQueue+0x64>)
 801a21a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801a21c:	4b12      	ldr	r3, [pc, #72]	; (801a268 <prvCheckForValidListAndQueue+0x70>)
 801a21e:	4a10      	ldr	r2, [pc, #64]	; (801a260 <prvCheckForValidListAndQueue+0x68>)
 801a220:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801a222:	2300      	movs	r3, #0
 801a224:	9300      	str	r3, [sp, #0]
 801a226:	4b11      	ldr	r3, [pc, #68]	; (801a26c <prvCheckForValidListAndQueue+0x74>)
 801a228:	4a11      	ldr	r2, [pc, #68]	; (801a270 <prvCheckForValidListAndQueue+0x78>)
 801a22a:	2110      	movs	r1, #16
 801a22c:	200a      	movs	r0, #10
 801a22e:	f7fd ff81 	bl	8018134 <xQueueGenericCreateStatic>
 801a232:	4603      	mov	r3, r0
 801a234:	4a08      	ldr	r2, [pc, #32]	; (801a258 <prvCheckForValidListAndQueue+0x60>)
 801a236:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801a238:	4b07      	ldr	r3, [pc, #28]	; (801a258 <prvCheckForValidListAndQueue+0x60>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d005      	beq.n	801a24c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801a240:	4b05      	ldr	r3, [pc, #20]	; (801a258 <prvCheckForValidListAndQueue+0x60>)
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	490b      	ldr	r1, [pc, #44]	; (801a274 <prvCheckForValidListAndQueue+0x7c>)
 801a246:	4618      	mov	r0, r3
 801a248:	f7fe fb9a 	bl	8018980 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a24c:	f000 f992 	bl	801a574 <vPortExitCritical>
}
 801a250:	bf00      	nop
 801a252:	46bd      	mov	sp, r7
 801a254:	bd80      	pop	{r7, pc}
 801a256:	bf00      	nop
 801a258:	24002cb4 	.word	0x24002cb4
 801a25c:	24002c84 	.word	0x24002c84
 801a260:	24002c98 	.word	0x24002c98
 801a264:	24002cac 	.word	0x24002cac
 801a268:	24002cb0 	.word	0x24002cb0
 801a26c:	24002d60 	.word	0x24002d60
 801a270:	24002cc0 	.word	0x24002cc0
 801a274:	0801b820 	.word	0x0801b820

0801a278 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b08a      	sub	sp, #40	; 0x28
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	60f8      	str	r0, [r7, #12]
 801a280:	60b9      	str	r1, [r7, #8]
 801a282:	607a      	str	r2, [r7, #4]
 801a284:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801a286:	f06f 0301 	mvn.w	r3, #1
 801a28a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801a290:	68bb      	ldr	r3, [r7, #8]
 801a292:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a298:	4b06      	ldr	r3, [pc, #24]	; (801a2b4 <xTimerPendFunctionCallFromISR+0x3c>)
 801a29a:	6818      	ldr	r0, [r3, #0]
 801a29c:	f107 0114 	add.w	r1, r7, #20
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	683a      	ldr	r2, [r7, #0]
 801a2a4:	f7fe f8e0 	bl	8018468 <xQueueGenericSendFromISR>
 801a2a8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a2ac:	4618      	mov	r0, r3
 801a2ae:	3728      	adds	r7, #40	; 0x28
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}
 801a2b4:	24002cb4 	.word	0x24002cb4

0801a2b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b085      	sub	sp, #20
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	3b04      	subs	r3, #4
 801a2c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a2d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	3b04      	subs	r3, #4
 801a2d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	f023 0201 	bic.w	r2, r3, #1
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	3b04      	subs	r3, #4
 801a2e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801a2e8:	4a0c      	ldr	r2, [pc, #48]	; (801a31c <pxPortInitialiseStack+0x64>)
 801a2ea:	68fb      	ldr	r3, [r7, #12]
 801a2ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	3b14      	subs	r3, #20
 801a2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801a2f4:	687a      	ldr	r2, [r7, #4]
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801a2fa:	68fb      	ldr	r3, [r7, #12]
 801a2fc:	3b04      	subs	r3, #4
 801a2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801a300:	68fb      	ldr	r3, [r7, #12]
 801a302:	f06f 0202 	mvn.w	r2, #2
 801a306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	3b20      	subs	r3, #32
 801a30c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801a30e:	68fb      	ldr	r3, [r7, #12]
}
 801a310:	4618      	mov	r0, r3
 801a312:	3714      	adds	r7, #20
 801a314:	46bd      	mov	sp, r7
 801a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a31a:	4770      	bx	lr
 801a31c:	0801a321 	.word	0x0801a321

0801a320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801a320:	b480      	push	{r7}
 801a322:	b085      	sub	sp, #20
 801a324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801a326:	2300      	movs	r3, #0
 801a328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801a32a:	4b12      	ldr	r3, [pc, #72]	; (801a374 <prvTaskExitError+0x54>)
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a332:	d00a      	beq.n	801a34a <prvTaskExitError+0x2a>
	__asm volatile
 801a334:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a338:	f383 8811 	msr	BASEPRI, r3
 801a33c:	f3bf 8f6f 	isb	sy
 801a340:	f3bf 8f4f 	dsb	sy
 801a344:	60fb      	str	r3, [r7, #12]
}
 801a346:	bf00      	nop
 801a348:	e7fe      	b.n	801a348 <prvTaskExitError+0x28>
	__asm volatile
 801a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a34e:	f383 8811 	msr	BASEPRI, r3
 801a352:	f3bf 8f6f 	isb	sy
 801a356:	f3bf 8f4f 	dsb	sy
 801a35a:	60bb      	str	r3, [r7, #8]
}
 801a35c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801a35e:	bf00      	nop
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d0fc      	beq.n	801a360 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801a366:	bf00      	nop
 801a368:	bf00      	nop
 801a36a:	3714      	adds	r7, #20
 801a36c:	46bd      	mov	sp, r7
 801a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a372:	4770      	bx	lr
 801a374:	240000d4 	.word	0x240000d4
	...

0801a380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801a380:	4b07      	ldr	r3, [pc, #28]	; (801a3a0 <pxCurrentTCBConst2>)
 801a382:	6819      	ldr	r1, [r3, #0]
 801a384:	6808      	ldr	r0, [r1, #0]
 801a386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a38a:	f380 8809 	msr	PSP, r0
 801a38e:	f3bf 8f6f 	isb	sy
 801a392:	f04f 0000 	mov.w	r0, #0
 801a396:	f380 8811 	msr	BASEPRI, r0
 801a39a:	4770      	bx	lr
 801a39c:	f3af 8000 	nop.w

0801a3a0 <pxCurrentTCBConst2>:
 801a3a0:	24002784 	.word	0x24002784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801a3a4:	bf00      	nop
 801a3a6:	bf00      	nop

0801a3a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801a3a8:	4808      	ldr	r0, [pc, #32]	; (801a3cc <prvPortStartFirstTask+0x24>)
 801a3aa:	6800      	ldr	r0, [r0, #0]
 801a3ac:	6800      	ldr	r0, [r0, #0]
 801a3ae:	f380 8808 	msr	MSP, r0
 801a3b2:	f04f 0000 	mov.w	r0, #0
 801a3b6:	f380 8814 	msr	CONTROL, r0
 801a3ba:	b662      	cpsie	i
 801a3bc:	b661      	cpsie	f
 801a3be:	f3bf 8f4f 	dsb	sy
 801a3c2:	f3bf 8f6f 	isb	sy
 801a3c6:	df00      	svc	0
 801a3c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801a3ca:	bf00      	nop
 801a3cc:	e000ed08 	.word	0xe000ed08

0801a3d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801a3d0:	b580      	push	{r7, lr}
 801a3d2:	b086      	sub	sp, #24
 801a3d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801a3d6:	4b46      	ldr	r3, [pc, #280]	; (801a4f0 <xPortStartScheduler+0x120>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	4a46      	ldr	r2, [pc, #280]	; (801a4f4 <xPortStartScheduler+0x124>)
 801a3dc:	4293      	cmp	r3, r2
 801a3de:	d10a      	bne.n	801a3f6 <xPortStartScheduler+0x26>
	__asm volatile
 801a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3e4:	f383 8811 	msr	BASEPRI, r3
 801a3e8:	f3bf 8f6f 	isb	sy
 801a3ec:	f3bf 8f4f 	dsb	sy
 801a3f0:	613b      	str	r3, [r7, #16]
}
 801a3f2:	bf00      	nop
 801a3f4:	e7fe      	b.n	801a3f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a3f6:	4b3e      	ldr	r3, [pc, #248]	; (801a4f0 <xPortStartScheduler+0x120>)
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	4a3f      	ldr	r2, [pc, #252]	; (801a4f8 <xPortStartScheduler+0x128>)
 801a3fc:	4293      	cmp	r3, r2
 801a3fe:	d10a      	bne.n	801a416 <xPortStartScheduler+0x46>
	__asm volatile
 801a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a404:	f383 8811 	msr	BASEPRI, r3
 801a408:	f3bf 8f6f 	isb	sy
 801a40c:	f3bf 8f4f 	dsb	sy
 801a410:	60fb      	str	r3, [r7, #12]
}
 801a412:	bf00      	nop
 801a414:	e7fe      	b.n	801a414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801a416:	4b39      	ldr	r3, [pc, #228]	; (801a4fc <xPortStartScheduler+0x12c>)
 801a418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a41a:	697b      	ldr	r3, [r7, #20]
 801a41c:	781b      	ldrb	r3, [r3, #0]
 801a41e:	b2db      	uxtb	r3, r3
 801a420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a422:	697b      	ldr	r3, [r7, #20]
 801a424:	22ff      	movs	r2, #255	; 0xff
 801a426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a428:	697b      	ldr	r3, [r7, #20]
 801a42a:	781b      	ldrb	r3, [r3, #0]
 801a42c:	b2db      	uxtb	r3, r3
 801a42e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a430:	78fb      	ldrb	r3, [r7, #3]
 801a432:	b2db      	uxtb	r3, r3
 801a434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a438:	b2da      	uxtb	r2, r3
 801a43a:	4b31      	ldr	r3, [pc, #196]	; (801a500 <xPortStartScheduler+0x130>)
 801a43c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a43e:	4b31      	ldr	r3, [pc, #196]	; (801a504 <xPortStartScheduler+0x134>)
 801a440:	2207      	movs	r2, #7
 801a442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a444:	e009      	b.n	801a45a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801a446:	4b2f      	ldr	r3, [pc, #188]	; (801a504 <xPortStartScheduler+0x134>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	3b01      	subs	r3, #1
 801a44c:	4a2d      	ldr	r2, [pc, #180]	; (801a504 <xPortStartScheduler+0x134>)
 801a44e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a450:	78fb      	ldrb	r3, [r7, #3]
 801a452:	b2db      	uxtb	r3, r3
 801a454:	005b      	lsls	r3, r3, #1
 801a456:	b2db      	uxtb	r3, r3
 801a458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a45a:	78fb      	ldrb	r3, [r7, #3]
 801a45c:	b2db      	uxtb	r3, r3
 801a45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a462:	2b80      	cmp	r3, #128	; 0x80
 801a464:	d0ef      	beq.n	801a446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a466:	4b27      	ldr	r3, [pc, #156]	; (801a504 <xPortStartScheduler+0x134>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	f1c3 0307 	rsb	r3, r3, #7
 801a46e:	2b04      	cmp	r3, #4
 801a470:	d00a      	beq.n	801a488 <xPortStartScheduler+0xb8>
	__asm volatile
 801a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a476:	f383 8811 	msr	BASEPRI, r3
 801a47a:	f3bf 8f6f 	isb	sy
 801a47e:	f3bf 8f4f 	dsb	sy
 801a482:	60bb      	str	r3, [r7, #8]
}
 801a484:	bf00      	nop
 801a486:	e7fe      	b.n	801a486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a488:	4b1e      	ldr	r3, [pc, #120]	; (801a504 <xPortStartScheduler+0x134>)
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	021b      	lsls	r3, r3, #8
 801a48e:	4a1d      	ldr	r2, [pc, #116]	; (801a504 <xPortStartScheduler+0x134>)
 801a490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a492:	4b1c      	ldr	r3, [pc, #112]	; (801a504 <xPortStartScheduler+0x134>)
 801a494:	681b      	ldr	r3, [r3, #0]
 801a496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a49a:	4a1a      	ldr	r2, [pc, #104]	; (801a504 <xPortStartScheduler+0x134>)
 801a49c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	b2da      	uxtb	r2, r3
 801a4a2:	697b      	ldr	r3, [r7, #20]
 801a4a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a4a6:	4b18      	ldr	r3, [pc, #96]	; (801a508 <xPortStartScheduler+0x138>)
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	4a17      	ldr	r2, [pc, #92]	; (801a508 <xPortStartScheduler+0x138>)
 801a4ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801a4b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a4b2:	4b15      	ldr	r3, [pc, #84]	; (801a508 <xPortStartScheduler+0x138>)
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	4a14      	ldr	r2, [pc, #80]	; (801a508 <xPortStartScheduler+0x138>)
 801a4b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801a4bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801a4be:	f000 f8dd 	bl	801a67c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801a4c2:	4b12      	ldr	r3, [pc, #72]	; (801a50c <xPortStartScheduler+0x13c>)
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801a4c8:	f000 f8fc 	bl	801a6c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a4cc:	4b10      	ldr	r3, [pc, #64]	; (801a510 <xPortStartScheduler+0x140>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	4a0f      	ldr	r2, [pc, #60]	; (801a510 <xPortStartScheduler+0x140>)
 801a4d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a4d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801a4d8:	f7ff ff66 	bl	801a3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801a4dc:	f7fe ff6e 	bl	80193bc <vTaskSwitchContext>
	prvTaskExitError();
 801a4e0:	f7ff ff1e 	bl	801a320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801a4e4:	2300      	movs	r3, #0
}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	3718      	adds	r7, #24
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bd80      	pop	{r7, pc}
 801a4ee:	bf00      	nop
 801a4f0:	e000ed00 	.word	0xe000ed00
 801a4f4:	410fc271 	.word	0x410fc271
 801a4f8:	410fc270 	.word	0x410fc270
 801a4fc:	e000e400 	.word	0xe000e400
 801a500:	24002db0 	.word	0x24002db0
 801a504:	24002db4 	.word	0x24002db4
 801a508:	e000ed20 	.word	0xe000ed20
 801a50c:	240000d4 	.word	0x240000d4
 801a510:	e000ef34 	.word	0xe000ef34

0801a514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801a514:	b480      	push	{r7}
 801a516:	b083      	sub	sp, #12
 801a518:	af00      	add	r7, sp, #0
	__asm volatile
 801a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a51e:	f383 8811 	msr	BASEPRI, r3
 801a522:	f3bf 8f6f 	isb	sy
 801a526:	f3bf 8f4f 	dsb	sy
 801a52a:	607b      	str	r3, [r7, #4]
}
 801a52c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801a52e:	4b0f      	ldr	r3, [pc, #60]	; (801a56c <vPortEnterCritical+0x58>)
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	3301      	adds	r3, #1
 801a534:	4a0d      	ldr	r2, [pc, #52]	; (801a56c <vPortEnterCritical+0x58>)
 801a536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801a538:	4b0c      	ldr	r3, [pc, #48]	; (801a56c <vPortEnterCritical+0x58>)
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	2b01      	cmp	r3, #1
 801a53e:	d10f      	bne.n	801a560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801a540:	4b0b      	ldr	r3, [pc, #44]	; (801a570 <vPortEnterCritical+0x5c>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	b2db      	uxtb	r3, r3
 801a546:	2b00      	cmp	r3, #0
 801a548:	d00a      	beq.n	801a560 <vPortEnterCritical+0x4c>
	__asm volatile
 801a54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a54e:	f383 8811 	msr	BASEPRI, r3
 801a552:	f3bf 8f6f 	isb	sy
 801a556:	f3bf 8f4f 	dsb	sy
 801a55a:	603b      	str	r3, [r7, #0]
}
 801a55c:	bf00      	nop
 801a55e:	e7fe      	b.n	801a55e <vPortEnterCritical+0x4a>
	}
}
 801a560:	bf00      	nop
 801a562:	370c      	adds	r7, #12
 801a564:	46bd      	mov	sp, r7
 801a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56a:	4770      	bx	lr
 801a56c:	240000d4 	.word	0x240000d4
 801a570:	e000ed04 	.word	0xe000ed04

0801a574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801a574:	b480      	push	{r7}
 801a576:	b083      	sub	sp, #12
 801a578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801a57a:	4b12      	ldr	r3, [pc, #72]	; (801a5c4 <vPortExitCritical+0x50>)
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d10a      	bne.n	801a598 <vPortExitCritical+0x24>
	__asm volatile
 801a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a586:	f383 8811 	msr	BASEPRI, r3
 801a58a:	f3bf 8f6f 	isb	sy
 801a58e:	f3bf 8f4f 	dsb	sy
 801a592:	607b      	str	r3, [r7, #4]
}
 801a594:	bf00      	nop
 801a596:	e7fe      	b.n	801a596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801a598:	4b0a      	ldr	r3, [pc, #40]	; (801a5c4 <vPortExitCritical+0x50>)
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	3b01      	subs	r3, #1
 801a59e:	4a09      	ldr	r2, [pc, #36]	; (801a5c4 <vPortExitCritical+0x50>)
 801a5a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801a5a2:	4b08      	ldr	r3, [pc, #32]	; (801a5c4 <vPortExitCritical+0x50>)
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d105      	bne.n	801a5b6 <vPortExitCritical+0x42>
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	f383 8811 	msr	BASEPRI, r3
}
 801a5b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801a5b6:	bf00      	nop
 801a5b8:	370c      	adds	r7, #12
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c0:	4770      	bx	lr
 801a5c2:	bf00      	nop
 801a5c4:	240000d4 	.word	0x240000d4
	...

0801a5d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801a5d0:	f3ef 8009 	mrs	r0, PSP
 801a5d4:	f3bf 8f6f 	isb	sy
 801a5d8:	4b15      	ldr	r3, [pc, #84]	; (801a630 <pxCurrentTCBConst>)
 801a5da:	681a      	ldr	r2, [r3, #0]
 801a5dc:	f01e 0f10 	tst.w	lr, #16
 801a5e0:	bf08      	it	eq
 801a5e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801a5e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ea:	6010      	str	r0, [r2, #0]
 801a5ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 801a5f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801a5f4:	f380 8811 	msr	BASEPRI, r0
 801a5f8:	f3bf 8f4f 	dsb	sy
 801a5fc:	f3bf 8f6f 	isb	sy
 801a600:	f7fe fedc 	bl	80193bc <vTaskSwitchContext>
 801a604:	f04f 0000 	mov.w	r0, #0
 801a608:	f380 8811 	msr	BASEPRI, r0
 801a60c:	bc09      	pop	{r0, r3}
 801a60e:	6819      	ldr	r1, [r3, #0]
 801a610:	6808      	ldr	r0, [r1, #0]
 801a612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a616:	f01e 0f10 	tst.w	lr, #16
 801a61a:	bf08      	it	eq
 801a61c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a620:	f380 8809 	msr	PSP, r0
 801a624:	f3bf 8f6f 	isb	sy
 801a628:	4770      	bx	lr
 801a62a:	bf00      	nop
 801a62c:	f3af 8000 	nop.w

0801a630 <pxCurrentTCBConst>:
 801a630:	24002784 	.word	0x24002784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801a634:	bf00      	nop
 801a636:	bf00      	nop

0801a638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b082      	sub	sp, #8
 801a63c:	af00      	add	r7, sp, #0
	__asm volatile
 801a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a642:	f383 8811 	msr	BASEPRI, r3
 801a646:	f3bf 8f6f 	isb	sy
 801a64a:	f3bf 8f4f 	dsb	sy
 801a64e:	607b      	str	r3, [r7, #4]
}
 801a650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801a652:	f7fe fdf1 	bl	8019238 <xTaskIncrementTick>
 801a656:	4603      	mov	r3, r0
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d003      	beq.n	801a664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801a65c:	4b06      	ldr	r3, [pc, #24]	; (801a678 <xPortSysTickHandler+0x40>)
 801a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a662:	601a      	str	r2, [r3, #0]
 801a664:	2300      	movs	r3, #0
 801a666:	603b      	str	r3, [r7, #0]
	__asm volatile
 801a668:	683b      	ldr	r3, [r7, #0]
 801a66a:	f383 8811 	msr	BASEPRI, r3
}
 801a66e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801a670:	bf00      	nop
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}
 801a678:	e000ed04 	.word	0xe000ed04

0801a67c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801a67c:	b480      	push	{r7}
 801a67e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801a680:	4b0b      	ldr	r3, [pc, #44]	; (801a6b0 <vPortSetupTimerInterrupt+0x34>)
 801a682:	2200      	movs	r2, #0
 801a684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801a686:	4b0b      	ldr	r3, [pc, #44]	; (801a6b4 <vPortSetupTimerInterrupt+0x38>)
 801a688:	2200      	movs	r2, #0
 801a68a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801a68c:	4b0a      	ldr	r3, [pc, #40]	; (801a6b8 <vPortSetupTimerInterrupt+0x3c>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a0a      	ldr	r2, [pc, #40]	; (801a6bc <vPortSetupTimerInterrupt+0x40>)
 801a692:	fba2 2303 	umull	r2, r3, r2, r3
 801a696:	099b      	lsrs	r3, r3, #6
 801a698:	4a09      	ldr	r2, [pc, #36]	; (801a6c0 <vPortSetupTimerInterrupt+0x44>)
 801a69a:	3b01      	subs	r3, #1
 801a69c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801a69e:	4b04      	ldr	r3, [pc, #16]	; (801a6b0 <vPortSetupTimerInterrupt+0x34>)
 801a6a0:	2207      	movs	r2, #7
 801a6a2:	601a      	str	r2, [r3, #0]
}
 801a6a4:	bf00      	nop
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ac:	4770      	bx	lr
 801a6ae:	bf00      	nop
 801a6b0:	e000e010 	.word	0xe000e010
 801a6b4:	e000e018 	.word	0xe000e018
 801a6b8:	240000c4 	.word	0x240000c4
 801a6bc:	10624dd3 	.word	0x10624dd3
 801a6c0:	e000e014 	.word	0xe000e014

0801a6c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801a6c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a6d4 <vPortEnableVFP+0x10>
 801a6c8:	6801      	ldr	r1, [r0, #0]
 801a6ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a6ce:	6001      	str	r1, [r0, #0]
 801a6d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801a6d2:	bf00      	nop
 801a6d4:	e000ed88 	.word	0xe000ed88

0801a6d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801a6d8:	b480      	push	{r7}
 801a6da:	b085      	sub	sp, #20
 801a6dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a6de:	f3ef 8305 	mrs	r3, IPSR
 801a6e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	2b0f      	cmp	r3, #15
 801a6e8:	d914      	bls.n	801a714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a6ea:	4a17      	ldr	r2, [pc, #92]	; (801a748 <vPortValidateInterruptPriority+0x70>)
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	4413      	add	r3, r2
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a6f4:	4b15      	ldr	r3, [pc, #84]	; (801a74c <vPortValidateInterruptPriority+0x74>)
 801a6f6:	781b      	ldrb	r3, [r3, #0]
 801a6f8:	7afa      	ldrb	r2, [r7, #11]
 801a6fa:	429a      	cmp	r2, r3
 801a6fc:	d20a      	bcs.n	801a714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a702:	f383 8811 	msr	BASEPRI, r3
 801a706:	f3bf 8f6f 	isb	sy
 801a70a:	f3bf 8f4f 	dsb	sy
 801a70e:	607b      	str	r3, [r7, #4]
}
 801a710:	bf00      	nop
 801a712:	e7fe      	b.n	801a712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a714:	4b0e      	ldr	r3, [pc, #56]	; (801a750 <vPortValidateInterruptPriority+0x78>)
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a71c:	4b0d      	ldr	r3, [pc, #52]	; (801a754 <vPortValidateInterruptPriority+0x7c>)
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	429a      	cmp	r2, r3
 801a722:	d90a      	bls.n	801a73a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801a724:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a728:	f383 8811 	msr	BASEPRI, r3
 801a72c:	f3bf 8f6f 	isb	sy
 801a730:	f3bf 8f4f 	dsb	sy
 801a734:	603b      	str	r3, [r7, #0]
}
 801a736:	bf00      	nop
 801a738:	e7fe      	b.n	801a738 <vPortValidateInterruptPriority+0x60>
	}
 801a73a:	bf00      	nop
 801a73c:	3714      	adds	r7, #20
 801a73e:	46bd      	mov	sp, r7
 801a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a744:	4770      	bx	lr
 801a746:	bf00      	nop
 801a748:	e000e3f0 	.word	0xe000e3f0
 801a74c:	24002db0 	.word	0x24002db0
 801a750:	e000ed0c 	.word	0xe000ed0c
 801a754:	24002db4 	.word	0x24002db4

0801a758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b08a      	sub	sp, #40	; 0x28
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801a760:	2300      	movs	r3, #0
 801a762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801a764:	f7fe fcac 	bl	80190c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801a768:	4b5b      	ldr	r3, [pc, #364]	; (801a8d8 <pvPortMalloc+0x180>)
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d101      	bne.n	801a774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801a770:	f000 f920 	bl	801a9b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a774:	4b59      	ldr	r3, [pc, #356]	; (801a8dc <pvPortMalloc+0x184>)
 801a776:	681a      	ldr	r2, [r3, #0]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	4013      	ands	r3, r2
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	f040 8093 	bne.w	801a8a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d01d      	beq.n	801a7c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801a788:	2208      	movs	r2, #8
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	4413      	add	r3, r2
 801a78e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	f003 0307 	and.w	r3, r3, #7
 801a796:	2b00      	cmp	r3, #0
 801a798:	d014      	beq.n	801a7c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f023 0307 	bic.w	r3, r3, #7
 801a7a0:	3308      	adds	r3, #8
 801a7a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	f003 0307 	and.w	r3, r3, #7
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d00a      	beq.n	801a7c4 <pvPortMalloc+0x6c>
	__asm volatile
 801a7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7b2:	f383 8811 	msr	BASEPRI, r3
 801a7b6:	f3bf 8f6f 	isb	sy
 801a7ba:	f3bf 8f4f 	dsb	sy
 801a7be:	617b      	str	r3, [r7, #20]
}
 801a7c0:	bf00      	nop
 801a7c2:	e7fe      	b.n	801a7c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d06e      	beq.n	801a8a8 <pvPortMalloc+0x150>
 801a7ca:	4b45      	ldr	r3, [pc, #276]	; (801a8e0 <pvPortMalloc+0x188>)
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	687a      	ldr	r2, [r7, #4]
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d869      	bhi.n	801a8a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801a7d4:	4b43      	ldr	r3, [pc, #268]	; (801a8e4 <pvPortMalloc+0x18c>)
 801a7d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801a7d8:	4b42      	ldr	r3, [pc, #264]	; (801a8e4 <pvPortMalloc+0x18c>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a7de:	e004      	b.n	801a7ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7e6:	681b      	ldr	r3, [r3, #0]
 801a7e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7ec:	685b      	ldr	r3, [r3, #4]
 801a7ee:	687a      	ldr	r2, [r7, #4]
 801a7f0:	429a      	cmp	r2, r3
 801a7f2:	d903      	bls.n	801a7fc <pvPortMalloc+0xa4>
 801a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	d1f1      	bne.n	801a7e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801a7fc:	4b36      	ldr	r3, [pc, #216]	; (801a8d8 <pvPortMalloc+0x180>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a802:	429a      	cmp	r2, r3
 801a804:	d050      	beq.n	801a8a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a806:	6a3b      	ldr	r3, [r7, #32]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	2208      	movs	r2, #8
 801a80c:	4413      	add	r3, r2
 801a80e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a812:	681a      	ldr	r2, [r3, #0]
 801a814:	6a3b      	ldr	r3, [r7, #32]
 801a816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a81a:	685a      	ldr	r2, [r3, #4]
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	1ad2      	subs	r2, r2, r3
 801a820:	2308      	movs	r3, #8
 801a822:	005b      	lsls	r3, r3, #1
 801a824:	429a      	cmp	r2, r3
 801a826:	d91f      	bls.n	801a868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	4413      	add	r3, r2
 801a82e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a830:	69bb      	ldr	r3, [r7, #24]
 801a832:	f003 0307 	and.w	r3, r3, #7
 801a836:	2b00      	cmp	r3, #0
 801a838:	d00a      	beq.n	801a850 <pvPortMalloc+0xf8>
	__asm volatile
 801a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a83e:	f383 8811 	msr	BASEPRI, r3
 801a842:	f3bf 8f6f 	isb	sy
 801a846:	f3bf 8f4f 	dsb	sy
 801a84a:	613b      	str	r3, [r7, #16]
}
 801a84c:	bf00      	nop
 801a84e:	e7fe      	b.n	801a84e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a852:	685a      	ldr	r2, [r3, #4]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	1ad2      	subs	r2, r2, r3
 801a858:	69bb      	ldr	r3, [r7, #24]
 801a85a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a85e:	687a      	ldr	r2, [r7, #4]
 801a860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a862:	69b8      	ldr	r0, [r7, #24]
 801a864:	f000 f908 	bl	801aa78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a868:	4b1d      	ldr	r3, [pc, #116]	; (801a8e0 <pvPortMalloc+0x188>)
 801a86a:	681a      	ldr	r2, [r3, #0]
 801a86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	1ad3      	subs	r3, r2, r3
 801a872:	4a1b      	ldr	r2, [pc, #108]	; (801a8e0 <pvPortMalloc+0x188>)
 801a874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a876:	4b1a      	ldr	r3, [pc, #104]	; (801a8e0 <pvPortMalloc+0x188>)
 801a878:	681a      	ldr	r2, [r3, #0]
 801a87a:	4b1b      	ldr	r3, [pc, #108]	; (801a8e8 <pvPortMalloc+0x190>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	429a      	cmp	r2, r3
 801a880:	d203      	bcs.n	801a88a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a882:	4b17      	ldr	r3, [pc, #92]	; (801a8e0 <pvPortMalloc+0x188>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	4a18      	ldr	r2, [pc, #96]	; (801a8e8 <pvPortMalloc+0x190>)
 801a888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a88c:	685a      	ldr	r2, [r3, #4]
 801a88e:	4b13      	ldr	r3, [pc, #76]	; (801a8dc <pvPortMalloc+0x184>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	431a      	orrs	r2, r3
 801a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a89a:	2200      	movs	r2, #0
 801a89c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801a89e:	4b13      	ldr	r3, [pc, #76]	; (801a8ec <pvPortMalloc+0x194>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	3301      	adds	r3, #1
 801a8a4:	4a11      	ldr	r2, [pc, #68]	; (801a8ec <pvPortMalloc+0x194>)
 801a8a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801a8a8:	f7fe fc18 	bl	80190dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a8ac:	69fb      	ldr	r3, [r7, #28]
 801a8ae:	f003 0307 	and.w	r3, r3, #7
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d00a      	beq.n	801a8cc <pvPortMalloc+0x174>
	__asm volatile
 801a8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8ba:	f383 8811 	msr	BASEPRI, r3
 801a8be:	f3bf 8f6f 	isb	sy
 801a8c2:	f3bf 8f4f 	dsb	sy
 801a8c6:	60fb      	str	r3, [r7, #12]
}
 801a8c8:	bf00      	nop
 801a8ca:	e7fe      	b.n	801a8ca <pvPortMalloc+0x172>
	return pvReturn;
 801a8cc:	69fb      	ldr	r3, [r7, #28]
}
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	3728      	adds	r7, #40	; 0x28
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	bd80      	pop	{r7, pc}
 801a8d6:	bf00      	nop
 801a8d8:	240069c0 	.word	0x240069c0
 801a8dc:	240069d4 	.word	0x240069d4
 801a8e0:	240069c4 	.word	0x240069c4
 801a8e4:	240069b8 	.word	0x240069b8
 801a8e8:	240069c8 	.word	0x240069c8
 801a8ec:	240069cc 	.word	0x240069cc

0801a8f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801a8f0:	b580      	push	{r7, lr}
 801a8f2:	b086      	sub	sp, #24
 801a8f4:	af00      	add	r7, sp, #0
 801a8f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d04d      	beq.n	801a99e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801a902:	2308      	movs	r3, #8
 801a904:	425b      	negs	r3, r3
 801a906:	697a      	ldr	r2, [r7, #20]
 801a908:	4413      	add	r3, r2
 801a90a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a910:	693b      	ldr	r3, [r7, #16]
 801a912:	685a      	ldr	r2, [r3, #4]
 801a914:	4b24      	ldr	r3, [pc, #144]	; (801a9a8 <vPortFree+0xb8>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	4013      	ands	r3, r2
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d10a      	bne.n	801a934 <vPortFree+0x44>
	__asm volatile
 801a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a922:	f383 8811 	msr	BASEPRI, r3
 801a926:	f3bf 8f6f 	isb	sy
 801a92a:	f3bf 8f4f 	dsb	sy
 801a92e:	60fb      	str	r3, [r7, #12]
}
 801a930:	bf00      	nop
 801a932:	e7fe      	b.n	801a932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a934:	693b      	ldr	r3, [r7, #16]
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d00a      	beq.n	801a952 <vPortFree+0x62>
	__asm volatile
 801a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a940:	f383 8811 	msr	BASEPRI, r3
 801a944:	f3bf 8f6f 	isb	sy
 801a948:	f3bf 8f4f 	dsb	sy
 801a94c:	60bb      	str	r3, [r7, #8]
}
 801a94e:	bf00      	nop
 801a950:	e7fe      	b.n	801a950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	685a      	ldr	r2, [r3, #4]
 801a956:	4b14      	ldr	r3, [pc, #80]	; (801a9a8 <vPortFree+0xb8>)
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	4013      	ands	r3, r2
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d01e      	beq.n	801a99e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801a960:	693b      	ldr	r3, [r7, #16]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d11a      	bne.n	801a99e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	685a      	ldr	r2, [r3, #4]
 801a96c:	4b0e      	ldr	r3, [pc, #56]	; (801a9a8 <vPortFree+0xb8>)
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	43db      	mvns	r3, r3
 801a972:	401a      	ands	r2, r3
 801a974:	693b      	ldr	r3, [r7, #16]
 801a976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801a978:	f7fe fba2 	bl	80190c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a97c:	693b      	ldr	r3, [r7, #16]
 801a97e:	685a      	ldr	r2, [r3, #4]
 801a980:	4b0a      	ldr	r3, [pc, #40]	; (801a9ac <vPortFree+0xbc>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	4413      	add	r3, r2
 801a986:	4a09      	ldr	r2, [pc, #36]	; (801a9ac <vPortFree+0xbc>)
 801a988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a98a:	6938      	ldr	r0, [r7, #16]
 801a98c:	f000 f874 	bl	801aa78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801a990:	4b07      	ldr	r3, [pc, #28]	; (801a9b0 <vPortFree+0xc0>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	3301      	adds	r3, #1
 801a996:	4a06      	ldr	r2, [pc, #24]	; (801a9b0 <vPortFree+0xc0>)
 801a998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801a99a:	f7fe fb9f 	bl	80190dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801a99e:	bf00      	nop
 801a9a0:	3718      	adds	r7, #24
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	bd80      	pop	{r7, pc}
 801a9a6:	bf00      	nop
 801a9a8:	240069d4 	.word	0x240069d4
 801a9ac:	240069c4 	.word	0x240069c4
 801a9b0:	240069d0 	.word	0x240069d0

0801a9b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	b085      	sub	sp, #20
 801a9b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a9ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801a9be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a9c0:	4b27      	ldr	r3, [pc, #156]	; (801aa60 <prvHeapInit+0xac>)
 801a9c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	f003 0307 	and.w	r3, r3, #7
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d00c      	beq.n	801a9e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	3307      	adds	r3, #7
 801a9d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	f023 0307 	bic.w	r3, r3, #7
 801a9da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a9dc:	68ba      	ldr	r2, [r7, #8]
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	1ad3      	subs	r3, r2, r3
 801a9e2:	4a1f      	ldr	r2, [pc, #124]	; (801aa60 <prvHeapInit+0xac>)
 801a9e4:	4413      	add	r3, r2
 801a9e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a9ec:	4a1d      	ldr	r2, [pc, #116]	; (801aa64 <prvHeapInit+0xb0>)
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a9f2:	4b1c      	ldr	r3, [pc, #112]	; (801aa64 <prvHeapInit+0xb0>)
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	68ba      	ldr	r2, [r7, #8]
 801a9fc:	4413      	add	r3, r2
 801a9fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801aa00:	2208      	movs	r2, #8
 801aa02:	68fb      	ldr	r3, [r7, #12]
 801aa04:	1a9b      	subs	r3, r3, r2
 801aa06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	f023 0307 	bic.w	r3, r3, #7
 801aa0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801aa10:	68fb      	ldr	r3, [r7, #12]
 801aa12:	4a15      	ldr	r2, [pc, #84]	; (801aa68 <prvHeapInit+0xb4>)
 801aa14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801aa16:	4b14      	ldr	r3, [pc, #80]	; (801aa68 <prvHeapInit+0xb4>)
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801aa1e:	4b12      	ldr	r3, [pc, #72]	; (801aa68 <prvHeapInit+0xb4>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	2200      	movs	r2, #0
 801aa24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801aa2a:	683b      	ldr	r3, [r7, #0]
 801aa2c:	68fa      	ldr	r2, [r7, #12]
 801aa2e:	1ad2      	subs	r2, r2, r3
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801aa34:	4b0c      	ldr	r3, [pc, #48]	; (801aa68 <prvHeapInit+0xb4>)
 801aa36:	681a      	ldr	r2, [r3, #0]
 801aa38:	683b      	ldr	r3, [r7, #0]
 801aa3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	4a0a      	ldr	r2, [pc, #40]	; (801aa6c <prvHeapInit+0xb8>)
 801aa42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	685b      	ldr	r3, [r3, #4]
 801aa48:	4a09      	ldr	r2, [pc, #36]	; (801aa70 <prvHeapInit+0xbc>)
 801aa4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801aa4c:	4b09      	ldr	r3, [pc, #36]	; (801aa74 <prvHeapInit+0xc0>)
 801aa4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801aa52:	601a      	str	r2, [r3, #0]
}
 801aa54:	bf00      	nop
 801aa56:	3714      	adds	r7, #20
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa5e:	4770      	bx	lr
 801aa60:	24002db8 	.word	0x24002db8
 801aa64:	240069b8 	.word	0x240069b8
 801aa68:	240069c0 	.word	0x240069c0
 801aa6c:	240069c8 	.word	0x240069c8
 801aa70:	240069c4 	.word	0x240069c4
 801aa74:	240069d4 	.word	0x240069d4

0801aa78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801aa78:	b480      	push	{r7}
 801aa7a:	b085      	sub	sp, #20
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801aa80:	4b28      	ldr	r3, [pc, #160]	; (801ab24 <prvInsertBlockIntoFreeList+0xac>)
 801aa82:	60fb      	str	r3, [r7, #12]
 801aa84:	e002      	b.n	801aa8c <prvInsertBlockIntoFreeList+0x14>
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	60fb      	str	r3, [r7, #12]
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	687a      	ldr	r2, [r7, #4]
 801aa92:	429a      	cmp	r2, r3
 801aa94:	d8f7      	bhi.n	801aa86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	685b      	ldr	r3, [r3, #4]
 801aa9e:	68ba      	ldr	r2, [r7, #8]
 801aaa0:	4413      	add	r3, r2
 801aaa2:	687a      	ldr	r2, [r7, #4]
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d108      	bne.n	801aaba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	685a      	ldr	r2, [r3, #4]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	441a      	add	r2, r3
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	685b      	ldr	r3, [r3, #4]
 801aac2:	68ba      	ldr	r2, [r7, #8]
 801aac4:	441a      	add	r2, r3
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d118      	bne.n	801ab00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	681a      	ldr	r2, [r3, #0]
 801aad2:	4b15      	ldr	r3, [pc, #84]	; (801ab28 <prvInsertBlockIntoFreeList+0xb0>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d00d      	beq.n	801aaf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	685a      	ldr	r2, [r3, #4]
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	441a      	add	r2, r3
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	681a      	ldr	r2, [r3, #0]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	601a      	str	r2, [r3, #0]
 801aaf4:	e008      	b.n	801ab08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801aaf6:	4b0c      	ldr	r3, [pc, #48]	; (801ab28 <prvInsertBlockIntoFreeList+0xb0>)
 801aaf8:	681a      	ldr	r2, [r3, #0]
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	601a      	str	r2, [r3, #0]
 801aafe:	e003      	b.n	801ab08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	681a      	ldr	r2, [r3, #0]
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801ab08:	68fa      	ldr	r2, [r7, #12]
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	429a      	cmp	r2, r3
 801ab0e:	d002      	beq.n	801ab16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	687a      	ldr	r2, [r7, #4]
 801ab14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab16:	bf00      	nop
 801ab18:	3714      	adds	r7, #20
 801ab1a:	46bd      	mov	sp, r7
 801ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab20:	4770      	bx	lr
 801ab22:	bf00      	nop
 801ab24:	240069b8 	.word	0x240069b8
 801ab28:	240069c0 	.word	0x240069c0

0801ab2c <__errno>:
 801ab2c:	4b01      	ldr	r3, [pc, #4]	; (801ab34 <__errno+0x8>)
 801ab2e:	6818      	ldr	r0, [r3, #0]
 801ab30:	4770      	bx	lr
 801ab32:	bf00      	nop
 801ab34:	240000d8 	.word	0x240000d8

0801ab38 <__libc_init_array>:
 801ab38:	b570      	push	{r4, r5, r6, lr}
 801ab3a:	4d0d      	ldr	r5, [pc, #52]	; (801ab70 <__libc_init_array+0x38>)
 801ab3c:	4c0d      	ldr	r4, [pc, #52]	; (801ab74 <__libc_init_array+0x3c>)
 801ab3e:	1b64      	subs	r4, r4, r5
 801ab40:	10a4      	asrs	r4, r4, #2
 801ab42:	2600      	movs	r6, #0
 801ab44:	42a6      	cmp	r6, r4
 801ab46:	d109      	bne.n	801ab5c <__libc_init_array+0x24>
 801ab48:	4d0b      	ldr	r5, [pc, #44]	; (801ab78 <__libc_init_array+0x40>)
 801ab4a:	4c0c      	ldr	r4, [pc, #48]	; (801ab7c <__libc_init_array+0x44>)
 801ab4c:	f000 fd2c 	bl	801b5a8 <_init>
 801ab50:	1b64      	subs	r4, r4, r5
 801ab52:	10a4      	asrs	r4, r4, #2
 801ab54:	2600      	movs	r6, #0
 801ab56:	42a6      	cmp	r6, r4
 801ab58:	d105      	bne.n	801ab66 <__libc_init_array+0x2e>
 801ab5a:	bd70      	pop	{r4, r5, r6, pc}
 801ab5c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab60:	4798      	blx	r3
 801ab62:	3601      	adds	r6, #1
 801ab64:	e7ee      	b.n	801ab44 <__libc_init_array+0xc>
 801ab66:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab6a:	4798      	blx	r3
 801ab6c:	3601      	adds	r6, #1
 801ab6e:	e7f2      	b.n	801ab56 <__libc_init_array+0x1e>
 801ab70:	0801ba60 	.word	0x0801ba60
 801ab74:	0801ba60 	.word	0x0801ba60
 801ab78:	0801ba60 	.word	0x0801ba60
 801ab7c:	0801ba64 	.word	0x0801ba64

0801ab80 <memcpy>:
 801ab80:	440a      	add	r2, r1
 801ab82:	4291      	cmp	r1, r2
 801ab84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ab88:	d100      	bne.n	801ab8c <memcpy+0xc>
 801ab8a:	4770      	bx	lr
 801ab8c:	b510      	push	{r4, lr}
 801ab8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab92:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab96:	4291      	cmp	r1, r2
 801ab98:	d1f9      	bne.n	801ab8e <memcpy+0xe>
 801ab9a:	bd10      	pop	{r4, pc}

0801ab9c <memset>:
 801ab9c:	4402      	add	r2, r0
 801ab9e:	4603      	mov	r3, r0
 801aba0:	4293      	cmp	r3, r2
 801aba2:	d100      	bne.n	801aba6 <memset+0xa>
 801aba4:	4770      	bx	lr
 801aba6:	f803 1b01 	strb.w	r1, [r3], #1
 801abaa:	e7f9      	b.n	801aba0 <memset+0x4>

0801abac <_puts_r>:
 801abac:	b570      	push	{r4, r5, r6, lr}
 801abae:	460e      	mov	r6, r1
 801abb0:	4605      	mov	r5, r0
 801abb2:	b118      	cbz	r0, 801abbc <_puts_r+0x10>
 801abb4:	6983      	ldr	r3, [r0, #24]
 801abb6:	b90b      	cbnz	r3, 801abbc <_puts_r+0x10>
 801abb8:	f000 fa48 	bl	801b04c <__sinit>
 801abbc:	69ab      	ldr	r3, [r5, #24]
 801abbe:	68ac      	ldr	r4, [r5, #8]
 801abc0:	b913      	cbnz	r3, 801abc8 <_puts_r+0x1c>
 801abc2:	4628      	mov	r0, r5
 801abc4:	f000 fa42 	bl	801b04c <__sinit>
 801abc8:	4b2c      	ldr	r3, [pc, #176]	; (801ac7c <_puts_r+0xd0>)
 801abca:	429c      	cmp	r4, r3
 801abcc:	d120      	bne.n	801ac10 <_puts_r+0x64>
 801abce:	686c      	ldr	r4, [r5, #4]
 801abd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801abd2:	07db      	lsls	r3, r3, #31
 801abd4:	d405      	bmi.n	801abe2 <_puts_r+0x36>
 801abd6:	89a3      	ldrh	r3, [r4, #12]
 801abd8:	0598      	lsls	r0, r3, #22
 801abda:	d402      	bmi.n	801abe2 <_puts_r+0x36>
 801abdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801abde:	f000 fad3 	bl	801b188 <__retarget_lock_acquire_recursive>
 801abe2:	89a3      	ldrh	r3, [r4, #12]
 801abe4:	0719      	lsls	r1, r3, #28
 801abe6:	d51d      	bpl.n	801ac24 <_puts_r+0x78>
 801abe8:	6923      	ldr	r3, [r4, #16]
 801abea:	b1db      	cbz	r3, 801ac24 <_puts_r+0x78>
 801abec:	3e01      	subs	r6, #1
 801abee:	68a3      	ldr	r3, [r4, #8]
 801abf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801abf4:	3b01      	subs	r3, #1
 801abf6:	60a3      	str	r3, [r4, #8]
 801abf8:	bb39      	cbnz	r1, 801ac4a <_puts_r+0x9e>
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	da38      	bge.n	801ac70 <_puts_r+0xc4>
 801abfe:	4622      	mov	r2, r4
 801ac00:	210a      	movs	r1, #10
 801ac02:	4628      	mov	r0, r5
 801ac04:	f000 f848 	bl	801ac98 <__swbuf_r>
 801ac08:	3001      	adds	r0, #1
 801ac0a:	d011      	beq.n	801ac30 <_puts_r+0x84>
 801ac0c:	250a      	movs	r5, #10
 801ac0e:	e011      	b.n	801ac34 <_puts_r+0x88>
 801ac10:	4b1b      	ldr	r3, [pc, #108]	; (801ac80 <_puts_r+0xd4>)
 801ac12:	429c      	cmp	r4, r3
 801ac14:	d101      	bne.n	801ac1a <_puts_r+0x6e>
 801ac16:	68ac      	ldr	r4, [r5, #8]
 801ac18:	e7da      	b.n	801abd0 <_puts_r+0x24>
 801ac1a:	4b1a      	ldr	r3, [pc, #104]	; (801ac84 <_puts_r+0xd8>)
 801ac1c:	429c      	cmp	r4, r3
 801ac1e:	bf08      	it	eq
 801ac20:	68ec      	ldreq	r4, [r5, #12]
 801ac22:	e7d5      	b.n	801abd0 <_puts_r+0x24>
 801ac24:	4621      	mov	r1, r4
 801ac26:	4628      	mov	r0, r5
 801ac28:	f000 f888 	bl	801ad3c <__swsetup_r>
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	d0dd      	beq.n	801abec <_puts_r+0x40>
 801ac30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801ac34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ac36:	07da      	lsls	r2, r3, #31
 801ac38:	d405      	bmi.n	801ac46 <_puts_r+0x9a>
 801ac3a:	89a3      	ldrh	r3, [r4, #12]
 801ac3c:	059b      	lsls	r3, r3, #22
 801ac3e:	d402      	bmi.n	801ac46 <_puts_r+0x9a>
 801ac40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ac42:	f000 faa2 	bl	801b18a <__retarget_lock_release_recursive>
 801ac46:	4628      	mov	r0, r5
 801ac48:	bd70      	pop	{r4, r5, r6, pc}
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	da04      	bge.n	801ac58 <_puts_r+0xac>
 801ac4e:	69a2      	ldr	r2, [r4, #24]
 801ac50:	429a      	cmp	r2, r3
 801ac52:	dc06      	bgt.n	801ac62 <_puts_r+0xb6>
 801ac54:	290a      	cmp	r1, #10
 801ac56:	d004      	beq.n	801ac62 <_puts_r+0xb6>
 801ac58:	6823      	ldr	r3, [r4, #0]
 801ac5a:	1c5a      	adds	r2, r3, #1
 801ac5c:	6022      	str	r2, [r4, #0]
 801ac5e:	7019      	strb	r1, [r3, #0]
 801ac60:	e7c5      	b.n	801abee <_puts_r+0x42>
 801ac62:	4622      	mov	r2, r4
 801ac64:	4628      	mov	r0, r5
 801ac66:	f000 f817 	bl	801ac98 <__swbuf_r>
 801ac6a:	3001      	adds	r0, #1
 801ac6c:	d1bf      	bne.n	801abee <_puts_r+0x42>
 801ac6e:	e7df      	b.n	801ac30 <_puts_r+0x84>
 801ac70:	6823      	ldr	r3, [r4, #0]
 801ac72:	250a      	movs	r5, #10
 801ac74:	1c5a      	adds	r2, r3, #1
 801ac76:	6022      	str	r2, [r4, #0]
 801ac78:	701d      	strb	r5, [r3, #0]
 801ac7a:	e7db      	b.n	801ac34 <_puts_r+0x88>
 801ac7c:	0801ba18 	.word	0x0801ba18
 801ac80:	0801ba38 	.word	0x0801ba38
 801ac84:	0801b9f8 	.word	0x0801b9f8

0801ac88 <puts>:
 801ac88:	4b02      	ldr	r3, [pc, #8]	; (801ac94 <puts+0xc>)
 801ac8a:	4601      	mov	r1, r0
 801ac8c:	6818      	ldr	r0, [r3, #0]
 801ac8e:	f7ff bf8d 	b.w	801abac <_puts_r>
 801ac92:	bf00      	nop
 801ac94:	240000d8 	.word	0x240000d8

0801ac98 <__swbuf_r>:
 801ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9a:	460e      	mov	r6, r1
 801ac9c:	4614      	mov	r4, r2
 801ac9e:	4605      	mov	r5, r0
 801aca0:	b118      	cbz	r0, 801acaa <__swbuf_r+0x12>
 801aca2:	6983      	ldr	r3, [r0, #24]
 801aca4:	b90b      	cbnz	r3, 801acaa <__swbuf_r+0x12>
 801aca6:	f000 f9d1 	bl	801b04c <__sinit>
 801acaa:	4b21      	ldr	r3, [pc, #132]	; (801ad30 <__swbuf_r+0x98>)
 801acac:	429c      	cmp	r4, r3
 801acae:	d12b      	bne.n	801ad08 <__swbuf_r+0x70>
 801acb0:	686c      	ldr	r4, [r5, #4]
 801acb2:	69a3      	ldr	r3, [r4, #24]
 801acb4:	60a3      	str	r3, [r4, #8]
 801acb6:	89a3      	ldrh	r3, [r4, #12]
 801acb8:	071a      	lsls	r2, r3, #28
 801acba:	d52f      	bpl.n	801ad1c <__swbuf_r+0x84>
 801acbc:	6923      	ldr	r3, [r4, #16]
 801acbe:	b36b      	cbz	r3, 801ad1c <__swbuf_r+0x84>
 801acc0:	6923      	ldr	r3, [r4, #16]
 801acc2:	6820      	ldr	r0, [r4, #0]
 801acc4:	1ac0      	subs	r0, r0, r3
 801acc6:	6963      	ldr	r3, [r4, #20]
 801acc8:	b2f6      	uxtb	r6, r6
 801acca:	4283      	cmp	r3, r0
 801accc:	4637      	mov	r7, r6
 801acce:	dc04      	bgt.n	801acda <__swbuf_r+0x42>
 801acd0:	4621      	mov	r1, r4
 801acd2:	4628      	mov	r0, r5
 801acd4:	f000 f926 	bl	801af24 <_fflush_r>
 801acd8:	bb30      	cbnz	r0, 801ad28 <__swbuf_r+0x90>
 801acda:	68a3      	ldr	r3, [r4, #8]
 801acdc:	3b01      	subs	r3, #1
 801acde:	60a3      	str	r3, [r4, #8]
 801ace0:	6823      	ldr	r3, [r4, #0]
 801ace2:	1c5a      	adds	r2, r3, #1
 801ace4:	6022      	str	r2, [r4, #0]
 801ace6:	701e      	strb	r6, [r3, #0]
 801ace8:	6963      	ldr	r3, [r4, #20]
 801acea:	3001      	adds	r0, #1
 801acec:	4283      	cmp	r3, r0
 801acee:	d004      	beq.n	801acfa <__swbuf_r+0x62>
 801acf0:	89a3      	ldrh	r3, [r4, #12]
 801acf2:	07db      	lsls	r3, r3, #31
 801acf4:	d506      	bpl.n	801ad04 <__swbuf_r+0x6c>
 801acf6:	2e0a      	cmp	r6, #10
 801acf8:	d104      	bne.n	801ad04 <__swbuf_r+0x6c>
 801acfa:	4621      	mov	r1, r4
 801acfc:	4628      	mov	r0, r5
 801acfe:	f000 f911 	bl	801af24 <_fflush_r>
 801ad02:	b988      	cbnz	r0, 801ad28 <__swbuf_r+0x90>
 801ad04:	4638      	mov	r0, r7
 801ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad08:	4b0a      	ldr	r3, [pc, #40]	; (801ad34 <__swbuf_r+0x9c>)
 801ad0a:	429c      	cmp	r4, r3
 801ad0c:	d101      	bne.n	801ad12 <__swbuf_r+0x7a>
 801ad0e:	68ac      	ldr	r4, [r5, #8]
 801ad10:	e7cf      	b.n	801acb2 <__swbuf_r+0x1a>
 801ad12:	4b09      	ldr	r3, [pc, #36]	; (801ad38 <__swbuf_r+0xa0>)
 801ad14:	429c      	cmp	r4, r3
 801ad16:	bf08      	it	eq
 801ad18:	68ec      	ldreq	r4, [r5, #12]
 801ad1a:	e7ca      	b.n	801acb2 <__swbuf_r+0x1a>
 801ad1c:	4621      	mov	r1, r4
 801ad1e:	4628      	mov	r0, r5
 801ad20:	f000 f80c 	bl	801ad3c <__swsetup_r>
 801ad24:	2800      	cmp	r0, #0
 801ad26:	d0cb      	beq.n	801acc0 <__swbuf_r+0x28>
 801ad28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801ad2c:	e7ea      	b.n	801ad04 <__swbuf_r+0x6c>
 801ad2e:	bf00      	nop
 801ad30:	0801ba18 	.word	0x0801ba18
 801ad34:	0801ba38 	.word	0x0801ba38
 801ad38:	0801b9f8 	.word	0x0801b9f8

0801ad3c <__swsetup_r>:
 801ad3c:	4b32      	ldr	r3, [pc, #200]	; (801ae08 <__swsetup_r+0xcc>)
 801ad3e:	b570      	push	{r4, r5, r6, lr}
 801ad40:	681d      	ldr	r5, [r3, #0]
 801ad42:	4606      	mov	r6, r0
 801ad44:	460c      	mov	r4, r1
 801ad46:	b125      	cbz	r5, 801ad52 <__swsetup_r+0x16>
 801ad48:	69ab      	ldr	r3, [r5, #24]
 801ad4a:	b913      	cbnz	r3, 801ad52 <__swsetup_r+0x16>
 801ad4c:	4628      	mov	r0, r5
 801ad4e:	f000 f97d 	bl	801b04c <__sinit>
 801ad52:	4b2e      	ldr	r3, [pc, #184]	; (801ae0c <__swsetup_r+0xd0>)
 801ad54:	429c      	cmp	r4, r3
 801ad56:	d10f      	bne.n	801ad78 <__swsetup_r+0x3c>
 801ad58:	686c      	ldr	r4, [r5, #4]
 801ad5a:	89a3      	ldrh	r3, [r4, #12]
 801ad5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad60:	0719      	lsls	r1, r3, #28
 801ad62:	d42c      	bmi.n	801adbe <__swsetup_r+0x82>
 801ad64:	06dd      	lsls	r5, r3, #27
 801ad66:	d411      	bmi.n	801ad8c <__swsetup_r+0x50>
 801ad68:	2309      	movs	r3, #9
 801ad6a:	6033      	str	r3, [r6, #0]
 801ad6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ad70:	81a3      	strh	r3, [r4, #12]
 801ad72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ad76:	e03e      	b.n	801adf6 <__swsetup_r+0xba>
 801ad78:	4b25      	ldr	r3, [pc, #148]	; (801ae10 <__swsetup_r+0xd4>)
 801ad7a:	429c      	cmp	r4, r3
 801ad7c:	d101      	bne.n	801ad82 <__swsetup_r+0x46>
 801ad7e:	68ac      	ldr	r4, [r5, #8]
 801ad80:	e7eb      	b.n	801ad5a <__swsetup_r+0x1e>
 801ad82:	4b24      	ldr	r3, [pc, #144]	; (801ae14 <__swsetup_r+0xd8>)
 801ad84:	429c      	cmp	r4, r3
 801ad86:	bf08      	it	eq
 801ad88:	68ec      	ldreq	r4, [r5, #12]
 801ad8a:	e7e6      	b.n	801ad5a <__swsetup_r+0x1e>
 801ad8c:	0758      	lsls	r0, r3, #29
 801ad8e:	d512      	bpl.n	801adb6 <__swsetup_r+0x7a>
 801ad90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ad92:	b141      	cbz	r1, 801ada6 <__swsetup_r+0x6a>
 801ad94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ad98:	4299      	cmp	r1, r3
 801ad9a:	d002      	beq.n	801ada2 <__swsetup_r+0x66>
 801ad9c:	4630      	mov	r0, r6
 801ad9e:	f000 fa5b 	bl	801b258 <_free_r>
 801ada2:	2300      	movs	r3, #0
 801ada4:	6363      	str	r3, [r4, #52]	; 0x34
 801ada6:	89a3      	ldrh	r3, [r4, #12]
 801ada8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801adac:	81a3      	strh	r3, [r4, #12]
 801adae:	2300      	movs	r3, #0
 801adb0:	6063      	str	r3, [r4, #4]
 801adb2:	6923      	ldr	r3, [r4, #16]
 801adb4:	6023      	str	r3, [r4, #0]
 801adb6:	89a3      	ldrh	r3, [r4, #12]
 801adb8:	f043 0308 	orr.w	r3, r3, #8
 801adbc:	81a3      	strh	r3, [r4, #12]
 801adbe:	6923      	ldr	r3, [r4, #16]
 801adc0:	b94b      	cbnz	r3, 801add6 <__swsetup_r+0x9a>
 801adc2:	89a3      	ldrh	r3, [r4, #12]
 801adc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801adc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801adcc:	d003      	beq.n	801add6 <__swsetup_r+0x9a>
 801adce:	4621      	mov	r1, r4
 801add0:	4630      	mov	r0, r6
 801add2:	f000 fa01 	bl	801b1d8 <__smakebuf_r>
 801add6:	89a0      	ldrh	r0, [r4, #12]
 801add8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801addc:	f010 0301 	ands.w	r3, r0, #1
 801ade0:	d00a      	beq.n	801adf8 <__swsetup_r+0xbc>
 801ade2:	2300      	movs	r3, #0
 801ade4:	60a3      	str	r3, [r4, #8]
 801ade6:	6963      	ldr	r3, [r4, #20]
 801ade8:	425b      	negs	r3, r3
 801adea:	61a3      	str	r3, [r4, #24]
 801adec:	6923      	ldr	r3, [r4, #16]
 801adee:	b943      	cbnz	r3, 801ae02 <__swsetup_r+0xc6>
 801adf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801adf4:	d1ba      	bne.n	801ad6c <__swsetup_r+0x30>
 801adf6:	bd70      	pop	{r4, r5, r6, pc}
 801adf8:	0781      	lsls	r1, r0, #30
 801adfa:	bf58      	it	pl
 801adfc:	6963      	ldrpl	r3, [r4, #20]
 801adfe:	60a3      	str	r3, [r4, #8]
 801ae00:	e7f4      	b.n	801adec <__swsetup_r+0xb0>
 801ae02:	2000      	movs	r0, #0
 801ae04:	e7f7      	b.n	801adf6 <__swsetup_r+0xba>
 801ae06:	bf00      	nop
 801ae08:	240000d8 	.word	0x240000d8
 801ae0c:	0801ba18 	.word	0x0801ba18
 801ae10:	0801ba38 	.word	0x0801ba38
 801ae14:	0801b9f8 	.word	0x0801b9f8

0801ae18 <__sflush_r>:
 801ae18:	898a      	ldrh	r2, [r1, #12]
 801ae1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae1e:	4605      	mov	r5, r0
 801ae20:	0710      	lsls	r0, r2, #28
 801ae22:	460c      	mov	r4, r1
 801ae24:	d458      	bmi.n	801aed8 <__sflush_r+0xc0>
 801ae26:	684b      	ldr	r3, [r1, #4]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	dc05      	bgt.n	801ae38 <__sflush_r+0x20>
 801ae2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	dc02      	bgt.n	801ae38 <__sflush_r+0x20>
 801ae32:	2000      	movs	r0, #0
 801ae34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ae3a:	2e00      	cmp	r6, #0
 801ae3c:	d0f9      	beq.n	801ae32 <__sflush_r+0x1a>
 801ae3e:	2300      	movs	r3, #0
 801ae40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ae44:	682f      	ldr	r7, [r5, #0]
 801ae46:	602b      	str	r3, [r5, #0]
 801ae48:	d032      	beq.n	801aeb0 <__sflush_r+0x98>
 801ae4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ae4c:	89a3      	ldrh	r3, [r4, #12]
 801ae4e:	075a      	lsls	r2, r3, #29
 801ae50:	d505      	bpl.n	801ae5e <__sflush_r+0x46>
 801ae52:	6863      	ldr	r3, [r4, #4]
 801ae54:	1ac0      	subs	r0, r0, r3
 801ae56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ae58:	b10b      	cbz	r3, 801ae5e <__sflush_r+0x46>
 801ae5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae5c:	1ac0      	subs	r0, r0, r3
 801ae5e:	2300      	movs	r3, #0
 801ae60:	4602      	mov	r2, r0
 801ae62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ae64:	6a21      	ldr	r1, [r4, #32]
 801ae66:	4628      	mov	r0, r5
 801ae68:	47b0      	blx	r6
 801ae6a:	1c43      	adds	r3, r0, #1
 801ae6c:	89a3      	ldrh	r3, [r4, #12]
 801ae6e:	d106      	bne.n	801ae7e <__sflush_r+0x66>
 801ae70:	6829      	ldr	r1, [r5, #0]
 801ae72:	291d      	cmp	r1, #29
 801ae74:	d82c      	bhi.n	801aed0 <__sflush_r+0xb8>
 801ae76:	4a2a      	ldr	r2, [pc, #168]	; (801af20 <__sflush_r+0x108>)
 801ae78:	40ca      	lsrs	r2, r1
 801ae7a:	07d6      	lsls	r6, r2, #31
 801ae7c:	d528      	bpl.n	801aed0 <__sflush_r+0xb8>
 801ae7e:	2200      	movs	r2, #0
 801ae80:	6062      	str	r2, [r4, #4]
 801ae82:	04d9      	lsls	r1, r3, #19
 801ae84:	6922      	ldr	r2, [r4, #16]
 801ae86:	6022      	str	r2, [r4, #0]
 801ae88:	d504      	bpl.n	801ae94 <__sflush_r+0x7c>
 801ae8a:	1c42      	adds	r2, r0, #1
 801ae8c:	d101      	bne.n	801ae92 <__sflush_r+0x7a>
 801ae8e:	682b      	ldr	r3, [r5, #0]
 801ae90:	b903      	cbnz	r3, 801ae94 <__sflush_r+0x7c>
 801ae92:	6560      	str	r0, [r4, #84]	; 0x54
 801ae94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae96:	602f      	str	r7, [r5, #0]
 801ae98:	2900      	cmp	r1, #0
 801ae9a:	d0ca      	beq.n	801ae32 <__sflush_r+0x1a>
 801ae9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aea0:	4299      	cmp	r1, r3
 801aea2:	d002      	beq.n	801aeaa <__sflush_r+0x92>
 801aea4:	4628      	mov	r0, r5
 801aea6:	f000 f9d7 	bl	801b258 <_free_r>
 801aeaa:	2000      	movs	r0, #0
 801aeac:	6360      	str	r0, [r4, #52]	; 0x34
 801aeae:	e7c1      	b.n	801ae34 <__sflush_r+0x1c>
 801aeb0:	6a21      	ldr	r1, [r4, #32]
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	4628      	mov	r0, r5
 801aeb6:	47b0      	blx	r6
 801aeb8:	1c41      	adds	r1, r0, #1
 801aeba:	d1c7      	bne.n	801ae4c <__sflush_r+0x34>
 801aebc:	682b      	ldr	r3, [r5, #0]
 801aebe:	2b00      	cmp	r3, #0
 801aec0:	d0c4      	beq.n	801ae4c <__sflush_r+0x34>
 801aec2:	2b1d      	cmp	r3, #29
 801aec4:	d001      	beq.n	801aeca <__sflush_r+0xb2>
 801aec6:	2b16      	cmp	r3, #22
 801aec8:	d101      	bne.n	801aece <__sflush_r+0xb6>
 801aeca:	602f      	str	r7, [r5, #0]
 801aecc:	e7b1      	b.n	801ae32 <__sflush_r+0x1a>
 801aece:	89a3      	ldrh	r3, [r4, #12]
 801aed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aed4:	81a3      	strh	r3, [r4, #12]
 801aed6:	e7ad      	b.n	801ae34 <__sflush_r+0x1c>
 801aed8:	690f      	ldr	r7, [r1, #16]
 801aeda:	2f00      	cmp	r7, #0
 801aedc:	d0a9      	beq.n	801ae32 <__sflush_r+0x1a>
 801aede:	0793      	lsls	r3, r2, #30
 801aee0:	680e      	ldr	r6, [r1, #0]
 801aee2:	bf08      	it	eq
 801aee4:	694b      	ldreq	r3, [r1, #20]
 801aee6:	600f      	str	r7, [r1, #0]
 801aee8:	bf18      	it	ne
 801aeea:	2300      	movne	r3, #0
 801aeec:	eba6 0807 	sub.w	r8, r6, r7
 801aef0:	608b      	str	r3, [r1, #8]
 801aef2:	f1b8 0f00 	cmp.w	r8, #0
 801aef6:	dd9c      	ble.n	801ae32 <__sflush_r+0x1a>
 801aef8:	6a21      	ldr	r1, [r4, #32]
 801aefa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aefc:	4643      	mov	r3, r8
 801aefe:	463a      	mov	r2, r7
 801af00:	4628      	mov	r0, r5
 801af02:	47b0      	blx	r6
 801af04:	2800      	cmp	r0, #0
 801af06:	dc06      	bgt.n	801af16 <__sflush_r+0xfe>
 801af08:	89a3      	ldrh	r3, [r4, #12]
 801af0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af0e:	81a3      	strh	r3, [r4, #12]
 801af10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af14:	e78e      	b.n	801ae34 <__sflush_r+0x1c>
 801af16:	4407      	add	r7, r0
 801af18:	eba8 0800 	sub.w	r8, r8, r0
 801af1c:	e7e9      	b.n	801aef2 <__sflush_r+0xda>
 801af1e:	bf00      	nop
 801af20:	20400001 	.word	0x20400001

0801af24 <_fflush_r>:
 801af24:	b538      	push	{r3, r4, r5, lr}
 801af26:	690b      	ldr	r3, [r1, #16]
 801af28:	4605      	mov	r5, r0
 801af2a:	460c      	mov	r4, r1
 801af2c:	b913      	cbnz	r3, 801af34 <_fflush_r+0x10>
 801af2e:	2500      	movs	r5, #0
 801af30:	4628      	mov	r0, r5
 801af32:	bd38      	pop	{r3, r4, r5, pc}
 801af34:	b118      	cbz	r0, 801af3e <_fflush_r+0x1a>
 801af36:	6983      	ldr	r3, [r0, #24]
 801af38:	b90b      	cbnz	r3, 801af3e <_fflush_r+0x1a>
 801af3a:	f000 f887 	bl	801b04c <__sinit>
 801af3e:	4b14      	ldr	r3, [pc, #80]	; (801af90 <_fflush_r+0x6c>)
 801af40:	429c      	cmp	r4, r3
 801af42:	d11b      	bne.n	801af7c <_fflush_r+0x58>
 801af44:	686c      	ldr	r4, [r5, #4]
 801af46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d0ef      	beq.n	801af2e <_fflush_r+0xa>
 801af4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801af50:	07d0      	lsls	r0, r2, #31
 801af52:	d404      	bmi.n	801af5e <_fflush_r+0x3a>
 801af54:	0599      	lsls	r1, r3, #22
 801af56:	d402      	bmi.n	801af5e <_fflush_r+0x3a>
 801af58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af5a:	f000 f915 	bl	801b188 <__retarget_lock_acquire_recursive>
 801af5e:	4628      	mov	r0, r5
 801af60:	4621      	mov	r1, r4
 801af62:	f7ff ff59 	bl	801ae18 <__sflush_r>
 801af66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801af68:	07da      	lsls	r2, r3, #31
 801af6a:	4605      	mov	r5, r0
 801af6c:	d4e0      	bmi.n	801af30 <_fflush_r+0xc>
 801af6e:	89a3      	ldrh	r3, [r4, #12]
 801af70:	059b      	lsls	r3, r3, #22
 801af72:	d4dd      	bmi.n	801af30 <_fflush_r+0xc>
 801af74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801af76:	f000 f908 	bl	801b18a <__retarget_lock_release_recursive>
 801af7a:	e7d9      	b.n	801af30 <_fflush_r+0xc>
 801af7c:	4b05      	ldr	r3, [pc, #20]	; (801af94 <_fflush_r+0x70>)
 801af7e:	429c      	cmp	r4, r3
 801af80:	d101      	bne.n	801af86 <_fflush_r+0x62>
 801af82:	68ac      	ldr	r4, [r5, #8]
 801af84:	e7df      	b.n	801af46 <_fflush_r+0x22>
 801af86:	4b04      	ldr	r3, [pc, #16]	; (801af98 <_fflush_r+0x74>)
 801af88:	429c      	cmp	r4, r3
 801af8a:	bf08      	it	eq
 801af8c:	68ec      	ldreq	r4, [r5, #12]
 801af8e:	e7da      	b.n	801af46 <_fflush_r+0x22>
 801af90:	0801ba18 	.word	0x0801ba18
 801af94:	0801ba38 	.word	0x0801ba38
 801af98:	0801b9f8 	.word	0x0801b9f8

0801af9c <std>:
 801af9c:	2300      	movs	r3, #0
 801af9e:	b510      	push	{r4, lr}
 801afa0:	4604      	mov	r4, r0
 801afa2:	e9c0 3300 	strd	r3, r3, [r0]
 801afa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801afaa:	6083      	str	r3, [r0, #8]
 801afac:	8181      	strh	r1, [r0, #12]
 801afae:	6643      	str	r3, [r0, #100]	; 0x64
 801afb0:	81c2      	strh	r2, [r0, #14]
 801afb2:	6183      	str	r3, [r0, #24]
 801afb4:	4619      	mov	r1, r3
 801afb6:	2208      	movs	r2, #8
 801afb8:	305c      	adds	r0, #92	; 0x5c
 801afba:	f7ff fdef 	bl	801ab9c <memset>
 801afbe:	4b05      	ldr	r3, [pc, #20]	; (801afd4 <std+0x38>)
 801afc0:	6263      	str	r3, [r4, #36]	; 0x24
 801afc2:	4b05      	ldr	r3, [pc, #20]	; (801afd8 <std+0x3c>)
 801afc4:	62a3      	str	r3, [r4, #40]	; 0x28
 801afc6:	4b05      	ldr	r3, [pc, #20]	; (801afdc <std+0x40>)
 801afc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801afca:	4b05      	ldr	r3, [pc, #20]	; (801afe0 <std+0x44>)
 801afcc:	6224      	str	r4, [r4, #32]
 801afce:	6323      	str	r3, [r4, #48]	; 0x30
 801afd0:	bd10      	pop	{r4, pc}
 801afd2:	bf00      	nop
 801afd4:	0801b439 	.word	0x0801b439
 801afd8:	0801b45b 	.word	0x0801b45b
 801afdc:	0801b493 	.word	0x0801b493
 801afe0:	0801b4b7 	.word	0x0801b4b7

0801afe4 <_cleanup_r>:
 801afe4:	4901      	ldr	r1, [pc, #4]	; (801afec <_cleanup_r+0x8>)
 801afe6:	f000 b8af 	b.w	801b148 <_fwalk_reent>
 801afea:	bf00      	nop
 801afec:	0801af25 	.word	0x0801af25

0801aff0 <__sfmoreglue>:
 801aff0:	b570      	push	{r4, r5, r6, lr}
 801aff2:	2268      	movs	r2, #104	; 0x68
 801aff4:	1e4d      	subs	r5, r1, #1
 801aff6:	4355      	muls	r5, r2
 801aff8:	460e      	mov	r6, r1
 801affa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801affe:	f000 f997 	bl	801b330 <_malloc_r>
 801b002:	4604      	mov	r4, r0
 801b004:	b140      	cbz	r0, 801b018 <__sfmoreglue+0x28>
 801b006:	2100      	movs	r1, #0
 801b008:	e9c0 1600 	strd	r1, r6, [r0]
 801b00c:	300c      	adds	r0, #12
 801b00e:	60a0      	str	r0, [r4, #8]
 801b010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b014:	f7ff fdc2 	bl	801ab9c <memset>
 801b018:	4620      	mov	r0, r4
 801b01a:	bd70      	pop	{r4, r5, r6, pc}

0801b01c <__sfp_lock_acquire>:
 801b01c:	4801      	ldr	r0, [pc, #4]	; (801b024 <__sfp_lock_acquire+0x8>)
 801b01e:	f000 b8b3 	b.w	801b188 <__retarget_lock_acquire_recursive>
 801b022:	bf00      	nop
 801b024:	240069d9 	.word	0x240069d9

0801b028 <__sfp_lock_release>:
 801b028:	4801      	ldr	r0, [pc, #4]	; (801b030 <__sfp_lock_release+0x8>)
 801b02a:	f000 b8ae 	b.w	801b18a <__retarget_lock_release_recursive>
 801b02e:	bf00      	nop
 801b030:	240069d9 	.word	0x240069d9

0801b034 <__sinit_lock_acquire>:
 801b034:	4801      	ldr	r0, [pc, #4]	; (801b03c <__sinit_lock_acquire+0x8>)
 801b036:	f000 b8a7 	b.w	801b188 <__retarget_lock_acquire_recursive>
 801b03a:	bf00      	nop
 801b03c:	240069da 	.word	0x240069da

0801b040 <__sinit_lock_release>:
 801b040:	4801      	ldr	r0, [pc, #4]	; (801b048 <__sinit_lock_release+0x8>)
 801b042:	f000 b8a2 	b.w	801b18a <__retarget_lock_release_recursive>
 801b046:	bf00      	nop
 801b048:	240069da 	.word	0x240069da

0801b04c <__sinit>:
 801b04c:	b510      	push	{r4, lr}
 801b04e:	4604      	mov	r4, r0
 801b050:	f7ff fff0 	bl	801b034 <__sinit_lock_acquire>
 801b054:	69a3      	ldr	r3, [r4, #24]
 801b056:	b11b      	cbz	r3, 801b060 <__sinit+0x14>
 801b058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b05c:	f7ff bff0 	b.w	801b040 <__sinit_lock_release>
 801b060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b064:	6523      	str	r3, [r4, #80]	; 0x50
 801b066:	4b13      	ldr	r3, [pc, #76]	; (801b0b4 <__sinit+0x68>)
 801b068:	4a13      	ldr	r2, [pc, #76]	; (801b0b8 <__sinit+0x6c>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b06e:	42a3      	cmp	r3, r4
 801b070:	bf04      	itt	eq
 801b072:	2301      	moveq	r3, #1
 801b074:	61a3      	streq	r3, [r4, #24]
 801b076:	4620      	mov	r0, r4
 801b078:	f000 f820 	bl	801b0bc <__sfp>
 801b07c:	6060      	str	r0, [r4, #4]
 801b07e:	4620      	mov	r0, r4
 801b080:	f000 f81c 	bl	801b0bc <__sfp>
 801b084:	60a0      	str	r0, [r4, #8]
 801b086:	4620      	mov	r0, r4
 801b088:	f000 f818 	bl	801b0bc <__sfp>
 801b08c:	2200      	movs	r2, #0
 801b08e:	60e0      	str	r0, [r4, #12]
 801b090:	2104      	movs	r1, #4
 801b092:	6860      	ldr	r0, [r4, #4]
 801b094:	f7ff ff82 	bl	801af9c <std>
 801b098:	68a0      	ldr	r0, [r4, #8]
 801b09a:	2201      	movs	r2, #1
 801b09c:	2109      	movs	r1, #9
 801b09e:	f7ff ff7d 	bl	801af9c <std>
 801b0a2:	68e0      	ldr	r0, [r4, #12]
 801b0a4:	2202      	movs	r2, #2
 801b0a6:	2112      	movs	r1, #18
 801b0a8:	f7ff ff78 	bl	801af9c <std>
 801b0ac:	2301      	movs	r3, #1
 801b0ae:	61a3      	str	r3, [r4, #24]
 801b0b0:	e7d2      	b.n	801b058 <__sinit+0xc>
 801b0b2:	bf00      	nop
 801b0b4:	0801b9f4 	.word	0x0801b9f4
 801b0b8:	0801afe5 	.word	0x0801afe5

0801b0bc <__sfp>:
 801b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0be:	4607      	mov	r7, r0
 801b0c0:	f7ff ffac 	bl	801b01c <__sfp_lock_acquire>
 801b0c4:	4b1e      	ldr	r3, [pc, #120]	; (801b140 <__sfp+0x84>)
 801b0c6:	681e      	ldr	r6, [r3, #0]
 801b0c8:	69b3      	ldr	r3, [r6, #24]
 801b0ca:	b913      	cbnz	r3, 801b0d2 <__sfp+0x16>
 801b0cc:	4630      	mov	r0, r6
 801b0ce:	f7ff ffbd 	bl	801b04c <__sinit>
 801b0d2:	3648      	adds	r6, #72	; 0x48
 801b0d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b0d8:	3b01      	subs	r3, #1
 801b0da:	d503      	bpl.n	801b0e4 <__sfp+0x28>
 801b0dc:	6833      	ldr	r3, [r6, #0]
 801b0de:	b30b      	cbz	r3, 801b124 <__sfp+0x68>
 801b0e0:	6836      	ldr	r6, [r6, #0]
 801b0e2:	e7f7      	b.n	801b0d4 <__sfp+0x18>
 801b0e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b0e8:	b9d5      	cbnz	r5, 801b120 <__sfp+0x64>
 801b0ea:	4b16      	ldr	r3, [pc, #88]	; (801b144 <__sfp+0x88>)
 801b0ec:	60e3      	str	r3, [r4, #12]
 801b0ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b0f2:	6665      	str	r5, [r4, #100]	; 0x64
 801b0f4:	f000 f847 	bl	801b186 <__retarget_lock_init_recursive>
 801b0f8:	f7ff ff96 	bl	801b028 <__sfp_lock_release>
 801b0fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b104:	6025      	str	r5, [r4, #0]
 801b106:	61a5      	str	r5, [r4, #24]
 801b108:	2208      	movs	r2, #8
 801b10a:	4629      	mov	r1, r5
 801b10c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b110:	f7ff fd44 	bl	801ab9c <memset>
 801b114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b11c:	4620      	mov	r0, r4
 801b11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b120:	3468      	adds	r4, #104	; 0x68
 801b122:	e7d9      	b.n	801b0d8 <__sfp+0x1c>
 801b124:	2104      	movs	r1, #4
 801b126:	4638      	mov	r0, r7
 801b128:	f7ff ff62 	bl	801aff0 <__sfmoreglue>
 801b12c:	4604      	mov	r4, r0
 801b12e:	6030      	str	r0, [r6, #0]
 801b130:	2800      	cmp	r0, #0
 801b132:	d1d5      	bne.n	801b0e0 <__sfp+0x24>
 801b134:	f7ff ff78 	bl	801b028 <__sfp_lock_release>
 801b138:	230c      	movs	r3, #12
 801b13a:	603b      	str	r3, [r7, #0]
 801b13c:	e7ee      	b.n	801b11c <__sfp+0x60>
 801b13e:	bf00      	nop
 801b140:	0801b9f4 	.word	0x0801b9f4
 801b144:	ffff0001 	.word	0xffff0001

0801b148 <_fwalk_reent>:
 801b148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b14c:	4606      	mov	r6, r0
 801b14e:	4688      	mov	r8, r1
 801b150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b154:	2700      	movs	r7, #0
 801b156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b15a:	f1b9 0901 	subs.w	r9, r9, #1
 801b15e:	d505      	bpl.n	801b16c <_fwalk_reent+0x24>
 801b160:	6824      	ldr	r4, [r4, #0]
 801b162:	2c00      	cmp	r4, #0
 801b164:	d1f7      	bne.n	801b156 <_fwalk_reent+0xe>
 801b166:	4638      	mov	r0, r7
 801b168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b16c:	89ab      	ldrh	r3, [r5, #12]
 801b16e:	2b01      	cmp	r3, #1
 801b170:	d907      	bls.n	801b182 <_fwalk_reent+0x3a>
 801b172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b176:	3301      	adds	r3, #1
 801b178:	d003      	beq.n	801b182 <_fwalk_reent+0x3a>
 801b17a:	4629      	mov	r1, r5
 801b17c:	4630      	mov	r0, r6
 801b17e:	47c0      	blx	r8
 801b180:	4307      	orrs	r7, r0
 801b182:	3568      	adds	r5, #104	; 0x68
 801b184:	e7e9      	b.n	801b15a <_fwalk_reent+0x12>

0801b186 <__retarget_lock_init_recursive>:
 801b186:	4770      	bx	lr

0801b188 <__retarget_lock_acquire_recursive>:
 801b188:	4770      	bx	lr

0801b18a <__retarget_lock_release_recursive>:
 801b18a:	4770      	bx	lr

0801b18c <__swhatbuf_r>:
 801b18c:	b570      	push	{r4, r5, r6, lr}
 801b18e:	460e      	mov	r6, r1
 801b190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b194:	2900      	cmp	r1, #0
 801b196:	b096      	sub	sp, #88	; 0x58
 801b198:	4614      	mov	r4, r2
 801b19a:	461d      	mov	r5, r3
 801b19c:	da08      	bge.n	801b1b0 <__swhatbuf_r+0x24>
 801b19e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	602a      	str	r2, [r5, #0]
 801b1a6:	061a      	lsls	r2, r3, #24
 801b1a8:	d410      	bmi.n	801b1cc <__swhatbuf_r+0x40>
 801b1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b1ae:	e00e      	b.n	801b1ce <__swhatbuf_r+0x42>
 801b1b0:	466a      	mov	r2, sp
 801b1b2:	f000 f9a7 	bl	801b504 <_fstat_r>
 801b1b6:	2800      	cmp	r0, #0
 801b1b8:	dbf1      	blt.n	801b19e <__swhatbuf_r+0x12>
 801b1ba:	9a01      	ldr	r2, [sp, #4]
 801b1bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b1c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b1c4:	425a      	negs	r2, r3
 801b1c6:	415a      	adcs	r2, r3
 801b1c8:	602a      	str	r2, [r5, #0]
 801b1ca:	e7ee      	b.n	801b1aa <__swhatbuf_r+0x1e>
 801b1cc:	2340      	movs	r3, #64	; 0x40
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	6023      	str	r3, [r4, #0]
 801b1d2:	b016      	add	sp, #88	; 0x58
 801b1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b1d8 <__smakebuf_r>:
 801b1d8:	898b      	ldrh	r3, [r1, #12]
 801b1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b1dc:	079d      	lsls	r5, r3, #30
 801b1de:	4606      	mov	r6, r0
 801b1e0:	460c      	mov	r4, r1
 801b1e2:	d507      	bpl.n	801b1f4 <__smakebuf_r+0x1c>
 801b1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b1e8:	6023      	str	r3, [r4, #0]
 801b1ea:	6123      	str	r3, [r4, #16]
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	6163      	str	r3, [r4, #20]
 801b1f0:	b002      	add	sp, #8
 801b1f2:	bd70      	pop	{r4, r5, r6, pc}
 801b1f4:	ab01      	add	r3, sp, #4
 801b1f6:	466a      	mov	r2, sp
 801b1f8:	f7ff ffc8 	bl	801b18c <__swhatbuf_r>
 801b1fc:	9900      	ldr	r1, [sp, #0]
 801b1fe:	4605      	mov	r5, r0
 801b200:	4630      	mov	r0, r6
 801b202:	f000 f895 	bl	801b330 <_malloc_r>
 801b206:	b948      	cbnz	r0, 801b21c <__smakebuf_r+0x44>
 801b208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b20c:	059a      	lsls	r2, r3, #22
 801b20e:	d4ef      	bmi.n	801b1f0 <__smakebuf_r+0x18>
 801b210:	f023 0303 	bic.w	r3, r3, #3
 801b214:	f043 0302 	orr.w	r3, r3, #2
 801b218:	81a3      	strh	r3, [r4, #12]
 801b21a:	e7e3      	b.n	801b1e4 <__smakebuf_r+0xc>
 801b21c:	4b0d      	ldr	r3, [pc, #52]	; (801b254 <__smakebuf_r+0x7c>)
 801b21e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	6020      	str	r0, [r4, #0]
 801b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b228:	81a3      	strh	r3, [r4, #12]
 801b22a:	9b00      	ldr	r3, [sp, #0]
 801b22c:	6163      	str	r3, [r4, #20]
 801b22e:	9b01      	ldr	r3, [sp, #4]
 801b230:	6120      	str	r0, [r4, #16]
 801b232:	b15b      	cbz	r3, 801b24c <__smakebuf_r+0x74>
 801b234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b238:	4630      	mov	r0, r6
 801b23a:	f000 f975 	bl	801b528 <_isatty_r>
 801b23e:	b128      	cbz	r0, 801b24c <__smakebuf_r+0x74>
 801b240:	89a3      	ldrh	r3, [r4, #12]
 801b242:	f023 0303 	bic.w	r3, r3, #3
 801b246:	f043 0301 	orr.w	r3, r3, #1
 801b24a:	81a3      	strh	r3, [r4, #12]
 801b24c:	89a0      	ldrh	r0, [r4, #12]
 801b24e:	4305      	orrs	r5, r0
 801b250:	81a5      	strh	r5, [r4, #12]
 801b252:	e7cd      	b.n	801b1f0 <__smakebuf_r+0x18>
 801b254:	0801afe5 	.word	0x0801afe5

0801b258 <_free_r>:
 801b258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b25a:	2900      	cmp	r1, #0
 801b25c:	d044      	beq.n	801b2e8 <_free_r+0x90>
 801b25e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b262:	9001      	str	r0, [sp, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	f1a1 0404 	sub.w	r4, r1, #4
 801b26a:	bfb8      	it	lt
 801b26c:	18e4      	addlt	r4, r4, r3
 801b26e:	f000 f97d 	bl	801b56c <__malloc_lock>
 801b272:	4a1e      	ldr	r2, [pc, #120]	; (801b2ec <_free_r+0x94>)
 801b274:	9801      	ldr	r0, [sp, #4]
 801b276:	6813      	ldr	r3, [r2, #0]
 801b278:	b933      	cbnz	r3, 801b288 <_free_r+0x30>
 801b27a:	6063      	str	r3, [r4, #4]
 801b27c:	6014      	str	r4, [r2, #0]
 801b27e:	b003      	add	sp, #12
 801b280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b284:	f000 b978 	b.w	801b578 <__malloc_unlock>
 801b288:	42a3      	cmp	r3, r4
 801b28a:	d908      	bls.n	801b29e <_free_r+0x46>
 801b28c:	6825      	ldr	r5, [r4, #0]
 801b28e:	1961      	adds	r1, r4, r5
 801b290:	428b      	cmp	r3, r1
 801b292:	bf01      	itttt	eq
 801b294:	6819      	ldreq	r1, [r3, #0]
 801b296:	685b      	ldreq	r3, [r3, #4]
 801b298:	1949      	addeq	r1, r1, r5
 801b29a:	6021      	streq	r1, [r4, #0]
 801b29c:	e7ed      	b.n	801b27a <_free_r+0x22>
 801b29e:	461a      	mov	r2, r3
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	b10b      	cbz	r3, 801b2a8 <_free_r+0x50>
 801b2a4:	42a3      	cmp	r3, r4
 801b2a6:	d9fa      	bls.n	801b29e <_free_r+0x46>
 801b2a8:	6811      	ldr	r1, [r2, #0]
 801b2aa:	1855      	adds	r5, r2, r1
 801b2ac:	42a5      	cmp	r5, r4
 801b2ae:	d10b      	bne.n	801b2c8 <_free_r+0x70>
 801b2b0:	6824      	ldr	r4, [r4, #0]
 801b2b2:	4421      	add	r1, r4
 801b2b4:	1854      	adds	r4, r2, r1
 801b2b6:	42a3      	cmp	r3, r4
 801b2b8:	6011      	str	r1, [r2, #0]
 801b2ba:	d1e0      	bne.n	801b27e <_free_r+0x26>
 801b2bc:	681c      	ldr	r4, [r3, #0]
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	6053      	str	r3, [r2, #4]
 801b2c2:	4421      	add	r1, r4
 801b2c4:	6011      	str	r1, [r2, #0]
 801b2c6:	e7da      	b.n	801b27e <_free_r+0x26>
 801b2c8:	d902      	bls.n	801b2d0 <_free_r+0x78>
 801b2ca:	230c      	movs	r3, #12
 801b2cc:	6003      	str	r3, [r0, #0]
 801b2ce:	e7d6      	b.n	801b27e <_free_r+0x26>
 801b2d0:	6825      	ldr	r5, [r4, #0]
 801b2d2:	1961      	adds	r1, r4, r5
 801b2d4:	428b      	cmp	r3, r1
 801b2d6:	bf04      	itt	eq
 801b2d8:	6819      	ldreq	r1, [r3, #0]
 801b2da:	685b      	ldreq	r3, [r3, #4]
 801b2dc:	6063      	str	r3, [r4, #4]
 801b2de:	bf04      	itt	eq
 801b2e0:	1949      	addeq	r1, r1, r5
 801b2e2:	6021      	streq	r1, [r4, #0]
 801b2e4:	6054      	str	r4, [r2, #4]
 801b2e6:	e7ca      	b.n	801b27e <_free_r+0x26>
 801b2e8:	b003      	add	sp, #12
 801b2ea:	bd30      	pop	{r4, r5, pc}
 801b2ec:	240069dc 	.word	0x240069dc

0801b2f0 <sbrk_aligned>:
 801b2f0:	b570      	push	{r4, r5, r6, lr}
 801b2f2:	4e0e      	ldr	r6, [pc, #56]	; (801b32c <sbrk_aligned+0x3c>)
 801b2f4:	460c      	mov	r4, r1
 801b2f6:	6831      	ldr	r1, [r6, #0]
 801b2f8:	4605      	mov	r5, r0
 801b2fa:	b911      	cbnz	r1, 801b302 <sbrk_aligned+0x12>
 801b2fc:	f000 f88c 	bl	801b418 <_sbrk_r>
 801b300:	6030      	str	r0, [r6, #0]
 801b302:	4621      	mov	r1, r4
 801b304:	4628      	mov	r0, r5
 801b306:	f000 f887 	bl	801b418 <_sbrk_r>
 801b30a:	1c43      	adds	r3, r0, #1
 801b30c:	d00a      	beq.n	801b324 <sbrk_aligned+0x34>
 801b30e:	1cc4      	adds	r4, r0, #3
 801b310:	f024 0403 	bic.w	r4, r4, #3
 801b314:	42a0      	cmp	r0, r4
 801b316:	d007      	beq.n	801b328 <sbrk_aligned+0x38>
 801b318:	1a21      	subs	r1, r4, r0
 801b31a:	4628      	mov	r0, r5
 801b31c:	f000 f87c 	bl	801b418 <_sbrk_r>
 801b320:	3001      	adds	r0, #1
 801b322:	d101      	bne.n	801b328 <sbrk_aligned+0x38>
 801b324:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b328:	4620      	mov	r0, r4
 801b32a:	bd70      	pop	{r4, r5, r6, pc}
 801b32c:	240069e0 	.word	0x240069e0

0801b330 <_malloc_r>:
 801b330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b334:	1ccd      	adds	r5, r1, #3
 801b336:	f025 0503 	bic.w	r5, r5, #3
 801b33a:	3508      	adds	r5, #8
 801b33c:	2d0c      	cmp	r5, #12
 801b33e:	bf38      	it	cc
 801b340:	250c      	movcc	r5, #12
 801b342:	2d00      	cmp	r5, #0
 801b344:	4607      	mov	r7, r0
 801b346:	db01      	blt.n	801b34c <_malloc_r+0x1c>
 801b348:	42a9      	cmp	r1, r5
 801b34a:	d905      	bls.n	801b358 <_malloc_r+0x28>
 801b34c:	230c      	movs	r3, #12
 801b34e:	603b      	str	r3, [r7, #0]
 801b350:	2600      	movs	r6, #0
 801b352:	4630      	mov	r0, r6
 801b354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b358:	4e2e      	ldr	r6, [pc, #184]	; (801b414 <_malloc_r+0xe4>)
 801b35a:	f000 f907 	bl	801b56c <__malloc_lock>
 801b35e:	6833      	ldr	r3, [r6, #0]
 801b360:	461c      	mov	r4, r3
 801b362:	bb34      	cbnz	r4, 801b3b2 <_malloc_r+0x82>
 801b364:	4629      	mov	r1, r5
 801b366:	4638      	mov	r0, r7
 801b368:	f7ff ffc2 	bl	801b2f0 <sbrk_aligned>
 801b36c:	1c43      	adds	r3, r0, #1
 801b36e:	4604      	mov	r4, r0
 801b370:	d14d      	bne.n	801b40e <_malloc_r+0xde>
 801b372:	6834      	ldr	r4, [r6, #0]
 801b374:	4626      	mov	r6, r4
 801b376:	2e00      	cmp	r6, #0
 801b378:	d140      	bne.n	801b3fc <_malloc_r+0xcc>
 801b37a:	6823      	ldr	r3, [r4, #0]
 801b37c:	4631      	mov	r1, r6
 801b37e:	4638      	mov	r0, r7
 801b380:	eb04 0803 	add.w	r8, r4, r3
 801b384:	f000 f848 	bl	801b418 <_sbrk_r>
 801b388:	4580      	cmp	r8, r0
 801b38a:	d13a      	bne.n	801b402 <_malloc_r+0xd2>
 801b38c:	6821      	ldr	r1, [r4, #0]
 801b38e:	3503      	adds	r5, #3
 801b390:	1a6d      	subs	r5, r5, r1
 801b392:	f025 0503 	bic.w	r5, r5, #3
 801b396:	3508      	adds	r5, #8
 801b398:	2d0c      	cmp	r5, #12
 801b39a:	bf38      	it	cc
 801b39c:	250c      	movcc	r5, #12
 801b39e:	4629      	mov	r1, r5
 801b3a0:	4638      	mov	r0, r7
 801b3a2:	f7ff ffa5 	bl	801b2f0 <sbrk_aligned>
 801b3a6:	3001      	adds	r0, #1
 801b3a8:	d02b      	beq.n	801b402 <_malloc_r+0xd2>
 801b3aa:	6823      	ldr	r3, [r4, #0]
 801b3ac:	442b      	add	r3, r5
 801b3ae:	6023      	str	r3, [r4, #0]
 801b3b0:	e00e      	b.n	801b3d0 <_malloc_r+0xa0>
 801b3b2:	6822      	ldr	r2, [r4, #0]
 801b3b4:	1b52      	subs	r2, r2, r5
 801b3b6:	d41e      	bmi.n	801b3f6 <_malloc_r+0xc6>
 801b3b8:	2a0b      	cmp	r2, #11
 801b3ba:	d916      	bls.n	801b3ea <_malloc_r+0xba>
 801b3bc:	1961      	adds	r1, r4, r5
 801b3be:	42a3      	cmp	r3, r4
 801b3c0:	6025      	str	r5, [r4, #0]
 801b3c2:	bf18      	it	ne
 801b3c4:	6059      	strne	r1, [r3, #4]
 801b3c6:	6863      	ldr	r3, [r4, #4]
 801b3c8:	bf08      	it	eq
 801b3ca:	6031      	streq	r1, [r6, #0]
 801b3cc:	5162      	str	r2, [r4, r5]
 801b3ce:	604b      	str	r3, [r1, #4]
 801b3d0:	4638      	mov	r0, r7
 801b3d2:	f104 060b 	add.w	r6, r4, #11
 801b3d6:	f000 f8cf 	bl	801b578 <__malloc_unlock>
 801b3da:	f026 0607 	bic.w	r6, r6, #7
 801b3de:	1d23      	adds	r3, r4, #4
 801b3e0:	1af2      	subs	r2, r6, r3
 801b3e2:	d0b6      	beq.n	801b352 <_malloc_r+0x22>
 801b3e4:	1b9b      	subs	r3, r3, r6
 801b3e6:	50a3      	str	r3, [r4, r2]
 801b3e8:	e7b3      	b.n	801b352 <_malloc_r+0x22>
 801b3ea:	6862      	ldr	r2, [r4, #4]
 801b3ec:	42a3      	cmp	r3, r4
 801b3ee:	bf0c      	ite	eq
 801b3f0:	6032      	streq	r2, [r6, #0]
 801b3f2:	605a      	strne	r2, [r3, #4]
 801b3f4:	e7ec      	b.n	801b3d0 <_malloc_r+0xa0>
 801b3f6:	4623      	mov	r3, r4
 801b3f8:	6864      	ldr	r4, [r4, #4]
 801b3fa:	e7b2      	b.n	801b362 <_malloc_r+0x32>
 801b3fc:	4634      	mov	r4, r6
 801b3fe:	6876      	ldr	r6, [r6, #4]
 801b400:	e7b9      	b.n	801b376 <_malloc_r+0x46>
 801b402:	230c      	movs	r3, #12
 801b404:	603b      	str	r3, [r7, #0]
 801b406:	4638      	mov	r0, r7
 801b408:	f000 f8b6 	bl	801b578 <__malloc_unlock>
 801b40c:	e7a1      	b.n	801b352 <_malloc_r+0x22>
 801b40e:	6025      	str	r5, [r4, #0]
 801b410:	e7de      	b.n	801b3d0 <_malloc_r+0xa0>
 801b412:	bf00      	nop
 801b414:	240069dc 	.word	0x240069dc

0801b418 <_sbrk_r>:
 801b418:	b538      	push	{r3, r4, r5, lr}
 801b41a:	4d06      	ldr	r5, [pc, #24]	; (801b434 <_sbrk_r+0x1c>)
 801b41c:	2300      	movs	r3, #0
 801b41e:	4604      	mov	r4, r0
 801b420:	4608      	mov	r0, r1
 801b422:	602b      	str	r3, [r5, #0]
 801b424:	f7e9 fbca 	bl	8004bbc <_sbrk>
 801b428:	1c43      	adds	r3, r0, #1
 801b42a:	d102      	bne.n	801b432 <_sbrk_r+0x1a>
 801b42c:	682b      	ldr	r3, [r5, #0]
 801b42e:	b103      	cbz	r3, 801b432 <_sbrk_r+0x1a>
 801b430:	6023      	str	r3, [r4, #0]
 801b432:	bd38      	pop	{r3, r4, r5, pc}
 801b434:	240069e4 	.word	0x240069e4

0801b438 <__sread>:
 801b438:	b510      	push	{r4, lr}
 801b43a:	460c      	mov	r4, r1
 801b43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b440:	f000 f8a0 	bl	801b584 <_read_r>
 801b444:	2800      	cmp	r0, #0
 801b446:	bfab      	itete	ge
 801b448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b44a:	89a3      	ldrhlt	r3, [r4, #12]
 801b44c:	181b      	addge	r3, r3, r0
 801b44e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b452:	bfac      	ite	ge
 801b454:	6563      	strge	r3, [r4, #84]	; 0x54
 801b456:	81a3      	strhlt	r3, [r4, #12]
 801b458:	bd10      	pop	{r4, pc}

0801b45a <__swrite>:
 801b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b45e:	461f      	mov	r7, r3
 801b460:	898b      	ldrh	r3, [r1, #12]
 801b462:	05db      	lsls	r3, r3, #23
 801b464:	4605      	mov	r5, r0
 801b466:	460c      	mov	r4, r1
 801b468:	4616      	mov	r6, r2
 801b46a:	d505      	bpl.n	801b478 <__swrite+0x1e>
 801b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b470:	2302      	movs	r3, #2
 801b472:	2200      	movs	r2, #0
 801b474:	f000 f868 	bl	801b548 <_lseek_r>
 801b478:	89a3      	ldrh	r3, [r4, #12]
 801b47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b482:	81a3      	strh	r3, [r4, #12]
 801b484:	4632      	mov	r2, r6
 801b486:	463b      	mov	r3, r7
 801b488:	4628      	mov	r0, r5
 801b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b48e:	f000 b817 	b.w	801b4c0 <_write_r>

0801b492 <__sseek>:
 801b492:	b510      	push	{r4, lr}
 801b494:	460c      	mov	r4, r1
 801b496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b49a:	f000 f855 	bl	801b548 <_lseek_r>
 801b49e:	1c43      	adds	r3, r0, #1
 801b4a0:	89a3      	ldrh	r3, [r4, #12]
 801b4a2:	bf15      	itete	ne
 801b4a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801b4a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b4aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b4ae:	81a3      	strheq	r3, [r4, #12]
 801b4b0:	bf18      	it	ne
 801b4b2:	81a3      	strhne	r3, [r4, #12]
 801b4b4:	bd10      	pop	{r4, pc}

0801b4b6 <__sclose>:
 801b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4ba:	f000 b813 	b.w	801b4e4 <_close_r>
	...

0801b4c0 <_write_r>:
 801b4c0:	b538      	push	{r3, r4, r5, lr}
 801b4c2:	4d07      	ldr	r5, [pc, #28]	; (801b4e0 <_write_r+0x20>)
 801b4c4:	4604      	mov	r4, r0
 801b4c6:	4608      	mov	r0, r1
 801b4c8:	4611      	mov	r1, r2
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	602a      	str	r2, [r5, #0]
 801b4ce:	461a      	mov	r2, r3
 801b4d0:	f7e9 fb23 	bl	8004b1a <_write>
 801b4d4:	1c43      	adds	r3, r0, #1
 801b4d6:	d102      	bne.n	801b4de <_write_r+0x1e>
 801b4d8:	682b      	ldr	r3, [r5, #0]
 801b4da:	b103      	cbz	r3, 801b4de <_write_r+0x1e>
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	bd38      	pop	{r3, r4, r5, pc}
 801b4e0:	240069e4 	.word	0x240069e4

0801b4e4 <_close_r>:
 801b4e4:	b538      	push	{r3, r4, r5, lr}
 801b4e6:	4d06      	ldr	r5, [pc, #24]	; (801b500 <_close_r+0x1c>)
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	4604      	mov	r4, r0
 801b4ec:	4608      	mov	r0, r1
 801b4ee:	602b      	str	r3, [r5, #0]
 801b4f0:	f7e9 fb2f 	bl	8004b52 <_close>
 801b4f4:	1c43      	adds	r3, r0, #1
 801b4f6:	d102      	bne.n	801b4fe <_close_r+0x1a>
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	b103      	cbz	r3, 801b4fe <_close_r+0x1a>
 801b4fc:	6023      	str	r3, [r4, #0]
 801b4fe:	bd38      	pop	{r3, r4, r5, pc}
 801b500:	240069e4 	.word	0x240069e4

0801b504 <_fstat_r>:
 801b504:	b538      	push	{r3, r4, r5, lr}
 801b506:	4d07      	ldr	r5, [pc, #28]	; (801b524 <_fstat_r+0x20>)
 801b508:	2300      	movs	r3, #0
 801b50a:	4604      	mov	r4, r0
 801b50c:	4608      	mov	r0, r1
 801b50e:	4611      	mov	r1, r2
 801b510:	602b      	str	r3, [r5, #0]
 801b512:	f7e9 fb2a 	bl	8004b6a <_fstat>
 801b516:	1c43      	adds	r3, r0, #1
 801b518:	d102      	bne.n	801b520 <_fstat_r+0x1c>
 801b51a:	682b      	ldr	r3, [r5, #0]
 801b51c:	b103      	cbz	r3, 801b520 <_fstat_r+0x1c>
 801b51e:	6023      	str	r3, [r4, #0]
 801b520:	bd38      	pop	{r3, r4, r5, pc}
 801b522:	bf00      	nop
 801b524:	240069e4 	.word	0x240069e4

0801b528 <_isatty_r>:
 801b528:	b538      	push	{r3, r4, r5, lr}
 801b52a:	4d06      	ldr	r5, [pc, #24]	; (801b544 <_isatty_r+0x1c>)
 801b52c:	2300      	movs	r3, #0
 801b52e:	4604      	mov	r4, r0
 801b530:	4608      	mov	r0, r1
 801b532:	602b      	str	r3, [r5, #0]
 801b534:	f7e9 fb29 	bl	8004b8a <_isatty>
 801b538:	1c43      	adds	r3, r0, #1
 801b53a:	d102      	bne.n	801b542 <_isatty_r+0x1a>
 801b53c:	682b      	ldr	r3, [r5, #0]
 801b53e:	b103      	cbz	r3, 801b542 <_isatty_r+0x1a>
 801b540:	6023      	str	r3, [r4, #0]
 801b542:	bd38      	pop	{r3, r4, r5, pc}
 801b544:	240069e4 	.word	0x240069e4

0801b548 <_lseek_r>:
 801b548:	b538      	push	{r3, r4, r5, lr}
 801b54a:	4d07      	ldr	r5, [pc, #28]	; (801b568 <_lseek_r+0x20>)
 801b54c:	4604      	mov	r4, r0
 801b54e:	4608      	mov	r0, r1
 801b550:	4611      	mov	r1, r2
 801b552:	2200      	movs	r2, #0
 801b554:	602a      	str	r2, [r5, #0]
 801b556:	461a      	mov	r2, r3
 801b558:	f7e9 fb22 	bl	8004ba0 <_lseek>
 801b55c:	1c43      	adds	r3, r0, #1
 801b55e:	d102      	bne.n	801b566 <_lseek_r+0x1e>
 801b560:	682b      	ldr	r3, [r5, #0]
 801b562:	b103      	cbz	r3, 801b566 <_lseek_r+0x1e>
 801b564:	6023      	str	r3, [r4, #0]
 801b566:	bd38      	pop	{r3, r4, r5, pc}
 801b568:	240069e4 	.word	0x240069e4

0801b56c <__malloc_lock>:
 801b56c:	4801      	ldr	r0, [pc, #4]	; (801b574 <__malloc_lock+0x8>)
 801b56e:	f7ff be0b 	b.w	801b188 <__retarget_lock_acquire_recursive>
 801b572:	bf00      	nop
 801b574:	240069d8 	.word	0x240069d8

0801b578 <__malloc_unlock>:
 801b578:	4801      	ldr	r0, [pc, #4]	; (801b580 <__malloc_unlock+0x8>)
 801b57a:	f7ff be06 	b.w	801b18a <__retarget_lock_release_recursive>
 801b57e:	bf00      	nop
 801b580:	240069d8 	.word	0x240069d8

0801b584 <_read_r>:
 801b584:	b538      	push	{r3, r4, r5, lr}
 801b586:	4d07      	ldr	r5, [pc, #28]	; (801b5a4 <_read_r+0x20>)
 801b588:	4604      	mov	r4, r0
 801b58a:	4608      	mov	r0, r1
 801b58c:	4611      	mov	r1, r2
 801b58e:	2200      	movs	r2, #0
 801b590:	602a      	str	r2, [r5, #0]
 801b592:	461a      	mov	r2, r3
 801b594:	f7e9 faa4 	bl	8004ae0 <_read>
 801b598:	1c43      	adds	r3, r0, #1
 801b59a:	d102      	bne.n	801b5a2 <_read_r+0x1e>
 801b59c:	682b      	ldr	r3, [r5, #0]
 801b59e:	b103      	cbz	r3, 801b5a2 <_read_r+0x1e>
 801b5a0:	6023      	str	r3, [r4, #0]
 801b5a2:	bd38      	pop	{r3, r4, r5, pc}
 801b5a4:	240069e4 	.word	0x240069e4

0801b5a8 <_init>:
 801b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5aa:	bf00      	nop
 801b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5ae:	bc08      	pop	{r3}
 801b5b0:	469e      	mov	lr, r3
 801b5b2:	4770      	bx	lr

0801b5b4 <_fini>:
 801b5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5b6:	bf00      	nop
 801b5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5ba:	bc08      	pop	{r3}
 801b5bc:	469e      	mov	lr, r3
 801b5be:	4770      	bx	lr
