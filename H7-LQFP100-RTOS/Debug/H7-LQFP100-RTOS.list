
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016f10  08016f10  00026f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017358  08017358  00027358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017360  08017360  00027360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017364  08017364  00027364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  08017470  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  08017470  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033911  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000056f2  00000000  00000000  00063a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002740  00000000  00000000  00069140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002528  00000000  00000000  0006b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400f4  00000000  00000000  0006dda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032258  00000000  00000000  000ade9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194ae2  00000000  00000000  000e00f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00274bd6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000afe0  00000000  00000000  00274c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ef8 	.word	0x08016ef8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016ef8 	.word	0x08016ef8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c3c 	.word	0x24000c3c

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a19      	ldr	r2, [pc, #100]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fc48 	bl	8012eac <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e023      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fc3d 	bl	8012eac <osEventFlagsSet>
}
 8000632:	e018      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fc32 	bl	8012eac <osEventFlagsSet>
}
 8000648:	e00d      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2108      	movs	r1, #8
 8000658:	4618      	mov	r0, r3
 800065a:	f012 fc27 	bl	8012eac <osEventFlagsSet>
}
 800065e:	e002      	b.n	8000666 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000660:	4808      	ldr	r0, [pc, #32]	; (8000684 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000662:	f016 f899 	bl	8016798 <puts>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	24000508 	.word	0x24000508
 8000674:	24000c5c 	.word	0x24000c5c
 8000678:	24000554 	.word	0x24000554
 800067c:	240005a0 	.word	0x240005a0
 8000680:	240005ec 	.word	0x240005ec
 8000684:	08016f80 	.word	0x08016f80

08000688 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af02      	add	r7, sp, #8
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000690:	2201      	movs	r2, #1
 8000692:	49f2      	ldr	r1, [pc, #968]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 8000694:	48f2      	ldr	r0, [pc, #968]	; (8000a60 <HAL_UART_RxCpltCallback+0x3d8>)
 8000696:	f00f fd35 	bl	8010104 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800069a:	4bf0      	ldr	r3, [pc, #960]	; (8000a5c <HAL_UART_RxCpltCallback+0x3d4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2be0      	cmp	r3, #224	; 0xe0
 80006a4:	f200 83eb 	bhi.w	8000e7e <HAL_UART_RxCpltCallback+0x7f6>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <HAL_UART_RxCpltCallback+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	08000a49 	.word	0x08000a49
 80006b4:	08000a85 	.word	0x08000a85
 80006b8:	08000b0b 	.word	0x08000b0b
 80006bc:	08000b35 	.word	0x08000b35
 80006c0:	08000b5d 	.word	0x08000b5d
 80006c4:	08000b87 	.word	0x08000b87
 80006c8:	08000bb3 	.word	0x08000bb3
 80006cc:	08000bdf 	.word	0x08000bdf
 80006d0:	08000c09 	.word	0x08000c09
 80006d4:	08000c35 	.word	0x08000c35
 80006d8:	08000c61 	.word	0x08000c61
 80006dc:	08000c93 	.word	0x08000c93
 80006e0:	08000cc5 	.word	0x08000cc5
 80006e4:	08000d17 	.word	0x08000d17
 80006e8:	08000e1d 	.word	0x08000e1d
 80006ec:	08000e4d 	.word	0x08000e4d
 80006f0:	08000a35 	.word	0x08000a35
 80006f4:	08000a71 	.word	0x08000a71
 80006f8:	08000af5 	.word	0x08000af5
 80006fc:	08000b21 	.word	0x08000b21
 8000700:	08000b49 	.word	0x08000b49
 8000704:	08000b71 	.word	0x08000b71
 8000708:	08000b9d 	.word	0x08000b9d
 800070c:	08000bc9 	.word	0x08000bc9
 8000710:	08000bf5 	.word	0x08000bf5
 8000714:	08000c1d 	.word	0x08000c1d
 8000718:	08000c45 	.word	0x08000c45
 800071c:	08000c77 	.word	0x08000c77
 8000720:	08000ca9 	.word	0x08000ca9
 8000724:	08000cdb 	.word	0x08000cdb
 8000728:	08000df5 	.word	0x08000df5
 800072c:	08000e45 	.word	0x08000e45
 8000730:	08000e7f 	.word	0x08000e7f
 8000734:	08000e7f 	.word	0x08000e7f
 8000738:	08000e7f 	.word	0x08000e7f
 800073c:	08000e7f 	.word	0x08000e7f
 8000740:	08000e7f 	.word	0x08000e7f
 8000744:	08000e7f 	.word	0x08000e7f
 8000748:	08000e7f 	.word	0x08000e7f
 800074c:	08000e7f 	.word	0x08000e7f
 8000750:	08000e7f 	.word	0x08000e7f
 8000754:	08000e7f 	.word	0x08000e7f
 8000758:	08000e7f 	.word	0x08000e7f
 800075c:	08000e7f 	.word	0x08000e7f
 8000760:	08000e7f 	.word	0x08000e7f
 8000764:	08000e7f 	.word	0x08000e7f
 8000768:	08000e7f 	.word	0x08000e7f
 800076c:	08000e7f 	.word	0x08000e7f
 8000770:	08000e7f 	.word	0x08000e7f
 8000774:	08000e7f 	.word	0x08000e7f
 8000778:	08000e7f 	.word	0x08000e7f
 800077c:	08000e7f 	.word	0x08000e7f
 8000780:	08000e7f 	.word	0x08000e7f
 8000784:	08000e7f 	.word	0x08000e7f
 8000788:	08000e7f 	.word	0x08000e7f
 800078c:	08000e7f 	.word	0x08000e7f
 8000790:	08000e7f 	.word	0x08000e7f
 8000794:	08000e7f 	.word	0x08000e7f
 8000798:	08000e7f 	.word	0x08000e7f
 800079c:	08000e7f 	.word	0x08000e7f
 80007a0:	08000e7f 	.word	0x08000e7f
 80007a4:	08000e7f 	.word	0x08000e7f
 80007a8:	08000e7f 	.word	0x08000e7f
 80007ac:	08000e7f 	.word	0x08000e7f
 80007b0:	08000e7f 	.word	0x08000e7f
 80007b4:	08000e7f 	.word	0x08000e7f
 80007b8:	08000e7f 	.word	0x08000e7f
 80007bc:	08000e7f 	.word	0x08000e7f
 80007c0:	08000e7f 	.word	0x08000e7f
 80007c4:	08000e7f 	.word	0x08000e7f
 80007c8:	08000e7f 	.word	0x08000e7f
 80007cc:	08000e7f 	.word	0x08000e7f
 80007d0:	08000e7f 	.word	0x08000e7f
 80007d4:	08000e7f 	.word	0x08000e7f
 80007d8:	08000e7f 	.word	0x08000e7f
 80007dc:	08000e7f 	.word	0x08000e7f
 80007e0:	08000e7f 	.word	0x08000e7f
 80007e4:	08000e7f 	.word	0x08000e7f
 80007e8:	08000e7f 	.word	0x08000e7f
 80007ec:	08000e7f 	.word	0x08000e7f
 80007f0:	08000e7f 	.word	0x08000e7f
 80007f4:	08000e7f 	.word	0x08000e7f
 80007f8:	08000e7f 	.word	0x08000e7f
 80007fc:	08000e7f 	.word	0x08000e7f
 8000800:	08000e7f 	.word	0x08000e7f
 8000804:	08000e7f 	.word	0x08000e7f
 8000808:	08000e7f 	.word	0x08000e7f
 800080c:	08000e7f 	.word	0x08000e7f
 8000810:	08000e7f 	.word	0x08000e7f
 8000814:	08000e7f 	.word	0x08000e7f
 8000818:	08000e7f 	.word	0x08000e7f
 800081c:	08000e7f 	.word	0x08000e7f
 8000820:	08000e7f 	.word	0x08000e7f
 8000824:	08000e7f 	.word	0x08000e7f
 8000828:	08000e7f 	.word	0x08000e7f
 800082c:	08000e7f 	.word	0x08000e7f
 8000830:	08000e7f 	.word	0x08000e7f
 8000834:	08000e7f 	.word	0x08000e7f
 8000838:	08000e7f 	.word	0x08000e7f
 800083c:	08000e7f 	.word	0x08000e7f
 8000840:	08000e7f 	.word	0x08000e7f
 8000844:	08000e7f 	.word	0x08000e7f
 8000848:	08000e7f 	.word	0x08000e7f
 800084c:	08000e7f 	.word	0x08000e7f
 8000850:	08000e7f 	.word	0x08000e7f
 8000854:	08000e7f 	.word	0x08000e7f
 8000858:	08000e7f 	.word	0x08000e7f
 800085c:	08000e7f 	.word	0x08000e7f
 8000860:	08000e7f 	.word	0x08000e7f
 8000864:	08000e7f 	.word	0x08000e7f
 8000868:	08000e7f 	.word	0x08000e7f
 800086c:	08000e7f 	.word	0x08000e7f
 8000870:	08000e7f 	.word	0x08000e7f
 8000874:	08000e7f 	.word	0x08000e7f
 8000878:	08000e7f 	.word	0x08000e7f
 800087c:	08000e7f 	.word	0x08000e7f
 8000880:	08000e7f 	.word	0x08000e7f
 8000884:	08000e7f 	.word	0x08000e7f
 8000888:	08000e7f 	.word	0x08000e7f
 800088c:	08000e7f 	.word	0x08000e7f
 8000890:	08000e7f 	.word	0x08000e7f
 8000894:	08000e7f 	.word	0x08000e7f
 8000898:	08000e7f 	.word	0x08000e7f
 800089c:	08000e7f 	.word	0x08000e7f
 80008a0:	08000e7f 	.word	0x08000e7f
 80008a4:	08000e7f 	.word	0x08000e7f
 80008a8:	08000e7f 	.word	0x08000e7f
 80008ac:	08000e7f 	.word	0x08000e7f
 80008b0:	08000e7f 	.word	0x08000e7f
 80008b4:	08000e7f 	.word	0x08000e7f
 80008b8:	08000e7f 	.word	0x08000e7f
 80008bc:	08000e7f 	.word	0x08000e7f
 80008c0:	08000e7f 	.word	0x08000e7f
 80008c4:	08000e7f 	.word	0x08000e7f
 80008c8:	08000e7f 	.word	0x08000e7f
 80008cc:	08000e7f 	.word	0x08000e7f
 80008d0:	08000e7f 	.word	0x08000e7f
 80008d4:	08000e7f 	.word	0x08000e7f
 80008d8:	08000e7f 	.word	0x08000e7f
 80008dc:	08000e7f 	.word	0x08000e7f
 80008e0:	08000e7f 	.word	0x08000e7f
 80008e4:	08000e7f 	.word	0x08000e7f
 80008e8:	08000e7f 	.word	0x08000e7f
 80008ec:	08000e7f 	.word	0x08000e7f
 80008f0:	08000e7f 	.word	0x08000e7f
 80008f4:	08000e7f 	.word	0x08000e7f
 80008f8:	08000e7f 	.word	0x08000e7f
 80008fc:	08000e7f 	.word	0x08000e7f
 8000900:	08000e7f 	.word	0x08000e7f
 8000904:	08000e7f 	.word	0x08000e7f
 8000908:	08000e7f 	.word	0x08000e7f
 800090c:	08000e7f 	.word	0x08000e7f
 8000910:	08000e7f 	.word	0x08000e7f
 8000914:	08000e7f 	.word	0x08000e7f
 8000918:	08000e7f 	.word	0x08000e7f
 800091c:	08000e7f 	.word	0x08000e7f
 8000920:	08000e7f 	.word	0x08000e7f
 8000924:	08000e7f 	.word	0x08000e7f
 8000928:	08000e7f 	.word	0x08000e7f
 800092c:	08000e7f 	.word	0x08000e7f
 8000930:	08000e7f 	.word	0x08000e7f
 8000934:	08000e7f 	.word	0x08000e7f
 8000938:	08000e7f 	.word	0x08000e7f
 800093c:	08000e7f 	.word	0x08000e7f
 8000940:	08000e7f 	.word	0x08000e7f
 8000944:	08000e7f 	.word	0x08000e7f
 8000948:	08000e7f 	.word	0x08000e7f
 800094c:	08000e7f 	.word	0x08000e7f
 8000950:	08000e7f 	.word	0x08000e7f
 8000954:	08000e7f 	.word	0x08000e7f
 8000958:	08000e7f 	.word	0x08000e7f
 800095c:	08000e7f 	.word	0x08000e7f
 8000960:	08000e7f 	.word	0x08000e7f
 8000964:	08000e7f 	.word	0x08000e7f
 8000968:	08000e7f 	.word	0x08000e7f
 800096c:	08000e7f 	.word	0x08000e7f
 8000970:	08000e7f 	.word	0x08000e7f
 8000974:	08000e7f 	.word	0x08000e7f
 8000978:	08000e7f 	.word	0x08000e7f
 800097c:	08000e7f 	.word	0x08000e7f
 8000980:	08000e7f 	.word	0x08000e7f
 8000984:	08000e7f 	.word	0x08000e7f
 8000988:	08000e7f 	.word	0x08000e7f
 800098c:	08000e7f 	.word	0x08000e7f
 8000990:	08000e7f 	.word	0x08000e7f
 8000994:	08000e7f 	.word	0x08000e7f
 8000998:	08000e7f 	.word	0x08000e7f
 800099c:	08000e7f 	.word	0x08000e7f
 80009a0:	08000e7f 	.word	0x08000e7f
 80009a4:	08000e7f 	.word	0x08000e7f
 80009a8:	08000e7f 	.word	0x08000e7f
 80009ac:	08000e7f 	.word	0x08000e7f
 80009b0:	08000e7f 	.word	0x08000e7f
 80009b4:	08000e7f 	.word	0x08000e7f
 80009b8:	08000e7f 	.word	0x08000e7f
 80009bc:	08000e7f 	.word	0x08000e7f
 80009c0:	08000e7f 	.word	0x08000e7f
 80009c4:	08000e7f 	.word	0x08000e7f
 80009c8:	08000e7f 	.word	0x08000e7f
 80009cc:	08000e7f 	.word	0x08000e7f
 80009d0:	08000e7f 	.word	0x08000e7f
 80009d4:	08000e7f 	.word	0x08000e7f
 80009d8:	08000e7f 	.word	0x08000e7f
 80009dc:	08000e7f 	.word	0x08000e7f
 80009e0:	08000e7f 	.word	0x08000e7f
 80009e4:	08000e7f 	.word	0x08000e7f
 80009e8:	08000e7f 	.word	0x08000e7f
 80009ec:	08000e7f 	.word	0x08000e7f
 80009f0:	08000e6d 	.word	0x08000e6d
 80009f4:	08000e7f 	.word	0x08000e7f
 80009f8:	08000e7f 	.word	0x08000e7f
 80009fc:	08000e7f 	.word	0x08000e7f
 8000a00:	08000e7f 	.word	0x08000e7f
 8000a04:	08000e7f 	.word	0x08000e7f
 8000a08:	08000e7f 	.word	0x08000e7f
 8000a0c:	08000e7f 	.word	0x08000e7f
 8000a10:	08000e7f 	.word	0x08000e7f
 8000a14:	08000e7f 	.word	0x08000e7f
 8000a18:	08000e7f 	.word	0x08000e7f
 8000a1c:	08000e7f 	.word	0x08000e7f
 8000a20:	08000e7f 	.word	0x08000e7f
 8000a24:	08000e7f 	.word	0x08000e7f
 8000a28:	08000e7f 	.word	0x08000e7f
 8000a2c:	08000e7f 	.word	0x08000e7f
 8000a30:	08000e5b 	.word	0x08000e5b
	case 0x10: {
		printf("SDN1 ON\n");
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a36:	f015 feaf 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fa7b 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000a46:	e225      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a4a:	f015 fea5 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 fa71 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000a5a:	e21b      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
 8000a5c:	24000c60 	.word	0x24000c60
 8000a60:	24000638 	.word	0x24000638
 8000a64:	08016f98 	.word	0x08016f98
 8000a68:	58020400 	.word	0x58020400
 8000a6c:	08016fa0 	.word	0x08016fa0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a70:	48b8      	ldr	r0, [pc, #736]	; (8000d54 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a72:	f015 fe91 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a76:	4bb8      	ldr	r3, [pc, #736]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 fa5d 	bl	8008f3c <HAL_GPIO_WritePin>

		break;
 8000a82:	e207      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a84:	48b5      	ldr	r0, [pc, #724]	; (8000d5c <HAL_UART_RxCpltCallback+0x6d4>)
 8000a86:	f015 fe87 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a8a:	4bb3      	ldr	r3, [pc, #716]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 fa53 	bl	8008f3c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a96:	4bb0      	ldr	r3, [pc, #704]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a98:	2140      	movs	r1, #64	; 0x40
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 fa4d 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000aa2:	4baf      	ldr	r3, [pc, #700]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 fa46 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000ab0:	4bab      	ldr	r3, [pc, #684]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 fa3f 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000abe:	4ba8      	ldr	r3, [pc, #672]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f008 fa38 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000acc:	4ba4      	ldr	r3, [pc, #656]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f008 fa32 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ad8:	4ba1      	ldr	r3, [pc, #644]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2200      	movs	r2, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f008 fa2c 	bl	8008f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae4:	4b9e      	ldr	r3, [pc, #632]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	2200      	movs	r2, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f008 fa25 	bl	8008f3c <HAL_GPIO_WritePin>

		break;
 8000af2:	e1cf      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000af4:	489b      	ldr	r0, [pc, #620]	; (8000d64 <HAL_UART_RxCpltCallback+0x6dc>)
 8000af6:	f015 fe4f 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000afa:	4b99      	ldr	r3, [pc, #612]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b00:	2201      	movs	r2, #1
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 fa1a 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b08:	e1c4      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b0a:	4897      	ldr	r0, [pc, #604]	; (8000d68 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b0c:	f015 fe44 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b10:	4b93      	ldr	r3, [pc, #588]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 fa0f 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1b9      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b20:	4892      	ldr	r0, [pc, #584]	; (8000d6c <HAL_UART_RxCpltCallback+0x6e4>)
 8000b22:	f015 fe39 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b26:	4b8e      	ldr	r3, [pc, #568]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 fa05 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b32:	e1af      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b34:	488e      	ldr	r0, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b36:	f015 fe2f 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b3a:	4b89      	ldr	r3, [pc, #548]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 f9fb 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b46:	e1a5      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b48:	488a      	ldr	r0, [pc, #552]	; (8000d74 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b4a:	f015 fe25 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b4e:	4b84      	ldr	r3, [pc, #528]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	2140      	movs	r1, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 f9f1 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b5a:	e19b      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b5c:	4886      	ldr	r0, [pc, #536]	; (8000d78 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b5e:	f015 fe1b 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b62:	4b7f      	ldr	r3, [pc, #508]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b64:	2140      	movs	r1, #64	; 0x40
 8000b66:	2200      	movs	r2, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f008 f9e7 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b6e:	e191      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b70:	4882      	ldr	r0, [pc, #520]	; (8000d7c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b72:	f015 fe11 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 f9dc 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b84:	e186      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b86:	487e      	ldr	r0, [pc, #504]	; (8000d80 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b88:	f015 fe06 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b8c:	4b74      	ldr	r3, [pc, #464]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b92:	2200      	movs	r2, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 f9d1 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000b9a:	e17b      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b9c:	4879      	ldr	r0, [pc, #484]	; (8000d84 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b9e:	f015 fdfb 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000ba2:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 f9c6 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000bb0:	e170      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <HAL_UART_RxCpltCallback+0x700>)
 8000bb4:	f015 fdf0 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9bb 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000bc6:	e165      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bc8:	4870      	ldr	r0, [pc, #448]	; (8000d8c <HAL_UART_RxCpltCallback+0x704>)
 8000bca:	f015 fde5 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 f9b0 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000bdc:	e15a      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bde:	486c      	ldr	r0, [pc, #432]	; (8000d90 <HAL_UART_RxCpltCallback+0x708>)
 8000be0:	f015 fdda 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000be4:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <HAL_UART_RxCpltCallback+0x6d8>)
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f9a5 	bl	8008f3c <HAL_GPIO_WritePin>

		break;
 8000bf2:	e14f      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bf4:	4867      	ldr	r0, [pc, #412]	; (8000d94 <HAL_UART_RxCpltCallback+0x70c>)
 8000bf6:	f015 fdcf 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bfa:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f99b 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000c06:	e145      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c08:	4863      	ldr	r0, [pc, #396]	; (8000d98 <HAL_UART_RxCpltCallback+0x710>)
 8000c0a:	f015 fdc5 	bl	8016798 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c0e:	4b52      	ldr	r3, [pc, #328]	; (8000d58 <HAL_UART_RxCpltCallback+0x6d0>)
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	2200      	movs	r2, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 f991 	bl	8008f3c <HAL_GPIO_WritePin>
		break;
 8000c1a:	e13b      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c1c:	485f      	ldr	r0, [pc, #380]	; (8000d9c <HAL_UART_RxCpltCallback+0x714>)
 8000c1e:	f015 fdbb 	bl	8016798 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c22:	2300      	movs	r3, #0
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2320      	movs	r3, #32
 8000c28:	4a5d      	ldr	r2, [pc, #372]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	485d      	ldr	r0, [pc, #372]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c2e:	f004 fdf5 	bl	800581c <HAL_DAC_Start_DMA>
		break;
 8000c32:	e12f      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c34:	485c      	ldr	r0, [pc, #368]	; (8000da8 <HAL_UART_RxCpltCallback+0x720>)
 8000c36:	f015 fdaf 	bl	8016798 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4859      	ldr	r0, [pc, #356]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000c3e:	f004 fead 	bl	800599c <HAL_DAC_Stop_DMA>
		break;
 8000c42:	e127      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c44:	4859      	ldr	r0, [pc, #356]	; (8000dac <HAL_UART_RxCpltCallback+0x724>)
 8000c46:	f015 fda7 	bl	8016798 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4858      	ldr	r0, [pc, #352]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fd79 	bl	800e744 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c52:	4b58      	ldr	r3, [pc, #352]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c58:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <HAL_UART_RxCpltCallback+0x730>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	801a      	strh	r2, [r3, #0]
		break;
 8000c5e:	e119      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c60:	4856      	ldr	r0, [pc, #344]	; (8000dbc <HAL_UART_RxCpltCallback+0x734>)
 8000c62:	f015 fd99 	bl	8016798 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c66:	210c      	movs	r1, #12
 8000c68:	4851      	ldr	r0, [pc, #324]	; (8000db0 <HAL_UART_RxCpltCallback+0x728>)
 8000c6a:	f00d fec5 	bl	800e9f8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_UART_RxCpltCallback+0x72c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
		break;
 8000c74:	e10e      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c76:	4852      	ldr	r0, [pc, #328]	; (8000dc0 <HAL_UART_RxCpltCallback+0x738>)
 8000c78:	f015 fd8e 	bl	8016798 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4851      	ldr	r0, [pc, #324]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fd60 	bl	800e744 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c84:	4b50      	ldr	r3, [pc, #320]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <HAL_UART_RxCpltCallback+0x744>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
		break;
 8000c90:	e100      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c92:	484f      	ldr	r0, [pc, #316]	; (8000dd0 <HAL_UART_RxCpltCallback+0x748>)
 8000c94:	f015 fd80 	bl	8016798 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484a      	ldr	r0, [pc, #296]	; (8000dc4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c9c:	f00d feac 	bl	800e9f8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_UART_RxCpltCallback+0x740>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		break;
 8000ca6:	e0f5      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000ca8:	484a      	ldr	r0, [pc, #296]	; (8000dd4 <HAL_UART_RxCpltCallback+0x74c>)
 8000caa:	f015 fd75 	bl	8016798 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4849      	ldr	r0, [pc, #292]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fd47 	bl	800e744 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000cb6:	4b49      	ldr	r3, [pc, #292]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000cbc:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
		break;
 8000cc2:	e0e7      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cc4:	4847      	ldr	r0, [pc, #284]	; (8000de4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cc6:	f015 fd67 	bl	8016798 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4842      	ldr	r0, [pc, #264]	; (8000dd8 <HAL_UART_RxCpltCallback+0x750>)
 8000cce:	f00d fe93 	bl	800e9f8 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	; (8000ddc <HAL_UART_RxCpltCallback+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
		break;
 8000cd8:	e0dc      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cda:	4843      	ldr	r0, [pc, #268]	; (8000de8 <HAL_UART_RxCpltCallback+0x760>)
 8000cdc:	f015 fd5c 	bl	8016798 <puts>
		if (step < 17) {
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	f200 80ce 	bhi.w	8000e86 <HAL_UART_RxCpltCallback+0x7fe>
			step += 2;
 8000cea:	4b40      	ldr	r3, [pc, #256]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4b3e      	ldr	r3, [pc, #248]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cf6:	4b3d      	ldr	r3, [pc, #244]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	4827      	ldr	r0, [pc, #156]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d08:	f004 feeb 	bl	8005ae2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4825      	ldr	r0, [pc, #148]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d10:	f004 fd2c 	bl	800576c <HAL_DAC_Start>
		}
		break;
 8000d14:	e0b7      	b.n	8000e86 <HAL_UART_RxCpltCallback+0x7fe>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d16:	4836      	ldr	r0, [pc, #216]	; (8000df0 <HAL_UART_RxCpltCallback+0x768>)
 8000d18:	f015 fd3e 	bl	8016798 <puts>
		if (step > 3) {
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	f240 80b2 	bls.w	8000e8a <HAL_UART_RxCpltCallback+0x802>
			step -= 2;
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d30:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <HAL_UART_RxCpltCallback+0x764>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_UART_RxCpltCallback+0x718>)
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	4818      	ldr	r0, [pc, #96]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d44:	f004 fecd 	bl	8005ae2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4816      	ldr	r0, [pc, #88]	; (8000da4 <HAL_UART_RxCpltCallback+0x71c>)
 8000d4c:	f004 fd0e 	bl	800576c <HAL_DAC_Start>
		}
		break;
 8000d50:	e09b      	b.n	8000e8a <HAL_UART_RxCpltCallback+0x802>
 8000d52:	bf00      	nop
 8000d54:	08016fac 	.word	0x08016fac
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	08016fb8 	.word	0x08016fb8
 8000d60:	58020800 	.word	0x58020800
 8000d64:	08016fc4 	.word	0x08016fc4
 8000d68:	08016fd0 	.word	0x08016fd0
 8000d6c:	08016fe0 	.word	0x08016fe0
 8000d70:	08016fec 	.word	0x08016fec
 8000d74:	08016ff8 	.word	0x08016ff8
 8000d78:	08017004 	.word	0x08017004
 8000d7c:	08017014 	.word	0x08017014
 8000d80:	08017020 	.word	0x08017020
 8000d84:	0801702c 	.word	0x0801702c
 8000d88:	08017038 	.word	0x08017038
 8000d8c:	08017044 	.word	0x08017044
 8000d90:	08017054 	.word	0x08017054
 8000d94:	08017064 	.word	0x08017064
 8000d98:	08017070 	.word	0x08017070
 8000d9c:	08017080 	.word	0x08017080
 8000da0:	24000010 	.word	0x24000010
 8000da4:	240002f4 	.word	0x240002f4
 8000da8:	08017090 	.word	0x08017090
 8000dac:	080170a0 	.word	0x080170a0
 8000db0:	24000554 	.word	0x24000554
 8000db4:	24000c57 	.word	0x24000c57
 8000db8:	24000c52 	.word	0x24000c52
 8000dbc:	080170a8 	.word	0x080170a8
 8000dc0:	080170b4 	.word	0x080170b4
 8000dc4:	24000508 	.word	0x24000508
 8000dc8:	24000c56 	.word	0x24000c56
 8000dcc:	24000c50 	.word	0x24000c50
 8000dd0:	080170bc 	.word	0x080170bc
 8000dd4:	080170c4 	.word	0x080170c4
 8000dd8:	240005a0 	.word	0x240005a0
 8000ddc:	24000c58 	.word	0x24000c58
 8000de0:	24000c54 	.word	0x24000c54
 8000de4:	080170cc 	.word	0x080170cc
 8000de8:	080170d4 	.word	0x080170d4
 8000dec:	2400000c 	.word	0x2400000c
 8000df0:	080170dc 	.word	0x080170dc
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000df4:	4829      	ldr	r0, [pc, #164]	; (8000e9c <HAL_UART_RxCpltCallback+0x814>)
 8000df6:	f015 fccf 	bl	8016798 <puts>
		if (cadence <= 50000) {
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d843      	bhi.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
			cadence *= 2;
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4a24      	ldr	r2, [pc, #144]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e038      	b.n	8000e8e <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e1c:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <HAL_UART_RxCpltCallback+0x81c>)
 8000e1e:	f015 fcbb 	bl	8016798 <puts>
		if (cadence >= 6250) {
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d931      	bls.n	8000e92 <HAL_UART_RxCpltCallback+0x80a>
			cadence /= 2;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4a1a      	ldr	r2, [pc, #104]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e36:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_UART_RxCpltCallback+0x818>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e42:	e026      	b.n	8000e92 <HAL_UART_RxCpltCallback+0x80a>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e44:	4818      	ldr	r0, [pc, #96]	; (8000ea8 <HAL_UART_RxCpltCallback+0x820>)
 8000e46:	f015 fca7 	bl	8016798 <puts>
		// TODO: Exit stop mode
		break;
 8000e4a:	e023      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e4c:	4817      	ldr	r0, [pc, #92]	; (8000eac <HAL_UART_RxCpltCallback+0x824>)
 8000e4e:	f015 fca3 	bl	8016798 <puts>
		// TODO: Enter stop mode
		STOP_TRIGGERED = 1;
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_UART_RxCpltCallback+0x828>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
		break;
 8000e58:	e01c      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e5a:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <HAL_UART_RxCpltCallback+0x82c>)
 8000e5c:	f015 fc9c 	bl	8016798 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_RxCpltCallback+0x830>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f013 fcf7 	bl	8014858 <xTaskResumeFromISR>
		break;
 8000e6a:	e013      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e6c:	4813      	ldr	r0, [pc, #76]	; (8000ebc <HAL_UART_RxCpltCallback+0x834>)
 8000e6e:	f015 fc93 	bl	8016798 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_UART_RxCpltCallback+0x838>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f013 fcee 	bl	8014858 <xTaskResumeFromISR>
		break;
 8000e7c:	e00a      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
	}
	default: {
		printf("Unknown Command\n");
 8000e7e:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <HAL_UART_RxCpltCallback+0x83c>)
 8000e80:	f015 fc8a 	bl	8016798 <puts>
		break;
 8000e84:	e006      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
		break;
 8000e86:	bf00      	nop
 8000e88:	e004      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
		break;
 8000e8a:	bf00      	nop
 8000e8c:	e002      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
		break;
 8000e8e:	bf00      	nop
 8000e90:	e000      	b.n	8000e94 <HAL_UART_RxCpltCallback+0x80c>
		break;
 8000e92:	bf00      	nop
	}
	}
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	080170e8 	.word	0x080170e8
 8000ea0:	24000008 	.word	0x24000008
 8000ea4:	080170f4 	.word	0x080170f4
 8000ea8:	08017100 	.word	0x08017100
 8000eac:	08017110 	.word	0x08017110
 8000eb0:	24000c38 	.word	0x24000c38
 8000eb4:	08017120 	.word	0x08017120
 8000eb8:	24000754 	.word	0x24000754
 8000ebc:	0801712c 	.word	0x0801712c
 8000ec0:	240009b4 	.word	0x240009b4
 8000ec4:	08017138 	.word	0x08017138

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f002 feba 	bl	8003c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f8b4 	bl	800103c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ed4:	f000 f932 	bl	800113c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fef6 	bl	8001cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f000 febc 	bl	8001c58 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ee0:	f000 fdb4 	bl	8001a4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ee4:	f000 fe50 	bl	8001b88 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ee8:	f000 fb3e 	bl	8001568 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000eec:	f000 fc34 	bl	8001758 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ef0:	f000 fd36 	bl	8001960 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef4:	f000 fc88 	bl	8001808 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ef8:	f000 fa72 	bl	80013e0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000efc:	f000 f94e 	bl	800119c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f00:	f000 fb00 	bl	8001504 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f04:	f000 fbd0 	bl	80016a8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000f08:	f000 fb70 	bl	80015ec <MX_RTC_Init>
  MX_TIM4_Init();
 8000f0c:	f000 fdee 	bl	8001aec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#ifndef DAMY
	if (!handshake()) {
 8000f10:	f001 f8ce 	bl	80020b0 <handshake>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <main+0x56>
		Error_Handler();
 8000f1a:	f001 ff51 	bl	8002dc0 <Error_Handler>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f1e:	f011 fe4d 	bl	8012bbc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2108      	movs	r1, #8
 8000f26:	2080      	movs	r0, #128	; 0x80
 8000f28:	f012 f86a 	bl	8013000 <osMessageQueueNew>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <main+0x108>)
 8000f30:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f32:	4a28      	ldr	r2, [pc, #160]	; (8000fd4 <main+0x10c>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	4828      	ldr	r0, [pc, #160]	; (8000fd8 <main+0x110>)
 8000f38:	f011 fe8a 	bl	8012c50 <osThreadNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <main+0x114>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f42:	4a27      	ldr	r2, [pc, #156]	; (8000fe0 <main+0x118>)
 8000f44:	2100      	movs	r1, #0
 8000f46:	4827      	ldr	r0, [pc, #156]	; (8000fe4 <main+0x11c>)
 8000f48:	f011 fe82 	bl	8012c50 <osThreadNew>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <main+0x120>)
 8000f50:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f52:	4a26      	ldr	r2, [pc, #152]	; (8000fec <main+0x124>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	4826      	ldr	r0, [pc, #152]	; (8000ff0 <main+0x128>)
 8000f58:	f011 fe7a 	bl	8012c50 <osThreadNew>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <main+0x12c>)
 8000f60:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f62:	4a25      	ldr	r2, [pc, #148]	; (8000ff8 <main+0x130>)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4825      	ldr	r0, [pc, #148]	; (8000ffc <main+0x134>)
 8000f68:	f011 fe72 	bl	8012c50 <osThreadNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4a24      	ldr	r2, [pc, #144]	; (8001000 <main+0x138>)
 8000f70:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f72:	4a24      	ldr	r2, [pc, #144]	; (8001004 <main+0x13c>)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <main+0x140>)
 8000f78:	f011 fe6a 	bl	8012c50 <osThreadNew>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <main+0x144>)
 8000f80:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f82:	4a23      	ldr	r2, [pc, #140]	; (8001010 <main+0x148>)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4823      	ldr	r0, [pc, #140]	; (8001014 <main+0x14c>)
 8000f88:	f011 fe62 	bl	8012c50 <osThreadNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <main+0x150>)
 8000f90:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <main+0x154>)
 8000f94:	2100      	movs	r1, #0
 8000f96:	4822      	ldr	r0, [pc, #136]	; (8001020 <main+0x158>)
 8000f98:	f011 fe5a 	bl	8012c50 <osThreadNew>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4a21      	ldr	r2, [pc, #132]	; (8001024 <main+0x15c>)
 8000fa0:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <main+0x160>)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4821      	ldr	r0, [pc, #132]	; (800102c <main+0x164>)
 8000fa8:	f011 fe52 	bl	8012c50 <osThreadNew>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <main+0x168>)
 8000fb0:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f011 ff3a 	bl	8012e2c <osEventFlagsNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <main+0x16c>)
 8000fbc:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fbe:	f001 f905 	bl	80021cc <system_setup>
	printf("Starting kernal...\n");
 8000fc2:	481d      	ldr	r0, [pc, #116]	; (8001038 <main+0x170>)
 8000fc4:	f015 fbe8 	bl	8016798 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fc8:	f011 fe1c 	bl	8012c04 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fcc:	e7fe      	b.n	8000fcc <main+0x104>
 8000fce:	bf00      	nop
 8000fd0:	24000c40 	.word	0x24000c40
 8000fd4:	08017194 	.word	0x08017194
 8000fd8:	08002989 	.word	0x08002989
 8000fdc:	24000744 	.word	0x24000744
 8000fe0:	080171b8 	.word	0x080171b8
 8000fe4:	080029cd 	.word	0x080029cd
 8000fe8:	24000748 	.word	0x24000748
 8000fec:	080171dc 	.word	0x080171dc
 8000ff0:	08002a11 	.word	0x08002a11
 8000ff4:	2400074c 	.word	0x2400074c
 8000ff8:	08017200 	.word	0x08017200
 8000ffc:	08002a55 	.word	0x08002a55
 8001000:	24000750 	.word	0x24000750
 8001004:	08017224 	.word	0x08017224
 8001008:	08002aa9 	.word	0x08002aa9
 800100c:	24000754 	.word	0x24000754
 8001010:	08017248 	.word	0x08017248
 8001014:	08002b51 	.word	0x08002b51
 8001018:	240009b4 	.word	0x240009b4
 800101c:	0801726c 	.word	0x0801726c
 8001020:	08002bf9 	.word	0x08002bf9
 8001024:	24000c14 	.word	0x24000c14
 8001028:	08017290 	.word	0x08017290
 800102c:	08002cb1 	.word	0x08002cb1
 8001030:	24000c18 	.word	0x24000c18
 8001034:	24000c5c 	.word	0x24000c5c
 8001038:	08017148 	.word	0x08017148

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b09c      	sub	sp, #112	; 0x70
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001046:	224c      	movs	r2, #76	; 0x4c
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f015 fa4e 	bl	80164ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2220      	movs	r2, #32
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f015 fa48 	bl	80164ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800105c:	2002      	movs	r0, #2
 800105e:	f008 fdcf 	bl	8009c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b33      	ldr	r3, [pc, #204]	; (8001134 <SystemClock_Config+0xf8>)
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	4a32      	ldr	r2, [pc, #200]	; (8001134 <SystemClock_Config+0xf8>)
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001072:	4b30      	ldr	r3, [pc, #192]	; (8001134 <SystemClock_Config+0xf8>)
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <SystemClock_Config+0xfc>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001084:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <SystemClock_Config+0xfc>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <SystemClock_Config+0xfc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001098:	bf00      	nop
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <SystemClock_Config+0xfc>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a6:	d1f8      	bne.n	800109a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010a8:	2303      	movs	r3, #3
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80010b2:	2309      	movs	r3, #9
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010be:	2302      	movs	r3, #2
 80010c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80010c6:	2320      	movs	r3, #32
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010ca:	2304      	movs	r3, #4
 80010cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010d6:	2308      	movs	r3, #8
 80010d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010da:	2300      	movs	r3, #0
 80010dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fdc4 	bl	8009c74 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80010f2:	f001 fe65 	bl	8002dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	233f      	movs	r3, #63	; 0x3f
 80010f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2303      	movs	r3, #3
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f009 fa04 	bl	800a528 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001126:	f001 fe4b 	bl	8002dc0 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3770      	adds	r7, #112	; 0x70
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	58000400 	.word	0x58000400
 8001138:	58024800 	.word	0x58024800

0800113c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0b0      	sub	sp, #192	; 0xc0
 8001140:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	22c0      	movs	r2, #192	; 0xc0
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f015 f9cf 	bl	80164ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800115e:	2320      	movs	r3, #32
 8001160:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001162:	2308      	movs	r3, #8
 8001164:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001166:	2304      	movs	r3, #4
 8001168:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fd9e 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800118e:	f001 fe17 	bl	8002dc0 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	37c0      	adds	r7, #192	; 0xc0
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c0:	4b7a      	ldr	r3, [pc, #488]	; (80013ac <MX_ADC1_Init+0x210>)
 80011c2:	4a7b      	ldr	r2, [pc, #492]	; (80013b0 <MX_ADC1_Init+0x214>)
 80011c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011c6:	4b79      	ldr	r3, [pc, #484]	; (80013ac <MX_ADC1_Init+0x210>)
 80011c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ce:	4b77      	ldr	r3, [pc, #476]	; (80013ac <MX_ADC1_Init+0x210>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d4:	4b75      	ldr	r3, [pc, #468]	; (80013ac <MX_ADC1_Init+0x210>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011da:	4b74      	ldr	r3, [pc, #464]	; (80013ac <MX_ADC1_Init+0x210>)
 80011dc:	2204      	movs	r2, #4
 80011de:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <MX_ADC1_Init+0x210>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e6:	4b71      	ldr	r3, [pc, #452]	; (80013ac <MX_ADC1_Init+0x210>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011ec:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <MX_ADC1_Init+0x210>)
 80011ee:	220b      	movs	r2, #11
 80011f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <MX_ADC1_Init+0x210>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b6c      	ldr	r3, [pc, #432]	; (80013ac <MX_ADC1_Init+0x210>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b6b      	ldr	r3, [pc, #428]	; (80013ac <MX_ADC1_Init+0x210>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001204:	4b69      	ldr	r3, [pc, #420]	; (80013ac <MX_ADC1_Init+0x210>)
 8001206:	2203      	movs	r2, #3
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800120a:	4b68      	ldr	r3, [pc, #416]	; (80013ac <MX_ADC1_Init+0x210>)
 800120c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <MX_ADC1_Init+0x210>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <MX_ADC1_Init+0x210>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001220:	4862      	ldr	r0, [pc, #392]	; (80013ac <MX_ADC1_Init+0x210>)
 8001222:	f002 ff9b 	bl	800415c <HAL_ADC_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800122c:	f001 fdc8 	bl	8002dc0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	485c      	ldr	r0, [pc, #368]	; (80013ac <MX_ADC1_Init+0x210>)
 800123c:	f004 f8b6 	bl	80053ac <HAL_ADCEx_MultiModeConfigChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001246:	f001 fdbb 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800124a:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <MX_ADC1_Init+0x218>)
 800124c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124e:	2306      	movs	r3, #6
 8001250:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001252:	2307      	movs	r3, #7
 8001254:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001256:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800125a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125c:	2304      	movs	r3, #4
 800125e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	484f      	ldr	r0, [pc, #316]	; (80013ac <MX_ADC1_Init+0x210>)
 800126e:	f003 f9f9 	bl	8004664 <HAL_ADC_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001278:	f001 fda2 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800127c:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <MX_ADC1_Init+0x21c>)
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001280:	230c      	movs	r3, #12
 8001282:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	4848      	ldr	r0, [pc, #288]	; (80013ac <MX_ADC1_Init+0x210>)
 800128a:	f003 f9eb 	bl	8004664 <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001294:	f001 fd94 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001298:	4b48      	ldr	r3, [pc, #288]	; (80013bc <MX_ADC1_Init+0x220>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800129c:	2312      	movs	r3, #18
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4841      	ldr	r0, [pc, #260]	; (80013ac <MX_ADC1_Init+0x210>)
 80012a6:	f003 f9dd 	bl	8004664 <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012b0:	f001 fd86 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <MX_ADC1_Init+0x224>)
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012b8:	2318      	movs	r3, #24
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	483a      	ldr	r0, [pc, #232]	; (80013ac <MX_ADC1_Init+0x210>)
 80012c2:	f003 f9cf 	bl	8004664 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012cc:	f001 fd78 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_ADC1_Init+0x228>)
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4833      	ldr	r0, [pc, #204]	; (80013ac <MX_ADC1_Init+0x210>)
 80012e0:	f003 f9c0 	bl	8004664 <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012ea:	f001 fd69 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012ee:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <MX_ADC1_Init+0x22c>)
 80012f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012f2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <MX_ADC1_Init+0x210>)
 80012fe:	f003 f9b1 	bl	8004664 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001308:	f001 fd5a 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_ADC1_Init+0x230>)
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001310:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4824      	ldr	r0, [pc, #144]	; (80013ac <MX_ADC1_Init+0x210>)
 800131c:	f003 f9a2 	bl	8004664 <HAL_ADC_ConfigChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001326:	f001 fd4b 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_ADC1_Init+0x234>)
 800132c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800132e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	481c      	ldr	r0, [pc, #112]	; (80013ac <MX_ADC1_Init+0x210>)
 800133a:	f003 f993 	bl	8004664 <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001344:	f001 fd3c 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_ADC1_Init+0x238>)
 800134a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800134c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <MX_ADC1_Init+0x210>)
 8001358:	f003 f984 	bl	8004664 <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001362:	f001 fd2d 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <MX_ADC1_Init+0x23c>)
 8001368:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800136a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_ADC1_Init+0x210>)
 8001376:	f003 f975 	bl	8004664 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001380:	f001 fd1e 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_ADC1_Init+0x240>)
 8001386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001388:	f240 2306 	movw	r3, #518	; 0x206
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_ADC1_Init+0x210>)
 8001394:	f003 f966 	bl	8004664 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800139e:	f001 fd0f 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2400013c 	.word	0x2400013c
 80013b0:	40022000 	.word	0x40022000
 80013b4:	0c900008 	.word	0x0c900008
 80013b8:	10c00010 	.word	0x10c00010
 80013bc:	14f00020 	.word	0x14f00020
 80013c0:	1d500080 	.word	0x1d500080
 80013c4:	21800100 	.word	0x21800100
 80013c8:	25b00200 	.word	0x25b00200
 80013cc:	2a000400 	.word	0x2a000400
 80013d0:	2e300800 	.word	0x2e300800
 80013d4:	3ac04000 	.word	0x3ac04000
 80013d8:	3ef08000 	.word	0x3ef08000
 80013dc:	47520000 	.word	0x47520000

080013e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MX_ADC3_Init+0x110>)
 80013fa:	4a3e      	ldr	r2, [pc, #248]	; (80014f4 <MX_ADC3_Init+0x114>)
 80013fc:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001400:	2208      	movs	r2, #8
 8001402:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001406:	2201      	movs	r2, #1
 8001408:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <MX_ADC3_Init+0x110>)
 800140c:	2204      	movs	r2, #4
 800140e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001412:	2200      	movs	r2, #0
 8001414:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001418:	2201      	movs	r2, #1
 800141a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_ADC3_Init+0x110>)
 800141e:	2204      	movs	r2, #4
 8001420:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001424:	2200      	movs	r2, #0
 8001426:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <MX_ADC3_Init+0x110>)
 800142a:	2200      	movs	r2, #0
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001436:	2203      	movs	r2, #3
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_ADC3_Init+0x110>)
 800143c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001442:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001444:	2200      	movs	r2, #0
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001448:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <MX_ADC3_Init+0x110>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001450:	4827      	ldr	r0, [pc, #156]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001452:	f002 fe83 	bl	800415c <HAL_ADC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800145c:	f001 fcb0 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001460:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <MX_ADC3_Init+0x118>)
 8001462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001464:	2306      	movs	r3, #6
 8001466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001468:	2307      	movs	r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800146c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001470:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001472:	2304      	movs	r3, #4
 8001474:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <MX_ADC3_Init+0x110>)
 8001484:	f003 f8ee 	bl	8004664 <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800148e:	f001 fc97 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_ADC3_Init+0x11c>)
 8001494:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001496:	230c      	movs	r3, #12
 8001498:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_ADC3_Init+0x110>)
 80014a0:	f003 f8e0 	bl	8004664 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014aa:	f001 fc89 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ae:	2301      	movs	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014b2:	2312      	movs	r3, #18
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	480d      	ldr	r0, [pc, #52]	; (80014f0 <MX_ADC3_Init+0x110>)
 80014bc:	f003 f8d2 	bl	8004664 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014c6:	f001 fc7b 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_ADC3_Init+0x120>)
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014ce:	2318      	movs	r3, #24
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4806      	ldr	r0, [pc, #24]	; (80014f0 <MX_ADC3_Init+0x110>)
 80014d8:	f003 f8c4 	bl	8004664 <HAL_ADC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014e2:	f001 fc6d 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	240001a0 	.word	0x240001a0
 80014f4:	58026000 	.word	0x58026000
 80014f8:	cb840000 	.word	0xcb840000
 80014fc:	cfb80000 	.word	0xcfb80000
 8001500:	04300002 	.word	0x04300002

08001504 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2224      	movs	r2, #36	; 0x24
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f014 ffeb 	bl	80164ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_DAC1_Init+0x5c>)
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_DAC1_Init+0x60>)
 800151a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <MX_DAC1_Init+0x5c>)
 800151e:	f004 f903 	bl	8005728 <HAL_DAC_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001528:	f001 fc4a 	bl	8002dc0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001530:	230a      	movs	r3, #10
 8001532:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_DAC1_Init+0x5c>)
 8001548:	f004 fb1e 	bl	8005b88 <HAL_DAC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001552:	f001 fc35 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3728      	adds	r7, #40	; 0x28
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240002f4 	.word	0x240002f4
 8001564:	40007400 	.word	0x40007400

08001568 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <MX_I2C1_Init+0x78>)
 800156e:	4a1d      	ldr	r2, [pc, #116]	; (80015e4 <MX_I2C1_Init+0x7c>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x80>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <MX_I2C1_Init+0x78>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001580:	2201      	movs	r2, #1
 8001582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_I2C1_Init+0x78>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_I2C1_Init+0x78>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_I2C1_Init+0x78>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015a2:	480f      	ldr	r0, [pc, #60]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015a4:	f007 fce4 	bl	8008f70 <HAL_I2C_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ae:	f001 fc07 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015b2:	2100      	movs	r1, #0
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015b6:	f008 fa2b 	bl	8009a10 <HAL_I2CEx_ConfigAnalogFilter>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c0:	f001 fbfe 	bl	8002dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015c4:	2100      	movs	r1, #0
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_I2C1_Init+0x78>)
 80015c8:	f008 fa6d 	bl	8009aa6 <HAL_I2CEx_ConfigDigitalFilter>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f001 fbf5 	bl	8002dc0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f008 fab2 	bl	8009b40 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	24000380 	.word	0x24000380
 80015e4:	40005400 	.word	0x40005400
 80015e8:	0020081f 	.word	0x0020081f

080015ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001600:	2300      	movs	r3, #0
 8001602:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <MX_RTC_Init+0xb8>)
 8001608:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_RTC_Init+0xb4>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001612:	2263      	movs	r2, #99	; 0x63
 8001614:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001618:	f242 720f 	movw	r2, #9999	; 0x270f
 800161c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_RTC_Init+0xb4>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001636:	481a      	ldr	r0, [pc, #104]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001638:	f00c f842 	bl	800d6c0 <HAL_RTC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001642:	f001 fbbd 	bl	8002dc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001646:	2300      	movs	r3, #0
 8001648:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800164a:	2300      	movs	r3, #0
 800164c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2201      	movs	r2, #1
 800165e:	4619      	mov	r1, r3
 8001660:	480f      	ldr	r0, [pc, #60]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001662:	f00c f8af 	bl	800d7c4 <HAL_RTC_SetTime>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800166c:	f001 fba8 	bl	8002dc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001670:	2301      	movs	r3, #1
 8001672:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001674:	2301      	movs	r3, #1
 8001676:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001678:	2301      	movs	r3, #1
 800167a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800167c:	2300      	movs	r3, #0
 800167e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	2201      	movs	r2, #1
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_RTC_Init+0xb4>)
 8001688:	f00c f996 	bl	800d9b8 <HAL_RTC_SetDate>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001692:	f001 fb95 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	240003d4 	.word	0x240003d4
 80016a4:	58004000 	.word	0x58004000

080016a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016ae:	4a29      	ldr	r2, [pc, #164]	; (8001754 <MX_SPI1_Init+0xac>)
 80016b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016c4:	220f      	movs	r2, #15
 80016c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016de:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016fc:	4b14      	ldr	r3, [pc, #80]	; (8001750 <MX_SPI1_Init+0xa8>)
 80016fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001702:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_SPI1_Init+0xa8>)
 800171e:	2200      	movs	r2, #0
 8001720:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001724:	2200      	movs	r2, #0
 8001726:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_SPI1_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_SPI1_Init+0xa8>)
 8001736:	2200      	movs	r2, #0
 8001738:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_SPI1_Init+0xa8>)
 800173c:	f00c fae2 	bl	800dd04 <HAL_SPI_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001746:	f001 fb3b 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	240003f8 	.word	0x240003f8
 8001754:	40013000 	.word	0x40013000

08001758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <MX_SPI2_Init+0xa8>)
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <MX_SPI2_Init+0xac>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <MX_SPI2_Init+0xa8>)
 8001764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <MX_SPI2_Init+0xa8>)
 800176c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001770:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001772:	4b23      	ldr	r3, [pc, #140]	; (8001800 <MX_SPI2_Init+0xa8>)
 8001774:	220f      	movs	r2, #15
 8001776:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_SPI2_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <MX_SPI2_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <MX_SPI2_Init+0xa8>)
 8001786:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800178a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_SPI2_Init+0xa8>)
 800178e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001792:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017da:	2200      	movs	r2, #0
 80017dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_SPI2_Init+0xa8>)
 80017ec:	f00c fa8a 	bl	800dd04 <HAL_SPI_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017f6:	f001 fae3 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000480 	.word	0x24000480
 8001804:	40003800 	.word	0x40003800

08001808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b09a      	sub	sp, #104	; 0x68
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
 8001838:	615a      	str	r2, [r3, #20]
 800183a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	222c      	movs	r2, #44	; 0x2c
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f014 fe52 	bl	80164ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <MX_TIM1_Init+0x150>)
 800184a:	4a44      	ldr	r2, [pc, #272]	; (800195c <MX_TIM1_Init+0x154>)
 800184c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <MX_TIM1_Init+0x150>)
 8001850:	2231      	movs	r2, #49	; 0x31
 8001852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b40      	ldr	r3, [pc, #256]	; (8001958 <MX_TIM1_Init+0x150>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <MX_TIM1_Init+0x150>)
 800185c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b3d      	ldr	r3, [pc, #244]	; (8001958 <MX_TIM1_Init+0x150>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001868:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <MX_TIM1_Init+0x150>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186e:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <MX_TIM1_Init+0x150>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001874:	4838      	ldr	r0, [pc, #224]	; (8001958 <MX_TIM1_Init+0x150>)
 8001876:	f00c fe96 	bl	800e5a6 <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001880:	f001 fa9e 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800188e:	4619      	mov	r1, r3
 8001890:	4831      	ldr	r0, [pc, #196]	; (8001958 <MX_TIM1_Init+0x150>)
 8001892:	f00d fc11 	bl	800f0b8 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800189c:	f001 fa90 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018a0:	482d      	ldr	r0, [pc, #180]	; (8001958 <MX_TIM1_Init+0x150>)
 80018a2:	f00d f98d 	bl	800ebc0 <HAL_TIM_PWM_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018ac:	f001 fa88 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b0:	2300      	movs	r3, #0
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4825      	ldr	r0, [pc, #148]	; (8001958 <MX_TIM1_Init+0x150>)
 80018c4:	f00e f94e 	bl	800fb64 <HAL_TIMEx_MasterConfigSynchronization>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018ce:	f001 fa77 	bl	8002dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2360      	movs	r3, #96	; 0x60
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018da:	2300      	movs	r3, #0
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018de:	2300      	movs	r3, #0
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f2:	2200      	movs	r2, #0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4818      	ldr	r0, [pc, #96]	; (8001958 <MX_TIM1_Init+0x150>)
 80018f8:	f00d faca 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001902:	f001 fa5d 	bl	8002dc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800191a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x150>)
 800193c:	f00e f9a0 	bl	800fc80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001946:	f001 fa3b 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800194a:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x150>)
 800194c:	f001 fde8 	bl	8003520 <HAL_TIM_MspPostInit>

}
 8001950:	bf00      	nop
 8001952:	3768      	adds	r7, #104	; 0x68
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	24000508 	.word	0x24000508
 800195c:	40010000 	.word	0x40010000

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	; 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	615a      	str	r2, [r3, #20]
 8001990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001994:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001998:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <MX_TIM2_Init+0xe8>)
 800199c:	2231      	movs	r2, #49	; 0x31
 800199e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019a8:	f640 4234 	movw	r2, #3124	; 0xc34
 80019ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019bc:	f00c fdf3 	bl	800e5a6 <HAL_TIM_Base_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019c6:	f001 f9fb 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d4:	4619      	mov	r1, r3
 80019d6:	481c      	ldr	r0, [pc, #112]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019d8:	f00d fb6e 	bl	800f0b8 <HAL_TIM_ConfigClockSource>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019e2:	f001 f9ed 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e6:	4818      	ldr	r0, [pc, #96]	; (8001a48 <MX_TIM2_Init+0xe8>)
 80019e8:	f00d f8ea 	bl	800ebc0 <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019f2:	f001 f9e5 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019f6:	2320      	movs	r3, #32
 80019f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4810      	ldr	r0, [pc, #64]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a06:	f00e f8ad 	bl	800fb64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a10:	f001 f9d6 	bl	8002dc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	; 0x60
 8001a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	220c      	movs	r2, #12
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a2c:	f00d fa30 	bl	800ee90 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a36:	f001 f9c3 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM2_Init+0xe8>)
 8001a3c:	f001 fd70 	bl	8003520 <HAL_TIM_MspPostInit>

}
 8001a40:	bf00      	nop
 8001a42:	3738      	adds	r7, #56	; 0x38
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	24000554 	.word	0x24000554

08001a4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ae8 <MX_TIM3_Init+0x9c>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a72:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a80:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a92:	4814      	ldr	r0, [pc, #80]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001a94:	f00c fd87 	bl	800e5a6 <HAL_TIM_Base_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a9e:	f001 f98f 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001ab0:	f00d fb02 	bl	800f0b8 <HAL_TIM_ConfigClockSource>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001aba:	f001 f981 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <MX_TIM3_Init+0x98>)
 8001acc:	f00e f84a 	bl	800fb64 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ad6:	f001 f973 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	240005a0 	.word	0x240005a0
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <MX_TIM4_Init+0x98>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b12:	2263      	movs	r2, #99	; 0x63
 8001b14:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b1e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b22:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b32:	f00c fd38 	bl	800e5a6 <HAL_TIM_Base_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b3c:	f001 f940 	bl	8002dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b4e:	f00d fab3 	bl	800f0b8 <HAL_TIM_ConfigClockSource>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b58:	f001 f932 	bl	8002dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM4_Init+0x94>)
 8001b6a:	f00d fffb 	bl	800fb64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b74:	f001 f924 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	240005ec 	.word	0x240005ec
 8001b84:	40000800 	.word	0x40000800

08001b88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001b8e:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <MX_USART1_UART_Init+0xcc>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001b94:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd0:	481f      	ldr	r0, [pc, #124]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bd2:	f00e f8f1 	bl	800fdb8 <HAL_UART_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f001 f8f0 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be0:	2100      	movs	r1, #0
 8001be2:	481b      	ldr	r0, [pc, #108]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001be4:	f010 fedb 	bl	801299e <HAL_UARTEx_SetTxFifoThreshold>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bee:	f001 f8e7 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4816      	ldr	r0, [pc, #88]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001bf6:	f010 ff10 	bl	8012a1a <HAL_UARTEx_SetRxFifoThreshold>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c00:	f001 f8de 	bl	8002dc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c06:	f010 fe91 	bl	801292c <HAL_UARTEx_DisableFifoMode>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c10:	f001 f8d6 	bl	8002dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c1a:	f010 fefe 	bl	8012a1a <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c20:	f010 fe49 	bl	80128b6 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c26:	f010 fe13 	bl	8012850 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c38:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <MX_USART1_UART_Init+0xc8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c48:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000638 	.word	0x24000638
 8001c54:	40011000 	.word	0x40011000

08001c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_DMA_Init+0x6c>)
 8001c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c64:	4a17      	ldr	r2, [pc, #92]	; (8001cc4 <MX_DMA_Init+0x6c>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_DMA_Init+0x6c>)
 8001c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2105      	movs	r1, #5
 8001c80:	200b      	movs	r0, #11
 8001c82:	f003 fd29 	bl	80056d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c86:	200b      	movs	r0, #11
 8001c88:	f003 fd40 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2105      	movs	r1, #5
 8001c90:	200c      	movs	r0, #12
 8001c92:	f003 fd21 	bl	80056d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c96:	200c      	movs	r0, #12
 8001c98:	f003 fd38 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	200d      	movs	r0, #13
 8001ca2:	f003 fd19 	bl	80056d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ca6:	200d      	movs	r0, #13
 8001ca8:	f003 fd30 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2105      	movs	r1, #5
 8001cb0:	2010      	movs	r0, #16
 8001cb2:	f003 fd11 	bl	80056d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f003 fd28 	bl	800570c <HAL_NVIC_EnableIRQ>

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	58024400 	.word	0x58024400

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce4:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cee:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3e:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <MX_GPIO_Init+0xe8>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001d5c:	4815      	ldr	r0, [pc, #84]	; (8001db4 <MX_GPIO_Init+0xec>)
 8001d5e:	f007 f8ed 	bl	8008f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2164      	movs	r1, #100	; 0x64
 8001d66:	4814      	ldr	r0, [pc, #80]	; (8001db8 <MX_GPIO_Init+0xf0>)
 8001d68:	f007 f8e8 	bl	8008f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d6c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d70:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	480b      	ldr	r0, [pc, #44]	; (8001db4 <MX_GPIO_Init+0xec>)
 8001d86:	f006 ff11 	bl	8008bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d8a:	2364      	movs	r3, #100	; 0x64
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_GPIO_Init+0xf0>)
 8001da2:	f006 ff03 	bl	8008bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da6:	bf00      	nop
 8001da8:	3728      	adds	r7, #40	; 0x28
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58020800 	.word	0x58020800
 8001db8:	58020400 	.word	0x58020400

08001dbc <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	b299      	uxth	r1, r3
 8001dce:	f107 0208 	add.w	r2, r7, #8
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	4817      	ldr	r0, [pc, #92]	; (8001e38 <poll_i2c_sensor+0x7c>)
 8001ddc:	f007 f964 	bl	80090a8 <HAL_I2C_Master_Transmit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001dea:	4814      	ldr	r0, [pc, #80]	; (8001e3c <poll_i2c_sensor+0x80>)
 8001dec:	f014 fcd4 	bl	8016798 <puts>
 8001df0:	e01c      	b.n	8001e2c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	b299      	uxth	r1, r3
 8001df6:	f107 0208 	add.w	r2, r7, #8
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2302      	movs	r3, #2
 8001e02:	480d      	ldr	r0, [pc, #52]	; (8001e38 <poll_i2c_sensor+0x7c>)
 8001e04:	f007 fa68 	bl	80092d8 <HAL_I2C_Master_Receive>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e12:	480b      	ldr	r0, [pc, #44]	; (8001e40 <poll_i2c_sensor+0x84>)
 8001e14:	f014 fcc0 	bl	8016798 <puts>
 8001e18:	e008      	b.n	8001e2c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e1a:	7a3b      	ldrb	r3, [r7, #8]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e24:	7a7a      	ldrb	r2, [r7, #9]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	10db      	asrs	r3, r3, #3
 8001e2a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	24000380 	.word	0x24000380
 8001e3c:	0801715c 	.word	0x0801715c
 8001e40:	0801716c 	.word	0x0801716c

08001e44 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001e4c:	f107 010c 	add.w	r1, r7, #12
 8001e50:	2301      	movs	r3, #1
 8001e52:	2201      	movs	r2, #1
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <receive_pmt_spi+0x44>)
 8001e56:	f00c f879 	bl	800df4c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e5e:	7b7b      	ldrb	r3, [r7, #13]
 8001e60:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <receive_pmt_spi+0x44>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <receive_pmt_spi+0x44>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e70:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7bba      	ldrb	r2, [r7, #14]
 8001e76:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	240003f8 	.word	0x240003f8

08001e8c <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e94:	f107 010c 	add.w	r1, r7, #12
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <receive_erpa_spi+0x44>)
 8001e9e:	f00c f855 	bl	800df4c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001ea6:	7b7b      	ldrb	r3, [r7, #13]
 8001ea8:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <receive_erpa_spi+0x44>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <receive_erpa_spi+0x44>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eb8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7bba      	ldrb	r2, [r7, #14]
 8001ebe:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	701a      	strb	r2, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	24000480 	.word	0x24000480

08001ed4 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <receive_erpa_adc+0x30>)
 8001ede:	885b      	ldrh	r3, [r3, #2]
 8001ee0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <receive_erpa_adc+0x30>)
 8001ee4:	895b      	ldrh	r3, [r3, #10]
 8001ee6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	89fa      	ldrh	r2, [r7, #14]
 8001eec:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	89ba      	ldrh	r2, [r7, #12]
 8001ef4:	801a      	strh	r2, [r3, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	24000ca0 	.word	0x24000ca0

08001f08 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f10:	2390      	movs	r3, #144	; 0x90
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff52 	bl	8001dbc <poll_i2c_sensor>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f1c:	2394      	movs	r3, #148	; 0x94
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff4c 	bl	8001dbc <poll_i2c_sensor>
 8001f24:	4603      	mov	r3, r0
 8001f26:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f28:	2392      	movs	r3, #146	; 0x92
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff46 	bl	8001dbc <poll_i2c_sensor>
 8001f30:	4603      	mov	r3, r0
 8001f32:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f34:	2396      	movs	r3, #150	; 0x96
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff40 	bl	8001dbc <poll_i2c_sensor>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	89fa      	ldrh	r2, [r7, #14]
 8001f44:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3302      	adds	r3, #2
 8001f4a:	89ba      	ldrh	r2, [r7, #12]
 8001f4c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	897a      	ldrh	r2, [r7, #10]
 8001f54:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3306      	adds	r3, #6
 8001f5a:	893a      	ldrh	r2, [r7, #8]
 8001f5c:	801a      	strh	r2, [r3, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001f70:	4b21      	ldr	r3, [pc, #132]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f72:	8a9b      	ldrh	r3, [r3, #20]
 8001f74:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f78:	8a1b      	ldrh	r3, [r3, #16]
 8001f7a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001f7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f7e:	899b      	ldrh	r3, [r3, #12]
 8001f80:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f84:	8a5b      	ldrh	r3, [r3, #18]
 8001f86:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f8a:	889b      	ldrh	r3, [r3, #4]
 8001f8c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f90:	88db      	ldrh	r3, [r3, #6]
 8001f92:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f96:	89db      	ldrh	r3, [r3, #14]
 8001f98:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001f9a:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001f9c:	891b      	ldrh	r3, [r3, #8]
 8001f9e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001fa0:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <receive_hk_adc1+0x90>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8bfa      	ldrh	r2, [r7, #30]
 8001faa:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	8bba      	ldrh	r2, [r7, #28]
 8001fb2:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	8b7a      	ldrh	r2, [r7, #26]
 8001fba:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3306      	adds	r3, #6
 8001fc0:	8b3a      	ldrh	r2, [r7, #24]
 8001fc2:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3308      	adds	r3, #8
 8001fc8:	8afa      	ldrh	r2, [r7, #22]
 8001fca:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	330a      	adds	r3, #10
 8001fd0:	8aba      	ldrh	r2, [r7, #20]
 8001fd2:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	8a7a      	ldrh	r2, [r7, #18]
 8001fda:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	330e      	adds	r3, #14
 8001fe0:	8a3a      	ldrh	r2, [r7, #16]
 8001fe2:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3310      	adds	r3, #16
 8001fe8:	89fa      	ldrh	r2, [r7, #14]
 8001fea:	801a      	strh	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	3724      	adds	r7, #36	; 0x24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	24000ca0 	.word	0x24000ca0

08001ffc <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <receive_hk_adc3+0x4c>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <receive_hk_adc3+0x4c>)
 800200c:	885b      	ldrh	r3, [r3, #2]
 800200e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <receive_hk_adc3+0x4c>)
 8002012:	889b      	ldrh	r3, [r3, #4]
 8002014:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <receive_hk_adc3+0x4c>)
 8002018:	88db      	ldrh	r3, [r3, #6]
 800201a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	89fa      	ldrh	r2, [r7, #14]
 8002020:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3302      	adds	r3, #2
 8002026:	89ba      	ldrh	r2, [r7, #12]
 8002028:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	897a      	ldrh	r2, [r7, #10]
 8002030:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3306      	adds	r3, #6
 8002036:	893a      	ldrh	r2, [r7, #8]
 8002038:	801a      	strh	r2, [r3, #0]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	24000cc0 	.word	0x24000cc0

0800204c <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_UART_TxCpltCallback+0x1c>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	24000000 	.word	0x24000000

0800206c <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	4618      	mov	r0, r3
 800207e:	f014 fa17 	bl	80164b0 <malloc>
 8002082:	4603      	mov	r3, r0
 8002084:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f014 fa1f 	bl	80164d0 <memcpy>
	packet.size = size;
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	82bb      	strh	r3, [r7, #20]
	return packet;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	461a      	mov	r2, r3
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b090      	sub	sp, #64	; 0x40
 80020b4:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 80020b6:	230a      	movs	r3, #10
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 80020ba:	f107 011c 	add.w	r1, r7, #28
 80020be:	2364      	movs	r3, #100	; 0x64
 80020c0:	2209      	movs	r2, #9
 80020c2:	4840      	ldr	r0, [pc, #256]	; (80021c4 <handshake+0x114>)
 80020c4:	f00d ff56 	bl	800ff74 <HAL_UART_Receive>
		key = rx_buffer[0];
 80020c8:	7f3b      	ldrb	r3, [r7, #28]
 80020ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 80020ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80020d2:	2bff      	cmp	r3, #255	; 0xff
 80020d4:	d1f1      	bne.n	80020ba <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 80020d6:	7f7b      	ldrb	r3, [r7, #29]
 80020d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 80020dc:	7fbb      	ldrb	r3, [r7, #30]
 80020de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 80020e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 80020f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80020f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 80020f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8002100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8002114:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002118:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 800211a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800211e:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8002120:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002124:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8002126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800212a:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 800212c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002130:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8002132:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002136:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 8002138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800213a:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 800213c:	f107 0318 	add.w	r3, r7, #24
 8002140:	2200      	movs	r2, #0
 8002142:	4619      	mov	r1, r3
 8002144:	4820      	ldr	r0, [pc, #128]	; (80021c8 <handshake+0x118>)
 8002146:	f00b fc37 	bl	800d9b8 <HAL_RTC_SetDate>
 800214a:	4603      	mov	r3, r0
 800214c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002150:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <handshake+0xac>
		Error_Handler();
 8002158:	f000 fe32 	bl	8002dc0 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	4619      	mov	r1, r3
 8002162:	4819      	ldr	r0, [pc, #100]	; (80021c8 <handshake+0x118>)
 8002164:	f00b fb2e 	bl	800d7c4 <HAL_RTC_SetTime>
 8002168:	4603      	mov	r3, r0
 800216a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 800216e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <handshake+0xca>
		Error_Handler();
 8002176:	f000 fe23 	bl	8002dc0 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 800217a:	23fa      	movs	r3, #250	; 0xfa
 800217c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002180:	2302      	movs	r3, #2
 8002182:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 8002198:	2300      	movs	r3, #0
 800219a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219c:	e009      	b.n	80021b2 <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 800219e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80021a2:	2364      	movs	r3, #100	; 0x64
 80021a4:	2205      	movs	r2, #5
 80021a6:	4807      	ldr	r0, [pc, #28]	; (80021c4 <handshake+0x114>)
 80021a8:	f00d fe56 	bl	800fe58 <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 80021ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ae:	3301      	adds	r3, #1
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	429a      	cmp	r2, r3
 80021b8:	dbf1      	blt.n	800219e <handshake+0xee>
	}

	return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3740      	adds	r7, #64	; 0x40
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24000638 	.word	0x24000638
 80021c8:	240003d4 	.word	0x240003d4

080021cc <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80021d0:	2100      	movs	r1, #0
 80021d2:	481b      	ldr	r0, [pc, #108]	; (8002240 <system_setup+0x74>)
 80021d4:	f00c fab6 	bl	800e744 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80021d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021dc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80021e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021ea:	4816      	ldr	r0, [pc, #88]	; (8002244 <system_setup+0x78>)
 80021ec:	f003 f87a 	bl	80052e4 <HAL_ADCEx_Calibration_Start>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80021f6:	f000 fde3 	bl	8002dc0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80021fa:	220b      	movs	r2, #11
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <system_setup+0x7c>)
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <system_setup+0x78>)
 8002200:	f002 f94e 	bl	80044a0 <HAL_ADC_Start_DMA>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800220a:	f000 fdd9 	bl	8002dc0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800220e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <system_setup+0x80>)
 8002218:	f003 f864 	bl	80052e4 <HAL_ADCEx_Calibration_Start>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002222:	f000 fdcd 	bl	8002dc0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002226:	2204      	movs	r2, #4
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <system_setup+0x84>)
 800222a:	4808      	ldr	r0, [pc, #32]	; (800224c <system_setup+0x80>)
 800222c:	f002 f938 	bl	80044a0 <HAL_ADC_Start_DMA>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002236:	f000 fdc3 	bl	8002dc0 <Error_Handler>
	}
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	240005ec 	.word	0x240005ec
 8002244:	2400013c 	.word	0x2400013c
 8002248:	24000ca0 	.word	0x24000ca0
 800224c:	240001a0 	.word	0x240001a0
 8002250:	24000cc0 	.word	0x24000cc0

08002254 <getUptime>:

void getUptime(uint8_t *buffer) {
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = UptimeMillis;
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <getUptime+0x88>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <getUptime+0x8c>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	613b      	str	r3, [r7, #16]

	// Did UptimeMillis rollover while reading SysTick->VAL?
	if (ms != UptimeMillis) {
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <getUptime+0x88>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	429a      	cmp	r2, r3
 8002274:	d005      	beq.n	8002282 <getUptime+0x2e>
		// Rollover occurred so read both again.
		// Must read both because we don't know whether the
		// rollover occurred before or after reading SysTick->VAL.
		// No need to check for another rollover because there is
		// no chance of another rollover occurring so quickly.
		ms = UptimeMillis;
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <getUptime+0x88>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <getUptime+0x8c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002288:	fb03 f202 	mul.w	r2, r3, r2
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <getUptime+0x8c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	3301      	adds	r3, #1
 8002292:	4914      	ldr	r1, [pc, #80]	; (80022e4 <getUptime+0x90>)
 8002294:	fba1 1303 	umull	r1, r3, r1, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	6939      	ldr	r1, [r7, #16]
 800229c:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0e1b      	lsrs	r3, r3, #24
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	0c1a      	lsrs	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	0a1a      	lsrs	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3302      	adds	r3, #2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3303      	adds	r3, #3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	24000c3c 	.word	0x24000c3c
 80022e0:	e000e010 	.word	0xe000e010
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4821      	ldr	r0, [pc, #132]	; (8002380 <getTimestamp+0x98>)
 80022fa:	f00b fb01 	bl	800d900 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2200      	movs	r2, #0
 8002304:	4619      	mov	r1, r3
 8002306:	481e      	ldr	r0, [pc, #120]	; (8002380 <getTimestamp+0x98>)
 8002308:	f00b fbde 	bl	800dac8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2264      	movs	r2, #100	; 0x64
 8002310:	fb03 f202 	mul.w	r2, r3, r2
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <getTimestamp+0x9c>)
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3301      	adds	r3, #1
 8002324:	7b7a      	ldrb	r2, [r7, #13]
 8002326:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3302      	adds	r3, #2
 800232c:	7bba      	ldrb	r2, [r7, #14]
 800232e:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3303      	adds	r3, #3
 8002334:	7c3a      	ldrb	r2, [r7, #16]
 8002336:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	7c7a      	ldrb	r2, [r7, #17]
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3305      	adds	r3, #5
 8002344:	7cba      	ldrb	r2, [r7, #18]
 8002346:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	0e1a      	lsrs	r2, r3, #24
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3306      	adds	r3, #6
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	0c1a      	lsrs	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3307      	adds	r3, #7
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	0a1a      	lsrs	r2, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3308      	adds	r3, #8
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3309      	adds	r3, #9
 8002370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3728      	adds	r7, #40	; 0x28
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	240003d4 	.word	0x240003d4
 8002384:	000f4240 	.word	0x000f4240

08002388 <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800238e:	bf00      	nop
 8002390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002394:	4836      	ldr	r0, [pc, #216]	; (8002470 <sample_pmt+0xe8>)
 8002396:	f006 fdb9 	bl	8008f0c <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f7      	bne.n	8002390 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80023a0:	200a      	movs	r0, #10
 80023a2:	f014 f885 	bl	80164b0 <malloc>
 80023a6:	4603      	mov	r3, r0
 80023a8:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023aa:	2002      	movs	r0, #2
 80023ac:	f014 f880 	bl	80164b0 <malloc>
 80023b0:	4603      	mov	r3, r0
 80023b2:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80023b4:	2004      	movs	r0, #4
 80023b6:	f014 f87b 	bl	80164b0 <malloc>
 80023ba:	4603      	mov	r3, r0
 80023bc:	60fb      	str	r3, [r7, #12]

	getUptime(uptime);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ff48 	bl	8002254 <getUptime>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80023c4:	6938      	ldr	r0, [r7, #16]
 80023c6:	f7ff fd3d 	bl	8001e44 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	22bb      	movs	r2, #187	; 0xbb
 80023ce:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3301      	adds	r3, #1
 80023d4:	22bb      	movs	r2, #187	; 0xbb
 80023d6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80023d8:	4b26      	ldr	r3, [pc, #152]	; (8002474 <sample_pmt+0xec>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	b29a      	uxth	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3302      	adds	r3, #2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <sample_pmt+0xec>)
 80023ea:	881a      	ldrh	r2, [r3, #0]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3303      	adds	r3, #3
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3304      	adds	r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	7812      	ldrb	r2, [r2, #0]
 80023fc:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3305      	adds	r3, #5
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	7852      	ldrb	r2, [r2, #1]
 8002406:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3306      	adds	r3, #6
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3307      	adds	r3, #7
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	7852      	ldrb	r2, [r2, #1]
 800241a:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3308      	adds	r3, #8
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	7892      	ldrb	r2, [r2, #2]
 8002424:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3309      	adds	r3, #9
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	78d2      	ldrb	r2, [r2, #3]
 800242e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	220a      	movs	r2, #10
 8002434:	6979      	ldr	r1, [r7, #20]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fe18 	bl	800206c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <sample_pmt+0xf0>)
 800243e:	6818      	ldr	r0, [r3, #0]
 8002440:	1d39      	adds	r1, r7, #4
 8002442:	2300      	movs	r3, #0
 8002444:	2200      	movs	r2, #0
 8002446:	f010 fe4f 	bl	80130e8 <osMessageQueuePut>
	available_msgs++;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <sample_pmt+0xf4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <sample_pmt+0xf4>)
 8002452:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002454:	6978      	ldr	r0, [r7, #20]
 8002456:	f014 f833 	bl	80164c0 <free>
	free(pmt_spi);
 800245a:	6938      	ldr	r0, [r7, #16]
 800245c:	f014 f830 	bl	80164c0 <free>
	free(uptime);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f014 f82d 	bl	80164c0 <free>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	58020000 	.word	0x58020000
 8002474:	24000c50 	.word	0x24000c50
 8002478:	24000c40 	.word	0x24000c40
 800247c:	24000c4c 	.word	0x24000c4c

08002480 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002486:	bf00      	nop
 8002488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248c:	484a      	ldr	r0, [pc, #296]	; (80025b8 <sample_erpa+0x138>)
 800248e:	f006 fd3d 	bl	8008f0c <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f7      	bne.n	8002488 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002498:	200e      	movs	r0, #14
 800249a:	f014 f809 	bl	80164b0 <malloc>
 800249e:	4603      	mov	r3, r0
 80024a0:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80024a2:	2002      	movs	r0, #2
 80024a4:	f014 f804 	bl	80164b0 <malloc>
 80024a8:	4603      	mov	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 80024ac:	2004      	movs	r0, #4
 80024ae:	f013 ffff 	bl	80164b0 <malloc>
 80024b2:	4603      	mov	r3, r0
 80024b4:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80024b6:	2004      	movs	r0, #4
 80024b8:	f013 fffa 	bl	80164b0 <malloc>
 80024bc:	4603      	mov	r3, r0
 80024be:	60bb      	str	r3, [r7, #8]

	getUptime(uptime);
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f7ff fec7 	bl	8002254 <getUptime>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 80024c6:	6938      	ldr	r0, [r7, #16]
 80024c8:	f7ff fce0 	bl	8001e8c <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f7ff fd01 	bl	8001ed4 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	22aa      	movs	r2, #170	; 0xaa
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	22aa      	movs	r2, #170	; 0xaa
 80024de:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <sample_erpa+0x13c>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	3302      	adds	r3, #2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <sample_erpa+0x13c>)
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3303      	adds	r3, #3
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29a      	uxth	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3304      	adds	r3, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3305      	adds	r3, #5
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3302      	adds	r3, #2
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29a      	uxth	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3306      	adds	r3, #6
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3302      	adds	r3, #2
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3307      	adds	r3, #7
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3308      	adds	r3, #8
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3309      	adds	r3, #9
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	7852      	ldrb	r2, [r2, #1]
 800254a:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	330a      	adds	r3, #10
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	330b      	adds	r3, #11
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	7852      	ldrb	r2, [r2, #1]
 800255e:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	330c      	adds	r3, #12
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	7892      	ldrb	r2, [r2, #2]
 8002568:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	330d      	adds	r3, #13
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	78d2      	ldrb	r2, [r2, #3]
 8002572:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002574:	463b      	mov	r3, r7
 8002576:	220e      	movs	r2, #14
 8002578:	6979      	ldr	r1, [r7, #20]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fd76 	bl	800206c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <sample_erpa+0x140>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	4639      	mov	r1, r7
 8002586:	2300      	movs	r3, #0
 8002588:	2200      	movs	r2, #0
 800258a:	f010 fdad 	bl	80130e8 <osMessageQueuePut>
	available_msgs++;
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <sample_erpa+0x144>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3301      	adds	r3, #1
 8002594:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <sample_erpa+0x144>)
 8002596:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002598:	6978      	ldr	r0, [r7, #20]
 800259a:	f013 ff91 	bl	80164c0 <free>
	free(erpa_spi);
 800259e:	6938      	ldr	r0, [r7, #16]
 80025a0:	f013 ff8e 	bl	80164c0 <free>
	free(erpa_adc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f013 ff8b 	bl	80164c0 <free>
	free(uptime);
 80025aa:	68b8      	ldr	r0, [r7, #8]
 80025ac:	f013 ff88 	bl	80164c0 <free>
}
 80025b0:	bf00      	nop
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	58020400 	.word	0x58020400
 80025bc:	24000c52 	.word	0x24000c52
 80025c0:	24000c40 	.word	0x24000c40
 80025c4:	24000c4c 	.word	0x24000c4c

080025c8 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80025ce:	2030      	movs	r0, #48	; 0x30
 80025d0:	f013 ff6e 	bl	80164b0 <malloc>
 80025d4:	4603      	mov	r3, r0
 80025d6:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80025d8:	2008      	movs	r0, #8
 80025da:	f013 ff69 	bl	80164b0 <malloc>
 80025de:	4603      	mov	r3, r0
 80025e0:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80025e2:	200a      	movs	r0, #10
 80025e4:	f013 ff64 	bl	80164b0 <malloc>
 80025e8:	4603      	mov	r3, r0
 80025ea:	60fb      	str	r3, [r7, #12]

	getTimestamp(timestamp);
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f7ff fe7b 	bl	80022e8 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <sample_hk+0x78>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fa:	db25      	blt.n	8002648 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 80025fc:	6938      	ldr	r0, [r7, #16]
 80025fe:	f7ff fc83 	bl	8001f08 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <sample_hk+0x7c>)
 800260c:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3302      	adds	r3, #2
 8002612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002616:	b29a      	uxth	r2, r3
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <sample_hk+0x7c>)
 800261a:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	3304      	adds	r3, #4
 8002620:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <sample_hk+0x7c>)
 8002628:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3306      	adds	r3, #6
 800262e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002632:	b29a      	uxth	r2, r3
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <sample_hk+0x7c>)
 8002636:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <sample_hk+0x78>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e01f      	b.n	8002680 <sample_hk+0xb8>
 8002640:	24000004 	.word	0x24000004
 8002644:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 8002648:	4b9f      	ldr	r3, [pc, #636]	; (80028c8 <sample_hk+0x300>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a9e      	ldr	r2, [pc, #632]	; (80028c8 <sample_hk+0x300>)
 8002650:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 8002652:	4b9e      	ldr	r3, [pc, #632]	; (80028cc <sample_hk+0x304>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b21a      	sxth	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 800265c:	4b9b      	ldr	r3, [pc, #620]	; (80028cc <sample_hk+0x304>)
 800265e:	885a      	ldrh	r2, [r3, #2]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	3302      	adds	r3, #2
 8002664:	b212      	sxth	r2, r2
 8002666:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002668:	4b98      	ldr	r3, [pc, #608]	; (80028cc <sample_hk+0x304>)
 800266a:	889a      	ldrh	r2, [r3, #4]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	3304      	adds	r3, #4
 8002670:	b212      	sxth	r2, r2
 8002672:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002674:	4b95      	ldr	r3, [pc, #596]	; (80028cc <sample_hk+0x304>)
 8002676:	88da      	ldrh	r2, [r3, #6]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	3306      	adds	r3, #6
 800267c:	b212      	sxth	r2, r2
 800267e:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	22cc      	movs	r2, #204	; 0xcc
 8002684:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	22cc      	movs	r2, #204	; 0xcc
 800268c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800268e:	4b90      	ldr	r3, [pc, #576]	; (80028d0 <sample_hk+0x308>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3302      	adds	r3, #2
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800269e:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <sample_hk+0x308>)
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3303      	adds	r3, #3
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 80026aa:	4b8a      	ldr	r3, [pc, #552]	; (80028d4 <sample_hk+0x30c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3304      	adds	r3, #4
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 80026ba:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <sample_hk+0x30c>)
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3305      	adds	r3, #5
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 80026c6:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <sample_hk+0x310>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3306      	adds	r3, #6
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 80026d6:	4b80      	ldr	r3, [pc, #512]	; (80028d8 <sample_hk+0x310>)
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3307      	adds	r3, #7
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e8:	121a      	asrs	r2, r3, #8
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3308      	adds	r3, #8
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3309      	adds	r3, #9
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	3302      	adds	r3, #2
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	121a      	asrs	r2, r3, #8
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	330a      	adds	r3, #10
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3302      	adds	r3, #2
 8002716:	f9b3 2000 	ldrsh.w	r2, [r3]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	330b      	adds	r3, #11
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	3304      	adds	r3, #4
 8002726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800272a:	121a      	asrs	r2, r3, #8
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	330c      	adds	r3, #12
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3304      	adds	r3, #4
 8002738:	f9b3 2000 	ldrsh.w	r2, [r3]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	330d      	adds	r3, #13
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	3306      	adds	r3, #6
 8002748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274c:	121a      	asrs	r2, r3, #8
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	330e      	adds	r3, #14
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	3306      	adds	r3, #6
 800275a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	330f      	adds	r3, #15
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <sample_hk+0x314>)
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b29a      	uxth	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3310      	adds	r3, #16
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002776:	4b59      	ldr	r3, [pc, #356]	; (80028dc <sample_hk+0x314>)
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3311      	adds	r3, #17
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <sample_hk+0x318>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b29a      	uxth	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3312      	adds	r3, #18
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 8002792:	4b53      	ldr	r3, [pc, #332]	; (80028e0 <sample_hk+0x318>)
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3313      	adds	r3, #19
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 800279e:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <sample_hk+0x31c>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3314      	adds	r3, #20
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 80027ae:	4b4d      	ldr	r3, [pc, #308]	; (80028e4 <sample_hk+0x31c>)
 80027b0:	881a      	ldrh	r2, [r3, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3315      	adds	r3, #21
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <sample_hk+0x320>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3316      	adds	r3, #22
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <sample_hk+0x320>)
 80027cc:	881a      	ldrh	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	3317      	adds	r3, #23
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 80027d6:	4b45      	ldr	r3, [pc, #276]	; (80028ec <sample_hk+0x324>)
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3318      	adds	r3, #24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <sample_hk+0x324>)
 80027e8:	881a      	ldrh	r2, [r3, #0]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3319      	adds	r3, #25
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <sample_hk+0x328>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	0a1b      	lsrs	r3, r3, #8
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	331a      	adds	r3, #26
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <sample_hk+0x328>)
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	331b      	adds	r3, #27
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 800280e:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <sample_hk+0x32c>)
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29a      	uxth	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	331c      	adds	r3, #28
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <sample_hk+0x32c>)
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	331d      	adds	r3, #29
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <sample_hk+0x330>)
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	b29a      	uxth	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	331e      	adds	r3, #30
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 800283a:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <sample_hk+0x330>)
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	331f      	adds	r3, #31
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <sample_hk+0x334>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3320      	adds	r3, #32
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <sample_hk+0x334>)
 8002858:	881a      	ldrh	r2, [r3, #0]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3321      	adds	r3, #33	; 0x21
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <sample_hk+0x338>)
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29a      	uxth	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3322      	adds	r3, #34	; 0x22
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <sample_hk+0x338>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	3323      	adds	r3, #35	; 0x23
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <sample_hk+0x33c>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	b29a      	uxth	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3324      	adds	r3, #36	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <sample_hk+0x33c>)
 8002890:	881a      	ldrh	r2, [r3, #0]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3325      	adds	r3, #37	; 0x25
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3326      	adds	r3, #38	; 0x26
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3327      	adds	r3, #39	; 0x27
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	7852      	ldrb	r2, [r2, #1]
 80028ac:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	3328      	adds	r3, #40	; 0x28
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	7892      	ldrb	r2, [r2, #2]
 80028b6:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3329      	adds	r3, #41	; 0x29
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	78d2      	ldrb	r2, [r2, #3]
 80028c0:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	332a      	adds	r3, #42	; 0x2a
 80028c6:	e01f      	b.n	8002908 <sample_hk+0x340>
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000cc8 	.word	0x24000cc8
 80028d0:	24000c54 	.word	0x24000c54
 80028d4:	24000c1c 	.word	0x24000c1c
 80028d8:	24000c1e 	.word	0x24000c1e
 80028dc:	24000c20 	.word	0x24000c20
 80028e0:	24000c22 	.word	0x24000c22
 80028e4:	24000c24 	.word	0x24000c24
 80028e8:	24000c26 	.word	0x24000c26
 80028ec:	24000c28 	.word	0x24000c28
 80028f0:	24000c2a 	.word	0x24000c2a
 80028f4:	24000c2c 	.word	0x24000c2c
 80028f8:	24000c2e 	.word	0x24000c2e
 80028fc:	24000c30 	.word	0x24000c30
 8002900:	24000c32 	.word	0x24000c32
 8002904:	24000c34 	.word	0x24000c34
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	7912      	ldrb	r2, [r2, #4]
 800290c:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	332b      	adds	r3, #43	; 0x2b
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	7952      	ldrb	r2, [r2, #5]
 8002916:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	332c      	adds	r3, #44	; 0x2c
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	7992      	ldrb	r2, [r2, #6]
 8002920:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	332d      	adds	r3, #45	; 0x2d
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	79d2      	ldrb	r2, [r2, #7]
 800292a:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	332e      	adds	r3, #46	; 0x2e
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	7a12      	ldrb	r2, [r2, #8]
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	332f      	adds	r3, #47	; 0x2f
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	7a52      	ldrb	r2, [r2, #9]
 800293e:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2230      	movs	r2, #48	; 0x30
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb90 	bl	800206c <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <sample_hk+0x3b8>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	1d39      	adds	r1, r7, #4
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	f010 fbc7 	bl	80130e8 <osMessageQueuePut>
	available_msgs++;
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <sample_hk+0x3bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <sample_hk+0x3bc>)
 8002962:	6013      	str	r3, [r2, #0]

	free(buffer);
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	f013 fdab 	bl	80164c0 <free>
	free(hk_i2c);
 800296a:	6938      	ldr	r0, [r7, #16]
 800296c:	f013 fda8 	bl	80164c0 <free>
	free(timestamp);
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f013 fda5 	bl	80164c0 <free>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	24000c40 	.word	0x24000c40
 8002984:	24000c4c 	.word	0x24000c4c

08002988 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <PMT_init+0x38>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	f010 faca 	bl	8012f34 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <PMT_init+0x3c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <PMT_init+0x30>
			sample_pmt();
 80029a8:	f7ff fcee 	bl	8002388 <sample_pmt>
			pmt_seq++;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <PMT_init+0x40>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <PMT_init+0x40>)
 80029b6:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 80029b8:	f010 f9dc 	bl	8012d74 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 80029bc:	e7e8      	b.n	8002990 <PMT_init+0x8>
 80029be:	bf00      	nop
 80029c0:	24000c5c 	.word	0x24000c5c
 80029c4:	24000c56 	.word	0x24000c56
 80029c8:	24000c50 	.word	0x24000c50

080029cc <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <ERPA_init+0x38>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029dc:	2200      	movs	r2, #0
 80029de:	2102      	movs	r1, #2
 80029e0:	f010 faa8 	bl	8012f34 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <ERPA_init+0x3c>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <ERPA_init+0x30>
			sample_erpa();
 80029ec:	f7ff fd48 	bl	8002480 <sample_erpa>
			erpa_seq++;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <ERPA_init+0x40>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <ERPA_init+0x40>)
 80029fa:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 80029fc:	f010 f9ba 	bl	8012d74 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002a00:	e7e8      	b.n	80029d4 <ERPA_init+0x8>
 8002a02:	bf00      	nop
 8002a04:	24000c5c 	.word	0x24000c5c
 8002a08:	24000c57 	.word	0x24000c57
 8002a0c:	24000c52 	.word	0x24000c52

08002a10 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HK_init+0x38>)
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a20:	2200      	movs	r2, #0
 8002a22:	2104      	movs	r1, #4
 8002a24:	f010 fa86 	bl	8012f34 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HK_init+0x3c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HK_init+0x30>
			sample_hk();
 8002a30:	f7ff fdca 	bl	80025c8 <sample_hk>
			hk_seq++;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HK_init+0x40>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HK_init+0x40>)
 8002a3e:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002a40:	f010 f998 	bl	8012d74 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002a44:	e7e8      	b.n	8002a18 <HK_init+0x8>
 8002a46:	bf00      	nop
 8002a48:	24000c5c 	.word	0x24000c5c
 8002a4c:	24000c58 	.word	0x24000c58
 8002a50:	24000c54 	.word	0x24000c54

08002a54 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	490f      	ldr	r1, [pc, #60]	; (8002a9c <UART_RX_init+0x48>)
 8002a60:	480f      	ldr	r0, [pc, #60]	; (8002aa0 <UART_RX_init+0x4c>)
 8002a62:	f00d fb4f 	bl	8010104 <HAL_UART_Receive_IT>
		if (STOP_TRIGGERED) {
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <UART_RX_init+0x50>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <UART_RX_init+0x3e>
			STOP_TRIGGERED = 0;
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <UART_RX_init+0x50>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
			vTaskSuspendAll();
 8002a74:	f011 ffc8 	bl	8014a08 <vTaskSuspendAll>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002a78:	2101      	movs	r1, #1
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f007 f884 	bl	8009b88 <HAL_PWR_EnterSTOPMode>

		    // Reinitialize system clock after wake-up
		    SystemClock_Config();
 8002a80:	f7fe fadc 	bl	800103c <SystemClock_Config>

		    // Re-enable interrupts if necessary
		    HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a84:	2201      	movs	r2, #1
 8002a86:	4905      	ldr	r1, [pc, #20]	; (8002a9c <UART_RX_init+0x48>)
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <UART_RX_init+0x4c>)
 8002a8a:	f00d fb3b 	bl	8010104 <HAL_UART_Receive_IT>

			xTaskResumeAll();
 8002a8e:	f011 ffc9 	bl	8014a24 <xTaskResumeAll>
		}
		else{

		}
		osDelay(5);
 8002a92:	2005      	movs	r0, #5
 8002a94:	f010 f9af 	bl	8012df6 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a98:	e7e0      	b.n	8002a5c <UART_RX_init+0x8>
 8002a9a:	bf00      	nop
 8002a9c:	24000c60 	.word	0x24000c60
 8002aa0:	24000638 	.word	0x24000638
 8002aa4:	24000c38 	.word	0x24000c38

08002aa8 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002ab0:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <GPIO_on_init+0x9c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f010 f97d 	bl	8012db4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002aba:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <GPIO_on_init+0xa0>)
 8002abc:	2104      	movs	r1, #4
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f006 fa3b 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002ac6:	2064      	movs	r0, #100	; 0x64
 8002ac8:	f010 f995 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <GPIO_on_init+0xa0>)
 8002ace:	2120      	movs	r1, #32
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f006 fa32 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002ad8:	2064      	movs	r0, #100	; 0x64
 8002ada:	f010 f98c 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <GPIO_on_init+0xa4>)
 8002ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f006 fa28 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	f010 f982 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <GPIO_on_init+0xa4>)
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	2201      	movs	r2, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f006 fa1f 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002afe:	2064      	movs	r0, #100	; 0x64
 8002b00:	f010 f979 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b06:	2140      	movs	r1, #64	; 0x40
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 fa16 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002b10:	2064      	movs	r0, #100	; 0x64
 8002b12:	f010 f970 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f006 fa0c 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002b24:	2064      	movs	r0, #100	; 0x64
 8002b26:	f010 f966 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <GPIO_on_init+0xa4>)
 8002b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b30:	2201      	movs	r2, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fa02 	bl	8008f3c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002b38:	4b02      	ldr	r3, [pc, #8]	; (8002b44 <GPIO_on_init+0x9c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f010 f939 	bl	8012db4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002b42:	e7ba      	b.n	8002aba <GPIO_on_init+0x12>
 8002b44:	24000754 	.word	0x24000754
 8002b48:	58020400 	.word	0x58020400
 8002b4c:	58020800 	.word	0x58020800

08002b50 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002b58:	4b24      	ldr	r3, [pc, #144]	; (8002bec <GPIO_off_init+0x9c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f010 f929 	bl	8012db4 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f006 f9e6 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002b70:	2064      	movs	r0, #100	; 0x64
 8002b72:	f010 f940 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f006 f9dc 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002b84:	2064      	movs	r0, #100	; 0x64
 8002b86:	f010 f936 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b8c:	2140      	movs	r1, #64	; 0x40
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f006 f9d3 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002b96:	2064      	movs	r0, #100	; 0x64
 8002b98:	f010 f92d 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 f9ca 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002ba8:	2064      	movs	r0, #100	; 0x64
 8002baa:	f010 f924 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <GPIO_off_init+0xa0>)
 8002bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f006 f9c0 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002bbc:	2064      	movs	r0, #100	; 0x64
 8002bbe:	f010 f91a 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <GPIO_off_init+0xa4>)
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f006 f9b7 	bl	8008f3c <HAL_GPIO_WritePin>
		osDelay(100);
 8002bce:	2064      	movs	r0, #100	; 0x64
 8002bd0:	f010 f911 	bl	8012df6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <GPIO_off_init+0xa4>)
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f006 f9ae 	bl	8008f3c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <GPIO_off_init+0x9c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f010 f8e5 	bl	8012db4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002bea:	e7ba      	b.n	8002b62 <GPIO_off_init+0x12>
 8002bec:	240009b4 	.word	0x240009b4
 8002bf0:	58020800 	.word	0x58020800
 8002bf4:	58020400 	.word	0x58020400

08002bf8 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <UART_TX_init+0xa4>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c10:	2200      	movs	r2, #0
 8002c12:	4923      	ldr	r1, [pc, #140]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c14:	f010 fac8 	bl	80131a8 <osMessageQueueGet>
 8002c18:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	461a      	mov	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2e:	d218      	bcs.n	8002c62 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <UART_TX_init+0xac>)
 8002c34:	4413      	add	r3, r2
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c38:	6811      	ldr	r1, [r2, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c3c:	8892      	ldrh	r2, [r2, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f013 fc46 	bl	80164d0 <memcpy>
					free(msg.array);
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f013 fc39 	bl	80164c0 <free>
					total_size += msg.size;
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <UART_TX_init+0xa8>)
 8002c50:	889b      	ldrh	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002c60:	d203      	bcs.n	8002c6a <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0cf      	beq.n	8002c08 <UART_TX_init+0x10>
 8002c68:	e000      	b.n	8002c6c <UART_TX_init+0x74>
						break;
 8002c6a:	bf00      	nop

		if (total_size > 0) {
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <UART_TX_init+0xac>)
 8002c7a:	480b      	ldr	r0, [pc, #44]	; (8002ca8 <UART_TX_init+0xb0>)
 8002c7c:	f00d fa8e 	bl	801019c <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002c80:	e001      	b.n	8002c86 <UART_TX_init+0x8e>
				osThreadYield();
 8002c82:	f010 f877 	bl	8012d74 <osThreadYield>
			while (tx_flag == 0) {
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <UART_TX_init+0xb4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f9      	beq.n	8002c82 <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <UART_TX_init+0xb4>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002c94:	f010 f86e 	bl	8012d74 <osThreadYield>
		total_size = 0;
 8002c98:	e7b4      	b.n	8002c04 <UART_TX_init+0xc>
 8002c9a:	bf00      	nop
 8002c9c:	24000c40 	.word	0x24000c40
 8002ca0:	24000c44 	.word	0x24000c44
 8002ca4:	24000cd0 	.word	0x24000cd0
 8002ca8:	24000638 	.word	0x24000638
 8002cac:	24000000 	.word	0x24000000

08002cb0 <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
		osThreadExit();
#endif
	//osThreadExit(); // REMOVE

	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <Voltage_Monitor_init+0xb4>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	f010 f936 	bl	8012f34 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 8002cc8:	2012      	movs	r0, #18
 8002cca:	f013 fbf1 	bl	80164b0 <malloc>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002cd2:	2008      	movs	r0, #8
 8002cd4:	f013 fbec 	bl	80164b0 <malloc>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff f943 	bl	8001f68 <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002ce2:	68b8      	ldr	r0, [r7, #8]
 8002ce4:	f7ff f98a 	bl	8001ffc <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	885a      	ldrh	r2, [r3, #2]
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <Voltage_Monitor_init+0xb8>)
 8002cee:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	881a      	ldrh	r2, [r3, #0]
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <Voltage_Monitor_init+0xbc>)
 8002cf6:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	881a      	ldrh	r2, [r3, #0]
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <Voltage_Monitor_init+0xc0>)
 8002cfe:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	885a      	ldrh	r2, [r3, #2]
 8002d04:	4b1b      	ldr	r3, [pc, #108]	; (8002d74 <Voltage_Monitor_init+0xc4>)
 8002d06:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	889a      	ldrh	r2, [r3, #4]
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <Voltage_Monitor_init+0xc8>)
 8002d0e:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	88da      	ldrh	r2, [r3, #6]
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <Voltage_Monitor_init+0xcc>)
 8002d16:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	899a      	ldrh	r2, [r3, #12]
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <Voltage_Monitor_init+0xd0>)
 8002d1e:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88da      	ldrh	r2, [r3, #6]
 8002d24:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <Voltage_Monitor_init+0xd4>)
 8002d26:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	889a      	ldrh	r2, [r3, #4]
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <Voltage_Monitor_init+0xd8>)
 8002d2e:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	89da      	ldrh	r2, [r3, #14]
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <Voltage_Monitor_init+0xdc>)
 8002d36:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8a1a      	ldrh	r2, [r3, #16]
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <Voltage_Monitor_init+0xe0>)
 8002d3e:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	891a      	ldrh	r2, [r3, #8]
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <Voltage_Monitor_init+0xe4>)
 8002d46:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	895a      	ldrh	r2, [r3, #10]
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <Voltage_Monitor_init+0xe8>)
 8002d4e:	801a      	strh	r2, [r3, #0]
//
//		if (!inRange(_n800v, 3018, 3336)) {
//			error_protocol(RAIL_n800v);
//		}

		free(hk_adc1);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f013 fbb5 	bl	80164c0 <free>
		free(hk_adc3);
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f013 fbb2 	bl	80164c0 <free>

		osThreadYield();
 8002d5c:	f010 f80a 	bl	8012d74 <osThreadYield>
	for (;;) {
 8002d60:	e7aa      	b.n	8002cb8 <Voltage_Monitor_init+0x8>
 8002d62:	bf00      	nop
 8002d64:	24000c5c 	.word	0x24000c5c
 8002d68:	24000c1c 	.word	0x24000c1c
 8002d6c:	24000c1e 	.word	0x24000c1e
 8002d70:	24000c20 	.word	0x24000c20
 8002d74:	24000c22 	.word	0x24000c22
 8002d78:	24000c24 	.word	0x24000c24
 8002d7c:	24000c26 	.word	0x24000c26
 8002d80:	24000c28 	.word	0x24000c28
 8002d84:	24000c2a 	.word	0x24000c2a
 8002d88:	24000c2c 	.word	0x24000c2c
 8002d8c:	24000c2e 	.word	0x24000c2e
 8002d90:	24000c30 	.word	0x24000c30
 8002d94:	24000c32 	.word	0x24000c32
 8002d98:	24000c34 	.word	0x24000c34

08002d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a04      	ldr	r2, [pc, #16]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002dae:	f000 ff85 	bl	8003cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40001000 	.word	0x40001000

08002dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002dc8:	e7fe      	b.n	8002dc8 <Error_Handler+0x8>
	...

08002dcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_MspInit+0x38>)
 8002dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_MspInit+0x38>)
 8002dda:	f043 0302 	orr.w	r3, r3, #2
 8002dde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_MspInit+0x38>)
 8002de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002df0:	2200      	movs	r2, #0
 8002df2:	210f      	movs	r1, #15
 8002df4:	f06f 0001 	mvn.w	r0, #1
 8002df8:	f002 fc6e 	bl	80056d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	58024400 	.word	0x58024400

08002e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a7b      	ldr	r2, [pc, #492]	; (8003014 <HAL_ADC_MspInit+0x20c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f040 8091 	bne.w	8002f4e <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e2c:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e32:	4a79      	ldr	r2, [pc, #484]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e34:	f043 0320 	orr.w	r3, r3, #32
 8002e38:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e3c:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e50:	4a71      	ldr	r2, [pc, #452]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	4b6b      	ldr	r3, [pc, #428]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	4a6a      	ldr	r2, [pc, #424]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e78:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e86:	4b64      	ldr	r3, [pc, #400]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	4a62      	ldr	r2, [pc, #392]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e96:	4b60      	ldr	r3, [pc, #384]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ea4:	2333      	movs	r3, #51	; 0x33
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4859      	ldr	r0, [pc, #356]	; (800301c <HAL_ADC_MspInit+0x214>)
 8002eb8:	f005 fe78 	bl	8008bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002ebc:	23ce      	movs	r3, #206	; 0xce
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4854      	ldr	r0, [pc, #336]	; (8003020 <HAL_ADC_MspInit+0x218>)
 8002ed0:	f005 fe6c 	bl	8008bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	484f      	ldr	r0, [pc, #316]	; (8003024 <HAL_ADC_MspInit+0x21c>)
 8002ee8:	f005 fe60 	bl	8008bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002eec:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002eee:	4a4f      	ldr	r2, [pc, #316]	; (800302c <HAL_ADC_MspInit+0x224>)
 8002ef0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002ef4:	2209      	movs	r2, #9
 8002ef6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f14:	4b44      	ldr	r3, [pc, #272]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f1c:	4b42      	ldr	r3, [pc, #264]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f22:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f24:	4b40      	ldr	r3, [pc, #256]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f30:	483d      	ldr	r0, [pc, #244]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f32:	f002 ffff 	bl	8005f34 <HAL_DMA_Init>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002f3c:	f7ff ff40 	bl	8002dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a39      	ldr	r2, [pc, #228]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f44:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f46:	4a38      	ldr	r2, [pc, #224]	; (8003028 <HAL_ADC_MspInit+0x220>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002f4c:	e05e      	b.n	800300c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a37      	ldr	r2, [pc, #220]	; (8003030 <HAL_ADC_MspInit+0x228>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d159      	bne.n	800300c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002f58:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5e:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f7e:	f043 0304 	orr.w	r3, r3, #4
 8002f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_ADC_MspInit+0x210>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002f94:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002f98:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f9c:	f000 feba 	bl	8003d14 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002fa0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002fa4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002fa8:	f000 feb4 	bl	8003d14 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002fac:	4b21      	ldr	r3, [pc, #132]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <HAL_ADC_MspInit+0x230>)
 8002fb0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fb4:	2273      	movs	r2, #115	; 0x73
 8002fb6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fb8:	4b1e      	ldr	r3, [pc, #120]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fca:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fda:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002fdc:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fe2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002fe4:	4b13      	ldr	r3, [pc, #76]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ff0:	4810      	ldr	r0, [pc, #64]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8002ff2:	f002 ff9f 	bl	8005f34 <HAL_DMA_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002ffc:	f7ff fee0 	bl	8002dc0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a0c      	ldr	r2, [pc, #48]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8003004:	64da      	str	r2, [r3, #76]	; 0x4c
 8003006:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <HAL_ADC_MspInit+0x22c>)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800300c:	bf00      	nop
 800300e:	3738      	adds	r7, #56	; 0x38
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40022000 	.word	0x40022000
 8003018:	58024400 	.word	0x58024400
 800301c:	58020800 	.word	0x58020800
 8003020:	58020000 	.word	0x58020000
 8003024:	58020400 	.word	0x58020400
 8003028:	24000204 	.word	0x24000204
 800302c:	40020010 	.word	0x40020010
 8003030:	58026000 	.word	0x58026000
 8003034:	2400027c 	.word	0x2400027c
 8003038:	40020028 	.word	0x40020028

0800303c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a34      	ldr	r2, [pc, #208]	; (800312c <HAL_DAC_MspInit+0xf0>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d161      	bne.n	8003122 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 8003060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003064:	4a32      	ldr	r2, [pc, #200]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 8003066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800306a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 8003070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003082:	4a2b      	ldr	r2, [pc, #172]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308c:	4b28      	ldr	r3, [pc, #160]	; (8003130 <HAL_DAC_MspInit+0xf4>)
 800308e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800309a:	2310      	movs	r3, #16
 800309c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309e:	2303      	movs	r3, #3
 80030a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	4821      	ldr	r0, [pc, #132]	; (8003134 <HAL_DAC_MspInit+0xf8>)
 80030ae:	f005 fd7d 	bl	8008bac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030b4:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_DAC_MspInit+0x100>)
 80030b6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030ba:	2243      	movs	r2, #67	; 0x43
 80030bc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c4:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80030e2:	4b15      	ldr	r3, [pc, #84]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030e8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80030f6:	4810      	ldr	r0, [pc, #64]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 80030f8:	f002 ff1c 	bl	8005f34 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8003102:	f7ff fe5d 	bl	8002dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_DAC_MspInit+0xfc>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2105      	movs	r1, #5
 8003116:	2036      	movs	r0, #54	; 0x36
 8003118:	f002 fade 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800311c:	2036      	movs	r0, #54	; 0x36
 800311e:	f002 faf5 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003122:	bf00      	nop
 8003124:	3728      	adds	r7, #40	; 0x28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40007400 	.word	0x40007400
 8003130:	58024400 	.word	0x58024400
 8003134:	58020000 	.word	0x58020000
 8003138:	24000308 	.word	0x24000308
 800313c:	40020088 	.word	0x40020088

08003140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0ba      	sub	sp, #232	; 0xe8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003158:	f107 0310 	add.w	r3, r7, #16
 800315c:	22c0      	movs	r2, #192	; 0xc0
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f013 f9c3 	bl	80164ec <memset>
  if(hi2c->Instance==I2C1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a27      	ldr	r2, [pc, #156]	; (8003208 <HAL_I2C_MspInit+0xc8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d146      	bne.n	80031fe <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003170:	f04f 0208 	mov.w	r2, #8
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800317c:	2300      	movs	r3, #0
 800317e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	4618      	mov	r0, r3
 8003188:	f007 fd9c 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003192:	f7ff fe15 	bl	8002dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b1d      	ldr	r3, [pc, #116]	; (800320c <HAL_I2C_MspInit+0xcc>)
 8003198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_I2C_MspInit+0xcc>)
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031bc:	2312      	movs	r3, #18
 80031be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031ce:	2304      	movs	r3, #4
 80031d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <HAL_I2C_MspInit+0xd0>)
 80031dc:	f005 fce6 	bl	8008bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_I2C_MspInit+0xcc>)
 80031f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fa:	60bb      	str	r3, [r7, #8]
 80031fc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	37e8      	adds	r7, #232	; 0xe8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40005400 	.word	0x40005400
 800320c:	58024400 	.word	0x58024400
 8003210:	58020400 	.word	0x58020400

08003214 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b0b2      	sub	sp, #200	; 0xc8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800321c:	f107 0308 	add.w	r3, r7, #8
 8003220:	22c0      	movs	r2, #192	; 0xc0
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f013 f961 	bl	80164ec <memset>
  if(hrtc->Instance==RTC)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <HAL_RTC_MspInit+0x5c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d118      	bne.n	8003266 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003234:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_RTC_MspInit+0x60>)
 8003242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003246:	f107 0308 	add.w	r3, r7, #8
 800324a:	4618      	mov	r0, r3
 800324c:	f007 fd3a 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003256:	f7ff fdb3 	bl	8002dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <HAL_RTC_MspInit+0x64>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a06      	ldr	r2, [pc, #24]	; (8003278 <HAL_RTC_MspInit+0x64>)
 8003260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003266:	bf00      	nop
 8003268:	37c8      	adds	r7, #200	; 0xc8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	58004000 	.word	0x58004000
 8003274:	00019300 	.word	0x00019300
 8003278:	58024400 	.word	0x58024400

0800327c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b0bc      	sub	sp, #240	; 0xf0
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003284:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	22c0      	movs	r2, #192	; 0xc0
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f013 f925 	bl	80164ec <memset>
  if(hspi->Instance==SPI1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_SPI_MspInit+0x15c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d145      	bne.n	8003338 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80032ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032bc:	f107 0318 	add.w	r3, r7, #24
 80032c0:	4618      	mov	r0, r3
 80032c2:	f007 fcff 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80032cc:	f7ff fd78 	bl	8002dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_SPI_MspInit+0x160>)
 80032d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d6:	4a41      	ldr	r2, [pc, #260]	; (80033dc <HAL_SPI_MspInit+0x160>)
 80032d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032e0:	4b3e      	ldr	r3, [pc, #248]	; (80033dc <HAL_SPI_MspInit+0x160>)
 80032e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_SPI_MspInit+0x160>)
 80032f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f4:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_SPI_MspInit+0x160>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fe:	4b37      	ldr	r3, [pc, #220]	; (80033dc <HAL_SPI_MspInit+0x160>)
 8003300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800330c:	2318      	movs	r3, #24
 800330e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003312:	2302      	movs	r3, #2
 8003314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003324:	2305      	movs	r3, #5
 8003326:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800332e:	4619      	mov	r1, r3
 8003330:	482b      	ldr	r0, [pc, #172]	; (80033e0 <HAL_SPI_MspInit+0x164>)
 8003332:	f005 fc3b 	bl	8008bac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003336:	e04a      	b.n	80033ce <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_SPI_MspInit+0x168>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d145      	bne.n	80033ce <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003342:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800334e:	2300      	movs	r3, #0
 8003350:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003352:	f107 0318 	add.w	r3, r7, #24
 8003356:	4618      	mov	r0, r3
 8003358:	f007 fcb4 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8003362:	f7ff fd2d 	bl	8002dc0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_SPI_MspInit+0x160>)
 8003368:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_SPI_MspInit+0x160>)
 800336e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003372:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003376:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_SPI_MspInit+0x160>)
 8003378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800337c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_SPI_MspInit+0x160>)
 8003386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338a:	4a14      	ldr	r2, [pc, #80]	; (80033dc <HAL_SPI_MspInit+0x160>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_SPI_MspInit+0x160>)
 8003396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80033a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80033a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033aa:	2302      	movs	r3, #2
 80033ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033bc:	2305      	movs	r3, #5
 80033be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033c6:	4619      	mov	r1, r3
 80033c8:	4805      	ldr	r0, [pc, #20]	; (80033e0 <HAL_SPI_MspInit+0x164>)
 80033ca:	f005 fbef 	bl	8008bac <HAL_GPIO_Init>
}
 80033ce:	bf00      	nop
 80033d0:	37f0      	adds	r7, #240	; 0xf0
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40013000 	.word	0x40013000
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58020400 	.word	0x58020400
 80033e4:	40003800 	.word	0x40003800

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a46      	ldr	r2, [pc, #280]	; (8003510 <HAL_TIM_Base_MspInit+0x128>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d12f      	bne.n	800345a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80033fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003400:	4a44      	ldr	r2, [pc, #272]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800340a:	4b42      	ldr	r3, [pc, #264]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 800340c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2105      	movs	r1, #5
 800341c:	2018      	movs	r0, #24
 800341e:	f002 f95b 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003422:	2018      	movs	r0, #24
 8003424:	f002 f972 	bl	800570c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2105      	movs	r1, #5
 800342c:	2019      	movs	r0, #25
 800342e:	f002 f953 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003432:	2019      	movs	r0, #25
 8003434:	f002 f96a 	bl	800570c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2105      	movs	r1, #5
 800343c:	201a      	movs	r0, #26
 800343e:	f002 f94b 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003442:	201a      	movs	r0, #26
 8003444:	f002 f962 	bl	800570c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2105      	movs	r1, #5
 800344c:	201b      	movs	r0, #27
 800344e:	f002 f943 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003452:	201b      	movs	r0, #27
 8003454:	f002 f95a 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003458:	e055      	b.n	8003506 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d117      	bne.n	8003494 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 8003466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800346a:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 800346c:	f043 0301 	orr.w	r3, r3, #1
 8003470:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003474:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 8003476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	2105      	movs	r1, #5
 8003486:	201c      	movs	r0, #28
 8003488:	f002 f926 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800348c:	201c      	movs	r0, #28
 800348e:	f002 f93d 	bl	800570c <HAL_NVIC_EnableIRQ>
}
 8003492:	e038      	b.n	8003506 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_TIM_Base_MspInit+0x130>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d117      	bne.n	80034ce <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a4:	4a1b      	ldr	r2, [pc, #108]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034a6:	f043 0302 	orr.w	r3, r3, #2
 80034aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	2105      	movs	r1, #5
 80034c0:	201d      	movs	r0, #29
 80034c2:	f002 f909 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034c6:	201d      	movs	r0, #29
 80034c8:	f002 f920 	bl	800570c <HAL_NVIC_EnableIRQ>
}
 80034cc:	e01b      	b.n	8003506 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a12      	ldr	r2, [pc, #72]	; (800351c <HAL_TIM_Base_MspInit+0x134>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d116      	bne.n	8003506 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <HAL_TIM_Base_MspInit+0x12c>)
 80034ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2105      	movs	r1, #5
 80034fa:	201e      	movs	r0, #30
 80034fc:	f002 f8ec 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003500:	201e      	movs	r0, #30
 8003502:	f002 f903 	bl	800570c <HAL_NVIC_EnableIRQ>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40010000 	.word	0x40010000
 8003514:	58024400 	.word	0x58024400
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800

08003520 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	; 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a26      	ldr	r2, [pc, #152]	; (80035d8 <HAL_TIM_MspPostInit+0xb8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d120      	bne.n	8003584 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	4b26      	ldr	r3, [pc, #152]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 8003544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 8003554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003566:	2302      	movs	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356e:	2300      	movs	r3, #0
 8003570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003572:	2301      	movs	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	4619      	mov	r1, r3
 800357c:	4818      	ldr	r0, [pc, #96]	; (80035e0 <HAL_TIM_MspPostInit+0xc0>)
 800357e:	f005 fb15 	bl	8008bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003582:	e024      	b.n	80035ce <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d11f      	bne.n	80035ce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 8003590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003594:	4a11      	ldr	r2, [pc, #68]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 8003596:	f043 0302 	orr.w	r3, r3, #2
 800359a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_TIM_MspPostInit+0xbc>)
 80035a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035be:	2301      	movs	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	4619      	mov	r1, r3
 80035c8:	4806      	ldr	r0, [pc, #24]	; (80035e4 <HAL_TIM_MspPostInit+0xc4>)
 80035ca:	f005 faef 	bl	8008bac <HAL_GPIO_Init>
}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40010000 	.word	0x40010000
 80035dc:	58024400 	.word	0x58024400
 80035e0:	58020000 	.word	0x58020000
 80035e4:	58020400 	.word	0x58020400

080035e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0ba      	sub	sp, #232	; 0xe8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	22c0      	movs	r2, #192	; 0xc0
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f012 ff6f 	bl	80164ec <memset>
  if(huart->Instance==USART1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a41      	ldr	r2, [pc, #260]	; (8003718 <HAL_UART_MspInit+0x130>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d17b      	bne.n	8003710 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003618:	f04f 0201 	mov.w	r2, #1
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003624:	2318      	movs	r3, #24
 8003626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800362a:	f107 0310 	add.w	r3, r7, #16
 800362e:	4618      	mov	r0, r3
 8003630:	f007 fb48 	bl	800acc4 <HAL_RCCEx_PeriphCLKConfig>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800363a:	f7ff fbc1 	bl	8002dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_UART_MspInit+0x134>)
 8003640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003644:	4a35      	ldr	r2, [pc, #212]	; (800371c <HAL_UART_MspInit+0x134>)
 8003646:	f043 0310 	orr.w	r3, r3, #16
 800364a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800364e:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_UART_MspInit+0x134>)
 8003650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_UART_MspInit+0x134>)
 800365e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003662:	4a2e      	ldr	r2, [pc, #184]	; (800371c <HAL_UART_MspInit+0x134>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366c:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_UART_MspInit+0x134>)
 800366e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800367a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003682:	2302      	movs	r3, #2
 8003684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003694:	2307      	movs	r3, #7
 8003696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800369e:	4619      	mov	r1, r3
 80036a0:	481f      	ldr	r0, [pc, #124]	; (8003720 <HAL_UART_MspInit+0x138>)
 80036a2:	f005 fa83 	bl	8008bac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_UART_MspInit+0x140>)
 80036aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80036ac:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036ae:	222a      	movs	r2, #42	; 0x2a
 80036b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b8:	4b1a      	ldr	r3, [pc, #104]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036c6:	4b17      	ldr	r3, [pc, #92]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036da:	2200      	movs	r2, #0
 80036dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80036e4:	480f      	ldr	r0, [pc, #60]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036e6:	f002 fc25 	bl	8005f34 <HAL_DMA_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80036f0:	f7ff fb66 	bl	8002dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <HAL_UART_MspInit+0x13c>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003700:	2200      	movs	r2, #0
 8003702:	2105      	movs	r1, #5
 8003704:	2025      	movs	r0, #37	; 0x25
 8003706:	f001 ffe7 	bl	80056d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800370a:	2025      	movs	r0, #37	; 0x25
 800370c:	f001 fffe 	bl	800570c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003710:	bf00      	nop
 8003712:	37e8      	adds	r7, #232	; 0xe8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40011000 	.word	0x40011000
 800371c:	58024400 	.word	0x58024400
 8003720:	58020000 	.word	0x58020000
 8003724:	240006cc 	.word	0x240006cc
 8003728:	40020040 	.word	0x40020040

0800372c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b090      	sub	sp, #64	; 0x40
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	d827      	bhi.n	800378a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800373a:	2200      	movs	r2, #0
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	2036      	movs	r0, #54	; 0x36
 8003740:	f001 ffca 	bl	80056d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003744:	2036      	movs	r0, #54	; 0x36
 8003746:	f001 ffe1 	bl	800570c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800374a:	4a29      	ldr	r2, [pc, #164]	; (80037f0 <HAL_InitTick+0xc4>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_InitTick+0xc8>)
 8003752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003756:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <HAL_InitTick+0xc8>)
 8003758:	f043 0310 	orr.w	r3, r3, #16
 800375c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003760:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <HAL_InitTick+0xc8>)
 8003762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800376e:	f107 0210 	add.w	r2, r7, #16
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f007 fa61 	bl	800ac40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_InitTick+0x6a>
 8003788:	e001      	b.n	800378e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e02b      	b.n	80037e6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800378e:	f007 fa2b 	bl	800abe8 <HAL_RCC_GetPCLK1Freq>
 8003792:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003794:	e004      	b.n	80037a0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003796:	f007 fa27 	bl	800abe8 <HAL_RCC_GetPCLK1Freq>
 800379a:	4603      	mov	r3, r0
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <HAL_InitTick+0xcc>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	0c9b      	lsrs	r3, r3, #18
 80037aa:	3b01      	subs	r3, #1
 80037ac:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <HAL_InitTick+0xd0>)
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <HAL_InitTick+0xd4>)
 80037b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <HAL_InitTick+0xd0>)
 80037b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_InitTick+0xd0>)
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_InitTick+0xd0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <HAL_InitTick+0xd0>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80037ce:	480b      	ldr	r0, [pc, #44]	; (80037fc <HAL_InitTick+0xd0>)
 80037d0:	f00a fee9 	bl	800e5a6 <HAL_TIM_Base_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80037da:	4808      	ldr	r0, [pc, #32]	; (80037fc <HAL_InitTick+0xd0>)
 80037dc:	f00a ff3a 	bl	800e654 <HAL_TIM_Base_Start_IT>
 80037e0:	4603      	mov	r3, r0
 80037e2:	e000      	b.n	80037e6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3740      	adds	r7, #64	; 0x40
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	24000098 	.word	0x24000098
 80037f4:	58024400 	.word	0x58024400
 80037f8:	431bde83 	.word	0x431bde83
 80037fc:	240010b8 	.word	0x240010b8
 8003800:	40001000 	.word	0x40001000

08003804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003808:	e7fe      	b.n	8003808 <NMI_Handler+0x4>

0800380a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380e:	e7fe      	b.n	800380e <HardFault_Handler+0x4>

08003810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003814:	e7fe      	b.n	8003814 <MemManage_Handler+0x4>

08003816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <BusFault_Handler+0x4>

0800381c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler+0x4>

08003822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream0_IRQHandler+0x10>)
 8003836:	f003 fea7 	bl	8007588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	24000204 	.word	0x24000204

08003844 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream1_IRQHandler+0x10>)
 800384a:	f003 fe9d 	bl	8007588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	2400027c 	.word	0x2400027c

08003858 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800385c:	4802      	ldr	r0, [pc, #8]	; (8003868 <DMA1_Stream2_IRQHandler+0x10>)
 800385e:	f003 fe93 	bl	8007588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	240006cc 	.word	0x240006cc

0800386c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <DMA1_Stream5_IRQHandler+0x10>)
 8003872:	f003 fe89 	bl	8007588 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	24000308 	.word	0x24000308

08003880 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <TIM1_BRK_IRQHandler+0x10>)
 8003886:	f00b f9fc 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	24000508 	.word	0x24000508

08003894 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <TIM1_UP_IRQHandler+0x10>)
 800389a:	f00b f9f2 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	24000508 	.word	0x24000508

080038a8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80038ae:	f00b f9e8 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	24000508 	.word	0x24000508

080038bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <TIM1_CC_IRQHandler+0x10>)
 80038c2:	f00b f9de 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	24000508 	.word	0x24000508

080038d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM2_IRQHandler+0x10>)
 80038d6:	f00b f9d4 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24000554 	.word	0x24000554

080038e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <TIM3_IRQHandler+0x10>)
 80038ea:	f00b f9ca 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	240005a0 	.word	0x240005a0

080038f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <TIM4_IRQHandler+0x10>)
 80038fe:	f00b f9c0 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	240005ec 	.word	0x240005ec

0800390c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <USART1_IRQHandler+0x10>)
 8003912:	f00c fcc3 	bl	801029c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	24000638 	.word	0x24000638

08003920 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <TIM6_DAC_IRQHandler+0x20>)
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <TIM6_DAC_IRQHandler+0x20>)
 8003930:	f002 f881 	bl	8005a36 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003934:	4803      	ldr	r0, [pc, #12]	; (8003944 <TIM6_DAC_IRQHandler+0x24>)
 8003936:	f00b f9a4 	bl	800ec82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	240002f4 	.word	0x240002f4
 8003944:	240010b8 	.word	0x240010b8

08003948 <ITM_SendChar>:
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	71fb      	strb	r3, [r7, #7]
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <ITM_SendChar+0x48>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <ITM_SendChar+0x48>)
 8003958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <ITM_SendChar+0x4c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <ITM_SendChar+0x4c>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	bf00      	nop
 800396c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f8      	beq.n	800396c <ITM_SendChar+0x24>
 800397a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000edfc 	.word	0xe000edfc
 8003994:	e0000e00 	.word	0xe0000e00

08003998 <_read>:
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e00a      	b.n	80039c0 <_read+0x28>
 80039aa:	f3af 8000 	nop.w
 80039ae:	4601      	mov	r1, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	b2ca      	uxtb	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf0      	blt.n	80039aa <_read+0x12>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_write>:
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e009      	b.n	80039f8 <_write+0x26>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	60ba      	str	r2, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ffab 	bl	8003948 <ITM_SendChar>
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	dbf1      	blt.n	80039e4 <_write+0x12>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_close>:
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_fstat>:
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_isatty>:
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_lseek>:
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <_sbrk>:
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <_sbrk+0x5c>)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <_sbrk+0x60>)
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <_sbrk+0x22>
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <_sbrk+0x64>)
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <_sbrk+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d207      	bcs.n	8003ab4 <_sbrk+0x40>
 8003aa4:	f012 fcda 	bl	801645c <__errno>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	220c      	movs	r2, #12
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab2:	e009      	b.n	8003ac8 <_sbrk+0x54>
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <_sbrk+0x64>)
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	24080000 	.word	0x24080000
 8003ad4:	00000400 	.word	0x00000400
 8003ad8:	24001104 	.word	0x24001104
 8003adc:	24005a70 	.word	0x24005a70

08003ae0 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003ae4:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <SystemInit+0xe4>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	4a36      	ldr	r2, [pc, #216]	; (8003bc4 <SystemInit+0xe4>)
 8003aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003af4:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <SystemInit+0xe8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d807      	bhi.n	8003b10 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b00:	4b31      	ldr	r3, [pc, #196]	; (8003bc8 <SystemInit+0xe8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 030f 	bic.w	r3, r3, #15
 8003b08:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <SystemInit+0xe8>)
 8003b0a:	f043 0307 	orr.w	r3, r3, #7
 8003b0e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <SystemInit+0xec>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <SystemInit+0xec>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <SystemInit+0xec>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003b22:	4b2a      	ldr	r3, [pc, #168]	; (8003bcc <SystemInit+0xec>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4929      	ldr	r1, [pc, #164]	; (8003bcc <SystemInit+0xec>)
 8003b28:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <SystemInit+0xf0>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <SystemInit+0xe8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003b3a:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <SystemInit+0xe8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 030f 	bic.w	r3, r3, #15
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <SystemInit+0xe8>)
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <SystemInit+0xec>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003b50:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <SystemInit+0xec>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <SystemInit+0xec>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <SystemInit+0xec>)
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <SystemInit+0xf4>)
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <SystemInit+0xec>)
 8003b64:	4a1c      	ldr	r2, [pc, #112]	; (8003bd8 <SystemInit+0xf8>)
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <SystemInit+0xec>)
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <SystemInit+0xfc>)
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <SystemInit+0xec>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <SystemInit+0xec>)
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <SystemInit+0xfc>)
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <SystemInit+0xec>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <SystemInit+0xec>)
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <SystemInit+0xfc>)
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <SystemInit+0xec>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <SystemInit+0xec>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <SystemInit+0xec>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <SystemInit+0xec>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <SystemInit+0x100>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <SystemInit+0x104>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003baa:	d202      	bcs.n	8003bb2 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003bac:	4b0e      	ldr	r3, [pc, #56]	; (8003be8 <SystemInit+0x108>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003bb2:	4b0e      	ldr	r3, [pc, #56]	; (8003bec <SystemInit+0x10c>)
 8003bb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003bb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003bba:	bf00      	nop
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00
 8003bc8:	52002000 	.word	0x52002000
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bd4:	02020200 	.word	0x02020200
 8003bd8:	01ff0000 	.word	0x01ff0000
 8003bdc:	01010280 	.word	0x01010280
 8003be0:	5c001000 	.word	0x5c001000
 8003be4:	ffff0000 	.word	0xffff0000
 8003be8:	51008108 	.word	0x51008108
 8003bec:	52004000 	.word	0x52004000

08003bf0 <Reset_Handler>:
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c28 <LoopFillZerobss+0xe>
 8003bf4:	f7ff ff74 	bl	8003ae0 <SystemInit>
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <LoopFillZerobss+0x12>)
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <LoopFillZerobss+0x16>)
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <LoopFillZerobss+0x1a>)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e002      	b.n	8003c08 <LoopCopyDataInit>

08003c02 <CopyDataInit>:
 8003c02:	58d4      	ldr	r4, [r2, r3]
 8003c04:	50c4      	str	r4, [r0, r3]
 8003c06:	3304      	adds	r3, #4

08003c08 <LoopCopyDataInit>:
 8003c08:	18c4      	adds	r4, r0, r3
 8003c0a:	428c      	cmp	r4, r1
 8003c0c:	d3f9      	bcc.n	8003c02 <CopyDataInit>
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <LoopFillZerobss+0x1e>)
 8003c10:	4c0a      	ldr	r4, [pc, #40]	; (8003c3c <LoopFillZerobss+0x22>)
 8003c12:	2300      	movs	r3, #0
 8003c14:	e001      	b.n	8003c1a <LoopFillZerobss>

08003c16 <FillZerobss>:
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	3204      	adds	r2, #4

08003c1a <LoopFillZerobss>:
 8003c1a:	42a2      	cmp	r2, r4
 8003c1c:	d3fb      	bcc.n	8003c16 <FillZerobss>
 8003c1e:	f012 fc23 	bl	8016468 <__libc_init_array>
 8003c22:	f7fd f951 	bl	8000ec8 <main>
 8003c26:	4770      	bx	lr
 8003c28:	24080000 	.word	0x24080000
 8003c2c:	24000000 	.word	0x24000000
 8003c30:	24000108 	.word	0x24000108
 8003c34:	08017368 	.word	0x08017368
 8003c38:	24000120 	.word	0x24000120
 8003c3c:	24005a6c 	.word	0x24005a6c

08003c40 <ADC3_IRQHandler>:
 8003c40:	e7fe      	b.n	8003c40 <ADC3_IRQHandler>
	...

08003c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4a:	2003      	movs	r0, #3
 8003c4c:	f001 fd39 	bl	80056c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c50:	f006 fe20 	bl	800a894 <HAL_RCC_GetSysClockFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_Init+0x68>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	4913      	ldr	r1, [pc, #76]	; (8003cb0 <HAL_Init+0x6c>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_Init+0x68>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HAL_Init+0x6c>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <HAL_Init+0x70>)
 8003c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_Init+0x74>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c8e:	2005      	movs	r0, #5
 8003c90:	f7ff fd4c 	bl	800372c <HAL_InitTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e002      	b.n	8003ca4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c9e:	f7ff f895 	bl	8002dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	080172b4 	.word	0x080172b4
 8003cb4:	24000094 	.word	0x24000094
 8003cb8:	24000090 	.word	0x24000090

08003cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_IncTick+0x20>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	2400009c 	.word	0x2400009c
 8003ce0:	24001108 	.word	0x24001108

08003ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_GetTick+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	24001108 	.word	0x24001108

08003cfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_GetREVID+0x14>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0c1b      	lsrs	r3, r3, #16
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	5c001000 	.word	0x5c001000

08003d14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	401a      	ands	r2, r3
 8003d28:	4904      	ldr	r1, [pc, #16]	; (8003d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	58000400 	.word	0x58000400

08003d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	611a      	str	r2, [r3, #16]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3360      	adds	r3, #96	; 0x60
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	601a      	str	r2, [r3, #0]
  }
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b087      	sub	sp, #28
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3330      	adds	r3, #48	; 0x30
 8003e86:	461a      	mov	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	4413      	add	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	211f      	movs	r1, #31
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0e9b      	lsrs	r3, r3, #26
 8003eae:	f003 011f 	and.w	r1, r3, #31
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f023 0203 	bic.w	r2, r3, #3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3314      	adds	r3, #20
 8003f04:	461a      	mov	r2, r3
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	0e5b      	lsrs	r3, r3, #25
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	4413      	add	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0d1b      	lsrs	r3, r3, #20
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	2107      	movs	r1, #7
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	401a      	ands	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	0d1b      	lsrs	r3, r3, #20
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0318 	and.w	r3, r3, #24
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f70:	40d9      	lsrs	r1, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	400b      	ands	r3, r1
 8003f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	000fffff 	.word	0x000fffff

08003f94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6093      	str	r3, [r2, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	5fffffc0 	.word	0x5fffffc0

08003fd4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe8:	d101      	bne.n	8003fee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <LL_ADC_EnableInternalRegulator+0x24>)
 800400a:	4013      	ands	r3, r2
 800400c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	6fffffc0 	.word	0x6fffffc0

08004024 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004038:	d101      	bne.n	800403e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <LL_ADC_Enable+0x24>)
 800405a:	4013      	ands	r3, r2
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	7fffffc0 	.word	0x7fffffc0

08004074 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <LL_ADC_Disable+0x24>)
 8004082:	4013      	ands	r3, r2
 8004084:	f043 0202 	orr.w	r2, r3, #2
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	7fffffc0 	.word	0x7fffffc0

0800409c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <LL_ADC_IsEnabled+0x18>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <LL_ADC_IsEnabled+0x1a>
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d101      	bne.n	80040da <LL_ADC_IsDisableOngoing+0x18>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <LL_ADC_IsDisableOngoing+0x1a>
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <LL_ADC_REG_StartConversion+0x24>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	7fffffc0 	.word	0x7fffffc0

08004110 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d101      	bne.n	8004128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b08      	cmp	r3, #8
 8004148:	d101      	bne.n	800414e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e18f      	b.n	8004496 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe fe3f 	bl	8002e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff19 	bl	8003fd4 <LL_ADC_IsDeepPowerDownEnabled>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d004      	beq.n	80041b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff feff 	bl	8003fb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff ff34 	bl	8004024 <LL_ADC_IsInternalRegulatorEnabled>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d114      	bne.n	80041ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ff18 	bl	8003ffc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041cc:	4b87      	ldr	r3, [pc, #540]	; (80043ec <HAL_ADC_Init+0x290>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	4a87      	ldr	r2, [pc, #540]	; (80043f0 <HAL_ADC_Init+0x294>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	3301      	adds	r3, #1
 80041dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041de:	e002      	b.n	80041e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f9      	bne.n	80041e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff ff17 	bl	8004024 <LL_ADC_IsInternalRegulatorEnabled>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0210 	orr.w	r2, r3, #16
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff77 	bl	8004110 <LL_ADC_REG_IsConversionOngoing>
 8004222:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f040 8129 	bne.w	8004484 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 8125 	bne.w	8004484 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff ff24 	bl	800409c <LL_ADC_IsEnabled>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d136      	bne.n	80042c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a65      	ldr	r2, [pc, #404]	; (80043f4 <HAL_ADC_Init+0x298>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_ADC_Init+0x112>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <HAL_ADC_Init+0x29c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10e      	bne.n	800428c <HAL_ADC_Init+0x130>
 800426e:	4861      	ldr	r0, [pc, #388]	; (80043f4 <HAL_ADC_Init+0x298>)
 8004270:	f7ff ff14 	bl	800409c <LL_ADC_IsEnabled>
 8004274:	4604      	mov	r4, r0
 8004276:	4860      	ldr	r0, [pc, #384]	; (80043f8 <HAL_ADC_Init+0x29c>)
 8004278:	f7ff ff10 	bl	800409c <LL_ADC_IsEnabled>
 800427c:	4603      	mov	r3, r0
 800427e:	4323      	orrs	r3, r4
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e008      	b.n	800429e <HAL_ADC_Init+0x142>
 800428c:	485b      	ldr	r0, [pc, #364]	; (80043fc <HAL_ADC_Init+0x2a0>)
 800428e:	f7ff ff05 	bl	800409c <LL_ADC_IsEnabled>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a53      	ldr	r2, [pc, #332]	; (80043f4 <HAL_ADC_Init+0x298>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_ADC_Init+0x15a>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a51      	ldr	r2, [pc, #324]	; (80043f8 <HAL_ADC_Init+0x29c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_Init+0x15e>
 80042b6:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_ADC_Init+0x2a4>)
 80042b8:	e000      	b.n	80042bc <HAL_ADC_Init+0x160>
 80042ba:	4a52      	ldr	r2, [pc, #328]	; (8004404 <HAL_ADC_Init+0x2a8>)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7ff fd3c 	bl	8003d40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80042c8:	f7ff fd18 	bl	8003cfc <HAL_GetREVID>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d914      	bls.n	8004300 <HAL_ADC_Init+0x1a4>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d110      	bne.n	8004300 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7d5b      	ldrb	r3, [r3, #21]
 80042e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80042ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	7f1b      	ldrb	r3, [r3, #28]
 80042f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80042f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042f8:	f043 030c 	orr.w	r3, r3, #12
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e00d      	b.n	800431c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7d5b      	ldrb	r3, [r3, #21]
 8004304:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800430a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004310:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7f1b      	ldrb	r3, [r3, #28]
 8004316:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004318:	4313      	orrs	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7f1b      	ldrb	r3, [r3, #28]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d106      	bne.n	8004332 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	3b01      	subs	r3, #1
 800432a:	045b      	lsls	r3, r3, #17
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_ADC_Init+0x2ac>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	69b9      	ldr	r1, [r7, #24]
 800435e:	430b      	orrs	r3, r1
 8004360:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fed2 	bl	8004110 <LL_ADC_REG_IsConversionOngoing>
 800436c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fedf 	bl	8004136 <LL_ADC_INJ_IsConversionOngoing>
 8004378:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d15f      	bne.n	8004440 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d15c      	bne.n	8004440 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7d1b      	ldrb	r3, [r3, #20]
 800438a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	4b1c      	ldr	r3, [pc, #112]	; (800440c <HAL_ADC_Init+0x2b0>)
 800439c:	4013      	ands	r3, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	69b9      	ldr	r1, [r7, #24]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d130      	bne.n	8004414 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <HAL_ADC_Init+0x2b4>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c6:	3a01      	subs	r2, #1
 80043c8:	0411      	lsls	r1, r2, #16
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043d4:	4311      	orrs	r1, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043da:	430a      	orrs	r2, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	611a      	str	r2, [r3, #16]
 80043e8:	e01c      	b.n	8004424 <HAL_ADC_Init+0x2c8>
 80043ea:	bf00      	nop
 80043ec:	24000090 	.word	0x24000090
 80043f0:	053e2d63 	.word	0x053e2d63
 80043f4:	40022000 	.word	0x40022000
 80043f8:	40022100 	.word	0x40022100
 80043fc:	58026000 	.word	0x58026000
 8004400:	40022300 	.word	0x40022300
 8004404:	58026300 	.word	0x58026300
 8004408:	fff0c003 	.word	0xfff0c003
 800440c:	ffffbffc 	.word	0xffffbffc
 8004410:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691a      	ldr	r2, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fdec 	bl	8005018 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10c      	bne.n	8004462 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f023 010f 	bic.w	r1, r3, #15
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	1e5a      	subs	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
 8004460:	e007      	b.n	8004472 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 020f 	bic.w	r2, r2, #15
 8004470:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
 8004482:	e007      	b.n	8004494 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004494:	7ffb      	ldrb	r3, [r7, #31]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	; 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop

080044a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a55      	ldr	r2, [pc, #340]	; (8004608 <HAL_ADC_Start_DMA+0x168>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_ADC_Start_DMA+0x20>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a54      	ldr	r2, [pc, #336]	; (800460c <HAL_ADC_Start_DMA+0x16c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_Start_DMA+0x24>
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_ADC_Start_DMA+0x170>)
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_Start_DMA+0x26>
 80044c4:	4b53      	ldr	r3, [pc, #332]	; (8004614 <HAL_ADC_Start_DMA+0x174>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fd64 	bl	8003f94 <LL_ADC_GetMultimode>
 80044cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fe1c 	bl	8004110 <LL_ADC_REG_IsConversionOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 808c 	bne.w	80045f8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Start_DMA+0x4e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e087      	b.n	80045fe <HAL_ADC_Start_DMA+0x15e>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d002      	beq.n	8004508 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b09      	cmp	r3, #9
 8004506:	d170      	bne.n	80045ea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fc07 	bl	8004d1c <ADC_Enable>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d163      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800451c:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_ADC_Start_DMA+0x178>)
 800451e:	4013      	ands	r3, r2
 8004520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a37      	ldr	r2, [pc, #220]	; (800460c <HAL_ADC_Start_DMA+0x16c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d002      	beq.n	8004538 <HAL_ADC_Start_DMA+0x98>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	e000      	b.n	800453a <HAL_ADC_Start_DMA+0x9a>
 8004538:	4b33      	ldr	r3, [pc, #204]	; (8004608 <HAL_ADC_Start_DMA+0x168>)
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	4293      	cmp	r3, r2
 8004540:	d002      	beq.n	8004548 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d105      	bne.n	8004554 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	f023 0206 	bic.w	r2, r3, #6
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	659a      	str	r2, [r3, #88]	; 0x58
 800456c:	e002      	b.n	8004574 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004578:	4a28      	ldr	r2, [pc, #160]	; (800461c <HAL_ADC_Start_DMA+0x17c>)
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <HAL_ADC_Start_DMA+0x180>)
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	4a26      	ldr	r2, [pc, #152]	; (8004624 <HAL_ADC_Start_DMA+0x184>)
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	221c      	movs	r2, #28
 8004592:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 0210 	orr.w	r2, r2, #16
 80045aa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7ff fc89 	bl	8003ece <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3340      	adds	r3, #64	; 0x40
 80045c6:	4619      	mov	r1, r3
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f002 f80e 	bl	80065ec <HAL_DMA_Start_IT>
 80045d0:	4603      	mov	r3, r0
 80045d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fd85 	bl	80040e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045de:	e00d      	b.n	80045fc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80045e8:	e008      	b.n	80045fc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80045f6:	e001      	b.n	80045fc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
 80045fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40022000 	.word	0x40022000
 800460c:	40022100 	.word	0x40022100
 8004610:	40022300 	.word	0x40022300
 8004614:	58026300 	.word	0x58026300
 8004618:	fffff0fe 	.word	0xfffff0fe
 800461c:	08004eef 	.word	0x08004eef
 8004620:	08004fc7 	.word	0x08004fc7
 8004624:	08004fe3 	.word	0x08004fe3

08004628 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b0a1      	sub	sp, #132	; 0x84
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4a65      	ldr	r2, [pc, #404]	; (8004814 <HAL_ADC_ConfigChannel+0x1b0>)
 800467e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_ADC_ConfigChannel+0x2a>
 800468a:	2302      	movs	r3, #2
 800468c:	e32e      	b.n	8004cec <HAL_ADC_ConfigChannel+0x688>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fd38 	bl	8004110 <LL_ADC_REG_IsConversionOngoing>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 8313 	bne.w	8004cce <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db2c      	blt.n	800470a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x6a>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0e9b      	lsrs	r3, r3, #26
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	e016      	b.n	80046fc <HAL_ADC_ConfigChannel+0x98>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80046e6:	2320      	movs	r3, #32
 80046e8:	e003      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80046ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	69d1      	ldr	r1, [r2, #28]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	430b      	orrs	r3, r1
 8004708:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f7ff fbad 	bl	8003e76 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff fcf5 	bl	8004110 <LL_ADC_REG_IsConversionOngoing>
 8004726:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fd02 	bl	8004136 <LL_ADC_INJ_IsConversionOngoing>
 8004732:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 80b8 	bne.w	80048ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800473c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 80b4 	bne.w	80048ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	461a      	mov	r2, r3
 8004752:	f7ff fbcf 	bl	8003ef4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_ADC_ConfigChannel+0x1b4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800475e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004762:	d10b      	bne.n	800477c <HAL_ADC_ConfigChannel+0x118>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	089b      	lsrs	r3, r3, #2
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	e01d      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x154>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x13e>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	e00a      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x154>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d02c      	beq.n	800481c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6919      	ldr	r1, [r3, #16]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d0:	f7ff faea 	bl	8003da8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	6919      	ldr	r1, [r3, #16]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	7e5b      	ldrb	r3, [r3, #25]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x186>
 80047e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047e8:	e000      	b.n	80047ec <HAL_ADC_ConfigChannel+0x188>
 80047ea:	2300      	movs	r3, #0
 80047ec:	461a      	mov	r2, r3
 80047ee:	f7ff fb14 	bl	8003e1a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6818      	ldr	r0, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	6919      	ldr	r1, [r3, #16]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	7e1b      	ldrb	r3, [r3, #24]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x1a4>
 8004802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004806:	e000      	b.n	800480a <HAL_ADC_ConfigChannel+0x1a6>
 8004808:	2300      	movs	r3, #0
 800480a:	461a      	mov	r2, r3
 800480c:	f7ff faec 	bl	8003de8 <LL_ADC_SetDataRightShift>
 8004810:	e04c      	b.n	80048ac <HAL_ADC_ConfigChannel+0x248>
 8004812:	bf00      	nop
 8004814:	47ff0000 	.word	0x47ff0000
 8004818:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	069b      	lsls	r3, r3, #26
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800483e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	069b      	lsls	r3, r3, #26
 8004850:	429a      	cmp	r2, r3
 8004852:	d107      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004862:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800486a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	069b      	lsls	r3, r3, #26
 8004874:	429a      	cmp	r2, r3
 8004876:	d107      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004886:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	069b      	lsls	r3, r3, #26
 8004898:	429a      	cmp	r2, r3
 800489a:	d107      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fbf3 	bl	800409c <LL_ADC_IsEnabled>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f040 8211 	bne.w	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f7ff fb3e 	bl	8003f4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4aa1      	ldr	r2, [pc, #644]	; (8004b5c <HAL_ADC_ConfigChannel+0x4f8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f040 812e 	bne.w	8004b38 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x2a0>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	3301      	adds	r3, #1
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	bf94      	ite	ls
 80048fc:	2301      	movls	r3, #1
 80048fe:	2300      	movhi	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e019      	b.n	8004938 <HAL_ADC_ConfigChannel+0x2d4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800490c:	fa93 f3a3 	rbit	r3, r3
 8004910:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e003      	b.n	8004928 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	3301      	adds	r3, #1
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b09      	cmp	r3, #9
 8004930:	bf94      	ite	ls
 8004932:	2301      	movls	r3, #1
 8004934:	2300      	movhi	r3, #0
 8004936:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004938:	2b00      	cmp	r3, #0
 800493a:	d079      	beq.n	8004a30 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x2f4>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	069b      	lsls	r3, r3, #26
 8004952:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004956:	e015      	b.n	8004984 <HAL_ADC_ConfigChannel+0x320>
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	fa93 f3a3 	rbit	r3, r3
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004970:	2320      	movs	r3, #32
 8004972:	e003      	b.n	800497c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004976:	fab3 f383 	clz	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	3301      	adds	r3, #1
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_ADC_ConfigChannel+0x340>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	3301      	adds	r3, #1
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	e017      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x370>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ac:	fa93 f3a3 	rbit	r3, r3
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80049bc:	2320      	movs	r3, #32
 80049be:	e003      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	3301      	adds	r3, #1
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	ea42 0103 	orr.w	r1, r2, r3
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x396>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	3301      	adds	r3, #1
 80049ec:	f003 021f 	and.w	r2, r3, #31
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	051b      	lsls	r3, r3, #20
 80049f8:	e018      	b.n	8004a2c <HAL_ADC_ConfigChannel+0x3c8>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	fa93 f3a3 	rbit	r3, r3
 8004a06:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e003      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f003 021f 	and.w	r2, r3, #31
 8004a24:	4613      	mov	r3, r2
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4413      	add	r3, r2
 8004a2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	e07e      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x3e8>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	069b      	lsls	r3, r3, #26
 8004a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4a:	e015      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x414>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004a64:	2320      	movs	r3, #32
 8004a66:	e003      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3301      	adds	r3, #1
 8004a72:	069b      	lsls	r3, r3, #26
 8004a74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x434>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	2101      	movs	r1, #1
 8004a92:	fa01 f303 	lsl.w	r3, r1, r3
 8004a96:	e017      	b.n	8004ac8 <HAL_ADC_ConfigChannel+0x464>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	61bb      	str	r3, [r7, #24]
  return result;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	e003      	b.n	8004abc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	3301      	adds	r3, #1
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x490>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0e9b      	lsrs	r3, r3, #26
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	3b1e      	subs	r3, #30
 8004aec:	051b      	lsls	r3, r3, #20
 8004aee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004af2:	e01b      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x4c8>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	fa93 f3a3 	rbit	r3, r3
 8004b00:	60fb      	str	r3, [r7, #12]
  return result;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004b0c:	2320      	movs	r3, #32
 8004b0e:	e003      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	3301      	adds	r3, #1
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	3b1e      	subs	r3, #30
 8004b26:	051b      	lsls	r3, r3, #20
 8004b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	4619      	mov	r1, r3
 8004b34:	f7ff f9de 	bl	8003ef4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f280 80cf 	bge.w	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <HAL_ADC_ConfigChannel+0x4fc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d004      	beq.n	8004b56 <HAL_ADC_ConfigChannel+0x4f2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_ADC_ConfigChannel+0x500>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10a      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x508>
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_ADC_ConfigChannel+0x504>)
 8004b58:	e009      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x50a>
 8004b5a:	bf00      	nop
 8004b5c:	47ff0000 	.word	0x47ff0000
 8004b60:	40022000 	.word	0x40022000
 8004b64:	40022100 	.word	0x40022100
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <HAL_ADC_ConfigChannel+0x690>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff f90c 	bl	8003d8c <LL_ADC_GetCommonPathInternalCh>
 8004b74:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a5f      	ldr	r2, [pc, #380]	; (8004cf8 <HAL_ADC_ConfigChannel+0x694>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_ConfigChannel+0x526>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_ADC_ConfigChannel+0x698>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10e      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x544>
 8004b8a:	485b      	ldr	r0, [pc, #364]	; (8004cf8 <HAL_ADC_ConfigChannel+0x694>)
 8004b8c:	f7ff fa86 	bl	800409c <LL_ADC_IsEnabled>
 8004b90:	4604      	mov	r4, r0
 8004b92:	485a      	ldr	r0, [pc, #360]	; (8004cfc <HAL_ADC_ConfigChannel+0x698>)
 8004b94:	f7ff fa82 	bl	800409c <LL_ADC_IsEnabled>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4323      	orrs	r3, r4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e008      	b.n	8004bba <HAL_ADC_ConfigChannel+0x556>
 8004ba8:	4855      	ldr	r0, [pc, #340]	; (8004d00 <HAL_ADC_ConfigChannel+0x69c>)
 8004baa:	f7ff fa77 	bl	800409c <LL_ADC_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d07d      	beq.n	8004cba <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a50      	ldr	r2, [pc, #320]	; (8004d04 <HAL_ADC_ConfigChannel+0x6a0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d130      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x5c6>
 8004bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d12b      	bne.n	8004c2a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4a      	ldr	r2, [pc, #296]	; (8004d00 <HAL_ADC_ConfigChannel+0x69c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	f040 8081 	bne.w	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a45      	ldr	r2, [pc, #276]	; (8004cf8 <HAL_ADC_ConfigChannel+0x694>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_ADC_ConfigChannel+0x58e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a43      	ldr	r2, [pc, #268]	; (8004cfc <HAL_ADC_ConfigChannel+0x698>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d101      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x592>
 8004bf2:	4a45      	ldr	r2, [pc, #276]	; (8004d08 <HAL_ADC_ConfigChannel+0x6a4>)
 8004bf4:	e000      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x594>
 8004bf6:	4a3f      	ldr	r2, [pc, #252]	; (8004cf4 <HAL_ADC_ConfigChannel+0x690>)
 8004bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7ff f8b0 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c06:	4b41      	ldr	r3, [pc, #260]	; (8004d0c <HAL_ADC_ConfigChannel+0x6a8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	099b      	lsrs	r3, r3, #6
 8004c0c:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <HAL_ADC_ConfigChannel+0x6ac>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	099b      	lsrs	r3, r3, #6
 8004c14:	3301      	adds	r3, #1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c1a:	e002      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c28:	e05a      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_ADC_ConfigChannel+0x6b0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d11e      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x60e>
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <HAL_ADC_ConfigChannel+0x69c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d14b      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <HAL_ADC_ConfigChannel+0x694>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_ADC_ConfigChannel+0x5f8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a29      	ldr	r2, [pc, #164]	; (8004cfc <HAL_ADC_ConfigChannel+0x698>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x5fc>
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <HAL_ADC_ConfigChannel+0x6a4>)
 8004c5e:	e000      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x5fe>
 8004c60:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_ADC_ConfigChannel+0x690>)
 8004c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7ff f87b 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c70:	e036      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <HAL_ADC_ConfigChannel+0x6b4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d131      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d12c      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a1d      	ldr	r2, [pc, #116]	; (8004d00 <HAL_ADC_ConfigChannel+0x69c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d127      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_ADC_ConfigChannel+0x694>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <HAL_ADC_ConfigChannel+0x640>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <HAL_ADC_ConfigChannel+0x698>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d101      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x644>
 8004ca4:	4a18      	ldr	r2, [pc, #96]	; (8004d08 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ca6:	e000      	b.n	8004caa <HAL_ADC_ConfigChannel+0x646>
 8004ca8:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <HAL_ADC_ConfigChannel+0x690>)
 8004caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7ff f857 	bl	8003d66 <LL_ADC_SetCommonPathInternalCh>
 8004cb8:	e012      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004ccc:	e008      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f043 0220 	orr.w	r2, r3, #32
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ce8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3784      	adds	r7, #132	; 0x84
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	58026300 	.word	0x58026300
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40022100 	.word	0x40022100
 8004d00:	58026000 	.word	0x58026000
 8004d04:	cb840000 	.word	0xcb840000
 8004d08:	40022300 	.word	0x40022300
 8004d0c:	24000090 	.word	0x24000090
 8004d10:	053e2d63 	.word	0x053e2d63
 8004d14:	c7520000 	.word	0xc7520000
 8004d18:	cfb80000 	.word	0xcfb80000

08004d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff f9b7 	bl	800409c <LL_ADC_IsEnabled>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d16e      	bne.n	8004e12 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <ADC_Enable+0x100>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d46:	f043 0210 	orr.w	r2, r3, #16
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	f043 0201 	orr.w	r2, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e05a      	b.n	8004e14 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f972 	bl	800404c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d68:	f7fe ffbc 	bl	8003ce4 <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a2b      	ldr	r2, [pc, #172]	; (8004e20 <ADC_Enable+0x104>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <ADC_Enable+0x66>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a29      	ldr	r2, [pc, #164]	; (8004e24 <ADC_Enable+0x108>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <ADC_Enable+0x6a>
 8004d82:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <ADC_Enable+0x10c>)
 8004d84:	e000      	b.n	8004d88 <ADC_Enable+0x6c>
 8004d86:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <ADC_Enable+0x110>)
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff f903 	bl	8003f94 <LL_ADC_GetMultimode>
 8004d8e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <ADC_Enable+0x108>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d002      	beq.n	8004da0 <ADC_Enable+0x84>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	e000      	b.n	8004da2 <ADC_Enable+0x86>
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <ADC_Enable+0x104>)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d02c      	beq.n	8004e04 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d130      	bne.n	8004e12 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004db0:	e028      	b.n	8004e04 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f970 	bl	800409c <LL_ADC_IsEnabled>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f940 	bl	800404c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dcc:	f7fe ff8a 	bl	8003ce4 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d914      	bls.n	8004e04 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d00d      	beq.n	8004e04 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	f043 0201 	orr.w	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e007      	b.n	8004e14 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d1cf      	bne.n	8004db2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	8000003f 	.word	0x8000003f
 8004e20:	40022000 	.word	0x40022000
 8004e24:	40022100 	.word	0x40022100
 8004e28:	40022300 	.word	0x40022300
 8004e2c:	58026300 	.word	0x58026300

08004e30 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f940 	bl	80040c2 <LL_ADC_IsDisableOngoing>
 8004e42:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff f927 	bl	800409c <LL_ADC_IsEnabled>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d047      	beq.n	8004ee4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d144      	bne.n	8004ee4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030d 	and.w	r3, r3, #13
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10c      	bne.n	8004e82 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff f901 	bl	8004074 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2203      	movs	r2, #3
 8004e78:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e7a:	f7fe ff33 	bl	8003ce4 <HAL_GetTick>
 8004e7e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e80:	e029      	b.n	8004ed6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	f043 0210 	orr.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e023      	b.n	8004ee6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e9e:	f7fe ff21 	bl	8003ce4 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d914      	bls.n	8004ed6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebe:	f043 0210 	orr.w	r2, r3, #16
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e007      	b.n	8004ee6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1dc      	bne.n	8004e9e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d14b      	bne.n	8004fa0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d021      	beq.n	8004f66 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe ff92 	bl	8003e50 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d032      	beq.n	8004f98 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d12b      	bne.n	8004f98 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11f      	bne.n	8004f98 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	f043 0201 	orr.w	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	655a      	str	r2, [r3, #84]	; 0x54
 8004f64:	e018      	b.n	8004f98 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d111      	bne.n	8004f98 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f90:	f043 0201 	orr.w	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fb45 	bl	8004628 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004f9e:	e00e      	b.n	8004fbe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff fb4f 	bl	8004650 <HAL_ADC_ErrorCallback>
}
 8004fb2:	e004      	b.n	8004fbe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	4798      	blx	r3
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fb31 	bl	800463c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff fb21 	bl	8004650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a7a      	ldr	r2, [pc, #488]	; (8005210 <ADC_ConfigureBoostMode+0x1f8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <ADC_ConfigureBoostMode+0x1c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a79      	ldr	r2, [pc, #484]	; (8005214 <ADC_ConfigureBoostMode+0x1fc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d109      	bne.n	8005048 <ADC_ConfigureBoostMode+0x30>
 8005034:	4b78      	ldr	r3, [pc, #480]	; (8005218 <ADC_ConfigureBoostMode+0x200>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	e008      	b.n	800505a <ADC_ConfigureBoostMode+0x42>
 8005048:	4b74      	ldr	r3, [pc, #464]	; (800521c <ADC_ConfigureBoostMode+0x204>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf14      	ite	ne
 8005054:	2301      	movne	r3, #1
 8005056:	2300      	moveq	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01c      	beq.n	8005098 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800505e:	f005 fd93 	bl	800ab88 <HAL_RCC_GetHCLKFreq>
 8005062:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800506c:	d010      	beq.n	8005090 <ADC_ConfigureBoostMode+0x78>
 800506e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005072:	d873      	bhi.n	800515c <ADC_ConfigureBoostMode+0x144>
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d002      	beq.n	8005080 <ADC_ConfigureBoostMode+0x68>
 800507a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800507e:	d16d      	bne.n	800515c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	fbb2 f3f3 	udiv	r3, r2, r3
 800508c:	60fb      	str	r3, [r7, #12]
        break;
 800508e:	e068      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	60fb      	str	r3, [r7, #12]
        break;
 8005096:	e064      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005098:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800509c:	f04f 0100 	mov.w	r1, #0
 80050a0:	f007 f81a 	bl	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq>
 80050a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050ae:	d051      	beq.n	8005154 <ADC_ConfigureBoostMode+0x13c>
 80050b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80050b4:	d854      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050ba:	d047      	beq.n	800514c <ADC_ConfigureBoostMode+0x134>
 80050bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80050c0:	d84e      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050c6:	d03d      	beq.n	8005144 <ADC_ConfigureBoostMode+0x12c>
 80050c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80050cc:	d848      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d2:	d033      	beq.n	800513c <ADC_ConfigureBoostMode+0x124>
 80050d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d8:	d842      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050de:	d029      	beq.n	8005134 <ADC_ConfigureBoostMode+0x11c>
 80050e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80050e4:	d83c      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050ea:	d01a      	beq.n	8005122 <ADC_ConfigureBoostMode+0x10a>
 80050ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80050f0:	d836      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050f6:	d014      	beq.n	8005122 <ADC_ConfigureBoostMode+0x10a>
 80050f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80050fc:	d830      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 80050fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005102:	d00e      	beq.n	8005122 <ADC_ConfigureBoostMode+0x10a>
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d82a      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 800510a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800510e:	d008      	beq.n	8005122 <ADC_ConfigureBoostMode+0x10a>
 8005110:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005114:	d824      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x148>
 8005116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800511a:	d002      	beq.n	8005122 <ADC_ConfigureBoostMode+0x10a>
 800511c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005120:	d11e      	bne.n	8005160 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	0c9b      	lsrs	r3, r3, #18
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	60fb      	str	r3, [r7, #12]
        break;
 8005132:	e016      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
        break;
 800513a:	e012      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	60fb      	str	r3, [r7, #12]
        break;
 8005142:	e00e      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	60fb      	str	r3, [r7, #12]
        break;
 800514a:	e00a      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	09db      	lsrs	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
        break;
 8005152:	e006      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	60fb      	str	r3, [r7, #12]
        break;
 800515a:	e002      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
        break;
 800515c:	bf00      	nop
 800515e:	e000      	b.n	8005162 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005160:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005162:	f7fe fdcb 	bl	8003cfc <HAL_GetREVID>
 8005166:	4603      	mov	r3, r0
 8005168:	f241 0203 	movw	r2, #4099	; 0x1003
 800516c:	4293      	cmp	r3, r2
 800516e:	d815      	bhi.n	800519c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <ADC_ConfigureBoostMode+0x208>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d908      	bls.n	800518a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005186:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005188:	e03e      	b.n	8005208 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005198:	609a      	str	r2, [r3, #8]
}
 800519a:	e035      	b.n	8005208 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <ADC_ConfigureBoostMode+0x20c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d808      	bhi.n	80051bc <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051b8:	609a      	str	r2, [r3, #8]
}
 80051ba:	e025      	b.n	8005208 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <ADC_ConfigureBoostMode+0x210>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d80a      	bhi.n	80051da <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	e016      	b.n	8005208 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <ADC_ConfigureBoostMode+0x214>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d80a      	bhi.n	80051f8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	609a      	str	r2, [r3, #8]
}
 80051f6:	e007      	b.n	8005208 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005206:	609a      	str	r2, [r3, #8]
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40022000 	.word	0x40022000
 8005214:	40022100 	.word	0x40022100
 8005218:	40022300 	.word	0x40022300
 800521c:	58026300 	.word	0x58026300
 8005220:	01312d00 	.word	0x01312d00
 8005224:	005f5e10 	.word	0x005f5e10
 8005228:	00bebc20 	.word	0x00bebc20
 800522c:	017d7840 	.word	0x017d7840

08005230 <LL_ADC_IsEnabled>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <LL_ADC_IsEnabled+0x18>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_ADC_IsEnabled+0x1a>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <LL_ADC_StartCalibration>:
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	4b09      	ldr	r3, [pc, #36]	; (8005290 <LL_ADC_StartCalibration+0x38>)
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005278:	430a      	orrs	r2, r1
 800527a:	4313      	orrs	r3, r2
 800527c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	3ffeffc0 	.word	0x3ffeffc0

08005294 <LL_ADC_IsCalibrationOnGoing>:
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a8:	d101      	bne.n	80052ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <LL_ADC_REG_IsConversionOngoing>:
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d101      	bne.n	80052d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_ADCEx_Calibration_Start+0x1e>
 80052fe:	2302      	movs	r3, #2
 8005300:	e04c      	b.n	800539c <HAL_ADCEx_Calibration_Start+0xb8>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f7ff fd90 	bl	8004e30 <ADC_Disable>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d135      	bne.n	8005386 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531e:	4b21      	ldr	r3, [pc, #132]	; (80053a4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005320:	4013      	ands	r3, r2
 8005322:	f043 0202 	orr.w	r2, r3, #2
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff ff90 	bl	8005258 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005338:	e014      	b.n	8005364 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3301      	adds	r3, #1
 800533e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d30d      	bcc.n	8005364 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f023 0312 	bic.w	r3, r3, #18
 8005350:	f043 0210 	orr.w	r2, r3, #16
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e01b      	b.n	800539c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff93 	bl	8005294 <LL_ADC_IsCalibrationOnGoing>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e2      	bne.n	800533a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	f043 0201 	orr.w	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
 8005384:	e005      	b.n	8005392 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f043 0210 	orr.w	r2, r3, #16
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800539a:	7dfb      	ldrb	r3, [r7, #23]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	ffffeefd 	.word	0xffffeefd
 80053a8:	25c3f800 	.word	0x25c3f800

080053ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b09f      	sub	sp, #124	; 0x7c
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d101      	bne.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80053c6:	2302      	movs	r3, #2
 80053c8:	e0be      	b.n	8005548 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80053d2:	2300      	movs	r3, #0
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5c      	ldr	r2, [pc, #368]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d102      	bne.n	80053ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053e4:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	e001      	b.n	80053ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e09d      	b.n	8005548 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ff54 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 8005414:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff ff4e 	bl	80052bc <LL_ADC_REG_IsConversionOngoing>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d17f      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005428:	2b00      	cmp	r3, #0
 800542a:	d17c      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a47      	ldr	r2, [pc, #284]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d101      	bne.n	8005444 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005442:	e000      	b.n	8005446 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005444:	4b45      	ldr	r3, [pc, #276]	; (800555c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005446:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d039      	beq.n	80054c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	431a      	orrs	r2, r3
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d004      	beq.n	8005476 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a38      	ldr	r2, [pc, #224]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d10e      	bne.n	8005494 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005476:	4836      	ldr	r0, [pc, #216]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005478:	f7ff feda 	bl	8005230 <LL_ADC_IsEnabled>
 800547c:	4604      	mov	r4, r0
 800547e:	4835      	ldr	r0, [pc, #212]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005480:	f7ff fed6 	bl	8005230 <LL_ADC_IsEnabled>
 8005484:	4603      	mov	r3, r0
 8005486:	4323      	orrs	r3, r4
 8005488:	2b00      	cmp	r3, #0
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e008      	b.n	80054a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005494:	4832      	ldr	r0, [pc, #200]	; (8005560 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005496:	f7ff fecb 	bl	8005230 <LL_ADC_IsEnabled>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d047      	beq.n	800553a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	6811      	ldr	r1, [r2, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	6892      	ldr	r2, [r2, #8]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	431a      	orrs	r2, r3
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054c2:	e03a      	b.n	800553a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80054c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1d      	ldr	r2, [pc, #116]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10e      	bne.n	8005502 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80054e4:	481a      	ldr	r0, [pc, #104]	; (8005550 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80054e6:	f7ff fea3 	bl	8005230 <LL_ADC_IsEnabled>
 80054ea:	4604      	mov	r4, r0
 80054ec:	4819      	ldr	r0, [pc, #100]	; (8005554 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80054ee:	f7ff fe9f 	bl	8005230 <LL_ADC_IsEnabled>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4323      	orrs	r3, r4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf0c      	ite	eq
 80054fa:	2301      	moveq	r3, #1
 80054fc:	2300      	movne	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e008      	b.n	8005514 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005502:	4817      	ldr	r0, [pc, #92]	; (8005560 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005504:	f7ff fe94 	bl	8005230 <LL_ADC_IsEnabled>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf0c      	ite	eq
 800550e:	2301      	moveq	r3, #1
 8005510:	2300      	movne	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d010      	beq.n	800553a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800551e:	4013      	ands	r3, r2
 8005520:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005522:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005524:	e009      	b.n	800553a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552a:	f043 0220 	orr.w	r2, r3, #32
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005538:	e000      	b.n	800553c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800553a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005544:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005548:	4618      	mov	r0, r3
 800554a:	377c      	adds	r7, #124	; 0x7c
 800554c:	46bd      	mov	sp, r7
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	40022000 	.word	0x40022000
 8005554:	40022100 	.word	0x40022100
 8005558:	40022300 	.word	0x40022300
 800555c:	58026300 	.word	0x58026300
 8005560:	58026000 	.word	0x58026000
 8005564:	fffff0e0 	.word	0xfffff0e0

08005568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <__NVIC_SetPriorityGrouping+0x40>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005584:	4013      	ands	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005596:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <__NVIC_SetPriorityGrouping+0x40>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	60d3      	str	r3, [r2, #12]
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	e000ed00 	.word	0xe000ed00
 80055ac:	05fa0000 	.word	0x05fa0000

080055b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <__NVIC_GetPriorityGrouping+0x18>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	0a1b      	lsrs	r3, r3, #8
 80055ba:	f003 0307 	and.w	r3, r3, #7
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80055d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	db0b      	blt.n	80055f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	f003 021f 	and.w	r2, r3, #31
 80055e4:	4907      	ldr	r1, [pc, #28]	; (8005604 <__NVIC_EnableIRQ+0x38>)
 80055e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2001      	movs	r0, #1
 80055ee:	fa00 f202 	lsl.w	r2, r0, r2
 80055f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	e000e100 	.word	0xe000e100

08005608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005614:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	db0a      	blt.n	8005632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	490c      	ldr	r1, [pc, #48]	; (8005654 <__NVIC_SetPriority+0x4c>)
 8005622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	440b      	add	r3, r1
 800562c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005630:	e00a      	b.n	8005648 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	4908      	ldr	r1, [pc, #32]	; (8005658 <__NVIC_SetPriority+0x50>)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	3b04      	subs	r3, #4
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	440b      	add	r3, r1
 8005646:	761a      	strb	r2, [r3, #24]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000e100 	.word	0xe000e100
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	; 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f1c3 0307 	rsb	r3, r3, #7
 8005676:	2b04      	cmp	r3, #4
 8005678:	bf28      	it	cs
 800567a:	2304      	movcs	r3, #4
 800567c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3304      	adds	r3, #4
 8005682:	2b06      	cmp	r3, #6
 8005684:	d902      	bls.n	800568c <NVIC_EncodePriority+0x30>
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3b03      	subs	r3, #3
 800568a:	e000      	b.n	800568e <NVIC_EncodePriority+0x32>
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	43da      	mvns	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	401a      	ands	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	43d9      	mvns	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056b4:	4313      	orrs	r3, r2
         );
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3724      	adds	r7, #36	; 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff4c 	bl	8005568 <__NVIC_SetPriorityGrouping>
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056e6:	f7ff ff63 	bl	80055b0 <__NVIC_GetPriorityGrouping>
 80056ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	6978      	ldr	r0, [r7, #20]
 80056f2:	f7ff ffb3 	bl	800565c <NVIC_EncodePriority>
 80056f6:	4602      	mov	r2, r0
 80056f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ff82 	bl	8005608 <__NVIC_SetPriority>
}
 8005704:	bf00      	nop
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff56 	bl	80055cc <__NVIC_EnableIRQ>
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e014      	b.n	8005764 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fd fc76 	bl	800303c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e046      	b.n	800580e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_DAC_Start+0x20>
 8005788:	2302      	movs	r3, #2
 800578a:	e040      	b.n	800580e <HAL_DAC_Start+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f003 0310 	and.w	r3, r3, #16
 80057a4:	2201      	movs	r2, #1
 80057a6:	409a      	lsls	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10f      	bne.n	80057d6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d11d      	bne.n	8005800 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	605a      	str	r2, [r3, #4]
 80057d4:	e014      	b.n	8005800 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2102      	movs	r1, #2
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d107      	bne.n	8005800 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0202 	orr.w	r2, r2, #2
 80057fe:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0a2      	b.n	800597a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	795b      	ldrb	r3, [r3, #5]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_DAC_Start_DMA+0x24>
 800583c:	2302      	movs	r3, #2
 800583e:	e09c      	b.n	800597a <HAL_DAC_Start_DMA+0x15e>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2202      	movs	r2, #2
 800584a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d129      	bne.n	80058a6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	4a4b      	ldr	r2, [pc, #300]	; (8005984 <HAL_DAC_Start_DMA+0x168>)
 8005858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a4a      	ldr	r2, [pc, #296]	; (8005988 <HAL_DAC_Start_DMA+0x16c>)
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	4a49      	ldr	r2, [pc, #292]	; (800598c <HAL_DAC_Start_DMA+0x170>)
 8005868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005878:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_DAC_Start_DMA+0x6c>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d005      	beq.n	8005892 <HAL_DAC_Start_DMA+0x76>
 8005886:	e009      	b.n	800589c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	613b      	str	r3, [r7, #16]
        break;
 8005890:	e033      	b.n	80058fa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	613b      	str	r3, [r7, #16]
        break;
 800589a:	e02e      	b.n	80058fa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3310      	adds	r3, #16
 80058a2:	613b      	str	r3, [r7, #16]
        break;
 80058a4:	e029      	b.n	80058fa <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4a39      	ldr	r2, [pc, #228]	; (8005990 <HAL_DAC_Start_DMA+0x174>)
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	4a38      	ldr	r2, [pc, #224]	; (8005994 <HAL_DAC_Start_DMA+0x178>)
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	4a37      	ldr	r2, [pc, #220]	; (8005998 <HAL_DAC_Start_DMA+0x17c>)
 80058bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058cc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_DAC_Start_DMA+0xc0>
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d005      	beq.n	80058e6 <HAL_DAC_Start_DMA+0xca>
 80058da:	e009      	b.n	80058f0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	613b      	str	r3, [r7, #16]
        break;
 80058e4:	e009      	b.n	80058fa <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3318      	adds	r3, #24
 80058ec:	613b      	str	r3, [r7, #16]
        break;
 80058ee:	e004      	b.n	80058fa <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	331c      	adds	r3, #28
 80058f6:	613b      	str	r3, [r7, #16]
        break;
 80058f8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d111      	bne.n	8005924 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800590e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6898      	ldr	r0, [r3, #8]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	f000 fe67 	bl	80065ec <HAL_DMA_Start_IT>
 800591e:	4603      	mov	r3, r0
 8005920:	75fb      	strb	r3, [r7, #23]
 8005922:	e010      	b.n	8005946 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005932:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68d8      	ldr	r0, [r3, #12]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	f000 fe55 	bl	80065ec <HAL_DMA_Start_IT>
 8005942:	4603      	mov	r3, r0
 8005944:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800594c:	7dfb      	ldrb	r3, [r7, #23]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6819      	ldr	r1, [r3, #0]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2201      	movs	r2, #1
 8005960:	409a      	lsls	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e005      	b.n	8005978 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f043 0204 	orr.w	r2, r3, #4
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	08005e0d 	.word	0x08005e0d
 8005988:	08005e2f 	.word	0x08005e2f
 800598c:	08005e4b 	.word	0x08005e4b
 8005990:	08005ec9 	.word	0x08005ec9
 8005994:	08005eeb 	.word	0x08005eeb
 8005998:	08005f07 	.word	0x08005f07

0800599c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e03e      	b.n	8005a2e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43da      	mvns	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	400a      	ands	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2201      	movs	r2, #1
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	43da      	mvns	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	400a      	ands	r2, r1
 80059e8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10d      	bne.n	8005a0c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f863 	bl	8006ac0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e00c      	b.n	8005a26 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f855 	bl	8006ac0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005a24:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b084      	sub	sp, #16
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01d      	beq.n	8005a94 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d018      	beq.n	8005a94 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2204      	movs	r2, #4
 8005a66:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f043 0201 	orr.w	r2, r3, #1
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a8c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f86f 	bl	8005b72 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01d      	beq.n	8005ada <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d018      	beq.n	8005ada <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f043 0202 	orr.w	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005ac2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9ed 	bl	8005eb4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e015      	b.n	8005b2a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3308      	adds	r3, #8
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e004      	b.n	8005b20 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	461a      	mov	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_DAC_ConfigChannel+0x1e>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e12a      	b.n	8005e00 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	795b      	ldrb	r3, [r3, #5]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_DAC_ConfigChannel+0x2e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e124      	b.n	8005e00 <HAL_DAC_ConfigChannel+0x278>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d17a      	bne.n	8005cc0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005bca:	f7fe f88b 	bl	8003ce4 <HAL_GetTick>
 8005bce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13d      	bne.n	8005c52 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005bd6:	e018      	b.n	8005c0a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005bd8:	f7fe f884 	bl	8003ce4 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d911      	bls.n	8005c0a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bec:	4b86      	ldr	r3, [pc, #536]	; (8005e08 <HAL_DAC_ConfigChannel+0x280>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f043 0208 	orr.w	r2, r3, #8
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2203      	movs	r2, #3
 8005c04:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e0fa      	b.n	8005e00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c10:	4b7d      	ldr	r3, [pc, #500]	; (8005e08 <HAL_DAC_ConfigChannel+0x280>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1df      	bne.n	8005bd8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	6992      	ldr	r2, [r2, #24]
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
 8005c22:	e020      	b.n	8005c66 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c24:	f7fe f85e 	bl	8003ce4 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d90f      	bls.n	8005c52 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da0a      	bge.n	8005c52 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	f043 0208 	orr.w	r2, r3, #8
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2203      	movs	r2, #3
 8005c4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0d6      	b.n	8005e00 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dbe3      	blt.n	8005c24 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	6992      	ldr	r2, [r2, #24]
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005c76:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	ea02 0103 	and.w	r1, r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	409a      	lsls	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	21ff      	movs	r1, #255	; 0xff
 8005ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	ea02 0103 	and.w	r1, r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0310 	and.w	r3, r3, #16
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d11d      	bne.n	8005d04 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	221f      	movs	r2, #31
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2207      	movs	r2, #7
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d102      	bne.n	8005d2e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2c:	e00f      	b.n	8005d4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d102      	bne.n	8005d3c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005d36:	2301      	movs	r3, #1
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	e008      	b.n	8005d4e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005d44:	2301      	movs	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
 8005d48:	e001      	b.n	8005d4e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43da      	mvns	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	400a      	ands	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	22c0      	movs	r2, #192	; 0xc0
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43da      	mvns	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	400a      	ands	r2, r1
 8005dee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3728      	adds	r7, #40	; 0x28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20008000 	.word	0x20008000

08005e0c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fe8b 	bl	8005b36 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	711a      	strb	r2, [r3, #4]
}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff fe84 	bl	8005b4a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f043 0204 	orr.w	r2, r3, #4
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f7ff fe7a 	bl	8005b5e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	711a      	strb	r2, [r3, #4]
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7ff ffce 	bl	8005e78 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	711a      	strb	r2, [r3, #4]
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ffc7 	bl	8005e8c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005efe:	bf00      	nop
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f043 0204 	orr.w	r2, r3, #4
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff ffbd 	bl	8005ea0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	711a      	strb	r2, [r3, #4]
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f3c:	f7fd fed2 	bl	8003ce4 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e316      	b.n	800657a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a66      	ldr	r2, [pc, #408]	; (80060ec <HAL_DMA_Init+0x1b8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04a      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_DMA_Init+0x1bc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d045      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a63      	ldr	r2, [pc, #396]	; (80060f4 <HAL_DMA_Init+0x1c0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d040      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a62      	ldr	r2, [pc, #392]	; (80060f8 <HAL_DMA_Init+0x1c4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d03b      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a60      	ldr	r2, [pc, #384]	; (80060fc <HAL_DMA_Init+0x1c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d036      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <HAL_DMA_Init+0x1cc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5d      	ldr	r2, [pc, #372]	; (8006104 <HAL_DMA_Init+0x1d0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5c      	ldr	r2, [pc, #368]	; (8006108 <HAL_DMA_Init+0x1d4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d027      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5a      	ldr	r2, [pc, #360]	; (800610c <HAL_DMA_Init+0x1d8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a59      	ldr	r2, [pc, #356]	; (8006110 <HAL_DMA_Init+0x1dc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a57      	ldr	r2, [pc, #348]	; (8006114 <HAL_DMA_Init+0x1e0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a56      	ldr	r2, [pc, #344]	; (8006118 <HAL_DMA_Init+0x1e4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a54      	ldr	r2, [pc, #336]	; (800611c <HAL_DMA_Init+0x1e8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a53      	ldr	r2, [pc, #332]	; (8006120 <HAL_DMA_Init+0x1ec>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a51      	ldr	r2, [pc, #324]	; (8006124 <HAL_DMA_Init+0x1f0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_Init+0xb8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a50      	ldr	r2, [pc, #320]	; (8006128 <HAL_DMA_Init+0x1f4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA_Init+0xbc>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_DMA_Init+0xbe>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 813b 	beq.w	800626e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a37      	ldr	r2, [pc, #220]	; (80060ec <HAL_DMA_Init+0x1b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d04a      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a36      	ldr	r2, [pc, #216]	; (80060f0 <HAL_DMA_Init+0x1bc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d045      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a34      	ldr	r2, [pc, #208]	; (80060f4 <HAL_DMA_Init+0x1c0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d040      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a33      	ldr	r2, [pc, #204]	; (80060f8 <HAL_DMA_Init+0x1c4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d03b      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a31      	ldr	r2, [pc, #196]	; (80060fc <HAL_DMA_Init+0x1c8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d036      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a30      	ldr	r2, [pc, #192]	; (8006100 <HAL_DMA_Init+0x1cc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d031      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2e      	ldr	r2, [pc, #184]	; (8006104 <HAL_DMA_Init+0x1d0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02c      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2d      	ldr	r2, [pc, #180]	; (8006108 <HAL_DMA_Init+0x1d4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d027      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <HAL_DMA_Init+0x1d8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d022      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <HAL_DMA_Init+0x1dc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d01d      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <HAL_DMA_Init+0x1e0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d018      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a27      	ldr	r2, [pc, #156]	; (8006118 <HAL_DMA_Init+0x1e4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d013      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a25      	ldr	r2, [pc, #148]	; (800611c <HAL_DMA_Init+0x1e8>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00e      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a24      	ldr	r2, [pc, #144]	; (8006120 <HAL_DMA_Init+0x1ec>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d009      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a22      	ldr	r2, [pc, #136]	; (8006124 <HAL_DMA_Init+0x1f0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d004      	beq.n	80060a8 <HAL_DMA_Init+0x174>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a21      	ldr	r2, [pc, #132]	; (8006128 <HAL_DMA_Init+0x1f4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d108      	bne.n	80060ba <HAL_DMA_Init+0x186>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0201 	bic.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	e007      	b.n	80060ca <HAL_DMA_Init+0x196>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060ca:	e02f      	b.n	800612c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060cc:	f7fd fe0a 	bl	8003ce4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d928      	bls.n	800612c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2203      	movs	r2, #3
 80060e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e246      	b.n	800657a <HAL_DMA_Init+0x646>
 80060ec:	40020010 	.word	0x40020010
 80060f0:	40020028 	.word	0x40020028
 80060f4:	40020040 	.word	0x40020040
 80060f8:	40020058 	.word	0x40020058
 80060fc:	40020070 	.word	0x40020070
 8006100:	40020088 	.word	0x40020088
 8006104:	400200a0 	.word	0x400200a0
 8006108:	400200b8 	.word	0x400200b8
 800610c:	40020410 	.word	0x40020410
 8006110:	40020428 	.word	0x40020428
 8006114:	40020440 	.word	0x40020440
 8006118:	40020458 	.word	0x40020458
 800611c:	40020470 	.word	0x40020470
 8006120:	40020488 	.word	0x40020488
 8006124:	400204a0 	.word	0x400204a0
 8006128:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1c8      	bne.n	80060cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4b83      	ldr	r3, [pc, #524]	; (8006354 <HAL_DMA_Init+0x420>)
 8006146:	4013      	ands	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006152:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800615e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b04      	cmp	r3, #4
 800617e:	d107      	bne.n	8006190 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	4313      	orrs	r3, r2
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006190:	4b71      	ldr	r3, [pc, #452]	; (8006358 <HAL_DMA_Init+0x424>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b71      	ldr	r3, [pc, #452]	; (800635c <HAL_DMA_Init+0x428>)
 8006196:	4013      	ands	r3, r2
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d328      	bcc.n	80061f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b28      	cmp	r3, #40	; 0x28
 80061a4:	d903      	bls.n	80061ae <HAL_DMA_Init+0x27a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b2e      	cmp	r3, #46	; 0x2e
 80061ac:	d917      	bls.n	80061de <HAL_DMA_Init+0x2aa>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b3e      	cmp	r3, #62	; 0x3e
 80061b4:	d903      	bls.n	80061be <HAL_DMA_Init+0x28a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b42      	cmp	r3, #66	; 0x42
 80061bc:	d90f      	bls.n	80061de <HAL_DMA_Init+0x2aa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b46      	cmp	r3, #70	; 0x46
 80061c4:	d903      	bls.n	80061ce <HAL_DMA_Init+0x29a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b48      	cmp	r3, #72	; 0x48
 80061cc:	d907      	bls.n	80061de <HAL_DMA_Init+0x2aa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b4e      	cmp	r3, #78	; 0x4e
 80061d4:	d905      	bls.n	80061e2 <HAL_DMA_Init+0x2ae>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b52      	cmp	r3, #82	; 0x52
 80061dc:	d801      	bhi.n	80061e2 <HAL_DMA_Init+0x2ae>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <HAL_DMA_Init+0x2b0>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f023 0307 	bic.w	r3, r3, #7
 8006206:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006216:	2b04      	cmp	r3, #4
 8006218:	d117      	bne.n	800624a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f002 fb33 	bl	8008898 <DMA_CheckFifoParam>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2240      	movs	r2, #64	; 0x40
 800623c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e197      	b.n	800657a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f002 fa6e 	bl	8008734 <DMA_CalcBaseAndBitshift>
 8006258:	4603      	mov	r3, r0
 800625a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	223f      	movs	r2, #63	; 0x3f
 8006266:	409a      	lsls	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
 800626c:	e0cd      	b.n	800640a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3b      	ldr	r2, [pc, #236]	; (8006360 <HAL_DMA_Init+0x42c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d022      	beq.n	80062be <HAL_DMA_Init+0x38a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a39      	ldr	r2, [pc, #228]	; (8006364 <HAL_DMA_Init+0x430>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01d      	beq.n	80062be <HAL_DMA_Init+0x38a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a38      	ldr	r2, [pc, #224]	; (8006368 <HAL_DMA_Init+0x434>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d018      	beq.n	80062be <HAL_DMA_Init+0x38a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a36      	ldr	r2, [pc, #216]	; (800636c <HAL_DMA_Init+0x438>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <HAL_DMA_Init+0x38a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a35      	ldr	r2, [pc, #212]	; (8006370 <HAL_DMA_Init+0x43c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00e      	beq.n	80062be <HAL_DMA_Init+0x38a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a33      	ldr	r2, [pc, #204]	; (8006374 <HAL_DMA_Init+0x440>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_DMA_Init+0x38a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a32      	ldr	r2, [pc, #200]	; (8006378 <HAL_DMA_Init+0x444>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_DMA_Init+0x38a>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a30      	ldr	r2, [pc, #192]	; (800637c <HAL_DMA_Init+0x448>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d101      	bne.n	80062c2 <HAL_DMA_Init+0x38e>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_DMA_Init+0x390>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8097 	beq.w	80063f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a24      	ldr	r2, [pc, #144]	; (8006360 <HAL_DMA_Init+0x42c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d021      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a22      	ldr	r2, [pc, #136]	; (8006364 <HAL_DMA_Init+0x430>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01c      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a21      	ldr	r2, [pc, #132]	; (8006368 <HAL_DMA_Init+0x434>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d017      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1f      	ldr	r2, [pc, #124]	; (800636c <HAL_DMA_Init+0x438>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d012      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1e      	ldr	r2, [pc, #120]	; (8006370 <HAL_DMA_Init+0x43c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00d      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_DMA_Init+0x440>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d008      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <HAL_DMA_Init+0x444>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <HAL_DMA_Init+0x3e4>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_DMA_Init+0x448>)
 8006316:	4293      	cmp	r3, r2
 8006318:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <HAL_DMA_Init+0x44c>)
 8006336:	4013      	ands	r3, r2
 8006338:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d020      	beq.n	8006384 <HAL_DMA_Init+0x450>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d102      	bne.n	8006350 <HAL_DMA_Init+0x41c>
 800634a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800634e:	e01a      	b.n	8006386 <HAL_DMA_Init+0x452>
 8006350:	2300      	movs	r3, #0
 8006352:	e018      	b.n	8006386 <HAL_DMA_Init+0x452>
 8006354:	fe10803f 	.word	0xfe10803f
 8006358:	5c001000 	.word	0x5c001000
 800635c:	ffff0000 	.word	0xffff0000
 8006360:	58025408 	.word	0x58025408
 8006364:	5802541c 	.word	0x5802541c
 8006368:	58025430 	.word	0x58025430
 800636c:	58025444 	.word	0x58025444
 8006370:	58025458 	.word	0x58025458
 8006374:	5802546c 	.word	0x5802546c
 8006378:	58025480 	.word	0x58025480
 800637c:	58025494 	.word	0x58025494
 8006380:	fffe000f 	.word	0xfffe000f
 8006384:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800638c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800639c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b6e      	ldr	r3, [pc, #440]	; (8006584 <HAL_DMA_Init+0x650>)
 80063cc:	4413      	add	r3, r2
 80063ce:	4a6e      	ldr	r2, [pc, #440]	; (8006588 <HAL_DMA_Init+0x654>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	009a      	lsls	r2, r3, #2
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f002 f9a9 	bl	8008734 <DMA_CalcBaseAndBitshift>
 80063e2:	4603      	mov	r3, r0
 80063e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2201      	movs	r2, #1
 80063f0:	409a      	lsls	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	e008      	b.n	800640a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2240      	movs	r2, #64	; 0x40
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2203      	movs	r2, #3
 8006402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e0b7      	b.n	800657a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5f      	ldr	r2, [pc, #380]	; (800658c <HAL_DMA_Init+0x658>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d072      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5d      	ldr	r2, [pc, #372]	; (8006590 <HAL_DMA_Init+0x65c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d06d      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a5c      	ldr	r2, [pc, #368]	; (8006594 <HAL_DMA_Init+0x660>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d068      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a5a      	ldr	r2, [pc, #360]	; (8006598 <HAL_DMA_Init+0x664>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d063      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a59      	ldr	r2, [pc, #356]	; (800659c <HAL_DMA_Init+0x668>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d05e      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a57      	ldr	r2, [pc, #348]	; (80065a0 <HAL_DMA_Init+0x66c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d059      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a56      	ldr	r2, [pc, #344]	; (80065a4 <HAL_DMA_Init+0x670>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d054      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a54      	ldr	r2, [pc, #336]	; (80065a8 <HAL_DMA_Init+0x674>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d04f      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a53      	ldr	r2, [pc, #332]	; (80065ac <HAL_DMA_Init+0x678>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d04a      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a51      	ldr	r2, [pc, #324]	; (80065b0 <HAL_DMA_Init+0x67c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d045      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a50      	ldr	r2, [pc, #320]	; (80065b4 <HAL_DMA_Init+0x680>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d040      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a4e      	ldr	r2, [pc, #312]	; (80065b8 <HAL_DMA_Init+0x684>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d03b      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4d      	ldr	r2, [pc, #308]	; (80065bc <HAL_DMA_Init+0x688>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d036      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a4b      	ldr	r2, [pc, #300]	; (80065c0 <HAL_DMA_Init+0x68c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d031      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a4a      	ldr	r2, [pc, #296]	; (80065c4 <HAL_DMA_Init+0x690>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d02c      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a48      	ldr	r2, [pc, #288]	; (80065c8 <HAL_DMA_Init+0x694>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d027      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a47      	ldr	r2, [pc, #284]	; (80065cc <HAL_DMA_Init+0x698>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a45      	ldr	r2, [pc, #276]	; (80065d0 <HAL_DMA_Init+0x69c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01d      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a44      	ldr	r2, [pc, #272]	; (80065d4 <HAL_DMA_Init+0x6a0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d018      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a42      	ldr	r2, [pc, #264]	; (80065d8 <HAL_DMA_Init+0x6a4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a41      	ldr	r2, [pc, #260]	; (80065dc <HAL_DMA_Init+0x6a8>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3f      	ldr	r2, [pc, #252]	; (80065e0 <HAL_DMA_Init+0x6ac>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d009      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3e      	ldr	r2, [pc, #248]	; (80065e4 <HAL_DMA_Init+0x6b0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_DMA_Init+0x5c6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <HAL_DMA_Init+0x6b4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d101      	bne.n	80064fe <HAL_DMA_Init+0x5ca>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <HAL_DMA_Init+0x5cc>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d032      	beq.n	800656a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f002 fa43 	bl	8008990 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2b80      	cmp	r3, #128	; 0x80
 8006510:	d102      	bne.n	8006518 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800652c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d010      	beq.n	8006558 <HAL_DMA_Init+0x624>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b08      	cmp	r3, #8
 800653c:	d80c      	bhi.n	8006558 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fac0 	bl	8008ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006554:	605a      	str	r2, [r3, #4]
 8006556:	e008      	b.n	800656a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	a7fdabf8 	.word	0xa7fdabf8
 8006588:	cccccccd 	.word	0xcccccccd
 800658c:	40020010 	.word	0x40020010
 8006590:	40020028 	.word	0x40020028
 8006594:	40020040 	.word	0x40020040
 8006598:	40020058 	.word	0x40020058
 800659c:	40020070 	.word	0x40020070
 80065a0:	40020088 	.word	0x40020088
 80065a4:	400200a0 	.word	0x400200a0
 80065a8:	400200b8 	.word	0x400200b8
 80065ac:	40020410 	.word	0x40020410
 80065b0:	40020428 	.word	0x40020428
 80065b4:	40020440 	.word	0x40020440
 80065b8:	40020458 	.word	0x40020458
 80065bc:	40020470 	.word	0x40020470
 80065c0:	40020488 	.word	0x40020488
 80065c4:	400204a0 	.word	0x400204a0
 80065c8:	400204b8 	.word	0x400204b8
 80065cc:	58025408 	.word	0x58025408
 80065d0:	5802541c 	.word	0x5802541c
 80065d4:	58025430 	.word	0x58025430
 80065d8:	58025444 	.word	0x58025444
 80065dc:	58025458 	.word	0x58025458
 80065e0:	5802546c 	.word	0x5802546c
 80065e4:	58025480 	.word	0x58025480
 80065e8:	58025494 	.word	0x58025494

080065ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e226      	b.n	8006a56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_DMA_Start_IT+0x2a>
 8006612:	2302      	movs	r3, #2
 8006614:	e21f      	b.n	8006a56 <HAL_DMA_Start_IT+0x46a>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b01      	cmp	r3, #1
 8006628:	f040 820a 	bne.w	8006a40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2202      	movs	r2, #2
 8006630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a68      	ldr	r2, [pc, #416]	; (80067e0 <HAL_DMA_Start_IT+0x1f4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d04a      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a66      	ldr	r2, [pc, #408]	; (80067e4 <HAL_DMA_Start_IT+0x1f8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d045      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a65      	ldr	r2, [pc, #404]	; (80067e8 <HAL_DMA_Start_IT+0x1fc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d040      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a63      	ldr	r2, [pc, #396]	; (80067ec <HAL_DMA_Start_IT+0x200>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d03b      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a62      	ldr	r2, [pc, #392]	; (80067f0 <HAL_DMA_Start_IT+0x204>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d036      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a60      	ldr	r2, [pc, #384]	; (80067f4 <HAL_DMA_Start_IT+0x208>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d031      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5f      	ldr	r2, [pc, #380]	; (80067f8 <HAL_DMA_Start_IT+0x20c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d02c      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a5d      	ldr	r2, [pc, #372]	; (80067fc <HAL_DMA_Start_IT+0x210>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d027      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a5c      	ldr	r2, [pc, #368]	; (8006800 <HAL_DMA_Start_IT+0x214>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d022      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5a      	ldr	r2, [pc, #360]	; (8006804 <HAL_DMA_Start_IT+0x218>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a59      	ldr	r2, [pc, #356]	; (8006808 <HAL_DMA_Start_IT+0x21c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a57      	ldr	r2, [pc, #348]	; (800680c <HAL_DMA_Start_IT+0x220>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d013      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a56      	ldr	r2, [pc, #344]	; (8006810 <HAL_DMA_Start_IT+0x224>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a54      	ldr	r2, [pc, #336]	; (8006814 <HAL_DMA_Start_IT+0x228>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a53      	ldr	r2, [pc, #332]	; (8006818 <HAL_DMA_Start_IT+0x22c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_DMA_Start_IT+0xee>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a51      	ldr	r2, [pc, #324]	; (800681c <HAL_DMA_Start_IT+0x230>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d108      	bne.n	80066ec <HAL_DMA_Start_IT+0x100>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0201 	bic.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e007      	b.n	80066fc <HAL_DMA_Start_IT+0x110>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f001 fe6a 	bl	80083dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a34      	ldr	r2, [pc, #208]	; (80067e0 <HAL_DMA_Start_IT+0x1f4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a33      	ldr	r2, [pc, #204]	; (80067e4 <HAL_DMA_Start_IT+0x1f8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a31      	ldr	r2, [pc, #196]	; (80067e8 <HAL_DMA_Start_IT+0x1fc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a30      	ldr	r2, [pc, #192]	; (80067ec <HAL_DMA_Start_IT+0x200>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a2e      	ldr	r2, [pc, #184]	; (80067f0 <HAL_DMA_Start_IT+0x204>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a2d      	ldr	r2, [pc, #180]	; (80067f4 <HAL_DMA_Start_IT+0x208>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a2b      	ldr	r2, [pc, #172]	; (80067f8 <HAL_DMA_Start_IT+0x20c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <HAL_DMA_Start_IT+0x210>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a28      	ldr	r2, [pc, #160]	; (8006800 <HAL_DMA_Start_IT+0x214>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a27      	ldr	r2, [pc, #156]	; (8006804 <HAL_DMA_Start_IT+0x218>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a25      	ldr	r2, [pc, #148]	; (8006808 <HAL_DMA_Start_IT+0x21c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a24      	ldr	r2, [pc, #144]	; (800680c <HAL_DMA_Start_IT+0x220>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a22      	ldr	r2, [pc, #136]	; (8006810 <HAL_DMA_Start_IT+0x224>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a21      	ldr	r2, [pc, #132]	; (8006814 <HAL_DMA_Start_IT+0x228>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1f      	ldr	r2, [pc, #124]	; (8006818 <HAL_DMA_Start_IT+0x22c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_DMA_Start_IT+0x1bc>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1e      	ldr	r2, [pc, #120]	; (800681c <HAL_DMA_Start_IT+0x230>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_DMA_Start_IT+0x1c0>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <HAL_DMA_Start_IT+0x1c2>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d036      	beq.n	8006820 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 021e 	bic.w	r2, r3, #30
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0216 	orr.w	r2, r2, #22
 80067c4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03e      	beq.n	800684c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0208 	orr.w	r2, r2, #8
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e035      	b.n	800684c <HAL_DMA_Start_IT+0x260>
 80067e0:	40020010 	.word	0x40020010
 80067e4:	40020028 	.word	0x40020028
 80067e8:	40020040 	.word	0x40020040
 80067ec:	40020058 	.word	0x40020058
 80067f0:	40020070 	.word	0x40020070
 80067f4:	40020088 	.word	0x40020088
 80067f8:	400200a0 	.word	0x400200a0
 80067fc:	400200b8 	.word	0x400200b8
 8006800:	40020410 	.word	0x40020410
 8006804:	40020428 	.word	0x40020428
 8006808:	40020440 	.word	0x40020440
 800680c:	40020458 	.word	0x40020458
 8006810:	40020470 	.word	0x40020470
 8006814:	40020488 	.word	0x40020488
 8006818:	400204a0 	.word	0x400204a0
 800681c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f023 020e 	bic.w	r2, r3, #14
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 020a 	orr.w	r2, r2, #10
 8006832:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0204 	orr.w	r2, r2, #4
 800684a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a83      	ldr	r2, [pc, #524]	; (8006a60 <HAL_DMA_Start_IT+0x474>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d072      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a82      	ldr	r2, [pc, #520]	; (8006a64 <HAL_DMA_Start_IT+0x478>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d06d      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a80      	ldr	r2, [pc, #512]	; (8006a68 <HAL_DMA_Start_IT+0x47c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d068      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a7f      	ldr	r2, [pc, #508]	; (8006a6c <HAL_DMA_Start_IT+0x480>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d063      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a7d      	ldr	r2, [pc, #500]	; (8006a70 <HAL_DMA_Start_IT+0x484>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d05e      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a7c      	ldr	r2, [pc, #496]	; (8006a74 <HAL_DMA_Start_IT+0x488>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d059      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a7a      	ldr	r2, [pc, #488]	; (8006a78 <HAL_DMA_Start_IT+0x48c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d054      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a79      	ldr	r2, [pc, #484]	; (8006a7c <HAL_DMA_Start_IT+0x490>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04f      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a77      	ldr	r2, [pc, #476]	; (8006a80 <HAL_DMA_Start_IT+0x494>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04a      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a76      	ldr	r2, [pc, #472]	; (8006a84 <HAL_DMA_Start_IT+0x498>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d045      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a74      	ldr	r2, [pc, #464]	; (8006a88 <HAL_DMA_Start_IT+0x49c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a73      	ldr	r2, [pc, #460]	; (8006a8c <HAL_DMA_Start_IT+0x4a0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03b      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a71      	ldr	r2, [pc, #452]	; (8006a90 <HAL_DMA_Start_IT+0x4a4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d036      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a70      	ldr	r2, [pc, #448]	; (8006a94 <HAL_DMA_Start_IT+0x4a8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d031      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a6e      	ldr	r2, [pc, #440]	; (8006a98 <HAL_DMA_Start_IT+0x4ac>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d02c      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a6d      	ldr	r2, [pc, #436]	; (8006a9c <HAL_DMA_Start_IT+0x4b0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d027      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6b      	ldr	r2, [pc, #428]	; (8006aa0 <HAL_DMA_Start_IT+0x4b4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a6a      	ldr	r2, [pc, #424]	; (8006aa4 <HAL_DMA_Start_IT+0x4b8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a68      	ldr	r2, [pc, #416]	; (8006aa8 <HAL_DMA_Start_IT+0x4bc>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a67      	ldr	r2, [pc, #412]	; (8006aac <HAL_DMA_Start_IT+0x4c0>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a65      	ldr	r2, [pc, #404]	; (8006ab0 <HAL_DMA_Start_IT+0x4c4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a64      	ldr	r2, [pc, #400]	; (8006ab4 <HAL_DMA_Start_IT+0x4c8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a62      	ldr	r2, [pc, #392]	; (8006ab8 <HAL_DMA_Start_IT+0x4cc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_DMA_Start_IT+0x350>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a61      	ldr	r2, [pc, #388]	; (8006abc <HAL_DMA_Start_IT+0x4d0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <HAL_DMA_Start_IT+0x354>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <HAL_DMA_Start_IT+0x356>
 8006940:	2300      	movs	r3, #0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01a      	beq.n	800697c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006962:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800697a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a37      	ldr	r2, [pc, #220]	; (8006a60 <HAL_DMA_Start_IT+0x474>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04a      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a36      	ldr	r2, [pc, #216]	; (8006a64 <HAL_DMA_Start_IT+0x478>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d045      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a34      	ldr	r2, [pc, #208]	; (8006a68 <HAL_DMA_Start_IT+0x47c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d040      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <HAL_DMA_Start_IT+0x480>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03b      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a31      	ldr	r2, [pc, #196]	; (8006a70 <HAL_DMA_Start_IT+0x484>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a30      	ldr	r2, [pc, #192]	; (8006a74 <HAL_DMA_Start_IT+0x488>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d031      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2e      	ldr	r2, [pc, #184]	; (8006a78 <HAL_DMA_Start_IT+0x48c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <HAL_DMA_Start_IT+0x490>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d027      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2b      	ldr	r2, [pc, #172]	; (8006a80 <HAL_DMA_Start_IT+0x494>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <HAL_DMA_Start_IT+0x498>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a28      	ldr	r2, [pc, #160]	; (8006a88 <HAL_DMA_Start_IT+0x49c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a27      	ldr	r2, [pc, #156]	; (8006a8c <HAL_DMA_Start_IT+0x4a0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a25      	ldr	r2, [pc, #148]	; (8006a90 <HAL_DMA_Start_IT+0x4a4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a24      	ldr	r2, [pc, #144]	; (8006a94 <HAL_DMA_Start_IT+0x4a8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a22      	ldr	r2, [pc, #136]	; (8006a98 <HAL_DMA_Start_IT+0x4ac>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_DMA_Start_IT+0x430>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <HAL_DMA_Start_IT+0x4b0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <HAL_DMA_Start_IT+0x442>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e012      	b.n	8006a54 <HAL_DMA_Start_IT+0x468>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e009      	b.n	8006a54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	58025408 	.word	0x58025408
 8006aa4:	5802541c 	.word	0x5802541c
 8006aa8:	58025430 	.word	0x58025430
 8006aac:	58025444 	.word	0x58025444
 8006ab0:	58025458 	.word	0x58025458
 8006ab4:	5802546c 	.word	0x5802546c
 8006ab8:	58025480 	.word	0x58025480
 8006abc:	58025494 	.word	0x58025494

08006ac0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ac8:	f7fd f90c 	bl	8003ce4 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e2dc      	b.n	8007092 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d008      	beq.n	8006af6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e2cd      	b.n	8007092 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a76      	ldr	r2, [pc, #472]	; (8006cd4 <HAL_DMA_Abort+0x214>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04a      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a74      	ldr	r2, [pc, #464]	; (8006cd8 <HAL_DMA_Abort+0x218>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d045      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a73      	ldr	r2, [pc, #460]	; (8006cdc <HAL_DMA_Abort+0x21c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d040      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a71      	ldr	r2, [pc, #452]	; (8006ce0 <HAL_DMA_Abort+0x220>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d03b      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a70      	ldr	r2, [pc, #448]	; (8006ce4 <HAL_DMA_Abort+0x224>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d036      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a6e      	ldr	r2, [pc, #440]	; (8006ce8 <HAL_DMA_Abort+0x228>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d031      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6d      	ldr	r2, [pc, #436]	; (8006cec <HAL_DMA_Abort+0x22c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d02c      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	; (8006cf0 <HAL_DMA_Abort+0x230>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d027      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6a      	ldr	r2, [pc, #424]	; (8006cf4 <HAL_DMA_Abort+0x234>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a68      	ldr	r2, [pc, #416]	; (8006cf8 <HAL_DMA_Abort+0x238>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a67      	ldr	r2, [pc, #412]	; (8006cfc <HAL_DMA_Abort+0x23c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a65      	ldr	r2, [pc, #404]	; (8006d00 <HAL_DMA_Abort+0x240>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a64      	ldr	r2, [pc, #400]	; (8006d04 <HAL_DMA_Abort+0x244>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a62      	ldr	r2, [pc, #392]	; (8006d08 <HAL_DMA_Abort+0x248>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a61      	ldr	r2, [pc, #388]	; (8006d0c <HAL_DMA_Abort+0x24c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_DMA_Abort+0xd6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a5f      	ldr	r2, [pc, #380]	; (8006d10 <HAL_DMA_Abort+0x250>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_DMA_Abort+0xda>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <HAL_DMA_Abort+0xdc>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d013      	beq.n	8006bc8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 021e 	bic.w	r2, r2, #30
 8006bae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695a      	ldr	r2, [r3, #20]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bbe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	e00a      	b.n	8006bde <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 020e 	bic.w	r2, r2, #14
 8006bd6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a3c      	ldr	r2, [pc, #240]	; (8006cd4 <HAL_DMA_Abort+0x214>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d072      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a3a      	ldr	r2, [pc, #232]	; (8006cd8 <HAL_DMA_Abort+0x218>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d06d      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a39      	ldr	r2, [pc, #228]	; (8006cdc <HAL_DMA_Abort+0x21c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d068      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a37      	ldr	r2, [pc, #220]	; (8006ce0 <HAL_DMA_Abort+0x220>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d063      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a36      	ldr	r2, [pc, #216]	; (8006ce4 <HAL_DMA_Abort+0x224>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d05e      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a34      	ldr	r2, [pc, #208]	; (8006ce8 <HAL_DMA_Abort+0x228>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d059      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a33      	ldr	r2, [pc, #204]	; (8006cec <HAL_DMA_Abort+0x22c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d054      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a31      	ldr	r2, [pc, #196]	; (8006cf0 <HAL_DMA_Abort+0x230>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d04f      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a30      	ldr	r2, [pc, #192]	; (8006cf4 <HAL_DMA_Abort+0x234>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d04a      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2e      	ldr	r2, [pc, #184]	; (8006cf8 <HAL_DMA_Abort+0x238>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d045      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a2d      	ldr	r2, [pc, #180]	; (8006cfc <HAL_DMA_Abort+0x23c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d040      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <HAL_DMA_Abort+0x240>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d03b      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a2a      	ldr	r2, [pc, #168]	; (8006d04 <HAL_DMA_Abort+0x244>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d036      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a28      	ldr	r2, [pc, #160]	; (8006d08 <HAL_DMA_Abort+0x248>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d031      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a27      	ldr	r2, [pc, #156]	; (8006d0c <HAL_DMA_Abort+0x24c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d02c      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a25      	ldr	r2, [pc, #148]	; (8006d10 <HAL_DMA_Abort+0x250>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d027      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a24      	ldr	r2, [pc, #144]	; (8006d14 <HAL_DMA_Abort+0x254>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d022      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <HAL_DMA_Abort+0x258>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01d      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a21      	ldr	r2, [pc, #132]	; (8006d1c <HAL_DMA_Abort+0x25c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <HAL_DMA_Abort+0x260>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <HAL_DMA_Abort+0x264>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <HAL_DMA_Abort+0x268>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <HAL_DMA_Abort+0x26c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_DMA_Abort+0x20e>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a19      	ldr	r2, [pc, #100]	; (8006d30 <HAL_DMA_Abort+0x270>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d132      	bne.n	8006d34 <HAL_DMA_Abort+0x274>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e031      	b.n	8006d36 <HAL_DMA_Abort+0x276>
 8006cd2:	bf00      	nop
 8006cd4:	40020010 	.word	0x40020010
 8006cd8:	40020028 	.word	0x40020028
 8006cdc:	40020040 	.word	0x40020040
 8006ce0:	40020058 	.word	0x40020058
 8006ce4:	40020070 	.word	0x40020070
 8006ce8:	40020088 	.word	0x40020088
 8006cec:	400200a0 	.word	0x400200a0
 8006cf0:	400200b8 	.word	0x400200b8
 8006cf4:	40020410 	.word	0x40020410
 8006cf8:	40020428 	.word	0x40020428
 8006cfc:	40020440 	.word	0x40020440
 8006d00:	40020458 	.word	0x40020458
 8006d04:	40020470 	.word	0x40020470
 8006d08:	40020488 	.word	0x40020488
 8006d0c:	400204a0 	.word	0x400204a0
 8006d10:	400204b8 	.word	0x400204b8
 8006d14:	58025408 	.word	0x58025408
 8006d18:	5802541c 	.word	0x5802541c
 8006d1c:	58025430 	.word	0x58025430
 8006d20:	58025444 	.word	0x58025444
 8006d24:	58025458 	.word	0x58025458
 8006d28:	5802546c 	.word	0x5802546c
 8006d2c:	58025480 	.word	0x58025480
 8006d30:	58025494 	.word	0x58025494
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d007      	beq.n	8006d4a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a6d      	ldr	r2, [pc, #436]	; (8006f04 <HAL_DMA_Abort+0x444>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d04a      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a6b      	ldr	r2, [pc, #428]	; (8006f08 <HAL_DMA_Abort+0x448>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d045      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a6a      	ldr	r2, [pc, #424]	; (8006f0c <HAL_DMA_Abort+0x44c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d040      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a68      	ldr	r2, [pc, #416]	; (8006f10 <HAL_DMA_Abort+0x450>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d03b      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a67      	ldr	r2, [pc, #412]	; (8006f14 <HAL_DMA_Abort+0x454>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d036      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a65      	ldr	r2, [pc, #404]	; (8006f18 <HAL_DMA_Abort+0x458>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d031      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a64      	ldr	r2, [pc, #400]	; (8006f1c <HAL_DMA_Abort+0x45c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d02c      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a62      	ldr	r2, [pc, #392]	; (8006f20 <HAL_DMA_Abort+0x460>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d027      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a61      	ldr	r2, [pc, #388]	; (8006f24 <HAL_DMA_Abort+0x464>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d022      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a5f      	ldr	r2, [pc, #380]	; (8006f28 <HAL_DMA_Abort+0x468>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d01d      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a5e      	ldr	r2, [pc, #376]	; (8006f2c <HAL_DMA_Abort+0x46c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d018      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a5c      	ldr	r2, [pc, #368]	; (8006f30 <HAL_DMA_Abort+0x470>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d013      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a5b      	ldr	r2, [pc, #364]	; (8006f34 <HAL_DMA_Abort+0x474>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d00e      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a59      	ldr	r2, [pc, #356]	; (8006f38 <HAL_DMA_Abort+0x478>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d009      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a58      	ldr	r2, [pc, #352]	; (8006f3c <HAL_DMA_Abort+0x47c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d004      	beq.n	8006dea <HAL_DMA_Abort+0x32a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a56      	ldr	r2, [pc, #344]	; (8006f40 <HAL_DMA_Abort+0x480>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d108      	bne.n	8006dfc <HAL_DMA_Abort+0x33c>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	e007      	b.n	8006e0c <HAL_DMA_Abort+0x34c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0201 	bic.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e0c:	e013      	b.n	8006e36 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e0e:	f7fc ff69 	bl	8003ce4 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d90c      	bls.n	8006e36 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e12d      	b.n	8007092 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2f      	ldr	r2, [pc, #188]	; (8006f04 <HAL_DMA_Abort+0x444>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d04a      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2d      	ldr	r2, [pc, #180]	; (8006f08 <HAL_DMA_Abort+0x448>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d045      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <HAL_DMA_Abort+0x44c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d040      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <HAL_DMA_Abort+0x450>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d03b      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <HAL_DMA_Abort+0x454>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d036      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a27      	ldr	r2, [pc, #156]	; (8006f18 <HAL_DMA_Abort+0x458>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d031      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a26      	ldr	r2, [pc, #152]	; (8006f1c <HAL_DMA_Abort+0x45c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d02c      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_DMA_Abort+0x460>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d027      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a23      	ldr	r2, [pc, #140]	; (8006f24 <HAL_DMA_Abort+0x464>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d022      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <HAL_DMA_Abort+0x468>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d01d      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a20      	ldr	r2, [pc, #128]	; (8006f2c <HAL_DMA_Abort+0x46c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d018      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1e      	ldr	r2, [pc, #120]	; (8006f30 <HAL_DMA_Abort+0x470>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d013      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_DMA_Abort+0x474>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <HAL_DMA_Abort+0x478>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d009      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1a      	ldr	r2, [pc, #104]	; (8006f3c <HAL_DMA_Abort+0x47c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d004      	beq.n	8006ee2 <HAL_DMA_Abort+0x422>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_DMA_Abort+0x480>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d101      	bne.n	8006ee6 <HAL_DMA_Abort+0x426>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_DMA_Abort+0x428>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02b      	beq.n	8006f44 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	223f      	movs	r2, #63	; 0x3f
 8006efc:	409a      	lsls	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	609a      	str	r2, [r3, #8]
 8006f02:	e02a      	b.n	8006f5a <HAL_DMA_Abort+0x49a>
 8006f04:	40020010 	.word	0x40020010
 8006f08:	40020028 	.word	0x40020028
 8006f0c:	40020040 	.word	0x40020040
 8006f10:	40020058 	.word	0x40020058
 8006f14:	40020070 	.word	0x40020070
 8006f18:	40020088 	.word	0x40020088
 8006f1c:	400200a0 	.word	0x400200a0
 8006f20:	400200b8 	.word	0x400200b8
 8006f24:	40020410 	.word	0x40020410
 8006f28:	40020428 	.word	0x40020428
 8006f2c:	40020440 	.word	0x40020440
 8006f30:	40020458 	.word	0x40020458
 8006f34:	40020470 	.word	0x40020470
 8006f38:	40020488 	.word	0x40020488
 8006f3c:	400204a0 	.word	0x400204a0
 8006f40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f48:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2201      	movs	r2, #1
 8006f54:	409a      	lsls	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a4f      	ldr	r2, [pc, #316]	; (800709c <HAL_DMA_Abort+0x5dc>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d072      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a4d      	ldr	r2, [pc, #308]	; (80070a0 <HAL_DMA_Abort+0x5e0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d06d      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4c      	ldr	r2, [pc, #304]	; (80070a4 <HAL_DMA_Abort+0x5e4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d068      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a4a      	ldr	r2, [pc, #296]	; (80070a8 <HAL_DMA_Abort+0x5e8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d063      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a49      	ldr	r2, [pc, #292]	; (80070ac <HAL_DMA_Abort+0x5ec>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d05e      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a47      	ldr	r2, [pc, #284]	; (80070b0 <HAL_DMA_Abort+0x5f0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d059      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a46      	ldr	r2, [pc, #280]	; (80070b4 <HAL_DMA_Abort+0x5f4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d054      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a44      	ldr	r2, [pc, #272]	; (80070b8 <HAL_DMA_Abort+0x5f8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d04f      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a43      	ldr	r2, [pc, #268]	; (80070bc <HAL_DMA_Abort+0x5fc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d04a      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a41      	ldr	r2, [pc, #260]	; (80070c0 <HAL_DMA_Abort+0x600>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d045      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a40      	ldr	r2, [pc, #256]	; (80070c4 <HAL_DMA_Abort+0x604>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d040      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a3e      	ldr	r2, [pc, #248]	; (80070c8 <HAL_DMA_Abort+0x608>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d03b      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3d      	ldr	r2, [pc, #244]	; (80070cc <HAL_DMA_Abort+0x60c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d036      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3b      	ldr	r2, [pc, #236]	; (80070d0 <HAL_DMA_Abort+0x610>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d031      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3a      	ldr	r2, [pc, #232]	; (80070d4 <HAL_DMA_Abort+0x614>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d02c      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a38      	ldr	r2, [pc, #224]	; (80070d8 <HAL_DMA_Abort+0x618>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d027      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a37      	ldr	r2, [pc, #220]	; (80070dc <HAL_DMA_Abort+0x61c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d022      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a35      	ldr	r2, [pc, #212]	; (80070e0 <HAL_DMA_Abort+0x620>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d01d      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a34      	ldr	r2, [pc, #208]	; (80070e4 <HAL_DMA_Abort+0x624>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d018      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a32      	ldr	r2, [pc, #200]	; (80070e8 <HAL_DMA_Abort+0x628>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d013      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a31      	ldr	r2, [pc, #196]	; (80070ec <HAL_DMA_Abort+0x62c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00e      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2f      	ldr	r2, [pc, #188]	; (80070f0 <HAL_DMA_Abort+0x630>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d009      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2e      	ldr	r2, [pc, #184]	; (80070f4 <HAL_DMA_Abort+0x634>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d004      	beq.n	800704a <HAL_DMA_Abort+0x58a>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2c      	ldr	r2, [pc, #176]	; (80070f8 <HAL_DMA_Abort+0x638>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d101      	bne.n	800704e <HAL_DMA_Abort+0x58e>
 800704a:	2301      	movs	r3, #1
 800704c:	e000      	b.n	8007050 <HAL_DMA_Abort+0x590>
 800704e:	2300      	movs	r3, #0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800705c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00c      	beq.n	8007080 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007074:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800707e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40020010 	.word	0x40020010
 80070a0:	40020028 	.word	0x40020028
 80070a4:	40020040 	.word	0x40020040
 80070a8:	40020058 	.word	0x40020058
 80070ac:	40020070 	.word	0x40020070
 80070b0:	40020088 	.word	0x40020088
 80070b4:	400200a0 	.word	0x400200a0
 80070b8:	400200b8 	.word	0x400200b8
 80070bc:	40020410 	.word	0x40020410
 80070c0:	40020428 	.word	0x40020428
 80070c4:	40020440 	.word	0x40020440
 80070c8:	40020458 	.word	0x40020458
 80070cc:	40020470 	.word	0x40020470
 80070d0:	40020488 	.word	0x40020488
 80070d4:	400204a0 	.word	0x400204a0
 80070d8:	400204b8 	.word	0x400204b8
 80070dc:	58025408 	.word	0x58025408
 80070e0:	5802541c 	.word	0x5802541c
 80070e4:	58025430 	.word	0x58025430
 80070e8:	58025444 	.word	0x58025444
 80070ec:	58025458 	.word	0x58025458
 80070f0:	5802546c 	.word	0x5802546c
 80070f4:	58025480 	.word	0x58025480
 80070f8:	58025494 	.word	0x58025494

080070fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e237      	b.n	800757e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d004      	beq.n	8007124 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2280      	movs	r2, #128	; 0x80
 800711e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e22c      	b.n	800757e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5c      	ldr	r2, [pc, #368]	; (800729c <HAL_DMA_Abort_IT+0x1a0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d04a      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5b      	ldr	r2, [pc, #364]	; (80072a0 <HAL_DMA_Abort_IT+0x1a4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d045      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a59      	ldr	r2, [pc, #356]	; (80072a4 <HAL_DMA_Abort_IT+0x1a8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d040      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <HAL_DMA_Abort_IT+0x1ac>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d03b      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a56      	ldr	r2, [pc, #344]	; (80072ac <HAL_DMA_Abort_IT+0x1b0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d036      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a55      	ldr	r2, [pc, #340]	; (80072b0 <HAL_DMA_Abort_IT+0x1b4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d031      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a53      	ldr	r2, [pc, #332]	; (80072b4 <HAL_DMA_Abort_IT+0x1b8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d02c      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a52      	ldr	r2, [pc, #328]	; (80072b8 <HAL_DMA_Abort_IT+0x1bc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d027      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a50      	ldr	r2, [pc, #320]	; (80072bc <HAL_DMA_Abort_IT+0x1c0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d022      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a4f      	ldr	r2, [pc, #316]	; (80072c0 <HAL_DMA_Abort_IT+0x1c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d01d      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a4d      	ldr	r2, [pc, #308]	; (80072c4 <HAL_DMA_Abort_IT+0x1c8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d018      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a4c      	ldr	r2, [pc, #304]	; (80072c8 <HAL_DMA_Abort_IT+0x1cc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d013      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a4a      	ldr	r2, [pc, #296]	; (80072cc <HAL_DMA_Abort_IT+0x1d0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00e      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a49      	ldr	r2, [pc, #292]	; (80072d0 <HAL_DMA_Abort_IT+0x1d4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d009      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a47      	ldr	r2, [pc, #284]	; (80072d4 <HAL_DMA_Abort_IT+0x1d8>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d004      	beq.n	80071c4 <HAL_DMA_Abort_IT+0xc8>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a46      	ldr	r2, [pc, #280]	; (80072d8 <HAL_DMA_Abort_IT+0x1dc>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d101      	bne.n	80071c8 <HAL_DMA_Abort_IT+0xcc>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <HAL_DMA_Abort_IT+0xce>
 80071c8:	2300      	movs	r3, #0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8086 	beq.w	80072dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a2f      	ldr	r2, [pc, #188]	; (800729c <HAL_DMA_Abort_IT+0x1a0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a2e      	ldr	r2, [pc, #184]	; (80072a0 <HAL_DMA_Abort_IT+0x1a4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2c      	ldr	r2, [pc, #176]	; (80072a4 <HAL_DMA_Abort_IT+0x1a8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <HAL_DMA_Abort_IT+0x1ac>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a29      	ldr	r2, [pc, #164]	; (80072ac <HAL_DMA_Abort_IT+0x1b0>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a28      	ldr	r2, [pc, #160]	; (80072b0 <HAL_DMA_Abort_IT+0x1b4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a26      	ldr	r2, [pc, #152]	; (80072b4 <HAL_DMA_Abort_IT+0x1b8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a25      	ldr	r2, [pc, #148]	; (80072b8 <HAL_DMA_Abort_IT+0x1bc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a23      	ldr	r2, [pc, #140]	; (80072bc <HAL_DMA_Abort_IT+0x1c0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <HAL_DMA_Abort_IT+0x1c4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a20      	ldr	r2, [pc, #128]	; (80072c4 <HAL_DMA_Abort_IT+0x1c8>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a1f      	ldr	r2, [pc, #124]	; (80072c8 <HAL_DMA_Abort_IT+0x1cc>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1d      	ldr	r2, [pc, #116]	; (80072cc <HAL_DMA_Abort_IT+0x1d0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a1c      	ldr	r2, [pc, #112]	; (80072d0 <HAL_DMA_Abort_IT+0x1d4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_DMA_Abort_IT+0x1d8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_Abort_IT+0x17c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_DMA_Abort_IT+0x1dc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d108      	bne.n	800728a <HAL_DMA_Abort_IT+0x18e>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e178      	b.n	800757c <HAL_DMA_Abort_IT+0x480>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e16f      	b.n	800757c <HAL_DMA_Abort_IT+0x480>
 800729c:	40020010 	.word	0x40020010
 80072a0:	40020028 	.word	0x40020028
 80072a4:	40020040 	.word	0x40020040
 80072a8:	40020058 	.word	0x40020058
 80072ac:	40020070 	.word	0x40020070
 80072b0:	40020088 	.word	0x40020088
 80072b4:	400200a0 	.word	0x400200a0
 80072b8:	400200b8 	.word	0x400200b8
 80072bc:	40020410 	.word	0x40020410
 80072c0:	40020428 	.word	0x40020428
 80072c4:	40020440 	.word	0x40020440
 80072c8:	40020458 	.word	0x40020458
 80072cc:	40020470 	.word	0x40020470
 80072d0:	40020488 	.word	0x40020488
 80072d4:	400204a0 	.word	0x400204a0
 80072d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 020e 	bic.w	r2, r2, #14
 80072ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a6c      	ldr	r2, [pc, #432]	; (80074a4 <HAL_DMA_Abort_IT+0x3a8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d04a      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6b      	ldr	r2, [pc, #428]	; (80074a8 <HAL_DMA_Abort_IT+0x3ac>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d045      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a69      	ldr	r2, [pc, #420]	; (80074ac <HAL_DMA_Abort_IT+0x3b0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d040      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a68      	ldr	r2, [pc, #416]	; (80074b0 <HAL_DMA_Abort_IT+0x3b4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d03b      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a66      	ldr	r2, [pc, #408]	; (80074b4 <HAL_DMA_Abort_IT+0x3b8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d036      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a65      	ldr	r2, [pc, #404]	; (80074b8 <HAL_DMA_Abort_IT+0x3bc>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d031      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a63      	ldr	r2, [pc, #396]	; (80074bc <HAL_DMA_Abort_IT+0x3c0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d02c      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a62      	ldr	r2, [pc, #392]	; (80074c0 <HAL_DMA_Abort_IT+0x3c4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d027      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a60      	ldr	r2, [pc, #384]	; (80074c4 <HAL_DMA_Abort_IT+0x3c8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d022      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a5f      	ldr	r2, [pc, #380]	; (80074c8 <HAL_DMA_Abort_IT+0x3cc>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d01d      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a5d      	ldr	r2, [pc, #372]	; (80074cc <HAL_DMA_Abort_IT+0x3d0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d018      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_DMA_Abort_IT+0x3d4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d013      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5a      	ldr	r2, [pc, #360]	; (80074d4 <HAL_DMA_Abort_IT+0x3d8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d00e      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a59      	ldr	r2, [pc, #356]	; (80074d8 <HAL_DMA_Abort_IT+0x3dc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d009      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a57      	ldr	r2, [pc, #348]	; (80074dc <HAL_DMA_Abort_IT+0x3e0>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_DMA_Abort_IT+0x290>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a56      	ldr	r2, [pc, #344]	; (80074e0 <HAL_DMA_Abort_IT+0x3e4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d108      	bne.n	800739e <HAL_DMA_Abort_IT+0x2a2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e007      	b.n	80073ae <HAL_DMA_Abort_IT+0x2b2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0201 	bic.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a3c      	ldr	r2, [pc, #240]	; (80074a4 <HAL_DMA_Abort_IT+0x3a8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d072      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a3a      	ldr	r2, [pc, #232]	; (80074a8 <HAL_DMA_Abort_IT+0x3ac>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d06d      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a39      	ldr	r2, [pc, #228]	; (80074ac <HAL_DMA_Abort_IT+0x3b0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d068      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a37      	ldr	r2, [pc, #220]	; (80074b0 <HAL_DMA_Abort_IT+0x3b4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d063      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a36      	ldr	r2, [pc, #216]	; (80074b4 <HAL_DMA_Abort_IT+0x3b8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d05e      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a34      	ldr	r2, [pc, #208]	; (80074b8 <HAL_DMA_Abort_IT+0x3bc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d059      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a33      	ldr	r2, [pc, #204]	; (80074bc <HAL_DMA_Abort_IT+0x3c0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d054      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a31      	ldr	r2, [pc, #196]	; (80074c0 <HAL_DMA_Abort_IT+0x3c4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d04f      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a30      	ldr	r2, [pc, #192]	; (80074c4 <HAL_DMA_Abort_IT+0x3c8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d04a      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2e      	ldr	r2, [pc, #184]	; (80074c8 <HAL_DMA_Abort_IT+0x3cc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d045      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a2d      	ldr	r2, [pc, #180]	; (80074cc <HAL_DMA_Abort_IT+0x3d0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d040      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <HAL_DMA_Abort_IT+0x3d4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d03b      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <HAL_DMA_Abort_IT+0x3d8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d036      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a28      	ldr	r2, [pc, #160]	; (80074d8 <HAL_DMA_Abort_IT+0x3dc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d031      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a27      	ldr	r2, [pc, #156]	; (80074dc <HAL_DMA_Abort_IT+0x3e0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d02c      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <HAL_DMA_Abort_IT+0x3e4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d027      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <HAL_DMA_Abort_IT+0x3e8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d022      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a22      	ldr	r2, [pc, #136]	; (80074e8 <HAL_DMA_Abort_IT+0x3ec>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01d      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a21      	ldr	r2, [pc, #132]	; (80074ec <HAL_DMA_Abort_IT+0x3f0>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d018      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <HAL_DMA_Abort_IT+0x3f4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <HAL_DMA_Abort_IT+0x3f8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <HAL_DMA_Abort_IT+0x3fc>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1b      	ldr	r2, [pc, #108]	; (80074fc <HAL_DMA_Abort_IT+0x400>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_DMA_Abort_IT+0x3a2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a19      	ldr	r2, [pc, #100]	; (8007500 <HAL_DMA_Abort_IT+0x404>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d132      	bne.n	8007504 <HAL_DMA_Abort_IT+0x408>
 800749e:	2301      	movs	r3, #1
 80074a0:	e031      	b.n	8007506 <HAL_DMA_Abort_IT+0x40a>
 80074a2:	bf00      	nop
 80074a4:	40020010 	.word	0x40020010
 80074a8:	40020028 	.word	0x40020028
 80074ac:	40020040 	.word	0x40020040
 80074b0:	40020058 	.word	0x40020058
 80074b4:	40020070 	.word	0x40020070
 80074b8:	40020088 	.word	0x40020088
 80074bc:	400200a0 	.word	0x400200a0
 80074c0:	400200b8 	.word	0x400200b8
 80074c4:	40020410 	.word	0x40020410
 80074c8:	40020428 	.word	0x40020428
 80074cc:	40020440 	.word	0x40020440
 80074d0:	40020458 	.word	0x40020458
 80074d4:	40020470 	.word	0x40020470
 80074d8:	40020488 	.word	0x40020488
 80074dc:	400204a0 	.word	0x400204a0
 80074e0:	400204b8 	.word	0x400204b8
 80074e4:	58025408 	.word	0x58025408
 80074e8:	5802541c 	.word	0x5802541c
 80074ec:	58025430 	.word	0x58025430
 80074f0:	58025444 	.word	0x58025444
 80074f4:	58025458 	.word	0x58025458
 80074f8:	5802546c 	.word	0x5802546c
 80074fc:	58025480 	.word	0x58025480
 8007500:	58025494 	.word	0x58025494
 8007504:	2300      	movs	r3, #0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d028      	beq.n	800755c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007518:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2201      	movs	r2, #1
 800752a:	409a      	lsls	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007538:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007550:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800755a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop

08007588 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007594:	4b67      	ldr	r3, [pc, #412]	; (8007734 <HAL_DMA_IRQHandler+0x1ac>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a67      	ldr	r2, [pc, #412]	; (8007738 <HAL_DMA_IRQHandler+0x1b0>)
 800759a:	fba2 2303 	umull	r2, r3, r2, r3
 800759e:	0a9b      	lsrs	r3, r3, #10
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a5f      	ldr	r2, [pc, #380]	; (800773c <HAL_DMA_IRQHandler+0x1b4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d04a      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a5d      	ldr	r2, [pc, #372]	; (8007740 <HAL_DMA_IRQHandler+0x1b8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d045      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a5c      	ldr	r2, [pc, #368]	; (8007744 <HAL_DMA_IRQHandler+0x1bc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d040      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a5a      	ldr	r2, [pc, #360]	; (8007748 <HAL_DMA_IRQHandler+0x1c0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d03b      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a59      	ldr	r2, [pc, #356]	; (800774c <HAL_DMA_IRQHandler+0x1c4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d036      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a57      	ldr	r2, [pc, #348]	; (8007750 <HAL_DMA_IRQHandler+0x1c8>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d031      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a56      	ldr	r2, [pc, #344]	; (8007754 <HAL_DMA_IRQHandler+0x1cc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d02c      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a54      	ldr	r2, [pc, #336]	; (8007758 <HAL_DMA_IRQHandler+0x1d0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d027      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a53      	ldr	r2, [pc, #332]	; (800775c <HAL_DMA_IRQHandler+0x1d4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a51      	ldr	r2, [pc, #324]	; (8007760 <HAL_DMA_IRQHandler+0x1d8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01d      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a50      	ldr	r2, [pc, #320]	; (8007764 <HAL_DMA_IRQHandler+0x1dc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a4e      	ldr	r2, [pc, #312]	; (8007768 <HAL_DMA_IRQHandler+0x1e0>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a4d      	ldr	r2, [pc, #308]	; (800776c <HAL_DMA_IRQHandler+0x1e4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4b      	ldr	r2, [pc, #300]	; (8007770 <HAL_DMA_IRQHandler+0x1e8>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a4a      	ldr	r2, [pc, #296]	; (8007774 <HAL_DMA_IRQHandler+0x1ec>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_DMA_IRQHandler+0xd2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a48      	ldr	r2, [pc, #288]	; (8007778 <HAL_DMA_IRQHandler+0x1f0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d101      	bne.n	800765e <HAL_DMA_IRQHandler+0xd6>
 800765a:	2301      	movs	r3, #1
 800765c:	e000      	b.n	8007660 <HAL_DMA_IRQHandler+0xd8>
 800765e:	2300      	movs	r3, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 842b 	beq.w	8007ebc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800766a:	f003 031f 	and.w	r3, r3, #31
 800766e:	2208      	movs	r2, #8
 8007670:	409a      	lsls	r2, r3
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80a2 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2e      	ldr	r2, [pc, #184]	; (800773c <HAL_DMA_IRQHandler+0x1b4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d04a      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a2d      	ldr	r2, [pc, #180]	; (8007740 <HAL_DMA_IRQHandler+0x1b8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d045      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a2b      	ldr	r2, [pc, #172]	; (8007744 <HAL_DMA_IRQHandler+0x1bc>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d040      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <HAL_DMA_IRQHandler+0x1c0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d03b      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a28      	ldr	r2, [pc, #160]	; (800774c <HAL_DMA_IRQHandler+0x1c4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d036      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a27      	ldr	r2, [pc, #156]	; (8007750 <HAL_DMA_IRQHandler+0x1c8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d031      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a25      	ldr	r2, [pc, #148]	; (8007754 <HAL_DMA_IRQHandler+0x1cc>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d02c      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a24      	ldr	r2, [pc, #144]	; (8007758 <HAL_DMA_IRQHandler+0x1d0>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d027      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a22      	ldr	r2, [pc, #136]	; (800775c <HAL_DMA_IRQHandler+0x1d4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d022      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <HAL_DMA_IRQHandler+0x1d8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d01d      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <HAL_DMA_IRQHandler+0x1dc>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d018      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <HAL_DMA_IRQHandler+0x1e0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d013      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1c      	ldr	r2, [pc, #112]	; (800776c <HAL_DMA_IRQHandler+0x1e4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00e      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <HAL_DMA_IRQHandler+0x1e8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d009      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a19      	ldr	r2, [pc, #100]	; (8007774 <HAL_DMA_IRQHandler+0x1ec>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d004      	beq.n	800771c <HAL_DMA_IRQHandler+0x194>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <HAL_DMA_IRQHandler+0x1f0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d12f      	bne.n	800777c <HAL_DMA_IRQHandler+0x1f4>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	bf14      	ite	ne
 800772a:	2301      	movne	r3, #1
 800772c:	2300      	moveq	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	e02e      	b.n	8007790 <HAL_DMA_IRQHandler+0x208>
 8007732:	bf00      	nop
 8007734:	24000090 	.word	0x24000090
 8007738:	1b4e81b5 	.word	0x1b4e81b5
 800773c:	40020010 	.word	0x40020010
 8007740:	40020028 	.word	0x40020028
 8007744:	40020040 	.word	0x40020040
 8007748:	40020058 	.word	0x40020058
 800774c:	40020070 	.word	0x40020070
 8007750:	40020088 	.word	0x40020088
 8007754:	400200a0 	.word	0x400200a0
 8007758:	400200b8 	.word	0x400200b8
 800775c:	40020410 	.word	0x40020410
 8007760:	40020428 	.word	0x40020428
 8007764:	40020440 	.word	0x40020440
 8007768:	40020458 	.word	0x40020458
 800776c:	40020470 	.word	0x40020470
 8007770:	40020488 	.word	0x40020488
 8007774:	400204a0 	.word	0x400204a0
 8007778:	400204b8 	.word	0x400204b8
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 0204 	bic.w	r2, r2, #4
 80077a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2208      	movs	r2, #8
 80077ae:	409a      	lsls	r2, r3
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	f043 0201 	orr.w	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	69ba      	ldr	r2, [r7, #24]
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d06e      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a69      	ldr	r2, [pc, #420]	; (8007980 <HAL_DMA_IRQHandler+0x3f8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04a      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a67      	ldr	r2, [pc, #412]	; (8007984 <HAL_DMA_IRQHandler+0x3fc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d045      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a66      	ldr	r2, [pc, #408]	; (8007988 <HAL_DMA_IRQHandler+0x400>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d040      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a64      	ldr	r2, [pc, #400]	; (800798c <HAL_DMA_IRQHandler+0x404>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03b      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a63      	ldr	r2, [pc, #396]	; (8007990 <HAL_DMA_IRQHandler+0x408>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d036      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a61      	ldr	r2, [pc, #388]	; (8007994 <HAL_DMA_IRQHandler+0x40c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d031      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a60      	ldr	r2, [pc, #384]	; (8007998 <HAL_DMA_IRQHandler+0x410>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d02c      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a5e      	ldr	r2, [pc, #376]	; (800799c <HAL_DMA_IRQHandler+0x414>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d027      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a5d      	ldr	r2, [pc, #372]	; (80079a0 <HAL_DMA_IRQHandler+0x418>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a5b      	ldr	r2, [pc, #364]	; (80079a4 <HAL_DMA_IRQHandler+0x41c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01d      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a5a      	ldr	r2, [pc, #360]	; (80079a8 <HAL_DMA_IRQHandler+0x420>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a58      	ldr	r2, [pc, #352]	; (80079ac <HAL_DMA_IRQHandler+0x424>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a57      	ldr	r2, [pc, #348]	; (80079b0 <HAL_DMA_IRQHandler+0x428>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a55      	ldr	r2, [pc, #340]	; (80079b4 <HAL_DMA_IRQHandler+0x42c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a54      	ldr	r2, [pc, #336]	; (80079b8 <HAL_DMA_IRQHandler+0x430>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_DMA_IRQHandler+0x2ee>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a52      	ldr	r2, [pc, #328]	; (80079bc <HAL_DMA_IRQHandler+0x434>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10a      	bne.n	800788c <HAL_DMA_IRQHandler+0x304>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e003      	b.n	8007894 <HAL_DMA_IRQHandler+0x30c>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2300      	movs	r3, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2201      	movs	r2, #1
 80078a2:	409a      	lsls	r2, r3
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f043 0202 	orr.w	r2, r3, #2
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2204      	movs	r2, #4
 80078be:	409a      	lsls	r2, r3
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 808f 	beq.w	80079e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <HAL_DMA_IRQHandler+0x3f8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d04a      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <HAL_DMA_IRQHandler+0x3fc>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d045      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a29      	ldr	r2, [pc, #164]	; (8007988 <HAL_DMA_IRQHandler+0x400>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d040      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a27      	ldr	r2, [pc, #156]	; (800798c <HAL_DMA_IRQHandler+0x404>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d03b      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a26      	ldr	r2, [pc, #152]	; (8007990 <HAL_DMA_IRQHandler+0x408>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d036      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a24      	ldr	r2, [pc, #144]	; (8007994 <HAL_DMA_IRQHandler+0x40c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d031      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a23      	ldr	r2, [pc, #140]	; (8007998 <HAL_DMA_IRQHandler+0x410>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d02c      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a21      	ldr	r2, [pc, #132]	; (800799c <HAL_DMA_IRQHandler+0x414>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d027      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a20      	ldr	r2, [pc, #128]	; (80079a0 <HAL_DMA_IRQHandler+0x418>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d022      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <HAL_DMA_IRQHandler+0x41c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d01d      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <HAL_DMA_IRQHandler+0x420>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d018      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1b      	ldr	r2, [pc, #108]	; (80079ac <HAL_DMA_IRQHandler+0x424>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d013      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1a      	ldr	r2, [pc, #104]	; (80079b0 <HAL_DMA_IRQHandler+0x428>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00e      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <HAL_DMA_IRQHandler+0x42c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d009      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_DMA_IRQHandler+0x430>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d004      	beq.n	800796a <HAL_DMA_IRQHandler+0x3e2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a15      	ldr	r2, [pc, #84]	; (80079bc <HAL_DMA_IRQHandler+0x434>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d12a      	bne.n	80079c0 <HAL_DMA_IRQHandler+0x438>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e023      	b.n	80079c8 <HAL_DMA_IRQHandler+0x440>
 8007980:	40020010 	.word	0x40020010
 8007984:	40020028 	.word	0x40020028
 8007988:	40020040 	.word	0x40020040
 800798c:	40020058 	.word	0x40020058
 8007990:	40020070 	.word	0x40020070
 8007994:	40020088 	.word	0x40020088
 8007998:	400200a0 	.word	0x400200a0
 800799c:	400200b8 	.word	0x400200b8
 80079a0:	40020410 	.word	0x40020410
 80079a4:	40020428 	.word	0x40020428
 80079a8:	40020440 	.word	0x40020440
 80079ac:	40020458 	.word	0x40020458
 80079b0:	40020470 	.word	0x40020470
 80079b4:	40020488 	.word	0x40020488
 80079b8:	400204a0 	.word	0x400204a0
 80079bc:	400204b8 	.word	0x400204b8
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d0:	f003 031f 	and.w	r3, r3, #31
 80079d4:	2204      	movs	r2, #4
 80079d6:	409a      	lsls	r2, r3
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e0:	f043 0204 	orr.w	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ec:	f003 031f 	and.w	r3, r3, #31
 80079f0:	2210      	movs	r2, #16
 80079f2:	409a      	lsls	r2, r3
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	4013      	ands	r3, r2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80a6 	beq.w	8007b4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a85      	ldr	r2, [pc, #532]	; (8007c18 <HAL_DMA_IRQHandler+0x690>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d04a      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a83      	ldr	r2, [pc, #524]	; (8007c1c <HAL_DMA_IRQHandler+0x694>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d045      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a82      	ldr	r2, [pc, #520]	; (8007c20 <HAL_DMA_IRQHandler+0x698>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d040      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a80      	ldr	r2, [pc, #512]	; (8007c24 <HAL_DMA_IRQHandler+0x69c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d03b      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a7f      	ldr	r2, [pc, #508]	; (8007c28 <HAL_DMA_IRQHandler+0x6a0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d036      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a7d      	ldr	r2, [pc, #500]	; (8007c2c <HAL_DMA_IRQHandler+0x6a4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d031      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a7c      	ldr	r2, [pc, #496]	; (8007c30 <HAL_DMA_IRQHandler+0x6a8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d02c      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a7a      	ldr	r2, [pc, #488]	; (8007c34 <HAL_DMA_IRQHandler+0x6ac>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d027      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a79      	ldr	r2, [pc, #484]	; (8007c38 <HAL_DMA_IRQHandler+0x6b0>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d022      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a77      	ldr	r2, [pc, #476]	; (8007c3c <HAL_DMA_IRQHandler+0x6b4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01d      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a76      	ldr	r2, [pc, #472]	; (8007c40 <HAL_DMA_IRQHandler+0x6b8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d018      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a74      	ldr	r2, [pc, #464]	; (8007c44 <HAL_DMA_IRQHandler+0x6bc>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a73      	ldr	r2, [pc, #460]	; (8007c48 <HAL_DMA_IRQHandler+0x6c0>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d00e      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a71      	ldr	r2, [pc, #452]	; (8007c4c <HAL_DMA_IRQHandler+0x6c4>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d009      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a70      	ldr	r2, [pc, #448]	; (8007c50 <HAL_DMA_IRQHandler+0x6c8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x516>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a6e      	ldr	r2, [pc, #440]	; (8007c54 <HAL_DMA_IRQHandler+0x6cc>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d10a      	bne.n	8007ab4 <HAL_DMA_IRQHandler+0x52c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	bf14      	ite	ne
 8007aac:	2301      	movne	r3, #1
 8007aae:	2300      	moveq	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	e009      	b.n	8007ac8 <HAL_DMA_IRQHandler+0x540>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	bf14      	ite	ne
 8007ac2:	2301      	movne	r3, #1
 8007ac4:	2300      	moveq	r3, #0
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03e      	beq.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad0:	f003 031f 	and.w	r3, r3, #31
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	409a      	lsls	r2, r3
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d018      	beq.n	8007b1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d108      	bne.n	8007b0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d024      	beq.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
 8007b08:	e01f      	b.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d01b      	beq.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	e016      	b.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0208 	bic.w	r2, r2, #8
 8007b38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	2220      	movs	r2, #32
 8007b54:	409a      	lsls	r2, r3
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8110 	beq.w	8007d80 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2c      	ldr	r2, [pc, #176]	; (8007c18 <HAL_DMA_IRQHandler+0x690>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d04a      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2b      	ldr	r2, [pc, #172]	; (8007c1c <HAL_DMA_IRQHandler+0x694>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d045      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <HAL_DMA_IRQHandler+0x698>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d040      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <HAL_DMA_IRQHandler+0x69c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d03b      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <HAL_DMA_IRQHandler+0x6a0>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d036      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <HAL_DMA_IRQHandler+0x6a4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d031      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a23      	ldr	r2, [pc, #140]	; (8007c30 <HAL_DMA_IRQHandler+0x6a8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d02c      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <HAL_DMA_IRQHandler+0x6ac>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d027      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <HAL_DMA_IRQHandler+0x6b0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d022      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <HAL_DMA_IRQHandler+0x6b4>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d01d      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	; (8007c40 <HAL_DMA_IRQHandler+0x6b8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d018      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_DMA_IRQHandler+0x6bc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <HAL_DMA_IRQHandler+0x6c0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00e      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <HAL_DMA_IRQHandler+0x6c4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <HAL_DMA_IRQHandler+0x6c8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_DMA_IRQHandler+0x678>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <HAL_DMA_IRQHandler+0x6cc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d12b      	bne.n	8007c58 <HAL_DMA_IRQHandler+0x6d0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0310 	and.w	r3, r3, #16
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bf14      	ite	ne
 8007c0e:	2301      	movne	r3, #1
 8007c10:	2300      	moveq	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	e02a      	b.n	8007c6c <HAL_DMA_IRQHandler+0x6e4>
 8007c16:	bf00      	nop
 8007c18:	40020010 	.word	0x40020010
 8007c1c:	40020028 	.word	0x40020028
 8007c20:	40020040 	.word	0x40020040
 8007c24:	40020058 	.word	0x40020058
 8007c28:	40020070 	.word	0x40020070
 8007c2c:	40020088 	.word	0x40020088
 8007c30:	400200a0 	.word	0x400200a0
 8007c34:	400200b8 	.word	0x400200b8
 8007c38:	40020410 	.word	0x40020410
 8007c3c:	40020428 	.word	0x40020428
 8007c40:	40020440 	.word	0x40020440
 8007c44:	40020458 	.word	0x40020458
 8007c48:	40020470 	.word	0x40020470
 8007c4c:	40020488 	.word	0x40020488
 8007c50:	400204a0 	.word	0x400204a0
 8007c54:	400204b8 	.word	0x400204b8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8087 	beq.w	8007d80 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c76:	f003 031f 	and.w	r3, r3, #31
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	409a      	lsls	r2, r3
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d139      	bne.n	8007d02 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0216 	bic.w	r2, r2, #22
 8007c9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695a      	ldr	r2, [r3, #20]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <HAL_DMA_IRQHandler+0x736>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d007      	beq.n	8007cce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0208 	bic.w	r2, r2, #8
 8007ccc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	223f      	movs	r2, #63	; 0x3f
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 834a 	beq.w	800838c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
          }
          return;
 8007d00:	e344      	b.n	800838c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d018      	beq.n	8007d42 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d108      	bne.n	8007d30 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d02c      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	e027      	b.n	8007d80 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d023      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	4798      	blx	r3
 8007d40:	e01e      	b.n	8007d80 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10f      	bne.n	8007d70 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0210 	bic.w	r2, r2, #16
 8007d5e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8306 	beq.w	8008396 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 8088 	beq.w	8007ea8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a7a      	ldr	r2, [pc, #488]	; (8007f90 <HAL_DMA_IRQHandler+0xa08>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d04a      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a79      	ldr	r2, [pc, #484]	; (8007f94 <HAL_DMA_IRQHandler+0xa0c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d045      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a77      	ldr	r2, [pc, #476]	; (8007f98 <HAL_DMA_IRQHandler+0xa10>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d040      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a76      	ldr	r2, [pc, #472]	; (8007f9c <HAL_DMA_IRQHandler+0xa14>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d03b      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a74      	ldr	r2, [pc, #464]	; (8007fa0 <HAL_DMA_IRQHandler+0xa18>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d036      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a73      	ldr	r2, [pc, #460]	; (8007fa4 <HAL_DMA_IRQHandler+0xa1c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d031      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a71      	ldr	r2, [pc, #452]	; (8007fa8 <HAL_DMA_IRQHandler+0xa20>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d02c      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a70      	ldr	r2, [pc, #448]	; (8007fac <HAL_DMA_IRQHandler+0xa24>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d027      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a6e      	ldr	r2, [pc, #440]	; (8007fb0 <HAL_DMA_IRQHandler+0xa28>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d022      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a6d      	ldr	r2, [pc, #436]	; (8007fb4 <HAL_DMA_IRQHandler+0xa2c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d01d      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a6b      	ldr	r2, [pc, #428]	; (8007fb8 <HAL_DMA_IRQHandler+0xa30>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d018      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a6a      	ldr	r2, [pc, #424]	; (8007fbc <HAL_DMA_IRQHandler+0xa34>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a68      	ldr	r2, [pc, #416]	; (8007fc0 <HAL_DMA_IRQHandler+0xa38>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a67      	ldr	r2, [pc, #412]	; (8007fc4 <HAL_DMA_IRQHandler+0xa3c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a65      	ldr	r2, [pc, #404]	; (8007fc8 <HAL_DMA_IRQHandler+0xa40>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x8b8>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a64      	ldr	r2, [pc, #400]	; (8007fcc <HAL_DMA_IRQHandler+0xa44>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <HAL_DMA_IRQHandler+0x8ca>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0201 	bic.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	e007      	b.n	8007e62 <HAL_DMA_IRQHandler+0x8da>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0201 	bic.w	r2, r2, #1
 8007e60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d307      	bcc.n	8007e7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f2      	bne.n	8007e62 <HAL_DMA_IRQHandler+0x8da>
 8007e7c:	e000      	b.n	8007e80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2203      	movs	r2, #3
 8007e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007e96:	e003      	b.n	8007ea0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 8272 	beq.w	8008396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
 8007eba:	e26c      	b.n	8008396 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a43      	ldr	r2, [pc, #268]	; (8007fd0 <HAL_DMA_IRQHandler+0xa48>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d022      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a42      	ldr	r2, [pc, #264]	; (8007fd4 <HAL_DMA_IRQHandler+0xa4c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d01d      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a40      	ldr	r2, [pc, #256]	; (8007fd8 <HAL_DMA_IRQHandler+0xa50>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d018      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a3f      	ldr	r2, [pc, #252]	; (8007fdc <HAL_DMA_IRQHandler+0xa54>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d013      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a3d      	ldr	r2, [pc, #244]	; (8007fe0 <HAL_DMA_IRQHandler+0xa58>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00e      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a3c      	ldr	r2, [pc, #240]	; (8007fe4 <HAL_DMA_IRQHandler+0xa5c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d009      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a3a      	ldr	r2, [pc, #232]	; (8007fe8 <HAL_DMA_IRQHandler+0xa60>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d004      	beq.n	8007f0c <HAL_DMA_IRQHandler+0x984>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a39      	ldr	r2, [pc, #228]	; (8007fec <HAL_DMA_IRQHandler+0xa64>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d101      	bne.n	8007f10 <HAL_DMA_IRQHandler+0x988>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e000      	b.n	8007f12 <HAL_DMA_IRQHandler+0x98a>
 8007f10:	2300      	movs	r3, #0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 823f 	beq.w	8008396 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f24:	f003 031f 	and.w	r3, r3, #31
 8007f28:	2204      	movs	r2, #4
 8007f2a:	409a      	lsls	r2, r3
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80cd 	beq.w	80080d0 <HAL_DMA_IRQHandler+0xb48>
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80c7 	beq.w	80080d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f46:	f003 031f 	and.w	r3, r3, #31
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	409a      	lsls	r2, r3
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d049      	beq.n	8007ff0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8210 	beq.w	8008390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f78:	e20a      	b.n	8008390 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8206 	beq.w	8008390 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f8c:	e200      	b.n	8008390 <HAL_DMA_IRQHandler+0xe08>
 8007f8e:	bf00      	nop
 8007f90:	40020010 	.word	0x40020010
 8007f94:	40020028 	.word	0x40020028
 8007f98:	40020040 	.word	0x40020040
 8007f9c:	40020058 	.word	0x40020058
 8007fa0:	40020070 	.word	0x40020070
 8007fa4:	40020088 	.word	0x40020088
 8007fa8:	400200a0 	.word	0x400200a0
 8007fac:	400200b8 	.word	0x400200b8
 8007fb0:	40020410 	.word	0x40020410
 8007fb4:	40020428 	.word	0x40020428
 8007fb8:	40020440 	.word	0x40020440
 8007fbc:	40020458 	.word	0x40020458
 8007fc0:	40020470 	.word	0x40020470
 8007fc4:	40020488 	.word	0x40020488
 8007fc8:	400204a0 	.word	0x400204a0
 8007fcc:	400204b8 	.word	0x400204b8
 8007fd0:	58025408 	.word	0x58025408
 8007fd4:	5802541c 	.word	0x5802541c
 8007fd8:	58025430 	.word	0x58025430
 8007fdc:	58025444 	.word	0x58025444
 8007fe0:	58025458 	.word	0x58025458
 8007fe4:	5802546c 	.word	0x5802546c
 8007fe8:	58025480 	.word	0x58025480
 8007fec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d160      	bne.n	80080bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a7f      	ldr	r2, [pc, #508]	; (80081fc <HAL_DMA_IRQHandler+0xc74>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d04a      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a7d      	ldr	r2, [pc, #500]	; (8008200 <HAL_DMA_IRQHandler+0xc78>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d045      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a7c      	ldr	r2, [pc, #496]	; (8008204 <HAL_DMA_IRQHandler+0xc7c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d040      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a7a      	ldr	r2, [pc, #488]	; (8008208 <HAL_DMA_IRQHandler+0xc80>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d03b      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a79      	ldr	r2, [pc, #484]	; (800820c <HAL_DMA_IRQHandler+0xc84>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d036      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a77      	ldr	r2, [pc, #476]	; (8008210 <HAL_DMA_IRQHandler+0xc88>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d031      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a76      	ldr	r2, [pc, #472]	; (8008214 <HAL_DMA_IRQHandler+0xc8c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d02c      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a74      	ldr	r2, [pc, #464]	; (8008218 <HAL_DMA_IRQHandler+0xc90>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d027      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a73      	ldr	r2, [pc, #460]	; (800821c <HAL_DMA_IRQHandler+0xc94>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d022      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a71      	ldr	r2, [pc, #452]	; (8008220 <HAL_DMA_IRQHandler+0xc98>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d01d      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a70      	ldr	r2, [pc, #448]	; (8008224 <HAL_DMA_IRQHandler+0xc9c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d018      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a6e      	ldr	r2, [pc, #440]	; (8008228 <HAL_DMA_IRQHandler+0xca0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d013      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6d      	ldr	r2, [pc, #436]	; (800822c <HAL_DMA_IRQHandler+0xca4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00e      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a6b      	ldr	r2, [pc, #428]	; (8008230 <HAL_DMA_IRQHandler+0xca8>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a6a      	ldr	r2, [pc, #424]	; (8008234 <HAL_DMA_IRQHandler+0xcac>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d004      	beq.n	800809a <HAL_DMA_IRQHandler+0xb12>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a68      	ldr	r2, [pc, #416]	; (8008238 <HAL_DMA_IRQHandler+0xcb0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d108      	bne.n	80080ac <HAL_DMA_IRQHandler+0xb24>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0208 	bic.w	r2, r2, #8
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e007      	b.n	80080bc <HAL_DMA_IRQHandler+0xb34>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 8165 	beq.w	8008390 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ce:	e15f      	b.n	8008390 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2202      	movs	r2, #2
 80080da:	409a      	lsls	r2, r3
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	4013      	ands	r3, r2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80c5 	beq.w	8008270 <HAL_DMA_IRQHandler+0xce8>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80bf 	beq.w	8008270 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2202      	movs	r2, #2
 80080fc:	409a      	lsls	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d018      	beq.n	800813e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d109      	bne.n	800812a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 813a 	beq.w	8008394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008128:	e134      	b.n	8008394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 8130 	beq.w	8008394 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800813c:	e12a      	b.n	8008394 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 8089 	bne.w	800825c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a2b      	ldr	r2, [pc, #172]	; (80081fc <HAL_DMA_IRQHandler+0xc74>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d04a      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a29      	ldr	r2, [pc, #164]	; (8008200 <HAL_DMA_IRQHandler+0xc78>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d045      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a28      	ldr	r2, [pc, #160]	; (8008204 <HAL_DMA_IRQHandler+0xc7c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d040      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a26      	ldr	r2, [pc, #152]	; (8008208 <HAL_DMA_IRQHandler+0xc80>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d03b      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a25      	ldr	r2, [pc, #148]	; (800820c <HAL_DMA_IRQHandler+0xc84>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d036      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a23      	ldr	r2, [pc, #140]	; (8008210 <HAL_DMA_IRQHandler+0xc88>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d031      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a22      	ldr	r2, [pc, #136]	; (8008214 <HAL_DMA_IRQHandler+0xc8c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d02c      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a20      	ldr	r2, [pc, #128]	; (8008218 <HAL_DMA_IRQHandler+0xc90>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d027      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a1f      	ldr	r2, [pc, #124]	; (800821c <HAL_DMA_IRQHandler+0xc94>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d022      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a1d      	ldr	r2, [pc, #116]	; (8008220 <HAL_DMA_IRQHandler+0xc98>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d01d      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a1c      	ldr	r2, [pc, #112]	; (8008224 <HAL_DMA_IRQHandler+0xc9c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d018      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1a      	ldr	r2, [pc, #104]	; (8008228 <HAL_DMA_IRQHandler+0xca0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a19      	ldr	r2, [pc, #100]	; (800822c <HAL_DMA_IRQHandler+0xca4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00e      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a17      	ldr	r2, [pc, #92]	; (8008230 <HAL_DMA_IRQHandler+0xca8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d009      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a16      	ldr	r2, [pc, #88]	; (8008234 <HAL_DMA_IRQHandler+0xcac>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d004      	beq.n	80081ea <HAL_DMA_IRQHandler+0xc62>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a14      	ldr	r2, [pc, #80]	; (8008238 <HAL_DMA_IRQHandler+0xcb0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d128      	bne.n	800823c <HAL_DMA_IRQHandler+0xcb4>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f022 0214 	bic.w	r2, r2, #20
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	e027      	b.n	800824c <HAL_DMA_IRQHandler+0xcc4>
 80081fc:	40020010 	.word	0x40020010
 8008200:	40020028 	.word	0x40020028
 8008204:	40020040 	.word	0x40020040
 8008208:	40020058 	.word	0x40020058
 800820c:	40020070 	.word	0x40020070
 8008210:	40020088 	.word	0x40020088
 8008214:	400200a0 	.word	0x400200a0
 8008218:	400200b8 	.word	0x400200b8
 800821c:	40020410 	.word	0x40020410
 8008220:	40020428 	.word	0x40020428
 8008224:	40020440 	.word	0x40020440
 8008228:	40020458 	.word	0x40020458
 800822c:	40020470 	.word	0x40020470
 8008230:	40020488 	.word	0x40020488
 8008234:	400204a0 	.word	0x400204a0
 8008238:	400204b8 	.word	0x400204b8
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 020a 	bic.w	r2, r2, #10
 800824a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8097 	beq.w	8008394 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800826e:	e091      	b.n	8008394 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	2208      	movs	r2, #8
 800827a:	409a      	lsls	r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8088 	beq.w	8008396 <HAL_DMA_IRQHandler+0xe0e>
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8082 	beq.w	8008396 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a41      	ldr	r2, [pc, #260]	; (800839c <HAL_DMA_IRQHandler+0xe14>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d04a      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3f      	ldr	r2, [pc, #252]	; (80083a0 <HAL_DMA_IRQHandler+0xe18>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d045      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3e      	ldr	r2, [pc, #248]	; (80083a4 <HAL_DMA_IRQHandler+0xe1c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d040      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a3c      	ldr	r2, [pc, #240]	; (80083a8 <HAL_DMA_IRQHandler+0xe20>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d03b      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a3b      	ldr	r2, [pc, #236]	; (80083ac <HAL_DMA_IRQHandler+0xe24>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d036      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a39      	ldr	r2, [pc, #228]	; (80083b0 <HAL_DMA_IRQHandler+0xe28>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d031      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a38      	ldr	r2, [pc, #224]	; (80083b4 <HAL_DMA_IRQHandler+0xe2c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d02c      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a36      	ldr	r2, [pc, #216]	; (80083b8 <HAL_DMA_IRQHandler+0xe30>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d027      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a35      	ldr	r2, [pc, #212]	; (80083bc <HAL_DMA_IRQHandler+0xe34>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d022      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a33      	ldr	r2, [pc, #204]	; (80083c0 <HAL_DMA_IRQHandler+0xe38>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d01d      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a32      	ldr	r2, [pc, #200]	; (80083c4 <HAL_DMA_IRQHandler+0xe3c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d018      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a30      	ldr	r2, [pc, #192]	; (80083c8 <HAL_DMA_IRQHandler+0xe40>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d013      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a2f      	ldr	r2, [pc, #188]	; (80083cc <HAL_DMA_IRQHandler+0xe44>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00e      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a2d      	ldr	r2, [pc, #180]	; (80083d0 <HAL_DMA_IRQHandler+0xe48>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d009      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a2c      	ldr	r2, [pc, #176]	; (80083d4 <HAL_DMA_IRQHandler+0xe4c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_DMA_IRQHandler+0xdaa>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a2a      	ldr	r2, [pc, #168]	; (80083d8 <HAL_DMA_IRQHandler+0xe50>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d108      	bne.n	8008344 <HAL_DMA_IRQHandler+0xdbc>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 021c 	bic.w	r2, r2, #28
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e007      	b.n	8008354 <HAL_DMA_IRQHandler+0xdcc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 020e 	bic.w	r2, r2, #14
 8008352:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008358:	f003 031f 	and.w	r3, r3, #31
 800835c:	2201      	movs	r2, #1
 800835e:	409a      	lsls	r2, r3
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d009      	beq.n	8008396 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
 800838a:	e004      	b.n	8008396 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800838c:	bf00      	nop
 800838e:	e002      	b.n	8008396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008390:	bf00      	nop
 8008392:	e000      	b.n	8008396 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008394:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008396:	3728      	adds	r7, #40	; 0x28
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40020010 	.word	0x40020010
 80083a0:	40020028 	.word	0x40020028
 80083a4:	40020040 	.word	0x40020040
 80083a8:	40020058 	.word	0x40020058
 80083ac:	40020070 	.word	0x40020070
 80083b0:	40020088 	.word	0x40020088
 80083b4:	400200a0 	.word	0x400200a0
 80083b8:	400200b8 	.word	0x400200b8
 80083bc:	40020410 	.word	0x40020410
 80083c0:	40020428 	.word	0x40020428
 80083c4:	40020440 	.word	0x40020440
 80083c8:	40020458 	.word	0x40020458
 80083cc:	40020470 	.word	0x40020470
 80083d0:	40020488 	.word	0x40020488
 80083d4:	400204a0 	.word	0x400204a0
 80083d8:	400204b8 	.word	0x400204b8

080083dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a7f      	ldr	r2, [pc, #508]	; (80085f8 <DMA_SetConfig+0x21c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d072      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a7d      	ldr	r2, [pc, #500]	; (80085fc <DMA_SetConfig+0x220>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d06d      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a7c      	ldr	r2, [pc, #496]	; (8008600 <DMA_SetConfig+0x224>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d068      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a7a      	ldr	r2, [pc, #488]	; (8008604 <DMA_SetConfig+0x228>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d063      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a79      	ldr	r2, [pc, #484]	; (8008608 <DMA_SetConfig+0x22c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d05e      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a77      	ldr	r2, [pc, #476]	; (800860c <DMA_SetConfig+0x230>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d059      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a76      	ldr	r2, [pc, #472]	; (8008610 <DMA_SetConfig+0x234>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d054      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a74      	ldr	r2, [pc, #464]	; (8008614 <DMA_SetConfig+0x238>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d04f      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a73      	ldr	r2, [pc, #460]	; (8008618 <DMA_SetConfig+0x23c>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d04a      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a71      	ldr	r2, [pc, #452]	; (800861c <DMA_SetConfig+0x240>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d045      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a70      	ldr	r2, [pc, #448]	; (8008620 <DMA_SetConfig+0x244>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d040      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a6e      	ldr	r2, [pc, #440]	; (8008624 <DMA_SetConfig+0x248>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d03b      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a6d      	ldr	r2, [pc, #436]	; (8008628 <DMA_SetConfig+0x24c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d036      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a6b      	ldr	r2, [pc, #428]	; (800862c <DMA_SetConfig+0x250>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d031      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a6a      	ldr	r2, [pc, #424]	; (8008630 <DMA_SetConfig+0x254>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d02c      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a68      	ldr	r2, [pc, #416]	; (8008634 <DMA_SetConfig+0x258>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d027      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a67      	ldr	r2, [pc, #412]	; (8008638 <DMA_SetConfig+0x25c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d022      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a65      	ldr	r2, [pc, #404]	; (800863c <DMA_SetConfig+0x260>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01d      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a64      	ldr	r2, [pc, #400]	; (8008640 <DMA_SetConfig+0x264>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d018      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a62      	ldr	r2, [pc, #392]	; (8008644 <DMA_SetConfig+0x268>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a61      	ldr	r2, [pc, #388]	; (8008648 <DMA_SetConfig+0x26c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00e      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a5f      	ldr	r2, [pc, #380]	; (800864c <DMA_SetConfig+0x270>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d009      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a5e      	ldr	r2, [pc, #376]	; (8008650 <DMA_SetConfig+0x274>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d004      	beq.n	80084e6 <DMA_SetConfig+0x10a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5c      	ldr	r2, [pc, #368]	; (8008654 <DMA_SetConfig+0x278>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <DMA_SetConfig+0x10e>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <DMA_SetConfig+0x110>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800850a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a39      	ldr	r2, [pc, #228]	; (80085f8 <DMA_SetConfig+0x21c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d04a      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a38      	ldr	r2, [pc, #224]	; (80085fc <DMA_SetConfig+0x220>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d045      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a36      	ldr	r2, [pc, #216]	; (8008600 <DMA_SetConfig+0x224>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d040      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a35      	ldr	r2, [pc, #212]	; (8008604 <DMA_SetConfig+0x228>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d03b      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a33      	ldr	r2, [pc, #204]	; (8008608 <DMA_SetConfig+0x22c>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d036      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a32      	ldr	r2, [pc, #200]	; (800860c <DMA_SetConfig+0x230>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d031      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a30      	ldr	r2, [pc, #192]	; (8008610 <DMA_SetConfig+0x234>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d02c      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a2f      	ldr	r2, [pc, #188]	; (8008614 <DMA_SetConfig+0x238>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d027      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a2d      	ldr	r2, [pc, #180]	; (8008618 <DMA_SetConfig+0x23c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d022      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2c      	ldr	r2, [pc, #176]	; (800861c <DMA_SetConfig+0x240>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d01d      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a2a      	ldr	r2, [pc, #168]	; (8008620 <DMA_SetConfig+0x244>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d018      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a29      	ldr	r2, [pc, #164]	; (8008624 <DMA_SetConfig+0x248>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d013      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <DMA_SetConfig+0x24c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00e      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a26      	ldr	r2, [pc, #152]	; (800862c <DMA_SetConfig+0x250>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d009      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a24      	ldr	r2, [pc, #144]	; (8008630 <DMA_SetConfig+0x254>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <DMA_SetConfig+0x1d0>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a23      	ldr	r2, [pc, #140]	; (8008634 <DMA_SetConfig+0x258>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d101      	bne.n	80085b0 <DMA_SetConfig+0x1d4>
 80085ac:	2301      	movs	r3, #1
 80085ae:	e000      	b.n	80085b2 <DMA_SetConfig+0x1d6>
 80085b0:	2300      	movs	r3, #0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d059      	beq.n	800866a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ba:	f003 031f 	and.w	r3, r3, #31
 80085be:	223f      	movs	r2, #63	; 0x3f
 80085c0:	409a      	lsls	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80085d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d138      	bne.n	8008658 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80085f6:	e086      	b.n	8008706 <DMA_SetConfig+0x32a>
 80085f8:	40020010 	.word	0x40020010
 80085fc:	40020028 	.word	0x40020028
 8008600:	40020040 	.word	0x40020040
 8008604:	40020058 	.word	0x40020058
 8008608:	40020070 	.word	0x40020070
 800860c:	40020088 	.word	0x40020088
 8008610:	400200a0 	.word	0x400200a0
 8008614:	400200b8 	.word	0x400200b8
 8008618:	40020410 	.word	0x40020410
 800861c:	40020428 	.word	0x40020428
 8008620:	40020440 	.word	0x40020440
 8008624:	40020458 	.word	0x40020458
 8008628:	40020470 	.word	0x40020470
 800862c:	40020488 	.word	0x40020488
 8008630:	400204a0 	.word	0x400204a0
 8008634:	400204b8 	.word	0x400204b8
 8008638:	58025408 	.word	0x58025408
 800863c:	5802541c 	.word	0x5802541c
 8008640:	58025430 	.word	0x58025430
 8008644:	58025444 	.word	0x58025444
 8008648:	58025458 	.word	0x58025458
 800864c:	5802546c 	.word	0x5802546c
 8008650:	58025480 	.word	0x58025480
 8008654:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]
}
 8008668:	e04d      	b.n	8008706 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a29      	ldr	r2, [pc, #164]	; (8008714 <DMA_SetConfig+0x338>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d022      	beq.n	80086ba <DMA_SetConfig+0x2de>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a27      	ldr	r2, [pc, #156]	; (8008718 <DMA_SetConfig+0x33c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d01d      	beq.n	80086ba <DMA_SetConfig+0x2de>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a26      	ldr	r2, [pc, #152]	; (800871c <DMA_SetConfig+0x340>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d018      	beq.n	80086ba <DMA_SetConfig+0x2de>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a24      	ldr	r2, [pc, #144]	; (8008720 <DMA_SetConfig+0x344>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d013      	beq.n	80086ba <DMA_SetConfig+0x2de>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a23      	ldr	r2, [pc, #140]	; (8008724 <DMA_SetConfig+0x348>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00e      	beq.n	80086ba <DMA_SetConfig+0x2de>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <DMA_SetConfig+0x34c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d009      	beq.n	80086ba <DMA_SetConfig+0x2de>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a20      	ldr	r2, [pc, #128]	; (800872c <DMA_SetConfig+0x350>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <DMA_SetConfig+0x2de>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a1e      	ldr	r2, [pc, #120]	; (8008730 <DMA_SetConfig+0x354>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d101      	bne.n	80086be <DMA_SetConfig+0x2e2>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <DMA_SetConfig+0x2e4>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d020      	beq.n	8008706 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c8:	f003 031f 	and.w	r3, r3, #31
 80086cc:	2201      	movs	r2, #1
 80086ce:	409a      	lsls	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d108      	bne.n	80086f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	60da      	str	r2, [r3, #12]
}
 80086f4:	e007      	b.n	8008706 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	60da      	str	r2, [r3, #12]
}
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	58025408 	.word	0x58025408
 8008718:	5802541c 	.word	0x5802541c
 800871c:	58025430 	.word	0x58025430
 8008720:	58025444 	.word	0x58025444
 8008724:	58025458 	.word	0x58025458
 8008728:	5802546c 	.word	0x5802546c
 800872c:	58025480 	.word	0x58025480
 8008730:	58025494 	.word	0x58025494

08008734 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a42      	ldr	r2, [pc, #264]	; (800884c <DMA_CalcBaseAndBitshift+0x118>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d04a      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a41      	ldr	r2, [pc, #260]	; (8008850 <DMA_CalcBaseAndBitshift+0x11c>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d045      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a3f      	ldr	r2, [pc, #252]	; (8008854 <DMA_CalcBaseAndBitshift+0x120>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d040      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a3e      	ldr	r2, [pc, #248]	; (8008858 <DMA_CalcBaseAndBitshift+0x124>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d03b      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a3c      	ldr	r2, [pc, #240]	; (800885c <DMA_CalcBaseAndBitshift+0x128>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d036      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a3b      	ldr	r2, [pc, #236]	; (8008860 <DMA_CalcBaseAndBitshift+0x12c>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d031      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a39      	ldr	r2, [pc, #228]	; (8008864 <DMA_CalcBaseAndBitshift+0x130>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d02c      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a38      	ldr	r2, [pc, #224]	; (8008868 <DMA_CalcBaseAndBitshift+0x134>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d027      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a36      	ldr	r2, [pc, #216]	; (800886c <DMA_CalcBaseAndBitshift+0x138>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d022      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a35      	ldr	r2, [pc, #212]	; (8008870 <DMA_CalcBaseAndBitshift+0x13c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d01d      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a33      	ldr	r2, [pc, #204]	; (8008874 <DMA_CalcBaseAndBitshift+0x140>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d018      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a32      	ldr	r2, [pc, #200]	; (8008878 <DMA_CalcBaseAndBitshift+0x144>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d013      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a30      	ldr	r2, [pc, #192]	; (800887c <DMA_CalcBaseAndBitshift+0x148>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00e      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a2f      	ldr	r2, [pc, #188]	; (8008880 <DMA_CalcBaseAndBitshift+0x14c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d009      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a2d      	ldr	r2, [pc, #180]	; (8008884 <DMA_CalcBaseAndBitshift+0x150>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <DMA_CalcBaseAndBitshift+0xa8>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a2c      	ldr	r2, [pc, #176]	; (8008888 <DMA_CalcBaseAndBitshift+0x154>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d101      	bne.n	80087e0 <DMA_CalcBaseAndBitshift+0xac>
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <DMA_CalcBaseAndBitshift+0xae>
 80087e0:	2300      	movs	r3, #0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d024      	beq.n	8008830 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	3b10      	subs	r3, #16
 80087ee:	4a27      	ldr	r2, [pc, #156]	; (800888c <DMA_CalcBaseAndBitshift+0x158>)
 80087f0:	fba2 2303 	umull	r2, r3, r2, r3
 80087f4:	091b      	lsrs	r3, r3, #4
 80087f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	4a24      	ldr	r2, [pc, #144]	; (8008890 <DMA_CalcBaseAndBitshift+0x15c>)
 8008800:	5cd3      	ldrb	r3, [r2, r3]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d908      	bls.n	8008820 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	4b1f      	ldr	r3, [pc, #124]	; (8008894 <DMA_CalcBaseAndBitshift+0x160>)
 8008816:	4013      	ands	r3, r2
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	659a      	str	r2, [r3, #88]	; 0x58
 800881e:	e00d      	b.n	800883c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	4b1b      	ldr	r3, [pc, #108]	; (8008894 <DMA_CalcBaseAndBitshift+0x160>)
 8008828:	4013      	ands	r3, r2
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6593      	str	r3, [r2, #88]	; 0x58
 800882e:	e005      	b.n	800883c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40020010 	.word	0x40020010
 8008850:	40020028 	.word	0x40020028
 8008854:	40020040 	.word	0x40020040
 8008858:	40020058 	.word	0x40020058
 800885c:	40020070 	.word	0x40020070
 8008860:	40020088 	.word	0x40020088
 8008864:	400200a0 	.word	0x400200a0
 8008868:	400200b8 	.word	0x400200b8
 800886c:	40020410 	.word	0x40020410
 8008870:	40020428 	.word	0x40020428
 8008874:	40020440 	.word	0x40020440
 8008878:	40020458 	.word	0x40020458
 800887c:	40020470 	.word	0x40020470
 8008880:	40020488 	.word	0x40020488
 8008884:	400204a0 	.word	0x400204a0
 8008888:	400204b8 	.word	0x400204b8
 800888c:	aaaaaaab 	.word	0xaaaaaaab
 8008890:	080172c4 	.word	0x080172c4
 8008894:	fffffc00 	.word	0xfffffc00

08008898 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d120      	bne.n	80088ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d858      	bhi.n	8008966 <DMA_CheckFifoParam+0xce>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <DMA_CheckFifoParam+0x24>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088cd 	.word	0x080088cd
 80088c0:	080088df 	.word	0x080088df
 80088c4:	080088cd 	.word	0x080088cd
 80088c8:	08008967 	.word	0x08008967
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d048      	beq.n	800896a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088dc:	e045      	b.n	800896a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80088e6:	d142      	bne.n	800896e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80088ec:	e03f      	b.n	800896e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f6:	d123      	bne.n	8008940 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d838      	bhi.n	8008972 <DMA_CheckFifoParam+0xda>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <DMA_CheckFifoParam+0x70>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008919 	.word	0x08008919
 800890c:	0800891f 	.word	0x0800891f
 8008910:	08008919 	.word	0x08008919
 8008914:	08008931 	.word	0x08008931
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
        break;
 800891c:	e030      	b.n	8008980 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d025      	beq.n	8008976 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800892e:	e022      	b.n	8008976 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008934:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008938:	d11f      	bne.n	800897a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800893e:	e01c      	b.n	800897a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	2b02      	cmp	r3, #2
 8008946:	d902      	bls.n	800894e <DMA_CheckFifoParam+0xb6>
 8008948:	2b03      	cmp	r3, #3
 800894a:	d003      	beq.n	8008954 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800894c:	e018      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	73fb      	strb	r3, [r7, #15]
        break;
 8008952:	e015      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00e      	beq.n	800897e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	e00b      	b.n	800897e <DMA_CheckFifoParam+0xe6>
        break;
 8008966:	bf00      	nop
 8008968:	e00a      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        break;
 800896a:	bf00      	nop
 800896c:	e008      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        break;
 800896e:	bf00      	nop
 8008970:	e006      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        break;
 8008972:	bf00      	nop
 8008974:	e004      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        break;
 8008976:	bf00      	nop
 8008978:	e002      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
        break;
 800897a:	bf00      	nop
 800897c:	e000      	b.n	8008980 <DMA_CheckFifoParam+0xe8>
    break;
 800897e:	bf00      	nop
    }
  }

  return status;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop

08008990 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a38      	ldr	r2, [pc, #224]	; (8008a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d022      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a36      	ldr	r2, [pc, #216]	; (8008a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01d      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a35      	ldr	r2, [pc, #212]	; (8008a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d018      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a33      	ldr	r2, [pc, #204]	; (8008a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a32      	ldr	r2, [pc, #200]	; (8008a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00e      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a30      	ldr	r2, [pc, #192]	; (8008a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2f      	ldr	r2, [pc, #188]	; (8008a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a2d      	ldr	r2, [pc, #180]	; (8008aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d101      	bne.n	80089f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01a      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	3b08      	subs	r3, #8
 8008a00:	4a28      	ldr	r2, [pc, #160]	; (8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	091b      	lsrs	r3, r3, #4
 8008a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4b26      	ldr	r3, [pc, #152]	; (8008aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	461a      	mov	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a24      	ldr	r2, [pc, #144]	; (8008aac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 031f 	and.w	r3, r3, #31
 8008a24:	2201      	movs	r2, #1
 8008a26:	409a      	lsls	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a2c:	e024      	b.n	8008a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3b10      	subs	r3, #16
 8008a36:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a38:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3c:	091b      	lsrs	r3, r3, #4
 8008a3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	4a1c      	ldr	r2, [pc, #112]	; (8008ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d806      	bhi.n	8008a56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d902      	bls.n	8008a56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3308      	adds	r3, #8
 8008a54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4b18      	ldr	r3, [pc, #96]	; (8008abc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a5a:	4413      	add	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	461a      	mov	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a16      	ldr	r2, [pc, #88]	; (8008ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008a68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f003 031f 	and.w	r3, r3, #31
 8008a70:	2201      	movs	r2, #1
 8008a72:	409a      	lsls	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a78:	bf00      	nop
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	58025408 	.word	0x58025408
 8008a88:	5802541c 	.word	0x5802541c
 8008a8c:	58025430 	.word	0x58025430
 8008a90:	58025444 	.word	0x58025444
 8008a94:	58025458 	.word	0x58025458
 8008a98:	5802546c 	.word	0x5802546c
 8008a9c:	58025480 	.word	0x58025480
 8008aa0:	58025494 	.word	0x58025494
 8008aa4:	cccccccd 	.word	0xcccccccd
 8008aa8:	16009600 	.word	0x16009600
 8008aac:	58025880 	.word	0x58025880
 8008ab0:	aaaaaaab 	.word	0xaaaaaaab
 8008ab4:	400204b8 	.word	0x400204b8
 8008ab8:	4002040f 	.word	0x4002040f
 8008abc:	10008200 	.word	0x10008200
 8008ac0:	40020880 	.word	0x40020880

08008ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04a      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d847      	bhi.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a25      	ldr	r2, [pc, #148]	; (8008b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d022      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a24      	ldr	r2, [pc, #144]	; (8008b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d01d      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a22      	ldr	r2, [pc, #136]	; (8008b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d018      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a21      	ldr	r2, [pc, #132]	; (8008b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d013      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1f      	ldr	r2, [pc, #124]	; (8008b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00e      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1e      	ldr	r2, [pc, #120]	; (8008b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d009      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d004      	beq.n	8008b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d101      	bne.n	8008b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4b17      	ldr	r3, [pc, #92]	; (8008b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b3e:	4413      	add	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b4c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b4e:	e009      	b.n	8008b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b54:	4413      	add	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008b62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	2201      	movs	r2, #1
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	58025408 	.word	0x58025408
 8008b80:	5802541c 	.word	0x5802541c
 8008b84:	58025430 	.word	0x58025430
 8008b88:	58025444 	.word	0x58025444
 8008b8c:	58025458 	.word	0x58025458
 8008b90:	5802546c 	.word	0x5802546c
 8008b94:	58025480 	.word	0x58025480
 8008b98:	58025494 	.word	0x58025494
 8008b9c:	1600963f 	.word	0x1600963f
 8008ba0:	58025940 	.word	0x58025940
 8008ba4:	1000823f 	.word	0x1000823f
 8008ba8:	40020940 	.word	0x40020940

08008bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b089      	sub	sp, #36	; 0x24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bba:	4b89      	ldr	r3, [pc, #548]	; (8008de0 <HAL_GPIO_Init+0x234>)
 8008bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bbe:	e194      	b.n	8008eea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bcc:	4013      	ands	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 8186 	beq.w	8008ee4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d005      	beq.n	8008bf0 <HAL_GPIO_Init+0x44>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d130      	bne.n	8008c52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008c00:	43db      	mvns	r3, r3
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	4013      	ands	r3, r2
 8008c06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	005b      	lsls	r3, r3, #1
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c26:	2201      	movs	r2, #1
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2e:	43db      	mvns	r3, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	4013      	ands	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	091b      	lsrs	r3, r3, #4
 8008c3c:	f003 0201 	and.w	r2, r3, #1
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	69ba      	ldr	r2, [r7, #24]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f003 0303 	and.w	r3, r3, #3
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d017      	beq.n	8008c8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	2203      	movs	r2, #3
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4013      	ands	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	689a      	ldr	r2, [r3, #8]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d123      	bne.n	8008ce2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	08da      	lsrs	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3208      	adds	r2, #8
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	220f      	movs	r2, #15
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	691a      	ldr	r2, [r3, #16]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	08da      	lsrs	r2, r3, #3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3208      	adds	r2, #8
 8008cdc:	69b9      	ldr	r1, [r7, #24]
 8008cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	2203      	movs	r2, #3
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f003 0203 	and.w	r2, r3, #3
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80e0 	beq.w	8008ee4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d24:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <HAL_GPIO_Init+0x238>)
 8008d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d2a:	4a2e      	ldr	r2, [pc, #184]	; (8008de4 <HAL_GPIO_Init+0x238>)
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d34:	4b2b      	ldr	r3, [pc, #172]	; (8008de4 <HAL_GPIO_Init+0x238>)
 8008d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d42:	4a29      	ldr	r2, [pc, #164]	; (8008de8 <HAL_GPIO_Init+0x23c>)
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	089b      	lsrs	r3, r3, #2
 8008d48:	3302      	adds	r3, #2
 8008d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	220f      	movs	r2, #15
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	43db      	mvns	r3, r3
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	4013      	ands	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a20      	ldr	r2, [pc, #128]	; (8008dec <HAL_GPIO_Init+0x240>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d052      	beq.n	8008e14 <HAL_GPIO_Init+0x268>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_GPIO_Init+0x244>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d031      	beq.n	8008dda <HAL_GPIO_Init+0x22e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <HAL_GPIO_Init+0x248>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d02b      	beq.n	8008dd6 <HAL_GPIO_Init+0x22a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1d      	ldr	r2, [pc, #116]	; (8008df8 <HAL_GPIO_Init+0x24c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d025      	beq.n	8008dd2 <HAL_GPIO_Init+0x226>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1c      	ldr	r2, [pc, #112]	; (8008dfc <HAL_GPIO_Init+0x250>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01f      	beq.n	8008dce <HAL_GPIO_Init+0x222>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <HAL_GPIO_Init+0x254>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d019      	beq.n	8008dca <HAL_GPIO_Init+0x21e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a1a      	ldr	r2, [pc, #104]	; (8008e04 <HAL_GPIO_Init+0x258>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <HAL_GPIO_Init+0x21a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a19      	ldr	r2, [pc, #100]	; (8008e08 <HAL_GPIO_Init+0x25c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00d      	beq.n	8008dc2 <HAL_GPIO_Init+0x216>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a18      	ldr	r2, [pc, #96]	; (8008e0c <HAL_GPIO_Init+0x260>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d007      	beq.n	8008dbe <HAL_GPIO_Init+0x212>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a17      	ldr	r2, [pc, #92]	; (8008e10 <HAL_GPIO_Init+0x264>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d101      	bne.n	8008dba <HAL_GPIO_Init+0x20e>
 8008db6:	2309      	movs	r3, #9
 8008db8:	e02d      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dba:	230a      	movs	r3, #10
 8008dbc:	e02b      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dbe:	2308      	movs	r3, #8
 8008dc0:	e029      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dc2:	2307      	movs	r3, #7
 8008dc4:	e027      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	e025      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dca:	2305      	movs	r3, #5
 8008dcc:	e023      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dce:	2304      	movs	r3, #4
 8008dd0:	e021      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e01f      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e01d      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e01b      	b.n	8008e16 <HAL_GPIO_Init+0x26a>
 8008dde:	bf00      	nop
 8008de0:	58000080 	.word	0x58000080
 8008de4:	58024400 	.word	0x58024400
 8008de8:	58000400 	.word	0x58000400
 8008dec:	58020000 	.word	0x58020000
 8008df0:	58020400 	.word	0x58020400
 8008df4:	58020800 	.word	0x58020800
 8008df8:	58020c00 	.word	0x58020c00
 8008dfc:	58021000 	.word	0x58021000
 8008e00:	58021400 	.word	0x58021400
 8008e04:	58021800 	.word	0x58021800
 8008e08:	58021c00 	.word	0x58021c00
 8008e0c:	58022000 	.word	0x58022000
 8008e10:	58022400 	.word	0x58022400
 8008e14:	2300      	movs	r3, #0
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	f002 0203 	and.w	r2, r2, #3
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	4093      	lsls	r3, r2
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e26:	4938      	ldr	r1, [pc, #224]	; (8008f08 <HAL_GPIO_Init+0x35c>)
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	089b      	lsrs	r3, r3, #2
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	43db      	mvns	r3, r3
 8008e40:	69ba      	ldr	r2, [r7, #24]
 8008e42:	4013      	ands	r3, r2
 8008e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	4013      	ands	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	43db      	mvns	r3, r3
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	69ba      	ldr	r2, [r7, #24]
 8008eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	43db      	mvns	r3, r3
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f47f ae63 	bne.w	8008bc0 <HAL_GPIO_Init+0x14>
  }
}
 8008efa:	bf00      	nop
 8008efc:	bf00      	nop
 8008efe:	3724      	adds	r7, #36	; 0x24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr
 8008f08:	58000400 	.word	0x58000400

08008f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	460b      	mov	r3, r1
 8008f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	887b      	ldrh	r3, [r7, #2]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f24:	2301      	movs	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
 8008f28:	e001      	b.n	8008f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	807b      	strh	r3, [r7, #2]
 8008f48:	4613      	mov	r3, r2
 8008f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f4c:	787b      	ldrb	r3, [r7, #1]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f52:	887a      	ldrh	r2, [r7, #2]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f58:	e003      	b.n	8008f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f5a:	887b      	ldrh	r3, [r7, #2]
 8008f5c:	041a      	lsls	r2, r3, #16
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	619a      	str	r2, [r3, #24]
}
 8008f62:	bf00      	nop
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e08b      	b.n	800909a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fa f8d2 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2224      	movs	r2, #36	; 0x24
 8008fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f022 0201 	bic.w	r2, r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d107      	bne.n	8008fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fe6:	609a      	str	r2, [r3, #8]
 8008fe8:	e006      	b.n	8008ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d108      	bne.n	8009012 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800900e:	605a      	str	r2, [r3, #4]
 8009010:	e007      	b.n	8009022 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685a      	ldr	r2, [r3, #4]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6859      	ldr	r1, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	4b1d      	ldr	r3, [pc, #116]	; (80090a4 <HAL_I2C_Init+0x134>)
 800902e:	430b      	orrs	r3, r1
 8009030:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009040:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69d9      	ldr	r1, [r3, #28]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2220      	movs	r2, #32
 8009086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	02008000 	.word	0x02008000

080090a8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af02      	add	r7, sp, #8
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	607a      	str	r2, [r7, #4]
 80090b2:	461a      	mov	r2, r3
 80090b4:	460b      	mov	r3, r1
 80090b6:	817b      	strh	r3, [r7, #10]
 80090b8:	4613      	mov	r3, r2
 80090ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	f040 80fd 	bne.w	80092c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_I2C_Master_Transmit+0x30>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e0f6      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090e0:	f7fa fe00 	bl	8003ce4 <HAL_GetTick>
 80090e4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	2319      	movs	r3, #25
 80090ec:	2201      	movs	r2, #1
 80090ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fa0a 	bl	800950c <I2C_WaitOnFlagUntilTimeout>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e0e1      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2221      	movs	r2, #33	; 0x21
 8009106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2210      	movs	r2, #16
 800910e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	893a      	ldrh	r2, [r7, #8]
 8009122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	2bff      	cmp	r3, #255	; 0xff
 8009132:	d906      	bls.n	8009142 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	22ff      	movs	r2, #255	; 0xff
 8009138:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800913a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e007      	b.n	8009152 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800914c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009150:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009156:	2b00      	cmp	r3, #0
 8009158:	d024      	beq.n	80091a4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	781a      	ldrb	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009174:	b29b      	uxth	r3, r3
 8009176:	3b01      	subs	r3, #1
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009182:	3b01      	subs	r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918e:	b2db      	uxtb	r3, r3
 8009190:	3301      	adds	r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	8979      	ldrh	r1, [r7, #10]
 8009196:	4b4e      	ldr	r3, [pc, #312]	; (80092d0 <HAL_I2C_Master_Transmit+0x228>)
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fc05 	bl	80099ac <I2C_TransferConfig>
 80091a2:	e066      	b.n	8009272 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	8979      	ldrh	r1, [r7, #10]
 80091ac:	4b48      	ldr	r3, [pc, #288]	; (80092d0 <HAL_I2C_Master_Transmit+0x228>)
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	68f8      	ldr	r0, [r7, #12]
 80091b4:	f000 fbfa 	bl	80099ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80091b8:	e05b      	b.n	8009272 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	6a39      	ldr	r1, [r7, #32]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f000 f9fd 	bl	80095be <I2C_WaitOnTXISFlagUntilTimeout>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e07b      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091de:	1c5a      	adds	r2, r3, #1
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f6:	3b01      	subs	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d034      	beq.n	8009272 <HAL_I2C_Master_Transmit+0x1ca>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d130      	bne.n	8009272 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	2200      	movs	r2, #0
 8009218:	2180      	movs	r1, #128	; 0x80
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f000 f976 	bl	800950c <I2C_WaitOnFlagUntilTimeout>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e04d      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800922e:	b29b      	uxth	r3, r3
 8009230:	2bff      	cmp	r3, #255	; 0xff
 8009232:	d90e      	bls.n	8009252 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	22ff      	movs	r2, #255	; 0xff
 8009238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923e:	b2da      	uxtb	r2, r3
 8009240:	8979      	ldrh	r1, [r7, #10]
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 fbae 	bl	80099ac <I2C_TransferConfig>
 8009250:	e00f      	b.n	8009272 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009256:	b29a      	uxth	r2, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009260:	b2da      	uxtb	r2, r3
 8009262:	8979      	ldrh	r1, [r7, #10]
 8009264:	2300      	movs	r3, #0
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fb9d 	bl	80099ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009276:	b29b      	uxth	r3, r3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d19e      	bne.n	80091ba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	6a39      	ldr	r1, [r7, #32]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f9e3 	bl	800964c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e01a      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2220      	movs	r2, #32
 8009296:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <HAL_I2C_Master_Transmit+0x22c>)
 80092a4:	400b      	ands	r3, r1
 80092a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	e000      	b.n	80092c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80092c4:	2302      	movs	r3, #2
  }
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	80002000 	.word	0x80002000
 80092d4:	fe00e800 	.word	0xfe00e800

080092d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	607a      	str	r2, [r7, #4]
 80092e2:	461a      	mov	r2, r3
 80092e4:	460b      	mov	r3, r1
 80092e6:	817b      	strh	r3, [r7, #10]
 80092e8:	4613      	mov	r3, r2
 80092ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	f040 80db 	bne.w	80094b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_I2C_Master_Receive+0x30>
 8009304:	2302      	movs	r3, #2
 8009306:	e0d4      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009310:	f7fa fce8 	bl	8003ce4 <HAL_GetTick>
 8009314:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	2319      	movs	r3, #25
 800931c:	2201      	movs	r2, #1
 800931e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f8f2 	bl	800950c <I2C_WaitOnFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	e0bf      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2222      	movs	r2, #34	; 0x22
 8009336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2210      	movs	r2, #16
 800933e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	893a      	ldrh	r2, [r7, #8]
 8009352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2200      	movs	r2, #0
 8009358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	2bff      	cmp	r3, #255	; 0xff
 8009362:	d90e      	bls.n	8009382 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	22ff      	movs	r2, #255	; 0xff
 8009368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936e:	b2da      	uxtb	r2, r3
 8009370:	8979      	ldrh	r1, [r7, #10]
 8009372:	4b52      	ldr	r3, [pc, #328]	; (80094bc <HAL_I2C_Master_Receive+0x1e4>)
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fb16 	bl	80099ac <I2C_TransferConfig>
 8009380:	e06d      	b.n	800945e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009390:	b2da      	uxtb	r2, r3
 8009392:	8979      	ldrh	r1, [r7, #10]
 8009394:	4b49      	ldr	r3, [pc, #292]	; (80094bc <HAL_I2C_Master_Receive+0x1e4>)
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fb05 	bl	80099ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80093a2:	e05c      	b.n	800945e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	6a39      	ldr	r1, [r7, #32]
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f993 	bl	80096d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e07c      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	3b01      	subs	r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d034      	beq.n	800945e <HAL_I2C_Master_Receive+0x186>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d130      	bne.n	800945e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	2200      	movs	r2, #0
 8009404:	2180      	movs	r1, #128	; 0x80
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f880 	bl	800950c <I2C_WaitOnFlagUntilTimeout>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e04d      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	2bff      	cmp	r3, #255	; 0xff
 800941e:	d90e      	bls.n	800943e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	22ff      	movs	r2, #255	; 0xff
 8009424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942a:	b2da      	uxtb	r2, r3
 800942c:	8979      	ldrh	r1, [r7, #10]
 800942e:	2300      	movs	r3, #0
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 fab8 	bl	80099ac <I2C_TransferConfig>
 800943c:	e00f      	b.n	800945e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009442:	b29a      	uxth	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944c:	b2da      	uxtb	r2, r3
 800944e:	8979      	ldrh	r1, [r7, #10]
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 faa7 	bl	80099ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009462:	b29b      	uxth	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d19d      	bne.n	80093a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	6a39      	ldr	r1, [r7, #32]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 f8ed 	bl	800964c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e01a      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2220      	movs	r2, #32
 8009482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6859      	ldr	r1, [r3, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <HAL_I2C_Master_Receive+0x1e8>)
 8009490:	400b      	ands	r3, r1
 8009492:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	e000      	b.n	80094b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80094b0:	2302      	movs	r3, #2
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	80002400 	.word	0x80002400
 80094c0:	fe00e800 	.word	0xfe00e800

080094c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d007      	beq.n	8009500 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0201 	orr.w	r2, r2, #1
 80094fe:	619a      	str	r2, [r3, #24]
  }
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800951c:	e03b      	b.n	8009596 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f962 	bl	80097ec <I2C_IsErrorOccurred>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e041      	b.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009538:	d02d      	beq.n	8009596 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800953a:	f7fa fbd3 	bl	8003ce4 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	683a      	ldr	r2, [r7, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d302      	bcc.n	8009550 <I2C_WaitOnFlagUntilTimeout+0x44>
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d122      	bne.n	8009596 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699a      	ldr	r2, [r3, #24]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4013      	ands	r3, r2
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	bf0c      	ite	eq
 8009560:	2301      	moveq	r3, #1
 8009562:	2300      	movne	r3, #0
 8009564:	b2db      	uxtb	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	429a      	cmp	r2, r3
 800956c:	d113      	bne.n	8009596 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009572:	f043 0220 	orr.w	r2, r3, #32
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e00f      	b.n	80095b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699a      	ldr	r2, [r3, #24]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4013      	ands	r3, r2
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	bf0c      	ite	eq
 80095a6:	2301      	moveq	r3, #1
 80095a8:	2300      	movne	r3, #0
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	79fb      	ldrb	r3, [r7, #7]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d0b4      	beq.n	800951e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095ca:	e033      	b.n	8009634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 f90b 	bl	80097ec <I2C_IsErrorOccurred>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e031      	b.n	8009644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e6:	d025      	beq.n	8009634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e8:	f7fa fb7c 	bl	8003ce4 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d302      	bcc.n	80095fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d11a      	bne.n	8009634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b02      	cmp	r3, #2
 800960a:	d013      	beq.n	8009634 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009610:	f043 0220 	orr.w	r2, r3, #32
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e007      	b.n	8009644 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f003 0302 	and.w	r3, r3, #2
 800963e:	2b02      	cmp	r3, #2
 8009640:	d1c4      	bne.n	80095cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009658:	e02f      	b.n	80096ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f8c4 	bl	80097ec <I2C_IsErrorOccurred>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e02d      	b.n	80096ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800966e:	f7fa fb39 	bl	8003ce4 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	429a      	cmp	r2, r3
 800967c:	d302      	bcc.n	8009684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d11a      	bne.n	80096ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b20      	cmp	r3, #32
 8009690:	d013      	beq.n	80096ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009696:	f043 0220 	orr.w	r2, r3, #32
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e007      	b.n	80096ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b20      	cmp	r3, #32
 80096c6:	d1c8      	bne.n	800965a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80096e4:	e071      	b.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 f87e 	bl	80097ec <I2C_IsErrorOccurred>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	f003 0320 	and.w	r3, r3, #32
 8009704:	2b20      	cmp	r3, #32
 8009706:	d13b      	bne.n	8009780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009708:	7dfb      	ldrb	r3, [r7, #23]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d138      	bne.n	8009780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b04      	cmp	r3, #4
 800971a:	d105      	bne.n	8009728 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	f003 0310 	and.w	r3, r3, #16
 8009732:	2b10      	cmp	r3, #16
 8009734:	d121      	bne.n	800977a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2210      	movs	r2, #16
 800973c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2204      	movs	r2, #4
 8009742:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2220      	movs	r2, #32
 800974a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6859      	ldr	r1, [r3, #4]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	4b24      	ldr	r3, [pc, #144]	; (80097e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009758:	400b      	ands	r3, r1
 800975a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2220      	movs	r2, #32
 8009760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
 8009778:	e002      	b.n	8009780 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009780:	f7fa fab0 	bl	8003ce4 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d302      	bcc.n	8009796 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d119      	bne.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d116      	bne.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d00f      	beq.n	80097ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ae:	f043 0220 	orr.w	r2, r3, #32
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d002      	beq.n	80097de <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80097d8:	7dfb      	ldrb	r3, [r7, #23]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d083      	beq.n	80096e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80097de:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	fe00e800 	.word	0xfe00e800

080097ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	; 0x28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b00      	cmp	r3, #0
 8009816:	d068      	beq.n	80098ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2210      	movs	r2, #16
 800981e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009820:	e049      	b.n	80098b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009828:	d045      	beq.n	80098b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800982a:	f7fa fa5b 	bl	8003ce4 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <I2C_IsErrorOccurred+0x54>
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d13a      	bne.n	80098b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800984a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009852:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800985e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009862:	d121      	bne.n	80098a8 <I2C_IsErrorOccurred+0xbc>
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986a:	d01d      	beq.n	80098a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800986c:	7cfb      	ldrb	r3, [r7, #19]
 800986e:	2b20      	cmp	r3, #32
 8009870:	d01a      	beq.n	80098a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009880:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009882:	f7fa fa2f 	bl	8003ce4 <HAL_GetTick>
 8009886:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009888:	e00e      	b.n	80098a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800988a:	f7fa fa2b 	bl	8003ce4 <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	2b19      	cmp	r3, #25
 8009896:	d907      	bls.n	80098a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009898:	6a3b      	ldr	r3, [r7, #32]
 800989a:	f043 0320 	orr.w	r3, r3, #32
 800989e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80098a6:	e006      	b.n	80098b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b20      	cmp	r3, #32
 80098b4:	d1e9      	bne.n	800988a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f003 0320 	and.w	r3, r3, #32
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d003      	beq.n	80098cc <I2C_IsErrorOccurred+0xe0>
 80098c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d0aa      	beq.n	8009822 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80098cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d103      	bne.n	80098dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2220      	movs	r2, #32
 80098da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	f043 0304 	orr.w	r3, r3, #4
 80098e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	f043 0301 	orr.w	r3, r3, #1
 8009902:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800990c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	f043 0308 	orr.w	r3, r3, #8
 8009924:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800992e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	f043 0302 	orr.w	r3, r3, #2
 8009946:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01c      	beq.n	800999a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff fdaf 	bl	80094c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	6859      	ldr	r1, [r3, #4]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <I2C_IsErrorOccurred+0x1bc>)
 8009972:	400b      	ands	r3, r1
 8009974:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	431a      	orrs	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800999a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3728      	adds	r7, #40	; 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	fe00e800 	.word	0xfe00e800

080099ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	607b      	str	r3, [r7, #4]
 80099b6:	460b      	mov	r3, r1
 80099b8:	817b      	strh	r3, [r7, #10]
 80099ba:	4613      	mov	r3, r2
 80099bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099be:	897b      	ldrh	r3, [r7, #10]
 80099c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099c4:	7a7b      	ldrb	r3, [r7, #9]
 80099c6:	041b      	lsls	r3, r3, #16
 80099c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	0d5b      	lsrs	r3, r3, #21
 80099e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80099ea:	4b08      	ldr	r3, [pc, #32]	; (8009a0c <I2C_TransferConfig+0x60>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	43db      	mvns	r3, r3
 80099f0:	ea02 0103 	and.w	r1, r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80099fe:	bf00      	nop
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	03ff63ff 	.word	0x03ff63ff

08009a10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b20      	cmp	r3, #32
 8009a24:	d138      	bne.n	8009a98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d101      	bne.n	8009a34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e032      	b.n	8009a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2224      	movs	r2, #36	; 0x24
 8009a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6819      	ldr	r1, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2220      	movs	r2, #32
 8009a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e000      	b.n	8009a9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009a98:	2302      	movs	r3, #2
  }
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d139      	bne.n	8009b30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e033      	b.n	8009b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2224      	movs	r2, #36	; 0x24
 8009ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0201 	bic.w	r2, r2, #1
 8009ae8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009af8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f042 0201 	orr.w	r2, r2, #1
 8009b1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e000      	b.n	8009b32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b30:	2302      	movs	r3, #2
  }
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
	...

08009b40 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b48:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b4e:	4a0c      	ldr	r2, [pc, #48]	; (8009b80 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b50:	f043 0302 	orr.w	r3, r3, #2
 8009b54:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009b58:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	604b      	str	r3, [r1, #4]
}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	58024400 	.word	0x58024400
 8009b84:	58000400 	.word	0x58000400

08009b88 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009b94:	4b18      	ldr	r3, [pc, #96]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f023 0201 	bic.w	r2, r3, #1
 8009b9c:	4916      	ldr	r1, [pc, #88]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009ba4:	4b14      	ldr	r3, [pc, #80]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009baa:	f023 0305 	bic.w	r3, r3, #5
 8009bae:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009bb0:	4b11      	ldr	r3, [pc, #68]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	4a10      	ldr	r2, [pc, #64]	; (8009bf8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009bb6:	f023 0302 	bic.w	r3, r3, #2
 8009bba:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <HAL_PWR_EnterSTOPMode+0x74>)
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	4a0e      	ldr	r2, [pc, #56]	; (8009bfc <HAL_PWR_EnterSTOPMode+0x74>)
 8009bc2:	f043 0304 	orr.w	r3, r3, #4
 8009bc6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009bc8:	f3bf 8f4f 	dsb	sy
}
 8009bcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009bce:	f3bf 8f6f 	isb	sy
}
 8009bd2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009bda:	bf30      	wfi
 8009bdc:	e000      	b.n	8009be0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009bde:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009be0:	4b06      	ldr	r3, [pc, #24]	; (8009bfc <HAL_PWR_EnterSTOPMode+0x74>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	4a05      	ldr	r2, [pc, #20]	; (8009bfc <HAL_PWR_EnterSTOPMode+0x74>)
 8009be6:	f023 0304 	bic.w	r3, r3, #4
 8009bea:	6113      	str	r3, [r2, #16]
}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	58024800 	.word	0x58024800
 8009bfc:	e000ed00 	.word	0xe000ed00

08009c00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c08:	4b19      	ldr	r3, [pc, #100]	; (8009c70 <HAL_PWREx_ConfigSupply+0x70>)
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d00a      	beq.n	8009c2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c14:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <HAL_PWREx_ConfigSupply+0x70>)
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f003 0307 	and.w	r3, r3, #7
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d001      	beq.n	8009c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e01f      	b.n	8009c66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e01d      	b.n	8009c66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c2a:	4b11      	ldr	r3, [pc, #68]	; (8009c70 <HAL_PWREx_ConfigSupply+0x70>)
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f023 0207 	bic.w	r2, r3, #7
 8009c32:	490f      	ldr	r1, [pc, #60]	; (8009c70 <HAL_PWREx_ConfigSupply+0x70>)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c3a:	f7fa f853 	bl	8003ce4 <HAL_GetTick>
 8009c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c40:	e009      	b.n	8009c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c42:	f7fa f84f 	bl	8003ce4 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c50:	d901      	bls.n	8009c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e007      	b.n	8009c66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_PWREx_ConfigSupply+0x70>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c62:	d1ee      	bne.n	8009c42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	58024800 	.word	0x58024800

08009c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08c      	sub	sp, #48	; 0x30
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f000 bc48 	b.w	800a518 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 8088 	beq.w	8009da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c96:	4b99      	ldr	r3, [pc, #612]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ca0:	4b96      	ldr	r3, [pc, #600]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d007      	beq.n	8009cbc <HAL_RCC_OscConfig+0x48>
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	2b18      	cmp	r3, #24
 8009cb0:	d111      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x62>
 8009cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb4:	f003 0303 	and.w	r3, r3, #3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d10c      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cbc:	4b8f      	ldr	r3, [pc, #572]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d06d      	beq.n	8009da4 <HAL_RCC_OscConfig+0x130>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d169      	bne.n	8009da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f000 bc21 	b.w	800a518 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cde:	d106      	bne.n	8009cee <HAL_RCC_OscConfig+0x7a>
 8009ce0:	4b86      	ldr	r3, [pc, #536]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a85      	ldr	r2, [pc, #532]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	e02e      	b.n	8009d4c <HAL_RCC_OscConfig+0xd8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10c      	bne.n	8009d10 <HAL_RCC_OscConfig+0x9c>
 8009cf6:	4b81      	ldr	r3, [pc, #516]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a80      	ldr	r2, [pc, #512]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	4b7e      	ldr	r3, [pc, #504]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a7d      	ldr	r2, [pc, #500]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	e01d      	b.n	8009d4c <HAL_RCC_OscConfig+0xd8>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d18:	d10c      	bne.n	8009d34 <HAL_RCC_OscConfig+0xc0>
 8009d1a:	4b78      	ldr	r3, [pc, #480]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a77      	ldr	r2, [pc, #476]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	4b75      	ldr	r3, [pc, #468]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a74      	ldr	r2, [pc, #464]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d30:	6013      	str	r3, [r2, #0]
 8009d32:	e00b      	b.n	8009d4c <HAL_RCC_OscConfig+0xd8>
 8009d34:	4b71      	ldr	r3, [pc, #452]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a70      	ldr	r2, [pc, #448]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	4b6e      	ldr	r3, [pc, #440]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a6d      	ldr	r2, [pc, #436]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d013      	beq.n	8009d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d54:	f7f9 ffc6 	bl	8003ce4 <HAL_GetTick>
 8009d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d5a:	e008      	b.n	8009d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d5c:	f7f9 ffc2 	bl	8003ce4 <HAL_GetTick>
 8009d60:	4602      	mov	r2, r0
 8009d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	2b64      	cmp	r3, #100	; 0x64
 8009d68:	d901      	bls.n	8009d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e3d4      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009d6e:	4b63      	ldr	r3, [pc, #396]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d0f0      	beq.n	8009d5c <HAL_RCC_OscConfig+0xe8>
 8009d7a:	e014      	b.n	8009da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7c:	f7f9 ffb2 	bl	8003ce4 <HAL_GetTick>
 8009d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d82:	e008      	b.n	8009d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d84:	f7f9 ffae 	bl	8003ce4 <HAL_GetTick>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	2b64      	cmp	r3, #100	; 0x64
 8009d90:	d901      	bls.n	8009d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e3c0      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009d96:	4b59      	ldr	r3, [pc, #356]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f0      	bne.n	8009d84 <HAL_RCC_OscConfig+0x110>
 8009da2:	e000      	b.n	8009da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 80ca 	beq.w	8009f48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009db4:	4b51      	ldr	r3, [pc, #324]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dbc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <HAL_RCC_OscConfig+0x166>
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	2b18      	cmp	r3, #24
 8009dce:	d156      	bne.n	8009e7e <HAL_RCC_OscConfig+0x20a>
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	f003 0303 	and.w	r3, r3, #3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d151      	bne.n	8009e7e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dda:	4b48      	ldr	r3, [pc, #288]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0304 	and.w	r3, r3, #4
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d005      	beq.n	8009df2 <HAL_RCC_OscConfig+0x17e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e392      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009df2:	4b42      	ldr	r3, [pc, #264]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f023 0219 	bic.w	r2, r3, #25
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	493f      	ldr	r1, [pc, #252]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e04:	f7f9 ff6e 	bl	8003ce4 <HAL_GetTick>
 8009e08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e0c:	f7f9 ff6a 	bl	8003ce4 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e37c      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e1e:	4b37      	ldr	r3, [pc, #220]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0f0      	beq.n	8009e0c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e2a:	f7f9 ff67 	bl	8003cfc <HAL_GetREVID>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d817      	bhi.n	8009e68 <HAL_RCC_OscConfig+0x1f4>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	2b40      	cmp	r3, #64	; 0x40
 8009e3e:	d108      	bne.n	8009e52 <HAL_RCC_OscConfig+0x1de>
 8009e40:	4b2e      	ldr	r3, [pc, #184]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009e48:	4a2c      	ldr	r2, [pc, #176]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e4e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e50:	e07a      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e52:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	031b      	lsls	r3, r3, #12
 8009e60:	4926      	ldr	r1, [pc, #152]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e62:	4313      	orrs	r3, r2
 8009e64:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e66:	e06f      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e68:	4b24      	ldr	r3, [pc, #144]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	061b      	lsls	r3, r3, #24
 8009e76:	4921      	ldr	r1, [pc, #132]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e7c:	e064      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d047      	beq.n	8009f16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e86:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f023 0219 	bic.w	r2, r3, #25
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	491a      	ldr	r1, [pc, #104]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e98:	f7f9 ff24 	bl	8003ce4 <HAL_GetTick>
 8009e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e9e:	e008      	b.n	8009eb2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ea0:	f7f9 ff20 	bl	8003ce4 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e332      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d0f0      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ebe:	f7f9 ff1d 	bl	8003cfc <HAL_GetREVID>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d819      	bhi.n	8009f00 <HAL_RCC_OscConfig+0x28c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b40      	cmp	r3, #64	; 0x40
 8009ed2:	d108      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x272>
 8009ed4:	4b09      	ldr	r3, [pc, #36]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009edc:	4a07      	ldr	r2, [pc, #28]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ee2:	6053      	str	r3, [r2, #4]
 8009ee4:	e030      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
 8009ee6:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	031b      	lsls	r3, r3, #12
 8009ef4:	4901      	ldr	r1, [pc, #4]	; (8009efc <HAL_RCC_OscConfig+0x288>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	604b      	str	r3, [r1, #4]
 8009efa:	e025      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
 8009efc:	58024400 	.word	0x58024400
 8009f00:	4b9a      	ldr	r3, [pc, #616]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	061b      	lsls	r3, r3, #24
 8009f0e:	4997      	ldr	r1, [pc, #604]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f10:	4313      	orrs	r3, r2
 8009f12:	604b      	str	r3, [r1, #4]
 8009f14:	e018      	b.n	8009f48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f16:	4b95      	ldr	r3, [pc, #596]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a94      	ldr	r2, [pc, #592]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f1c:	f023 0301 	bic.w	r3, r3, #1
 8009f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f22:	f7f9 fedf 	bl	8003ce4 <HAL_GetTick>
 8009f26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f28:	e008      	b.n	8009f3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f2a:	f7f9 fedb 	bl	8003ce4 <HAL_GetTick>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d901      	bls.n	8009f3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	e2ed      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f3c:	4b8b      	ldr	r3, [pc, #556]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 0304 	and.w	r3, r3, #4
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1f0      	bne.n	8009f2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0310 	and.w	r3, r3, #16
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 80a9 	beq.w	800a0a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f56:	4b85      	ldr	r3, [pc, #532]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f60:	4b82      	ldr	r3, [pc, #520]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	2b08      	cmp	r3, #8
 8009f6a:	d007      	beq.n	8009f7c <HAL_RCC_OscConfig+0x308>
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b18      	cmp	r3, #24
 8009f70:	d13a      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x374>
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d135      	bne.n	8009fe8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f7c:	4b7b      	ldr	r3, [pc, #492]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d005      	beq.n	8009f94 <HAL_RCC_OscConfig+0x320>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	69db      	ldr	r3, [r3, #28]
 8009f8c:	2b80      	cmp	r3, #128	; 0x80
 8009f8e:	d001      	beq.n	8009f94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e2c1      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f94:	f7f9 feb2 	bl	8003cfc <HAL_GetREVID>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d817      	bhi.n	8009fd2 <HAL_RCC_OscConfig+0x35e>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6a1b      	ldr	r3, [r3, #32]
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	d108      	bne.n	8009fbc <HAL_RCC_OscConfig+0x348>
 8009faa:	4b70      	ldr	r3, [pc, #448]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009fb2:	4a6e      	ldr	r2, [pc, #440]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fba:	e075      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fbc:	4b6b      	ldr	r3, [pc, #428]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a1b      	ldr	r3, [r3, #32]
 8009fc8:	069b      	lsls	r3, r3, #26
 8009fca:	4968      	ldr	r1, [pc, #416]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fd0:	e06a      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fd2:	4b66      	ldr	r3, [pc, #408]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	061b      	lsls	r3, r3, #24
 8009fe0:	4962      	ldr	r1, [pc, #392]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fe6:	e05f      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d042      	beq.n	800a076 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ff0:	4b5e      	ldr	r3, [pc, #376]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a5d      	ldr	r2, [pc, #372]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 8009ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffc:	f7f9 fe72 	bl	8003ce4 <HAL_GetTick>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a004:	f7f9 fe6e 	bl	8003ce4 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e280      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a016:	4b55      	ldr	r3, [pc, #340]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f0      	beq.n	800a004 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a022:	f7f9 fe6b 	bl	8003cfc <HAL_GetREVID>
 800a026:	4603      	mov	r3, r0
 800a028:	f241 0203 	movw	r2, #4099	; 0x1003
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d817      	bhi.n	800a060 <HAL_RCC_OscConfig+0x3ec>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	2b20      	cmp	r3, #32
 800a036:	d108      	bne.n	800a04a <HAL_RCC_OscConfig+0x3d6>
 800a038:	4b4c      	ldr	r3, [pc, #304]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a040:	4a4a      	ldr	r2, [pc, #296]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a042:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a046:	6053      	str	r3, [r2, #4]
 800a048:	e02e      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
 800a04a:	4b48      	ldr	r3, [pc, #288]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	069b      	lsls	r3, r3, #26
 800a058:	4944      	ldr	r1, [pc, #272]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	604b      	str	r3, [r1, #4]
 800a05e:	e023      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
 800a060:	4b42      	ldr	r3, [pc, #264]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6a1b      	ldr	r3, [r3, #32]
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	493f      	ldr	r1, [pc, #252]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a070:	4313      	orrs	r3, r2
 800a072:	60cb      	str	r3, [r1, #12]
 800a074:	e018      	b.n	800a0a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a076:	4b3d      	ldr	r3, [pc, #244]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a3c      	ldr	r2, [pc, #240]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a07c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a082:	f7f9 fe2f 	bl	8003ce4 <HAL_GetTick>
 800a086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a088:	e008      	b.n	800a09c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a08a:	f7f9 fe2b 	bl	8003ce4 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e23d      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a09c:	4b33      	ldr	r3, [pc, #204]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1f0      	bne.n	800a08a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0308 	and.w	r3, r3, #8
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d036      	beq.n	800a122 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d019      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0bc:	4b2b      	ldr	r3, [pc, #172]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a0be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0c0:	4a2a      	ldr	r2, [pc, #168]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c8:	f7f9 fe0c 	bl	8003ce4 <HAL_GetTick>
 800a0cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0ce:	e008      	b.n	800a0e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0d0:	f7f9 fe08 	bl	8003ce4 <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e21a      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0e2:	4b22      	ldr	r3, [pc, #136]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e6:	f003 0302 	and.w	r3, r3, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0f0      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x45c>
 800a0ee:	e018      	b.n	800a122 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0f4:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a0f6:	f023 0301 	bic.w	r3, r3, #1
 800a0fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0fc:	f7f9 fdf2 	bl	8003ce4 <HAL_GetTick>
 800a100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a102:	e008      	b.n	800a116 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a104:	f7f9 fdee 	bl	8003ce4 <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e200      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a116:	4b15      	ldr	r3, [pc, #84]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f0      	bne.n	800a104 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0320 	and.w	r3, r3, #32
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d039      	beq.n	800a1a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d01c      	beq.n	800a170 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a136:	4b0d      	ldr	r3, [pc, #52]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a0c      	ldr	r2, [pc, #48]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a13c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a140:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a142:	f7f9 fdcf 	bl	8003ce4 <HAL_GetTick>
 800a146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a148:	e008      	b.n	800a15c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a14a:	f7f9 fdcb 	bl	8003ce4 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	d901      	bls.n	800a15c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a158:	2303      	movs	r3, #3
 800a15a:	e1dd      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a15c:	4b03      	ldr	r3, [pc, #12]	; (800a16c <HAL_RCC_OscConfig+0x4f8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0f0      	beq.n	800a14a <HAL_RCC_OscConfig+0x4d6>
 800a168:	e01b      	b.n	800a1a2 <HAL_RCC_OscConfig+0x52e>
 800a16a:	bf00      	nop
 800a16c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a170:	4b9b      	ldr	r3, [pc, #620]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a9a      	ldr	r2, [pc, #616]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a17a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a17c:	f7f9 fdb2 	bl	8003ce4 <HAL_GetTick>
 800a180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a184:	f7f9 fdae 	bl	8003ce4 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e1c0      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a196:	4b92      	ldr	r3, [pc, #584]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f0      	bne.n	800a184 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8081 	beq.w	800a2b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a1b0:	4b8c      	ldr	r3, [pc, #560]	; (800a3e4 <HAL_RCC_OscConfig+0x770>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a8b      	ldr	r2, [pc, #556]	; (800a3e4 <HAL_RCC_OscConfig+0x770>)
 800a1b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1bc:	f7f9 fd92 	bl	8003ce4 <HAL_GetTick>
 800a1c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1c2:	e008      	b.n	800a1d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1c4:	f7f9 fd8e 	bl	8003ce4 <HAL_GetTick>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b64      	cmp	r3, #100	; 0x64
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e1a0      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1d6:	4b83      	ldr	r3, [pc, #524]	; (800a3e4 <HAL_RCC_OscConfig+0x770>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0f0      	beq.n	800a1c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d106      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x584>
 800a1ea:	4b7d      	ldr	r3, [pc, #500]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ee:	4a7c      	ldr	r2, [pc, #496]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a1f0:	f043 0301 	orr.w	r3, r3, #1
 800a1f4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1f6:	e02d      	b.n	800a254 <HAL_RCC_OscConfig+0x5e0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10c      	bne.n	800a21a <HAL_RCC_OscConfig+0x5a6>
 800a200:	4b77      	ldr	r3, [pc, #476]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a204:	4a76      	ldr	r2, [pc, #472]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a206:	f023 0301 	bic.w	r3, r3, #1
 800a20a:	6713      	str	r3, [r2, #112]	; 0x70
 800a20c:	4b74      	ldr	r3, [pc, #464]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	4a73      	ldr	r2, [pc, #460]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a212:	f023 0304 	bic.w	r3, r3, #4
 800a216:	6713      	str	r3, [r2, #112]	; 0x70
 800a218:	e01c      	b.n	800a254 <HAL_RCC_OscConfig+0x5e0>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	2b05      	cmp	r3, #5
 800a220:	d10c      	bne.n	800a23c <HAL_RCC_OscConfig+0x5c8>
 800a222:	4b6f      	ldr	r3, [pc, #444]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a226:	4a6e      	ldr	r2, [pc, #440]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a228:	f043 0304 	orr.w	r3, r3, #4
 800a22c:	6713      	str	r3, [r2, #112]	; 0x70
 800a22e:	4b6c      	ldr	r3, [pc, #432]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a232:	4a6b      	ldr	r2, [pc, #428]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	6713      	str	r3, [r2, #112]	; 0x70
 800a23a:	e00b      	b.n	800a254 <HAL_RCC_OscConfig+0x5e0>
 800a23c:	4b68      	ldr	r3, [pc, #416]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a240:	4a67      	ldr	r2, [pc, #412]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a242:	f023 0301 	bic.w	r3, r3, #1
 800a246:	6713      	str	r3, [r2, #112]	; 0x70
 800a248:	4b65      	ldr	r3, [pc, #404]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24c:	4a64      	ldr	r2, [pc, #400]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a24e:	f023 0304 	bic.w	r3, r3, #4
 800a252:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d015      	beq.n	800a288 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a25c:	f7f9 fd42 	bl	8003ce4 <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a262:	e00a      	b.n	800a27a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a264:	f7f9 fd3e 	bl	8003ce4 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a272:	4293      	cmp	r3, r2
 800a274:	d901      	bls.n	800a27a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e14e      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a27a:	4b59      	ldr	r3, [pc, #356]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0ee      	beq.n	800a264 <HAL_RCC_OscConfig+0x5f0>
 800a286:	e014      	b.n	800a2b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a288:	f7f9 fd2c 	bl	8003ce4 <HAL_GetTick>
 800a28c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a28e:	e00a      	b.n	800a2a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a290:	f7f9 fd28 	bl	8003ce4 <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e138      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2a6:	4b4e      	ldr	r3, [pc, #312]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1ee      	bne.n	800a290 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 812d 	beq.w	800a516 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a2bc:	4b48      	ldr	r3, [pc, #288]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c4:	2b18      	cmp	r3, #24
 800a2c6:	f000 80bd 	beq.w	800a444 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	f040 809e 	bne.w	800a410 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2d4:	4b42      	ldr	r3, [pc, #264]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a41      	ldr	r2, [pc, #260]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a2da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2e0:	f7f9 fd00 	bl	8003ce4 <HAL_GetTick>
 800a2e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2e6:	e008      	b.n	800a2fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2e8:	f7f9 fcfc 	bl	8003ce4 <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e10e      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2fa:	4b39      	ldr	r3, [pc, #228]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1f0      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a306:	4b36      	ldr	r3, [pc, #216]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a30a:	4b37      	ldr	r3, [pc, #220]	; (800a3e8 <HAL_RCC_OscConfig+0x774>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a316:	0112      	lsls	r2, r2, #4
 800a318:	430a      	orrs	r2, r1
 800a31a:	4931      	ldr	r1, [pc, #196]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	628b      	str	r3, [r1, #40]	; 0x28
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a324:	3b01      	subs	r3, #1
 800a326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	3b01      	subs	r3, #1
 800a330:	025b      	lsls	r3, r3, #9
 800a332:	b29b      	uxth	r3, r3
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33a:	3b01      	subs	r3, #1
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a348:	3b01      	subs	r3, #1
 800a34a:	061b      	lsls	r3, r3, #24
 800a34c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a350:	4923      	ldr	r1, [pc, #140]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a352:	4313      	orrs	r3, r2
 800a354:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a356:	4b22      	ldr	r3, [pc, #136]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	4a21      	ldr	r2, [pc, #132]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a35c:	f023 0301 	bic.w	r3, r3, #1
 800a360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a362:	4b1f      	ldr	r3, [pc, #124]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a366:	4b21      	ldr	r3, [pc, #132]	; (800a3ec <HAL_RCC_OscConfig+0x778>)
 800a368:	4013      	ands	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a36e:	00d2      	lsls	r2, r2, #3
 800a370:	491b      	ldr	r1, [pc, #108]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a372:	4313      	orrs	r3, r2
 800a374:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a376:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	f023 020c 	bic.w	r2, r3, #12
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	4917      	ldr	r1, [pc, #92]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a384:	4313      	orrs	r3, r2
 800a386:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a388:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	f023 0202 	bic.w	r2, r3, #2
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a394:	4912      	ldr	r1, [pc, #72]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a396:	4313      	orrs	r3, r2
 800a398:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a39a:	4b11      	ldr	r3, [pc, #68]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39e:	4a10      	ldr	r2, [pc, #64]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a6:	4b0e      	ldr	r3, [pc, #56]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a0d      	ldr	r2, [pc, #52]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a3b2:	4b0b      	ldr	r3, [pc, #44]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	4a0a      	ldr	r2, [pc, #40]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a3be:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	4a07      	ldr	r2, [pc, #28]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3c4:	f043 0301 	orr.w	r3, r3, #1
 800a3c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a04      	ldr	r2, [pc, #16]	; (800a3e0 <HAL_RCC_OscConfig+0x76c>)
 800a3d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d6:	f7f9 fc85 	bl	8003ce4 <HAL_GetTick>
 800a3da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3dc:	e011      	b.n	800a402 <HAL_RCC_OscConfig+0x78e>
 800a3de:	bf00      	nop
 800a3e0:	58024400 	.word	0x58024400
 800a3e4:	58024800 	.word	0x58024800
 800a3e8:	fffffc0c 	.word	0xfffffc0c
 800a3ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3f0:	f7f9 fc78 	bl	8003ce4 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e08a      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a402:	4b47      	ldr	r3, [pc, #284]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x77c>
 800a40e:	e082      	b.n	800a516 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a410:	4b43      	ldr	r3, [pc, #268]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a42      	ldr	r2, [pc, #264]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a41a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41c:	f7f9 fc62 	bl	8003ce4 <HAL_GetTick>
 800a420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a424:	f7f9 fc5e 	bl	8003ce4 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e070      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a436:	4b3a      	ldr	r3, [pc, #232]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f0      	bne.n	800a424 <HAL_RCC_OscConfig+0x7b0>
 800a442:	e068      	b.n	800a516 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a444:	4b36      	ldr	r3, [pc, #216]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a448:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a44a:	4b35      	ldr	r3, [pc, #212]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a454:	2b01      	cmp	r3, #1
 800a456:	d031      	beq.n	800a4bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f003 0203 	and.w	r2, r3, #3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a462:	429a      	cmp	r2, r3
 800a464:	d12a      	bne.n	800a4bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	091b      	lsrs	r3, r3, #4
 800a46a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a472:	429a      	cmp	r2, r3
 800a474:	d122      	bne.n	800a4bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a482:	429a      	cmp	r2, r3
 800a484:	d11a      	bne.n	800a4bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	0a5b      	lsrs	r3, r3, #9
 800a48a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a492:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a494:	429a      	cmp	r2, r3
 800a496:	d111      	bne.n	800a4bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d108      	bne.n	800a4bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	0e1b      	lsrs	r3, r3, #24
 800a4ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d001      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e02b      	b.n	800a518 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c4:	08db      	lsrs	r3, r3, #3
 800a4c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d0:	693a      	ldr	r2, [r7, #16]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d01f      	beq.n	800a516 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a4d6:	4b12      	ldr	r3, [pc, #72]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4da:	4a11      	ldr	r2, [pc, #68]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a4dc:	f023 0301 	bic.w	r3, r3, #1
 800a4e0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a4e2:	f7f9 fbff 	bl	8003ce4 <HAL_GetTick>
 800a4e6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a4e8:	bf00      	nop
 800a4ea:	f7f9 fbfb 	bl	8003ce4 <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d0f9      	beq.n	800a4ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4fa:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <HAL_RCC_OscConfig+0x8b0>)
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a502:	00d2      	lsls	r2, r2, #3
 800a504:	4906      	ldr	r1, [pc, #24]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a506:	4313      	orrs	r3, r2
 800a508:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a50a:	4b05      	ldr	r3, [pc, #20]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	4a04      	ldr	r2, [pc, #16]	; (800a520 <HAL_RCC_OscConfig+0x8ac>)
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3730      	adds	r7, #48	; 0x30
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	58024400 	.word	0x58024400
 800a524:	ffff0007 	.word	0xffff0007

0800a528 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e19c      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a53c:	4b8a      	ldr	r3, [pc, #552]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 030f 	and.w	r3, r3, #15
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	429a      	cmp	r2, r3
 800a548:	d910      	bls.n	800a56c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a54a:	4b87      	ldr	r3, [pc, #540]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f023 020f 	bic.w	r2, r3, #15
 800a552:	4985      	ldr	r1, [pc, #532]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	4313      	orrs	r3, r2
 800a558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a55a:	4b83      	ldr	r3, [pc, #524]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 030f 	and.w	r3, r3, #15
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	429a      	cmp	r2, r3
 800a566:	d001      	beq.n	800a56c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e184      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0304 	and.w	r3, r3, #4
 800a574:	2b00      	cmp	r3, #0
 800a576:	d010      	beq.n	800a59a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691a      	ldr	r2, [r3, #16]
 800a57c:	4b7b      	ldr	r3, [pc, #492]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a57e:	699b      	ldr	r3, [r3, #24]
 800a580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a584:	429a      	cmp	r2, r3
 800a586:	d908      	bls.n	800a59a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a588:	4b78      	ldr	r3, [pc, #480]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	4975      	ldr	r1, [pc, #468]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a596:	4313      	orrs	r3, r2
 800a598:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0308 	and.w	r3, r3, #8
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d010      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695a      	ldr	r2, [r3, #20]
 800a5aa:	4b70      	ldr	r3, [pc, #448]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d908      	bls.n	800a5c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5b6:	4b6d      	ldr	r3, [pc, #436]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	496a      	ldr	r1, [pc, #424]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d010      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	4b64      	ldr	r3, [pc, #400]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5da:	69db      	ldr	r3, [r3, #28]
 800a5dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d908      	bls.n	800a5f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5e4:	4b61      	ldr	r3, [pc, #388]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	495e      	ldr	r1, [pc, #376]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d010      	beq.n	800a624 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	69da      	ldr	r2, [r3, #28]
 800a606:	4b59      	ldr	r3, [pc, #356]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a608:	6a1b      	ldr	r3, [r3, #32]
 800a60a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a60e:	429a      	cmp	r2, r3
 800a610:	d908      	bls.n	800a624 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a612:	4b56      	ldr	r3, [pc, #344]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	4953      	ldr	r1, [pc, #332]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a620:	4313      	orrs	r3, r2
 800a622:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0302 	and.w	r3, r3, #2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d010      	beq.n	800a652 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68da      	ldr	r2, [r3, #12]
 800a634:	4b4d      	ldr	r3, [pc, #308]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d908      	bls.n	800a652 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a640:	4b4a      	ldr	r3, [pc, #296]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a642:	699b      	ldr	r3, [r3, #24]
 800a644:	f023 020f 	bic.w	r2, r3, #15
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	4947      	ldr	r1, [pc, #284]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d055      	beq.n	800a70a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a65e:	4b43      	ldr	r3, [pc, #268]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	4940      	ldr	r1, [pc, #256]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a66c:	4313      	orrs	r3, r2
 800a66e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d107      	bne.n	800a688 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a678:	4b3c      	ldr	r3, [pc, #240]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d121      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e0f6      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	2b03      	cmp	r3, #3
 800a68e:	d107      	bne.n	800a6a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a690:	4b36      	ldr	r3, [pc, #216]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d115      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e0ea      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d107      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6a8:	4b30      	ldr	r3, [pc, #192]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d109      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0de      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6b8:	4b2c      	ldr	r3, [pc, #176]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0d6      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6c8:	4b28      	ldr	r3, [pc, #160]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	f023 0207 	bic.w	r2, r3, #7
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4925      	ldr	r1, [pc, #148]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6da:	f7f9 fb03 	bl	8003ce4 <HAL_GetTick>
 800a6de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e0:	e00a      	b.n	800a6f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e2:	f7f9 faff 	bl	8003ce4 <HAL_GetTick>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d901      	bls.n	800a6f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e0be      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	429a      	cmp	r2, r3
 800a708:	d1eb      	bne.n	800a6e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	4b14      	ldr	r3, [pc, #80]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	f003 030f 	and.w	r3, r3, #15
 800a722:	429a      	cmp	r2, r3
 800a724:	d208      	bcs.n	800a738 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a726:	4b11      	ldr	r3, [pc, #68]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	f023 020f 	bic.w	r2, r3, #15
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	490e      	ldr	r1, [pc, #56]	; (800a76c <HAL_RCC_ClockConfig+0x244>)
 800a734:	4313      	orrs	r3, r2
 800a736:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a738:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 030f 	and.w	r3, r3, #15
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d214      	bcs.n	800a770 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a746:	4b08      	ldr	r3, [pc, #32]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f023 020f 	bic.w	r2, r3, #15
 800a74e:	4906      	ldr	r1, [pc, #24]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	4313      	orrs	r3, r2
 800a754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a756:	4b04      	ldr	r3, [pc, #16]	; (800a768 <HAL_RCC_ClockConfig+0x240>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 030f 	and.w	r3, r3, #15
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	429a      	cmp	r2, r3
 800a762:	d005      	beq.n	800a770 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e086      	b.n	800a876 <HAL_RCC_ClockConfig+0x34e>
 800a768:	52002000 	.word	0x52002000
 800a76c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d010      	beq.n	800a79e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691a      	ldr	r2, [r3, #16]
 800a780:	4b3f      	ldr	r3, [pc, #252]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a782:	699b      	ldr	r3, [r3, #24]
 800a784:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a788:	429a      	cmp	r2, r3
 800a78a:	d208      	bcs.n	800a79e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a78c:	4b3c      	ldr	r3, [pc, #240]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	4939      	ldr	r1, [pc, #228]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0308 	and.w	r3, r3, #8
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d010      	beq.n	800a7cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	695a      	ldr	r2, [r3, #20]
 800a7ae:	4b34      	ldr	r3, [pc, #208]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d208      	bcs.n	800a7cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ba:	4b31      	ldr	r3, [pc, #196]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	492e      	ldr	r1, [pc, #184]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699a      	ldr	r2, [r3, #24]
 800a7dc:	4b28      	ldr	r3, [pc, #160]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d208      	bcs.n	800a7fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7e8:	4b25      	ldr	r3, [pc, #148]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	4922      	ldr	r1, [pc, #136]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d010      	beq.n	800a828 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	69da      	ldr	r2, [r3, #28]
 800a80a:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a80c:	6a1b      	ldr	r3, [r3, #32]
 800a80e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a812:	429a      	cmp	r2, r3
 800a814:	d208      	bcs.n	800a828 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a816:	4b1a      	ldr	r3, [pc, #104]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	4917      	ldr	r1, [pc, #92]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a824:	4313      	orrs	r3, r2
 800a826:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a828:	f000 f834 	bl	800a894 <HAL_RCC_GetSysClockFreq>
 800a82c:	4602      	mov	r2, r0
 800a82e:	4b14      	ldr	r3, [pc, #80]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	f003 030f 	and.w	r3, r3, #15
 800a838:	4912      	ldr	r1, [pc, #72]	; (800a884 <HAL_RCC_ClockConfig+0x35c>)
 800a83a:	5ccb      	ldrb	r3, [r1, r3]
 800a83c:	f003 031f 	and.w	r3, r3, #31
 800a840:	fa22 f303 	lsr.w	r3, r2, r3
 800a844:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <HAL_RCC_ClockConfig+0x358>)
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f003 030f 	and.w	r3, r3, #15
 800a84e:	4a0d      	ldr	r2, [pc, #52]	; (800a884 <HAL_RCC_ClockConfig+0x35c>)
 800a850:	5cd3      	ldrb	r3, [r2, r3]
 800a852:	f003 031f 	and.w	r3, r3, #31
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
 800a85c:	4a0a      	ldr	r2, [pc, #40]	; (800a888 <HAL_RCC_ClockConfig+0x360>)
 800a85e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <HAL_RCC_ClockConfig+0x364>)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a866:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <HAL_RCC_ClockConfig+0x368>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f8 ff5e 	bl	800372c <HAL_InitTick>
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a874:	7bfb      	ldrb	r3, [r7, #15]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
 800a87e:	bf00      	nop
 800a880:	58024400 	.word	0x58024400
 800a884:	080172b4 	.word	0x080172b4
 800a888:	24000094 	.word	0x24000094
 800a88c:	24000090 	.word	0x24000090
 800a890:	24000098 	.word	0x24000098

0800a894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a894:	b480      	push	{r7}
 800a896:	b089      	sub	sp, #36	; 0x24
 800a898:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a89a:	4bb3      	ldr	r3, [pc, #716]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8a2:	2b18      	cmp	r3, #24
 800a8a4:	f200 8155 	bhi.w	800ab52 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8a8:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ae:	bf00      	nop
 800a8b0:	0800a915 	.word	0x0800a915
 800a8b4:	0800ab53 	.word	0x0800ab53
 800a8b8:	0800ab53 	.word	0x0800ab53
 800a8bc:	0800ab53 	.word	0x0800ab53
 800a8c0:	0800ab53 	.word	0x0800ab53
 800a8c4:	0800ab53 	.word	0x0800ab53
 800a8c8:	0800ab53 	.word	0x0800ab53
 800a8cc:	0800ab53 	.word	0x0800ab53
 800a8d0:	0800a93b 	.word	0x0800a93b
 800a8d4:	0800ab53 	.word	0x0800ab53
 800a8d8:	0800ab53 	.word	0x0800ab53
 800a8dc:	0800ab53 	.word	0x0800ab53
 800a8e0:	0800ab53 	.word	0x0800ab53
 800a8e4:	0800ab53 	.word	0x0800ab53
 800a8e8:	0800ab53 	.word	0x0800ab53
 800a8ec:	0800ab53 	.word	0x0800ab53
 800a8f0:	0800a941 	.word	0x0800a941
 800a8f4:	0800ab53 	.word	0x0800ab53
 800a8f8:	0800ab53 	.word	0x0800ab53
 800a8fc:	0800ab53 	.word	0x0800ab53
 800a900:	0800ab53 	.word	0x0800ab53
 800a904:	0800ab53 	.word	0x0800ab53
 800a908:	0800ab53 	.word	0x0800ab53
 800a90c:	0800ab53 	.word	0x0800ab53
 800a910:	0800a947 	.word	0x0800a947
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a914:	4b94      	ldr	r3, [pc, #592]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a920:	4b91      	ldr	r3, [pc, #580]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	08db      	lsrs	r3, r3, #3
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	4a90      	ldr	r2, [pc, #576]	; (800ab6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a92c:	fa22 f303 	lsr.w	r3, r2, r3
 800a930:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a932:	e111      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a934:	4b8d      	ldr	r3, [pc, #564]	; (800ab6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a936:	61bb      	str	r3, [r7, #24]
      break;
 800a938:	e10e      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a93a:	4b8d      	ldr	r3, [pc, #564]	; (800ab70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a93c:	61bb      	str	r3, [r7, #24]
      break;
 800a93e:	e10b      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a940:	4b8c      	ldr	r3, [pc, #560]	; (800ab74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a942:	61bb      	str	r3, [r7, #24]
      break;
 800a944:	e108      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a946:	4b88      	ldr	r3, [pc, #544]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a950:	4b85      	ldr	r3, [pc, #532]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a954:	091b      	lsrs	r3, r3, #4
 800a956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a95a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a95c:	4b82      	ldr	r3, [pc, #520]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a966:	4b80      	ldr	r3, [pc, #512]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	fb02 f303 	mul.w	r3, r2, r3
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 80e1 	beq.w	800ab4c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	f000 8083 	beq.w	800aa98 <HAL_RCC_GetSysClockFreq+0x204>
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b02      	cmp	r3, #2
 800a996:	f200 80a1 	bhi.w	800aadc <HAL_RCC_GetSysClockFreq+0x248>
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <HAL_RCC_GetSysClockFreq+0x114>
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d056      	beq.n	800aa54 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9a6:	e099      	b.n	800aadc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9a8:	4b6f      	ldr	r3, [pc, #444]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0320 	and.w	r3, r3, #32
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02d      	beq.n	800aa10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9b4:	4b6c      	ldr	r3, [pc, #432]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	08db      	lsrs	r3, r3, #3
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	4a6b      	ldr	r2, [pc, #428]	; (800ab6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	ee07 3a90 	vmov	s15, r3
 800a9cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9de:	4b62      	ldr	r3, [pc, #392]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa0e:	e087      	b.n	800ab20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab7c <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa22:	4b51      	ldr	r3, [pc, #324]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa32:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa36:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa52:	e065      	b.n	800ab20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab80 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa66:	4b40      	ldr	r3, [pc, #256]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa7a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa96:	e043      	b.n	800ab20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ab84 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aaa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaaa:	4b2f      	ldr	r3, [pc, #188]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaba:	ed97 6a02 	vldr	s12, [r7, #8]
 800aabe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aada:	e021      	b.n	800ab20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab80 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b1e      	ldr	r3, [pc, #120]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafe:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab02:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab78 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab20:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	0a5b      	lsrs	r3, r3, #9
 800ab26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab44:	ee17 3a90 	vmov	r3, s15
 800ab48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab4a:	e005      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	61bb      	str	r3, [r7, #24]
      break;
 800ab50:	e002      	b.n	800ab58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab54:	61bb      	str	r3, [r7, #24]
      break;
 800ab56:	bf00      	nop
  }

  return sysclockfreq;
 800ab58:	69bb      	ldr	r3, [r7, #24]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3724      	adds	r7, #36	; 0x24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	58024400 	.word	0x58024400
 800ab6c:	03d09000 	.word	0x03d09000
 800ab70:	003d0900 	.word	0x003d0900
 800ab74:	017d7840 	.word	0x017d7840
 800ab78:	46000000 	.word	0x46000000
 800ab7c:	4c742400 	.word	0x4c742400
 800ab80:	4a742400 	.word	0x4a742400
 800ab84:	4bbebc20 	.word	0x4bbebc20

0800ab88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab8e:	f7ff fe81 	bl	800a894 <HAL_RCC_GetSysClockFreq>
 800ab92:	4602      	mov	r2, r0
 800ab94:	4b10      	ldr	r3, [pc, #64]	; (800abd8 <HAL_RCC_GetHCLKFreq+0x50>)
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	0a1b      	lsrs	r3, r3, #8
 800ab9a:	f003 030f 	and.w	r3, r3, #15
 800ab9e:	490f      	ldr	r1, [pc, #60]	; (800abdc <HAL_RCC_GetHCLKFreq+0x54>)
 800aba0:	5ccb      	ldrb	r3, [r1, r3]
 800aba2:	f003 031f 	and.w	r3, r3, #31
 800aba6:	fa22 f303 	lsr.w	r3, r2, r3
 800abaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abac:	4b0a      	ldr	r3, [pc, #40]	; (800abd8 <HAL_RCC_GetHCLKFreq+0x50>)
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	f003 030f 	and.w	r3, r3, #15
 800abb4:	4a09      	ldr	r2, [pc, #36]	; (800abdc <HAL_RCC_GetHCLKFreq+0x54>)
 800abb6:	5cd3      	ldrb	r3, [r2, r3]
 800abb8:	f003 031f 	and.w	r3, r3, #31
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	fa22 f303 	lsr.w	r3, r2, r3
 800abc2:	4a07      	ldr	r2, [pc, #28]	; (800abe0 <HAL_RCC_GetHCLKFreq+0x58>)
 800abc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abc6:	4a07      	ldr	r2, [pc, #28]	; (800abe4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abcc:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <HAL_RCC_GetHCLKFreq+0x58>)
 800abce:	681b      	ldr	r3, [r3, #0]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	58024400 	.word	0x58024400
 800abdc:	080172b4 	.word	0x080172b4
 800abe0:	24000094 	.word	0x24000094
 800abe4:	24000090 	.word	0x24000090

0800abe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abec:	f7ff ffcc 	bl	800ab88 <HAL_RCC_GetHCLKFreq>
 800abf0:	4602      	mov	r2, r0
 800abf2:	4b06      	ldr	r3, [pc, #24]	; (800ac0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	091b      	lsrs	r3, r3, #4
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	4904      	ldr	r1, [pc, #16]	; (800ac10 <HAL_RCC_GetPCLK1Freq+0x28>)
 800abfe:	5ccb      	ldrb	r3, [r1, r3]
 800ac00:	f003 031f 	and.w	r3, r3, #31
 800ac04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	58024400 	.word	0x58024400
 800ac10:	080172b4 	.word	0x080172b4

0800ac14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac18:	f7ff ffb6 	bl	800ab88 <HAL_RCC_GetHCLKFreq>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	4b06      	ldr	r3, [pc, #24]	; (800ac38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	0a1b      	lsrs	r3, r3, #8
 800ac24:	f003 0307 	and.w	r3, r3, #7
 800ac28:	4904      	ldr	r1, [pc, #16]	; (800ac3c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac2a:	5ccb      	ldrb	r3, [r1, r3]
 800ac2c:	f003 031f 	and.w	r3, r3, #31
 800ac30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	58024400 	.word	0x58024400
 800ac3c:	080172b4 	.word	0x080172b4

0800ac40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	223f      	movs	r2, #63	; 0x3f
 800ac4e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f003 0207 	and.w	r2, r3, #7
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800ac5c:	4b17      	ldr	r3, [pc, #92]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800ac68:	4b14      	ldr	r3, [pc, #80]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	f003 020f 	and.w	r2, r3, #15
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800ac74:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800ac80:	4b0e      	ldr	r3, [pc, #56]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800ac8c:	4b0b      	ldr	r3, [pc, #44]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800ac98:	4b08      	ldr	r3, [pc, #32]	; (800acbc <HAL_RCC_GetClockConfig+0x7c>)
 800ac9a:	6a1b      	ldr	r3, [r3, #32]
 800ac9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aca4:	4b06      	ldr	r3, [pc, #24]	; (800acc0 <HAL_RCC_GetClockConfig+0x80>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 020f 	and.w	r2, r3, #15
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	601a      	str	r2, [r3, #0]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	58024400 	.word	0x58024400
 800acc0:	52002000 	.word	0x52002000

0800acc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800acc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800acc8:	b0ca      	sub	sp, #296	; 0x128
 800acca:	af00      	add	r7, sp, #0
 800accc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acd6:	2300      	movs	r3, #0
 800acd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ace8:	2500      	movs	r5, #0
 800acea:	ea54 0305 	orrs.w	r3, r4, r5
 800acee:	d049      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800acf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acfa:	d02f      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800acfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad00:	d828      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad06:	d01a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad0c:	d822      	bhi.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ad12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad16:	d007      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad18:	e01c      	b.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1a:	4bb8      	ldr	r3, [pc, #736]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4ab7      	ldr	r2, [pc, #732]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad26:	e01a      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	2102      	movs	r1, #2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 fb61 	bl	800d3f8 <RCCEx_PLL2_Config>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad3c:	e00f      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad42:	3328      	adds	r3, #40	; 0x28
 800ad44:	2102      	movs	r1, #2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f002 fc08 	bl	800d55c <RCCEx_PLL3_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad52:	e004      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad5a:	e000      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10a      	bne.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad66:	4ba5      	ldr	r3, [pc, #660]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad74:	4aa1      	ldr	r2, [pc, #644]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad76:	430b      	orrs	r3, r1
 800ad78:	6513      	str	r3, [r2, #80]	; 0x50
 800ad7a:	e003      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad90:	f04f 0900 	mov.w	r9, #0
 800ad94:	ea58 0309 	orrs.w	r3, r8, r9
 800ad98:	d047      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada0:	2b04      	cmp	r3, #4
 800ada2:	d82a      	bhi.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ada4:	a201      	add	r2, pc, #4	; (adr r2, 800adac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ada6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adaa:	bf00      	nop
 800adac:	0800adc1 	.word	0x0800adc1
 800adb0:	0800adcf 	.word	0x0800adcf
 800adb4:	0800ade5 	.word	0x0800ade5
 800adb8:	0800ae03 	.word	0x0800ae03
 800adbc:	0800ae03 	.word	0x0800ae03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc0:	4b8e      	ldr	r3, [pc, #568]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc4:	4a8d      	ldr	r2, [pc, #564]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adcc:	e01a      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800adce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add2:	3308      	adds	r3, #8
 800add4:	2100      	movs	r1, #0
 800add6:	4618      	mov	r0, r3
 800add8:	f002 fb0e 	bl	800d3f8 <RCCEx_PLL2_Config>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ade2:	e00f      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ade4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade8:	3328      	adds	r3, #40	; 0x28
 800adea:	2100      	movs	r1, #0
 800adec:	4618      	mov	r0, r3
 800adee:	f002 fbb5 	bl	800d55c <RCCEx_PLL3_Config>
 800adf2:	4603      	mov	r3, r0
 800adf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adf8:	e004      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae00:	e000      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ae02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae0c:	4b7b      	ldr	r3, [pc, #492]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae10:	f023 0107 	bic.w	r1, r3, #7
 800ae14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1a:	4a78      	ldr	r2, [pc, #480]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	6513      	str	r3, [r2, #80]	; 0x50
 800ae20:	e003      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ae36:	f04f 0b00 	mov.w	fp, #0
 800ae3a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae3e:	d04c      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae4a:	d030      	beq.n	800aeae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ae4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae50:	d829      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae52:	2bc0      	cmp	r3, #192	; 0xc0
 800ae54:	d02d      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ae56:	2bc0      	cmp	r3, #192	; 0xc0
 800ae58:	d825      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae5a:	2b80      	cmp	r3, #128	; 0x80
 800ae5c:	d018      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ae5e:	2b80      	cmp	r3, #128	; 0x80
 800ae60:	d821      	bhi.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ae66:	2b40      	cmp	r3, #64	; 0x40
 800ae68:	d007      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ae6a:	e01c      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae6c:	4b63      	ldr	r3, [pc, #396]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	4a62      	ldr	r2, [pc, #392]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae78:	e01c      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae7e:	3308      	adds	r3, #8
 800ae80:	2100      	movs	r1, #0
 800ae82:	4618      	mov	r0, r3
 800ae84:	f002 fab8 	bl	800d3f8 <RCCEx_PLL2_Config>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ae8e:	e011      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae94:	3328      	adds	r3, #40	; 0x28
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f002 fb5f 	bl	800d55c <RCCEx_PLL3_Config>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aea4:	e006      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeac:	e002      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aeae:	bf00      	nop
 800aeb0:	e000      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aeb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10a      	bne.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800aebc:	4b4f      	ldr	r3, [pc, #316]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeca:	4a4c      	ldr	r2, [pc, #304]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aecc:	430b      	orrs	r3, r1
 800aece:	6513      	str	r3, [r2, #80]	; 0x50
 800aed0:	e003      	b.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aeda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800aee6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800aeea:	2300      	movs	r3, #0
 800aeec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800aef0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800aef4:	460b      	mov	r3, r1
 800aef6:	4313      	orrs	r3, r2
 800aef8:	d053      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af06:	d035      	beq.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800af08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af0c:	d82e      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af12:	d031      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800af14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af18:	d828      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af1e:	d01a      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800af20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af24:	d822      	bhi.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800af2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af2e:	d007      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800af30:	e01c      	b.n	800af6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af32:	4b32      	ldr	r3, [pc, #200]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af36:	4a31      	ldr	r2, [pc, #196]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af3e:	e01c      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af44:	3308      	adds	r3, #8
 800af46:	2100      	movs	r1, #0
 800af48:	4618      	mov	r0, r3
 800af4a:	f002 fa55 	bl	800d3f8 <RCCEx_PLL2_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af54:	e011      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5a:	3328      	adds	r3, #40	; 0x28
 800af5c:	2100      	movs	r1, #0
 800af5e:	4618      	mov	r0, r3
 800af60:	f002 fafc 	bl	800d55c <RCCEx_PLL3_Config>
 800af64:	4603      	mov	r3, r0
 800af66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af6a:	e006      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af72:	e002      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af74:	bf00      	nop
 800af76:	e000      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800af78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10b      	bne.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800af82:	4b1e      	ldr	r3, [pc, #120]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af86:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af92:	4a1a      	ldr	r2, [pc, #104]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af94:	430b      	orrs	r3, r1
 800af96:	6593      	str	r3, [r2, #88]	; 0x58
 800af98:	e003      	b.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800afae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800afb2:	2300      	movs	r3, #0
 800afb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800afb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800afbc:	460b      	mov	r3, r1
 800afbe:	4313      	orrs	r3, r2
 800afc0:	d056      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800afc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afce:	d038      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800afd4:	d831      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800afd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afda:	d034      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800afdc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800afe0:	d82b      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800afe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afe6:	d01d      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800afe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afec:	d825      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aff6:	d00a      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aff8:	e01f      	b.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800affa:	bf00      	nop
 800affc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b000:	4ba2      	ldr	r3, [pc, #648]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	4aa1      	ldr	r2, [pc, #644]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b00a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b00c:	e01c      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b012:	3308      	adds	r3, #8
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f002 f9ee 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b022:	e011      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b028:	3328      	adds	r3, #40	; 0x28
 800b02a:	2100      	movs	r1, #0
 800b02c:	4618      	mov	r0, r3
 800b02e:	f002 fa95 	bl	800d55c <RCCEx_PLL3_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b038:	e006      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b040:	e002      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b042:	bf00      	nop
 800b044:	e000      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b046:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10b      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b050:	4b8e      	ldr	r3, [pc, #568]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b054:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b05c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b060:	4a8a      	ldr	r2, [pc, #552]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b062:	430b      	orrs	r3, r1
 800b064:	6593      	str	r3, [r2, #88]	; 0x58
 800b066:	e003      	b.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b06c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b078:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b07c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b080:	2300      	movs	r3, #0
 800b082:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b086:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b08a:	460b      	mov	r3, r1
 800b08c:	4313      	orrs	r3, r2
 800b08e:	d03a      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b096:	2b30      	cmp	r3, #48	; 0x30
 800b098:	d01f      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b09a:	2b30      	cmp	r3, #48	; 0x30
 800b09c:	d819      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	d00c      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d815      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d019      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b0aa:	2b10      	cmp	r3, #16
 800b0ac:	d111      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ae:	4b77      	ldr	r3, [pc, #476]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	4a76      	ldr	r2, [pc, #472]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b0ba:	e011      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	2102      	movs	r1, #2
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f002 f997 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b0d0:	e006      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0d8:	e002      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b0e8:	4b68      	ldr	r3, [pc, #416]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0ec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f6:	4a65      	ldr	r2, [pc, #404]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0f8:	430b      	orrs	r3, r1
 800b0fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b0fc:	e003      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b116:	2300      	movs	r3, #0
 800b118:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b11c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b120:	460b      	mov	r3, r1
 800b122:	4313      	orrs	r3, r2
 800b124:	d051      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b130:	d035      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b136:	d82e      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b138:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b13c:	d031      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b13e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b142:	d828      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b148:	d01a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b14a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b14e:	d822      	bhi.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b158:	d007      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b15a:	e01c      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b15c:	4b4b      	ldr	r3, [pc, #300]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	4a4a      	ldr	r2, [pc, #296]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b168:	e01c      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16e:	3308      	adds	r3, #8
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f002 f940 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b178:	4603      	mov	r3, r0
 800b17a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b17e:	e011      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b184:	3328      	adds	r3, #40	; 0x28
 800b186:	2100      	movs	r1, #0
 800b188:	4618      	mov	r0, r3
 800b18a:	f002 f9e7 	bl	800d55c <RCCEx_PLL3_Config>
 800b18e:	4603      	mov	r3, r0
 800b190:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b194:	e006      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b19c:	e002      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e000      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1ac:	4b37      	ldr	r3, [pc, #220]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ba:	4a34      	ldr	r2, [pc, #208]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6513      	str	r3, [r2, #80]	; 0x50
 800b1c0:	e003      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b1d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b1e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	d056      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1f4:	d033      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b1f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1fa:	d82c      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b1fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b200:	d02f      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b206:	d826      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b20c:	d02b      	beq.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b20e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b212:	d820      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b218:	d012      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b21a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b21e:	d81a      	bhi.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b220:	2b00      	cmp	r3, #0
 800b222:	d022      	beq.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b228:	d115      	bne.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b22a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22e:	3308      	adds	r3, #8
 800b230:	2101      	movs	r1, #1
 800b232:	4618      	mov	r0, r3
 800b234:	f002 f8e0 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b23e:	e015      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b244:	3328      	adds	r3, #40	; 0x28
 800b246:	2101      	movs	r1, #1
 800b248:	4618      	mov	r0, r3
 800b24a:	f002 f987 	bl	800d55c <RCCEx_PLL3_Config>
 800b24e:	4603      	mov	r3, r0
 800b250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b254:	e00a      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b25c:	e006      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b25e:	bf00      	nop
 800b260:	e004      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b262:	bf00      	nop
 800b264:	e002      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b266:	bf00      	nop
 800b268:	e000      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b26a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b26c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10d      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b274:	4b05      	ldr	r3, [pc, #20]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b278:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b282:	4a02      	ldr	r2, [pc, #8]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b284:	430b      	orrs	r3, r1
 800b286:	6513      	str	r3, [r2, #80]	; 0x50
 800b288:	e006      	b.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b28a:	bf00      	nop
 800b28c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b2a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	d055      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2c4:	d033      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b2c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ca:	d82c      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d0:	d02f      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d6:	d826      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2dc:	d02b      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b2de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2e2:	d820      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e8:	d012      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b2ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ee:	d81a      	bhi.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d022      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f8:	d115      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fe:	3308      	adds	r3, #8
 800b300:	2101      	movs	r1, #1
 800b302:	4618      	mov	r0, r3
 800b304:	f002 f878 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b30e:	e015      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b314:	3328      	adds	r3, #40	; 0x28
 800b316:	2101      	movs	r1, #1
 800b318:	4618      	mov	r0, r3
 800b31a:	f002 f91f 	bl	800d55c <RCCEx_PLL3_Config>
 800b31e:	4603      	mov	r3, r0
 800b320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b324:	e00a      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b32c:	e006      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b32e:	bf00      	nop
 800b330:	e004      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b332:	bf00      	nop
 800b334:	e002      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b33a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b33c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b340:	2b00      	cmp	r3, #0
 800b342:	d10b      	bne.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b344:	4ba3      	ldr	r3, [pc, #652]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b348:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b354:	4a9f      	ldr	r2, [pc, #636]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b356:	430b      	orrs	r3, r1
 800b358:	6593      	str	r3, [r2, #88]	; 0x58
 800b35a:	e003      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b360:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b374:	2300      	movs	r3, #0
 800b376:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b37a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b37e:	460b      	mov	r3, r1
 800b380:	4313      	orrs	r3, r2
 800b382:	d037      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b38a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b38e:	d00e      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b394:	d816      	bhi.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d018      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b39a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b39e:	d111      	bne.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3a0:	4b8c      	ldr	r3, [pc, #560]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4a8b      	ldr	r2, [pc, #556]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3ac:	e00f      	b.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 f81e 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3c2:	e004      	b.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3ca:	e000      	b.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b3cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b3d6:	4b7f      	ldr	r3, [pc, #508]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3da:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e4:	4a7b      	ldr	r2, [pc, #492]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3e6:	430b      	orrs	r3, r1
 800b3e8:	6513      	str	r3, [r2, #80]	; 0x50
 800b3ea:	e003      	b.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b3f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b404:	2300      	movs	r3, #0
 800b406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b40a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b40e:	460b      	mov	r3, r1
 800b410:	4313      	orrs	r3, r2
 800b412:	d039      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	d81c      	bhi.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b41e:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b461 	.word	0x0800b461
 800b428:	0800b435 	.word	0x0800b435
 800b42c:	0800b443 	.word	0x0800b443
 800b430:	0800b461 	.word	0x0800b461
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b434:	4b67      	ldr	r3, [pc, #412]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	4a66      	ldr	r2, [pc, #408]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b43a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b43e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b440:	e00f      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b446:	3308      	adds	r3, #8
 800b448:	2102      	movs	r1, #2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 ffd4 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b456:	e004      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b45e:	e000      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b460:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10a      	bne.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b46a:	4b5a      	ldr	r3, [pc, #360]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b46c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b46e:	f023 0103 	bic.w	r1, r3, #3
 800b472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b478:	4a56      	ldr	r2, [pc, #344]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47a:	430b      	orrs	r3, r1
 800b47c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b47e:	e003      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b498:	2300      	movs	r3, #0
 800b49a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b49e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	f000 809f 	beq.w	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4aa:	4b4b      	ldr	r3, [pc, #300]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a4a      	ldr	r2, [pc, #296]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4b6:	f7f8 fc15 	bl	8003ce4 <HAL_GetTick>
 800b4ba:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4be:	e00b      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4c0:	f7f8 fc10 	bl	8003ce4 <HAL_GetTick>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b4ca:	1ad3      	subs	r3, r2, r3
 800b4cc:	2b64      	cmp	r3, #100	; 0x64
 800b4ce:	d903      	bls.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4d6:	e005      	b.n	800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b4d8:	4b3f      	ldr	r3, [pc, #252]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0ed      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d179      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b4ec:	4b39      	ldr	r3, [pc, #228]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b4f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4f8:	4053      	eors	r3, r2
 800b4fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d015      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b502:	4b34      	ldr	r3, [pc, #208]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b50a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b50e:	4b31      	ldr	r3, [pc, #196]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b512:	4a30      	ldr	r2, [pc, #192]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b518:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b51a:	4b2e      	ldr	r3, [pc, #184]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b51e:	4a2d      	ldr	r2, [pc, #180]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b524:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b526:	4a2b      	ldr	r2, [pc, #172]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b52c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b52e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b532:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b53a:	d118      	bne.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7f8 fbd2 	bl	8003ce4 <HAL_GetTick>
 800b540:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b544:	e00d      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b546:	f7f8 fbcd 	bl	8003ce4 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b550:	1ad2      	subs	r2, r2, r3
 800b552:	f241 3388 	movw	r3, #5000	; 0x1388
 800b556:	429a      	cmp	r2, r3
 800b558:	d903      	bls.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b55a:	2303      	movs	r3, #3
 800b55c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b560:	e005      	b.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b562:	4b1c      	ldr	r3, [pc, #112]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b566:	f003 0302 	and.w	r3, r3, #2
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0eb      	beq.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b56e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b572:	2b00      	cmp	r3, #0
 800b574:	d129      	bne.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b57e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b586:	d10e      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b588:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b598:	091a      	lsrs	r2, r3, #4
 800b59a:	4b10      	ldr	r3, [pc, #64]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b59c:	4013      	ands	r3, r2
 800b59e:	4a0d      	ldr	r2, [pc, #52]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	6113      	str	r3, [r2, #16]
 800b5a4:	e005      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	4a0a      	ldr	r2, [pc, #40]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5b0:	6113      	str	r3, [r2, #16]
 800b5b2:	4b08      	ldr	r3, [pc, #32]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5c2:	4a04      	ldr	r2, [pc, #16]	; (800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5c4:	430b      	orrs	r3, r1
 800b5c6:	6713      	str	r3, [r2, #112]	; 0x70
 800b5c8:	e00e      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b5d2:	e009      	b.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b5d4:	58024400 	.word	0x58024400
 800b5d8:	58024800 	.word	0x58024800
 800b5dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f002 0301 	and.w	r3, r2, #1
 800b5f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b602:	460b      	mov	r3, r1
 800b604:	4313      	orrs	r3, r2
 800b606:	f000 8089 	beq.w	800b71c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b610:	2b28      	cmp	r3, #40	; 0x28
 800b612:	d86b      	bhi.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b614:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61a:	bf00      	nop
 800b61c:	0800b6f5 	.word	0x0800b6f5
 800b620:	0800b6ed 	.word	0x0800b6ed
 800b624:	0800b6ed 	.word	0x0800b6ed
 800b628:	0800b6ed 	.word	0x0800b6ed
 800b62c:	0800b6ed 	.word	0x0800b6ed
 800b630:	0800b6ed 	.word	0x0800b6ed
 800b634:	0800b6ed 	.word	0x0800b6ed
 800b638:	0800b6ed 	.word	0x0800b6ed
 800b63c:	0800b6c1 	.word	0x0800b6c1
 800b640:	0800b6ed 	.word	0x0800b6ed
 800b644:	0800b6ed 	.word	0x0800b6ed
 800b648:	0800b6ed 	.word	0x0800b6ed
 800b64c:	0800b6ed 	.word	0x0800b6ed
 800b650:	0800b6ed 	.word	0x0800b6ed
 800b654:	0800b6ed 	.word	0x0800b6ed
 800b658:	0800b6ed 	.word	0x0800b6ed
 800b65c:	0800b6d7 	.word	0x0800b6d7
 800b660:	0800b6ed 	.word	0x0800b6ed
 800b664:	0800b6ed 	.word	0x0800b6ed
 800b668:	0800b6ed 	.word	0x0800b6ed
 800b66c:	0800b6ed 	.word	0x0800b6ed
 800b670:	0800b6ed 	.word	0x0800b6ed
 800b674:	0800b6ed 	.word	0x0800b6ed
 800b678:	0800b6ed 	.word	0x0800b6ed
 800b67c:	0800b6f5 	.word	0x0800b6f5
 800b680:	0800b6ed 	.word	0x0800b6ed
 800b684:	0800b6ed 	.word	0x0800b6ed
 800b688:	0800b6ed 	.word	0x0800b6ed
 800b68c:	0800b6ed 	.word	0x0800b6ed
 800b690:	0800b6ed 	.word	0x0800b6ed
 800b694:	0800b6ed 	.word	0x0800b6ed
 800b698:	0800b6ed 	.word	0x0800b6ed
 800b69c:	0800b6f5 	.word	0x0800b6f5
 800b6a0:	0800b6ed 	.word	0x0800b6ed
 800b6a4:	0800b6ed 	.word	0x0800b6ed
 800b6a8:	0800b6ed 	.word	0x0800b6ed
 800b6ac:	0800b6ed 	.word	0x0800b6ed
 800b6b0:	0800b6ed 	.word	0x0800b6ed
 800b6b4:	0800b6ed 	.word	0x0800b6ed
 800b6b8:	0800b6ed 	.word	0x0800b6ed
 800b6bc:	0800b6f5 	.word	0x0800b6f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	2101      	movs	r1, #1
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f001 fe95 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6d4:	e00f      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6da:	3328      	adds	r3, #40	; 0x28
 800b6dc:	2101      	movs	r1, #1
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 ff3c 	bl	800d55c <RCCEx_PLL3_Config>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b6ea:	e004      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6f2:	e000      	b.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b6f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10a      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6fe:	4bbf      	ldr	r3, [pc, #764]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b702:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b70c:	4abb      	ldr	r2, [pc, #748]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b70e:	430b      	orrs	r3, r1
 800b710:	6553      	str	r3, [r2, #84]	; 0x54
 800b712:	e003      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b718:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f002 0302 	and.w	r3, r2, #2
 800b728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b72c:	2300      	movs	r3, #0
 800b72e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b732:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b736:	460b      	mov	r3, r1
 800b738:	4313      	orrs	r3, r2
 800b73a:	d041      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b742:	2b05      	cmp	r3, #5
 800b744:	d824      	bhi.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b799 	.word	0x0800b799
 800b750:	0800b765 	.word	0x0800b765
 800b754:	0800b77b 	.word	0x0800b77b
 800b758:	0800b799 	.word	0x0800b799
 800b75c:	0800b799 	.word	0x0800b799
 800b760:	0800b799 	.word	0x0800b799
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b768:	3308      	adds	r3, #8
 800b76a:	2101      	movs	r1, #1
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 fe43 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b778:	e00f      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77e:	3328      	adds	r3, #40	; 0x28
 800b780:	2101      	movs	r1, #1
 800b782:	4618      	mov	r0, r3
 800b784:	f001 feea 	bl	800d55c <RCCEx_PLL3_Config>
 800b788:	4603      	mov	r3, r0
 800b78a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b78e:	e004      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b796:	e000      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7a2:	4b96      	ldr	r3, [pc, #600]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a6:	f023 0107 	bic.w	r1, r3, #7
 800b7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7b0:	4a92      	ldr	r2, [pc, #584]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	6553      	str	r3, [r2, #84]	; 0x54
 800b7b6:	e003      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f002 0304 	and.w	r3, r2, #4
 800b7cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	d044      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b7e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7e8:	2b05      	cmp	r3, #5
 800b7ea:	d825      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b7ec:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b841 	.word	0x0800b841
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b823 	.word	0x0800b823
 800b800:	0800b841 	.word	0x0800b841
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b841 	.word	0x0800b841
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b810:	3308      	adds	r3, #8
 800b812:	2101      	movs	r1, #1
 800b814:	4618      	mov	r0, r3
 800b816:	f001 fdef 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b820:	e00f      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b826:	3328      	adds	r3, #40	; 0x28
 800b828:	2101      	movs	r1, #1
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 fe96 	bl	800d55c <RCCEx_PLL3_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b836:	e004      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83e:	e000      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10b      	bne.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b84a:	4b6c      	ldr	r3, [pc, #432]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b84e:	f023 0107 	bic.w	r1, r3, #7
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b85a:	4a68      	ldr	r2, [pc, #416]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b85c:	430b      	orrs	r3, r1
 800b85e:	6593      	str	r3, [r2, #88]	; 0x58
 800b860:	e003      	b.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b866:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f002 0320 	and.w	r3, r2, #32
 800b876:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b87a:	2300      	movs	r3, #0
 800b87c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b884:	460b      	mov	r3, r1
 800b886:	4313      	orrs	r3, r2
 800b888:	d055      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b896:	d033      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b89c:	d82c      	bhi.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a2:	d02f      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a8:	d826      	bhi.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8ae:	d02b      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b8b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8b4:	d820      	bhi.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ba:	d012      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b8bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8c0:	d81a      	bhi.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d022      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b8c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ca:	d115      	bne.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 fd8f 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8e0:	e015      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e6:	3328      	adds	r3, #40	; 0x28
 800b8e8:	2102      	movs	r1, #2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 fe36 	bl	800d55c <RCCEx_PLL3_Config>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b8f6:	e00a      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8fe:	e006      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b900:	bf00      	nop
 800b902:	e004      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b904:	bf00      	nop
 800b906:	e002      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b908:	bf00      	nop
 800b90a:	e000      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b90c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b90e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10b      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b926:	4a35      	ldr	r2, [pc, #212]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	6553      	str	r3, [r2, #84]	; 0x54
 800b92c:	e003      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b946:	2300      	movs	r3, #0
 800b948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b94c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b950:	460b      	mov	r3, r1
 800b952:	4313      	orrs	r3, r2
 800b954:	d058      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b95e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b962:	d033      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b964:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b968:	d82c      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96e:	d02f      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b974:	d826      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b97a:	d02b      	beq.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b97c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b980:	d820      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b986:	d012      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b98c:	d81a      	bhi.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d022      	beq.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b996:	d115      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99c:	3308      	adds	r3, #8
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f001 fd29 	bl	800d3f8 <RCCEx_PLL2_Config>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9ac:	e015      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b2:	3328      	adds	r3, #40	; 0x28
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f001 fdd0 	bl	800d55c <RCCEx_PLL3_Config>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9c2:	e00a      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ca:	e006      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9cc:	bf00      	nop
 800b9ce:	e004      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9d0:	bf00      	nop
 800b9d2:	e002      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9d4:	bf00      	nop
 800b9d6:	e000      	b.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b9d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10e      	bne.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b9e2:	4b06      	ldr	r3, [pc, #24]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9f2:	4a02      	ldr	r2, [pc, #8]	; (800b9fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9f8:	e006      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b9fa:	bf00      	nop
 800b9fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ba14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ba22:	460b      	mov	r3, r1
 800ba24:	4313      	orrs	r3, r2
 800ba26:	d055      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba30:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba34:	d033      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ba36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba3a:	d82c      	bhi.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba40:	d02f      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ba42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba46:	d826      	bhi.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba48:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba4c:	d02b      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ba4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba52:	d820      	bhi.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba58:	d012      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ba5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba5e:	d81a      	bhi.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d022      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800ba64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba68:	d115      	bne.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	3308      	adds	r3, #8
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 fcc0 	bl	800d3f8 <RCCEx_PLL2_Config>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba7e:	e015      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba84:	3328      	adds	r3, #40	; 0x28
 800ba86:	2102      	movs	r1, #2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f001 fd67 	bl	800d55c <RCCEx_PLL3_Config>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ba94:	e00a      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba9c:	e006      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ba9e:	bf00      	nop
 800baa0:	e004      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baa2:	bf00      	nop
 800baa4:	e002      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baa6:	bf00      	nop
 800baa8:	e000      	b.n	800baac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10b      	bne.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bab4:	4ba1      	ldr	r3, [pc, #644]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800babc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bac4:	4a9d      	ldr	r2, [pc, #628]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bac6:	430b      	orrs	r3, r1
 800bac8:	6593      	str	r3, [r2, #88]	; 0x58
 800baca:	e003      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bacc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f002 0308 	and.w	r3, r2, #8
 800bae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bae4:	2300      	movs	r3, #0
 800bae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800baea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800baee:	460b      	mov	r3, r1
 800baf0:	4313      	orrs	r3, r2
 800baf2:	d01e      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800baf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb00:	d10c      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	3328      	adds	r3, #40	; 0x28
 800bb08:	2102      	movs	r1, #2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f001 fd26 	bl	800d55c <RCCEx_PLL3_Config>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bb16:	2301      	movs	r3, #1
 800bb18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb1c:	4b87      	ldr	r3, [pc, #540]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb2c:	4a83      	ldr	r2, [pc, #524]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb2e:	430b      	orrs	r3, r1
 800bb30:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3a:	f002 0310 	and.w	r3, r2, #16
 800bb3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb42:	2300      	movs	r3, #0
 800bb44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	d01e      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb5e:	d10c      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb64:	3328      	adds	r3, #40	; 0x28
 800bb66:	2102      	movs	r1, #2
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f001 fcf7 	bl	800d55c <RCCEx_PLL3_Config>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb7a:	4b70      	ldr	r3, [pc, #448]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb8a:	4a6c      	ldr	r2, [pc, #432]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb8c:	430b      	orrs	r3, r1
 800bb8e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bb90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bb9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bba0:	2300      	movs	r3, #0
 800bba2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bba6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4313      	orrs	r3, r2
 800bbae:	d03e      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbbc:	d022      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bbbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbc2:	d81b      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d003      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbcc:	d00b      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bbce:	e015      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd4:	3308      	adds	r3, #8
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 fc0d 	bl	800d3f8 <RCCEx_PLL2_Config>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bbe4:	e00f      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbea:	3328      	adds	r3, #40	; 0x28
 800bbec:	2102      	movs	r1, #2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f001 fcb4 	bl	800d55c <RCCEx_PLL3_Config>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bbfa:	e004      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc02:	e000      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bc04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10b      	bne.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc0e:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc1e:	4a47      	ldr	r2, [pc, #284]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc20:	430b      	orrs	r3, r1
 800bc22:	6593      	str	r3, [r2, #88]	; 0x58
 800bc24:	e003      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc36:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc3a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bc44:	460b      	mov	r3, r1
 800bc46:	4313      	orrs	r3, r2
 800bc48:	d03b      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc56:	d01f      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bc58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc5c:	d818      	bhi.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bc5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc62:	d003      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bc64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc68:	d007      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bc6a:	e011      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc6c:	4b33      	ldr	r3, [pc, #204]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc70:	4a32      	ldr	r2, [pc, #200]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc78:	e00f      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7e:	3328      	adds	r3, #40	; 0x28
 800bc80:	2101      	movs	r1, #1
 800bc82:	4618      	mov	r0, r3
 800bc84:	f001 fc6a 	bl	800d55c <RCCEx_PLL3_Config>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bc8e:	e004      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc96:	e000      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bc98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10b      	bne.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bca2:	4b26      	ldr	r3, [pc, #152]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb2:	4a22      	ldr	r2, [pc, #136]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	6553      	str	r3, [r2, #84]	; 0x54
 800bcb8:	e003      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bcce:	673b      	str	r3, [r7, #112]	; 0x70
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	677b      	str	r3, [r7, #116]	; 0x74
 800bcd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	d034      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bcde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcec:	d007      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bcee:	e011      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf0:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf4:	4a11      	ldr	r2, [pc, #68]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bcfc:	e00e      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd02:	3308      	adds	r3, #8
 800bd04:	2102      	movs	r1, #2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 fb76 	bl	800d3f8 <RCCEx_PLL2_Config>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10d      	bne.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd24:	4b05      	ldr	r3, [pc, #20]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd32:	4a02      	ldr	r2, [pc, #8]	; (800bd3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd34:	430b      	orrs	r3, r1
 800bd36:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd38:	e006      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bd3a:	bf00      	nop
 800bd3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bd54:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd56:	2300      	movs	r3, #0
 800bd58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4313      	orrs	r3, r2
 800bd62:	d00c      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd68:	3328      	adds	r3, #40	; 0x28
 800bd6a:	2102      	movs	r1, #2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f001 fbf5 	bl	800d55c <RCCEx_PLL3_Config>
 800bd72:	4603      	mov	r3, r0
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bd8a:	663b      	str	r3, [r7, #96]	; 0x60
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	667b      	str	r3, [r7, #100]	; 0x64
 800bd90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bd94:	460b      	mov	r3, r1
 800bd96:	4313      	orrs	r3, r2
 800bd98:	d038      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bda2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bda6:	d018      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bda8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdac:	d811      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb2:	d014      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bdb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb8:	d80b      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d011      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bdbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc2:	d106      	bne.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdc4:	4bc3      	ldr	r3, [pc, #780]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	4ac2      	ldr	r2, [pc, #776]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bdd0:	e008      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdd8:	e004      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bdda:	bf00      	nop
 800bddc:	e002      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bdde:	bf00      	nop
 800bde0:	e000      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bde2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bde4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10b      	bne.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bdec:	4bb9      	ldr	r3, [pc, #740]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdfc:	4ab5      	ldr	r2, [pc, #724]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bdfe:	430b      	orrs	r3, r1
 800be00:	6553      	str	r3, [r2, #84]	; 0x54
 800be02:	e003      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800be18:	65bb      	str	r3, [r7, #88]	; 0x58
 800be1a:	2300      	movs	r3, #0
 800be1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800be22:	460b      	mov	r3, r1
 800be24:	4313      	orrs	r3, r2
 800be26:	d009      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be28:	4baa      	ldr	r3, [pc, #680]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be36:	4aa7      	ldr	r2, [pc, #668]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be38:	430b      	orrs	r3, r1
 800be3a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800be3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800be48:	653b      	str	r3, [r7, #80]	; 0x50
 800be4a:	2300      	movs	r3, #0
 800be4c:	657b      	str	r3, [r7, #84]	; 0x54
 800be4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d00a      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800be58:	4b9e      	ldr	r3, [pc, #632]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800be60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800be68:	4a9a      	ldr	r2, [pc, #616]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be6a:	430b      	orrs	r3, r1
 800be6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800be6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be76:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800be7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be7c:	2300      	movs	r3, #0
 800be7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800be84:	460b      	mov	r3, r1
 800be86:	4313      	orrs	r3, r2
 800be88:	d009      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800be8a:	4b92      	ldr	r3, [pc, #584]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be8e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800be92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be98:	4a8e      	ldr	r2, [pc, #568]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be9a:	430b      	orrs	r3, r1
 800be9c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800be9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800beaa:	643b      	str	r3, [r7, #64]	; 0x40
 800beac:	2300      	movs	r3, #0
 800beae:	647b      	str	r3, [r7, #68]	; 0x44
 800beb0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800beb4:	460b      	mov	r3, r1
 800beb6:	4313      	orrs	r3, r2
 800beb8:	d00e      	beq.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800beba:	4b86      	ldr	r3, [pc, #536]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	4a85      	ldr	r2, [pc, #532]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bec0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bec4:	6113      	str	r3, [r2, #16]
 800bec6:	4b83      	ldr	r3, [pc, #524]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bec8:	6919      	ldr	r1, [r3, #16]
 800beca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bed2:	4a80      	ldr	r2, [pc, #512]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bed4:	430b      	orrs	r3, r1
 800bed6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bee4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bee6:	2300      	movs	r3, #0
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800beee:	460b      	mov	r3, r1
 800bef0:	4313      	orrs	r3, r2
 800bef2:	d009      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bef4:	4b77      	ldr	r3, [pc, #476]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800befc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	4a74      	ldr	r2, [pc, #464]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf04:	430b      	orrs	r3, r1
 800bf06:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf14:	633b      	str	r3, [r7, #48]	; 0x30
 800bf16:	2300      	movs	r3, #0
 800bf18:	637b      	str	r3, [r7, #52]	; 0x34
 800bf1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4313      	orrs	r3, r2
 800bf22:	d00a      	beq.n	800bf3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf24:	4b6b      	ldr	r3, [pc, #428]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf28:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bf2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf34:	4a67      	ldr	r2, [pc, #412]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf36:	430b      	orrs	r3, r1
 800bf38:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf42:	2100      	movs	r1, #0
 800bf44:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf46:	f003 0301 	and.w	r3, r3, #1
 800bf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bf50:	460b      	mov	r3, r1
 800bf52:	4313      	orrs	r3, r2
 800bf54:	d011      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf5a:	3308      	adds	r3, #8
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f001 fa4a 	bl	800d3f8 <RCCEx_PLL2_Config>
 800bf64:	4603      	mov	r3, r0
 800bf66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bf6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	2100      	movs	r1, #0
 800bf84:	6239      	str	r1, [r7, #32]
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bf90:	460b      	mov	r3, r1
 800bf92:	4313      	orrs	r3, r2
 800bf94:	d011      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	2101      	movs	r1, #1
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f001 fa2a 	bl	800d3f8 <RCCEx_PLL2_Config>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	61b9      	str	r1, [r7, #24]
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	61fb      	str	r3, [r7, #28]
 800bfcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	d011      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfda:	3308      	adds	r3, #8
 800bfdc:	2102      	movs	r1, #2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 fa0a 	bl	800d3f8 <RCCEx_PLL2_Config>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	2100      	movs	r1, #0
 800c004:	6139      	str	r1, [r7, #16]
 800c006:	f003 0308 	and.w	r3, r3, #8
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c010:	460b      	mov	r3, r1
 800c012:	4313      	orrs	r3, r2
 800c014:	d011      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01a:	3328      	adds	r3, #40	; 0x28
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 fa9c 	bl	800d55c <RCCEx_PLL3_Config>
 800c024:	4603      	mov	r3, r0
 800c026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c02a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	2100      	movs	r1, #0
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	f003 0310 	and.w	r3, r3, #16
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c050:	460b      	mov	r3, r1
 800c052:	4313      	orrs	r3, r2
 800c054:	d011      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05a:	3328      	adds	r3, #40	; 0x28
 800c05c:	2101      	movs	r1, #1
 800c05e:	4618      	mov	r0, r3
 800c060:	f001 fa7c 	bl	800d55c <RCCEx_PLL3_Config>
 800c064:	4603      	mov	r3, r0
 800c066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c06a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	2100      	movs	r1, #0
 800c084:	6039      	str	r1, [r7, #0]
 800c086:	f003 0320 	and.w	r3, r3, #32
 800c08a:	607b      	str	r3, [r7, #4]
 800c08c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c090:	460b      	mov	r3, r1
 800c092:	4313      	orrs	r3, r2
 800c094:	d011      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09a:	3328      	adds	r3, #40	; 0x28
 800c09c:	2102      	movs	r1, #2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f001 fa5c 	bl	800d55c <RCCEx_PLL3_Config>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c0ba:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d101      	bne.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	e000      	b.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0d4:	58024400 	.word	0x58024400

0800c0d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b090      	sub	sp, #64	; 0x40
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c0e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0e6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c0ea:	430b      	orrs	r3, r1
 800c0ec:	f040 8094 	bne.w	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c0f0:	4b9e      	ldr	r3, [pc, #632]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0f4:	f003 0307 	and.w	r3, r3, #7
 800c0f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	2b04      	cmp	r3, #4
 800c0fe:	f200 8087 	bhi.w	800c210 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c102:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c108:	0800c11d 	.word	0x0800c11d
 800c10c:	0800c145 	.word	0x0800c145
 800c110:	0800c16d 	.word	0x0800c16d
 800c114:	0800c209 	.word	0x0800c209
 800c118:	0800c195 	.word	0x0800c195
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c11c:	4b93      	ldr	r3, [pc, #588]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c128:	d108      	bne.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c12a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c12e:	4618      	mov	r0, r3
 800c130:	f001 f810 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c138:	f000 bd45 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c140:	f000 bd41 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c144:	4b89      	ldr	r3, [pc, #548]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c14c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c150:	d108      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c152:	f107 0318 	add.w	r3, r7, #24
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fd54 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c160:	f000 bd31 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c168:	f000 bd2d 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c16c:	4b7f      	ldr	r3, [pc, #508]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c178:	d108      	bne.n	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c17a:	f107 030c 	add.w	r3, r7, #12
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fe94 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c188:	f000 bd1d 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c190:	f000 bd19 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c194:	4b75      	ldr	r3, [pc, #468]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c19c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c19e:	4b73      	ldr	r3, [pc, #460]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 0304 	and.w	r3, r3, #4
 800c1a6:	2b04      	cmp	r3, #4
 800c1a8:	d10c      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d109      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1b0:	4b6e      	ldr	r3, [pc, #440]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	08db      	lsrs	r3, r3, #3
 800c1b6:	f003 0303 	and.w	r3, r3, #3
 800c1ba:	4a6d      	ldr	r2, [pc, #436]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c2:	e01f      	b.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1c4:	4b69      	ldr	r3, [pc, #420]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1d0:	d106      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1d8:	d102      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1da:	4b66      	ldr	r3, [pc, #408]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1de:	e011      	b.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1e0:	4b62      	ldr	r3, [pc, #392]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ec:	d106      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f4:	d102      	bne.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1f6:	4b60      	ldr	r3, [pc, #384]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1fa:	e003      	b.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c200:	f000 bce1 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c204:	f000 bcdf 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c208:	4b5c      	ldr	r3, [pc, #368]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c20c:	f000 bcdb 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c214:	f000 bcd7 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c21c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c220:	430b      	orrs	r3, r1
 800c222:	f040 80ad 	bne.w	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c226:	4b51      	ldr	r3, [pc, #324]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c22a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c22e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c236:	d056      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c23e:	f200 8090 	bhi.w	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	2bc0      	cmp	r3, #192	; 0xc0
 800c246:	f000 8088 	beq.w	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24c:	2bc0      	cmp	r3, #192	; 0xc0
 800c24e:	f200 8088 	bhi.w	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	2b80      	cmp	r3, #128	; 0x80
 800c256:	d032      	beq.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	2b80      	cmp	r3, #128	; 0x80
 800c25c:	f200 8081 	bhi.w	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c262:	2b00      	cmp	r3, #0
 800c264:	d003      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c268:	2b40      	cmp	r3, #64	; 0x40
 800c26a:	d014      	beq.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c26c:	e079      	b.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c26e:	4b3f      	ldr	r3, [pc, #252]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c27a:	d108      	bne.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c280:	4618      	mov	r0, r3
 800c282:	f000 ff67 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28a:	f000 bc9c 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c28e:	2300      	movs	r3, #0
 800c290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c292:	f000 bc98 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c296:	4b35      	ldr	r3, [pc, #212]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c29e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2a2:	d108      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2a4:	f107 0318 	add.w	r3, r7, #24
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 fcab 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2b2:	f000 bc88 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ba:	f000 bc84 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2be:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ca:	d108      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2cc:	f107 030c 	add.w	r3, r7, #12
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f000 fdeb 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2da:	f000 bc74 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e2:	f000 bc70 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2e6:	4b21      	ldr	r3, [pc, #132]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f0:	4b1e      	ldr	r3, [pc, #120]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d10c      	bne.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c302:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	08db      	lsrs	r3, r3, #3
 800c308:	f003 0303 	and.w	r3, r3, #3
 800c30c:	4a18      	ldr	r2, [pc, #96]	; (800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c30e:	fa22 f303 	lsr.w	r3, r2, r3
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c314:	e01f      	b.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c316:	4b15      	ldr	r3, [pc, #84]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c322:	d106      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c32a:	d102      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c32c:	4b11      	ldr	r3, [pc, #68]	; (800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c330:	e011      	b.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c33e:	d106      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c346:	d102      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c348:	4b0b      	ldr	r3, [pc, #44]	; (800c378 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34c:	e003      	b.n	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c352:	f000 bc38 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c356:	f000 bc36 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c35a:	4b08      	ldr	r3, [pc, #32]	; (800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35e:	f000 bc32 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c366:	f000 bc2e 	b.w	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
 800c370:	03d09000 	.word	0x03d09000
 800c374:	003d0900 	.word	0x003d0900
 800c378:	017d7840 	.word	0x017d7840
 800c37c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c384:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c388:	430b      	orrs	r3, r1
 800c38a:	f040 809c 	bne.w	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c38e:	4b9e      	ldr	r3, [pc, #632]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c392:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c396:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c39e:	d054      	beq.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3a6:	f200 808b 	bhi.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3b0:	f000 8083 	beq.w	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3ba:	f200 8081 	bhi.w	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3c4:	d02f      	beq.n	800c426 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3cc:	d878      	bhi.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3da:	d012      	beq.n	800c402 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c3dc:	e070      	b.n	800c4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3de:	4b8a      	ldr	r3, [pc, #552]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3ea:	d107      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 feaf 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3fa:	e3e4      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c400:	e3e1      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c402:	4b81      	ldr	r3, [pc, #516]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c40e:	d107      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c410:	f107 0318 	add.w	r3, r7, #24
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fbf5 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41e:	e3d2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	e3cf      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c426:	4b78      	ldr	r3, [pc, #480]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c432:	d107      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c434:	f107 030c 	add.w	r3, r7, #12
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fd37 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e3c0      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e3bd      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c44a:	4b6f      	ldr	r3, [pc, #444]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c44e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c452:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c454:	4b6c      	ldr	r3, [pc, #432]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0304 	and.w	r3, r3, #4
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d10c      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d109      	bne.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c466:	4b68      	ldr	r3, [pc, #416]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	08db      	lsrs	r3, r3, #3
 800c46c:	f003 0303 	and.w	r3, r3, #3
 800c470:	4a66      	ldr	r2, [pc, #408]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c472:	fa22 f303 	lsr.w	r3, r2, r3
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c478:	e01e      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c47a:	4b63      	ldr	r3, [pc, #396]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c486:	d106      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c48e:	d102      	bne.n	800c496 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c490:	4b5f      	ldr	r3, [pc, #380]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c494:	e010      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c496:	4b5c      	ldr	r3, [pc, #368]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a2:	d106      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4aa:	d102      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ac:	4b59      	ldr	r3, [pc, #356]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b0:	e002      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4b6:	e386      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4b8:	e385      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ba:	4b57      	ldr	r3, [pc, #348]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4be:	e382      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e37f      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ca:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c4ce:	430b      	orrs	r3, r1
 800c4d0:	f040 80a7 	bne.w	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c4d4:	4b4c      	ldr	r3, [pc, #304]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c4dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4e4:	d055      	beq.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4ec:	f200 8096 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c4f6:	f000 8084 	beq.w	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c500:	f200 808c 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c50a:	d030      	beq.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c512:	f200 8083 	bhi.w	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d004      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c522:	d012      	beq.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c524:	e07a      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c526:	4b38      	ldr	r3, [pc, #224]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c52e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c532:	d107      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c538:	4618      	mov	r0, r3
 800c53a:	f000 fe0b 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c542:	e340      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	e33d      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c54a:	4b2f      	ldr	r3, [pc, #188]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c552:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c556:	d107      	bne.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c558:	f107 0318 	add.w	r3, r7, #24
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 fb51 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c566:	e32e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e32b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c56e:	4b26      	ldr	r3, [pc, #152]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c57a:	d107      	bne.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c57c:	f107 030c 	add.w	r3, r7, #12
 800c580:	4618      	mov	r0, r3
 800c582:	f000 fc93 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c58a:	e31c      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c58c:	2300      	movs	r3, #0
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c590:	e319      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c592:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c59a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c59c:	4b1a      	ldr	r3, [pc, #104]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d10c      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d109      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ae:	4b16      	ldr	r3, [pc, #88]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	08db      	lsrs	r3, r3, #3
 800c5b4:	f003 0303 	and.w	r3, r3, #3
 800c5b8:	4a14      	ldr	r2, [pc, #80]	; (800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5c0:	e01e      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5c2:	4b11      	ldr	r3, [pc, #68]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ce:	d106      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5d6:	d102      	bne.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5dc:	e010      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5de:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5ea:	d106      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5f2:	d102      	bne.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5f8:	e002      	b.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5fe:	e2e2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c600:	e2e1      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c606:	e2de      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c608:	58024400 	.word	0x58024400
 800c60c:	03d09000 	.word	0x03d09000
 800c610:	003d0900 	.word	0x003d0900
 800c614:	017d7840 	.word	0x017d7840
 800c618:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c620:	e2d1      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c626:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c62a:	430b      	orrs	r3, r1
 800c62c:	f040 809c 	bne.w	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c630:	4b93      	ldr	r3, [pc, #588]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c634:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c638:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c640:	d054      	beq.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c648:	f200 808b 	bhi.w	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c652:	f000 8083 	beq.w	800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c65c:	f200 8081 	bhi.w	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c666:	d02f      	beq.n	800c6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c66e:	d878      	bhi.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c67c:	d012      	beq.n	800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c67e:	e070      	b.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c680:	4b7f      	ldr	r3, [pc, #508]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c68c:	d107      	bne.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c68e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c692:	4618      	mov	r0, r3
 800c694:	f000 fd5e 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69c:	e293      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a2:	e290      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6a4:	4b76      	ldr	r3, [pc, #472]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6b0:	d107      	bne.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b2:	f107 0318 	add.w	r3, r7, #24
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 faa4 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c0:	e281      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c6:	e27e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6c8:	4b6d      	ldr	r3, [pc, #436]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6d4:	d107      	bne.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f000 fbe6 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e4:	e26f      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ea:	e26c      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6ec:	4b64      	ldr	r3, [pc, #400]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6f4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6f6:	4b62      	ldr	r3, [pc, #392]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 0304 	and.w	r3, r3, #4
 800c6fe:	2b04      	cmp	r3, #4
 800c700:	d10c      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c704:	2b00      	cmp	r3, #0
 800c706:	d109      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c708:	4b5d      	ldr	r3, [pc, #372]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	08db      	lsrs	r3, r3, #3
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	4a5c      	ldr	r2, [pc, #368]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c714:	fa22 f303 	lsr.w	r3, r2, r3
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71a:	e01e      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c71c:	4b58      	ldr	r3, [pc, #352]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c728:	d106      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c730:	d102      	bne.n	800c738 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c732:	4b55      	ldr	r3, [pc, #340]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c734:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c736:	e010      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c738:	4b51      	ldr	r3, [pc, #324]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c744:	d106      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c74c:	d102      	bne.n	800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c74e:	4b4f      	ldr	r3, [pc, #316]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c750:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c752:	e002      	b.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c754:	2300      	movs	r3, #0
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c758:	e235      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c75a:	e234      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c75c:	4b4c      	ldr	r3, [pc, #304]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c760:	e231      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c766:	e22e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c76c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c770:	430b      	orrs	r3, r1
 800c772:	f040 808f 	bne.w	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c776:	4b42      	ldr	r3, [pc, #264]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c77e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c782:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c786:	d06b      	beq.n	800c860 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c78a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c78e:	d874      	bhi.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c796:	d056      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c79e:	d86c      	bhi.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7a6:	d03b      	beq.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7ae:	d864      	bhi.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7b6:	d021      	beq.n	800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7be:	d85c      	bhi.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d004      	beq.n	800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7cc:	d004      	beq.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c7ce:	e054      	b.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c7d0:	f7fe fa0a 	bl	800abe8 <HAL_RCC_GetPCLK1Freq>
 800c7d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7d6:	e1f6      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7d8:	4b29      	ldr	r3, [pc, #164]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7e4:	d107      	bne.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e6:	f107 0318 	add.w	r3, r7, #24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f000 fa0a 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7f4:	e1e7      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fa:	e1e4      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7fc:	4b20      	ldr	r3, [pc, #128]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c808:	d107      	bne.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c80a:	f107 030c 	add.w	r3, r7, #12
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fb4c 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c818:	e1d5      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81e:	e1d2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c820:	4b17      	ldr	r3, [pc, #92]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b04      	cmp	r3, #4
 800c82a:	d109      	bne.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c82c:	4b14      	ldr	r3, [pc, #80]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	08db      	lsrs	r3, r3, #3
 800c832:	f003 0303 	and.w	r3, r3, #3
 800c836:	4a13      	ldr	r2, [pc, #76]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83e:	e1c2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c844:	e1bf      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c846:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c852:	d102      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c854:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c858:	e1b5      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c85e:	e1b2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c860:	4b07      	ldr	r3, [pc, #28]	; (800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c86c:	d102      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c86e:	4b07      	ldr	r3, [pc, #28]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c872:	e1a8      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e1a5      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c87a:	2300      	movs	r3, #0
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87e:	e1a2      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c880:	58024400 	.word	0x58024400
 800c884:	03d09000 	.word	0x03d09000
 800c888:	003d0900 	.word	0x003d0900
 800c88c:	017d7840 	.word	0x017d7840
 800c890:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c894:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c898:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c89c:	430b      	orrs	r3, r1
 800c89e:	d173      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c8a0:	4b9c      	ldr	r3, [pc, #624]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b0:	d02f      	beq.n	800c912 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b8:	d863      	bhi.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8c6:	d012      	beq.n	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c8c8:	e05b      	b.n	800c982 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8ca:	4b92      	ldr	r3, [pc, #584]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8d6:	d107      	bne.n	800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8d8:	f107 0318 	add.w	r3, r7, #24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 f991 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8e6:	e16e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ec:	e16b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8ee:	4b89      	ldr	r3, [pc, #548]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8fa:	d107      	bne.n	800c90c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8fc:	f107 030c 	add.w	r3, r7, #12
 800c900:	4618      	mov	r0, r3
 800c902:	f000 fad3 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c90a:	e15c      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c910:	e159      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c912:	4b80      	ldr	r3, [pc, #512]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c91a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c91c:	4b7d      	ldr	r3, [pc, #500]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0304 	and.w	r3, r3, #4
 800c924:	2b04      	cmp	r3, #4
 800c926:	d10c      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d109      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c92e:	4b79      	ldr	r3, [pc, #484]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	08db      	lsrs	r3, r3, #3
 800c934:	f003 0303 	and.w	r3, r3, #3
 800c938:	4a77      	ldr	r2, [pc, #476]	; (800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c93a:	fa22 f303 	lsr.w	r3, r2, r3
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c940:	e01e      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c942:	4b74      	ldr	r3, [pc, #464]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c94a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c94e:	d106      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c956:	d102      	bne.n	800c95e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c958:	4b70      	ldr	r3, [pc, #448]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c95a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c95c:	e010      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c95e:	4b6d      	ldr	r3, [pc, #436]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c96a:	d106      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c972:	d102      	bne.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c974:	4b6a      	ldr	r3, [pc, #424]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c978:	e002      	b.n	800c980 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c97e:	e122      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c980:	e121      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c986:	e11e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c98c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c990:	430b      	orrs	r3, r1
 800c992:	d133      	bne.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c994:	4b5f      	ldr	r3, [pc, #380]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c99c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d004      	beq.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9aa:	d012      	beq.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c9ac:	e023      	b.n	800c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9ae:	4b59      	ldr	r3, [pc, #356]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9ba:	d107      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fbc7 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ca:	e0fc      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d0:	e0f9      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9d2:	4b50      	ldr	r3, [pc, #320]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9de:	d107      	bne.n	800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e0:	f107 0318 	add.w	r3, r7, #24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 f90d 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ee:	e0ea      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f4:	e0e7      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fa:	e0e4      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca00:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ca04:	430b      	orrs	r3, r1
 800ca06:	f040 808d 	bne.w	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ca0a:	4b42      	ldr	r3, [pc, #264]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ca12:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca1a:	d06b      	beq.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca22:	d874      	bhi.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca2a:	d056      	beq.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca32:	d86c      	bhi.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca3a:	d03b      	beq.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca42:	d864      	bhi.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca4a:	d021      	beq.n	800ca90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ca4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca52:	d85c      	bhi.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d004      	beq.n	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ca5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca60:	d004      	beq.n	800ca6c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ca62:	e054      	b.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ca64:	f000 f8b8 	bl	800cbd8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca68:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca6a:	e0ac      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca6c:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca78:	d107      	bne.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca7a:	f107 0318 	add.w	r3, r7, #24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 f8c0 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca88:	e09d      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca8e:	e09a      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca90:	4b20      	ldr	r3, [pc, #128]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca9c:	d107      	bne.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca9e:	f107 030c 	add.w	r3, r7, #12
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fa02 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caac:	e08b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caae:	2300      	movs	r3, #0
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab2:	e088      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cab4:	4b17      	ldr	r3, [pc, #92]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d109      	bne.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cac0:	4b14      	ldr	r3, [pc, #80]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	08db      	lsrs	r3, r3, #3
 800cac6:	f003 0303 	and.w	r3, r3, #3
 800caca:	4a13      	ldr	r2, [pc, #76]	; (800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cacc:	fa22 f303 	lsr.w	r3, r2, r3
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cad2:	e078      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cad4:	2300      	movs	r3, #0
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad8:	e075      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cada:	4b0e      	ldr	r3, [pc, #56]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cae6:	d102      	bne.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cae8:	4b0c      	ldr	r3, [pc, #48]	; (800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800caea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caec:	e06b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf2:	e068      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800caf4:	4b07      	ldr	r3, [pc, #28]	; (800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cafc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb00:	d102      	bne.n	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cb02:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb06:	e05e      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb0c:	e05b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb12:	e058      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb14:	58024400 	.word	0x58024400
 800cb18:	03d09000 	.word	0x03d09000
 800cb1c:	003d0900 	.word	0x003d0900
 800cb20:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb28:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cb2c:	430b      	orrs	r3, r1
 800cb2e:	d148      	bne.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb30:	4b27      	ldr	r3, [pc, #156]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb40:	d02a      	beq.n	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb48:	d838      	bhi.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d004      	beq.n	800cb5a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb56:	d00d      	beq.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cb58:	e030      	b.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb66:	d102      	bne.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cb68:	4b1a      	ldr	r3, [pc, #104]	; (800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb6c:	e02b      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb72:	e028      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb74:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb80:	d107      	bne.n	800cb92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb86:	4618      	mov	r0, r3
 800cb88:	f000 fae4 	bl	800d154 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb90:	e019      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb96:	e016      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cba0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cba4:	d107      	bne.n	800cbb6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cba6:	f107 0318 	add.w	r3, r7, #24
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f000 f82a 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb4:	e007      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbba:	e004      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc0:	e001      	b.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cbc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3740      	adds	r7, #64	; 0x40
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	58024400 	.word	0x58024400
 800cbd4:	017d7840 	.word	0x017d7840

0800cbd8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cbdc:	f7fd ffd4 	bl	800ab88 <HAL_RCC_GetHCLKFreq>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	4b06      	ldr	r3, [pc, #24]	; (800cbfc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
 800cbe6:	091b      	lsrs	r3, r3, #4
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	4904      	ldr	r1, [pc, #16]	; (800cc00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cbee:	5ccb      	ldrb	r3, [r1, r3]
 800cbf0:	f003 031f 	and.w	r3, r3, #31
 800cbf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	58024400 	.word	0x58024400
 800cc00:	080172b4 	.word	0x080172b4

0800cc04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b089      	sub	sp, #36	; 0x24
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc0c:	4ba1      	ldr	r3, [pc, #644]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc10:	f003 0303 	and.w	r3, r3, #3
 800cc14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cc16:	4b9f      	ldr	r3, [pc, #636]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1a:	0b1b      	lsrs	r3, r3, #12
 800cc1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cc22:	4b9c      	ldr	r3, [pc, #624]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc26:	091b      	lsrs	r3, r3, #4
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cc2e:	4b99      	ldr	r3, [pc, #612]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc32:	08db      	lsrs	r3, r3, #3
 800cc34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	fb02 f303 	mul.w	r3, r2, r3
 800cc3e:	ee07 3a90 	vmov	s15, r3
 800cc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 8111 	beq.w	800ce74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc52:	69bb      	ldr	r3, [r7, #24]
 800cc54:	2b02      	cmp	r3, #2
 800cc56:	f000 8083 	beq.w	800cd60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	f200 80a1 	bhi.w	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d003      	beq.n	800cc70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d056      	beq.n	800cd1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc6e:	e099      	b.n	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc70:	4b88      	ldr	r3, [pc, #544]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 0320 	and.w	r3, r3, #32
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d02d      	beq.n	800ccd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc7c:	4b85      	ldr	r3, [pc, #532]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	08db      	lsrs	r3, r3, #3
 800cc82:	f003 0303 	and.w	r3, r3, #3
 800cc86:	4a84      	ldr	r2, [pc, #528]	; (800ce98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cc88:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	ee07 3a90 	vmov	s15, r3
 800cc94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	ee07 3a90 	vmov	s15, r3
 800cc9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca6:	4b7b      	ldr	r3, [pc, #492]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ccd6:	e087      	b.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cea0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b6a      	ldr	r3, [pc, #424]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1a:	e065      	b.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b59      	ldr	r3, [pc, #356]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5e:	e043      	b.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd72:	4b48      	ldr	r3, [pc, #288]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd86:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda2:	e021      	b.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cea4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb6:	4b37      	ldr	r3, [pc, #220]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cde6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cde8:	4b2a      	ldr	r3, [pc, #168]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdec:	0a5b      	lsrs	r3, r3, #9
 800cdee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdf2:	ee07 3a90 	vmov	s15, r3
 800cdf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce02:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce0e:	ee17 2a90 	vmov	r2, s15
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ce16:	4b1f      	ldr	r3, [pc, #124]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1a:	0c1b      	lsrs	r3, r3, #16
 800ce1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce20:	ee07 3a90 	vmov	s15, r3
 800ce24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce30:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce3c:	ee17 2a90 	vmov	r2, s15
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ce44:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce48:	0e1b      	lsrs	r3, r3, #24
 800ce4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce4e:	ee07 3a90 	vmov	s15, r3
 800ce52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce6a:	ee17 2a90 	vmov	r2, s15
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce72:	e008      	b.n	800ce86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	609a      	str	r2, [r3, #8]
}
 800ce86:	bf00      	nop
 800ce88:	3724      	adds	r7, #36	; 0x24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	58024400 	.word	0x58024400
 800ce98:	03d09000 	.word	0x03d09000
 800ce9c:	46000000 	.word	0x46000000
 800cea0:	4c742400 	.word	0x4c742400
 800cea4:	4a742400 	.word	0x4a742400
 800cea8:	4bbebc20 	.word	0x4bbebc20

0800ceac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b089      	sub	sp, #36	; 0x24
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ceb4:	4ba1      	ldr	r3, [pc, #644]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb8:	f003 0303 	and.w	r3, r3, #3
 800cebc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cebe:	4b9f      	ldr	r3, [pc, #636]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cec2:	0d1b      	lsrs	r3, r3, #20
 800cec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cec8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ceca:	4b9c      	ldr	r3, [pc, #624]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	0a1b      	lsrs	r3, r3, #8
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ced6:	4b99      	ldr	r3, [pc, #612]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceda:	08db      	lsrs	r3, r3, #3
 800cedc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	fb02 f303 	mul.w	r3, r2, r3
 800cee6:	ee07 3a90 	vmov	s15, r3
 800ceea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f000 8111 	beq.w	800d11c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	f000 8083 	beq.w	800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	f200 80a1 	bhi.w	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d003      	beq.n	800cf18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d056      	beq.n	800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cf16:	e099      	b.n	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf18:	4b88      	ldr	r3, [pc, #544]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0320 	and.w	r3, r3, #32
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d02d      	beq.n	800cf80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf24:	4b85      	ldr	r3, [pc, #532]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	08db      	lsrs	r3, r3, #3
 800cf2a:	f003 0303 	and.w	r3, r3, #3
 800cf2e:	4a84      	ldr	r2, [pc, #528]	; (800d140 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf30:	fa22 f303 	lsr.w	r3, r2, r3
 800cf34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	ee07 3a90 	vmov	s15, r3
 800cf3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	ee07 3a90 	vmov	s15, r3
 800cf46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4e:	4b7b      	ldr	r3, [pc, #492]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf7e:	e087      	b.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	ee07 3a90 	vmov	s15, r3
 800cf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d148 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cf8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf92:	4b6a      	ldr	r3, [pc, #424]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfc2:	e065      	b.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d14c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd6:	4b59      	ldr	r3, [pc, #356]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d006:	e043      	b.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d012:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01a:	4b48      	ldr	r3, [pc, #288]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d022:	ee07 3a90 	vmov	s15, r3
 800d026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d04a:	e021      	b.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d056:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d14c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d05e:	4b37      	ldr	r3, [pc, #220]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d066:	ee07 3a90 	vmov	s15, r3
 800d06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d072:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d08e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d090:	4b2a      	ldr	r3, [pc, #168]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d094:	0a5b      	lsrs	r3, r3, #9
 800d096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d09a:	ee07 3a90 	vmov	s15, r3
 800d09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0b6:	ee17 2a90 	vmov	r2, s15
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d0be:	4b1f      	ldr	r3, [pc, #124]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c8:	ee07 3a90 	vmov	s15, r3
 800d0cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0e4:	ee17 2a90 	vmov	r2, s15
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d0ec:	4b13      	ldr	r3, [pc, #76]	; (800d13c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f0:	0e1b      	lsrs	r3, r3, #24
 800d0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0f6:	ee07 3a90 	vmov	s15, r3
 800d0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d102:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d106:	edd7 6a07 	vldr	s13, [r7, #28]
 800d10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d112:	ee17 2a90 	vmov	r2, s15
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d11a:	e008      	b.n	800d12e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	609a      	str	r2, [r3, #8]
}
 800d12e:	bf00      	nop
 800d130:	3724      	adds	r7, #36	; 0x24
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	58024400 	.word	0x58024400
 800d140:	03d09000 	.word	0x03d09000
 800d144:	46000000 	.word	0x46000000
 800d148:	4c742400 	.word	0x4c742400
 800d14c:	4a742400 	.word	0x4a742400
 800d150:	4bbebc20 	.word	0x4bbebc20

0800d154 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d154:	b480      	push	{r7}
 800d156:	b089      	sub	sp, #36	; 0x24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d15c:	4ba0      	ldr	r3, [pc, #640]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d166:	4b9e      	ldr	r3, [pc, #632]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	091b      	lsrs	r3, r3, #4
 800d16c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d170:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d172:	4b9b      	ldr	r3, [pc, #620]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d17c:	4b98      	ldr	r3, [pc, #608]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d180:	08db      	lsrs	r3, r3, #3
 800d182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d186:	693a      	ldr	r2, [r7, #16]
 800d188:	fb02 f303 	mul.w	r3, r2, r3
 800d18c:	ee07 3a90 	vmov	s15, r3
 800d190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d194:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 8111 	beq.w	800d3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	f000 8083 	beq.w	800d2ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	f200 80a1 	bhi.w	800d2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d003      	beq.n	800d1be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d056      	beq.n	800d26a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d1bc:	e099      	b.n	800d2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1be:	4b88      	ldr	r3, [pc, #544]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f003 0320 	and.w	r3, r3, #32
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d02d      	beq.n	800d226 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1ca:	4b85      	ldr	r3, [pc, #532]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	08db      	lsrs	r3, r3, #3
 800d1d0:	f003 0303 	and.w	r3, r3, #3
 800d1d4:	4a83      	ldr	r2, [pc, #524]	; (800d3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d1da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	ee07 3a90 	vmov	s15, r3
 800d1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1f4:	4b7a      	ldr	r3, [pc, #488]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1fc:	ee07 3a90 	vmov	s15, r3
 800d200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d204:	ed97 6a03 	vldr	s12, [r7, #12]
 800d208:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d20c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d210:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d21c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d220:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d224:	e087      	b.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	ee07 3a90 	vmov	s15, r3
 800d22c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d230:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d3ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d238:	4b69      	ldr	r3, [pc, #420]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d240:	ee07 3a90 	vmov	s15, r3
 800d244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d248:	ed97 6a03 	vldr	s12, [r7, #12]
 800d24c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d25c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d260:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d264:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d268:	e065      	b.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d274:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d27c:	4b58      	ldr	r3, [pc, #352]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d284:	ee07 3a90 	vmov	s15, r3
 800d288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d28c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d290:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d29c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ac:	e043      	b.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d2bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c0:	4b47      	ldr	r3, [pc, #284]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f0:	e021      	b.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	ee07 3a90 	vmov	s15, r3
 800d2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d3ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d304:	4b36      	ldr	r3, [pc, #216]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d30c:	ee07 3a90 	vmov	s15, r3
 800d310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d314:	ed97 6a03 	vldr	s12, [r7, #12]
 800d318:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d3e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d31c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d330:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d334:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d336:	4b2a      	ldr	r3, [pc, #168]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33a:	0a5b      	lsrs	r3, r3, #9
 800d33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d340:	ee07 3a90 	vmov	s15, r3
 800d344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d34c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d350:	edd7 6a07 	vldr	s13, [r7, #28]
 800d354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d35c:	ee17 2a90 	vmov	r2, s15
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d364:	4b1e      	ldr	r3, [pc, #120]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d368:	0c1b      	lsrs	r3, r3, #16
 800d36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d37e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d38a:	ee17 2a90 	vmov	r2, s15
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d392:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d396:	0e1b      	lsrs	r3, r3, #24
 800d398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d39c:	ee07 3a90 	vmov	s15, r3
 800d3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b8:	ee17 2a90 	vmov	r2, s15
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d3c0:	e008      	b.n	800d3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	609a      	str	r2, [r3, #8]
}
 800d3d4:	bf00      	nop
 800d3d6:	3724      	adds	r7, #36	; 0x24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	58024400 	.word	0x58024400
 800d3e4:	03d09000 	.word	0x03d09000
 800d3e8:	46000000 	.word	0x46000000
 800d3ec:	4c742400 	.word	0x4c742400
 800d3f0:	4a742400 	.word	0x4a742400
 800d3f4:	4bbebc20 	.word	0x4bbebc20

0800d3f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d406:	4b53      	ldr	r3, [pc, #332]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	2b03      	cmp	r3, #3
 800d410:	d101      	bne.n	800d416 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	e099      	b.n	800d54a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d416:	4b4f      	ldr	r3, [pc, #316]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a4e      	ldr	r2, [pc, #312]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d41c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d422:	f7f6 fc5f 	bl	8003ce4 <HAL_GetTick>
 800d426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d428:	e008      	b.n	800d43c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d42a:	f7f6 fc5b 	bl	8003ce4 <HAL_GetTick>
 800d42e:	4602      	mov	r2, r0
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	2b02      	cmp	r3, #2
 800d436:	d901      	bls.n	800d43c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d438:	2303      	movs	r3, #3
 800d43a:	e086      	b.n	800d54a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d43c:	4b45      	ldr	r3, [pc, #276]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1f0      	bne.n	800d42a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d448:	4b42      	ldr	r3, [pc, #264]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	031b      	lsls	r3, r3, #12
 800d456:	493f      	ldr	r1, [pc, #252]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d458:	4313      	orrs	r3, r2
 800d45a:	628b      	str	r3, [r1, #40]	; 0x28
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	3b01      	subs	r3, #1
 800d462:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	3b01      	subs	r3, #1
 800d46c:	025b      	lsls	r3, r3, #9
 800d46e:	b29b      	uxth	r3, r3
 800d470:	431a      	orrs	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	3b01      	subs	r3, #1
 800d478:	041b      	lsls	r3, r3, #16
 800d47a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d47e:	431a      	orrs	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	3b01      	subs	r3, #1
 800d486:	061b      	lsls	r3, r3, #24
 800d488:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d48c:	4931      	ldr	r1, [pc, #196]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d48e:	4313      	orrs	r3, r2
 800d490:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d492:	4b30      	ldr	r3, [pc, #192]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	492d      	ldr	r1, [pc, #180]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d4a4:	4b2b      	ldr	r3, [pc, #172]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a8:	f023 0220 	bic.w	r2, r3, #32
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	4928      	ldr	r1, [pc, #160]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d4b6:	4b27      	ldr	r3, [pc, #156]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ba:	4a26      	ldr	r2, [pc, #152]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4bc:	f023 0310 	bic.w	r3, r3, #16
 800d4c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d4c2:	4b24      	ldr	r3, [pc, #144]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4c6:	4b24      	ldr	r3, [pc, #144]	; (800d558 <RCCEx_PLL2_Config+0x160>)
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	69d2      	ldr	r2, [r2, #28]
 800d4ce:	00d2      	lsls	r2, r2, #3
 800d4d0:	4920      	ldr	r1, [pc, #128]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d4d6:	4b1f      	ldr	r3, [pc, #124]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4da:	4a1e      	ldr	r2, [pc, #120]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4dc:	f043 0310 	orr.w	r3, r3, #16
 800d4e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d4e8:	4b1a      	ldr	r3, [pc, #104]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	4a19      	ldr	r2, [pc, #100]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d4f4:	e00f      	b.n	800d516 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d106      	bne.n	800d50a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d4fc:	4b15      	ldr	r3, [pc, #84]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	4a14      	ldr	r2, [pc, #80]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d506:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d508:	e005      	b.n	800d516 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d50a:	4b12      	ldr	r3, [pc, #72]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d50e:	4a11      	ldr	r2, [pc, #68]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d510:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d516:	4b0f      	ldr	r3, [pc, #60]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a0e      	ldr	r2, [pc, #56]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d51c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d522:	f7f6 fbdf 	bl	8003ce4 <HAL_GetTick>
 800d526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d528:	e008      	b.n	800d53c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d52a:	f7f6 fbdb 	bl	8003ce4 <HAL_GetTick>
 800d52e:	4602      	mov	r2, r0
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	2b02      	cmp	r3, #2
 800d536:	d901      	bls.n	800d53c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	e006      	b.n	800d54a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d53c:	4b05      	ldr	r3, [pc, #20]	; (800d554 <RCCEx_PLL2_Config+0x15c>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0f0      	beq.n	800d52a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d548:	7bfb      	ldrb	r3, [r7, #15]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
 800d552:	bf00      	nop
 800d554:	58024400 	.word	0x58024400
 800d558:	ffff0007 	.word	0xffff0007

0800d55c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d56a:	4b53      	ldr	r3, [pc, #332]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56e:	f003 0303 	and.w	r3, r3, #3
 800d572:	2b03      	cmp	r3, #3
 800d574:	d101      	bne.n	800d57a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d576:	2301      	movs	r3, #1
 800d578:	e099      	b.n	800d6ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d57a:	4b4f      	ldr	r3, [pc, #316]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a4e      	ldr	r2, [pc, #312]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d586:	f7f6 fbad 	bl	8003ce4 <HAL_GetTick>
 800d58a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d58c:	e008      	b.n	800d5a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d58e:	f7f6 fba9 	bl	8003ce4 <HAL_GetTick>
 800d592:	4602      	mov	r2, r0
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d901      	bls.n	800d5a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d59c:	2303      	movs	r3, #3
 800d59e:	e086      	b.n	800d6ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d5a0:	4b45      	ldr	r3, [pc, #276]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1f0      	bne.n	800d58e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d5ac:	4b42      	ldr	r3, [pc, #264]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	051b      	lsls	r3, r3, #20
 800d5ba:	493f      	ldr	r1, [pc, #252]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	628b      	str	r3, [r1, #40]	; 0x28
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	025b      	lsls	r3, r3, #9
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68db      	ldr	r3, [r3, #12]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	041b      	lsls	r3, r3, #16
 800d5de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5e2:	431a      	orrs	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	691b      	ldr	r3, [r3, #16]
 800d5e8:	3b01      	subs	r3, #1
 800d5ea:	061b      	lsls	r3, r3, #24
 800d5ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5f0:	4931      	ldr	r1, [pc, #196]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5f6:	4b30      	ldr	r3, [pc, #192]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d5f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	695b      	ldr	r3, [r3, #20]
 800d602:	492d      	ldr	r1, [pc, #180]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d604:	4313      	orrs	r3, r2
 800d606:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d608:	4b2b      	ldr	r3, [pc, #172]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	699b      	ldr	r3, [r3, #24]
 800d614:	4928      	ldr	r1, [pc, #160]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d616:	4313      	orrs	r3, r2
 800d618:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d61a:	4b27      	ldr	r3, [pc, #156]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61e:	4a26      	ldr	r2, [pc, #152]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d626:	4b24      	ldr	r3, [pc, #144]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d62a:	4b24      	ldr	r3, [pc, #144]	; (800d6bc <RCCEx_PLL3_Config+0x160>)
 800d62c:	4013      	ands	r3, r2
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	69d2      	ldr	r2, [r2, #28]
 800d632:	00d2      	lsls	r2, r2, #3
 800d634:	4920      	ldr	r1, [pc, #128]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d636:	4313      	orrs	r3, r2
 800d638:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d63a:	4b1f      	ldr	r3, [pc, #124]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	4a1e      	ldr	r2, [pc, #120]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d644:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d64c:	4b1a      	ldr	r3, [pc, #104]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	4a19      	ldr	r2, [pc, #100]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d652:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d656:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d658:	e00f      	b.n	800d67a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d106      	bne.n	800d66e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d660:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	4a14      	ldr	r2, [pc, #80]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d66a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d66c:	e005      	b.n	800d67a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d66e:	4b12      	ldr	r3, [pc, #72]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d672:	4a11      	ldr	r2, [pc, #68]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d674:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d678:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d67a:	4b0f      	ldr	r3, [pc, #60]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a0e      	ldr	r2, [pc, #56]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d686:	f7f6 fb2d 	bl	8003ce4 <HAL_GetTick>
 800d68a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d68c:	e008      	b.n	800d6a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d68e:	f7f6 fb29 	bl	8003ce4 <HAL_GetTick>
 800d692:	4602      	mov	r2, r0
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	1ad3      	subs	r3, r2, r3
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d901      	bls.n	800d6a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e006      	b.n	800d6ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d6a0:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <RCCEx_PLL3_Config+0x15c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d0f0      	beq.n	800d68e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	58024400 	.word	0x58024400
 800d6bc:	ffff0007 	.word	0xffff0007

0800d6c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d071      	beq.n	800d7b6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d106      	bne.n	800d6ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7f5 fd94 	bl	8003214 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2202      	movs	r2, #2
 800d6f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	f003 0310 	and.w	r3, r3, #16
 800d6fe:	2b10      	cmp	r3, #16
 800d700:	d050      	beq.n	800d7a4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	22ca      	movs	r2, #202	; 0xca
 800d708:	625a      	str	r2, [r3, #36]	; 0x24
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2253      	movs	r2, #83	; 0x53
 800d710:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fa4a 	bl	800dbac <RTC_EnterInitMode>
 800d718:	4603      	mov	r3, r0
 800d71a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d124      	bne.n	800d76c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6899      	ldr	r1, [r3, #8]
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	4b24      	ldr	r3, [pc, #144]	; (800d7c0 <HAL_RTC_Init+0x100>)
 800d72e:	400b      	ands	r3, r1
 800d730:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6899      	ldr	r1, [r3, #8]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	691b      	ldr	r3, [r3, #16]
 800d740:	431a      	orrs	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	431a      	orrs	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	430a      	orrs	r2, r1
 800d74e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	689b      	ldr	r3, [r3, #8]
 800d754:	0419      	lsls	r1, r3, #16
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	68da      	ldr	r2, [r3, #12]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fa56 	bl	800dc14 <RTC_ExitInitMode>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d113      	bne.n	800d79a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f022 0203 	bic.w	r2, r2, #3
 800d780:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	69da      	ldr	r2, [r3, #28]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	695b      	ldr	r3, [r3, #20]
 800d790:	431a      	orrs	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	430a      	orrs	r2, r1
 800d798:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	22ff      	movs	r2, #255	; 0xff
 800d7a0:	625a      	str	r2, [r3, #36]	; 0x24
 800d7a2:	e001      	b.n	800d7a8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d103      	bne.n	800d7b6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	ff8fffbf 	.word	0xff8fffbf

0800d7c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7c4:	b590      	push	{r4, r7, lr}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d101      	bne.n	800d7de <HAL_RTC_SetTime+0x1a>
 800d7da:	2302      	movs	r3, #2
 800d7dc:	e089      	b.n	800d8f2 <HAL_RTC_SetTime+0x12e>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	22ca      	movs	r2, #202	; 0xca
 800d7f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2253      	movs	r2, #83	; 0x53
 800d7fc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f9d4 	bl	800dbac <RTC_EnterInitMode>
 800d804:	4603      	mov	r3, r0
 800d806:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d808:	7cfb      	ldrb	r3, [r7, #19]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d161      	bne.n	800d8d2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d126      	bne.n	800d862 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	2200      	movs	r2, #0
 800d826:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f000 fa2f 	bl	800dc90 <RTC_ByteToBcd2>
 800d832:	4603      	mov	r3, r0
 800d834:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	785b      	ldrb	r3, [r3, #1]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fa28 	bl	800dc90 <RTC_ByteToBcd2>
 800d840:	4603      	mov	r3, r0
 800d842:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d844:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	789b      	ldrb	r3, [r3, #2]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fa20 	bl	800dc90 <RTC_ByteToBcd2>
 800d850:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d852:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	78db      	ldrb	r3, [r3, #3]
 800d85a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d85c:	4313      	orrs	r3, r2
 800d85e:	617b      	str	r3, [r7, #20]
 800d860:	e018      	b.n	800d894 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2200      	movs	r2, #0
 800d874:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	785b      	ldrb	r3, [r3, #1]
 800d880:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d882:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d888:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	78db      	ldrb	r3, [r3, #3]
 800d88e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d890:	4313      	orrs	r3, r2
 800d892:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681a      	ldr	r2, [r3, #0]
 800d898:	6979      	ldr	r1, [r7, #20]
 800d89a:	4b18      	ldr	r3, [pc, #96]	; (800d8fc <HAL_RTC_SetTime+0x138>)
 800d89c:	400b      	ands	r3, r1
 800d89e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	689a      	ldr	r2, [r3, #8]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d8ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6899      	ldr	r1, [r3, #8]
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	430a      	orrs	r2, r1
 800d8c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f000 f9a3 	bl	800dc14 <RTC_ExitInitMode>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	22ff      	movs	r2, #255	; 0xff
 800d8d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d8da:	7cfb      	ldrb	r3, [r7, #19]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d103      	bne.n	800d8e8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d8f0:	7cfb      	ldrb	r3, [r7, #19]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd90      	pop	{r4, r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	007f7f7f 	.word	0x007f7f7f

0800d900 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	4b22      	ldr	r3, [pc, #136]	; (800d9b4 <HAL_RTC_GetTime+0xb4>)
 800d92c:	4013      	ands	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	0c1b      	lsrs	r3, r3, #16
 800d934:	b2db      	uxtb	r3, r3
 800d936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	0a1b      	lsrs	r3, r3, #8
 800d944:	b2db      	uxtb	r3, r3
 800d946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	0d9b      	lsrs	r3, r3, #22
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11a      	bne.n	800d9aa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	4618      	mov	r0, r3
 800d97a:	f000 f9a9 	bl	800dcd0 <RTC_Bcd2ToByte>
 800d97e:	4603      	mov	r3, r0
 800d980:	461a      	mov	r2, r3
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 f9a0 	bl	800dcd0 <RTC_Bcd2ToByte>
 800d990:	4603      	mov	r3, r0
 800d992:	461a      	mov	r2, r3
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	789b      	ldrb	r3, [r3, #2]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f000 f997 	bl	800dcd0 <RTC_Bcd2ToByte>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3718      	adds	r7, #24
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	007f7f7f 	.word	0x007f7f7f

0800d9b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d9b8:	b590      	push	{r4, r7, lr}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d101      	bne.n	800d9d2 <HAL_RTC_SetDate+0x1a>
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	e073      	b.n	800daba <HAL_RTC_SetDate+0x102>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2202      	movs	r2, #2
 800d9de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d10e      	bne.n	800da06 <HAL_RTC_SetDate+0x4e>
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	785b      	ldrb	r3, [r3, #1]
 800d9ec:	f003 0310 	and.w	r3, r3, #16
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d008      	beq.n	800da06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	785b      	ldrb	r3, [r3, #1]
 800d9f8:	f023 0310 	bic.w	r3, r3, #16
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	330a      	adds	r3, #10
 800da00:	b2da      	uxtb	r2, r3
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d11c      	bne.n	800da46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	78db      	ldrb	r3, [r3, #3]
 800da10:	4618      	mov	r0, r3
 800da12:	f000 f93d 	bl	800dc90 <RTC_ByteToBcd2>
 800da16:	4603      	mov	r3, r0
 800da18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	785b      	ldrb	r3, [r3, #1]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 f936 	bl	800dc90 <RTC_ByteToBcd2>
 800da24:	4603      	mov	r3, r0
 800da26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	789b      	ldrb	r3, [r3, #2]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 f92e 	bl	800dc90 <RTC_ByteToBcd2>
 800da34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800da36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]
 800da44:	e00e      	b.n	800da64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	78db      	ldrb	r3, [r3, #3]
 800da4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	785b      	ldrb	r3, [r3, #1]
 800da50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da52:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800da58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800da60:	4313      	orrs	r3, r2
 800da62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	22ca      	movs	r2, #202	; 0xca
 800da6a:	625a      	str	r2, [r3, #36]	; 0x24
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2253      	movs	r2, #83	; 0x53
 800da72:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 f899 	bl	800dbac <RTC_EnterInitMode>
 800da7a:	4603      	mov	r3, r0
 800da7c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800da7e:	7cfb      	ldrb	r3, [r7, #19]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d10a      	bne.n	800da9a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	6979      	ldr	r1, [r7, #20]
 800da8a:	4b0e      	ldr	r3, [pc, #56]	; (800dac4 <HAL_RTC_SetDate+0x10c>)
 800da8c:	400b      	ands	r3, r1
 800da8e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f8bf 	bl	800dc14 <RTC_ExitInitMode>
 800da96:	4603      	mov	r3, r0
 800da98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	22ff      	movs	r2, #255	; 0xff
 800daa0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800daa2:	7cfb      	ldrb	r3, [r7, #19]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d103      	bne.n	800dab0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dab8:	7cfb      	ldrb	r3, [r7, #19]


}
 800daba:	4618      	mov	r0, r3
 800dabc:	371c      	adds	r7, #28
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd90      	pop	{r4, r7, pc}
 800dac2:	bf00      	nop
 800dac4:	00ffff3f 	.word	0x00ffff3f

0800dac8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	4b21      	ldr	r3, [pc, #132]	; (800db60 <HAL_RTC_GetDate+0x98>)
 800dadc:	4013      	ands	r3, r2
 800dade:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	0c1b      	lsrs	r3, r3, #16
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	0a1b      	lsrs	r3, r3, #8
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	f003 031f 	and.w	r3, r3, #31
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db02:	b2da      	uxtb	r2, r3
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	0b5b      	lsrs	r3, r3, #13
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	f003 0307 	and.w	r3, r3, #7
 800db12:	b2da      	uxtb	r2, r3
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d11a      	bne.n	800db54 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	78db      	ldrb	r3, [r3, #3]
 800db22:	4618      	mov	r0, r3
 800db24:	f000 f8d4 	bl	800dcd0 <RTC_Bcd2ToByte>
 800db28:	4603      	mov	r3, r0
 800db2a:	461a      	mov	r2, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	4618      	mov	r0, r3
 800db36:	f000 f8cb 	bl	800dcd0 <RTC_Bcd2ToByte>
 800db3a:	4603      	mov	r3, r0
 800db3c:	461a      	mov	r2, r3
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	789b      	ldrb	r3, [r3, #2]
 800db46:	4618      	mov	r0, r3
 800db48:	f000 f8c2 	bl	800dcd0 <RTC_Bcd2ToByte>
 800db4c:	4603      	mov	r3, r0
 800db4e:	461a      	mov	r2, r3
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	00ffff3f 	.word	0x00ffff3f

0800db64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a0d      	ldr	r2, [pc, #52]	; (800dba8 <HAL_RTC_WaitForSynchro+0x44>)
 800db72:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800db74:	f7f6 f8b6 	bl	8003ce4 <HAL_GetTick>
 800db78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db7a:	e009      	b.n	800db90 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db7c:	f7f6 f8b2 	bl	8003ce4 <HAL_GetTick>
 800db80:	4602      	mov	r2, r0
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db8a:	d901      	bls.n	800db90 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e007      	b.n	800dba0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	f003 0320 	and.w	r3, r3, #32
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d0ee      	beq.n	800db7c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	0003ff5f 	.word	0x0003ff5f

0800dbac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d120      	bne.n	800dc08 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dbd0:	f7f6 f888 	bl	8003ce4 <HAL_GetTick>
 800dbd4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbd6:	e00d      	b.n	800dbf4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dbd8:	f7f6 f884 	bl	8003ce4 <HAL_GetTick>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbe6:	d905      	bls.n	800dbf4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2203      	movs	r2, #3
 800dbf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <RTC_EnterInitMode+0x5c>
 800dc02:	7bfb      	ldrb	r3, [r7, #15]
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d1e7      	bne.n	800dbd8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dc08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800dc20:	4b1a      	ldr	r3, [pc, #104]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	4a19      	ldr	r2, [pc, #100]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc2a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800dc2c:	4b17      	ldr	r3, [pc, #92]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	f003 0320 	and.w	r3, r3, #32
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10c      	bne.n	800dc52 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff ff93 	bl	800db64 <HAL_RTC_WaitForSynchro>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01e      	beq.n	800dc82 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2203      	movs	r2, #3
 800dc48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	73fb      	strb	r3, [r7, #15]
 800dc50:	e017      	b.n	800dc82 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc52:	4b0e      	ldr	r3, [pc, #56]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	4a0d      	ldr	r2, [pc, #52]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc58:	f023 0320 	bic.w	r3, r3, #32
 800dc5c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff ff80 	bl	800db64 <HAL_RTC_WaitForSynchro>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2203      	movs	r2, #3
 800dc6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800dc72:	2303      	movs	r3, #3
 800dc74:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800dc76:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	4a04      	ldr	r2, [pc, #16]	; (800dc8c <RTC_ExitInitMode+0x78>)
 800dc7c:	f043 0320 	orr.w	r3, r3, #32
 800dc80:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	58004000 	.word	0x58004000

0800dc90 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dc90:	b480      	push	{r7}
 800dc92:	b085      	sub	sp, #20
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dca2:	e005      	b.n	800dcb0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	3301      	adds	r3, #1
 800dca8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dcaa:	7afb      	ldrb	r3, [r7, #11]
 800dcac:	3b0a      	subs	r3, #10
 800dcae:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dcb0:	7afb      	ldrb	r3, [r7, #11]
 800dcb2:	2b09      	cmp	r3, #9
 800dcb4:	d8f6      	bhi.n	800dca4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	b2db      	uxtb	r3, r3
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b085      	sub	sp, #20
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dcda:	79fb      	ldrb	r3, [r7, #7]
 800dcdc:	091b      	lsrs	r3, r3, #4
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	461a      	mov	r2, r3
 800dce2:	0092      	lsls	r2, r2, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	005b      	lsls	r3, r3, #1
 800dce8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800dcea:	79fb      	ldrb	r3, [r7, #7]
 800dcec:	f003 030f 	and.w	r3, r3, #15
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	b2db      	uxtb	r3, r3
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d101      	bne.n	800dd16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	e10f      	b.n	800df36 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a87      	ldr	r2, [pc, #540]	; (800df40 <HAL_SPI_Init+0x23c>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d00f      	beq.n	800dd46 <HAL_SPI_Init+0x42>
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a86      	ldr	r2, [pc, #536]	; (800df44 <HAL_SPI_Init+0x240>)
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	d00a      	beq.n	800dd46 <HAL_SPI_Init+0x42>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a84      	ldr	r2, [pc, #528]	; (800df48 <HAL_SPI_Init+0x244>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d005      	beq.n	800dd46 <HAL_SPI_Init+0x42>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	2b0f      	cmp	r3, #15
 800dd40:	d901      	bls.n	800dd46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dd42:	2301      	movs	r3, #1
 800dd44:	e0f7      	b.n	800df36 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fc12 	bl	800e570 <SPI_GetPacketSize>
 800dd4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a7b      	ldr	r2, [pc, #492]	; (800df40 <HAL_SPI_Init+0x23c>)
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00c      	beq.n	800dd72 <HAL_SPI_Init+0x6e>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	4a79      	ldr	r2, [pc, #484]	; (800df44 <HAL_SPI_Init+0x240>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d007      	beq.n	800dd72 <HAL_SPI_Init+0x6e>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a78      	ldr	r2, [pc, #480]	; (800df48 <HAL_SPI_Init+0x244>)
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d002      	beq.n	800dd72 <HAL_SPI_Init+0x6e>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b08      	cmp	r3, #8
 800dd70:	d811      	bhi.n	800dd96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dd76:	4a72      	ldr	r2, [pc, #456]	; (800df40 <HAL_SPI_Init+0x23c>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d009      	beq.n	800dd90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a70      	ldr	r2, [pc, #448]	; (800df44 <HAL_SPI_Init+0x240>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d004      	beq.n	800dd90 <HAL_SPI_Init+0x8c>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a6f      	ldr	r2, [pc, #444]	; (800df48 <HAL_SPI_Init+0x244>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d104      	bne.n	800dd9a <HAL_SPI_Init+0x96>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2b10      	cmp	r3, #16
 800dd94:	d901      	bls.n	800dd9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e0cd      	b.n	800df36 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d106      	bne.n	800ddb4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f7f5 fa64 	bl	800327c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2202      	movs	r2, #2
 800ddb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f022 0201 	bic.w	r2, r2, #1
 800ddca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ddd6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699b      	ldr	r3, [r3, #24]
 800dddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dde0:	d119      	bne.n	800de16 <HAL_SPI_Init+0x112>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddea:	d103      	bne.n	800ddf4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d008      	beq.n	800de06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10c      	bne.n	800de16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800de00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de04:	d107      	bne.n	800de16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800de14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00f      	beq.n	800de42 <HAL_SPI_Init+0x13e>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	2b06      	cmp	r3, #6
 800de28:	d90b      	bls.n	800de42 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	430a      	orrs	r2, r1
 800de3e:	601a      	str	r2, [r3, #0]
 800de40:	e007      	b.n	800de52 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681a      	ldr	r2, [r3, #0]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	69da      	ldr	r2, [r3, #28]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de5a:	431a      	orrs	r2, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	431a      	orrs	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de64:	ea42 0103 	orr.w	r1, r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68da      	ldr	r2, [r3, #12]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	430a      	orrs	r2, r1
 800de72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7c:	431a      	orrs	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de82:	431a      	orrs	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	431a      	orrs	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	431a      	orrs	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	695b      	ldr	r3, [r3, #20]
 800de94:	431a      	orrs	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dea6:	431a      	orrs	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	431a      	orrs	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb2:	ea42 0103 	orr.w	r1, r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	430a      	orrs	r2, r1
 800dec0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d113      	bne.n	800def2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dedc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800def0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0201 	bic.w	r2, r2, #1
 800df00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00a      	beq.n	800df24 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	430a      	orrs	r2, r1
 800df22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	40013000 	.word	0x40013000
 800df44:	40003800 	.word	0x40003800
 800df48:	40003c00 	.word	0x40003c00

0800df4c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	4613      	mov	r3, r2
 800df5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df60:	095b      	lsrs	r3, r3, #5
 800df62:	b29b      	uxth	r3, r3
 800df64:	3301      	adds	r3, #1
 800df66:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	3330      	adds	r3, #48	; 0x30
 800df6e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df70:	f7f5 feb8 	bl	8003ce4 <HAL_GetTick>
 800df74:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	2b01      	cmp	r3, #1
 800df80:	d001      	beq.n	800df86 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800df82:	2302      	movs	r3, #2
 800df84:	e250      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <HAL_SPI_Receive+0x46>
 800df8c:	88fb      	ldrh	r3, [r7, #6]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d101      	bne.n	800df96 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800df92:	2301      	movs	r3, #1
 800df94:	e248      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d101      	bne.n	800dfa4 <HAL_SPI_Receive+0x58>
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	e241      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2204      	movs	r2, #4
 800dfb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	88fa      	ldrh	r2, [r7, #6]
 800dfc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	88fa      	ldrh	r2, [r7, #6]
 800dfce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2200      	movs	r2, #0
 800dff2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dffc:	d108      	bne.n	800e010 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	e009      	b.n	800e024 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e022:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	4b95      	ldr	r3, [pc, #596]	; (800e280 <HAL_SPI_Receive+0x334>)
 800e02c:	4013      	ands	r3, r2
 800e02e:	88f9      	ldrh	r1, [r7, #6]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	6812      	ldr	r2, [r2, #0]
 800e034:	430b      	orrs	r3, r1
 800e036:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f042 0201 	orr.w	r2, r2, #1
 800e046:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e050:	d107      	bne.n	800e062 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681a      	ldr	r2, [r3, #0]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e060:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	2b0f      	cmp	r3, #15
 800e068:	d96c      	bls.n	800e144 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e06a:	e064      	b.n	800e136 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	f003 0301 	and.w	r3, r3, #1
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d114      	bne.n	800e0ac <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e08a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e08c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e092:	1d1a      	adds	r2, r3, #4
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0aa:	e044      	b.n	800e136 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	8bfa      	ldrh	r2, [r7, #30]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d919      	bls.n	800e0ee <HAL_SPI_Receive+0x1a2>
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d014      	beq.n	800e0ee <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e0ce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d4:	1d1a      	adds	r2, r3, #4
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0ec:	e023      	b.n	800e136 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0ee:	f7f5 fdf9 	bl	8003ce4 <HAL_GetTick>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d803      	bhi.n	800e106 <HAL_SPI_Receive+0x1ba>
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e104:	d102      	bne.n	800e10c <HAL_SPI_Receive+0x1c0>
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d114      	bne.n	800e136 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f98f 	bl	800e430 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e118:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e132:	2303      	movs	r3, #3
 800e134:	e178      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d194      	bne.n	800e06c <HAL_SPI_Receive+0x120>
 800e142:	e15e      	b.n	800e402 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	2b07      	cmp	r3, #7
 800e14a:	f240 8153 	bls.w	800e3f4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e14e:	e08f      	b.n	800e270 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	2b01      	cmp	r3, #1
 800e164:	d114      	bne.n	800e190 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e16a:	69ba      	ldr	r2, [r7, #24]
 800e16c:	8812      	ldrh	r2, [r2, #0]
 800e16e:	b292      	uxth	r2, r2
 800e170:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e176:	1c9a      	adds	r2, r3, #2
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e182:	b29b      	uxth	r3, r3
 800e184:	3b01      	subs	r3, #1
 800e186:	b29a      	uxth	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e18e:	e06f      	b.n	800e270 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e196:	b29b      	uxth	r3, r3
 800e198:	8bfa      	ldrh	r2, [r7, #30]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d924      	bls.n	800e1e8 <HAL_SPI_Receive+0x29c>
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d01f      	beq.n	800e1e8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ac:	69ba      	ldr	r2, [r7, #24]
 800e1ae:	8812      	ldrh	r2, [r2, #0]
 800e1b0:	b292      	uxth	r2, r2
 800e1b2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b8:	1c9a      	adds	r2, r3, #2
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1c2:	69ba      	ldr	r2, [r7, #24]
 800e1c4:	8812      	ldrh	r2, [r2, #0]
 800e1c6:	b292      	uxth	r2, r2
 800e1c8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ce:	1c9a      	adds	r2, r3, #2
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	3b02      	subs	r3, #2
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1e6:	e043      	b.n	800e270 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d119      	bne.n	800e228 <HAL_SPI_Receive+0x2dc>
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d014      	beq.n	800e228 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e202:	69ba      	ldr	r2, [r7, #24]
 800e204:	8812      	ldrh	r2, [r2, #0]
 800e206:	b292      	uxth	r2, r2
 800e208:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20e:	1c9a      	adds	r2, r3, #2
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	3b01      	subs	r3, #1
 800e21e:	b29a      	uxth	r2, r3
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e226:	e023      	b.n	800e270 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e228:	f7f5 fd5c 	bl	8003ce4 <HAL_GetTick>
 800e22c:	4602      	mov	r2, r0
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	1ad3      	subs	r3, r2, r3
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d803      	bhi.n	800e240 <HAL_SPI_Receive+0x2f4>
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e23e:	d102      	bne.n	800e246 <HAL_SPI_Receive+0x2fa>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d114      	bne.n	800e270 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f000 f8f2 	bl	800e430 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2201      	movs	r2, #1
 800e260:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2200      	movs	r2, #0
 800e268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e0db      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e276:	b29b      	uxth	r3, r3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f47f af69 	bne.w	800e150 <HAL_SPI_Receive+0x204>
 800e27e:	e0c0      	b.n	800e402 <HAL_SPI_Receive+0x4b6>
 800e280:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	2b01      	cmp	r3, #1
 800e298:	d117      	bne.n	800e2ca <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a6:	7812      	ldrb	r2, [r2, #0]
 800e2a8:	b2d2      	uxtb	r2, r2
 800e2aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2b0:	1c5a      	adds	r2, r3, #1
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2c8:	e094      	b.n	800e3f4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	8bfa      	ldrh	r2, [r7, #30]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d946      	bls.n	800e366 <HAL_SPI_Receive+0x41a>
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d041      	beq.n	800e366 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2ee:	7812      	ldrb	r2, [r2, #0]
 800e2f0:	b2d2      	uxtb	r2, r2
 800e2f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2f8:	1c5a      	adds	r2, r3, #1
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30a:	7812      	ldrb	r2, [r2, #0]
 800e30c:	b2d2      	uxtb	r2, r2
 800e30e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e326:	7812      	ldrb	r2, [r2, #0]
 800e328:	b2d2      	uxtb	r2, r2
 800e32a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	b2d2      	uxtb	r2, r2
 800e346:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e358:	b29b      	uxth	r3, r3
 800e35a:	3b04      	subs	r3, #4
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e364:	e046      	b.n	800e3f4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	2b03      	cmp	r3, #3
 800e370:	d81c      	bhi.n	800e3ac <HAL_SPI_Receive+0x460>
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d017      	beq.n	800e3ac <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e388:	7812      	ldrb	r2, [r2, #0]
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3aa:	e023      	b.n	800e3f4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3ac:	f7f5 fc9a 	bl	8003ce4 <HAL_GetTick>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d803      	bhi.n	800e3c4 <HAL_SPI_Receive+0x478>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3c2:	d102      	bne.n	800e3ca <HAL_SPI_Receive+0x47e>
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d114      	bne.n	800e3f4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f000 f830 	bl	800e430 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e019      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f47f af41 	bne.w	800e284 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f000 f814 	bl	800e430 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	2200      	movs	r2, #0
 800e414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	e000      	b.n	800e428 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e426:	2300      	movs	r3, #0
  }
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3720      	adds	r7, #32
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	695b      	ldr	r3, [r3, #20]
 800e43e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	699a      	ldr	r2, [r3, #24]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f042 0208 	orr.w	r2, r2, #8
 800e44e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	699a      	ldr	r2, [r3, #24]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f042 0210 	orr.w	r2, r2, #16
 800e45e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f022 0201 	bic.w	r2, r2, #1
 800e46e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6919      	ldr	r1, [r3, #16]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	4b3c      	ldr	r3, [pc, #240]	; (800e56c <SPI_CloseTransfer+0x13c>)
 800e47c:	400b      	ands	r3, r1
 800e47e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	689a      	ldr	r2, [r3, #8]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e48e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e496:	b2db      	uxtb	r3, r3
 800e498:	2b04      	cmp	r3, #4
 800e49a:	d014      	beq.n	800e4c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f003 0320 	and.w	r3, r3, #32
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00f      	beq.n	800e4c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	699a      	ldr	r2, [r3, #24]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f042 0220 	orr.w	r2, r2, #32
 800e4c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	d014      	beq.n	800e4fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00f      	beq.n	800e4fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4e2:	f043 0204 	orr.w	r2, r3, #4
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	699a      	ldr	r2, [r3, #24]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e4fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00f      	beq.n	800e526 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e50c:	f043 0201 	orr.w	r2, r3, #1
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	699a      	ldr	r2, [r3, #24]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e524:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00f      	beq.n	800e550 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e536:	f043 0208 	orr.w	r2, r3, #8
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	699a      	ldr	r2, [r3, #24]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e54e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e560:	bf00      	nop
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	fffffc90 	.word	0xfffffc90

0800e570 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e57c:	095b      	lsrs	r3, r3, #5
 800e57e:	3301      	adds	r3, #1
 800e580:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	3301      	adds	r3, #1
 800e588:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	3307      	adds	r3, #7
 800e58e:	08db      	lsrs	r3, r3, #3
 800e590:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	fb02 f303 	mul.w	r3, r2, r3
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3714      	adds	r7, #20
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr

0800e5a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e5a6:	b580      	push	{r7, lr}
 800e5a8:	b082      	sub	sp, #8
 800e5aa:	af00      	add	r7, sp, #0
 800e5ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d101      	bne.n	800e5b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	e049      	b.n	800e64c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d106      	bne.n	800e5d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7f4 ff0b 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2202      	movs	r2, #2
 800e5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	f000 fe7d 	bl	800f2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2201      	movs	r2, #1
 800e62e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2201      	movs	r2, #1
 800e63e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2201      	movs	r2, #1
 800e646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b01      	cmp	r3, #1
 800e666:	d001      	beq.n	800e66c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e668:	2301      	movs	r3, #1
 800e66a:	e054      	b.n	800e716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2202      	movs	r2, #2
 800e670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68da      	ldr	r2, [r3, #12]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f042 0201 	orr.w	r2, r2, #1
 800e682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a26      	ldr	r2, [pc, #152]	; (800e724 <HAL_TIM_Base_Start_IT+0xd0>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d022      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e696:	d01d      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a22      	ldr	r2, [pc, #136]	; (800e728 <HAL_TIM_Base_Start_IT+0xd4>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d018      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a21      	ldr	r2, [pc, #132]	; (800e72c <HAL_TIM_Base_Start_IT+0xd8>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d013      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a1f      	ldr	r2, [pc, #124]	; (800e730 <HAL_TIM_Base_Start_IT+0xdc>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d00e      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a1e      	ldr	r2, [pc, #120]	; (800e734 <HAL_TIM_Base_Start_IT+0xe0>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d009      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a1c      	ldr	r2, [pc, #112]	; (800e738 <HAL_TIM_Base_Start_IT+0xe4>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d004      	beq.n	800e6d4 <HAL_TIM_Base_Start_IT+0x80>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a1b      	ldr	r2, [pc, #108]	; (800e73c <HAL_TIM_Base_Start_IT+0xe8>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d115      	bne.n	800e700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	689a      	ldr	r2, [r3, #8]
 800e6da:	4b19      	ldr	r3, [pc, #100]	; (800e740 <HAL_TIM_Base_Start_IT+0xec>)
 800e6dc:	4013      	ands	r3, r2
 800e6de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2b06      	cmp	r3, #6
 800e6e4:	d015      	beq.n	800e712 <HAL_TIM_Base_Start_IT+0xbe>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6ec:	d011      	beq.n	800e712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f042 0201 	orr.w	r2, r2, #1
 800e6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6fe:	e008      	b.n	800e712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f042 0201 	orr.w	r2, r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
 800e710:	e000      	b.n	800e714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e714:	2300      	movs	r3, #0
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
 800e722:	bf00      	nop
 800e724:	40010000 	.word	0x40010000
 800e728:	40000400 	.word	0x40000400
 800e72c:	40000800 	.word	0x40000800
 800e730:	40000c00 	.word	0x40000c00
 800e734:	40010400 	.word	0x40010400
 800e738:	40001800 	.word	0x40001800
 800e73c:	40014000 	.word	0x40014000
 800e740:	00010007 	.word	0x00010007

0800e744 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d109      	bne.n	800e76c <HAL_TIM_OC_Start_IT+0x28>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	2b01      	cmp	r3, #1
 800e762:	bf14      	ite	ne
 800e764:	2301      	movne	r3, #1
 800e766:	2300      	moveq	r3, #0
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	e03c      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b04      	cmp	r3, #4
 800e770:	d109      	bne.n	800e786 <HAL_TIM_OC_Start_IT+0x42>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	bf14      	ite	ne
 800e77e:	2301      	movne	r3, #1
 800e780:	2300      	moveq	r3, #0
 800e782:	b2db      	uxtb	r3, r3
 800e784:	e02f      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	2b08      	cmp	r3, #8
 800e78a:	d109      	bne.n	800e7a0 <HAL_TIM_OC_Start_IT+0x5c>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e792:	b2db      	uxtb	r3, r3
 800e794:	2b01      	cmp	r3, #1
 800e796:	bf14      	ite	ne
 800e798:	2301      	movne	r3, #1
 800e79a:	2300      	moveq	r3, #0
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	e022      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	2b0c      	cmp	r3, #12
 800e7a4:	d109      	bne.n	800e7ba <HAL_TIM_OC_Start_IT+0x76>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	bf14      	ite	ne
 800e7b2:	2301      	movne	r3, #1
 800e7b4:	2300      	moveq	r3, #0
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	e015      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b10      	cmp	r3, #16
 800e7be:	d109      	bne.n	800e7d4 <HAL_TIM_OC_Start_IT+0x90>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	bf14      	ite	ne
 800e7cc:	2301      	movne	r3, #1
 800e7ce:	2300      	moveq	r3, #0
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	e008      	b.n	800e7e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e7da:	b2db      	uxtb	r3, r3
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	bf14      	ite	ne
 800e7e0:	2301      	movne	r3, #1
 800e7e2:	2300      	moveq	r3, #0
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e0ec      	b.n	800e9c8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d104      	bne.n	800e7fe <HAL_TIM_OC_Start_IT+0xba>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2202      	movs	r2, #2
 800e7f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7fc:	e023      	b.n	800e846 <HAL_TIM_OC_Start_IT+0x102>
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	2b04      	cmp	r3, #4
 800e802:	d104      	bne.n	800e80e <HAL_TIM_OC_Start_IT+0xca>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2202      	movs	r2, #2
 800e808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e80c:	e01b      	b.n	800e846 <HAL_TIM_OC_Start_IT+0x102>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	2b08      	cmp	r3, #8
 800e812:	d104      	bne.n	800e81e <HAL_TIM_OC_Start_IT+0xda>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2202      	movs	r2, #2
 800e818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e81c:	e013      	b.n	800e846 <HAL_TIM_OC_Start_IT+0x102>
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	2b0c      	cmp	r3, #12
 800e822:	d104      	bne.n	800e82e <HAL_TIM_OC_Start_IT+0xea>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2202      	movs	r2, #2
 800e828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e82c:	e00b      	b.n	800e846 <HAL_TIM_OC_Start_IT+0x102>
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b10      	cmp	r3, #16
 800e832:	d104      	bne.n	800e83e <HAL_TIM_OC_Start_IT+0xfa>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2202      	movs	r2, #2
 800e838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e83c:	e003      	b.n	800e846 <HAL_TIM_OC_Start_IT+0x102>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2202      	movs	r2, #2
 800e842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	2b0c      	cmp	r3, #12
 800e84a:	d841      	bhi.n	800e8d0 <HAL_TIM_OC_Start_IT+0x18c>
 800e84c:	a201      	add	r2, pc, #4	; (adr r2, 800e854 <HAL_TIM_OC_Start_IT+0x110>)
 800e84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e852:	bf00      	nop
 800e854:	0800e889 	.word	0x0800e889
 800e858:	0800e8d1 	.word	0x0800e8d1
 800e85c:	0800e8d1 	.word	0x0800e8d1
 800e860:	0800e8d1 	.word	0x0800e8d1
 800e864:	0800e89b 	.word	0x0800e89b
 800e868:	0800e8d1 	.word	0x0800e8d1
 800e86c:	0800e8d1 	.word	0x0800e8d1
 800e870:	0800e8d1 	.word	0x0800e8d1
 800e874:	0800e8ad 	.word	0x0800e8ad
 800e878:	0800e8d1 	.word	0x0800e8d1
 800e87c:	0800e8d1 	.word	0x0800e8d1
 800e880:	0800e8d1 	.word	0x0800e8d1
 800e884:	0800e8bf 	.word	0x0800e8bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68da      	ldr	r2, [r3, #12]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f042 0202 	orr.w	r2, r2, #2
 800e896:	60da      	str	r2, [r3, #12]
      break;
 800e898:	e01d      	b.n	800e8d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	68da      	ldr	r2, [r3, #12]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f042 0204 	orr.w	r2, r2, #4
 800e8a8:	60da      	str	r2, [r3, #12]
      break;
 800e8aa:	e014      	b.n	800e8d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68da      	ldr	r2, [r3, #12]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f042 0208 	orr.w	r2, r2, #8
 800e8ba:	60da      	str	r2, [r3, #12]
      break;
 800e8bc:	e00b      	b.n	800e8d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68da      	ldr	r2, [r3, #12]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f042 0210 	orr.w	r2, r2, #16
 800e8cc:	60da      	str	r2, [r3, #12]
      break;
 800e8ce:	e002      	b.n	800e8d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d174      	bne.n	800e9c6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	6839      	ldr	r1, [r7, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f001 f917 	bl	800fb18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a38      	ldr	r2, [pc, #224]	; (800e9d0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	d013      	beq.n	800e91c <HAL_TIM_OC_Start_IT+0x1d8>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a36      	ldr	r2, [pc, #216]	; (800e9d4 <HAL_TIM_OC_Start_IT+0x290>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d00e      	beq.n	800e91c <HAL_TIM_OC_Start_IT+0x1d8>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a35      	ldr	r2, [pc, #212]	; (800e9d8 <HAL_TIM_OC_Start_IT+0x294>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d009      	beq.n	800e91c <HAL_TIM_OC_Start_IT+0x1d8>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4a33      	ldr	r2, [pc, #204]	; (800e9dc <HAL_TIM_OC_Start_IT+0x298>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	d004      	beq.n	800e91c <HAL_TIM_OC_Start_IT+0x1d8>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	4a32      	ldr	r2, [pc, #200]	; (800e9e0 <HAL_TIM_OC_Start_IT+0x29c>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d101      	bne.n	800e920 <HAL_TIM_OC_Start_IT+0x1dc>
 800e91c:	2301      	movs	r3, #1
 800e91e:	e000      	b.n	800e922 <HAL_TIM_OC_Start_IT+0x1de>
 800e920:	2300      	movs	r3, #0
 800e922:	2b00      	cmp	r3, #0
 800e924:	d007      	beq.n	800e936 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e934:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a25      	ldr	r2, [pc, #148]	; (800e9d0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d022      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e948:	d01d      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	4a25      	ldr	r2, [pc, #148]	; (800e9e4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d018      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4a23      	ldr	r2, [pc, #140]	; (800e9e8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d013      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4a22      	ldr	r2, [pc, #136]	; (800e9ec <HAL_TIM_OC_Start_IT+0x2a8>)
 800e964:	4293      	cmp	r3, r2
 800e966:	d00e      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a19      	ldr	r2, [pc, #100]	; (800e9d4 <HAL_TIM_OC_Start_IT+0x290>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d009      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	4a1e      	ldr	r2, [pc, #120]	; (800e9f0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d004      	beq.n	800e986 <HAL_TIM_OC_Start_IT+0x242>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a15      	ldr	r2, [pc, #84]	; (800e9d8 <HAL_TIM_OC_Start_IT+0x294>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d115      	bne.n	800e9b2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	689a      	ldr	r2, [r3, #8]
 800e98c:	4b19      	ldr	r3, [pc, #100]	; (800e9f4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e98e:	4013      	ands	r3, r2
 800e990:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b06      	cmp	r3, #6
 800e996:	d015      	beq.n	800e9c4 <HAL_TIM_OC_Start_IT+0x280>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e99e:	d011      	beq.n	800e9c4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f042 0201 	orr.w	r2, r2, #1
 800e9ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9b0:	e008      	b.n	800e9c4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f042 0201 	orr.w	r2, r2, #1
 800e9c0:	601a      	str	r2, [r3, #0]
 800e9c2:	e000      	b.n	800e9c6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	40010000 	.word	0x40010000
 800e9d4:	40010400 	.word	0x40010400
 800e9d8:	40014000 	.word	0x40014000
 800e9dc:	40014400 	.word	0x40014400
 800e9e0:	40014800 	.word	0x40014800
 800e9e4:	40000400 	.word	0x40000400
 800e9e8:	40000800 	.word	0x40000800
 800e9ec:	40000c00 	.word	0x40000c00
 800e9f0:	40001800 	.word	0x40001800
 800e9f4:	00010007 	.word	0x00010007

0800e9f8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b0c      	cmp	r3, #12
 800ea0a:	d841      	bhi.n	800ea90 <HAL_TIM_OC_Stop_IT+0x98>
 800ea0c:	a201      	add	r2, pc, #4	; (adr r2, 800ea14 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ea0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea12:	bf00      	nop
 800ea14:	0800ea49 	.word	0x0800ea49
 800ea18:	0800ea91 	.word	0x0800ea91
 800ea1c:	0800ea91 	.word	0x0800ea91
 800ea20:	0800ea91 	.word	0x0800ea91
 800ea24:	0800ea5b 	.word	0x0800ea5b
 800ea28:	0800ea91 	.word	0x0800ea91
 800ea2c:	0800ea91 	.word	0x0800ea91
 800ea30:	0800ea91 	.word	0x0800ea91
 800ea34:	0800ea6d 	.word	0x0800ea6d
 800ea38:	0800ea91 	.word	0x0800ea91
 800ea3c:	0800ea91 	.word	0x0800ea91
 800ea40:	0800ea91 	.word	0x0800ea91
 800ea44:	0800ea7f 	.word	0x0800ea7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68da      	ldr	r2, [r3, #12]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f022 0202 	bic.w	r2, r2, #2
 800ea56:	60da      	str	r2, [r3, #12]
      break;
 800ea58:	e01d      	b.n	800ea96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f022 0204 	bic.w	r2, r2, #4
 800ea68:	60da      	str	r2, [r3, #12]
      break;
 800ea6a:	e014      	b.n	800ea96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	68da      	ldr	r2, [r3, #12]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 0208 	bic.w	r2, r2, #8
 800ea7a:	60da      	str	r2, [r3, #12]
      break;
 800ea7c:	e00b      	b.n	800ea96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68da      	ldr	r2, [r3, #12]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 0210 	bic.w	r2, r2, #16
 800ea8c:	60da      	str	r2, [r3, #12]
      break;
 800ea8e:	e002      	b.n	800ea96 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	73fb      	strb	r3, [r7, #15]
      break;
 800ea94:	bf00      	nop
  }

  if (status == HAL_OK)
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f040 8081 	bne.w	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f001 f836 	bl	800fb18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a3e      	ldr	r2, [pc, #248]	; (800ebac <HAL_TIM_OC_Stop_IT+0x1b4>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <HAL_TIM_OC_Stop_IT+0xe6>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a3d      	ldr	r2, [pc, #244]	; (800ebb0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d00e      	beq.n	800eade <HAL_TIM_OC_Stop_IT+0xe6>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a3b      	ldr	r2, [pc, #236]	; (800ebb4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d009      	beq.n	800eade <HAL_TIM_OC_Stop_IT+0xe6>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a3a      	ldr	r2, [pc, #232]	; (800ebb8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d004      	beq.n	800eade <HAL_TIM_OC_Stop_IT+0xe6>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a38      	ldr	r2, [pc, #224]	; (800ebbc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d101      	bne.n	800eae2 <HAL_TIM_OC_Stop_IT+0xea>
 800eade:	2301      	movs	r3, #1
 800eae0:	e000      	b.n	800eae4 <HAL_TIM_OC_Stop_IT+0xec>
 800eae2:	2300      	movs	r3, #0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d017      	beq.n	800eb18 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6a1a      	ldr	r2, [r3, #32]
 800eaee:	f241 1311 	movw	r3, #4369	; 0x1111
 800eaf2:	4013      	ands	r3, r2
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d10f      	bne.n	800eb18 <HAL_TIM_OC_Stop_IT+0x120>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6a1a      	ldr	r2, [r3, #32]
 800eafe:	f240 4344 	movw	r3, #1092	; 0x444
 800eb02:	4013      	ands	r3, r2
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d107      	bne.n	800eb18 <HAL_TIM_OC_Stop_IT+0x120>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eb16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	6a1a      	ldr	r2, [r3, #32]
 800eb1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800eb22:	4013      	ands	r3, r2
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10f      	bne.n	800eb48 <HAL_TIM_OC_Stop_IT+0x150>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	6a1a      	ldr	r2, [r3, #32]
 800eb2e:	f240 4344 	movw	r3, #1092	; 0x444
 800eb32:	4013      	ands	r3, r2
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d107      	bne.n	800eb48 <HAL_TIM_OC_Stop_IT+0x150>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f022 0201 	bic.w	r2, r2, #1
 800eb46:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d104      	bne.n	800eb58 <HAL_TIM_OC_Stop_IT+0x160>
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb56:	e023      	b.n	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	2b04      	cmp	r3, #4
 800eb5c:	d104      	bne.n	800eb68 <HAL_TIM_OC_Stop_IT+0x170>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb66:	e01b      	b.n	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b08      	cmp	r3, #8
 800eb6c:	d104      	bne.n	800eb78 <HAL_TIM_OC_Stop_IT+0x180>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb76:	e013      	b.n	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	2b0c      	cmp	r3, #12
 800eb7c:	d104      	bne.n	800eb88 <HAL_TIM_OC_Stop_IT+0x190>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb86:	e00b      	b.n	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	2b10      	cmp	r3, #16
 800eb8c:	d104      	bne.n	800eb98 <HAL_TIM_OC_Stop_IT+0x1a0>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb96:	e003      	b.n	800eba0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3710      	adds	r7, #16
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	40010000 	.word	0x40010000
 800ebb0:	40010400 	.word	0x40010400
 800ebb4:	40014000 	.word	0x40014000
 800ebb8:	40014400 	.word	0x40014400
 800ebbc:	40014800 	.word	0x40014800

0800ebc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	e049      	b.n	800ec66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d106      	bne.n	800ebec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f000 f841 	bl	800ec6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	3304      	adds	r3, #4
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	4610      	mov	r0, r2
 800ec00:	f000 fb70 	bl	800f2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2201      	movs	r2, #1
 800ec08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2201      	movs	r2, #1
 800ec20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2201      	movs	r2, #1
 800ec48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ec6e:	b480      	push	{r7}
 800ec70:	b083      	sub	sp, #12
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ec76:	bf00      	nop
 800ec78:	370c      	adds	r7, #12
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	68db      	ldr	r3, [r3, #12]
 800ec90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	691b      	ldr	r3, [r3, #16]
 800ec98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	f003 0302 	and.w	r3, r3, #2
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d020      	beq.n	800ece6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f003 0302 	and.w	r3, r3, #2
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d01b      	beq.n	800ece6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f06f 0202 	mvn.w	r2, #2
 800ecb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	699b      	ldr	r3, [r3, #24]
 800ecc4:	f003 0303 	and.w	r3, r3, #3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d003      	beq.n	800ecd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 faeb 	bl	800f2a8 <HAL_TIM_IC_CaptureCallback>
 800ecd2:	e005      	b.n	800ece0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7f1 fc93 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 faee 	bl	800f2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	f003 0304 	and.w	r3, r3, #4
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d020      	beq.n	800ed32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f003 0304 	and.w	r3, r3, #4
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d01b      	beq.n	800ed32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f06f 0204 	mvn.w	r2, #4
 800ed02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2202      	movs	r2, #2
 800ed08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 fac5 	bl	800f2a8 <HAL_TIM_IC_CaptureCallback>
 800ed1e:	e005      	b.n	800ed2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f1 fc6d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fac8 	bl	800f2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	f003 0308 	and.w	r3, r3, #8
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d020      	beq.n	800ed7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f003 0308 	and.w	r3, r3, #8
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d01b      	beq.n	800ed7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	f06f 0208 	mvn.w	r2, #8
 800ed4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2204      	movs	r2, #4
 800ed54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	69db      	ldr	r3, [r3, #28]
 800ed5c:	f003 0303 	and.w	r3, r3, #3
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d003      	beq.n	800ed6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fa9f 	bl	800f2a8 <HAL_TIM_IC_CaptureCallback>
 800ed6a:	e005      	b.n	800ed78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f7f1 fc47 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 faa2 	bl	800f2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	f003 0310 	and.w	r3, r3, #16
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d020      	beq.n	800edca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f003 0310 	and.w	r3, r3, #16
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d01b      	beq.n	800edca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f06f 0210 	mvn.w	r2, #16
 800ed9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2208      	movs	r2, #8
 800eda0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edac:	2b00      	cmp	r3, #0
 800edae:	d003      	beq.n	800edb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 fa79 	bl	800f2a8 <HAL_TIM_IC_CaptureCallback>
 800edb6:	e005      	b.n	800edc4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7f1 fc21 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fa7c 	bl	800f2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00c      	beq.n	800edee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f003 0301 	and.w	r3, r3, #1
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d007      	beq.n	800edee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f06f 0201 	mvn.w	r2, #1
 800ede6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7f3 ffd7 	bl	8002d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d104      	bne.n	800ee02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00c      	beq.n	800ee1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d007      	beq.n	800ee1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ee14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 ffba 	bl	800fd90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00c      	beq.n	800ee40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d007      	beq.n	800ee40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ee38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 ffb2 	bl	800fda4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d00c      	beq.n	800ee64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d007      	beq.n	800ee64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ee5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fa36 	bl	800f2d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f003 0320 	and.w	r3, r3, #32
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00c      	beq.n	800ee88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f003 0320 	and.w	r3, r3, #32
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d007      	beq.n	800ee88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f06f 0220 	mvn.w	r2, #32
 800ee80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 ff7a 	bl	800fd7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee88:	bf00      	nop
 800ee8a:	3710      	adds	r7, #16
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b086      	sub	sp, #24
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	60f8      	str	r0, [r7, #12]
 800ee98:	60b9      	str	r1, [r7, #8]
 800ee9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d101      	bne.n	800eeae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eeaa:	2302      	movs	r3, #2
 800eeac:	e0ff      	b.n	800f0ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2b14      	cmp	r3, #20
 800eeba:	f200 80f0 	bhi.w	800f09e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eebe:	a201      	add	r2, pc, #4	; (adr r2, 800eec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec4:	0800ef19 	.word	0x0800ef19
 800eec8:	0800f09f 	.word	0x0800f09f
 800eecc:	0800f09f 	.word	0x0800f09f
 800eed0:	0800f09f 	.word	0x0800f09f
 800eed4:	0800ef59 	.word	0x0800ef59
 800eed8:	0800f09f 	.word	0x0800f09f
 800eedc:	0800f09f 	.word	0x0800f09f
 800eee0:	0800f09f 	.word	0x0800f09f
 800eee4:	0800ef9b 	.word	0x0800ef9b
 800eee8:	0800f09f 	.word	0x0800f09f
 800eeec:	0800f09f 	.word	0x0800f09f
 800eef0:	0800f09f 	.word	0x0800f09f
 800eef4:	0800efdb 	.word	0x0800efdb
 800eef8:	0800f09f 	.word	0x0800f09f
 800eefc:	0800f09f 	.word	0x0800f09f
 800ef00:	0800f09f 	.word	0x0800f09f
 800ef04:	0800f01d 	.word	0x0800f01d
 800ef08:	0800f09f 	.word	0x0800f09f
 800ef0c:	0800f09f 	.word	0x0800f09f
 800ef10:	0800f09f 	.word	0x0800f09f
 800ef14:	0800f05d 	.word	0x0800f05d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	68b9      	ldr	r1, [r7, #8]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f000 fa86 	bl	800f430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	699a      	ldr	r2, [r3, #24]
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f042 0208 	orr.w	r2, r2, #8
 800ef32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	699a      	ldr	r2, [r3, #24]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f022 0204 	bic.w	r2, r2, #4
 800ef42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6999      	ldr	r1, [r3, #24]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	691a      	ldr	r2, [r3, #16]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	430a      	orrs	r2, r1
 800ef54:	619a      	str	r2, [r3, #24]
      break;
 800ef56:	e0a5      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	68b9      	ldr	r1, [r7, #8]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 faf6 	bl	800f550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	699a      	ldr	r2, [r3, #24]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	699a      	ldr	r2, [r3, #24]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	6999      	ldr	r1, [r3, #24]
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	021a      	lsls	r2, r3, #8
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	430a      	orrs	r2, r1
 800ef96:	619a      	str	r2, [r3, #24]
      break;
 800ef98:	e084      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68b9      	ldr	r1, [r7, #8]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 fb5f 	bl	800f664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	69da      	ldr	r2, [r3, #28]
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f042 0208 	orr.w	r2, r2, #8
 800efb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	69da      	ldr	r2, [r3, #28]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f022 0204 	bic.w	r2, r2, #4
 800efc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	69d9      	ldr	r1, [r3, #28]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	691a      	ldr	r2, [r3, #16]
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	430a      	orrs	r2, r1
 800efd6:	61da      	str	r2, [r3, #28]
      break;
 800efd8:	e064      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	68b9      	ldr	r1, [r7, #8]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f000 fbc7 	bl	800f774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	69da      	ldr	r2, [r3, #28]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	69da      	ldr	r2, [r3, #28]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	69d9      	ldr	r1, [r3, #28]
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	021a      	lsls	r2, r3, #8
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	61da      	str	r2, [r3, #28]
      break;
 800f01a:	e043      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	68b9      	ldr	r1, [r7, #8]
 800f022:	4618      	mov	r0, r3
 800f024:	f000 fc10 	bl	800f848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f042 0208 	orr.w	r2, r2, #8
 800f036:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f022 0204 	bic.w	r2, r2, #4
 800f046:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	691a      	ldr	r2, [r3, #16]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	430a      	orrs	r2, r1
 800f058:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f05a:	e023      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68b9      	ldr	r1, [r7, #8]
 800f062:	4618      	mov	r0, r3
 800f064:	f000 fc54 	bl	800f910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f076:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	021a      	lsls	r2, r3, #8
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	430a      	orrs	r2, r1
 800f09a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f09c:	e002      	b.n	800f0a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f09e:	2301      	movs	r3, #1
 800f0a0:	75fb      	strb	r3, [r7, #23]
      break;
 800f0a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop

0800f0b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d101      	bne.n	800f0d4 <HAL_TIM_ConfigClockSource+0x1c>
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	e0dc      	b.n	800f28e <HAL_TIM_ConfigClockSource+0x1d6>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2202      	movs	r2, #2
 800f0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	4b6a      	ldr	r3, [pc, #424]	; (800f298 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f0fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	68ba      	ldr	r2, [r7, #8]
 800f102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a64      	ldr	r2, [pc, #400]	; (800f29c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	f000 80a9 	beq.w	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f110:	4a62      	ldr	r2, [pc, #392]	; (800f29c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f112:	4293      	cmp	r3, r2
 800f114:	f200 80ae 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f118:	4a61      	ldr	r2, [pc, #388]	; (800f2a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	f000 80a1 	beq.w	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f120:	4a5f      	ldr	r2, [pc, #380]	; (800f2a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f122:	4293      	cmp	r3, r2
 800f124:	f200 80a6 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f128:	4a5e      	ldr	r2, [pc, #376]	; (800f2a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	f000 8099 	beq.w	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f130:	4a5c      	ldr	r2, [pc, #368]	; (800f2a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f132:	4293      	cmp	r3, r2
 800f134:	f200 809e 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f138:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f13c:	f000 8091 	beq.w	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f140:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f144:	f200 8096 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f148:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f14c:	f000 8089 	beq.w	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f154:	f200 808e 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f15c:	d03e      	beq.n	800f1dc <HAL_TIM_ConfigClockSource+0x124>
 800f15e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f162:	f200 8087 	bhi.w	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f16a:	f000 8086 	beq.w	800f27a <HAL_TIM_ConfigClockSource+0x1c2>
 800f16e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f172:	d87f      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f174:	2b70      	cmp	r3, #112	; 0x70
 800f176:	d01a      	beq.n	800f1ae <HAL_TIM_ConfigClockSource+0xf6>
 800f178:	2b70      	cmp	r3, #112	; 0x70
 800f17a:	d87b      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f17c:	2b60      	cmp	r3, #96	; 0x60
 800f17e:	d050      	beq.n	800f222 <HAL_TIM_ConfigClockSource+0x16a>
 800f180:	2b60      	cmp	r3, #96	; 0x60
 800f182:	d877      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f184:	2b50      	cmp	r3, #80	; 0x50
 800f186:	d03c      	beq.n	800f202 <HAL_TIM_ConfigClockSource+0x14a>
 800f188:	2b50      	cmp	r3, #80	; 0x50
 800f18a:	d873      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f18c:	2b40      	cmp	r3, #64	; 0x40
 800f18e:	d058      	beq.n	800f242 <HAL_TIM_ConfigClockSource+0x18a>
 800f190:	2b40      	cmp	r3, #64	; 0x40
 800f192:	d86f      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f194:	2b30      	cmp	r3, #48	; 0x30
 800f196:	d064      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f198:	2b30      	cmp	r3, #48	; 0x30
 800f19a:	d86b      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f19c:	2b20      	cmp	r3, #32
 800f19e:	d060      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1a0:	2b20      	cmp	r3, #32
 800f1a2:	d867      	bhi.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d05c      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1a8:	2b10      	cmp	r3, #16
 800f1aa:	d05a      	beq.n	800f262 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1ac:	e062      	b.n	800f274 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	6899      	ldr	r1, [r3, #8]
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685a      	ldr	r2, [r3, #4]
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	f000 fc8b 	bl	800fad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f1d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	609a      	str	r2, [r3, #8]
      break;
 800f1da:	e04f      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6818      	ldr	r0, [r3, #0]
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	6899      	ldr	r1, [r3, #8]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	685a      	ldr	r2, [r3, #4]
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	f000 fc74 	bl	800fad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	689a      	ldr	r2, [r3, #8]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f1fe:	609a      	str	r2, [r3, #8]
      break;
 800f200:	e03c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6818      	ldr	r0, [r3, #0]
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6859      	ldr	r1, [r3, #4]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	461a      	mov	r2, r3
 800f210:	f000 fbe4 	bl	800f9dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2150      	movs	r1, #80	; 0x50
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 fc3e 	bl	800fa9c <TIM_ITRx_SetConfig>
      break;
 800f220:	e02c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6818      	ldr	r0, [r3, #0]
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	6859      	ldr	r1, [r3, #4]
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	461a      	mov	r2, r3
 800f230:	f000 fc03 	bl	800fa3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2160      	movs	r1, #96	; 0x60
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 fc2e 	bl	800fa9c <TIM_ITRx_SetConfig>
      break;
 800f240:	e01c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6818      	ldr	r0, [r3, #0]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	6859      	ldr	r1, [r3, #4]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	461a      	mov	r2, r3
 800f250:	f000 fbc4 	bl	800f9dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2140      	movs	r1, #64	; 0x40
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 fc1e 	bl	800fa9c <TIM_ITRx_SetConfig>
      break;
 800f260:	e00c      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f000 fc15 	bl	800fa9c <TIM_ITRx_SetConfig>
      break;
 800f272:	e003      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f274:	2301      	movs	r3, #1
 800f276:	73fb      	strb	r3, [r7, #15]
      break;
 800f278:	e000      	b.n	800f27c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f27a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	ffceff88 	.word	0xffceff88
 800f29c:	00100040 	.word	0x00100040
 800f2a0:	00100030 	.word	0x00100030
 800f2a4:	00100020 	.word	0x00100020

0800f2a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b083      	sub	sp, #12
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr

0800f2bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2c4:	bf00      	nop
 800f2c6:	370c      	adds	r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b085      	sub	sp, #20
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a46      	ldr	r2, [pc, #280]	; (800f410 <TIM_Base_SetConfig+0x12c>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d013      	beq.n	800f324 <TIM_Base_SetConfig+0x40>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f302:	d00f      	beq.n	800f324 <TIM_Base_SetConfig+0x40>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a43      	ldr	r2, [pc, #268]	; (800f414 <TIM_Base_SetConfig+0x130>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d00b      	beq.n	800f324 <TIM_Base_SetConfig+0x40>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a42      	ldr	r2, [pc, #264]	; (800f418 <TIM_Base_SetConfig+0x134>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d007      	beq.n	800f324 <TIM_Base_SetConfig+0x40>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a41      	ldr	r2, [pc, #260]	; (800f41c <TIM_Base_SetConfig+0x138>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d003      	beq.n	800f324 <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a40      	ldr	r2, [pc, #256]	; (800f420 <TIM_Base_SetConfig+0x13c>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d108      	bne.n	800f336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f32a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	4313      	orrs	r3, r2
 800f334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a35      	ldr	r2, [pc, #212]	; (800f410 <TIM_Base_SetConfig+0x12c>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d01f      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f344:	d01b      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4a32      	ldr	r2, [pc, #200]	; (800f414 <TIM_Base_SetConfig+0x130>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d017      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a31      	ldr	r2, [pc, #196]	; (800f418 <TIM_Base_SetConfig+0x134>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d013      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a30      	ldr	r2, [pc, #192]	; (800f41c <TIM_Base_SetConfig+0x138>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d00f      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a2f      	ldr	r2, [pc, #188]	; (800f420 <TIM_Base_SetConfig+0x13c>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d00b      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a2e      	ldr	r2, [pc, #184]	; (800f424 <TIM_Base_SetConfig+0x140>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d007      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a2d      	ldr	r2, [pc, #180]	; (800f428 <TIM_Base_SetConfig+0x144>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d003      	beq.n	800f37e <TIM_Base_SetConfig+0x9a>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a2c      	ldr	r2, [pc, #176]	; (800f42c <TIM_Base_SetConfig+0x148>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d108      	bne.n	800f390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	695b      	ldr	r3, [r3, #20]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	689a      	ldr	r2, [r3, #8]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4a16      	ldr	r2, [pc, #88]	; (800f410 <TIM_Base_SetConfig+0x12c>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d00f      	beq.n	800f3dc <TIM_Base_SetConfig+0xf8>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4a18      	ldr	r2, [pc, #96]	; (800f420 <TIM_Base_SetConfig+0x13c>)
 800f3c0:	4293      	cmp	r3, r2
 800f3c2:	d00b      	beq.n	800f3dc <TIM_Base_SetConfig+0xf8>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	4a17      	ldr	r2, [pc, #92]	; (800f424 <TIM_Base_SetConfig+0x140>)
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d007      	beq.n	800f3dc <TIM_Base_SetConfig+0xf8>
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	4a16      	ldr	r2, [pc, #88]	; (800f428 <TIM_Base_SetConfig+0x144>)
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	d003      	beq.n	800f3dc <TIM_Base_SetConfig+0xf8>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a15      	ldr	r2, [pc, #84]	; (800f42c <TIM_Base_SetConfig+0x148>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d103      	bne.n	800f3e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	691a      	ldr	r2, [r3, #16]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	f003 0301 	and.w	r3, r3, #1
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d105      	bne.n	800f402 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	f023 0201 	bic.w	r2, r3, #1
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	611a      	str	r2, [r3, #16]
  }
}
 800f402:	bf00      	nop
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	40010000 	.word	0x40010000
 800f414:	40000400 	.word	0x40000400
 800f418:	40000800 	.word	0x40000800
 800f41c:	40000c00 	.word	0x40000c00
 800f420:	40010400 	.word	0x40010400
 800f424:	40014000 	.word	0x40014000
 800f428:	40014400 	.word	0x40014400
 800f42c:	40014800 	.word	0x40014800

0800f430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f430:	b480      	push	{r7}
 800f432:	b087      	sub	sp, #28
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6a1b      	ldr	r3, [r3, #32]
 800f43e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6a1b      	ldr	r3, [r3, #32]
 800f444:	f023 0201 	bic.w	r2, r3, #1
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	699b      	ldr	r3, [r3, #24]
 800f456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4b37      	ldr	r3, [pc, #220]	; (800f538 <TIM_OC1_SetConfig+0x108>)
 800f45c:	4013      	ands	r3, r2
 800f45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f023 0303 	bic.w	r3, r3, #3
 800f466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	4313      	orrs	r3, r2
 800f470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	f023 0302 	bic.w	r3, r3, #2
 800f478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	4313      	orrs	r3, r2
 800f482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	4a2d      	ldr	r2, [pc, #180]	; (800f53c <TIM_OC1_SetConfig+0x10c>)
 800f488:	4293      	cmp	r3, r2
 800f48a:	d00f      	beq.n	800f4ac <TIM_OC1_SetConfig+0x7c>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	4a2c      	ldr	r2, [pc, #176]	; (800f540 <TIM_OC1_SetConfig+0x110>)
 800f490:	4293      	cmp	r3, r2
 800f492:	d00b      	beq.n	800f4ac <TIM_OC1_SetConfig+0x7c>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a2b      	ldr	r2, [pc, #172]	; (800f544 <TIM_OC1_SetConfig+0x114>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d007      	beq.n	800f4ac <TIM_OC1_SetConfig+0x7c>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a2a      	ldr	r2, [pc, #168]	; (800f548 <TIM_OC1_SetConfig+0x118>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d003      	beq.n	800f4ac <TIM_OC1_SetConfig+0x7c>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a29      	ldr	r2, [pc, #164]	; (800f54c <TIM_OC1_SetConfig+0x11c>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d10c      	bne.n	800f4c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	f023 0308 	bic.w	r3, r3, #8
 800f4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	697a      	ldr	r2, [r7, #20]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	f023 0304 	bic.w	r3, r3, #4
 800f4c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a1c      	ldr	r2, [pc, #112]	; (800f53c <TIM_OC1_SetConfig+0x10c>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d00f      	beq.n	800f4ee <TIM_OC1_SetConfig+0xbe>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a1b      	ldr	r2, [pc, #108]	; (800f540 <TIM_OC1_SetConfig+0x110>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d00b      	beq.n	800f4ee <TIM_OC1_SetConfig+0xbe>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a1a      	ldr	r2, [pc, #104]	; (800f544 <TIM_OC1_SetConfig+0x114>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d007      	beq.n	800f4ee <TIM_OC1_SetConfig+0xbe>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a19      	ldr	r2, [pc, #100]	; (800f548 <TIM_OC1_SetConfig+0x118>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d003      	beq.n	800f4ee <TIM_OC1_SetConfig+0xbe>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a18      	ldr	r2, [pc, #96]	; (800f54c <TIM_OC1_SetConfig+0x11c>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d111      	bne.n	800f512 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	695b      	ldr	r3, [r3, #20]
 800f502:	693a      	ldr	r2, [r7, #16]
 800f504:	4313      	orrs	r3, r2
 800f506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	699b      	ldr	r3, [r3, #24]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	4313      	orrs	r3, r2
 800f510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	693a      	ldr	r2, [r7, #16]
 800f516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	697a      	ldr	r2, [r7, #20]
 800f52a:	621a      	str	r2, [r3, #32]
}
 800f52c:	bf00      	nop
 800f52e:	371c      	adds	r7, #28
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	fffeff8f 	.word	0xfffeff8f
 800f53c:	40010000 	.word	0x40010000
 800f540:	40010400 	.word	0x40010400
 800f544:	40014000 	.word	0x40014000
 800f548:	40014400 	.word	0x40014400
 800f54c:	40014800 	.word	0x40014800

0800f550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f550:	b480      	push	{r7}
 800f552:	b087      	sub	sp, #28
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	6a1b      	ldr	r3, [r3, #32]
 800f564:	f023 0210 	bic.w	r2, r3, #16
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	4b34      	ldr	r3, [pc, #208]	; (800f64c <TIM_OC2_SetConfig+0xfc>)
 800f57c:	4013      	ands	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	021b      	lsls	r3, r3, #8
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	4313      	orrs	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	f023 0320 	bic.w	r3, r3, #32
 800f59a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a29      	ldr	r2, [pc, #164]	; (800f650 <TIM_OC2_SetConfig+0x100>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d003      	beq.n	800f5b8 <TIM_OC2_SetConfig+0x68>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a28      	ldr	r2, [pc, #160]	; (800f654 <TIM_OC2_SetConfig+0x104>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d10d      	bne.n	800f5d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f5be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a1e      	ldr	r2, [pc, #120]	; (800f650 <TIM_OC2_SetConfig+0x100>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d00f      	beq.n	800f5fc <TIM_OC2_SetConfig+0xac>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a1d      	ldr	r2, [pc, #116]	; (800f654 <TIM_OC2_SetConfig+0x104>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d00b      	beq.n	800f5fc <TIM_OC2_SetConfig+0xac>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a1c      	ldr	r2, [pc, #112]	; (800f658 <TIM_OC2_SetConfig+0x108>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d007      	beq.n	800f5fc <TIM_OC2_SetConfig+0xac>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a1b      	ldr	r2, [pc, #108]	; (800f65c <TIM_OC2_SetConfig+0x10c>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d003      	beq.n	800f5fc <TIM_OC2_SetConfig+0xac>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a1a      	ldr	r2, [pc, #104]	; (800f660 <TIM_OC2_SetConfig+0x110>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d113      	bne.n	800f624 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f60a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	695b      	ldr	r3, [r3, #20]
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	693a      	ldr	r2, [r7, #16]
 800f614:	4313      	orrs	r3, r2
 800f616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	4313      	orrs	r3, r2
 800f622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	693a      	ldr	r2, [r7, #16]
 800f628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	685a      	ldr	r2, [r3, #4]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	621a      	str	r2, [r3, #32]
}
 800f63e:	bf00      	nop
 800f640:	371c      	adds	r7, #28
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	feff8fff 	.word	0xfeff8fff
 800f650:	40010000 	.word	0x40010000
 800f654:	40010400 	.word	0x40010400
 800f658:	40014000 	.word	0x40014000
 800f65c:	40014400 	.word	0x40014400
 800f660:	40014800 	.word	0x40014800

0800f664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f664:	b480      	push	{r7}
 800f666:	b087      	sub	sp, #28
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6a1b      	ldr	r3, [r3, #32]
 800f678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	69db      	ldr	r3, [r3, #28]
 800f68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	4b33      	ldr	r3, [pc, #204]	; (800f75c <TIM_OC3_SetConfig+0xf8>)
 800f690:	4013      	ands	r3, r2
 800f692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f023 0303 	bic.w	r3, r3, #3
 800f69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	021b      	lsls	r3, r3, #8
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4a28      	ldr	r2, [pc, #160]	; (800f760 <TIM_OC3_SetConfig+0xfc>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d003      	beq.n	800f6ca <TIM_OC3_SetConfig+0x66>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	4a27      	ldr	r2, [pc, #156]	; (800f764 <TIM_OC3_SetConfig+0x100>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d10d      	bne.n	800f6e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	68db      	ldr	r3, [r3, #12]
 800f6d6:	021b      	lsls	r3, r3, #8
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	4313      	orrs	r3, r2
 800f6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4a1d      	ldr	r2, [pc, #116]	; (800f760 <TIM_OC3_SetConfig+0xfc>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d00f      	beq.n	800f70e <TIM_OC3_SetConfig+0xaa>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	4a1c      	ldr	r2, [pc, #112]	; (800f764 <TIM_OC3_SetConfig+0x100>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d00b      	beq.n	800f70e <TIM_OC3_SetConfig+0xaa>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	4a1b      	ldr	r2, [pc, #108]	; (800f768 <TIM_OC3_SetConfig+0x104>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d007      	beq.n	800f70e <TIM_OC3_SetConfig+0xaa>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a1a      	ldr	r2, [pc, #104]	; (800f76c <TIM_OC3_SetConfig+0x108>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d003      	beq.n	800f70e <TIM_OC3_SetConfig+0xaa>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4a19      	ldr	r2, [pc, #100]	; (800f770 <TIM_OC3_SetConfig+0x10c>)
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d113      	bne.n	800f736 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	695b      	ldr	r3, [r3, #20]
 800f722:	011b      	lsls	r3, r3, #4
 800f724:	693a      	ldr	r2, [r7, #16]
 800f726:	4313      	orrs	r3, r2
 800f728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	699b      	ldr	r3, [r3, #24]
 800f72e:	011b      	lsls	r3, r3, #4
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	4313      	orrs	r3, r2
 800f734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68fa      	ldr	r2, [r7, #12]
 800f740:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	685a      	ldr	r2, [r3, #4]
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	621a      	str	r2, [r3, #32]
}
 800f750:	bf00      	nop
 800f752:	371c      	adds	r7, #28
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr
 800f75c:	fffeff8f 	.word	0xfffeff8f
 800f760:	40010000 	.word	0x40010000
 800f764:	40010400 	.word	0x40010400
 800f768:	40014000 	.word	0x40014000
 800f76c:	40014400 	.word	0x40014400
 800f770:	40014800 	.word	0x40014800

0800f774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f774:	b480      	push	{r7}
 800f776:	b087      	sub	sp, #28
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6a1b      	ldr	r3, [r3, #32]
 800f782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a1b      	ldr	r3, [r3, #32]
 800f788:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	69db      	ldr	r3, [r3, #28]
 800f79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	4b24      	ldr	r3, [pc, #144]	; (800f830 <TIM_OC4_SetConfig+0xbc>)
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	021b      	lsls	r3, r3, #8
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	4313      	orrs	r3, r2
 800f7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	689b      	ldr	r3, [r3, #8]
 800f7c4:	031b      	lsls	r3, r3, #12
 800f7c6:	693a      	ldr	r2, [r7, #16]
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a19      	ldr	r2, [pc, #100]	; (800f834 <TIM_OC4_SetConfig+0xc0>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d00f      	beq.n	800f7f4 <TIM_OC4_SetConfig+0x80>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a18      	ldr	r2, [pc, #96]	; (800f838 <TIM_OC4_SetConfig+0xc4>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d00b      	beq.n	800f7f4 <TIM_OC4_SetConfig+0x80>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a17      	ldr	r2, [pc, #92]	; (800f83c <TIM_OC4_SetConfig+0xc8>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d007      	beq.n	800f7f4 <TIM_OC4_SetConfig+0x80>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a16      	ldr	r2, [pc, #88]	; (800f840 <TIM_OC4_SetConfig+0xcc>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d003      	beq.n	800f7f4 <TIM_OC4_SetConfig+0x80>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a15      	ldr	r2, [pc, #84]	; (800f844 <TIM_OC4_SetConfig+0xd0>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d109      	bne.n	800f808 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	019b      	lsls	r3, r3, #6
 800f802:	697a      	ldr	r2, [r7, #20]
 800f804:	4313      	orrs	r3, r2
 800f806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	697a      	ldr	r2, [r7, #20]
 800f80c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685a      	ldr	r2, [r3, #4]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	621a      	str	r2, [r3, #32]
}
 800f822:	bf00      	nop
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr
 800f82e:	bf00      	nop
 800f830:	feff8fff 	.word	0xfeff8fff
 800f834:	40010000 	.word	0x40010000
 800f838:	40010400 	.word	0x40010400
 800f83c:	40014000 	.word	0x40014000
 800f840:	40014400 	.word	0x40014400
 800f844:	40014800 	.word	0x40014800

0800f848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f848:	b480      	push	{r7}
 800f84a:	b087      	sub	sp, #28
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a1b      	ldr	r3, [r3, #32]
 800f85c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f870:	68fa      	ldr	r2, [r7, #12]
 800f872:	4b21      	ldr	r3, [pc, #132]	; (800f8f8 <TIM_OC5_SetConfig+0xb0>)
 800f874:	4013      	ands	r3, r2
 800f876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	4313      	orrs	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f888:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	689b      	ldr	r3, [r3, #8]
 800f88e:	041b      	lsls	r3, r3, #16
 800f890:	693a      	ldr	r2, [r7, #16]
 800f892:	4313      	orrs	r3, r2
 800f894:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4a18      	ldr	r2, [pc, #96]	; (800f8fc <TIM_OC5_SetConfig+0xb4>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d00f      	beq.n	800f8be <TIM_OC5_SetConfig+0x76>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4a17      	ldr	r2, [pc, #92]	; (800f900 <TIM_OC5_SetConfig+0xb8>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d00b      	beq.n	800f8be <TIM_OC5_SetConfig+0x76>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a16      	ldr	r2, [pc, #88]	; (800f904 <TIM_OC5_SetConfig+0xbc>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d007      	beq.n	800f8be <TIM_OC5_SetConfig+0x76>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a15      	ldr	r2, [pc, #84]	; (800f908 <TIM_OC5_SetConfig+0xc0>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d003      	beq.n	800f8be <TIM_OC5_SetConfig+0x76>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a14      	ldr	r2, [pc, #80]	; (800f90c <TIM_OC5_SetConfig+0xc4>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d109      	bne.n	800f8d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	695b      	ldr	r3, [r3, #20]
 800f8ca:	021b      	lsls	r3, r3, #8
 800f8cc:	697a      	ldr	r2, [r7, #20]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	697a      	ldr	r2, [r7, #20]
 800f8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	693a      	ldr	r2, [r7, #16]
 800f8ea:	621a      	str	r2, [r3, #32]
}
 800f8ec:	bf00      	nop
 800f8ee:	371c      	adds	r7, #28
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	fffeff8f 	.word	0xfffeff8f
 800f8fc:	40010000 	.word	0x40010000
 800f900:	40010400 	.word	0x40010400
 800f904:	40014000 	.word	0x40014000
 800f908:	40014400 	.word	0x40014400
 800f90c:	40014800 	.word	0x40014800

0800f910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f910:	b480      	push	{r7}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6a1b      	ldr	r3, [r3, #32]
 800f91e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	4b22      	ldr	r3, [pc, #136]	; (800f9c4 <TIM_OC6_SetConfig+0xb4>)
 800f93c:	4013      	ands	r3, r2
 800f93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	021b      	lsls	r3, r3, #8
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	4313      	orrs	r3, r2
 800f94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	051b      	lsls	r3, r3, #20
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a19      	ldr	r2, [pc, #100]	; (800f9c8 <TIM_OC6_SetConfig+0xb8>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d00f      	beq.n	800f988 <TIM_OC6_SetConfig+0x78>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	4a18      	ldr	r2, [pc, #96]	; (800f9cc <TIM_OC6_SetConfig+0xbc>)
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d00b      	beq.n	800f988 <TIM_OC6_SetConfig+0x78>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	4a17      	ldr	r2, [pc, #92]	; (800f9d0 <TIM_OC6_SetConfig+0xc0>)
 800f974:	4293      	cmp	r3, r2
 800f976:	d007      	beq.n	800f988 <TIM_OC6_SetConfig+0x78>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a16      	ldr	r2, [pc, #88]	; (800f9d4 <TIM_OC6_SetConfig+0xc4>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d003      	beq.n	800f988 <TIM_OC6_SetConfig+0x78>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a15      	ldr	r2, [pc, #84]	; (800f9d8 <TIM_OC6_SetConfig+0xc8>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d109      	bne.n	800f99c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f98e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	695b      	ldr	r3, [r3, #20]
 800f994:	029b      	lsls	r3, r3, #10
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	4313      	orrs	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	685a      	ldr	r2, [r3, #4]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	621a      	str	r2, [r3, #32]
}
 800f9b6:	bf00      	nop
 800f9b8:	371c      	adds	r7, #28
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	feff8fff 	.word	0xfeff8fff
 800f9c8:	40010000 	.word	0x40010000
 800f9cc:	40010400 	.word	0x40010400
 800f9d0:	40014000 	.word	0x40014000
 800f9d4:	40014400 	.word	0x40014400
 800f9d8:	40014800 	.word	0x40014800

0800f9dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b087      	sub	sp, #28
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	60f8      	str	r0, [r7, #12]
 800f9e4:	60b9      	str	r1, [r7, #8]
 800f9e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6a1b      	ldr	r3, [r3, #32]
 800f9ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6a1b      	ldr	r3, [r3, #32]
 800f9f2:	f023 0201 	bic.w	r2, r3, #1
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	699b      	ldr	r3, [r3, #24]
 800f9fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	011b      	lsls	r3, r3, #4
 800fa0c:	693a      	ldr	r2, [r7, #16]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	f023 030a 	bic.w	r3, r3, #10
 800fa18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	68bb      	ldr	r3, [r7, #8]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	693a      	ldr	r2, [r7, #16]
 800fa26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	621a      	str	r2, [r3, #32]
}
 800fa2e:	bf00      	nop
 800fa30:	371c      	adds	r7, #28
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b087      	sub	sp, #28
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	f023 0210 	bic.w	r2, r3, #16
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	699b      	ldr	r3, [r3, #24]
 800fa5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	031b      	lsls	r3, r3, #12
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fa76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	011b      	lsls	r3, r3, #4
 800fa7c:	697a      	ldr	r2, [r7, #20]
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	697a      	ldr	r2, [r7, #20]
 800fa8c:	621a      	str	r2, [r3, #32]
}
 800fa8e:	bf00      	nop
 800fa90:	371c      	adds	r7, #28
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
	...

0800fa9c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	689b      	ldr	r3, [r3, #8]
 800faaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4b09      	ldr	r3, [pc, #36]	; (800fad4 <TIM_ITRx_SetConfig+0x38>)
 800fab0:	4013      	ands	r3, r2
 800fab2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fab4:	683a      	ldr	r2, [r7, #0]
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	4313      	orrs	r3, r2
 800faba:	f043 0307 	orr.w	r3, r3, #7
 800fabe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	68fa      	ldr	r2, [r7, #12]
 800fac4:	609a      	str	r2, [r3, #8]
}
 800fac6:	bf00      	nop
 800fac8:	3714      	adds	r7, #20
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr
 800fad2:	bf00      	nop
 800fad4:	ffcfff8f 	.word	0xffcfff8f

0800fad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fad8:	b480      	push	{r7}
 800fada:	b087      	sub	sp, #28
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800faf2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	021a      	lsls	r2, r3, #8
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	431a      	orrs	r2, r3
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	697a      	ldr	r2, [r7, #20]
 800fb0a:	609a      	str	r2, [r3, #8]
}
 800fb0c:	bf00      	nop
 800fb0e:	371c      	adds	r7, #28
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b087      	sub	sp, #28
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	f003 031f 	and.w	r3, r3, #31
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6a1a      	ldr	r2, [r3, #32]
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	43db      	mvns	r3, r3
 800fb3a:	401a      	ands	r2, r3
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6a1a      	ldr	r2, [r3, #32]
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	f003 031f 	and.w	r3, r3, #31
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb50:	431a      	orrs	r2, r3
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	621a      	str	r2, [r3, #32]
}
 800fb56:	bf00      	nop
 800fb58:	371c      	adds	r7, #28
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
	...

0800fb64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b085      	sub	sp, #20
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d101      	bne.n	800fb7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb78:	2302      	movs	r3, #2
 800fb7a:	e06d      	b.n	800fc58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2201      	movs	r2, #1
 800fb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2202      	movs	r2, #2
 800fb88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	689b      	ldr	r3, [r3, #8]
 800fb9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a30      	ldr	r2, [pc, #192]	; (800fc64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d004      	beq.n	800fbb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a2f      	ldr	r2, [pc, #188]	; (800fc68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d108      	bne.n	800fbc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a20      	ldr	r2, [pc, #128]	; (800fc64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d022      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbee:	d01d      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a1d      	ldr	r2, [pc, #116]	; (800fc6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d018      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a1c      	ldr	r2, [pc, #112]	; (800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d013      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a1a      	ldr	r2, [pc, #104]	; (800fc74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d00e      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a15      	ldr	r2, [pc, #84]	; (800fc68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d009      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a16      	ldr	r2, [pc, #88]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d004      	beq.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4a15      	ldr	r2, [pc, #84]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc28:	4293      	cmp	r3, r2
 800fc2a:	d10c      	bne.n	800fc46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	689b      	ldr	r3, [r3, #8]
 800fc38:	68ba      	ldr	r2, [r7, #8]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	68ba      	ldr	r2, [r7, #8]
 800fc44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2201      	movs	r2, #1
 800fc4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2200      	movs	r2, #0
 800fc52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3714      	adds	r7, #20
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr
 800fc64:	40010000 	.word	0x40010000
 800fc68:	40010400 	.word	0x40010400
 800fc6c:	40000400 	.word	0x40000400
 800fc70:	40000800 	.word	0x40000800
 800fc74:	40000c00 	.word	0x40000c00
 800fc78:	40001800 	.word	0x40001800
 800fc7c:	40014000 	.word	0x40014000

0800fc80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d101      	bne.n	800fc9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fc98:	2302      	movs	r3, #2
 800fc9a:	e065      	b.n	800fd68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	4313      	orrs	r3, r2
 800fcbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	4313      	orrs	r3, r2
 800fccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4313      	orrs	r3, r2
 800fcda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	695b      	ldr	r3, [r3, #20]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	699b      	ldr	r3, [r3, #24]
 800fd10:	041b      	lsls	r3, r3, #16
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a16      	ldr	r2, [pc, #88]	; (800fd74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d004      	beq.n	800fd2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a14      	ldr	r2, [pc, #80]	; (800fd78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d115      	bne.n	800fd56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd34:	051b      	lsls	r3, r3, #20
 800fd36:	4313      	orrs	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	69db      	ldr	r3, [r3, #28]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	6a1b      	ldr	r3, [r3, #32]
 800fd52:	4313      	orrs	r3, r2
 800fd54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr
 800fd74:	40010000 	.word	0x40010000
 800fd78:	40010400 	.word	0x40010400

0800fd7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd84:	bf00      	nop
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fdac:	bf00      	nop
 800fdae:	370c      	adds	r7, #12
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb6:	4770      	bx	lr

0800fdb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d101      	bne.n	800fdca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	e042      	b.n	800fe50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d106      	bne.n	800fde2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7f3 fc03 	bl	80035e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2224      	movs	r2, #36	; 0x24
 800fde6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f022 0201 	bic.w	r2, r2, #1
 800fdf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f001 fb8c 	bl	8011520 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe08:	6878      	ldr	r0, [r7, #4]
 800fe0a:	f000 fe21 	bl	8010a50 <UART_SetConfig>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d101      	bne.n	800fe18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe14:	2301      	movs	r3, #1
 800fe16:	e01b      	b.n	800fe50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	685a      	ldr	r2, [r3, #4]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	689a      	ldr	r2, [r3, #8]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f042 0201 	orr.w	r2, r2, #1
 800fe46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f001 fc0b 	bl	8011664 <UART_CheckIdleState>
 800fe4e:	4603      	mov	r3, r0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b08a      	sub	sp, #40	; 0x28
 800fe5c:	af02      	add	r7, sp, #8
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	603b      	str	r3, [r7, #0]
 800fe64:	4613      	mov	r3, r2
 800fe66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe6e:	2b20      	cmp	r3, #32
 800fe70:	d17b      	bne.n	800ff6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <HAL_UART_Transmit+0x26>
 800fe78:	88fb      	ldrh	r3, [r7, #6]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e074      	b.n	800ff6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	2221      	movs	r2, #33	; 0x21
 800fe8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe92:	f7f3 ff27 	bl	8003ce4 <HAL_GetTick>
 800fe96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	88fa      	ldrh	r2, [r7, #6]
 800fe9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	88fa      	ldrh	r2, [r7, #6]
 800fea4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feb0:	d108      	bne.n	800fec4 <HAL_UART_Transmit+0x6c>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	691b      	ldr	r3, [r3, #16]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d104      	bne.n	800fec4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800feba:	2300      	movs	r3, #0
 800febc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	e003      	b.n	800fecc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fec8:	2300      	movs	r3, #0
 800feca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fecc:	e030      	b.n	800ff30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	2200      	movs	r2, #0
 800fed6:	2180      	movs	r1, #128	; 0x80
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f001 fc6d 	bl	80117b8 <UART_WaitOnFlagUntilTimeout>
 800fede:	4603      	mov	r3, r0
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d005      	beq.n	800fef0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2220      	movs	r2, #32
 800fee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800feec:	2303      	movs	r3, #3
 800feee:	e03d      	b.n	800ff6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d10b      	bne.n	800ff0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	461a      	mov	r2, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	3302      	adds	r3, #2
 800ff0a:	61bb      	str	r3, [r7, #24]
 800ff0c:	e007      	b.n	800ff1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	781a      	ldrb	r2, [r3, #0]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	3301      	adds	r3, #1
 800ff1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	3b01      	subs	r3, #1
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1c8      	bne.n	800fece <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	2200      	movs	r2, #0
 800ff44:	2140      	movs	r1, #64	; 0x40
 800ff46:	68f8      	ldr	r0, [r7, #12]
 800ff48:	f001 fc36 	bl	80117b8 <UART_WaitOnFlagUntilTimeout>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d005      	beq.n	800ff5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e006      	b.n	800ff6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2220      	movs	r2, #32
 800ff62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ff66:	2300      	movs	r3, #0
 800ff68:	e000      	b.n	800ff6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ff6a:	2302      	movs	r3, #2
  }
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3720      	adds	r7, #32
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08a      	sub	sp, #40	; 0x28
 800ff78:	af02      	add	r7, sp, #8
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	603b      	str	r3, [r7, #0]
 800ff80:	4613      	mov	r3, r2
 800ff82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff8a:	2b20      	cmp	r3, #32
 800ff8c:	f040 80b5 	bne.w	80100fa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <HAL_UART_Receive+0x28>
 800ff96:	88fb      	ldrh	r3, [r7, #6]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e0ad      	b.n	80100fc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2222      	movs	r2, #34	; 0x22
 800ffac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ffb6:	f7f3 fe95 	bl	8003ce4 <HAL_GetTick>
 800ffba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	88fa      	ldrh	r2, [r7, #6]
 800ffc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	88fa      	ldrh	r2, [r7, #6]
 800ffc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ffd4:	d10e      	bne.n	800fff4 <HAL_UART_Receive+0x80>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	691b      	ldr	r3, [r3, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d105      	bne.n	800ffea <HAL_UART_Receive+0x76>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ffe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ffe8:	e02d      	b.n	8010046 <HAL_UART_Receive+0xd2>
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	22ff      	movs	r2, #255	; 0xff
 800ffee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fff2:	e028      	b.n	8010046 <HAL_UART_Receive+0xd2>
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	689b      	ldr	r3, [r3, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10d      	bne.n	8010018 <HAL_UART_Receive+0xa4>
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d104      	bne.n	801000e <HAL_UART_Receive+0x9a>
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	22ff      	movs	r2, #255	; 0xff
 8010008:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801000c:	e01b      	b.n	8010046 <HAL_UART_Receive+0xd2>
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	227f      	movs	r2, #127	; 0x7f
 8010012:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010016:	e016      	b.n	8010046 <HAL_UART_Receive+0xd2>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	689b      	ldr	r3, [r3, #8]
 801001c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010020:	d10d      	bne.n	801003e <HAL_UART_Receive+0xca>
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d104      	bne.n	8010034 <HAL_UART_Receive+0xc0>
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	227f      	movs	r2, #127	; 0x7f
 801002e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010032:	e008      	b.n	8010046 <HAL_UART_Receive+0xd2>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	223f      	movs	r2, #63	; 0x3f
 8010038:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801003c:	e003      	b.n	8010046 <HAL_UART_Receive+0xd2>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2200      	movs	r2, #0
 8010042:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801004c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	689b      	ldr	r3, [r3, #8]
 8010052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010056:	d108      	bne.n	801006a <HAL_UART_Receive+0xf6>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d104      	bne.n	801006a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010060:	2300      	movs	r3, #0
 8010062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	61bb      	str	r3, [r7, #24]
 8010068:	e003      	b.n	8010072 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801006e:	2300      	movs	r3, #0
 8010070:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010072:	e036      	b.n	80100e2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2200      	movs	r2, #0
 801007c:	2120      	movs	r1, #32
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f001 fb9a 	bl	80117b8 <UART_WaitOnFlagUntilTimeout>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d005      	beq.n	8010096 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2220      	movs	r2, #32
 801008e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010092:	2303      	movs	r3, #3
 8010094:	e032      	b.n	80100fc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d10c      	bne.n	80100b6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	8a7b      	ldrh	r3, [r7, #18]
 80100a6:	4013      	ands	r3, r2
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	3302      	adds	r3, #2
 80100b2:	61bb      	str	r3, [r7, #24]
 80100b4:	e00c      	b.n	80100d0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100bc:	b2da      	uxtb	r2, r3
 80100be:	8a7b      	ldrh	r3, [r7, #18]
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	4013      	ands	r3, r2
 80100c4:	b2da      	uxtb	r2, r3
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	3301      	adds	r3, #1
 80100ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100d6:	b29b      	uxth	r3, r3
 80100d8:	3b01      	subs	r3, #1
 80100da:	b29a      	uxth	r2, r3
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d1c2      	bne.n	8010074 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2220      	movs	r2, #32
 80100f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	e000      	b.n	80100fc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80100fa:	2302      	movs	r3, #2
  }
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	4613      	mov	r3, r2
 8010110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010118:	2b20      	cmp	r3, #32
 801011a:	d137      	bne.n	801018c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d002      	beq.n	8010128 <HAL_UART_Receive_IT+0x24>
 8010122:	88fb      	ldrh	r3, [r7, #6]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d101      	bne.n	801012c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010128:	2301      	movs	r3, #1
 801012a:	e030      	b.n	801018e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a18      	ldr	r2, [pc, #96]	; (8010198 <HAL_UART_Receive_IT+0x94>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d01f      	beq.n	801017c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010146:	2b00      	cmp	r3, #0
 8010148:	d018      	beq.n	801017c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	e853 3f00 	ldrex	r3, [r3]
 8010156:	613b      	str	r3, [r7, #16]
   return(result);
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801015e:	627b      	str	r3, [r7, #36]	; 0x24
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010168:	623b      	str	r3, [r7, #32]
 801016a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016c:	69f9      	ldr	r1, [r7, #28]
 801016e:	6a3a      	ldr	r2, [r7, #32]
 8010170:	e841 2300 	strex	r3, r2, [r1]
 8010174:	61bb      	str	r3, [r7, #24]
   return(result);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d1e6      	bne.n	801014a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801017c:	88fb      	ldrh	r3, [r7, #6]
 801017e:	461a      	mov	r2, r3
 8010180:	68b9      	ldr	r1, [r7, #8]
 8010182:	68f8      	ldr	r0, [r7, #12]
 8010184:	f001 fb86 	bl	8011894 <UART_Start_Receive_IT>
 8010188:	4603      	mov	r3, r0
 801018a:	e000      	b.n	801018e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801018c:	2302      	movs	r3, #2
  }
}
 801018e:	4618      	mov	r0, r3
 8010190:	3728      	adds	r7, #40	; 0x28
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	58000c00 	.word	0x58000c00

0801019c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b08a      	sub	sp, #40	; 0x28
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	4613      	mov	r3, r2
 80101a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101b0:	2b20      	cmp	r3, #32
 80101b2:	d167      	bne.n	8010284 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d002      	beq.n	80101c0 <HAL_UART_Transmit_DMA+0x24>
 80101ba:	88fb      	ldrh	r3, [r7, #6]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80101c0:	2301      	movs	r3, #1
 80101c2:	e060      	b.n	8010286 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	88fa      	ldrh	r2, [r7, #6]
 80101ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	88fa      	ldrh	r2, [r7, #6]
 80101d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2200      	movs	r2, #0
 80101de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2221      	movs	r2, #33	; 0x21
 80101e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d028      	beq.n	8010244 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101f6:	4a26      	ldr	r2, [pc, #152]	; (8010290 <HAL_UART_Transmit_DMA+0xf4>)
 80101f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101fe:	4a25      	ldr	r2, [pc, #148]	; (8010294 <HAL_UART_Transmit_DMA+0xf8>)
 8010200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010206:	4a24      	ldr	r2, [pc, #144]	; (8010298 <HAL_UART_Transmit_DMA+0xfc>)
 8010208:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801020e:	2200      	movs	r2, #0
 8010210:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801021a:	4619      	mov	r1, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3328      	adds	r3, #40	; 0x28
 8010222:	461a      	mov	r2, r3
 8010224:	88fb      	ldrh	r3, [r7, #6]
 8010226:	f7f6 f9e1 	bl	80065ec <HAL_DMA_Start_IT>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d009      	beq.n	8010244 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2210      	movs	r2, #16
 8010234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2220      	movs	r2, #32
 801023c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010240:	2301      	movs	r3, #1
 8010242:	e020      	b.n	8010286 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2240      	movs	r2, #64	; 0x40
 801024a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	3308      	adds	r3, #8
 8010252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	e853 3f00 	ldrex	r3, [r3]
 801025a:	613b      	str	r3, [r7, #16]
   return(result);
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010262:	627b      	str	r3, [r7, #36]	; 0x24
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	3308      	adds	r3, #8
 801026a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801026c:	623a      	str	r2, [r7, #32]
 801026e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010270:	69f9      	ldr	r1, [r7, #28]
 8010272:	6a3a      	ldr	r2, [r7, #32]
 8010274:	e841 2300 	strex	r3, r2, [r1]
 8010278:	61bb      	str	r3, [r7, #24]
   return(result);
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1e5      	bne.n	801024c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010280:	2300      	movs	r3, #0
 8010282:	e000      	b.n	8010286 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010284:	2302      	movs	r3, #2
  }
}
 8010286:	4618      	mov	r0, r3
 8010288:	3728      	adds	r7, #40	; 0x28
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	08011c29 	.word	0x08011c29
 8010294:	08011cbf 	.word	0x08011cbf
 8010298:	08011cdb 	.word	0x08011cdb

0801029c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b0ba      	sub	sp, #232	; 0xe8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	69db      	ldr	r3, [r3, #28]
 80102aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80102c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80102c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80102ca:	4013      	ands	r3, r2
 80102cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80102d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d11b      	bne.n	8010310 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80102d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102dc:	f003 0320 	and.w	r3, r3, #32
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d015      	beq.n	8010310 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80102e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102e8:	f003 0320 	and.w	r3, r3, #32
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d105      	bne.n	80102fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80102f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d009      	beq.n	8010310 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010300:	2b00      	cmp	r3, #0
 8010302:	f000 8377 	beq.w	80109f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	4798      	blx	r3
      }
      return;
 801030e:	e371      	b.n	80109f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 8123 	beq.w	8010560 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801031a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801031e:	4b8d      	ldr	r3, [pc, #564]	; (8010554 <HAL_UART_IRQHandler+0x2b8>)
 8010320:	4013      	ands	r3, r2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010326:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801032a:	4b8b      	ldr	r3, [pc, #556]	; (8010558 <HAL_UART_IRQHandler+0x2bc>)
 801032c:	4013      	ands	r3, r2
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 8116 	beq.w	8010560 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010338:	f003 0301 	and.w	r3, r3, #1
 801033c:	2b00      	cmp	r3, #0
 801033e:	d011      	beq.n	8010364 <HAL_UART_IRQHandler+0xc8>
 8010340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2201      	movs	r2, #1
 8010352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801035a:	f043 0201 	orr.w	r2, r3, #1
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010368:	f003 0302 	and.w	r3, r3, #2
 801036c:	2b00      	cmp	r3, #0
 801036e:	d011      	beq.n	8010394 <HAL_UART_IRQHandler+0xf8>
 8010370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010374:	f003 0301 	and.w	r3, r3, #1
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00b      	beq.n	8010394 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	2202      	movs	r2, #2
 8010382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801038a:	f043 0204 	orr.w	r2, r3, #4
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010398:	f003 0304 	and.w	r3, r3, #4
 801039c:	2b00      	cmp	r3, #0
 801039e:	d011      	beq.n	80103c4 <HAL_UART_IRQHandler+0x128>
 80103a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103a4:	f003 0301 	and.w	r3, r3, #1
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00b      	beq.n	80103c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	2204      	movs	r2, #4
 80103b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ba:	f043 0202 	orr.w	r2, r3, #2
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80103c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103c8:	f003 0308 	and.w	r3, r3, #8
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d017      	beq.n	8010400 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80103d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103d4:	f003 0320 	and.w	r3, r3, #32
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d105      	bne.n	80103e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80103dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80103e0:	4b5c      	ldr	r3, [pc, #368]	; (8010554 <HAL_UART_IRQHandler+0x2b8>)
 80103e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00b      	beq.n	8010400 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2208      	movs	r2, #8
 80103ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103f6:	f043 0208 	orr.w	r2, r3, #8
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010408:	2b00      	cmp	r3, #0
 801040a:	d012      	beq.n	8010432 <HAL_UART_IRQHandler+0x196>
 801040c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00c      	beq.n	8010432 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010428:	f043 0220 	orr.w	r2, r3, #32
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 82dd 	beq.w	80109f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801043e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010442:	f003 0320 	and.w	r3, r3, #32
 8010446:	2b00      	cmp	r3, #0
 8010448:	d013      	beq.n	8010472 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801044a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801044e:	f003 0320 	and.w	r3, r3, #32
 8010452:	2b00      	cmp	r3, #0
 8010454:	d105      	bne.n	8010462 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801045e:	2b00      	cmp	r3, #0
 8010460:	d007      	beq.n	8010472 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010466:	2b00      	cmp	r3, #0
 8010468:	d003      	beq.n	8010472 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	689b      	ldr	r3, [r3, #8]
 8010482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010486:	2b40      	cmp	r3, #64	; 0x40
 8010488:	d005      	beq.n	8010496 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801048a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801048e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010492:	2b00      	cmp	r3, #0
 8010494:	d054      	beq.n	8010540 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f001 fb60 	bl	8011b5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a6:	2b40      	cmp	r3, #64	; 0x40
 80104a8:	d146      	bne.n	8010538 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	3308      	adds	r3, #8
 80104b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80104c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80104c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3308      	adds	r3, #8
 80104d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80104d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80104da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80104e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80104e6:	e841 2300 	strex	r3, r2, [r1]
 80104ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80104ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d1d9      	bne.n	80104aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d017      	beq.n	8010530 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010506:	4a15      	ldr	r2, [pc, #84]	; (801055c <HAL_UART_IRQHandler+0x2c0>)
 8010508:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010510:	4618      	mov	r0, r3
 8010512:	f7f6 fdf3 	bl	80070fc <HAL_DMA_Abort_IT>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d019      	beq.n	8010550 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801052a:	4610      	mov	r0, r2
 801052c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801052e:	e00f      	b.n	8010550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 fa77 	bl	8010a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010536:	e00b      	b.n	8010550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fa73 	bl	8010a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801053e:	e007      	b.n	8010550 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fa6f 	bl	8010a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801054e:	e253      	b.n	80109f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010550:	bf00      	nop
    return;
 8010552:	e251      	b.n	80109f8 <HAL_UART_IRQHandler+0x75c>
 8010554:	10000001 	.word	0x10000001
 8010558:	04000120 	.word	0x04000120
 801055c:	08011d5b 	.word	0x08011d5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010564:	2b01      	cmp	r3, #1
 8010566:	f040 81e7 	bne.w	8010938 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801056a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801056e:	f003 0310 	and.w	r3, r3, #16
 8010572:	2b00      	cmp	r3, #0
 8010574:	f000 81e0 	beq.w	8010938 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801057c:	f003 0310 	and.w	r3, r3, #16
 8010580:	2b00      	cmp	r3, #0
 8010582:	f000 81d9 	beq.w	8010938 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2210      	movs	r2, #16
 801058c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010598:	2b40      	cmp	r3, #64	; 0x40
 801059a:	f040 8151 	bne.w	8010840 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	4a96      	ldr	r2, [pc, #600]	; (8010800 <HAL_UART_IRQHandler+0x564>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d068      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a93      	ldr	r2, [pc, #588]	; (8010804 <HAL_UART_IRQHandler+0x568>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d061      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4a91      	ldr	r2, [pc, #580]	; (8010808 <HAL_UART_IRQHandler+0x56c>)
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d05a      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a8e      	ldr	r2, [pc, #568]	; (801080c <HAL_UART_IRQHandler+0x570>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d053      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a8c      	ldr	r2, [pc, #560]	; (8010810 <HAL_UART_IRQHandler+0x574>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d04c      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a89      	ldr	r2, [pc, #548]	; (8010814 <HAL_UART_IRQHandler+0x578>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d045      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a87      	ldr	r2, [pc, #540]	; (8010818 <HAL_UART_IRQHandler+0x57c>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d03e      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a84      	ldr	r2, [pc, #528]	; (801081c <HAL_UART_IRQHandler+0x580>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d037      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	4a82      	ldr	r2, [pc, #520]	; (8010820 <HAL_UART_IRQHandler+0x584>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d030      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a7f      	ldr	r2, [pc, #508]	; (8010824 <HAL_UART_IRQHandler+0x588>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d029      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a7d      	ldr	r2, [pc, #500]	; (8010828 <HAL_UART_IRQHandler+0x58c>)
 8010634:	4293      	cmp	r3, r2
 8010636:	d022      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a7a      	ldr	r2, [pc, #488]	; (801082c <HAL_UART_IRQHandler+0x590>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d01b      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	4a78      	ldr	r2, [pc, #480]	; (8010830 <HAL_UART_IRQHandler+0x594>)
 8010650:	4293      	cmp	r3, r2
 8010652:	d014      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a75      	ldr	r2, [pc, #468]	; (8010834 <HAL_UART_IRQHandler+0x598>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d00d      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a73      	ldr	r2, [pc, #460]	; (8010838 <HAL_UART_IRQHandler+0x59c>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d006      	beq.n	801067e <HAL_UART_IRQHandler+0x3e2>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a70      	ldr	r2, [pc, #448]	; (801083c <HAL_UART_IRQHandler+0x5a0>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d106      	bne.n	801068c <HAL_UART_IRQHandler+0x3f0>
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	b29b      	uxth	r3, r3
 801068a:	e005      	b.n	8010698 <HAL_UART_IRQHandler+0x3fc>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	b29b      	uxth	r3, r3
 8010698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801069c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 81ab 	beq.w	80109fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f080 81a3 	bcs.w	80109fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80106bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106c6:	69db      	ldr	r3, [r3, #28]
 80106c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106cc:	f000 8087 	beq.w	80107de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106dc:	e853 3f00 	ldrex	r3, [r3]
 80106e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80106e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80106ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	461a      	mov	r2, r3
 80106f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80106fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80106fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801070a:	e841 2300 	strex	r3, r2, [r1]
 801070e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1da      	bne.n	80106d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3308      	adds	r3, #8
 8010720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010724:	e853 3f00 	ldrex	r3, [r3]
 8010728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801072a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801072c:	f023 0301 	bic.w	r3, r3, #1
 8010730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	3308      	adds	r3, #8
 801073a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801073e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801074a:	e841 2300 	strex	r3, r2, [r1]
 801074e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010752:	2b00      	cmp	r3, #0
 8010754:	d1e1      	bne.n	801071a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	3308      	adds	r3, #8
 801075c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010760:	e853 3f00 	ldrex	r3, [r3]
 8010764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801076c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	3308      	adds	r3, #8
 8010776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801077a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801077c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801077e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010782:	e841 2300 	strex	r3, r2, [r1]
 8010786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1e3      	bne.n	8010756 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2220      	movs	r2, #32
 8010792:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	2200      	movs	r2, #0
 801079a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a4:	e853 3f00 	ldrex	r3, [r3]
 80107a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80107aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ac:	f023 0310 	bic.w	r3, r3, #16
 80107b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	461a      	mov	r2, r3
 80107ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107be:	65bb      	str	r3, [r7, #88]	; 0x58
 80107c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80107c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107c6:	e841 2300 	strex	r3, r2, [r1]
 80107ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80107cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d1e4      	bne.n	801079c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107d8:	4618      	mov	r0, r3
 80107da:	f7f6 f971 	bl	8006ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2202      	movs	r2, #2
 80107e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	4619      	mov	r1, r3
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 f91d 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107fe:	e0fd      	b.n	80109fc <HAL_UART_IRQHandler+0x760>
 8010800:	40020010 	.word	0x40020010
 8010804:	40020028 	.word	0x40020028
 8010808:	40020040 	.word	0x40020040
 801080c:	40020058 	.word	0x40020058
 8010810:	40020070 	.word	0x40020070
 8010814:	40020088 	.word	0x40020088
 8010818:	400200a0 	.word	0x400200a0
 801081c:	400200b8 	.word	0x400200b8
 8010820:	40020410 	.word	0x40020410
 8010824:	40020428 	.word	0x40020428
 8010828:	40020440 	.word	0x40020440
 801082c:	40020458 	.word	0x40020458
 8010830:	40020470 	.word	0x40020470
 8010834:	40020488 	.word	0x40020488
 8010838:	400204a0 	.word	0x400204a0
 801083c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801084c:	b29b      	uxth	r3, r3
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801085a:	b29b      	uxth	r3, r3
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 80cf 	beq.w	8010a00 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010866:	2b00      	cmp	r3, #0
 8010868:	f000 80ca 	beq.w	8010a00 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	e853 3f00 	ldrex	r3, [r3]
 8010878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801087a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801087c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	461a      	mov	r2, r3
 801088a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801088e:	647b      	str	r3, [r7, #68]	; 0x44
 8010890:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010896:	e841 2300 	strex	r3, r2, [r1]
 801089a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801089c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1e4      	bne.n	801086c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3308      	adds	r3, #8
 80108a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	e853 3f00 	ldrex	r3, [r3]
 80108b0:	623b      	str	r3, [r7, #32]
   return(result);
 80108b2:	6a3a      	ldr	r2, [r7, #32]
 80108b4:	4b55      	ldr	r3, [pc, #340]	; (8010a0c <HAL_UART_IRQHandler+0x770>)
 80108b6:	4013      	ands	r3, r2
 80108b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	3308      	adds	r3, #8
 80108c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80108c6:	633a      	str	r2, [r7, #48]	; 0x30
 80108c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108ce:	e841 2300 	strex	r3, r2, [r1]
 80108d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d1e3      	bne.n	80108a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	e853 3f00 	ldrex	r3, [r3]
 80108fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f023 0310 	bic.w	r3, r3, #16
 8010902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	461a      	mov	r2, r3
 801090c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010910:	61fb      	str	r3, [r7, #28]
 8010912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010914:	69b9      	ldr	r1, [r7, #24]
 8010916:	69fa      	ldr	r2, [r7, #28]
 8010918:	e841 2300 	strex	r3, r2, [r1]
 801091c:	617b      	str	r3, [r7, #20]
   return(result);
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1e4      	bne.n	80108ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2202      	movs	r2, #2
 8010928:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801092a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 f881 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010936:	e063      	b.n	8010a00 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801093c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00e      	beq.n	8010962 <HAL_UART_IRQHandler+0x6c6>
 8010944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d008      	beq.n	8010962 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f001 ff5a 	bl	8012814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010960:	e051      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801096a:	2b00      	cmp	r3, #0
 801096c:	d014      	beq.n	8010998 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801096e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010976:	2b00      	cmp	r3, #0
 8010978:	d105      	bne.n	8010986 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801097a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801097e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010982:	2b00      	cmp	r3, #0
 8010984:	d008      	beq.n	8010998 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801098a:	2b00      	cmp	r3, #0
 801098c:	d03a      	beq.n	8010a04 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	4798      	blx	r3
    }
    return;
 8010996:	e035      	b.n	8010a04 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801099c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d009      	beq.n	80109b8 <HAL_UART_IRQHandler+0x71c>
 80109a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d003      	beq.n	80109b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f001 f9e8 	bl	8011d86 <UART_EndTransmit_IT>
    return;
 80109b6:	e026      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80109b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d009      	beq.n	80109d8 <HAL_UART_IRQHandler+0x73c>
 80109c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d003      	beq.n	80109d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f001 ff33 	bl	801283c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80109d6:	e016      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80109d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d010      	beq.n	8010a06 <HAL_UART_IRQHandler+0x76a>
 80109e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	da0c      	bge.n	8010a06 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f001 ff1b 	bl	8012828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80109f2:	e008      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
      return;
 80109f4:	bf00      	nop
 80109f6:	e006      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
    return;
 80109f8:	bf00      	nop
 80109fa:	e004      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
      return;
 80109fc:	bf00      	nop
 80109fe:	e002      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
      return;
 8010a00:	bf00      	nop
 8010a02:	e000      	b.n	8010a06 <HAL_UART_IRQHandler+0x76a>
    return;
 8010a04:	bf00      	nop
  }
}
 8010a06:	37e8      	adds	r7, #232	; 0xe8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	effffffe 	.word	0xeffffffe

08010a10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010a2c:	bf00      	nop
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	460b      	mov	r3, r1
 8010a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010a44:	bf00      	nop
 8010a46:	370c      	adds	r7, #12
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4e:	4770      	bx	lr

08010a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a54:	b092      	sub	sp, #72	; 0x48
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	689a      	ldr	r2, [r3, #8]
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	691b      	ldr	r3, [r3, #16]
 8010a68:	431a      	orrs	r2, r3
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	431a      	orrs	r2, r3
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	69db      	ldr	r3, [r3, #28]
 8010a74:	4313      	orrs	r3, r2
 8010a76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	4bbe      	ldr	r3, [pc, #760]	; (8010d78 <UART_SetConfig+0x328>)
 8010a80:	4013      	ands	r3, r2
 8010a82:	697a      	ldr	r2, [r7, #20]
 8010a84:	6812      	ldr	r2, [r2, #0]
 8010a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a88:	430b      	orrs	r3, r1
 8010a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	68da      	ldr	r2, [r3, #12]
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	430a      	orrs	r2, r1
 8010aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	699b      	ldr	r3, [r3, #24]
 8010aa6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4ab3      	ldr	r2, [pc, #716]	; (8010d7c <UART_SetConfig+0x32c>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d004      	beq.n	8010abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	689a      	ldr	r2, [r3, #8]
 8010ac2:	4baf      	ldr	r3, [pc, #700]	; (8010d80 <UART_SetConfig+0x330>)
 8010ac4:	4013      	ands	r3, r2
 8010ac6:	697a      	ldr	r2, [r7, #20]
 8010ac8:	6812      	ldr	r2, [r2, #0]
 8010aca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010acc:	430b      	orrs	r3, r1
 8010ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad6:	f023 010f 	bic.w	r1, r3, #15
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	430a      	orrs	r2, r1
 8010ae4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010ae6:	697b      	ldr	r3, [r7, #20]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4aa6      	ldr	r2, [pc, #664]	; (8010d84 <UART_SetConfig+0x334>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d177      	bne.n	8010be0 <UART_SetConfig+0x190>
 8010af0:	4ba5      	ldr	r3, [pc, #660]	; (8010d88 <UART_SetConfig+0x338>)
 8010af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010af8:	2b28      	cmp	r3, #40	; 0x28
 8010afa:	d86d      	bhi.n	8010bd8 <UART_SetConfig+0x188>
 8010afc:	a201      	add	r2, pc, #4	; (adr r2, 8010b04 <UART_SetConfig+0xb4>)
 8010afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b02:	bf00      	nop
 8010b04:	08010ba9 	.word	0x08010ba9
 8010b08:	08010bd9 	.word	0x08010bd9
 8010b0c:	08010bd9 	.word	0x08010bd9
 8010b10:	08010bd9 	.word	0x08010bd9
 8010b14:	08010bd9 	.word	0x08010bd9
 8010b18:	08010bd9 	.word	0x08010bd9
 8010b1c:	08010bd9 	.word	0x08010bd9
 8010b20:	08010bd9 	.word	0x08010bd9
 8010b24:	08010bb1 	.word	0x08010bb1
 8010b28:	08010bd9 	.word	0x08010bd9
 8010b2c:	08010bd9 	.word	0x08010bd9
 8010b30:	08010bd9 	.word	0x08010bd9
 8010b34:	08010bd9 	.word	0x08010bd9
 8010b38:	08010bd9 	.word	0x08010bd9
 8010b3c:	08010bd9 	.word	0x08010bd9
 8010b40:	08010bd9 	.word	0x08010bd9
 8010b44:	08010bb9 	.word	0x08010bb9
 8010b48:	08010bd9 	.word	0x08010bd9
 8010b4c:	08010bd9 	.word	0x08010bd9
 8010b50:	08010bd9 	.word	0x08010bd9
 8010b54:	08010bd9 	.word	0x08010bd9
 8010b58:	08010bd9 	.word	0x08010bd9
 8010b5c:	08010bd9 	.word	0x08010bd9
 8010b60:	08010bd9 	.word	0x08010bd9
 8010b64:	08010bc1 	.word	0x08010bc1
 8010b68:	08010bd9 	.word	0x08010bd9
 8010b6c:	08010bd9 	.word	0x08010bd9
 8010b70:	08010bd9 	.word	0x08010bd9
 8010b74:	08010bd9 	.word	0x08010bd9
 8010b78:	08010bd9 	.word	0x08010bd9
 8010b7c:	08010bd9 	.word	0x08010bd9
 8010b80:	08010bd9 	.word	0x08010bd9
 8010b84:	08010bc9 	.word	0x08010bc9
 8010b88:	08010bd9 	.word	0x08010bd9
 8010b8c:	08010bd9 	.word	0x08010bd9
 8010b90:	08010bd9 	.word	0x08010bd9
 8010b94:	08010bd9 	.word	0x08010bd9
 8010b98:	08010bd9 	.word	0x08010bd9
 8010b9c:	08010bd9 	.word	0x08010bd9
 8010ba0:	08010bd9 	.word	0x08010bd9
 8010ba4:	08010bd1 	.word	0x08010bd1
 8010ba8:	2301      	movs	r3, #1
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e222      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bb0:	2304      	movs	r3, #4
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e21e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bb8:	2308      	movs	r3, #8
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e21a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e216      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bc8:	2320      	movs	r3, #32
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e212      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bd0:	2340      	movs	r3, #64	; 0x40
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e20e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010bd8:	2380      	movs	r3, #128	; 0x80
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e20a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4a69      	ldr	r2, [pc, #420]	; (8010d8c <UART_SetConfig+0x33c>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d130      	bne.n	8010c4c <UART_SetConfig+0x1fc>
 8010bea:	4b67      	ldr	r3, [pc, #412]	; (8010d88 <UART_SetConfig+0x338>)
 8010bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b05      	cmp	r3, #5
 8010bf4:	d826      	bhi.n	8010c44 <UART_SetConfig+0x1f4>
 8010bf6:	a201      	add	r2, pc, #4	; (adr r2, 8010bfc <UART_SetConfig+0x1ac>)
 8010bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bfc:	08010c15 	.word	0x08010c15
 8010c00:	08010c1d 	.word	0x08010c1d
 8010c04:	08010c25 	.word	0x08010c25
 8010c08:	08010c2d 	.word	0x08010c2d
 8010c0c:	08010c35 	.word	0x08010c35
 8010c10:	08010c3d 	.word	0x08010c3d
 8010c14:	2300      	movs	r3, #0
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1a:	e1ec      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c1c:	2304      	movs	r3, #4
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e1e8      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c24:	2308      	movs	r3, #8
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e1e4      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c2c:	2310      	movs	r3, #16
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e1e0      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c34:	2320      	movs	r3, #32
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e1dc      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c3c:	2340      	movs	r3, #64	; 0x40
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c42:	e1d8      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c44:	2380      	movs	r3, #128	; 0x80
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e1d4      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a4f      	ldr	r2, [pc, #316]	; (8010d90 <UART_SetConfig+0x340>)
 8010c52:	4293      	cmp	r3, r2
 8010c54:	d130      	bne.n	8010cb8 <UART_SetConfig+0x268>
 8010c56:	4b4c      	ldr	r3, [pc, #304]	; (8010d88 <UART_SetConfig+0x338>)
 8010c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c5a:	f003 0307 	and.w	r3, r3, #7
 8010c5e:	2b05      	cmp	r3, #5
 8010c60:	d826      	bhi.n	8010cb0 <UART_SetConfig+0x260>
 8010c62:	a201      	add	r2, pc, #4	; (adr r2, 8010c68 <UART_SetConfig+0x218>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010c81 	.word	0x08010c81
 8010c6c:	08010c89 	.word	0x08010c89
 8010c70:	08010c91 	.word	0x08010c91
 8010c74:	08010c99 	.word	0x08010c99
 8010c78:	08010ca1 	.word	0x08010ca1
 8010c7c:	08010ca9 	.word	0x08010ca9
 8010c80:	2300      	movs	r3, #0
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c86:	e1b6      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c88:	2304      	movs	r3, #4
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8e:	e1b2      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c90:	2308      	movs	r3, #8
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e1ae      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010c98:	2310      	movs	r3, #16
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e1aa      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ca0:	2320      	movs	r3, #32
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e1a6      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ca8:	2340      	movs	r3, #64	; 0x40
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cae:	e1a2      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010cb0:	2380      	movs	r3, #128	; 0x80
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e19e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	4a35      	ldr	r2, [pc, #212]	; (8010d94 <UART_SetConfig+0x344>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d130      	bne.n	8010d24 <UART_SetConfig+0x2d4>
 8010cc2:	4b31      	ldr	r3, [pc, #196]	; (8010d88 <UART_SetConfig+0x338>)
 8010cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	2b05      	cmp	r3, #5
 8010ccc:	d826      	bhi.n	8010d1c <UART_SetConfig+0x2cc>
 8010cce:	a201      	add	r2, pc, #4	; (adr r2, 8010cd4 <UART_SetConfig+0x284>)
 8010cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd4:	08010ced 	.word	0x08010ced
 8010cd8:	08010cf5 	.word	0x08010cf5
 8010cdc:	08010cfd 	.word	0x08010cfd
 8010ce0:	08010d05 	.word	0x08010d05
 8010ce4:	08010d0d 	.word	0x08010d0d
 8010ce8:	08010d15 	.word	0x08010d15
 8010cec:	2300      	movs	r3, #0
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e180      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010cf4:	2304      	movs	r3, #4
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e17c      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010cfc:	2308      	movs	r3, #8
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e178      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d04:	2310      	movs	r3, #16
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e174      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d0c:	2320      	movs	r3, #32
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d12:	e170      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d14:	2340      	movs	r3, #64	; 0x40
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1a:	e16c      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d1c:	2380      	movs	r3, #128	; 0x80
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d22:	e168      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4a1b      	ldr	r2, [pc, #108]	; (8010d98 <UART_SetConfig+0x348>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d142      	bne.n	8010db4 <UART_SetConfig+0x364>
 8010d2e:	4b16      	ldr	r3, [pc, #88]	; (8010d88 <UART_SetConfig+0x338>)
 8010d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d32:	f003 0307 	and.w	r3, r3, #7
 8010d36:	2b05      	cmp	r3, #5
 8010d38:	d838      	bhi.n	8010dac <UART_SetConfig+0x35c>
 8010d3a:	a201      	add	r2, pc, #4	; (adr r2, 8010d40 <UART_SetConfig+0x2f0>)
 8010d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d40:	08010d59 	.word	0x08010d59
 8010d44:	08010d61 	.word	0x08010d61
 8010d48:	08010d69 	.word	0x08010d69
 8010d4c:	08010d71 	.word	0x08010d71
 8010d50:	08010d9d 	.word	0x08010d9d
 8010d54:	08010da5 	.word	0x08010da5
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5e:	e14a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d60:	2304      	movs	r3, #4
 8010d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d66:	e146      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d68:	2308      	movs	r3, #8
 8010d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6e:	e142      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d70:	2310      	movs	r3, #16
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e13e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010d78:	cfff69f3 	.word	0xcfff69f3
 8010d7c:	58000c00 	.word	0x58000c00
 8010d80:	11fff4ff 	.word	0x11fff4ff
 8010d84:	40011000 	.word	0x40011000
 8010d88:	58024400 	.word	0x58024400
 8010d8c:	40004400 	.word	0x40004400
 8010d90:	40004800 	.word	0x40004800
 8010d94:	40004c00 	.word	0x40004c00
 8010d98:	40005000 	.word	0x40005000
 8010d9c:	2320      	movs	r3, #32
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da2:	e128      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010da4:	2340      	movs	r3, #64	; 0x40
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010daa:	e124      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010dac:	2380      	movs	r3, #128	; 0x80
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db2:	e120      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4acb      	ldr	r2, [pc, #812]	; (80110e8 <UART_SetConfig+0x698>)
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d176      	bne.n	8010eac <UART_SetConfig+0x45c>
 8010dbe:	4bcb      	ldr	r3, [pc, #812]	; (80110ec <UART_SetConfig+0x69c>)
 8010dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dc6:	2b28      	cmp	r3, #40	; 0x28
 8010dc8:	d86c      	bhi.n	8010ea4 <UART_SetConfig+0x454>
 8010dca:	a201      	add	r2, pc, #4	; (adr r2, 8010dd0 <UART_SetConfig+0x380>)
 8010dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd0:	08010e75 	.word	0x08010e75
 8010dd4:	08010ea5 	.word	0x08010ea5
 8010dd8:	08010ea5 	.word	0x08010ea5
 8010ddc:	08010ea5 	.word	0x08010ea5
 8010de0:	08010ea5 	.word	0x08010ea5
 8010de4:	08010ea5 	.word	0x08010ea5
 8010de8:	08010ea5 	.word	0x08010ea5
 8010dec:	08010ea5 	.word	0x08010ea5
 8010df0:	08010e7d 	.word	0x08010e7d
 8010df4:	08010ea5 	.word	0x08010ea5
 8010df8:	08010ea5 	.word	0x08010ea5
 8010dfc:	08010ea5 	.word	0x08010ea5
 8010e00:	08010ea5 	.word	0x08010ea5
 8010e04:	08010ea5 	.word	0x08010ea5
 8010e08:	08010ea5 	.word	0x08010ea5
 8010e0c:	08010ea5 	.word	0x08010ea5
 8010e10:	08010e85 	.word	0x08010e85
 8010e14:	08010ea5 	.word	0x08010ea5
 8010e18:	08010ea5 	.word	0x08010ea5
 8010e1c:	08010ea5 	.word	0x08010ea5
 8010e20:	08010ea5 	.word	0x08010ea5
 8010e24:	08010ea5 	.word	0x08010ea5
 8010e28:	08010ea5 	.word	0x08010ea5
 8010e2c:	08010ea5 	.word	0x08010ea5
 8010e30:	08010e8d 	.word	0x08010e8d
 8010e34:	08010ea5 	.word	0x08010ea5
 8010e38:	08010ea5 	.word	0x08010ea5
 8010e3c:	08010ea5 	.word	0x08010ea5
 8010e40:	08010ea5 	.word	0x08010ea5
 8010e44:	08010ea5 	.word	0x08010ea5
 8010e48:	08010ea5 	.word	0x08010ea5
 8010e4c:	08010ea5 	.word	0x08010ea5
 8010e50:	08010e95 	.word	0x08010e95
 8010e54:	08010ea5 	.word	0x08010ea5
 8010e58:	08010ea5 	.word	0x08010ea5
 8010e5c:	08010ea5 	.word	0x08010ea5
 8010e60:	08010ea5 	.word	0x08010ea5
 8010e64:	08010ea5 	.word	0x08010ea5
 8010e68:	08010ea5 	.word	0x08010ea5
 8010e6c:	08010ea5 	.word	0x08010ea5
 8010e70:	08010e9d 	.word	0x08010e9d
 8010e74:	2301      	movs	r3, #1
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e0bc      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010e7c:	2304      	movs	r3, #4
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e0b8      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010e84:	2308      	movs	r3, #8
 8010e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8a:	e0b4      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010e8c:	2310      	movs	r3, #16
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e0b0      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010e94:	2320      	movs	r3, #32
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e0ac      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010e9c:	2340      	movs	r3, #64	; 0x40
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea2:	e0a8      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ea4:	2380      	movs	r3, #128	; 0x80
 8010ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eaa:	e0a4      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	4a8f      	ldr	r2, [pc, #572]	; (80110f0 <UART_SetConfig+0x6a0>)
 8010eb2:	4293      	cmp	r3, r2
 8010eb4:	d130      	bne.n	8010f18 <UART_SetConfig+0x4c8>
 8010eb6:	4b8d      	ldr	r3, [pc, #564]	; (80110ec <UART_SetConfig+0x69c>)
 8010eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010eba:	f003 0307 	and.w	r3, r3, #7
 8010ebe:	2b05      	cmp	r3, #5
 8010ec0:	d826      	bhi.n	8010f10 <UART_SetConfig+0x4c0>
 8010ec2:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <UART_SetConfig+0x478>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010ee1 	.word	0x08010ee1
 8010ecc:	08010ee9 	.word	0x08010ee9
 8010ed0:	08010ef1 	.word	0x08010ef1
 8010ed4:	08010ef9 	.word	0x08010ef9
 8010ed8:	08010f01 	.word	0x08010f01
 8010edc:	08010f09 	.word	0x08010f09
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e086      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ee8:	2304      	movs	r3, #4
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e082      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ef0:	2308      	movs	r3, #8
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef6:	e07e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ef8:	2310      	movs	r3, #16
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e07a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f00:	2320      	movs	r3, #32
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f06:	e076      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f08:	2340      	movs	r3, #64	; 0x40
 8010f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0e:	e072      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f10:	2380      	movs	r3, #128	; 0x80
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f16:	e06e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4a75      	ldr	r2, [pc, #468]	; (80110f4 <UART_SetConfig+0x6a4>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d130      	bne.n	8010f84 <UART_SetConfig+0x534>
 8010f22:	4b72      	ldr	r3, [pc, #456]	; (80110ec <UART_SetConfig+0x69c>)
 8010f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f26:	f003 0307 	and.w	r3, r3, #7
 8010f2a:	2b05      	cmp	r3, #5
 8010f2c:	d826      	bhi.n	8010f7c <UART_SetConfig+0x52c>
 8010f2e:	a201      	add	r2, pc, #4	; (adr r2, 8010f34 <UART_SetConfig+0x4e4>)
 8010f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f34:	08010f4d 	.word	0x08010f4d
 8010f38:	08010f55 	.word	0x08010f55
 8010f3c:	08010f5d 	.word	0x08010f5d
 8010f40:	08010f65 	.word	0x08010f65
 8010f44:	08010f6d 	.word	0x08010f6d
 8010f48:	08010f75 	.word	0x08010f75
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f52:	e050      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f54:	2304      	movs	r3, #4
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5a:	e04c      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f5c:	2308      	movs	r3, #8
 8010f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f62:	e048      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f64:	2310      	movs	r3, #16
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e044      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f6c:	2320      	movs	r3, #32
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e040      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f74:	2340      	movs	r3, #64	; 0x40
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e03c      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f7c:	2380      	movs	r3, #128	; 0x80
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e038      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4a5b      	ldr	r2, [pc, #364]	; (80110f8 <UART_SetConfig+0x6a8>)
 8010f8a:	4293      	cmp	r3, r2
 8010f8c:	d130      	bne.n	8010ff0 <UART_SetConfig+0x5a0>
 8010f8e:	4b57      	ldr	r3, [pc, #348]	; (80110ec <UART_SetConfig+0x69c>)
 8010f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f92:	f003 0307 	and.w	r3, r3, #7
 8010f96:	2b05      	cmp	r3, #5
 8010f98:	d826      	bhi.n	8010fe8 <UART_SetConfig+0x598>
 8010f9a:	a201      	add	r2, pc, #4	; (adr r2, 8010fa0 <UART_SetConfig+0x550>)
 8010f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa0:	08010fb9 	.word	0x08010fb9
 8010fa4:	08010fc1 	.word	0x08010fc1
 8010fa8:	08010fc9 	.word	0x08010fc9
 8010fac:	08010fd1 	.word	0x08010fd1
 8010fb0:	08010fd9 	.word	0x08010fd9
 8010fb4:	08010fe1 	.word	0x08010fe1
 8010fb8:	2302      	movs	r3, #2
 8010fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fbe:	e01a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fc0:	2304      	movs	r3, #4
 8010fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fc6:	e016      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fc8:	2308      	movs	r3, #8
 8010fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fce:	e012      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fd0:	2310      	movs	r3, #16
 8010fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fd6:	e00e      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fd8:	2320      	movs	r3, #32
 8010fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fde:	e00a      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fe0:	2340      	movs	r3, #64	; 0x40
 8010fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fe6:	e006      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010fe8:	2380      	movs	r3, #128	; 0x80
 8010fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010fee:	e002      	b.n	8010ff6 <UART_SetConfig+0x5a6>
 8010ff0:	2380      	movs	r3, #128	; 0x80
 8010ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	4a3f      	ldr	r2, [pc, #252]	; (80110f8 <UART_SetConfig+0x6a8>)
 8010ffc:	4293      	cmp	r3, r2
 8010ffe:	f040 80f8 	bne.w	80111f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011002:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011006:	2b20      	cmp	r3, #32
 8011008:	dc46      	bgt.n	8011098 <UART_SetConfig+0x648>
 801100a:	2b02      	cmp	r3, #2
 801100c:	f2c0 8082 	blt.w	8011114 <UART_SetConfig+0x6c4>
 8011010:	3b02      	subs	r3, #2
 8011012:	2b1e      	cmp	r3, #30
 8011014:	d87e      	bhi.n	8011114 <UART_SetConfig+0x6c4>
 8011016:	a201      	add	r2, pc, #4	; (adr r2, 801101c <UART_SetConfig+0x5cc>)
 8011018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801101c:	0801109f 	.word	0x0801109f
 8011020:	08011115 	.word	0x08011115
 8011024:	080110a7 	.word	0x080110a7
 8011028:	08011115 	.word	0x08011115
 801102c:	08011115 	.word	0x08011115
 8011030:	08011115 	.word	0x08011115
 8011034:	080110b7 	.word	0x080110b7
 8011038:	08011115 	.word	0x08011115
 801103c:	08011115 	.word	0x08011115
 8011040:	08011115 	.word	0x08011115
 8011044:	08011115 	.word	0x08011115
 8011048:	08011115 	.word	0x08011115
 801104c:	08011115 	.word	0x08011115
 8011050:	08011115 	.word	0x08011115
 8011054:	080110c7 	.word	0x080110c7
 8011058:	08011115 	.word	0x08011115
 801105c:	08011115 	.word	0x08011115
 8011060:	08011115 	.word	0x08011115
 8011064:	08011115 	.word	0x08011115
 8011068:	08011115 	.word	0x08011115
 801106c:	08011115 	.word	0x08011115
 8011070:	08011115 	.word	0x08011115
 8011074:	08011115 	.word	0x08011115
 8011078:	08011115 	.word	0x08011115
 801107c:	08011115 	.word	0x08011115
 8011080:	08011115 	.word	0x08011115
 8011084:	08011115 	.word	0x08011115
 8011088:	08011115 	.word	0x08011115
 801108c:	08011115 	.word	0x08011115
 8011090:	08011115 	.word	0x08011115
 8011094:	08011107 	.word	0x08011107
 8011098:	2b40      	cmp	r3, #64	; 0x40
 801109a:	d037      	beq.n	801110c <UART_SetConfig+0x6bc>
 801109c:	e03a      	b.n	8011114 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801109e:	f7fb fd9b 	bl	800cbd8 <HAL_RCCEx_GetD3PCLK1Freq>
 80110a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80110a4:	e03c      	b.n	8011120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80110a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fb fdaa 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80110b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110b4:	e034      	b.n	8011120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110b6:	f107 0318 	add.w	r3, r7, #24
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fb fef6 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80110c4:	e02c      	b.n	8011120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110c6:	4b09      	ldr	r3, [pc, #36]	; (80110ec <UART_SetConfig+0x69c>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f003 0320 	and.w	r3, r3, #32
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d016      	beq.n	8011100 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110d2:	4b06      	ldr	r3, [pc, #24]	; (80110ec <UART_SetConfig+0x69c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	08db      	lsrs	r3, r3, #3
 80110d8:	f003 0303 	and.w	r3, r3, #3
 80110dc:	4a07      	ldr	r2, [pc, #28]	; (80110fc <UART_SetConfig+0x6ac>)
 80110de:	fa22 f303 	lsr.w	r3, r2, r3
 80110e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110e4:	e01c      	b.n	8011120 <UART_SetConfig+0x6d0>
 80110e6:	bf00      	nop
 80110e8:	40011400 	.word	0x40011400
 80110ec:	58024400 	.word	0x58024400
 80110f0:	40007800 	.word	0x40007800
 80110f4:	40007c00 	.word	0x40007c00
 80110f8:	58000c00 	.word	0x58000c00
 80110fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011100:	4b9d      	ldr	r3, [pc, #628]	; (8011378 <UART_SetConfig+0x928>)
 8011102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011104:	e00c      	b.n	8011120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011106:	4b9d      	ldr	r3, [pc, #628]	; (801137c <UART_SetConfig+0x92c>)
 8011108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801110a:	e009      	b.n	8011120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801110c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011112:	e005      	b.n	8011120 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011114:	2300      	movs	r3, #0
 8011116:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011118:	2301      	movs	r3, #1
 801111a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801111e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011122:	2b00      	cmp	r3, #0
 8011124:	f000 81de 	beq.w	80114e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112c:	4a94      	ldr	r2, [pc, #592]	; (8011380 <UART_SetConfig+0x930>)
 801112e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011132:	461a      	mov	r2, r3
 8011134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011136:	fbb3 f3f2 	udiv	r3, r3, r2
 801113a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	685a      	ldr	r2, [r3, #4]
 8011140:	4613      	mov	r3, r2
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	4413      	add	r3, r2
 8011146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011148:	429a      	cmp	r2, r3
 801114a:	d305      	bcc.n	8011158 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011154:	429a      	cmp	r2, r3
 8011156:	d903      	bls.n	8011160 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011158:	2301      	movs	r3, #1
 801115a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801115e:	e1c1      	b.n	80114e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011162:	2200      	movs	r2, #0
 8011164:	60bb      	str	r3, [r7, #8]
 8011166:	60fa      	str	r2, [r7, #12]
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116c:	4a84      	ldr	r2, [pc, #528]	; (8011380 <UART_SetConfig+0x930>)
 801116e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011172:	b29b      	uxth	r3, r3
 8011174:	2200      	movs	r2, #0
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	607a      	str	r2, [r7, #4]
 801117a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801117e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011182:	f7ef f8ad 	bl	80002e0 <__aeabi_uldivmod>
 8011186:	4602      	mov	r2, r0
 8011188:	460b      	mov	r3, r1
 801118a:	4610      	mov	r0, r2
 801118c:	4619      	mov	r1, r3
 801118e:	f04f 0200 	mov.w	r2, #0
 8011192:	f04f 0300 	mov.w	r3, #0
 8011196:	020b      	lsls	r3, r1, #8
 8011198:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801119c:	0202      	lsls	r2, r0, #8
 801119e:	6979      	ldr	r1, [r7, #20]
 80111a0:	6849      	ldr	r1, [r1, #4]
 80111a2:	0849      	lsrs	r1, r1, #1
 80111a4:	2000      	movs	r0, #0
 80111a6:	460c      	mov	r4, r1
 80111a8:	4605      	mov	r5, r0
 80111aa:	eb12 0804 	adds.w	r8, r2, r4
 80111ae:	eb43 0905 	adc.w	r9, r3, r5
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	2200      	movs	r2, #0
 80111b8:	469a      	mov	sl, r3
 80111ba:	4693      	mov	fp, r2
 80111bc:	4652      	mov	r2, sl
 80111be:	465b      	mov	r3, fp
 80111c0:	4640      	mov	r0, r8
 80111c2:	4649      	mov	r1, r9
 80111c4:	f7ef f88c 	bl	80002e0 <__aeabi_uldivmod>
 80111c8:	4602      	mov	r2, r0
 80111ca:	460b      	mov	r3, r1
 80111cc:	4613      	mov	r3, r2
 80111ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80111d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80111d6:	d308      	bcc.n	80111ea <UART_SetConfig+0x79a>
 80111d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111de:	d204      	bcs.n	80111ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111e6:	60da      	str	r2, [r3, #12]
 80111e8:	e17c      	b.n	80114e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80111ea:	2301      	movs	r3, #1
 80111ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80111f0:	e178      	b.n	80114e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	69db      	ldr	r3, [r3, #28]
 80111f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80111fa:	f040 80c5 	bne.w	8011388 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80111fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011202:	2b20      	cmp	r3, #32
 8011204:	dc48      	bgt.n	8011298 <UART_SetConfig+0x848>
 8011206:	2b00      	cmp	r3, #0
 8011208:	db7b      	blt.n	8011302 <UART_SetConfig+0x8b2>
 801120a:	2b20      	cmp	r3, #32
 801120c:	d879      	bhi.n	8011302 <UART_SetConfig+0x8b2>
 801120e:	a201      	add	r2, pc, #4	; (adr r2, 8011214 <UART_SetConfig+0x7c4>)
 8011210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011214:	0801129f 	.word	0x0801129f
 8011218:	080112a7 	.word	0x080112a7
 801121c:	08011303 	.word	0x08011303
 8011220:	08011303 	.word	0x08011303
 8011224:	080112af 	.word	0x080112af
 8011228:	08011303 	.word	0x08011303
 801122c:	08011303 	.word	0x08011303
 8011230:	08011303 	.word	0x08011303
 8011234:	080112bf 	.word	0x080112bf
 8011238:	08011303 	.word	0x08011303
 801123c:	08011303 	.word	0x08011303
 8011240:	08011303 	.word	0x08011303
 8011244:	08011303 	.word	0x08011303
 8011248:	08011303 	.word	0x08011303
 801124c:	08011303 	.word	0x08011303
 8011250:	08011303 	.word	0x08011303
 8011254:	080112cf 	.word	0x080112cf
 8011258:	08011303 	.word	0x08011303
 801125c:	08011303 	.word	0x08011303
 8011260:	08011303 	.word	0x08011303
 8011264:	08011303 	.word	0x08011303
 8011268:	08011303 	.word	0x08011303
 801126c:	08011303 	.word	0x08011303
 8011270:	08011303 	.word	0x08011303
 8011274:	08011303 	.word	0x08011303
 8011278:	08011303 	.word	0x08011303
 801127c:	08011303 	.word	0x08011303
 8011280:	08011303 	.word	0x08011303
 8011284:	08011303 	.word	0x08011303
 8011288:	08011303 	.word	0x08011303
 801128c:	08011303 	.word	0x08011303
 8011290:	08011303 	.word	0x08011303
 8011294:	080112f5 	.word	0x080112f5
 8011298:	2b40      	cmp	r3, #64	; 0x40
 801129a:	d02e      	beq.n	80112fa <UART_SetConfig+0x8aa>
 801129c:	e031      	b.n	8011302 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801129e:	f7f9 fca3 	bl	800abe8 <HAL_RCC_GetPCLK1Freq>
 80112a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112a4:	e033      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80112a6:	f7f9 fcb5 	bl	800ac14 <HAL_RCC_GetPCLK2Freq>
 80112aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112ac:	e02f      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7fb fca6 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112bc:	e027      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112be:	f107 0318 	add.w	r3, r7, #24
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fb fdf2 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112cc:	e01f      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112ce:	4b2d      	ldr	r3, [pc, #180]	; (8011384 <UART_SetConfig+0x934>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f003 0320 	and.w	r3, r3, #32
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d009      	beq.n	80112ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112da:	4b2a      	ldr	r3, [pc, #168]	; (8011384 <UART_SetConfig+0x934>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	08db      	lsrs	r3, r3, #3
 80112e0:	f003 0303 	and.w	r3, r3, #3
 80112e4:	4a24      	ldr	r2, [pc, #144]	; (8011378 <UART_SetConfig+0x928>)
 80112e6:	fa22 f303 	lsr.w	r3, r2, r3
 80112ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80112ec:	e00f      	b.n	801130e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80112ee:	4b22      	ldr	r3, [pc, #136]	; (8011378 <UART_SetConfig+0x928>)
 80112f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112f2:	e00c      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80112f4:	4b21      	ldr	r3, [pc, #132]	; (801137c <UART_SetConfig+0x92c>)
 80112f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112f8:	e009      	b.n	801130e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011300:	e005      	b.n	801130e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011302:	2300      	movs	r3, #0
 8011304:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011306:	2301      	movs	r3, #1
 8011308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801130c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011310:	2b00      	cmp	r3, #0
 8011312:	f000 80e7 	beq.w	80114e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131a:	4a19      	ldr	r2, [pc, #100]	; (8011380 <UART_SetConfig+0x930>)
 801131c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011320:	461a      	mov	r2, r3
 8011322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011324:	fbb3 f3f2 	udiv	r3, r3, r2
 8011328:	005a      	lsls	r2, r3, #1
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	085b      	lsrs	r3, r3, #1
 8011330:	441a      	add	r2, r3
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	fbb2 f3f3 	udiv	r3, r2, r3
 801133a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801133c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133e:	2b0f      	cmp	r3, #15
 8011340:	d916      	bls.n	8011370 <UART_SetConfig+0x920>
 8011342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011348:	d212      	bcs.n	8011370 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	b29b      	uxth	r3, r3
 801134e:	f023 030f 	bic.w	r3, r3, #15
 8011352:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011356:	085b      	lsrs	r3, r3, #1
 8011358:	b29b      	uxth	r3, r3
 801135a:	f003 0307 	and.w	r3, r3, #7
 801135e:	b29a      	uxth	r2, r3
 8011360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011362:	4313      	orrs	r3, r2
 8011364:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801136c:	60da      	str	r2, [r3, #12]
 801136e:	e0b9      	b.n	80114e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011370:	2301      	movs	r3, #1
 8011372:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011376:	e0b5      	b.n	80114e4 <UART_SetConfig+0xa94>
 8011378:	03d09000 	.word	0x03d09000
 801137c:	003d0900 	.word	0x003d0900
 8011380:	080172cc 	.word	0x080172cc
 8011384:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801138c:	2b20      	cmp	r3, #32
 801138e:	dc49      	bgt.n	8011424 <UART_SetConfig+0x9d4>
 8011390:	2b00      	cmp	r3, #0
 8011392:	db7c      	blt.n	801148e <UART_SetConfig+0xa3e>
 8011394:	2b20      	cmp	r3, #32
 8011396:	d87a      	bhi.n	801148e <UART_SetConfig+0xa3e>
 8011398:	a201      	add	r2, pc, #4	; (adr r2, 80113a0 <UART_SetConfig+0x950>)
 801139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801139e:	bf00      	nop
 80113a0:	0801142b 	.word	0x0801142b
 80113a4:	08011433 	.word	0x08011433
 80113a8:	0801148f 	.word	0x0801148f
 80113ac:	0801148f 	.word	0x0801148f
 80113b0:	0801143b 	.word	0x0801143b
 80113b4:	0801148f 	.word	0x0801148f
 80113b8:	0801148f 	.word	0x0801148f
 80113bc:	0801148f 	.word	0x0801148f
 80113c0:	0801144b 	.word	0x0801144b
 80113c4:	0801148f 	.word	0x0801148f
 80113c8:	0801148f 	.word	0x0801148f
 80113cc:	0801148f 	.word	0x0801148f
 80113d0:	0801148f 	.word	0x0801148f
 80113d4:	0801148f 	.word	0x0801148f
 80113d8:	0801148f 	.word	0x0801148f
 80113dc:	0801148f 	.word	0x0801148f
 80113e0:	0801145b 	.word	0x0801145b
 80113e4:	0801148f 	.word	0x0801148f
 80113e8:	0801148f 	.word	0x0801148f
 80113ec:	0801148f 	.word	0x0801148f
 80113f0:	0801148f 	.word	0x0801148f
 80113f4:	0801148f 	.word	0x0801148f
 80113f8:	0801148f 	.word	0x0801148f
 80113fc:	0801148f 	.word	0x0801148f
 8011400:	0801148f 	.word	0x0801148f
 8011404:	0801148f 	.word	0x0801148f
 8011408:	0801148f 	.word	0x0801148f
 801140c:	0801148f 	.word	0x0801148f
 8011410:	0801148f 	.word	0x0801148f
 8011414:	0801148f 	.word	0x0801148f
 8011418:	0801148f 	.word	0x0801148f
 801141c:	0801148f 	.word	0x0801148f
 8011420:	08011481 	.word	0x08011481
 8011424:	2b40      	cmp	r3, #64	; 0x40
 8011426:	d02e      	beq.n	8011486 <UART_SetConfig+0xa36>
 8011428:	e031      	b.n	801148e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801142a:	f7f9 fbdd 	bl	800abe8 <HAL_RCC_GetPCLK1Freq>
 801142e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011430:	e033      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011432:	f7f9 fbef 	bl	800ac14 <HAL_RCC_GetPCLK2Freq>
 8011436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011438:	e02f      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801143e:	4618      	mov	r0, r3
 8011440:	f7fb fbe0 	bl	800cc04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011448:	e027      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801144a:	f107 0318 	add.w	r3, r7, #24
 801144e:	4618      	mov	r0, r3
 8011450:	f7fb fd2c 	bl	800ceac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011458:	e01f      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801145a:	4b2d      	ldr	r3, [pc, #180]	; (8011510 <UART_SetConfig+0xac0>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0320 	and.w	r3, r3, #32
 8011462:	2b00      	cmp	r3, #0
 8011464:	d009      	beq.n	801147a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011466:	4b2a      	ldr	r3, [pc, #168]	; (8011510 <UART_SetConfig+0xac0>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	08db      	lsrs	r3, r3, #3
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	4a28      	ldr	r2, [pc, #160]	; (8011514 <UART_SetConfig+0xac4>)
 8011472:	fa22 f303 	lsr.w	r3, r2, r3
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011478:	e00f      	b.n	801149a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801147a:	4b26      	ldr	r3, [pc, #152]	; (8011514 <UART_SetConfig+0xac4>)
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801147e:	e00c      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011480:	4b25      	ldr	r3, [pc, #148]	; (8011518 <UART_SetConfig+0xac8>)
 8011482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011484:	e009      	b.n	801149a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148c:	e005      	b.n	801149a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801148e:	2300      	movs	r3, #0
 8011490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011492:	2301      	movs	r3, #1
 8011494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011498:	bf00      	nop
    }

    if (pclk != 0U)
 801149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149c:	2b00      	cmp	r3, #0
 801149e:	d021      	beq.n	80114e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	4a1d      	ldr	r2, [pc, #116]	; (801151c <UART_SetConfig+0xacc>)
 80114a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114aa:	461a      	mov	r2, r3
 80114ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	085b      	lsrs	r3, r3, #1
 80114b8:	441a      	add	r2, r3
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	fbb2 f3f3 	udiv	r3, r2, r3
 80114c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80114c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c6:	2b0f      	cmp	r3, #15
 80114c8:	d909      	bls.n	80114de <UART_SetConfig+0xa8e>
 80114ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114d0:	d205      	bcs.n	80114de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	60da      	str	r2, [r3, #12]
 80114dc:	e002      	b.n	80114e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80114de:	2301      	movs	r3, #1
 80114e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	2201      	movs	r2, #1
 80114e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	2201      	movs	r2, #1
 80114f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	2200      	movs	r2, #0
 80114f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	2200      	movs	r2, #0
 80114fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011500:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011504:	4618      	mov	r0, r3
 8011506:	3748      	adds	r7, #72	; 0x48
 8011508:	46bd      	mov	sp, r7
 801150a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801150e:	bf00      	nop
 8011510:	58024400 	.word	0x58024400
 8011514:	03d09000 	.word	0x03d09000
 8011518:	003d0900 	.word	0x003d0900
 801151c:	080172cc 	.word	0x080172cc

08011520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801152c:	f003 0308 	and.w	r3, r3, #8
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00a      	beq.n	801154a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	430a      	orrs	r2, r1
 8011548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154e:	f003 0301 	and.w	r3, r3, #1
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00a      	beq.n	801156c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	430a      	orrs	r2, r1
 801156a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011570:	f003 0302 	and.w	r3, r3, #2
 8011574:	2b00      	cmp	r3, #0
 8011576:	d00a      	beq.n	801158e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	430a      	orrs	r2, r1
 801158c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	d00a      	beq.n	80115b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	685b      	ldr	r3, [r3, #4]
 80115a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	430a      	orrs	r2, r1
 80115ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115b4:	f003 0310 	and.w	r3, r3, #16
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00a      	beq.n	80115d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	430a      	orrs	r2, r1
 80115d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115d6:	f003 0320 	and.w	r3, r3, #32
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00a      	beq.n	80115f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	430a      	orrs	r2, r1
 80115f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d01a      	beq.n	8011636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	430a      	orrs	r2, r1
 8011614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801161a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801161e:	d10a      	bne.n	8011636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	430a      	orrs	r2, r1
 8011634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801163e:	2b00      	cmp	r3, #0
 8011640:	d00a      	beq.n	8011658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	685b      	ldr	r3, [r3, #4]
 8011648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	430a      	orrs	r2, r1
 8011656:	605a      	str	r2, [r3, #4]
  }
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b098      	sub	sp, #96	; 0x60
 8011668:	af02      	add	r7, sp, #8
 801166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011674:	f7f2 fb36 	bl	8003ce4 <HAL_GetTick>
 8011678:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f003 0308 	and.w	r3, r3, #8
 8011684:	2b08      	cmp	r3, #8
 8011686:	d12f      	bne.n	80116e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801168c:	9300      	str	r3, [sp, #0]
 801168e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011690:	2200      	movs	r2, #0
 8011692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f000 f88e 	bl	80117b8 <UART_WaitOnFlagUntilTimeout>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d022      	beq.n	80116e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	e853 3f00 	ldrex	r3, [r3]
 80116ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80116b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80116b6:	653b      	str	r3, [r7, #80]	; 0x50
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	461a      	mov	r2, r3
 80116be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116c0:	647b      	str	r3, [r7, #68]	; 0x44
 80116c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80116c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116c8:	e841 2300 	strex	r3, r2, [r1]
 80116cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80116ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1e6      	bne.n	80116a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2220      	movs	r2, #32
 80116d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2200      	movs	r2, #0
 80116e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116e4:	2303      	movs	r3, #3
 80116e6:	e063      	b.n	80117b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0304 	and.w	r3, r3, #4
 80116f2:	2b04      	cmp	r3, #4
 80116f4:	d149      	bne.n	801178a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80116fa:	9300      	str	r3, [sp, #0]
 80116fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116fe:	2200      	movs	r2, #0
 8011700:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f857 	bl	80117b8 <UART_WaitOnFlagUntilTimeout>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	d03c      	beq.n	801178a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011718:	e853 3f00 	ldrex	r3, [r3]
 801171c:	623b      	str	r3, [r7, #32]
   return(result);
 801171e:	6a3b      	ldr	r3, [r7, #32]
 8011720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801172e:	633b      	str	r3, [r7, #48]	; 0x30
 8011730:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011736:	e841 2300 	strex	r3, r2, [r1]
 801173a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1e6      	bne.n	8011710 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3308      	adds	r3, #8
 8011748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801174a:	693b      	ldr	r3, [r7, #16]
 801174c:	e853 3f00 	ldrex	r3, [r3]
 8011750:	60fb      	str	r3, [r7, #12]
   return(result);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f023 0301 	bic.w	r3, r3, #1
 8011758:	64bb      	str	r3, [r7, #72]	; 0x48
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	3308      	adds	r3, #8
 8011760:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011762:	61fa      	str	r2, [r7, #28]
 8011764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011766:	69b9      	ldr	r1, [r7, #24]
 8011768:	69fa      	ldr	r2, [r7, #28]
 801176a:	e841 2300 	strex	r3, r2, [r1]
 801176e:	617b      	str	r3, [r7, #20]
   return(result);
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1e5      	bne.n	8011742 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2220      	movs	r2, #32
 801177a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011786:	2303      	movs	r3, #3
 8011788:	e012      	b.n	80117b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2220      	movs	r2, #32
 801178e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2220      	movs	r2, #32
 8011796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	2200      	movs	r2, #0
 80117a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2200      	movs	r2, #0
 80117aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3758      	adds	r7, #88	; 0x58
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	603b      	str	r3, [r7, #0]
 80117c4:	4613      	mov	r3, r2
 80117c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117c8:	e04f      	b.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117d0:	d04b      	beq.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117d2:	f7f2 fa87 	bl	8003ce4 <HAL_GetTick>
 80117d6:	4602      	mov	r2, r0
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	69ba      	ldr	r2, [r7, #24]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d302      	bcc.n	80117e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d101      	bne.n	80117ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80117e8:	2303      	movs	r3, #3
 80117ea:	e04e      	b.n	801188a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f003 0304 	and.w	r3, r3, #4
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d037      	beq.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b80      	cmp	r3, #128	; 0x80
 80117fe:	d034      	beq.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	2b40      	cmp	r3, #64	; 0x40
 8011804:	d031      	beq.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	69db      	ldr	r3, [r3, #28]
 801180c:	f003 0308 	and.w	r3, r3, #8
 8011810:	2b08      	cmp	r3, #8
 8011812:	d110      	bne.n	8011836 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2208      	movs	r2, #8
 801181a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f000 f99d 	bl	8011b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	2208      	movs	r2, #8
 8011826:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2200      	movs	r2, #0
 801182e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011832:	2301      	movs	r3, #1
 8011834:	e029      	b.n	801188a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	69db      	ldr	r3, [r3, #28]
 801183c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011844:	d111      	bne.n	801186a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801184e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f000 f983 	bl	8011b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2220      	movs	r2, #32
 801185a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	2200      	movs	r2, #0
 8011862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011866:	2303      	movs	r3, #3
 8011868:	e00f      	b.n	801188a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69da      	ldr	r2, [r3, #28]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	4013      	ands	r3, r2
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	429a      	cmp	r2, r3
 8011878:	bf0c      	ite	eq
 801187a:	2301      	moveq	r3, #1
 801187c:	2300      	movne	r3, #0
 801187e:	b2db      	uxtb	r3, r3
 8011880:	461a      	mov	r2, r3
 8011882:	79fb      	ldrb	r3, [r7, #7]
 8011884:	429a      	cmp	r2, r3
 8011886:	d0a0      	beq.n	80117ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011888:	2300      	movs	r3, #0
}
 801188a:	4618      	mov	r0, r3
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}
	...

08011894 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011894:	b480      	push	{r7}
 8011896:	b0a3      	sub	sp, #140	; 0x8c
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	4613      	mov	r3, r2
 80118a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	88fa      	ldrh	r2, [r7, #6]
 80118ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	88fa      	ldrh	r2, [r7, #6]
 80118b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2200      	movs	r2, #0
 80118bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118c6:	d10e      	bne.n	80118e6 <UART_Start_Receive_IT+0x52>
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	691b      	ldr	r3, [r3, #16]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d105      	bne.n	80118dc <UART_Start_Receive_IT+0x48>
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80118d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80118da:	e02d      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	22ff      	movs	r2, #255	; 0xff
 80118e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80118e4:	e028      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d10d      	bne.n	801190a <UART_Start_Receive_IT+0x76>
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	691b      	ldr	r3, [r3, #16]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d104      	bne.n	8011900 <UART_Start_Receive_IT+0x6c>
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	22ff      	movs	r2, #255	; 0xff
 80118fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80118fe:	e01b      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	227f      	movs	r2, #127	; 0x7f
 8011904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011908:	e016      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	689b      	ldr	r3, [r3, #8]
 801190e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011912:	d10d      	bne.n	8011930 <UART_Start_Receive_IT+0x9c>
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	691b      	ldr	r3, [r3, #16]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d104      	bne.n	8011926 <UART_Start_Receive_IT+0x92>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	227f      	movs	r2, #127	; 0x7f
 8011920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011924:	e008      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	223f      	movs	r2, #63	; 0x3f
 801192a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801192e:	e003      	b.n	8011938 <UART_Start_Receive_IT+0xa4>
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2200      	movs	r2, #0
 8011934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2200      	movs	r2, #0
 801193c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2222      	movs	r2, #34	; 0x22
 8011944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	3308      	adds	r3, #8
 801194e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011952:	e853 3f00 	ldrex	r3, [r3]
 8011956:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801195a:	f043 0301 	orr.w	r3, r3, #1
 801195e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	3308      	adds	r3, #8
 8011968:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801196c:	673a      	str	r2, [r7, #112]	; 0x70
 801196e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011970:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011972:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011974:	e841 2300 	strex	r3, r2, [r1]
 8011978:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801197a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801197c:	2b00      	cmp	r3, #0
 801197e:	d1e3      	bne.n	8011948 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011988:	d14f      	bne.n	8011a2a <UART_Start_Receive_IT+0x196>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011990:	88fa      	ldrh	r2, [r7, #6]
 8011992:	429a      	cmp	r2, r3
 8011994:	d349      	bcc.n	8011a2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801199e:	d107      	bne.n	80119b0 <UART_Start_Receive_IT+0x11c>
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	691b      	ldr	r3, [r3, #16]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d103      	bne.n	80119b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	4a47      	ldr	r2, [pc, #284]	; (8011ac8 <UART_Start_Receive_IT+0x234>)
 80119ac:	675a      	str	r2, [r3, #116]	; 0x74
 80119ae:	e002      	b.n	80119b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	4a46      	ldr	r2, [pc, #280]	; (8011acc <UART_Start_Receive_IT+0x238>)
 80119b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	691b      	ldr	r3, [r3, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d01a      	beq.n	80119f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119c6:	e853 3f00 	ldrex	r3, [r3]
 80119ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80119cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	461a      	mov	r2, r3
 80119dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80119e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119e2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80119e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80119e8:	e841 2300 	strex	r3, r2, [r1]
 80119ec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80119ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1e4      	bne.n	80119be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	3308      	adds	r3, #8
 80119fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fe:	e853 3f00 	ldrex	r3, [r3]
 8011a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	3308      	adds	r3, #8
 8011a12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011a14:	64ba      	str	r2, [r7, #72]	; 0x48
 8011a16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a1c:	e841 2300 	strex	r3, r2, [r1]
 8011a20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d1e5      	bne.n	80119f4 <UART_Start_Receive_IT+0x160>
 8011a28:	e046      	b.n	8011ab8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	689b      	ldr	r3, [r3, #8]
 8011a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a32:	d107      	bne.n	8011a44 <UART_Start_Receive_IT+0x1b0>
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	691b      	ldr	r3, [r3, #16]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d103      	bne.n	8011a44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	4a24      	ldr	r2, [pc, #144]	; (8011ad0 <UART_Start_Receive_IT+0x23c>)
 8011a40:	675a      	str	r2, [r3, #116]	; 0x74
 8011a42:	e002      	b.n	8011a4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	4a23      	ldr	r2, [pc, #140]	; (8011ad4 <UART_Start_Receive_IT+0x240>)
 8011a48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	691b      	ldr	r3, [r3, #16]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d019      	beq.n	8011a86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5a:	e853 3f00 	ldrex	r3, [r3]
 8011a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011a66:	677b      	str	r3, [r7, #116]	; 0x74
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a70:	637b      	str	r3, [r7, #52]	; 0x34
 8011a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a78:	e841 2300 	strex	r3, r2, [r1]
 8011a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d1e6      	bne.n	8011a52 <UART_Start_Receive_IT+0x1be>
 8011a84:	e018      	b.n	8011ab8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	e853 3f00 	ldrex	r3, [r3]
 8011a92:	613b      	str	r3, [r7, #16]
   return(result);
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	f043 0320 	orr.w	r3, r3, #32
 8011a9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011aa4:	623b      	str	r3, [r7, #32]
 8011aa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa8:	69f9      	ldr	r1, [r7, #28]
 8011aaa:	6a3a      	ldr	r2, [r7, #32]
 8011aac:	e841 2300 	strex	r3, r2, [r1]
 8011ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ab2:	69bb      	ldr	r3, [r7, #24]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1e6      	bne.n	8011a86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011ab8:	2300      	movs	r3, #0
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	378c      	adds	r7, #140	; 0x8c
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	080124ad 	.word	0x080124ad
 8011acc:	0801214d 	.word	0x0801214d
 8011ad0:	08011f95 	.word	0x08011f95
 8011ad4:	08011ddd 	.word	0x08011ddd

08011ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b08f      	sub	sp, #60	; 0x3c
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae6:	6a3b      	ldr	r3, [r7, #32]
 8011ae8:	e853 3f00 	ldrex	r3, [r3]
 8011aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011af4:	637b      	str	r3, [r7, #52]	; 0x34
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b06:	e841 2300 	strex	r3, r2, [r1]
 8011b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d1e6      	bne.n	8011ae0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	3308      	adds	r3, #8
 8011b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	e853 3f00 	ldrex	r3, [r3]
 8011b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011b28:	633b      	str	r3, [r7, #48]	; 0x30
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	3308      	adds	r3, #8
 8011b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b32:	61ba      	str	r2, [r7, #24]
 8011b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b36:	6979      	ldr	r1, [r7, #20]
 8011b38:	69ba      	ldr	r2, [r7, #24]
 8011b3a:	e841 2300 	strex	r3, r2, [r1]
 8011b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1e5      	bne.n	8011b12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011b4e:	bf00      	nop
 8011b50:	373c      	adds	r7, #60	; 0x3c
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
	...

08011b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b095      	sub	sp, #84	; 0x54
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b6c:	e853 3f00 	ldrex	r3, [r3]
 8011b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	461a      	mov	r2, r3
 8011b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b82:	643b      	str	r3, [r7, #64]	; 0x40
 8011b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b8a:	e841 2300 	strex	r3, r2, [r1]
 8011b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d1e6      	bne.n	8011b64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	3308      	adds	r3, #8
 8011b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ba6:	69fa      	ldr	r2, [r7, #28]
 8011ba8:	4b1e      	ldr	r3, [pc, #120]	; (8011c24 <UART_EndRxTransfer+0xc8>)
 8011baa:	4013      	ands	r3, r2
 8011bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bbe:	e841 2300 	strex	r3, r2, [r1]
 8011bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1e5      	bne.n	8011b96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d118      	bne.n	8011c04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	e853 3f00 	ldrex	r3, [r3]
 8011bde:	60bb      	str	r3, [r7, #8]
   return(result);
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	f023 0310 	bic.w	r3, r3, #16
 8011be6:	647b      	str	r3, [r7, #68]	; 0x44
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	461a      	mov	r2, r3
 8011bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf4:	6979      	ldr	r1, [r7, #20]
 8011bf6:	69ba      	ldr	r2, [r7, #24]
 8011bf8:	e841 2300 	strex	r3, r2, [r1]
 8011bfc:	613b      	str	r3, [r7, #16]
   return(result);
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d1e6      	bne.n	8011bd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2220      	movs	r2, #32
 8011c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011c18:	bf00      	nop
 8011c1a:	3754      	adds	r7, #84	; 0x54
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr
 8011c24:	effffffe 	.word	0xeffffffe

08011c28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b090      	sub	sp, #64	; 0x40
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	69db      	ldr	r3, [r3, #28]
 8011c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c3e:	d037      	beq.n	8011cb0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c42:	2200      	movs	r2, #0
 8011c44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	3308      	adds	r3, #8
 8011c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c52:	e853 3f00 	ldrex	r3, [r3]
 8011c56:	623b      	str	r3, [r7, #32]
   return(result);
 8011c58:	6a3b      	ldr	r3, [r7, #32]
 8011c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3308      	adds	r3, #8
 8011c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c68:	633a      	str	r2, [r7, #48]	; 0x30
 8011c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c70:	e841 2300 	strex	r3, r2, [r1]
 8011c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d1e5      	bne.n	8011c48 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	e853 3f00 	ldrex	r3, [r3]
 8011c88:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c90:	637b      	str	r3, [r7, #52]	; 0x34
 8011c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	461a      	mov	r2, r3
 8011c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c9a:	61fb      	str	r3, [r7, #28]
 8011c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9e:	69b9      	ldr	r1, [r7, #24]
 8011ca0:	69fa      	ldr	r2, [r7, #28]
 8011ca2:	e841 2300 	strex	r3, r2, [r1]
 8011ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1e6      	bne.n	8011c7c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011cae:	e002      	b.n	8011cb6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011cb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cb2:	f7f0 f9cb 	bl	800204c <HAL_UART_TxCpltCallback>
}
 8011cb6:	bf00      	nop
 8011cb8:	3740      	adds	r7, #64	; 0x40
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f7fe fe9f 	bl	8010a10 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cd2:	bf00      	nop
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b086      	sub	sp, #24
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ce6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cf6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	689b      	ldr	r3, [r3, #8]
 8011cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d02:	2b80      	cmp	r3, #128	; 0x80
 8011d04:	d109      	bne.n	8011d1a <UART_DMAError+0x40>
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2b21      	cmp	r3, #33	; 0x21
 8011d0a:	d106      	bne.n	8011d1a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2200      	movs	r2, #0
 8011d10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011d14:	6978      	ldr	r0, [r7, #20]
 8011d16:	f7ff fedf 	bl	8011ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d24:	2b40      	cmp	r3, #64	; 0x40
 8011d26:	d109      	bne.n	8011d3c <UART_DMAError+0x62>
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2b22      	cmp	r3, #34	; 0x22
 8011d2c:	d106      	bne.n	8011d3c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	2200      	movs	r2, #0
 8011d32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011d36:	6978      	ldr	r0, [r7, #20]
 8011d38:	f7ff ff10 	bl	8011b5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d42:	f043 0210 	orr.w	r2, r3, #16
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d4c:	6978      	ldr	r0, [r7, #20]
 8011d4e:	f7fe fe69 	bl	8010a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d52:	bf00      	nop
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b084      	sub	sp, #16
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f7fe fe53 	bl	8010a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}

08011d86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011d86:	b580      	push	{r7, lr}
 8011d88:	b088      	sub	sp, #32
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	e853 3f00 	ldrex	r3, [r3]
 8011d9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011da2:	61fb      	str	r3, [r7, #28]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	461a      	mov	r2, r3
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	61bb      	str	r3, [r7, #24]
 8011dae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db0:	6979      	ldr	r1, [r7, #20]
 8011db2:	69ba      	ldr	r2, [r7, #24]
 8011db4:	e841 2300 	strex	r3, r2, [r1]
 8011db8:	613b      	str	r3, [r7, #16]
   return(result);
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d1e6      	bne.n	8011d8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2220      	movs	r2, #32
 8011dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7f0 f93c 	bl	800204c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011dd4:	bf00      	nop
 8011dd6:	3720      	adds	r7, #32
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b09c      	sub	sp, #112	; 0x70
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011df4:	2b22      	cmp	r3, #34	; 0x22
 8011df6:	f040 80be 	bne.w	8011f76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011e08:	b2d9      	uxtb	r1, r3
 8011e0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011e0e:	b2da      	uxtb	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e14:	400a      	ands	r2, r1
 8011e16:	b2d2      	uxtb	r2, r2
 8011e18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e1e:	1c5a      	adds	r2, r3, #1
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f040 80a1 	bne.w	8011f86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e4c:	e853 3f00 	ldrex	r3, [r3]
 8011e50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	461a      	mov	r2, r3
 8011e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8011e64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e6a:	e841 2300 	strex	r3, r2, [r1]
 8011e6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d1e6      	bne.n	8011e44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3308      	adds	r3, #8
 8011e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e80:	e853 3f00 	ldrex	r3, [r3]
 8011e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e88:	f023 0301 	bic.w	r3, r3, #1
 8011e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	3308      	adds	r3, #8
 8011e94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011e96:	647a      	str	r2, [r7, #68]	; 0x44
 8011e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e9e:	e841 2300 	strex	r3, r2, [r1]
 8011ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d1e5      	bne.n	8011e76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2220      	movs	r2, #32
 8011eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	4a33      	ldr	r2, [pc, #204]	; (8011f90 <UART_RxISR_8BIT+0x1b4>)
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d01f      	beq.n	8011f08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d018      	beq.n	8011f08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	e853 3f00 	ldrex	r3, [r3]
 8011ee2:	623b      	str	r3, [r7, #32]
   return(result);
 8011ee4:	6a3b      	ldr	r3, [r7, #32]
 8011ee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011eea:	663b      	str	r3, [r7, #96]	; 0x60
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8011ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011efc:	e841 2300 	strex	r3, r2, [r1]
 8011f00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d1e6      	bne.n	8011ed6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d12e      	bne.n	8011f6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	e853 3f00 	ldrex	r3, [r3]
 8011f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f023 0310 	bic.w	r3, r3, #16
 8011f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	461a      	mov	r2, r3
 8011f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f34:	61fb      	str	r3, [r7, #28]
 8011f36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f38:	69b9      	ldr	r1, [r7, #24]
 8011f3a:	69fa      	ldr	r2, [r7, #28]
 8011f3c:	e841 2300 	strex	r3, r2, [r1]
 8011f40:	617b      	str	r3, [r7, #20]
   return(result);
 8011f42:	697b      	ldr	r3, [r7, #20]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1e6      	bne.n	8011f16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	69db      	ldr	r3, [r3, #28]
 8011f4e:	f003 0310 	and.w	r3, r3, #16
 8011f52:	2b10      	cmp	r3, #16
 8011f54:	d103      	bne.n	8011f5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2210      	movs	r2, #16
 8011f5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011f64:	4619      	mov	r1, r3
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f7fe fd66 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011f6c:	e00b      	b.n	8011f86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f7ee fb8a 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 8011f74:	e007      	b.n	8011f86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	699a      	ldr	r2, [r3, #24]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f042 0208 	orr.w	r2, r2, #8
 8011f84:	619a      	str	r2, [r3, #24]
}
 8011f86:	bf00      	nop
 8011f88:	3770      	adds	r7, #112	; 0x70
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	58000c00 	.word	0x58000c00

08011f94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b09c      	sub	sp, #112	; 0x70
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011fa2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011fac:	2b22      	cmp	r3, #34	; 0x22
 8011fae:	f040 80be 	bne.w	801212e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fc0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011fc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011fc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011fca:	4013      	ands	r3, r2
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011fd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011fd6:	1c9a      	adds	r2, r3, #2
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fe2:	b29b      	uxth	r3, r3
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ff4:	b29b      	uxth	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f040 80a1 	bne.w	801213e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012004:	e853 3f00 	ldrex	r3, [r3]
 8012008:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801200a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801200c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012010:	667b      	str	r3, [r7, #100]	; 0x64
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801201a:	657b      	str	r3, [r7, #84]	; 0x54
 801201c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801201e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012022:	e841 2300 	strex	r3, r2, [r1]
 8012026:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1e6      	bne.n	8011ffc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	3308      	adds	r3, #8
 8012034:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012038:	e853 3f00 	ldrex	r3, [r3]
 801203c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	f023 0301 	bic.w	r3, r3, #1
 8012044:	663b      	str	r3, [r7, #96]	; 0x60
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3308      	adds	r3, #8
 801204c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801204e:	643a      	str	r2, [r7, #64]	; 0x40
 8012050:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012056:	e841 2300 	strex	r3, r2, [r1]
 801205a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1e5      	bne.n	801202e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2220      	movs	r2, #32
 8012066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4a33      	ldr	r2, [pc, #204]	; (8012148 <UART_RxISR_16BIT+0x1b4>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d01f      	beq.n	80120c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801208a:	2b00      	cmp	r3, #0
 801208c:	d018      	beq.n	80120c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012094:	6a3b      	ldr	r3, [r7, #32]
 8012096:	e853 3f00 	ldrex	r3, [r3]
 801209a:	61fb      	str	r3, [r7, #28]
   return(result);
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80120a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	461a      	mov	r2, r3
 80120aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120ae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120b4:	e841 2300 	strex	r3, r2, [r1]
 80120b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1e6      	bne.n	801208e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	d12e      	bne.n	8012126 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2200      	movs	r2, #0
 80120cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	e853 3f00 	ldrex	r3, [r3]
 80120da:	60bb      	str	r3, [r7, #8]
   return(result);
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	f023 0310 	bic.w	r3, r3, #16
 80120e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	461a      	mov	r2, r3
 80120ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120ec:	61bb      	str	r3, [r7, #24]
 80120ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f0:	6979      	ldr	r1, [r7, #20]
 80120f2:	69ba      	ldr	r2, [r7, #24]
 80120f4:	e841 2300 	strex	r3, r2, [r1]
 80120f8:	613b      	str	r3, [r7, #16]
   return(result);
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1e6      	bne.n	80120ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	69db      	ldr	r3, [r3, #28]
 8012106:	f003 0310 	and.w	r3, r3, #16
 801210a:	2b10      	cmp	r3, #16
 801210c:	d103      	bne.n	8012116 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2210      	movs	r2, #16
 8012114:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801211c:	4619      	mov	r1, r3
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7fe fc8a 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012124:	e00b      	b.n	801213e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f7ee faae 	bl	8000688 <HAL_UART_RxCpltCallback>
}
 801212c:	e007      	b.n	801213e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	699a      	ldr	r2, [r3, #24]
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	f042 0208 	orr.w	r2, r2, #8
 801213c:	619a      	str	r2, [r3, #24]
}
 801213e:	bf00      	nop
 8012140:	3770      	adds	r7, #112	; 0x70
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	58000c00 	.word	0x58000c00

0801214c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b0ac      	sub	sp, #176	; 0xb0
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801215a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	69db      	ldr	r3, [r3, #28]
 8012164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012182:	2b22      	cmp	r3, #34	; 0x22
 8012184:	f040 8180 	bne.w	8012488 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801218e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012192:	e123      	b.n	80123dc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801219a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801219e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80121a2:	b2d9      	uxtb	r1, r3
 80121a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ae:	400a      	ands	r2, r1
 80121b0:	b2d2      	uxtb	r2, r2
 80121b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	3b01      	subs	r3, #1
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	69db      	ldr	r3, [r3, #28]
 80121d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80121da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121de:	f003 0307 	and.w	r3, r3, #7
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d053      	beq.n	801228e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80121e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80121ea:	f003 0301 	and.w	r3, r3, #1
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d011      	beq.n	8012216 <UART_RxISR_8BIT_FIFOEN+0xca>
 80121f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80121f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d00b      	beq.n	8012216 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2201      	movs	r2, #1
 8012204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801220c:	f043 0201 	orr.w	r2, r3, #1
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801221a:	f003 0302 	and.w	r3, r3, #2
 801221e:	2b00      	cmp	r3, #0
 8012220:	d011      	beq.n	8012246 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012226:	f003 0301 	and.w	r3, r3, #1
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00b      	beq.n	8012246 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	2202      	movs	r2, #2
 8012234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801223c:	f043 0204 	orr.w	r2, r3, #4
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801224a:	f003 0304 	and.w	r3, r3, #4
 801224e:	2b00      	cmp	r3, #0
 8012250:	d011      	beq.n	8012276 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	2b00      	cmp	r3, #0
 801225c:	d00b      	beq.n	8012276 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2204      	movs	r2, #4
 8012264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801226c:	f043 0202 	orr.w	r2, r3, #2
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801227c:	2b00      	cmp	r3, #0
 801227e:	d006      	beq.n	801228e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7fe fbcf 	bl	8010a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2200      	movs	r2, #0
 801228a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012294:	b29b      	uxth	r3, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	f040 80a0 	bne.w	80123dc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122a4:	e853 3f00 	ldrex	r3, [r3]
 80122a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80122aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80122ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	461a      	mov	r2, r3
 80122ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80122be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80122c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80122c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122c6:	e841 2300 	strex	r3, r2, [r1]
 80122ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80122cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d1e4      	bne.n	801229c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	3308      	adds	r3, #8
 80122d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80122dc:	e853 3f00 	ldrex	r3, [r3]
 80122e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80122e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80122e4:	4b6e      	ldr	r3, [pc, #440]	; (80124a0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80122e6:	4013      	ands	r3, r2
 80122e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	3308      	adds	r3, #8
 80122f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80122f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80122f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80122fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80122fe:	e841 2300 	strex	r3, r2, [r1]
 8012302:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1e3      	bne.n	80122d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2220      	movs	r2, #32
 801230e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2200      	movs	r2, #0
 801231c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a60      	ldr	r2, [pc, #384]	; (80124a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012324:	4293      	cmp	r3, r2
 8012326:	d021      	beq.n	801236c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012332:	2b00      	cmp	r3, #0
 8012334:	d01a      	beq.n	801236c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801233e:	e853 3f00 	ldrex	r3, [r3]
 8012342:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801234a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012358:	657b      	str	r3, [r7, #84]	; 0x54
 801235a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801235c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801235e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012360:	e841 2300 	strex	r3, r2, [r1]
 8012364:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1e4      	bne.n	8012336 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012370:	2b01      	cmp	r3, #1
 8012372:	d130      	bne.n	80123d6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012382:	e853 3f00 	ldrex	r3, [r3]
 8012386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	f023 0310 	bic.w	r3, r3, #16
 801238e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801239c:	643b      	str	r3, [r7, #64]	; 0x40
 801239e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80123a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123a4:	e841 2300 	strex	r3, r2, [r1]
 80123a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80123aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d1e4      	bne.n	801237a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	69db      	ldr	r3, [r3, #28]
 80123b6:	f003 0310 	and.w	r3, r3, #16
 80123ba:	2b10      	cmp	r3, #16
 80123bc:	d103      	bne.n	80123c6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	2210      	movs	r2, #16
 80123c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123cc:	4619      	mov	r1, r3
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7fe fb32 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
 80123d4:	e002      	b.n	80123dc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7ee f956 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80123dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d006      	beq.n	80123f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80123e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80123e8:	f003 0320 	and.w	r3, r3, #32
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f47f aed1 	bne.w	8012194 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80123f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80123fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012400:	2b00      	cmp	r3, #0
 8012402:	d049      	beq.n	8012498 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801240a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801240e:	429a      	cmp	r2, r3
 8012410:	d242      	bcs.n	8012498 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3308      	adds	r3, #8
 8012418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801241a:	6a3b      	ldr	r3, [r7, #32]
 801241c:	e853 3f00 	ldrex	r3, [r3]
 8012420:	61fb      	str	r3, [r7, #28]
   return(result);
 8012422:	69fb      	ldr	r3, [r7, #28]
 8012424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	3308      	adds	r3, #8
 8012432:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801243a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801243c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801243e:	e841 2300 	strex	r3, r2, [r1]
 8012442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	d1e3      	bne.n	8012412 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4a16      	ldr	r2, [pc, #88]	; (80124a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801244e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	e853 3f00 	ldrex	r3, [r3]
 801245c:	60bb      	str	r3, [r7, #8]
   return(result);
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	f043 0320 	orr.w	r3, r3, #32
 8012464:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	461a      	mov	r2, r3
 801246e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012472:	61bb      	str	r3, [r7, #24]
 8012474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012476:	6979      	ldr	r1, [r7, #20]
 8012478:	69ba      	ldr	r2, [r7, #24]
 801247a:	e841 2300 	strex	r3, r2, [r1]
 801247e:	613b      	str	r3, [r7, #16]
   return(result);
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d1e4      	bne.n	8012450 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012486:	e007      	b.n	8012498 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	699a      	ldr	r2, [r3, #24]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f042 0208 	orr.w	r2, r2, #8
 8012496:	619a      	str	r2, [r3, #24]
}
 8012498:	bf00      	nop
 801249a:	37b0      	adds	r7, #176	; 0xb0
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	effffffe 	.word	0xeffffffe
 80124a4:	58000c00 	.word	0x58000c00
 80124a8:	08011ddd 	.word	0x08011ddd

080124ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b0ae      	sub	sp, #184	; 0xb8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69db      	ldr	r3, [r3, #28]
 80124c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124e2:	2b22      	cmp	r3, #34	; 0x22
 80124e4:	f040 8184 	bne.w	80127f0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80124ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80124f2:	e127      	b.n	8012744 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012502:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012506:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801250a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801250e:	4013      	ands	r3, r2
 8012510:	b29a      	uxth	r2, r3
 8012512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012516:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801251c:	1c9a      	adds	r2, r3, #2
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012528:	b29b      	uxth	r3, r3
 801252a:	3b01      	subs	r3, #1
 801252c:	b29a      	uxth	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	69db      	ldr	r3, [r3, #28]
 801253a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801253e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012542:	f003 0307 	and.w	r3, r3, #7
 8012546:	2b00      	cmp	r3, #0
 8012548:	d053      	beq.n	80125f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801254a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801254e:	f003 0301 	and.w	r3, r3, #1
 8012552:	2b00      	cmp	r3, #0
 8012554:	d011      	beq.n	801257a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801255e:	2b00      	cmp	r3, #0
 8012560:	d00b      	beq.n	801257a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2201      	movs	r2, #1
 8012568:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012570:	f043 0201 	orr.w	r2, r3, #1
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801257a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801257e:	f003 0302 	and.w	r3, r3, #2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d011      	beq.n	80125aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012586:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801258a:	f003 0301 	and.w	r3, r3, #1
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00b      	beq.n	80125aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2202      	movs	r2, #2
 8012598:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125a0:	f043 0204 	orr.w	r2, r3, #4
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80125ae:	f003 0304 	and.w	r3, r3, #4
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d011      	beq.n	80125da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80125b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00b      	beq.n	80125da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2204      	movs	r2, #4
 80125c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125d0:	f043 0202 	orr.w	r2, r3, #2
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d006      	beq.n	80125f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7fe fa1d 	bl	8010a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2200      	movs	r2, #0
 80125ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f040 80a2 	bne.w	8012744 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012608:	e853 3f00 	ldrex	r3, [r3]
 801260c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801260e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	461a      	mov	r2, r3
 801261e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012626:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801262a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801262e:	e841 2300 	strex	r3, r2, [r1]
 8012632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012636:	2b00      	cmp	r3, #0
 8012638:	d1e2      	bne.n	8012600 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3308      	adds	r3, #8
 8012640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012644:	e853 3f00 	ldrex	r3, [r3]
 8012648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801264a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801264c:	4b6e      	ldr	r3, [pc, #440]	; (8012808 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801264e:	4013      	ands	r3, r2
 8012650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	3308      	adds	r3, #8
 801265a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801265e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012666:	e841 2300 	strex	r3, r2, [r1]
 801266a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801266c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1e3      	bne.n	801263a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2220      	movs	r2, #32
 8012676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	2200      	movs	r2, #0
 801267e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4a60      	ldr	r2, [pc, #384]	; (801280c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801268c:	4293      	cmp	r3, r2
 801268e:	d021      	beq.n	80126d4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	685b      	ldr	r3, [r3, #4]
 8012696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801269a:	2b00      	cmp	r3, #0
 801269c:	d01a      	beq.n	80126d4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a6:	e853 3f00 	ldrex	r3, [r3]
 80126aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80126ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80126b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80126c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80126c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80126c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80126c8:	e841 2300 	strex	r3, r2, [r1]
 80126cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80126ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e4      	bne.n	801269e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d130      	bne.n	801273e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2200      	movs	r2, #0
 80126e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	e853 3f00 	ldrex	r3, [r3]
 80126ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80126f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126f2:	f023 0310 	bic.w	r3, r3, #16
 80126f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	461a      	mov	r2, r3
 8012700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012704:	647b      	str	r3, [r7, #68]	; 0x44
 8012706:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012708:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801270a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801270c:	e841 2300 	strex	r3, r2, [r1]
 8012710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1e4      	bne.n	80126e2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	69db      	ldr	r3, [r3, #28]
 801271e:	f003 0310 	and.w	r3, r3, #16
 8012722:	2b10      	cmp	r3, #16
 8012724:	d103      	bne.n	801272e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2210      	movs	r2, #16
 801272c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012734:	4619      	mov	r1, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7fe f97e 	bl	8010a38 <HAL_UARTEx_RxEventCallback>
 801273c:	e002      	b.n	8012744 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7ed ffa2 	bl	8000688 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012744:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012748:	2b00      	cmp	r3, #0
 801274a:	d006      	beq.n	801275a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801274c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012750:	f003 0320 	and.w	r3, r3, #32
 8012754:	2b00      	cmp	r3, #0
 8012756:	f47f aecd 	bne.w	80124f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012760:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012764:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012768:	2b00      	cmp	r3, #0
 801276a:	d049      	beq.n	8012800 <UART_RxISR_16BIT_FIFOEN+0x354>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012772:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012776:	429a      	cmp	r2, r3
 8012778:	d242      	bcs.n	8012800 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	3308      	adds	r3, #8
 8012780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	e853 3f00 	ldrex	r3, [r3]
 8012788:	623b      	str	r3, [r7, #32]
   return(result);
 801278a:	6a3b      	ldr	r3, [r7, #32]
 801278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	3308      	adds	r3, #8
 801279a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801279e:	633a      	str	r2, [r7, #48]	; 0x30
 80127a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127a6:	e841 2300 	strex	r3, r2, [r1]
 80127aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1e3      	bne.n	801277a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	4a16      	ldr	r2, [pc, #88]	; (8012810 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80127b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	e853 3f00 	ldrex	r3, [r3]
 80127c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	f043 0320 	orr.w	r3, r3, #32
 80127cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	461a      	mov	r2, r3
 80127d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80127da:	61fb      	str	r3, [r7, #28]
 80127dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127de:	69b9      	ldr	r1, [r7, #24]
 80127e0:	69fa      	ldr	r2, [r7, #28]
 80127e2:	e841 2300 	strex	r3, r2, [r1]
 80127e6:	617b      	str	r3, [r7, #20]
   return(result);
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d1e4      	bne.n	80127b8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80127ee:	e007      	b.n	8012800 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	699a      	ldr	r2, [r3, #24]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f042 0208 	orr.w	r2, r2, #8
 80127fe:	619a      	str	r2, [r3, #24]
}
 8012800:	bf00      	nop
 8012802:	37b8      	adds	r7, #184	; 0xb8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}
 8012808:	effffffe 	.word	0xeffffffe
 801280c:	58000c00 	.word	0x58000c00
 8012810:	08011f95 	.word	0x08011f95

08012814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012814:	b480      	push	{r7}
 8012816:	b083      	sub	sp, #12
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801281c:	bf00      	nop
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012828:	b480      	push	{r7}
 801282a:	b083      	sub	sp, #12
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012830:	bf00      	nop
 8012832:	370c      	adds	r7, #12
 8012834:	46bd      	mov	sp, r7
 8012836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283a:	4770      	bx	lr

0801283c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
 8012842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012844:	bf00      	nop
 8012846:	370c      	adds	r7, #12
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr

08012850 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012850:	b480      	push	{r7}
 8012852:	b089      	sub	sp, #36	; 0x24
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801285e:	2b01      	cmp	r3, #1
 8012860:	d101      	bne.n	8012866 <HAL_UARTEx_EnableStopMode+0x16>
 8012862:	2302      	movs	r3, #2
 8012864:	e021      	b.n	80128aa <HAL_UARTEx_EnableStopMode+0x5a>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2201      	movs	r2, #1
 801286a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	e853 3f00 	ldrex	r3, [r3]
 801287a:	60bb      	str	r3, [r7, #8]
   return(result);
 801287c:	68bb      	ldr	r3, [r7, #8]
 801287e:	f043 0302 	orr.w	r3, r3, #2
 8012882:	61fb      	str	r3, [r7, #28]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	461a      	mov	r2, r3
 801288a:	69fb      	ldr	r3, [r7, #28]
 801288c:	61bb      	str	r3, [r7, #24]
 801288e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012890:	6979      	ldr	r1, [r7, #20]
 8012892:	69ba      	ldr	r2, [r7, #24]
 8012894:	e841 2300 	strex	r3, r2, [r1]
 8012898:	613b      	str	r3, [r7, #16]
   return(result);
 801289a:	693b      	ldr	r3, [r7, #16]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d1e6      	bne.n	801286e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3724      	adds	r7, #36	; 0x24
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr

080128b6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80128b6:	b580      	push	{r7, lr}
 80128b8:	b084      	sub	sp, #16
 80128ba:	af00      	add	r7, sp, #0
 80128bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80128c4:	2b01      	cmp	r3, #1
 80128c6:	d101      	bne.n	80128cc <HAL_UARTEx_EnableFifoMode+0x16>
 80128c8:	2302      	movs	r3, #2
 80128ca:	e02b      	b.n	8012924 <HAL_UARTEx_EnableFifoMode+0x6e>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2224      	movs	r2, #36	; 0x24
 80128d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	f022 0201 	bic.w	r2, r2, #1
 80128f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80128fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012902:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f000 f8c3 	bl	8012a98 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2220      	movs	r2, #32
 8012916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2200      	movs	r2, #0
 801291e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801293a:	2b01      	cmp	r3, #1
 801293c:	d101      	bne.n	8012942 <HAL_UARTEx_DisableFifoMode+0x16>
 801293e:	2302      	movs	r3, #2
 8012940:	e027      	b.n	8012992 <HAL_UARTEx_DisableFifoMode+0x66>
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2201      	movs	r2, #1
 8012946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2224      	movs	r2, #36	; 0x24
 801294e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	f022 0201 	bic.w	r2, r2, #1
 8012968:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012970:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2220      	movs	r2, #32
 8012984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3714      	adds	r7, #20
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801299e:	b580      	push	{r7, lr}
 80129a0:	b084      	sub	sp, #16
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
 80129a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80129ae:	2b01      	cmp	r3, #1
 80129b0:	d101      	bne.n	80129b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80129b2:	2302      	movs	r3, #2
 80129b4:	e02d      	b.n	8012a12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2201      	movs	r2, #1
 80129ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2224      	movs	r2, #36	; 0x24
 80129c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f022 0201 	bic.w	r2, r2, #1
 80129dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	683a      	ldr	r2, [r7, #0]
 80129ee:	430a      	orrs	r2, r1
 80129f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80129f2:	6878      	ldr	r0, [r7, #4]
 80129f4:	f000 f850 	bl	8012a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	2220      	movs	r2, #32
 8012a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a10:	2300      	movs	r3, #0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b084      	sub	sp, #16
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012a2a:	2b01      	cmp	r3, #1
 8012a2c:	d101      	bne.n	8012a32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012a2e:	2302      	movs	r3, #2
 8012a30:	e02d      	b.n	8012a8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2201      	movs	r2, #1
 8012a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2224      	movs	r2, #36	; 0x24
 8012a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	f022 0201 	bic.w	r2, r2, #1
 8012a58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	689b      	ldr	r3, [r3, #8]
 8012a60:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	683a      	ldr	r2, [r7, #0]
 8012a6a:	430a      	orrs	r2, r1
 8012a6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f812 	bl	8012a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2220      	movs	r2, #32
 8012a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
	...

08012a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b085      	sub	sp, #20
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d108      	bne.n	8012aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2201      	movs	r2, #1
 8012aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012ab8:	e031      	b.n	8012b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012aba:	2310      	movs	r3, #16
 8012abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012abe:	2310      	movs	r3, #16
 8012ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	689b      	ldr	r3, [r3, #8]
 8012ac8:	0e5b      	lsrs	r3, r3, #25
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	f003 0307 	and.w	r3, r3, #7
 8012ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	0f5b      	lsrs	r3, r3, #29
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	f003 0307 	and.w	r3, r3, #7
 8012ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ae2:	7bbb      	ldrb	r3, [r7, #14]
 8012ae4:	7b3a      	ldrb	r2, [r7, #12]
 8012ae6:	4911      	ldr	r1, [pc, #68]	; (8012b2c <UARTEx_SetNbDataToProcess+0x94>)
 8012ae8:	5c8a      	ldrb	r2, [r1, r2]
 8012aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012aee:	7b3a      	ldrb	r2, [r7, #12]
 8012af0:	490f      	ldr	r1, [pc, #60]	; (8012b30 <UARTEx_SetNbDataToProcess+0x98>)
 8012af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b00:	7bfb      	ldrb	r3, [r7, #15]
 8012b02:	7b7a      	ldrb	r2, [r7, #13]
 8012b04:	4909      	ldr	r1, [pc, #36]	; (8012b2c <UARTEx_SetNbDataToProcess+0x94>)
 8012b06:	5c8a      	ldrb	r2, [r1, r2]
 8012b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012b0c:	7b7a      	ldrb	r2, [r7, #13]
 8012b0e:	4908      	ldr	r1, [pc, #32]	; (8012b30 <UARTEx_SetNbDataToProcess+0x98>)
 8012b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012b1e:	bf00      	nop
 8012b20:	3714      	adds	r7, #20
 8012b22:	46bd      	mov	sp, r7
 8012b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b28:	4770      	bx	lr
 8012b2a:	bf00      	nop
 8012b2c:	080172e4 	.word	0x080172e4
 8012b30:	080172ec 	.word	0x080172ec

08012b34 <__NVIC_SetPriority>:
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	6039      	str	r1, [r7, #0]
 8012b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	db0a      	blt.n	8012b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	b2da      	uxtb	r2, r3
 8012b4c:	490c      	ldr	r1, [pc, #48]	; (8012b80 <__NVIC_SetPriority+0x4c>)
 8012b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b52:	0112      	lsls	r2, r2, #4
 8012b54:	b2d2      	uxtb	r2, r2
 8012b56:	440b      	add	r3, r1
 8012b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012b5c:	e00a      	b.n	8012b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	4908      	ldr	r1, [pc, #32]	; (8012b84 <__NVIC_SetPriority+0x50>)
 8012b64:	88fb      	ldrh	r3, [r7, #6]
 8012b66:	f003 030f 	and.w	r3, r3, #15
 8012b6a:	3b04      	subs	r3, #4
 8012b6c:	0112      	lsls	r2, r2, #4
 8012b6e:	b2d2      	uxtb	r2, r2
 8012b70:	440b      	add	r3, r1
 8012b72:	761a      	strb	r2, [r3, #24]
}
 8012b74:	bf00      	nop
 8012b76:	370c      	adds	r7, #12
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7e:	4770      	bx	lr
 8012b80:	e000e100 	.word	0xe000e100
 8012b84:	e000ed00 	.word	0xe000ed00

08012b88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012b8c:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <SysTick_Handler+0x1c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012b90:	f002 fbc2 	bl	8015318 <xTaskGetSchedulerState>
 8012b94:	4603      	mov	r3, r0
 8012b96:	2b01      	cmp	r3, #1
 8012b98:	d001      	beq.n	8012b9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012b9a:	f003 f9e5 	bl	8015f68 <xPortSysTickHandler>
  }
}
 8012b9e:	bf00      	nop
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	e000e010 	.word	0xe000e010

08012ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012bac:	2100      	movs	r1, #0
 8012bae:	f06f 0004 	mvn.w	r0, #4
 8012bb2:	f7ff ffbf 	bl	8012b34 <__NVIC_SetPriority>
#endif
}
 8012bb6:	bf00      	nop
 8012bb8:	bd80      	pop	{r7, pc}
	...

08012bbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012bc2:	f3ef 8305 	mrs	r3, IPSR
 8012bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8012bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d003      	beq.n	8012bd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012bce:	f06f 0305 	mvn.w	r3, #5
 8012bd2:	607b      	str	r3, [r7, #4]
 8012bd4:	e00c      	b.n	8012bf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012bd6:	4b0a      	ldr	r3, [pc, #40]	; (8012c00 <osKernelInitialize+0x44>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d105      	bne.n	8012bea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012bde:	4b08      	ldr	r3, [pc, #32]	; (8012c00 <osKernelInitialize+0x44>)
 8012be0:	2201      	movs	r2, #1
 8012be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012be4:	2300      	movs	r3, #0
 8012be6:	607b      	str	r3, [r7, #4]
 8012be8:	e002      	b.n	8012bf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012bf0:	687b      	ldr	r3, [r7, #4]
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	370c      	adds	r7, #12
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfc:	4770      	bx	lr
 8012bfe:	bf00      	nop
 8012c00:	2400110c 	.word	0x2400110c

08012c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c0a:	f3ef 8305 	mrs	r3, IPSR
 8012c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8012c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d003      	beq.n	8012c1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012c16:	f06f 0305 	mvn.w	r3, #5
 8012c1a:	607b      	str	r3, [r7, #4]
 8012c1c:	e010      	b.n	8012c40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012c1e:	4b0b      	ldr	r3, [pc, #44]	; (8012c4c <osKernelStart+0x48>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d109      	bne.n	8012c3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012c26:	f7ff ffbf 	bl	8012ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012c2a:	4b08      	ldr	r3, [pc, #32]	; (8012c4c <osKernelStart+0x48>)
 8012c2c:	2202      	movs	r2, #2
 8012c2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012c30:	f001 fe84 	bl	801493c <vTaskStartScheduler>
      stat = osOK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e002      	b.n	8012c40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012c40:	687b      	ldr	r3, [r7, #4]
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	2400110c 	.word	0x2400110c

08012c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b08e      	sub	sp, #56	; 0x38
 8012c54:	af04      	add	r7, sp, #16
 8012c56:	60f8      	str	r0, [r7, #12]
 8012c58:	60b9      	str	r1, [r7, #8]
 8012c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c60:	f3ef 8305 	mrs	r3, IPSR
 8012c64:	617b      	str	r3, [r7, #20]
  return(result);
 8012c66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d17e      	bne.n	8012d6a <osThreadNew+0x11a>
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d07b      	beq.n	8012d6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012c72:	2380      	movs	r3, #128	; 0x80
 8012c74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012c76:	2318      	movs	r3, #24
 8012c78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d045      	beq.n	8012d16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d002      	beq.n	8012c98 <osThreadNew+0x48>
        name = attr->name;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	699b      	ldr	r3, [r3, #24]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	699b      	ldr	r3, [r3, #24]
 8012ca4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d008      	beq.n	8012cbe <osThreadNew+0x6e>
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	2b38      	cmp	r3, #56	; 0x38
 8012cb0:	d805      	bhi.n	8012cbe <osThreadNew+0x6e>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	f003 0301 	and.w	r3, r3, #1
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d001      	beq.n	8012cc2 <osThreadNew+0x72>
        return (NULL);
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	e054      	b.n	8012d6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	695b      	ldr	r3, [r3, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d003      	beq.n	8012cd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	695b      	ldr	r3, [r3, #20]
 8012cce:	089b      	lsrs	r3, r3, #2
 8012cd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d00e      	beq.n	8012cf8 <osThreadNew+0xa8>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	2b5b      	cmp	r3, #91	; 0x5b
 8012ce0:	d90a      	bls.n	8012cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d006      	beq.n	8012cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	695b      	ldr	r3, [r3, #20]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d002      	beq.n	8012cf8 <osThreadNew+0xa8>
        mem = 1;
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	61bb      	str	r3, [r7, #24]
 8012cf6:	e010      	b.n	8012d1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	689b      	ldr	r3, [r3, #8]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d10c      	bne.n	8012d1a <osThreadNew+0xca>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d108      	bne.n	8012d1a <osThreadNew+0xca>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	691b      	ldr	r3, [r3, #16]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d104      	bne.n	8012d1a <osThreadNew+0xca>
          mem = 0;
 8012d10:	2300      	movs	r3, #0
 8012d12:	61bb      	str	r3, [r7, #24]
 8012d14:	e001      	b.n	8012d1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012d16:	2300      	movs	r3, #0
 8012d18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d110      	bne.n	8012d42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012d28:	9202      	str	r2, [sp, #8]
 8012d2a:	9301      	str	r3, [sp, #4]
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	9300      	str	r3, [sp, #0]
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	6a3a      	ldr	r2, [r7, #32]
 8012d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d36:	68f8      	ldr	r0, [r7, #12]
 8012d38:	f001 fb10 	bl	801435c <xTaskCreateStatic>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	613b      	str	r3, [r7, #16]
 8012d40:	e013      	b.n	8012d6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d110      	bne.n	8012d6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012d48:	6a3b      	ldr	r3, [r7, #32]
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	f107 0310 	add.w	r3, r7, #16
 8012d50:	9301      	str	r3, [sp, #4]
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d5a:	68f8      	ldr	r0, [r7, #12]
 8012d5c:	f001 fb5b 	bl	8014416 <xTaskCreate>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	d001      	beq.n	8012d6a <osThreadNew+0x11a>
            hTask = NULL;
 8012d66:	2300      	movs	r3, #0
 8012d68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012d6a:	693b      	ldr	r3, [r7, #16]
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	3728      	adds	r7, #40	; 0x28
 8012d70:	46bd      	mov	sp, r7
 8012d72:	bd80      	pop	{r7, pc}

08012d74 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d7a:	f3ef 8305 	mrs	r3, IPSR
 8012d7e:	603b      	str	r3, [r7, #0]
  return(result);
 8012d80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d003      	beq.n	8012d8e <osThreadYield+0x1a>
    stat = osErrorISR;
 8012d86:	f06f 0305 	mvn.w	r3, #5
 8012d8a:	607b      	str	r3, [r7, #4]
 8012d8c:	e009      	b.n	8012da2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012d92:	4b07      	ldr	r3, [pc, #28]	; (8012db0 <osThreadYield+0x3c>)
 8012d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d98:	601a      	str	r2, [r3, #0]
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012da2:	687b      	ldr	r3, [r7, #4]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	370c      	adds	r7, #12
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr
 8012db0:	e000ed04 	.word	0xe000ed04

08012db4 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b086      	sub	sp, #24
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dc0:	f3ef 8305 	mrs	r3, IPSR
 8012dc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012dc6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d003      	beq.n	8012dd4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012dcc:	f06f 0305 	mvn.w	r3, #5
 8012dd0:	617b      	str	r3, [r7, #20]
 8012dd2:	e00b      	b.n	8012dec <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d103      	bne.n	8012de2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012dda:	f06f 0303 	mvn.w	r3, #3
 8012dde:	617b      	str	r3, [r7, #20]
 8012de0:	e004      	b.n	8012dec <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012de2:	2300      	movs	r3, #0
 8012de4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012de6:	6938      	ldr	r0, [r7, #16]
 8012de8:	f001 fc8e 	bl	8014708 <vTaskSuspend>
  }

  return (stat);
 8012dec:	697b      	ldr	r3, [r7, #20]
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3718      	adds	r7, #24
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}

08012df6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012df6:	b580      	push	{r7, lr}
 8012df8:	b084      	sub	sp, #16
 8012dfa:	af00      	add	r7, sp, #0
 8012dfc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dfe:	f3ef 8305 	mrs	r3, IPSR
 8012e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8012e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d003      	beq.n	8012e12 <osDelay+0x1c>
    stat = osErrorISR;
 8012e0a:	f06f 0305 	mvn.w	r3, #5
 8012e0e:	60fb      	str	r3, [r7, #12]
 8012e10:	e007      	b.n	8012e22 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012e12:	2300      	movs	r3, #0
 8012e14:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d002      	beq.n	8012e22 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	f001 fc3f 	bl	80146a0 <vTaskDelay>
    }
  }

  return (stat);
 8012e22:	68fb      	ldr	r3, [r7, #12]
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3710      	adds	r7, #16
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012e34:	2300      	movs	r3, #0
 8012e36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e38:	f3ef 8305 	mrs	r3, IPSR
 8012e3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e3e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d12d      	bne.n	8012ea0 <osEventFlagsNew+0x74>
    mem = -1;
 8012e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e48:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d015      	beq.n	8012e7c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	689b      	ldr	r3, [r3, #8]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d006      	beq.n	8012e66 <osEventFlagsNew+0x3a>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	68db      	ldr	r3, [r3, #12]
 8012e5c:	2b1f      	cmp	r3, #31
 8012e5e:	d902      	bls.n	8012e66 <osEventFlagsNew+0x3a>
        mem = 1;
 8012e60:	2301      	movs	r3, #1
 8012e62:	613b      	str	r3, [r7, #16]
 8012e64:	e00c      	b.n	8012e80 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	689b      	ldr	r3, [r3, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d108      	bne.n	8012e80 <osEventFlagsNew+0x54>
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d104      	bne.n	8012e80 <osEventFlagsNew+0x54>
          mem = 0;
 8012e76:	2300      	movs	r3, #0
 8012e78:	613b      	str	r3, [r7, #16]
 8012e7a:	e001      	b.n	8012e80 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	2b01      	cmp	r3, #1
 8012e84:	d106      	bne.n	8012e94 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f000 fa1e 	bl	80132cc <xEventGroupCreateStatic>
 8012e90:	6178      	str	r0, [r7, #20]
 8012e92:	e005      	b.n	8012ea0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d102      	bne.n	8012ea0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012e9a:	f000 fa4e 	bl	801333a <xEventGroupCreate>
 8012e9e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012ea0:	697b      	ldr	r3, [r7, #20]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3718      	adds	r7, #24
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
	...

08012eac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b086      	sub	sp, #24
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
 8012eb4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d004      	beq.n	8012eca <osEventFlagsSet+0x1e>
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d003      	beq.n	8012ed2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012eca:	f06f 0303 	mvn.w	r3, #3
 8012ece:	617b      	str	r3, [r7, #20]
 8012ed0:	e028      	b.n	8012f24 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ed2:	f3ef 8305 	mrs	r3, IPSR
 8012ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d01d      	beq.n	8012f1a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012ee2:	f107 0308 	add.w	r3, r7, #8
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	6938      	ldr	r0, [r7, #16]
 8012eec:	f000 fbc8 	bl	8013680 <xEventGroupSetBitsFromISR>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d103      	bne.n	8012efe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012ef6:	f06f 0302 	mvn.w	r3, #2
 8012efa:	617b      	str	r3, [r7, #20]
 8012efc:	e012      	b.n	8012f24 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d00d      	beq.n	8012f24 <osEventFlagsSet+0x78>
 8012f08:	4b09      	ldr	r3, [pc, #36]	; (8012f30 <osEventFlagsSet+0x84>)
 8012f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	f3bf 8f4f 	dsb	sy
 8012f14:	f3bf 8f6f 	isb	sy
 8012f18:	e004      	b.n	8012f24 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012f1a:	6839      	ldr	r1, [r7, #0]
 8012f1c:	6938      	ldr	r0, [r7, #16]
 8012f1e:	f000 faf5 	bl	801350c <xEventGroupSetBits>
 8012f22:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012f24:	697b      	ldr	r3, [r7, #20]
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3718      	adds	r7, #24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
 8012f2e:	bf00      	nop
 8012f30:	e000ed04 	.word	0xe000ed04

08012f34 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b08c      	sub	sp, #48	; 0x30
 8012f38:	af02      	add	r7, sp, #8
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	607a      	str	r2, [r7, #4]
 8012f40:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d004      	beq.n	8012f56 <osEventFlagsWait+0x22>
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d003      	beq.n	8012f5e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012f56:	f06f 0303 	mvn.w	r3, #3
 8012f5a:	61fb      	str	r3, [r7, #28]
 8012f5c:	e04b      	b.n	8012ff6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f5e:	f3ef 8305 	mrs	r3, IPSR
 8012f62:	617b      	str	r3, [r7, #20]
  return(result);
 8012f64:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d003      	beq.n	8012f72 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012f6a:	f06f 0305 	mvn.w	r3, #5
 8012f6e:	61fb      	str	r3, [r7, #28]
 8012f70:	e041      	b.n	8012ff6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f003 0301 	and.w	r3, r3, #1
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8012f80:	e001      	b.n	8012f86 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012f82:	2300      	movs	r3, #0
 8012f84:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f003 0302 	and.w	r3, r3, #2
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012f90:	2300      	movs	r3, #0
 8012f92:	623b      	str	r3, [r7, #32]
 8012f94:	e001      	b.n	8012f9a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012f96:	2301      	movs	r3, #1
 8012f98:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	9300      	str	r3, [sp, #0]
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa0:	6a3a      	ldr	r2, [r7, #32]
 8012fa2:	68b9      	ldr	r1, [r7, #8]
 8012fa4:	69b8      	ldr	r0, [r7, #24]
 8012fa6:	f000 f9e3 	bl	8013370 <xEventGroupWaitBits>
 8012faa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f003 0301 	and.w	r3, r3, #1
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d010      	beq.n	8012fd8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012fb6:	68ba      	ldr	r2, [r7, #8]
 8012fb8:	69fb      	ldr	r3, [r7, #28]
 8012fba:	4013      	ands	r3, r2
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d019      	beq.n	8012ff6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d003      	beq.n	8012fd0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012fc8:	f06f 0301 	mvn.w	r3, #1
 8012fcc:	61fb      	str	r3, [r7, #28]
 8012fce:	e012      	b.n	8012ff6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012fd0:	f06f 0302 	mvn.w	r3, #2
 8012fd4:	61fb      	str	r3, [r7, #28]
 8012fd6:	e00e      	b.n	8012ff6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	4013      	ands	r3, r2
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d109      	bne.n	8012ff6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d003      	beq.n	8012ff0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012fe8:	f06f 0301 	mvn.w	r3, #1
 8012fec:	61fb      	str	r3, [r7, #28]
 8012fee:	e002      	b.n	8012ff6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012ff0:	f06f 0302 	mvn.w	r3, #2
 8012ff4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012ff6:	69fb      	ldr	r3, [r7, #28]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3728      	adds	r7, #40	; 0x28
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013000:	b580      	push	{r7, lr}
 8013002:	b08a      	sub	sp, #40	; 0x28
 8013004:	af02      	add	r7, sp, #8
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801300c:	2300      	movs	r3, #0
 801300e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013010:	f3ef 8305 	mrs	r3, IPSR
 8013014:	613b      	str	r3, [r7, #16]
  return(result);
 8013016:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013018:	2b00      	cmp	r3, #0
 801301a:	d15f      	bne.n	80130dc <osMessageQueueNew+0xdc>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d05c      	beq.n	80130dc <osMessageQueueNew+0xdc>
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d059      	beq.n	80130dc <osMessageQueueNew+0xdc>
    mem = -1;
 8013028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801302c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d029      	beq.n	8013088 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	689b      	ldr	r3, [r3, #8]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d012      	beq.n	8013062 <osMessageQueueNew+0x62>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	2b4f      	cmp	r3, #79	; 0x4f
 8013042:	d90e      	bls.n	8013062 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00a      	beq.n	8013062 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	695a      	ldr	r2, [r3, #20]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	68b9      	ldr	r1, [r7, #8]
 8013054:	fb01 f303 	mul.w	r3, r1, r3
 8013058:	429a      	cmp	r2, r3
 801305a:	d302      	bcc.n	8013062 <osMessageQueueNew+0x62>
        mem = 1;
 801305c:	2301      	movs	r3, #1
 801305e:	61bb      	str	r3, [r7, #24]
 8013060:	e014      	b.n	801308c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	689b      	ldr	r3, [r3, #8]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d110      	bne.n	801308c <osMessageQueueNew+0x8c>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	68db      	ldr	r3, [r3, #12]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d10c      	bne.n	801308c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013076:	2b00      	cmp	r3, #0
 8013078:	d108      	bne.n	801308c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	695b      	ldr	r3, [r3, #20]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d104      	bne.n	801308c <osMessageQueueNew+0x8c>
          mem = 0;
 8013082:	2300      	movs	r3, #0
 8013084:	61bb      	str	r3, [r7, #24]
 8013086:	e001      	b.n	801308c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013088:	2300      	movs	r3, #0
 801308a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d10b      	bne.n	80130aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	691a      	ldr	r2, [r3, #16]
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	689b      	ldr	r3, [r3, #8]
 801309a:	2100      	movs	r1, #0
 801309c:	9100      	str	r1, [sp, #0]
 801309e:	68b9      	ldr	r1, [r7, #8]
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f000 fc1d 	bl	80138e0 <xQueueGenericCreateStatic>
 80130a6:	61f8      	str	r0, [r7, #28]
 80130a8:	e008      	b.n	80130bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d105      	bne.n	80130bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80130b0:	2200      	movs	r2, #0
 80130b2:	68b9      	ldr	r1, [r7, #8]
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f000 fc8b 	bl	80139d0 <xQueueGenericCreate>
 80130ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d00c      	beq.n	80130dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d003      	beq.n	80130d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	617b      	str	r3, [r7, #20]
 80130ce:	e001      	b.n	80130d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80130d0:	2300      	movs	r3, #0
 80130d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80130d4:	6979      	ldr	r1, [r7, #20]
 80130d6:	69f8      	ldr	r0, [r7, #28]
 80130d8:	f001 f8e2 	bl	80142a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80130dc:	69fb      	ldr	r3, [r7, #28]
}
 80130de:	4618      	mov	r0, r3
 80130e0:	3720      	adds	r7, #32
 80130e2:	46bd      	mov	sp, r7
 80130e4:	bd80      	pop	{r7, pc}
	...

080130e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80130e8:	b580      	push	{r7, lr}
 80130ea:	b088      	sub	sp, #32
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	60f8      	str	r0, [r7, #12]
 80130f0:	60b9      	str	r1, [r7, #8]
 80130f2:	603b      	str	r3, [r7, #0]
 80130f4:	4613      	mov	r3, r2
 80130f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80130fc:	2300      	movs	r3, #0
 80130fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013100:	f3ef 8305 	mrs	r3, IPSR
 8013104:	617b      	str	r3, [r7, #20]
  return(result);
 8013106:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013108:	2b00      	cmp	r3, #0
 801310a:	d028      	beq.n	801315e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d005      	beq.n	801311e <osMessageQueuePut+0x36>
 8013112:	68bb      	ldr	r3, [r7, #8]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d002      	beq.n	801311e <osMessageQueuePut+0x36>
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d003      	beq.n	8013126 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801311e:	f06f 0303 	mvn.w	r3, #3
 8013122:	61fb      	str	r3, [r7, #28]
 8013124:	e038      	b.n	8013198 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013126:	2300      	movs	r3, #0
 8013128:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801312a:	f107 0210 	add.w	r2, r7, #16
 801312e:	2300      	movs	r3, #0
 8013130:	68b9      	ldr	r1, [r7, #8]
 8013132:	69b8      	ldr	r0, [r7, #24]
 8013134:	f000 fda8 	bl	8013c88 <xQueueGenericSendFromISR>
 8013138:	4603      	mov	r3, r0
 801313a:	2b01      	cmp	r3, #1
 801313c:	d003      	beq.n	8013146 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801313e:	f06f 0302 	mvn.w	r3, #2
 8013142:	61fb      	str	r3, [r7, #28]
 8013144:	e028      	b.n	8013198 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013146:	693b      	ldr	r3, [r7, #16]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d025      	beq.n	8013198 <osMessageQueuePut+0xb0>
 801314c:	4b15      	ldr	r3, [pc, #84]	; (80131a4 <osMessageQueuePut+0xbc>)
 801314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	f3bf 8f4f 	dsb	sy
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	e01c      	b.n	8013198 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d002      	beq.n	801316a <osMessageQueuePut+0x82>
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d103      	bne.n	8013172 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801316a:	f06f 0303 	mvn.w	r3, #3
 801316e:	61fb      	str	r3, [r7, #28]
 8013170:	e012      	b.n	8013198 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013172:	2300      	movs	r3, #0
 8013174:	683a      	ldr	r2, [r7, #0]
 8013176:	68b9      	ldr	r1, [r7, #8]
 8013178:	69b8      	ldr	r0, [r7, #24]
 801317a:	f000 fc87 	bl	8013a8c <xQueueGenericSend>
 801317e:	4603      	mov	r3, r0
 8013180:	2b01      	cmp	r3, #1
 8013182:	d009      	beq.n	8013198 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d003      	beq.n	8013192 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801318a:	f06f 0301 	mvn.w	r3, #1
 801318e:	61fb      	str	r3, [r7, #28]
 8013190:	e002      	b.n	8013198 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013192:	f06f 0302 	mvn.w	r3, #2
 8013196:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013198:	69fb      	ldr	r3, [r7, #28]
}
 801319a:	4618      	mov	r0, r3
 801319c:	3720      	adds	r7, #32
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd80      	pop	{r7, pc}
 80131a2:	bf00      	nop
 80131a4:	e000ed04 	.word	0xe000ed04

080131a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b088      	sub	sp, #32
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	60f8      	str	r0, [r7, #12]
 80131b0:	60b9      	str	r1, [r7, #8]
 80131b2:	607a      	str	r2, [r7, #4]
 80131b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80131ba:	2300      	movs	r3, #0
 80131bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131be:	f3ef 8305 	mrs	r3, IPSR
 80131c2:	617b      	str	r3, [r7, #20]
  return(result);
 80131c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d028      	beq.n	801321c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d005      	beq.n	80131dc <osMessageQueueGet+0x34>
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d002      	beq.n	80131dc <osMessageQueueGet+0x34>
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d003      	beq.n	80131e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80131dc:	f06f 0303 	mvn.w	r3, #3
 80131e0:	61fb      	str	r3, [r7, #28]
 80131e2:	e037      	b.n	8013254 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80131e4:	2300      	movs	r3, #0
 80131e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80131e8:	f107 0310 	add.w	r3, r7, #16
 80131ec:	461a      	mov	r2, r3
 80131ee:	68b9      	ldr	r1, [r7, #8]
 80131f0:	69b8      	ldr	r0, [r7, #24]
 80131f2:	f000 fec5 	bl	8013f80 <xQueueReceiveFromISR>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d003      	beq.n	8013204 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80131fc:	f06f 0302 	mvn.w	r3, #2
 8013200:	61fb      	str	r3, [r7, #28]
 8013202:	e027      	b.n	8013254 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d024      	beq.n	8013254 <osMessageQueueGet+0xac>
 801320a:	4b15      	ldr	r3, [pc, #84]	; (8013260 <osMessageQueueGet+0xb8>)
 801320c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013210:	601a      	str	r2, [r3, #0]
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	f3bf 8f6f 	isb	sy
 801321a:	e01b      	b.n	8013254 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d002      	beq.n	8013228 <osMessageQueueGet+0x80>
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d103      	bne.n	8013230 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013228:	f06f 0303 	mvn.w	r3, #3
 801322c:	61fb      	str	r3, [r7, #28]
 801322e:	e011      	b.n	8013254 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013230:	683a      	ldr	r2, [r7, #0]
 8013232:	68b9      	ldr	r1, [r7, #8]
 8013234:	69b8      	ldr	r0, [r7, #24]
 8013236:	f000 fdc3 	bl	8013dc0 <xQueueReceive>
 801323a:	4603      	mov	r3, r0
 801323c:	2b01      	cmp	r3, #1
 801323e:	d009      	beq.n	8013254 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d003      	beq.n	801324e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013246:	f06f 0301 	mvn.w	r3, #1
 801324a:	61fb      	str	r3, [r7, #28]
 801324c:	e002      	b.n	8013254 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801324e:	f06f 0302 	mvn.w	r3, #2
 8013252:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013254:	69fb      	ldr	r3, [r7, #28]
}
 8013256:	4618      	mov	r0, r3
 8013258:	3720      	adds	r7, #32
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	e000ed04 	.word	0xe000ed04

08013264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	4a07      	ldr	r2, [pc, #28]	; (8013290 <vApplicationGetIdleTaskMemory+0x2c>)
 8013274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	4a06      	ldr	r2, [pc, #24]	; (8013294 <vApplicationGetIdleTaskMemory+0x30>)
 801327a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2280      	movs	r2, #128	; 0x80
 8013280:	601a      	str	r2, [r3, #0]
}
 8013282:	bf00      	nop
 8013284:	3714      	adds	r7, #20
 8013286:	46bd      	mov	sp, r7
 8013288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	24001110 	.word	0x24001110
 8013294:	2400116c 	.word	0x2400116c

08013298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	60f8      	str	r0, [r7, #12]
 80132a0:	60b9      	str	r1, [r7, #8]
 80132a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	4a07      	ldr	r2, [pc, #28]	; (80132c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80132a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	4a06      	ldr	r2, [pc, #24]	; (80132c8 <vApplicationGetTimerTaskMemory+0x30>)
 80132ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80132b6:	601a      	str	r2, [r3, #0]
}
 80132b8:	bf00      	nop
 80132ba:	3714      	adds	r7, #20
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	2400136c 	.word	0x2400136c
 80132c8:	240013c8 	.word	0x240013c8

080132cc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d10a      	bne.n	80132f0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80132da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132de:	f383 8811 	msr	BASEPRI, r3
 80132e2:	f3bf 8f6f 	isb	sy
 80132e6:	f3bf 8f4f 	dsb	sy
 80132ea:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80132ec:	bf00      	nop
 80132ee:	e7fe      	b.n	80132ee <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80132f0:	2320      	movs	r3, #32
 80132f2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	2b20      	cmp	r3, #32
 80132f8:	d00a      	beq.n	8013310 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80132fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fe:	f383 8811 	msr	BASEPRI, r3
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	f3bf 8f4f 	dsb	sy
 801330a:	60fb      	str	r3, [r7, #12]
}
 801330c:	bf00      	nop
 801330e:	e7fe      	b.n	801330e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00a      	beq.n	8013330 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801331a:	697b      	ldr	r3, [r7, #20]
 801331c:	2200      	movs	r2, #0
 801331e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013320:	697b      	ldr	r3, [r7, #20]
 8013322:	3304      	adds	r3, #4
 8013324:	4618      	mov	r0, r3
 8013326:	f000 f9bf 	bl	80136a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	2201      	movs	r2, #1
 801332e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013330:	697b      	ldr	r3, [r7, #20]
	}
 8013332:	4618      	mov	r0, r3
 8013334:	3718      	adds	r7, #24
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}

0801333a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801333a:	b580      	push	{r7, lr}
 801333c:	b082      	sub	sp, #8
 801333e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013340:	2020      	movs	r0, #32
 8013342:	f002 fea1 	bl	8016088 <pvPortMalloc>
 8013346:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00a      	beq.n	8013364 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	2200      	movs	r2, #0
 8013352:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	3304      	adds	r3, #4
 8013358:	4618      	mov	r0, r3
 801335a:	f000 f9a5 	bl	80136a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2200      	movs	r2, #0
 8013362:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013364:	687b      	ldr	r3, [r7, #4]
	}
 8013366:	4618      	mov	r0, r3
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
	...

08013370 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b090      	sub	sp, #64	; 0x40
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013382:	2300      	movs	r3, #0
 8013384:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013386:	2300      	movs	r3, #0
 8013388:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10a      	bne.n	80133a6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013394:	f383 8811 	msr	BASEPRI, r3
 8013398:	f3bf 8f6f 	isb	sy
 801339c:	f3bf 8f4f 	dsb	sy
 80133a0:	623b      	str	r3, [r7, #32]
}
 80133a2:	bf00      	nop
 80133a4:	e7fe      	b.n	80133a4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d00a      	beq.n	80133c6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80133b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b4:	f383 8811 	msr	BASEPRI, r3
 80133b8:	f3bf 8f6f 	isb	sy
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	61fb      	str	r3, [r7, #28]
}
 80133c2:	bf00      	nop
 80133c4:	e7fe      	b.n	80133c4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10a      	bne.n	80133e2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d0:	f383 8811 	msr	BASEPRI, r3
 80133d4:	f3bf 8f6f 	isb	sy
 80133d8:	f3bf 8f4f 	dsb	sy
 80133dc:	61bb      	str	r3, [r7, #24]
}
 80133de:	bf00      	nop
 80133e0:	e7fe      	b.n	80133e0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80133e2:	f001 ff99 	bl	8015318 <xTaskGetSchedulerState>
 80133e6:	4603      	mov	r3, r0
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d102      	bne.n	80133f2 <xEventGroupWaitBits+0x82>
 80133ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d101      	bne.n	80133f6 <xEventGroupWaitBits+0x86>
 80133f2:	2301      	movs	r3, #1
 80133f4:	e000      	b.n	80133f8 <xEventGroupWaitBits+0x88>
 80133f6:	2300      	movs	r3, #0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10a      	bne.n	8013412 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80133fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013400:	f383 8811 	msr	BASEPRI, r3
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	f3bf 8f4f 	dsb	sy
 801340c:	617b      	str	r3, [r7, #20]
}
 801340e:	bf00      	nop
 8013410:	e7fe      	b.n	8013410 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013412:	f001 faf9 	bl	8014a08 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801341c:	683a      	ldr	r2, [r7, #0]
 801341e:	68b9      	ldr	r1, [r7, #8]
 8013420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013422:	f000 f90b 	bl	801363c <prvTestWaitCondition>
 8013426:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00e      	beq.n	801344c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013430:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013432:	2300      	movs	r3, #0
 8013434:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d028      	beq.n	801348e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	43db      	mvns	r3, r3
 8013444:	401a      	ands	r2, r3
 8013446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013448:	601a      	str	r2, [r3, #0]
 801344a:	e020      	b.n	801348e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801344c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801344e:	2b00      	cmp	r3, #0
 8013450:	d104      	bne.n	801345c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013454:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013456:	2301      	movs	r3, #1
 8013458:	633b      	str	r3, [r7, #48]	; 0x30
 801345a:	e018      	b.n	801348e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d003      	beq.n	801346a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013468:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d003      	beq.n	8013478 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013476:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347a:	1d18      	adds	r0, r3, #4
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013480:	4313      	orrs	r3, r2
 8013482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013484:	4619      	mov	r1, r3
 8013486:	f001 fcbf 	bl	8014e08 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801348a:	2300      	movs	r3, #0
 801348c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801348e:	f001 fac9 	bl	8014a24 <xTaskResumeAll>
 8013492:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013496:	2b00      	cmp	r3, #0
 8013498:	d031      	beq.n	80134fe <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	2b00      	cmp	r3, #0
 801349e:	d107      	bne.n	80134b0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80134a0:	4b19      	ldr	r3, [pc, #100]	; (8013508 <xEventGroupWaitBits+0x198>)
 80134a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134a6:	601a      	str	r2, [r3, #0]
 80134a8:	f3bf 8f4f 	dsb	sy
 80134ac:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80134b0:	f001 ffbe 	bl	8015430 <uxTaskResetEventItemValue>
 80134b4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80134b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d11a      	bne.n	80134f6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80134c0:	f002 fcc0 	bl	8015e44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80134c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80134ca:	683a      	ldr	r2, [r7, #0]
 80134cc:	68b9      	ldr	r1, [r7, #8]
 80134ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80134d0:	f000 f8b4 	bl	801363c <prvTestWaitCondition>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d009      	beq.n	80134ee <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d006      	beq.n	80134ee <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80134e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	43db      	mvns	r3, r3
 80134e8:	401a      	ands	r2, r3
 80134ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ec:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80134ee:	2301      	movs	r3, #1
 80134f0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80134f2:	f002 fcd7 	bl	8015ea4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80134fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80134fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013500:	4618      	mov	r0, r3
 8013502:	3740      	adds	r7, #64	; 0x40
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	e000ed04 	.word	0xe000ed04

0801350c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b08e      	sub	sp, #56	; 0x38
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013516:	2300      	movs	r3, #0
 8013518:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801351e:	2300      	movs	r3, #0
 8013520:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d10a      	bne.n	801353e <xEventGroupSetBits+0x32>
	__asm volatile
 8013528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352c:	f383 8811 	msr	BASEPRI, r3
 8013530:	f3bf 8f6f 	isb	sy
 8013534:	f3bf 8f4f 	dsb	sy
 8013538:	613b      	str	r3, [r7, #16]
}
 801353a:	bf00      	nop
 801353c:	e7fe      	b.n	801353c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013544:	2b00      	cmp	r3, #0
 8013546:	d00a      	beq.n	801355e <xEventGroupSetBits+0x52>
	__asm volatile
 8013548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354c:	f383 8811 	msr	BASEPRI, r3
 8013550:	f3bf 8f6f 	isb	sy
 8013554:	f3bf 8f4f 	dsb	sy
 8013558:	60fb      	str	r3, [r7, #12]
}
 801355a:	bf00      	nop
 801355c:	e7fe      	b.n	801355c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013560:	3304      	adds	r3, #4
 8013562:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013566:	3308      	adds	r3, #8
 8013568:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801356a:	f001 fa4d 	bl	8014a08 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	431a      	orrs	r2, r3
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013580:	e03c      	b.n	80135fc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801358e:	2300      	movs	r3, #0
 8013590:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013592:	69bb      	ldr	r3, [r7, #24]
 8013594:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013598:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801359a:	69bb      	ldr	r3, [r7, #24]
 801359c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80135a0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d108      	bne.n	80135be <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80135ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	4013      	ands	r3, r2
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d00b      	beq.n	80135d0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80135b8:	2301      	movs	r3, #1
 80135ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135bc:	e008      	b.n	80135d0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80135be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c0:	681a      	ldr	r2, [r3, #0]
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	4013      	ands	r3, r2
 80135c6:	69ba      	ldr	r2, [r7, #24]
 80135c8:	429a      	cmp	r2, r3
 80135ca:	d101      	bne.n	80135d0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80135cc:	2301      	movs	r3, #1
 80135ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80135d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d010      	beq.n	80135f8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d003      	beq.n	80135e8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80135e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135e2:	69bb      	ldr	r3, [r7, #24]
 80135e4:	4313      	orrs	r3, r2
 80135e6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80135e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80135f0:	4619      	mov	r1, r3
 80135f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80135f4:	f001 fcd4 	bl	8014fa0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80135fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135fe:	6a3b      	ldr	r3, [r7, #32]
 8013600:	429a      	cmp	r2, r3
 8013602:	d1be      	bne.n	8013582 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360a:	43db      	mvns	r3, r3
 801360c:	401a      	ands	r2, r3
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013612:	f001 fa07 	bl	8014a24 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	681b      	ldr	r3, [r3, #0]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3738      	adds	r7, #56	; 0x38
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}

08013622 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013622:	b580      	push	{r7, lr}
 8013624:	b082      	sub	sp, #8
 8013626:	af00      	add	r7, sp, #0
 8013628:	6078      	str	r0, [r7, #4]
 801362a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801362c:	6839      	ldr	r1, [r7, #0]
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7ff ff6c 	bl	801350c <xEventGroupSetBits>
}
 8013634:	bf00      	nop
 8013636:	3708      	adds	r7, #8
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}

0801363c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801363c:	b480      	push	{r7}
 801363e:	b087      	sub	sp, #28
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013648:	2300      	movs	r3, #0
 801364a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d107      	bne.n	8013662 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	68bb      	ldr	r3, [r7, #8]
 8013656:	4013      	ands	r3, r2
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00a      	beq.n	8013672 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801365c:	2301      	movs	r3, #1
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	e007      	b.n	8013672 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	4013      	ands	r3, r2
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	429a      	cmp	r2, r3
 801366c:	d101      	bne.n	8013672 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801366e:	2301      	movs	r3, #1
 8013670:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013672:	697b      	ldr	r3, [r7, #20]
}
 8013674:	4618      	mov	r0, r3
 8013676:	371c      	adds	r7, #28
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	68ba      	ldr	r2, [r7, #8]
 8013690:	68f9      	ldr	r1, [r7, #12]
 8013692:	4804      	ldr	r0, [pc, #16]	; (80136a4 <xEventGroupSetBitsFromISR+0x24>)
 8013694:	f002 fa86 	bl	8015ba4 <xTimerPendFunctionCallFromISR>
 8013698:	6178      	str	r0, [r7, #20]

		return xReturn;
 801369a:	697b      	ldr	r3, [r7, #20]
	}
 801369c:	4618      	mov	r0, r3
 801369e:	3718      	adds	r7, #24
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}
 80136a4:	08013623 	.word	0x08013623

080136a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80136a8:	b480      	push	{r7}
 80136aa:	b083      	sub	sp, #12
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f103 0208 	add.w	r2, r3, #8
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f103 0208 	add.w	r2, r3, #8
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f103 0208 	add.w	r2, r3, #8
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	2200      	movs	r2, #0
 80136da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80136dc:	bf00      	nop
 80136de:	370c      	adds	r7, #12
 80136e0:	46bd      	mov	sp, r7
 80136e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e6:	4770      	bx	lr

080136e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80136e8:	b480      	push	{r7}
 80136ea:	b083      	sub	sp, #12
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2200      	movs	r2, #0
 80136f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80136f6:	bf00      	nop
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013702:	b480      	push	{r7}
 8013704:	b085      	sub	sp, #20
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
 801370a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	689a      	ldr	r2, [r3, #8]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	683a      	ldr	r2, [r7, #0]
 8013726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	683a      	ldr	r2, [r7, #0]
 801372c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	601a      	str	r2, [r3, #0]
}
 801373e:	bf00      	nop
 8013740:	3714      	adds	r7, #20
 8013742:	46bd      	mov	sp, r7
 8013744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013748:	4770      	bx	lr

0801374a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801374a:	b480      	push	{r7}
 801374c:	b085      	sub	sp, #20
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013760:	d103      	bne.n	801376a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	691b      	ldr	r3, [r3, #16]
 8013766:	60fb      	str	r3, [r7, #12]
 8013768:	e00c      	b.n	8013784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	3308      	adds	r3, #8
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	e002      	b.n	8013778 <vListInsert+0x2e>
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	60fb      	str	r3, [r7, #12]
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	68ba      	ldr	r2, [r7, #8]
 8013780:	429a      	cmp	r2, r3
 8013782:	d2f6      	bcs.n	8013772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	685a      	ldr	r2, [r3, #4]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	683a      	ldr	r2, [r7, #0]
 8013792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	68fa      	ldr	r2, [r7, #12]
 8013798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	683a      	ldr	r2, [r7, #0]
 801379e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	687a      	ldr	r2, [r7, #4]
 80137a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	1c5a      	adds	r2, r3, #1
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	601a      	str	r2, [r3, #0]
}
 80137b0:	bf00      	nop
 80137b2:	3714      	adds	r7, #20
 80137b4:	46bd      	mov	sp, r7
 80137b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ba:	4770      	bx	lr

080137bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80137bc:	b480      	push	{r7}
 80137be:	b085      	sub	sp, #20
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	691b      	ldr	r3, [r3, #16]
 80137c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	6892      	ldr	r2, [r2, #8]
 80137d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	689b      	ldr	r3, [r3, #8]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	6852      	ldr	r2, [r2, #4]
 80137dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d103      	bne.n	80137f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	689a      	ldr	r2, [r3, #8]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	1e5a      	subs	r2, r3, #1
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3714      	adds	r7, #20
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr

08013810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b084      	sub	sp, #16
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10a      	bne.n	801383a <xQueueGenericReset+0x2a>
	__asm volatile
 8013824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	60bb      	str	r3, [r7, #8]
}
 8013836:	bf00      	nop
 8013838:	e7fe      	b.n	8013838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801383a:	f002 fb03 	bl	8015e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	681a      	ldr	r2, [r3, #0]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013846:	68f9      	ldr	r1, [r7, #12]
 8013848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801384a:	fb01 f303 	mul.w	r3, r1, r3
 801384e:	441a      	add	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2200      	movs	r2, #0
 8013858:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681a      	ldr	r2, [r3, #0]
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	681a      	ldr	r2, [r3, #0]
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801386a:	3b01      	subs	r3, #1
 801386c:	68f9      	ldr	r1, [r7, #12]
 801386e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013870:	fb01 f303 	mul.w	r3, r1, r3
 8013874:	441a      	add	r2, r3
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	22ff      	movs	r2, #255	; 0xff
 801387e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	22ff      	movs	r2, #255	; 0xff
 8013886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d114      	bne.n	80138ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	691b      	ldr	r3, [r3, #16]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d01a      	beq.n	80138ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	3310      	adds	r3, #16
 801389c:	4618      	mov	r0, r3
 801389e:	f001 fb1b 	bl	8014ed8 <xTaskRemoveFromEventList>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d012      	beq.n	80138ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80138a8:	4b0c      	ldr	r3, [pc, #48]	; (80138dc <xQueueGenericReset+0xcc>)
 80138aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	f3bf 8f6f 	isb	sy
 80138b8:	e009      	b.n	80138ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	3310      	adds	r3, #16
 80138be:	4618      	mov	r0, r3
 80138c0:	f7ff fef2 	bl	80136a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	3324      	adds	r3, #36	; 0x24
 80138c8:	4618      	mov	r0, r3
 80138ca:	f7ff feed 	bl	80136a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80138ce:	f002 fae9 	bl	8015ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80138d2:	2301      	movs	r3, #1
}
 80138d4:	4618      	mov	r0, r3
 80138d6:	3710      	adds	r7, #16
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}
 80138dc:	e000ed04 	.word	0xe000ed04

080138e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08e      	sub	sp, #56	; 0x38
 80138e4:	af02      	add	r7, sp, #8
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
 80138ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d10a      	bne.n	801390a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80138f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f8:	f383 8811 	msr	BASEPRI, r3
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	f3bf 8f4f 	dsb	sy
 8013904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013906:	bf00      	nop
 8013908:	e7fe      	b.n	8013908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d10a      	bne.n	8013926 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	f383 8811 	msr	BASEPRI, r3
 8013918:	f3bf 8f6f 	isb	sy
 801391c:	f3bf 8f4f 	dsb	sy
 8013920:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013922:	bf00      	nop
 8013924:	e7fe      	b.n	8013924 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <xQueueGenericCreateStatic+0x52>
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <xQueueGenericCreateStatic+0x56>
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <xQueueGenericCreateStatic+0x58>
 8013936:	2300      	movs	r3, #0
 8013938:	2b00      	cmp	r3, #0
 801393a:	d10a      	bne.n	8013952 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013940:	f383 8811 	msr	BASEPRI, r3
 8013944:	f3bf 8f6f 	isb	sy
 8013948:	f3bf 8f4f 	dsb	sy
 801394c:	623b      	str	r3, [r7, #32]
}
 801394e:	bf00      	nop
 8013950:	e7fe      	b.n	8013950 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d102      	bne.n	801395e <xQueueGenericCreateStatic+0x7e>
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d101      	bne.n	8013962 <xQueueGenericCreateStatic+0x82>
 801395e:	2301      	movs	r3, #1
 8013960:	e000      	b.n	8013964 <xQueueGenericCreateStatic+0x84>
 8013962:	2300      	movs	r3, #0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d10a      	bne.n	801397e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801396c:	f383 8811 	msr	BASEPRI, r3
 8013970:	f3bf 8f6f 	isb	sy
 8013974:	f3bf 8f4f 	dsb	sy
 8013978:	61fb      	str	r3, [r7, #28]
}
 801397a:	bf00      	nop
 801397c:	e7fe      	b.n	801397c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801397e:	2350      	movs	r3, #80	; 0x50
 8013980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b50      	cmp	r3, #80	; 0x50
 8013986:	d00a      	beq.n	801399e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801398c:	f383 8811 	msr	BASEPRI, r3
 8013990:	f3bf 8f6f 	isb	sy
 8013994:	f3bf 8f4f 	dsb	sy
 8013998:	61bb      	str	r3, [r7, #24]
}
 801399a:	bf00      	nop
 801399c:	e7fe      	b.n	801399c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801399e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80139a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d00d      	beq.n	80139c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	2201      	movs	r2, #1
 80139ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80139b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80139b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b8:	9300      	str	r3, [sp, #0]
 80139ba:	4613      	mov	r3, r2
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	68b9      	ldr	r1, [r7, #8]
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f000 f83f 	bl	8013a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80139c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80139c8:	4618      	mov	r0, r3
 80139ca:	3730      	adds	r7, #48	; 0x30
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b08a      	sub	sp, #40	; 0x28
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	4613      	mov	r3, r2
 80139dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10a      	bne.n	80139fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	613b      	str	r3, [r7, #16]
}
 80139f6:	bf00      	nop
 80139f8:	e7fe      	b.n	80139f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	68ba      	ldr	r2, [r7, #8]
 80139fe:	fb02 f303 	mul.w	r3, r2, r3
 8013a02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	3350      	adds	r3, #80	; 0x50
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f002 fb3d 	bl	8016088 <pvPortMalloc>
 8013a0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d011      	beq.n	8013a3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	3350      	adds	r3, #80	; 0x50
 8013a1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	2200      	movs	r2, #0
 8013a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013a28:	79fa      	ldrb	r2, [r7, #7]
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	4613      	mov	r3, r2
 8013a30:	697a      	ldr	r2, [r7, #20]
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f000 f805 	bl	8013a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3720      	adds	r7, #32
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}

08013a44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b084      	sub	sp, #16
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	60f8      	str	r0, [r7, #12]
 8013a4c:	60b9      	str	r1, [r7, #8]
 8013a4e:	607a      	str	r2, [r7, #4]
 8013a50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d103      	bne.n	8013a60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013a58:	69bb      	ldr	r3, [r7, #24]
 8013a5a:	69ba      	ldr	r2, [r7, #24]
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	e002      	b.n	8013a66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	68fa      	ldr	r2, [r7, #12]
 8013a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013a6c:	69bb      	ldr	r3, [r7, #24]
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013a72:	2101      	movs	r1, #1
 8013a74:	69b8      	ldr	r0, [r7, #24]
 8013a76:	f7ff fecb 	bl	8013810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	78fa      	ldrb	r2, [r7, #3]
 8013a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013a82:	bf00      	nop
 8013a84:	3710      	adds	r7, #16
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}
	...

08013a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b08e      	sub	sp, #56	; 0x38
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d10a      	bne.n	8013abe <xQueueGenericSend+0x32>
	__asm volatile
 8013aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aac:	f383 8811 	msr	BASEPRI, r3
 8013ab0:	f3bf 8f6f 	isb	sy
 8013ab4:	f3bf 8f4f 	dsb	sy
 8013ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013aba:	bf00      	nop
 8013abc:	e7fe      	b.n	8013abc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d103      	bne.n	8013acc <xQueueGenericSend+0x40>
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d101      	bne.n	8013ad0 <xQueueGenericSend+0x44>
 8013acc:	2301      	movs	r3, #1
 8013ace:	e000      	b.n	8013ad2 <xQueueGenericSend+0x46>
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d10a      	bne.n	8013aec <xQueueGenericSend+0x60>
	__asm volatile
 8013ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ada:	f383 8811 	msr	BASEPRI, r3
 8013ade:	f3bf 8f6f 	isb	sy
 8013ae2:	f3bf 8f4f 	dsb	sy
 8013ae6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ae8:	bf00      	nop
 8013aea:	e7fe      	b.n	8013aea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	2b02      	cmp	r3, #2
 8013af0:	d103      	bne.n	8013afa <xQueueGenericSend+0x6e>
 8013af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013af6:	2b01      	cmp	r3, #1
 8013af8:	d101      	bne.n	8013afe <xQueueGenericSend+0x72>
 8013afa:	2301      	movs	r3, #1
 8013afc:	e000      	b.n	8013b00 <xQueueGenericSend+0x74>
 8013afe:	2300      	movs	r3, #0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d10a      	bne.n	8013b1a <xQueueGenericSend+0x8e>
	__asm volatile
 8013b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b08:	f383 8811 	msr	BASEPRI, r3
 8013b0c:	f3bf 8f6f 	isb	sy
 8013b10:	f3bf 8f4f 	dsb	sy
 8013b14:	623b      	str	r3, [r7, #32]
}
 8013b16:	bf00      	nop
 8013b18:	e7fe      	b.n	8013b18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013b1a:	f001 fbfd 	bl	8015318 <xTaskGetSchedulerState>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d102      	bne.n	8013b2a <xQueueGenericSend+0x9e>
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d101      	bne.n	8013b2e <xQueueGenericSend+0xa2>
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	e000      	b.n	8013b30 <xQueueGenericSend+0xa4>
 8013b2e:	2300      	movs	r3, #0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d10a      	bne.n	8013b4a <xQueueGenericSend+0xbe>
	__asm volatile
 8013b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b38:	f383 8811 	msr	BASEPRI, r3
 8013b3c:	f3bf 8f6f 	isb	sy
 8013b40:	f3bf 8f4f 	dsb	sy
 8013b44:	61fb      	str	r3, [r7, #28]
}
 8013b46:	bf00      	nop
 8013b48:	e7fe      	b.n	8013b48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013b4a:	f002 f97b 	bl	8015e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d302      	bcc.n	8013b60 <xQueueGenericSend+0xd4>
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	2b02      	cmp	r3, #2
 8013b5e:	d129      	bne.n	8013bb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b60:	683a      	ldr	r2, [r7, #0]
 8013b62:	68b9      	ldr	r1, [r7, #8]
 8013b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b66:	f000 fa8b 	bl	8014080 <prvCopyDataToQueue>
 8013b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d010      	beq.n	8013b96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b76:	3324      	adds	r3, #36	; 0x24
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f001 f9ad 	bl	8014ed8 <xTaskRemoveFromEventList>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d013      	beq.n	8013bac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013b84:	4b3f      	ldr	r3, [pc, #252]	; (8013c84 <xQueueGenericSend+0x1f8>)
 8013b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b8a:	601a      	str	r2, [r3, #0]
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	f3bf 8f6f 	isb	sy
 8013b94:	e00a      	b.n	8013bac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d007      	beq.n	8013bac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013b9c:	4b39      	ldr	r3, [pc, #228]	; (8013c84 <xQueueGenericSend+0x1f8>)
 8013b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ba2:	601a      	str	r2, [r3, #0]
 8013ba4:	f3bf 8f4f 	dsb	sy
 8013ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013bac:	f002 f97a 	bl	8015ea4 <vPortExitCritical>
				return pdPASS;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	e063      	b.n	8013c7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d103      	bne.n	8013bc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013bba:	f002 f973 	bl	8015ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	e05c      	b.n	8013c7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d106      	bne.n	8013bd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013bc8:	f107 0314 	add.w	r3, r7, #20
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f001 fa49 	bl	8015064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013bd6:	f002 f965 	bl	8015ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013bda:	f000 ff15 	bl	8014a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013bde:	f002 f931 	bl	8015e44 <vPortEnterCritical>
 8013be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013be8:	b25b      	sxtb	r3, r3
 8013bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bee:	d103      	bne.n	8013bf8 <xQueueGenericSend+0x16c>
 8013bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013bfe:	b25b      	sxtb	r3, r3
 8013c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c04:	d103      	bne.n	8013c0e <xQueueGenericSend+0x182>
 8013c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c08:	2200      	movs	r2, #0
 8013c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013c0e:	f002 f949 	bl	8015ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013c12:	1d3a      	adds	r2, r7, #4
 8013c14:	f107 0314 	add.w	r3, r7, #20
 8013c18:	4611      	mov	r1, r2
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f001 fa38 	bl	8015090 <xTaskCheckForTimeOut>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d124      	bne.n	8013c70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c28:	f000 fb22 	bl	8014270 <prvIsQueueFull>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d018      	beq.n	8013c64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	3310      	adds	r3, #16
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	4611      	mov	r1, r2
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f001 f8c0 	bl	8014dc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c42:	f000 faad 	bl	80141a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013c46:	f000 feed 	bl	8014a24 <xTaskResumeAll>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	f47f af7c 	bne.w	8013b4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013c52:	4b0c      	ldr	r3, [pc, #48]	; (8013c84 <xQueueGenericSend+0x1f8>)
 8013c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c58:	601a      	str	r2, [r3, #0]
 8013c5a:	f3bf 8f4f 	dsb	sy
 8013c5e:	f3bf 8f6f 	isb	sy
 8013c62:	e772      	b.n	8013b4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c66:	f000 fa9b 	bl	80141a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013c6a:	f000 fedb 	bl	8014a24 <xTaskResumeAll>
 8013c6e:	e76c      	b.n	8013b4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c72:	f000 fa95 	bl	80141a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013c76:	f000 fed5 	bl	8014a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3738      	adds	r7, #56	; 0x38
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	e000ed04 	.word	0xe000ed04

08013c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b090      	sub	sp, #64	; 0x40
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
 8013c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10a      	bne.n	8013cb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013cb2:	bf00      	nop
 8013cb4:	e7fe      	b.n	8013cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d103      	bne.n	8013cc4 <xQueueGenericSendFromISR+0x3c>
 8013cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <xQueueGenericSendFromISR+0x40>
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e000      	b.n	8013cca <xQueueGenericSendFromISR+0x42>
 8013cc8:	2300      	movs	r3, #0
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d10a      	bne.n	8013ce4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd2:	f383 8811 	msr	BASEPRI, r3
 8013cd6:	f3bf 8f6f 	isb	sy
 8013cda:	f3bf 8f4f 	dsb	sy
 8013cde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013ce0:	bf00      	nop
 8013ce2:	e7fe      	b.n	8013ce2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	2b02      	cmp	r3, #2
 8013ce8:	d103      	bne.n	8013cf2 <xQueueGenericSendFromISR+0x6a>
 8013cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d101      	bne.n	8013cf6 <xQueueGenericSendFromISR+0x6e>
 8013cf2:	2301      	movs	r3, #1
 8013cf4:	e000      	b.n	8013cf8 <xQueueGenericSendFromISR+0x70>
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d10a      	bne.n	8013d12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d00:	f383 8811 	msr	BASEPRI, r3
 8013d04:	f3bf 8f6f 	isb	sy
 8013d08:	f3bf 8f4f 	dsb	sy
 8013d0c:	623b      	str	r3, [r7, #32]
}
 8013d0e:	bf00      	nop
 8013d10:	e7fe      	b.n	8013d10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d12:	f002 f979 	bl	8016008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013d16:	f3ef 8211 	mrs	r2, BASEPRI
 8013d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1e:	f383 8811 	msr	BASEPRI, r3
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	f3bf 8f4f 	dsb	sy
 8013d2a:	61fa      	str	r2, [r7, #28]
 8013d2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013d2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013d30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d302      	bcc.n	8013d44 <xQueueGenericSendFromISR+0xbc>
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d12f      	bne.n	8013da4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013d54:	683a      	ldr	r2, [r7, #0]
 8013d56:	68b9      	ldr	r1, [r7, #8]
 8013d58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013d5a:	f000 f991 	bl	8014080 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013d5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d66:	d112      	bne.n	8013d8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d016      	beq.n	8013d9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d72:	3324      	adds	r3, #36	; 0x24
 8013d74:	4618      	mov	r0, r3
 8013d76:	f001 f8af 	bl	8014ed8 <xTaskRemoveFromEventList>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00e      	beq.n	8013d9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d00b      	beq.n	8013d9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	601a      	str	r2, [r3, #0]
 8013d8c:	e007      	b.n	8013d9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013d92:	3301      	adds	r3, #1
 8013d94:	b2db      	uxtb	r3, r3
 8013d96:	b25a      	sxtb	r2, r3
 8013d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013da2:	e001      	b.n	8013da8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013da4:	2300      	movs	r3, #0
 8013da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013daa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013db2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3740      	adds	r7, #64	; 0x40
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
	...

08013dc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b08c      	sub	sp, #48	; 0x30
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d10a      	bne.n	8013df0 <xQueueReceive+0x30>
	__asm volatile
 8013dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dde:	f383 8811 	msr	BASEPRI, r3
 8013de2:	f3bf 8f6f 	isb	sy
 8013de6:	f3bf 8f4f 	dsb	sy
 8013dea:	623b      	str	r3, [r7, #32]
}
 8013dec:	bf00      	nop
 8013dee:	e7fe      	b.n	8013dee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d103      	bne.n	8013dfe <xQueueReceive+0x3e>
 8013df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d101      	bne.n	8013e02 <xQueueReceive+0x42>
 8013dfe:	2301      	movs	r3, #1
 8013e00:	e000      	b.n	8013e04 <xQueueReceive+0x44>
 8013e02:	2300      	movs	r3, #0
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d10a      	bne.n	8013e1e <xQueueReceive+0x5e>
	__asm volatile
 8013e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e0c:	f383 8811 	msr	BASEPRI, r3
 8013e10:	f3bf 8f6f 	isb	sy
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	61fb      	str	r3, [r7, #28]
}
 8013e1a:	bf00      	nop
 8013e1c:	e7fe      	b.n	8013e1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e1e:	f001 fa7b 	bl	8015318 <xTaskGetSchedulerState>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d102      	bne.n	8013e2e <xQueueReceive+0x6e>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <xQueueReceive+0x72>
 8013e2e:	2301      	movs	r3, #1
 8013e30:	e000      	b.n	8013e34 <xQueueReceive+0x74>
 8013e32:	2300      	movs	r3, #0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d10a      	bne.n	8013e4e <xQueueReceive+0x8e>
	__asm volatile
 8013e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e3c:	f383 8811 	msr	BASEPRI, r3
 8013e40:	f3bf 8f6f 	isb	sy
 8013e44:	f3bf 8f4f 	dsb	sy
 8013e48:	61bb      	str	r3, [r7, #24]
}
 8013e4a:	bf00      	nop
 8013e4c:	e7fe      	b.n	8013e4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013e4e:	f001 fff9 	bl	8015e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d01f      	beq.n	8013e9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e5e:	68b9      	ldr	r1, [r7, #8]
 8013e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e62:	f000 f977 	bl	8014154 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e68:	1e5a      	subs	r2, r3, #1
 8013e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e70:	691b      	ldr	r3, [r3, #16]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d00f      	beq.n	8013e96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e78:	3310      	adds	r3, #16
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f001 f82c 	bl	8014ed8 <xTaskRemoveFromEventList>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d007      	beq.n	8013e96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013e86:	4b3d      	ldr	r3, [pc, #244]	; (8013f7c <xQueueReceive+0x1bc>)
 8013e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013e96:	f002 f805 	bl	8015ea4 <vPortExitCritical>
				return pdPASS;
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e069      	b.n	8013f72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d103      	bne.n	8013eac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ea4:	f001 fffe 	bl	8015ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	e062      	b.n	8013f72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d106      	bne.n	8013ec0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013eb2:	f107 0310 	add.w	r3, r7, #16
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f001 f8d4 	bl	8015064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ec0:	f001 fff0 	bl	8015ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ec4:	f000 fda0 	bl	8014a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ec8:	f001 ffbc 	bl	8015e44 <vPortEnterCritical>
 8013ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ed2:	b25b      	sxtb	r3, r3
 8013ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ed8:	d103      	bne.n	8013ee2 <xQueueReceive+0x122>
 8013eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013edc:	2200      	movs	r2, #0
 8013ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013ee8:	b25b      	sxtb	r3, r3
 8013eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013eee:	d103      	bne.n	8013ef8 <xQueueReceive+0x138>
 8013ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013ef8:	f001 ffd4 	bl	8015ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013efc:	1d3a      	adds	r2, r7, #4
 8013efe:	f107 0310 	add.w	r3, r7, #16
 8013f02:	4611      	mov	r1, r2
 8013f04:	4618      	mov	r0, r3
 8013f06:	f001 f8c3 	bl	8015090 <xTaskCheckForTimeOut>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d123      	bne.n	8013f58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f12:	f000 f997 	bl	8014244 <prvIsQueueEmpty>
 8013f16:	4603      	mov	r3, r0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d017      	beq.n	8013f4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f1e:	3324      	adds	r3, #36	; 0x24
 8013f20:	687a      	ldr	r2, [r7, #4]
 8013f22:	4611      	mov	r1, r2
 8013f24:	4618      	mov	r0, r3
 8013f26:	f000 ff4b 	bl	8014dc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f2c:	f000 f938 	bl	80141a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f30:	f000 fd78 	bl	8014a24 <xTaskResumeAll>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d189      	bne.n	8013e4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013f3a:	4b10      	ldr	r3, [pc, #64]	; (8013f7c <xQueueReceive+0x1bc>)
 8013f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f40:	601a      	str	r2, [r3, #0]
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	f3bf 8f6f 	isb	sy
 8013f4a:	e780      	b.n	8013e4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f4e:	f000 f927 	bl	80141a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013f52:	f000 fd67 	bl	8014a24 <xTaskResumeAll>
 8013f56:	e77a      	b.n	8013e4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f5a:	f000 f921 	bl	80141a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013f5e:	f000 fd61 	bl	8014a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f64:	f000 f96e 	bl	8014244 <prvIsQueueEmpty>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f43f af6f 	beq.w	8013e4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3730      	adds	r7, #48	; 0x30
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}
 8013f7a:	bf00      	nop
 8013f7c:	e000ed04 	.word	0xe000ed04

08013f80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b08e      	sub	sp, #56	; 0x38
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10a      	bne.n	8013fac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	623b      	str	r3, [r7, #32]
}
 8013fa8:	bf00      	nop
 8013faa:	e7fe      	b.n	8013faa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d103      	bne.n	8013fba <xQueueReceiveFromISR+0x3a>
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <xQueueReceiveFromISR+0x3e>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e000      	b.n	8013fc0 <xQueueReceiveFromISR+0x40>
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d10a      	bne.n	8013fda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fc8:	f383 8811 	msr	BASEPRI, r3
 8013fcc:	f3bf 8f6f 	isb	sy
 8013fd0:	f3bf 8f4f 	dsb	sy
 8013fd4:	61fb      	str	r3, [r7, #28]
}
 8013fd6:	bf00      	nop
 8013fd8:	e7fe      	b.n	8013fd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013fda:	f002 f815 	bl	8016008 <vPortValidateInterruptPriority>
	__asm volatile
 8013fde:	f3ef 8211 	mrs	r2, BASEPRI
 8013fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe6:	f383 8811 	msr	BASEPRI, r3
 8013fea:	f3bf 8f6f 	isb	sy
 8013fee:	f3bf 8f4f 	dsb	sy
 8013ff2:	61ba      	str	r2, [r7, #24]
 8013ff4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013ff6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ffe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014002:	2b00      	cmp	r3, #0
 8014004:	d02f      	beq.n	8014066 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801400c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014010:	68b9      	ldr	r1, [r7, #8]
 8014012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014014:	f000 f89e 	bl	8014154 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	1e5a      	subs	r2, r3, #1
 801401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014020:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014028:	d112      	bne.n	8014050 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402c:	691b      	ldr	r3, [r3, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d016      	beq.n	8014060 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014034:	3310      	adds	r3, #16
 8014036:	4618      	mov	r0, r3
 8014038:	f000 ff4e 	bl	8014ed8 <xTaskRemoveFromEventList>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d00e      	beq.n	8014060 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d00b      	beq.n	8014060 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2201      	movs	r2, #1
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	e007      	b.n	8014060 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014054:	3301      	adds	r3, #1
 8014056:	b2db      	uxtb	r3, r3
 8014058:	b25a      	sxtb	r2, r3
 801405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014060:	2301      	movs	r3, #1
 8014062:	637b      	str	r3, [r7, #52]	; 0x34
 8014064:	e001      	b.n	801406a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014066:	2300      	movs	r3, #0
 8014068:	637b      	str	r3, [r7, #52]	; 0x34
 801406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	f383 8811 	msr	BASEPRI, r3
}
 8014074:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014078:	4618      	mov	r0, r3
 801407a:	3738      	adds	r7, #56	; 0x38
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b086      	sub	sp, #24
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801408c:	2300      	movs	r3, #0
 801408e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014094:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801409a:	2b00      	cmp	r3, #0
 801409c:	d10d      	bne.n	80140ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d14d      	bne.n	8014142 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	689b      	ldr	r3, [r3, #8]
 80140aa:	4618      	mov	r0, r3
 80140ac:	f001 f952 	bl	8015354 <xTaskPriorityDisinherit>
 80140b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	2200      	movs	r2, #0
 80140b6:	609a      	str	r2, [r3, #8]
 80140b8:	e043      	b.n	8014142 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d119      	bne.n	80140f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	6858      	ldr	r0, [r3, #4]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140c8:	461a      	mov	r2, r3
 80140ca:	68b9      	ldr	r1, [r7, #8]
 80140cc:	f002 fa00 	bl	80164d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	685a      	ldr	r2, [r3, #4]
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140d8:	441a      	add	r2, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	685a      	ldr	r2, [r3, #4]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d32b      	bcc.n	8014142 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	681a      	ldr	r2, [r3, #0]
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	605a      	str	r2, [r3, #4]
 80140f2:	e026      	b.n	8014142 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	68d8      	ldr	r0, [r3, #12]
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80140fc:	461a      	mov	r2, r3
 80140fe:	68b9      	ldr	r1, [r7, #8]
 8014100:	f002 f9e6 	bl	80164d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	68da      	ldr	r2, [r3, #12]
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801410c:	425b      	negs	r3, r3
 801410e:	441a      	add	r2, r3
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	68da      	ldr	r2, [r3, #12]
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	429a      	cmp	r2, r3
 801411e:	d207      	bcs.n	8014130 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	689a      	ldr	r2, [r3, #8]
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014128:	425b      	negs	r3, r3
 801412a:	441a      	add	r2, r3
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2b02      	cmp	r3, #2
 8014134:	d105      	bne.n	8014142 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d002      	beq.n	8014142 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	3b01      	subs	r3, #1
 8014140:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	1c5a      	adds	r2, r3, #1
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801414a:	697b      	ldr	r3, [r7, #20]
}
 801414c:	4618      	mov	r0, r3
 801414e:	3718      	adds	r7, #24
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}

08014154 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014162:	2b00      	cmp	r3, #0
 8014164:	d018      	beq.n	8014198 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	68da      	ldr	r2, [r3, #12]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801416e:	441a      	add	r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	68da      	ldr	r2, [r3, #12]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	689b      	ldr	r3, [r3, #8]
 801417c:	429a      	cmp	r2, r3
 801417e:	d303      	bcc.n	8014188 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681a      	ldr	r2, [r3, #0]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	68d9      	ldr	r1, [r3, #12]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014190:	461a      	mov	r2, r3
 8014192:	6838      	ldr	r0, [r7, #0]
 8014194:	f002 f99c 	bl	80164d0 <memcpy>
	}
}
 8014198:	bf00      	nop
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b084      	sub	sp, #16
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80141a8:	f001 fe4c 	bl	8015e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80141b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80141b4:	e011      	b.n	80141da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d012      	beq.n	80141e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	3324      	adds	r3, #36	; 0x24
 80141c2:	4618      	mov	r0, r3
 80141c4:	f000 fe88 	bl	8014ed8 <xTaskRemoveFromEventList>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80141ce:	f000 ffc1 	bl	8015154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80141d2:	7bfb      	ldrb	r3, [r7, #15]
 80141d4:	3b01      	subs	r3, #1
 80141d6:	b2db      	uxtb	r3, r3
 80141d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80141da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	dce9      	bgt.n	80141b6 <prvUnlockQueue+0x16>
 80141e2:	e000      	b.n	80141e6 <prvUnlockQueue+0x46>
					break;
 80141e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	22ff      	movs	r2, #255	; 0xff
 80141ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80141ee:	f001 fe59 	bl	8015ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80141f2:	f001 fe27 	bl	8015e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80141fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80141fe:	e011      	b.n	8014224 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d012      	beq.n	801422e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3310      	adds	r3, #16
 801420c:	4618      	mov	r0, r3
 801420e:	f000 fe63 	bl	8014ed8 <xTaskRemoveFromEventList>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d001      	beq.n	801421c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014218:	f000 ff9c 	bl	8015154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801421c:	7bbb      	ldrb	r3, [r7, #14]
 801421e:	3b01      	subs	r3, #1
 8014220:	b2db      	uxtb	r3, r3
 8014222:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014228:	2b00      	cmp	r3, #0
 801422a:	dce9      	bgt.n	8014200 <prvUnlockQueue+0x60>
 801422c:	e000      	b.n	8014230 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801422e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	22ff      	movs	r2, #255	; 0xff
 8014234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014238:	f001 fe34 	bl	8015ea4 <vPortExitCritical>
}
 801423c:	bf00      	nop
 801423e:	3710      	adds	r7, #16
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b084      	sub	sp, #16
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801424c:	f001 fdfa 	bl	8015e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014254:	2b00      	cmp	r3, #0
 8014256:	d102      	bne.n	801425e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014258:	2301      	movs	r3, #1
 801425a:	60fb      	str	r3, [r7, #12]
 801425c:	e001      	b.n	8014262 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801425e:	2300      	movs	r3, #0
 8014260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014262:	f001 fe1f 	bl	8015ea4 <vPortExitCritical>

	return xReturn;
 8014266:	68fb      	ldr	r3, [r7, #12]
}
 8014268:	4618      	mov	r0, r3
 801426a:	3710      	adds	r7, #16
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014270:	b580      	push	{r7, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014278:	f001 fde4 	bl	8015e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014284:	429a      	cmp	r2, r3
 8014286:	d102      	bne.n	801428e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	60fb      	str	r3, [r7, #12]
 801428c:	e001      	b.n	8014292 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801428e:	2300      	movs	r3, #0
 8014290:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014292:	f001 fe07 	bl	8015ea4 <vPortExitCritical>

	return xReturn;
 8014296:	68fb      	ldr	r3, [r7, #12]
}
 8014298:	4618      	mov	r0, r3
 801429a:	3710      	adds	r7, #16
 801429c:	46bd      	mov	sp, r7
 801429e:	bd80      	pop	{r7, pc}

080142a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80142a0:	b480      	push	{r7}
 80142a2:	b085      	sub	sp, #20
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80142aa:	2300      	movs	r3, #0
 80142ac:	60fb      	str	r3, [r7, #12]
 80142ae:	e014      	b.n	80142da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80142b0:	4a0f      	ldr	r2, [pc, #60]	; (80142f0 <vQueueAddToRegistry+0x50>)
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d10b      	bne.n	80142d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80142bc:	490c      	ldr	r1, [pc, #48]	; (80142f0 <vQueueAddToRegistry+0x50>)
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	683a      	ldr	r2, [r7, #0]
 80142c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80142c6:	4a0a      	ldr	r2, [pc, #40]	; (80142f0 <vQueueAddToRegistry+0x50>)
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	4413      	add	r3, r2
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80142d2:	e006      	b.n	80142e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	3301      	adds	r3, #1
 80142d8:	60fb      	str	r3, [r7, #12]
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	2b07      	cmp	r3, #7
 80142de:	d9e7      	bls.n	80142b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80142e0:	bf00      	nop
 80142e2:	bf00      	nop
 80142e4:	3714      	adds	r7, #20
 80142e6:	46bd      	mov	sp, r7
 80142e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ec:	4770      	bx	lr
 80142ee:	bf00      	nop
 80142f0:	240017c8 	.word	0x240017c8

080142f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b086      	sub	sp, #24
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014304:	f001 fd9e 	bl	8015e44 <vPortEnterCritical>
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801430e:	b25b      	sxtb	r3, r3
 8014310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014314:	d103      	bne.n	801431e <vQueueWaitForMessageRestricted+0x2a>
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2200      	movs	r2, #0
 801431a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014324:	b25b      	sxtb	r3, r3
 8014326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801432a:	d103      	bne.n	8014334 <vQueueWaitForMessageRestricted+0x40>
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	2200      	movs	r2, #0
 8014330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014334:	f001 fdb6 	bl	8015ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014338:	697b      	ldr	r3, [r7, #20]
 801433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801433c:	2b00      	cmp	r3, #0
 801433e:	d106      	bne.n	801434e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	3324      	adds	r3, #36	; 0x24
 8014344:	687a      	ldr	r2, [r7, #4]
 8014346:	68b9      	ldr	r1, [r7, #8]
 8014348:	4618      	mov	r0, r3
 801434a:	f000 fd99 	bl	8014e80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801434e:	6978      	ldr	r0, [r7, #20]
 8014350:	f7ff ff26 	bl	80141a0 <prvUnlockQueue>
	}
 8014354:	bf00      	nop
 8014356:	3718      	adds	r7, #24
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801435c:	b580      	push	{r7, lr}
 801435e:	b08e      	sub	sp, #56	; 0x38
 8014360:	af04      	add	r7, sp, #16
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
 8014368:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10a      	bne.n	8014386 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	623b      	str	r3, [r7, #32]
}
 8014382:	bf00      	nop
 8014384:	e7fe      	b.n	8014384 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10a      	bne.n	80143a2 <xTaskCreateStatic+0x46>
	__asm volatile
 801438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014390:	f383 8811 	msr	BASEPRI, r3
 8014394:	f3bf 8f6f 	isb	sy
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	61fb      	str	r3, [r7, #28]
}
 801439e:	bf00      	nop
 80143a0:	e7fe      	b.n	80143a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80143a2:	235c      	movs	r3, #92	; 0x5c
 80143a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	2b5c      	cmp	r3, #92	; 0x5c
 80143aa:	d00a      	beq.n	80143c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80143ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b0:	f383 8811 	msr	BASEPRI, r3
 80143b4:	f3bf 8f6f 	isb	sy
 80143b8:	f3bf 8f4f 	dsb	sy
 80143bc:	61bb      	str	r3, [r7, #24]
}
 80143be:	bf00      	nop
 80143c0:	e7fe      	b.n	80143c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80143c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80143c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d01e      	beq.n	8014408 <xTaskCreateStatic+0xac>
 80143ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d01b      	beq.n	8014408 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80143d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80143da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143dc:	2202      	movs	r2, #2
 80143de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80143e2:	2300      	movs	r3, #0
 80143e4:	9303      	str	r3, [sp, #12]
 80143e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e8:	9302      	str	r3, [sp, #8]
 80143ea:	f107 0314 	add.w	r3, r7, #20
 80143ee:	9301      	str	r3, [sp, #4]
 80143f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f2:	9300      	str	r3, [sp, #0]
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	687a      	ldr	r2, [r7, #4]
 80143f8:	68b9      	ldr	r1, [r7, #8]
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	f000 f850 	bl	80144a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014402:	f000 f8dd 	bl	80145c0 <prvAddNewTaskToReadyList>
 8014406:	e001      	b.n	801440c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014408:	2300      	movs	r3, #0
 801440a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801440c:	697b      	ldr	r3, [r7, #20]
	}
 801440e:	4618      	mov	r0, r3
 8014410:	3728      	adds	r7, #40	; 0x28
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}

08014416 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014416:	b580      	push	{r7, lr}
 8014418:	b08c      	sub	sp, #48	; 0x30
 801441a:	af04      	add	r7, sp, #16
 801441c:	60f8      	str	r0, [r7, #12]
 801441e:	60b9      	str	r1, [r7, #8]
 8014420:	603b      	str	r3, [r7, #0]
 8014422:	4613      	mov	r3, r2
 8014424:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014426:	88fb      	ldrh	r3, [r7, #6]
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	4618      	mov	r0, r3
 801442c:	f001 fe2c 	bl	8016088 <pvPortMalloc>
 8014430:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d00e      	beq.n	8014456 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014438:	205c      	movs	r0, #92	; 0x5c
 801443a:	f001 fe25 	bl	8016088 <pvPortMalloc>
 801443e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014440:	69fb      	ldr	r3, [r7, #28]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d003      	beq.n	801444e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	697a      	ldr	r2, [r7, #20]
 801444a:	631a      	str	r2, [r3, #48]	; 0x30
 801444c:	e005      	b.n	801445a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801444e:	6978      	ldr	r0, [r7, #20]
 8014450:	f001 fee6 	bl	8016220 <vPortFree>
 8014454:	e001      	b.n	801445a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014456:	2300      	movs	r3, #0
 8014458:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d017      	beq.n	8014490 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014460:	69fb      	ldr	r3, [r7, #28]
 8014462:	2200      	movs	r2, #0
 8014464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014468:	88fa      	ldrh	r2, [r7, #6]
 801446a:	2300      	movs	r3, #0
 801446c:	9303      	str	r3, [sp, #12]
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	9302      	str	r3, [sp, #8]
 8014472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014474:	9301      	str	r3, [sp, #4]
 8014476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014478:	9300      	str	r3, [sp, #0]
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	68b9      	ldr	r1, [r7, #8]
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f000 f80e 	bl	80144a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014484:	69f8      	ldr	r0, [r7, #28]
 8014486:	f000 f89b 	bl	80145c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801448a:	2301      	movs	r3, #1
 801448c:	61bb      	str	r3, [r7, #24]
 801448e:	e002      	b.n	8014496 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014494:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014496:	69bb      	ldr	r3, [r7, #24]
	}
 8014498:	4618      	mov	r0, r3
 801449a:	3720      	adds	r7, #32
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}

080144a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b088      	sub	sp, #32
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	60f8      	str	r0, [r7, #12]
 80144a8:	60b9      	str	r1, [r7, #8]
 80144aa:	607a      	str	r2, [r7, #4]
 80144ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80144ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	009b      	lsls	r3, r3, #2
 80144b6:	461a      	mov	r2, r3
 80144b8:	21a5      	movs	r1, #165	; 0xa5
 80144ba:	f002 f817 	bl	80164ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80144be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80144c2:	6879      	ldr	r1, [r7, #4]
 80144c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80144c8:	440b      	add	r3, r1
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	4413      	add	r3, r2
 80144ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80144d0:	69bb      	ldr	r3, [r7, #24]
 80144d2:	f023 0307 	bic.w	r3, r3, #7
 80144d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80144d8:	69bb      	ldr	r3, [r7, #24]
 80144da:	f003 0307 	and.w	r3, r3, #7
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d00a      	beq.n	80144f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80144e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e6:	f383 8811 	msr	BASEPRI, r3
 80144ea:	f3bf 8f6f 	isb	sy
 80144ee:	f3bf 8f4f 	dsb	sy
 80144f2:	617b      	str	r3, [r7, #20]
}
 80144f4:	bf00      	nop
 80144f6:	e7fe      	b.n	80144f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d01f      	beq.n	801453e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80144fe:	2300      	movs	r3, #0
 8014500:	61fb      	str	r3, [r7, #28]
 8014502:	e012      	b.n	801452a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014504:	68ba      	ldr	r2, [r7, #8]
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	4413      	add	r3, r2
 801450a:	7819      	ldrb	r1, [r3, #0]
 801450c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801450e:	69fb      	ldr	r3, [r7, #28]
 8014510:	4413      	add	r3, r2
 8014512:	3334      	adds	r3, #52	; 0x34
 8014514:	460a      	mov	r2, r1
 8014516:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014518:	68ba      	ldr	r2, [r7, #8]
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	4413      	add	r3, r2
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d006      	beq.n	8014532 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	3301      	adds	r3, #1
 8014528:	61fb      	str	r3, [r7, #28]
 801452a:	69fb      	ldr	r3, [r7, #28]
 801452c:	2b0f      	cmp	r3, #15
 801452e:	d9e9      	bls.n	8014504 <prvInitialiseNewTask+0x64>
 8014530:	e000      	b.n	8014534 <prvInitialiseNewTask+0x94>
			{
				break;
 8014532:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014536:	2200      	movs	r2, #0
 8014538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801453c:	e003      	b.n	8014546 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014540:	2200      	movs	r2, #0
 8014542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014548:	2b37      	cmp	r3, #55	; 0x37
 801454a:	d901      	bls.n	8014550 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801454c:	2337      	movs	r3, #55	; 0x37
 801454e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014554:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801455a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801455e:	2200      	movs	r2, #0
 8014560:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014564:	3304      	adds	r3, #4
 8014566:	4618      	mov	r0, r3
 8014568:	f7ff f8be 	bl	80136e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456e:	3318      	adds	r3, #24
 8014570:	4618      	mov	r0, r3
 8014572:	f7ff f8b9 	bl	80136e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801457a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801457e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014584:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801458a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458e:	2200      	movs	r2, #0
 8014590:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014594:	2200      	movs	r2, #0
 8014596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801459a:	683a      	ldr	r2, [r7, #0]
 801459c:	68f9      	ldr	r1, [r7, #12]
 801459e:	69b8      	ldr	r0, [r7, #24]
 80145a0:	f001 fb20 	bl	8015be4 <pxPortInitialiseStack>
 80145a4:	4602      	mov	r2, r0
 80145a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80145aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d002      	beq.n	80145b6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80145b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80145b6:	bf00      	nop
 80145b8:	3720      	adds	r7, #32
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
	...

080145c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80145c8:	f001 fc3c 	bl	8015e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80145cc:	4b2d      	ldr	r3, [pc, #180]	; (8014684 <prvAddNewTaskToReadyList+0xc4>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	3301      	adds	r3, #1
 80145d2:	4a2c      	ldr	r2, [pc, #176]	; (8014684 <prvAddNewTaskToReadyList+0xc4>)
 80145d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80145d6:	4b2c      	ldr	r3, [pc, #176]	; (8014688 <prvAddNewTaskToReadyList+0xc8>)
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d109      	bne.n	80145f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80145de:	4a2a      	ldr	r2, [pc, #168]	; (8014688 <prvAddNewTaskToReadyList+0xc8>)
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80145e4:	4b27      	ldr	r3, [pc, #156]	; (8014684 <prvAddNewTaskToReadyList+0xc4>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d110      	bne.n	801460e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80145ec:	f000 fdd6 	bl	801519c <prvInitialiseTaskLists>
 80145f0:	e00d      	b.n	801460e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80145f2:	4b26      	ldr	r3, [pc, #152]	; (801468c <prvAddNewTaskToReadyList+0xcc>)
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d109      	bne.n	801460e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80145fa:	4b23      	ldr	r3, [pc, #140]	; (8014688 <prvAddNewTaskToReadyList+0xc8>)
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014604:	429a      	cmp	r2, r3
 8014606:	d802      	bhi.n	801460e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014608:	4a1f      	ldr	r2, [pc, #124]	; (8014688 <prvAddNewTaskToReadyList+0xc8>)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801460e:	4b20      	ldr	r3, [pc, #128]	; (8014690 <prvAddNewTaskToReadyList+0xd0>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3301      	adds	r3, #1
 8014614:	4a1e      	ldr	r2, [pc, #120]	; (8014690 <prvAddNewTaskToReadyList+0xd0>)
 8014616:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014618:	4b1d      	ldr	r3, [pc, #116]	; (8014690 <prvAddNewTaskToReadyList+0xd0>)
 801461a:	681a      	ldr	r2, [r3, #0]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014624:	4b1b      	ldr	r3, [pc, #108]	; (8014694 <prvAddNewTaskToReadyList+0xd4>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	429a      	cmp	r2, r3
 801462a:	d903      	bls.n	8014634 <prvAddNewTaskToReadyList+0x74>
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014630:	4a18      	ldr	r2, [pc, #96]	; (8014694 <prvAddNewTaskToReadyList+0xd4>)
 8014632:	6013      	str	r3, [r2, #0]
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014638:	4613      	mov	r3, r2
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4413      	add	r3, r2
 801463e:	009b      	lsls	r3, r3, #2
 8014640:	4a15      	ldr	r2, [pc, #84]	; (8014698 <prvAddNewTaskToReadyList+0xd8>)
 8014642:	441a      	add	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	3304      	adds	r3, #4
 8014648:	4619      	mov	r1, r3
 801464a:	4610      	mov	r0, r2
 801464c:	f7ff f859 	bl	8013702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014650:	f001 fc28 	bl	8015ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014654:	4b0d      	ldr	r3, [pc, #52]	; (801468c <prvAddNewTaskToReadyList+0xcc>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00e      	beq.n	801467a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801465c:	4b0a      	ldr	r3, [pc, #40]	; (8014688 <prvAddNewTaskToReadyList+0xc8>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014666:	429a      	cmp	r2, r3
 8014668:	d207      	bcs.n	801467a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801466a:	4b0c      	ldr	r3, [pc, #48]	; (801469c <prvAddNewTaskToReadyList+0xdc>)
 801466c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014670:	601a      	str	r2, [r3, #0]
 8014672:	f3bf 8f4f 	dsb	sy
 8014676:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801467a:	bf00      	nop
 801467c:	3708      	adds	r7, #8
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	24001cdc 	.word	0x24001cdc
 8014688:	24001808 	.word	0x24001808
 801468c:	24001ce8 	.word	0x24001ce8
 8014690:	24001cf8 	.word	0x24001cf8
 8014694:	24001ce4 	.word	0x24001ce4
 8014698:	2400180c 	.word	0x2400180c
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80146a8:	2300      	movs	r3, #0
 80146aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d017      	beq.n	80146e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80146b2:	4b13      	ldr	r3, [pc, #76]	; (8014700 <vTaskDelay+0x60>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d00a      	beq.n	80146d0 <vTaskDelay+0x30>
	__asm volatile
 80146ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146be:	f383 8811 	msr	BASEPRI, r3
 80146c2:	f3bf 8f6f 	isb	sy
 80146c6:	f3bf 8f4f 	dsb	sy
 80146ca:	60bb      	str	r3, [r7, #8]
}
 80146cc:	bf00      	nop
 80146ce:	e7fe      	b.n	80146ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80146d0:	f000 f99a 	bl	8014a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80146d4:	2100      	movs	r1, #0
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 fec2 	bl	8015460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80146dc:	f000 f9a2 	bl	8014a24 <xTaskResumeAll>
 80146e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d107      	bne.n	80146f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80146e8:	4b06      	ldr	r3, [pc, #24]	; (8014704 <vTaskDelay+0x64>)
 80146ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146ee:	601a      	str	r2, [r3, #0]
 80146f0:	f3bf 8f4f 	dsb	sy
 80146f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80146f8:	bf00      	nop
 80146fa:	3710      	adds	r7, #16
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	24001d04 	.word	0x24001d04
 8014704:	e000ed04 	.word	0xe000ed04

08014708 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014708:	b580      	push	{r7, lr}
 801470a:	b084      	sub	sp, #16
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014710:	f001 fb98 	bl	8015e44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d102      	bne.n	8014720 <vTaskSuspend+0x18>
 801471a:	4b30      	ldr	r3, [pc, #192]	; (80147dc <vTaskSuspend+0xd4>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	e000      	b.n	8014722 <vTaskSuspend+0x1a>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	3304      	adds	r3, #4
 8014728:	4618      	mov	r0, r3
 801472a:	f7ff f847 	bl	80137bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014732:	2b00      	cmp	r3, #0
 8014734:	d004      	beq.n	8014740 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	3318      	adds	r3, #24
 801473a:	4618      	mov	r0, r3
 801473c:	f7ff f83e 	bl	80137bc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	3304      	adds	r3, #4
 8014744:	4619      	mov	r1, r3
 8014746:	4826      	ldr	r0, [pc, #152]	; (80147e0 <vTaskSuspend+0xd8>)
 8014748:	f7fe ffdb 	bl	8013702 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b01      	cmp	r3, #1
 8014756:	d103      	bne.n	8014760 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2200      	movs	r2, #0
 801475c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014760:	f001 fba0 	bl	8015ea4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014764:	4b1f      	ldr	r3, [pc, #124]	; (80147e4 <vTaskSuspend+0xdc>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d005      	beq.n	8014778 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801476c:	f001 fb6a 	bl	8015e44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014770:	f000 fdb2 	bl	80152d8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014774:	f001 fb96 	bl	8015ea4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014778:	4b18      	ldr	r3, [pc, #96]	; (80147dc <vTaskSuspend+0xd4>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	429a      	cmp	r2, r3
 8014780:	d127      	bne.n	80147d2 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014782:	4b18      	ldr	r3, [pc, #96]	; (80147e4 <vTaskSuspend+0xdc>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d017      	beq.n	80147ba <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801478a:	4b17      	ldr	r3, [pc, #92]	; (80147e8 <vTaskSuspend+0xe0>)
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d00a      	beq.n	80147a8 <vTaskSuspend+0xa0>
	__asm volatile
 8014792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014796:	f383 8811 	msr	BASEPRI, r3
 801479a:	f3bf 8f6f 	isb	sy
 801479e:	f3bf 8f4f 	dsb	sy
 80147a2:	60bb      	str	r3, [r7, #8]
}
 80147a4:	bf00      	nop
 80147a6:	e7fe      	b.n	80147a6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80147a8:	4b10      	ldr	r3, [pc, #64]	; (80147ec <vTaskSuspend+0xe4>)
 80147aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147ae:	601a      	str	r2, [r3, #0]
 80147b0:	f3bf 8f4f 	dsb	sy
 80147b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80147b8:	e00b      	b.n	80147d2 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80147ba:	4b09      	ldr	r3, [pc, #36]	; (80147e0 <vTaskSuspend+0xd8>)
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	4b0c      	ldr	r3, [pc, #48]	; (80147f0 <vTaskSuspend+0xe8>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d103      	bne.n	80147ce <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80147c6:	4b05      	ldr	r3, [pc, #20]	; (80147dc <vTaskSuspend+0xd4>)
 80147c8:	2200      	movs	r2, #0
 80147ca:	601a      	str	r2, [r3, #0]
	}
 80147cc:	e001      	b.n	80147d2 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80147ce:	f000 fa99 	bl	8014d04 <vTaskSwitchContext>
	}
 80147d2:	bf00      	nop
 80147d4:	3710      	adds	r7, #16
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	24001808 	.word	0x24001808
 80147e0:	24001cc8 	.word	0x24001cc8
 80147e4:	24001ce8 	.word	0x24001ce8
 80147e8:	24001d04 	.word	0x24001d04
 80147ec:	e000ed04 	.word	0xe000ed04
 80147f0:	24001cdc 	.word	0x24001cdc

080147f4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80147f4:	b480      	push	{r7}
 80147f6:	b087      	sub	sp, #28
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80147fc:	2300      	movs	r3, #0
 80147fe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d10a      	bne.n	8014820 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801480e:	f383 8811 	msr	BASEPRI, r3
 8014812:	f3bf 8f6f 	isb	sy
 8014816:	f3bf 8f4f 	dsb	sy
 801481a:	60fb      	str	r3, [r7, #12]
}
 801481c:	bf00      	nop
 801481e:	e7fe      	b.n	801481e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	695b      	ldr	r3, [r3, #20]
 8014824:	4a0a      	ldr	r2, [pc, #40]	; (8014850 <prvTaskIsTaskSuspended+0x5c>)
 8014826:	4293      	cmp	r3, r2
 8014828:	d10a      	bne.n	8014840 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482e:	4a09      	ldr	r2, [pc, #36]	; (8014854 <prvTaskIsTaskSuspended+0x60>)
 8014830:	4293      	cmp	r3, r2
 8014832:	d005      	beq.n	8014840 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014838:	2b00      	cmp	r3, #0
 801483a:	d101      	bne.n	8014840 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801483c:	2301      	movs	r3, #1
 801483e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014840:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014842:	4618      	mov	r0, r3
 8014844:	371c      	adds	r7, #28
 8014846:	46bd      	mov	sp, r7
 8014848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop
 8014850:	24001cc8 	.word	0x24001cc8
 8014854:	24001c9c 	.word	0x24001c9c

08014858 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014858:	b580      	push	{r7, lr}
 801485a:	b08a      	sub	sp, #40	; 0x28
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014860:	2300      	movs	r3, #0
 8014862:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d10a      	bne.n	8014884 <xTaskResumeFromISR+0x2c>
	__asm volatile
 801486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014872:	f383 8811 	msr	BASEPRI, r3
 8014876:	f3bf 8f6f 	isb	sy
 801487a:	f3bf 8f4f 	dsb	sy
 801487e:	61bb      	str	r3, [r7, #24]
}
 8014880:	bf00      	nop
 8014882:	e7fe      	b.n	8014882 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014884:	f001 fbc0 	bl	8016008 <vPortValidateInterruptPriority>
	__asm volatile
 8014888:	f3ef 8211 	mrs	r2, BASEPRI
 801488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014890:	f383 8811 	msr	BASEPRI, r3
 8014894:	f3bf 8f6f 	isb	sy
 8014898:	f3bf 8f4f 	dsb	sy
 801489c:	617a      	str	r2, [r7, #20]
 801489e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80148a0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80148a2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80148a4:	6a38      	ldr	r0, [r7, #32]
 80148a6:	f7ff ffa5 	bl	80147f4 <prvTaskIsTaskSuspended>
 80148aa:	4603      	mov	r3, r0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d030      	beq.n	8014912 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148b0:	4b1d      	ldr	r3, [pc, #116]	; (8014928 <xTaskResumeFromISR+0xd0>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d126      	bne.n	8014906 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148b8:	6a3b      	ldr	r3, [r7, #32]
 80148ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148bc:	4b1b      	ldr	r3, [pc, #108]	; (801492c <xTaskResumeFromISR+0xd4>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d301      	bcc.n	80148ca <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80148c6:	2301      	movs	r3, #1
 80148c8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148ca:	6a3b      	ldr	r3, [r7, #32]
 80148cc:	3304      	adds	r3, #4
 80148ce:	4618      	mov	r0, r3
 80148d0:	f7fe ff74 	bl	80137bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148d4:	6a3b      	ldr	r3, [r7, #32]
 80148d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148d8:	4b15      	ldr	r3, [pc, #84]	; (8014930 <xTaskResumeFromISR+0xd8>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d903      	bls.n	80148e8 <xTaskResumeFromISR+0x90>
 80148e0:	6a3b      	ldr	r3, [r7, #32]
 80148e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148e4:	4a12      	ldr	r2, [pc, #72]	; (8014930 <xTaskResumeFromISR+0xd8>)
 80148e6:	6013      	str	r3, [r2, #0]
 80148e8:	6a3b      	ldr	r3, [r7, #32]
 80148ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148ec:	4613      	mov	r3, r2
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	4413      	add	r3, r2
 80148f2:	009b      	lsls	r3, r3, #2
 80148f4:	4a0f      	ldr	r2, [pc, #60]	; (8014934 <xTaskResumeFromISR+0xdc>)
 80148f6:	441a      	add	r2, r3
 80148f8:	6a3b      	ldr	r3, [r7, #32]
 80148fa:	3304      	adds	r3, #4
 80148fc:	4619      	mov	r1, r3
 80148fe:	4610      	mov	r0, r2
 8014900:	f7fe feff 	bl	8013702 <vListInsertEnd>
 8014904:	e005      	b.n	8014912 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014906:	6a3b      	ldr	r3, [r7, #32]
 8014908:	3318      	adds	r3, #24
 801490a:	4619      	mov	r1, r3
 801490c:	480a      	ldr	r0, [pc, #40]	; (8014938 <xTaskResumeFromISR+0xe0>)
 801490e:	f7fe fef8 	bl	8013702 <vListInsertEnd>
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f383 8811 	msr	BASEPRI, r3
}
 801491c:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014920:	4618      	mov	r0, r3
 8014922:	3728      	adds	r7, #40	; 0x28
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}
 8014928:	24001d04 	.word	0x24001d04
 801492c:	24001808 	.word	0x24001808
 8014930:	24001ce4 	.word	0x24001ce4
 8014934:	2400180c 	.word	0x2400180c
 8014938:	24001c9c 	.word	0x24001c9c

0801493c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	; 0x28
 8014940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014942:	2300      	movs	r3, #0
 8014944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014946:	2300      	movs	r3, #0
 8014948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801494a:	463a      	mov	r2, r7
 801494c:	1d39      	adds	r1, r7, #4
 801494e:	f107 0308 	add.w	r3, r7, #8
 8014952:	4618      	mov	r0, r3
 8014954:	f7fe fc86 	bl	8013264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014958:	6839      	ldr	r1, [r7, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	68ba      	ldr	r2, [r7, #8]
 801495e:	9202      	str	r2, [sp, #8]
 8014960:	9301      	str	r3, [sp, #4]
 8014962:	2300      	movs	r3, #0
 8014964:	9300      	str	r3, [sp, #0]
 8014966:	2300      	movs	r3, #0
 8014968:	460a      	mov	r2, r1
 801496a:	4921      	ldr	r1, [pc, #132]	; (80149f0 <vTaskStartScheduler+0xb4>)
 801496c:	4821      	ldr	r0, [pc, #132]	; (80149f4 <vTaskStartScheduler+0xb8>)
 801496e:	f7ff fcf5 	bl	801435c <xTaskCreateStatic>
 8014972:	4603      	mov	r3, r0
 8014974:	4a20      	ldr	r2, [pc, #128]	; (80149f8 <vTaskStartScheduler+0xbc>)
 8014976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014978:	4b1f      	ldr	r3, [pc, #124]	; (80149f8 <vTaskStartScheduler+0xbc>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d002      	beq.n	8014986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014980:	2301      	movs	r3, #1
 8014982:	617b      	str	r3, [r7, #20]
 8014984:	e001      	b.n	801498a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014986:	2300      	movs	r3, #0
 8014988:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	2b01      	cmp	r3, #1
 801498e:	d102      	bne.n	8014996 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014990:	f000 fdba 	bl	8015508 <xTimerCreateTimerTask>
 8014994:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d116      	bne.n	80149ca <vTaskStartScheduler+0x8e>
	__asm volatile
 801499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a0:	f383 8811 	msr	BASEPRI, r3
 80149a4:	f3bf 8f6f 	isb	sy
 80149a8:	f3bf 8f4f 	dsb	sy
 80149ac:	613b      	str	r3, [r7, #16]
}
 80149ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80149b0:	4b12      	ldr	r3, [pc, #72]	; (80149fc <vTaskStartScheduler+0xc0>)
 80149b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80149b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80149b8:	4b11      	ldr	r3, [pc, #68]	; (8014a00 <vTaskStartScheduler+0xc4>)
 80149ba:	2201      	movs	r2, #1
 80149bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80149be:	4b11      	ldr	r3, [pc, #68]	; (8014a04 <vTaskStartScheduler+0xc8>)
 80149c0:	2200      	movs	r2, #0
 80149c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80149c4:	f001 f99c 	bl	8015d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80149c8:	e00e      	b.n	80149e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80149d0:	d10a      	bne.n	80149e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80149d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d6:	f383 8811 	msr	BASEPRI, r3
 80149da:	f3bf 8f6f 	isb	sy
 80149de:	f3bf 8f4f 	dsb	sy
 80149e2:	60fb      	str	r3, [r7, #12]
}
 80149e4:	bf00      	nop
 80149e6:	e7fe      	b.n	80149e6 <vTaskStartScheduler+0xaa>
}
 80149e8:	bf00      	nop
 80149ea:	3718      	adds	r7, #24
 80149ec:	46bd      	mov	sp, r7
 80149ee:	bd80      	pop	{r7, pc}
 80149f0:	0801717c 	.word	0x0801717c
 80149f4:	0801516d 	.word	0x0801516d
 80149f8:	24001d00 	.word	0x24001d00
 80149fc:	24001cfc 	.word	0x24001cfc
 8014a00:	24001ce8 	.word	0x24001ce8
 8014a04:	24001ce0 	.word	0x24001ce0

08014a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014a08:	b480      	push	{r7}
 8014a0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014a0c:	4b04      	ldr	r3, [pc, #16]	; (8014a20 <vTaskSuspendAll+0x18>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	3301      	adds	r3, #1
 8014a12:	4a03      	ldr	r2, [pc, #12]	; (8014a20 <vTaskSuspendAll+0x18>)
 8014a14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014a16:	bf00      	nop
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr
 8014a20:	24001d04 	.word	0x24001d04

08014a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014a32:	4b42      	ldr	r3, [pc, #264]	; (8014b3c <xTaskResumeAll+0x118>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d10a      	bne.n	8014a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8014a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3e:	f383 8811 	msr	BASEPRI, r3
 8014a42:	f3bf 8f6f 	isb	sy
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	603b      	str	r3, [r7, #0]
}
 8014a4c:	bf00      	nop
 8014a4e:	e7fe      	b.n	8014a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014a50:	f001 f9f8 	bl	8015e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014a54:	4b39      	ldr	r3, [pc, #228]	; (8014b3c <xTaskResumeAll+0x118>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	3b01      	subs	r3, #1
 8014a5a:	4a38      	ldr	r2, [pc, #224]	; (8014b3c <xTaskResumeAll+0x118>)
 8014a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a5e:	4b37      	ldr	r3, [pc, #220]	; (8014b3c <xTaskResumeAll+0x118>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d162      	bne.n	8014b2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014a66:	4b36      	ldr	r3, [pc, #216]	; (8014b40 <xTaskResumeAll+0x11c>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d05e      	beq.n	8014b2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014a6e:	e02f      	b.n	8014ad0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a70:	4b34      	ldr	r3, [pc, #208]	; (8014b44 <xTaskResumeAll+0x120>)
 8014a72:	68db      	ldr	r3, [r3, #12]
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	3318      	adds	r3, #24
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f7fe fe9d 	bl	80137bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	3304      	adds	r3, #4
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7fe fe98 	bl	80137bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a90:	4b2d      	ldr	r3, [pc, #180]	; (8014b48 <xTaskResumeAll+0x124>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	d903      	bls.n	8014aa0 <xTaskResumeAll+0x7c>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a9c:	4a2a      	ldr	r2, [pc, #168]	; (8014b48 <xTaskResumeAll+0x124>)
 8014a9e:	6013      	str	r3, [r2, #0]
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014aa4:	4613      	mov	r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	4413      	add	r3, r2
 8014aaa:	009b      	lsls	r3, r3, #2
 8014aac:	4a27      	ldr	r2, [pc, #156]	; (8014b4c <xTaskResumeAll+0x128>)
 8014aae:	441a      	add	r2, r3
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	3304      	adds	r3, #4
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	f7fe fe23 	bl	8013702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ac0:	4b23      	ldr	r3, [pc, #140]	; (8014b50 <xTaskResumeAll+0x12c>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d302      	bcc.n	8014ad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014aca:	4b22      	ldr	r3, [pc, #136]	; (8014b54 <xTaskResumeAll+0x130>)
 8014acc:	2201      	movs	r2, #1
 8014ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ad0:	4b1c      	ldr	r3, [pc, #112]	; (8014b44 <xTaskResumeAll+0x120>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d1cb      	bne.n	8014a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d001      	beq.n	8014ae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014ade:	f000 fbfb 	bl	80152d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014ae2:	4b1d      	ldr	r3, [pc, #116]	; (8014b58 <xTaskResumeAll+0x134>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d010      	beq.n	8014b10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014aee:	f000 f847 	bl	8014b80 <xTaskIncrementTick>
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014af8:	4b16      	ldr	r3, [pc, #88]	; (8014b54 <xTaskResumeAll+0x130>)
 8014afa:	2201      	movs	r2, #1
 8014afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	3b01      	subs	r3, #1
 8014b02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d1f1      	bne.n	8014aee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014b0a:	4b13      	ldr	r3, [pc, #76]	; (8014b58 <xTaskResumeAll+0x134>)
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014b10:	4b10      	ldr	r3, [pc, #64]	; (8014b54 <xTaskResumeAll+0x130>)
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d009      	beq.n	8014b2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014b1c:	4b0f      	ldr	r3, [pc, #60]	; (8014b5c <xTaskResumeAll+0x138>)
 8014b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b22:	601a      	str	r2, [r3, #0]
 8014b24:	f3bf 8f4f 	dsb	sy
 8014b28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014b2c:	f001 f9ba 	bl	8015ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8014b30:	68bb      	ldr	r3, [r7, #8]
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3710      	adds	r7, #16
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	24001d04 	.word	0x24001d04
 8014b40:	24001cdc 	.word	0x24001cdc
 8014b44:	24001c9c 	.word	0x24001c9c
 8014b48:	24001ce4 	.word	0x24001ce4
 8014b4c:	2400180c 	.word	0x2400180c
 8014b50:	24001808 	.word	0x24001808
 8014b54:	24001cf0 	.word	0x24001cf0
 8014b58:	24001cec 	.word	0x24001cec
 8014b5c:	e000ed04 	.word	0xe000ed04

08014b60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014b60:	b480      	push	{r7}
 8014b62:	b083      	sub	sp, #12
 8014b64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014b66:	4b05      	ldr	r3, [pc, #20]	; (8014b7c <xTaskGetTickCount+0x1c>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014b6c:	687b      	ldr	r3, [r7, #4]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	370c      	adds	r7, #12
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	24001ce0 	.word	0x24001ce0

08014b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b086      	sub	sp, #24
 8014b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014b86:	2300      	movs	r3, #0
 8014b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b8a:	4b53      	ldr	r3, [pc, #332]	; (8014cd8 <xTaskIncrementTick+0x158>)
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	f040 8095 	bne.w	8014cbe <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014b94:	4b51      	ldr	r3, [pc, #324]	; (8014cdc <xTaskIncrementTick+0x15c>)
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014b9c:	4a4f      	ldr	r2, [pc, #316]	; (8014cdc <xTaskIncrementTick+0x15c>)
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d120      	bne.n	8014bea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014ba8:	4b4d      	ldr	r3, [pc, #308]	; (8014ce0 <xTaskIncrementTick+0x160>)
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00a      	beq.n	8014bc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8014bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb6:	f383 8811 	msr	BASEPRI, r3
 8014bba:	f3bf 8f6f 	isb	sy
 8014bbe:	f3bf 8f4f 	dsb	sy
 8014bc2:	603b      	str	r3, [r7, #0]
}
 8014bc4:	bf00      	nop
 8014bc6:	e7fe      	b.n	8014bc6 <xTaskIncrementTick+0x46>
 8014bc8:	4b45      	ldr	r3, [pc, #276]	; (8014ce0 <xTaskIncrementTick+0x160>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	60fb      	str	r3, [r7, #12]
 8014bce:	4b45      	ldr	r3, [pc, #276]	; (8014ce4 <xTaskIncrementTick+0x164>)
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	4a43      	ldr	r2, [pc, #268]	; (8014ce0 <xTaskIncrementTick+0x160>)
 8014bd4:	6013      	str	r3, [r2, #0]
 8014bd6:	4a43      	ldr	r2, [pc, #268]	; (8014ce4 <xTaskIncrementTick+0x164>)
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6013      	str	r3, [r2, #0]
 8014bdc:	4b42      	ldr	r3, [pc, #264]	; (8014ce8 <xTaskIncrementTick+0x168>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	3301      	adds	r3, #1
 8014be2:	4a41      	ldr	r2, [pc, #260]	; (8014ce8 <xTaskIncrementTick+0x168>)
 8014be4:	6013      	str	r3, [r2, #0]
 8014be6:	f000 fb77 	bl	80152d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014bea:	4b40      	ldr	r3, [pc, #256]	; (8014cec <xTaskIncrementTick+0x16c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	693a      	ldr	r2, [r7, #16]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d349      	bcc.n	8014c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014bf4:	4b3a      	ldr	r3, [pc, #232]	; (8014ce0 <xTaskIncrementTick+0x160>)
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d104      	bne.n	8014c08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bfe:	4b3b      	ldr	r3, [pc, #236]	; (8014cec <xTaskIncrementTick+0x16c>)
 8014c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c04:	601a      	str	r2, [r3, #0]
					break;
 8014c06:	e03f      	b.n	8014c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c08:	4b35      	ldr	r3, [pc, #212]	; (8014ce0 <xTaskIncrementTick+0x160>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	68db      	ldr	r3, [r3, #12]
 8014c0e:	68db      	ldr	r3, [r3, #12]
 8014c10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014c18:	693a      	ldr	r2, [r7, #16]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d203      	bcs.n	8014c28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014c20:	4a32      	ldr	r2, [pc, #200]	; (8014cec <xTaskIncrementTick+0x16c>)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014c26:	e02f      	b.n	8014c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	3304      	adds	r3, #4
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fe fdc5 	bl	80137bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d004      	beq.n	8014c44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	3318      	adds	r3, #24
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7fe fdbc 	bl	80137bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c48:	4b29      	ldr	r3, [pc, #164]	; (8014cf0 <xTaskIncrementTick+0x170>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d903      	bls.n	8014c58 <xTaskIncrementTick+0xd8>
 8014c50:	68bb      	ldr	r3, [r7, #8]
 8014c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c54:	4a26      	ldr	r2, [pc, #152]	; (8014cf0 <xTaskIncrementTick+0x170>)
 8014c56:	6013      	str	r3, [r2, #0]
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	4413      	add	r3, r2
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	4a23      	ldr	r2, [pc, #140]	; (8014cf4 <xTaskIncrementTick+0x174>)
 8014c66:	441a      	add	r2, r3
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	3304      	adds	r3, #4
 8014c6c:	4619      	mov	r1, r3
 8014c6e:	4610      	mov	r0, r2
 8014c70:	f7fe fd47 	bl	8013702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c78:	4b1f      	ldr	r3, [pc, #124]	; (8014cf8 <xTaskIncrementTick+0x178>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d3b8      	bcc.n	8014bf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014c82:	2301      	movs	r3, #1
 8014c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c86:	e7b5      	b.n	8014bf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014c88:	4b1b      	ldr	r3, [pc, #108]	; (8014cf8 <xTaskIncrementTick+0x178>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c8e:	4919      	ldr	r1, [pc, #100]	; (8014cf4 <xTaskIncrementTick+0x174>)
 8014c90:	4613      	mov	r3, r2
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	4413      	add	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	440b      	add	r3, r1
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d901      	bls.n	8014ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014ca4:	4b15      	ldr	r3, [pc, #84]	; (8014cfc <xTaskIncrementTick+0x17c>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d101      	bne.n	8014cb0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014cac:	f7eb fc9a 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014cb0:	4b13      	ldr	r3, [pc, #76]	; (8014d00 <xTaskIncrementTick+0x180>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d009      	beq.n	8014ccc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	617b      	str	r3, [r7, #20]
 8014cbc:	e006      	b.n	8014ccc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014cbe:	4b0f      	ldr	r3, [pc, #60]	; (8014cfc <xTaskIncrementTick+0x17c>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	3301      	adds	r3, #1
 8014cc4:	4a0d      	ldr	r2, [pc, #52]	; (8014cfc <xTaskIncrementTick+0x17c>)
 8014cc6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014cc8:	f7eb fc8c 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014ccc:	697b      	ldr	r3, [r7, #20]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3718      	adds	r7, #24
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	24001d04 	.word	0x24001d04
 8014cdc:	24001ce0 	.word	0x24001ce0
 8014ce0:	24001c94 	.word	0x24001c94
 8014ce4:	24001c98 	.word	0x24001c98
 8014ce8:	24001cf4 	.word	0x24001cf4
 8014cec:	24001cfc 	.word	0x24001cfc
 8014cf0:	24001ce4 	.word	0x24001ce4
 8014cf4:	2400180c 	.word	0x2400180c
 8014cf8:	24001808 	.word	0x24001808
 8014cfc:	24001cec 	.word	0x24001cec
 8014d00:	24001cf0 	.word	0x24001cf0

08014d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014d04:	b480      	push	{r7}
 8014d06:	b085      	sub	sp, #20
 8014d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014d0a:	4b28      	ldr	r3, [pc, #160]	; (8014dac <vTaskSwitchContext+0xa8>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d003      	beq.n	8014d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014d12:	4b27      	ldr	r3, [pc, #156]	; (8014db0 <vTaskSwitchContext+0xac>)
 8014d14:	2201      	movs	r2, #1
 8014d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014d18:	e041      	b.n	8014d9e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014d1a:	4b25      	ldr	r3, [pc, #148]	; (8014db0 <vTaskSwitchContext+0xac>)
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d20:	4b24      	ldr	r3, [pc, #144]	; (8014db4 <vTaskSwitchContext+0xb0>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	60fb      	str	r3, [r7, #12]
 8014d26:	e010      	b.n	8014d4a <vTaskSwitchContext+0x46>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d10a      	bne.n	8014d44 <vTaskSwitchContext+0x40>
	__asm volatile
 8014d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d32:	f383 8811 	msr	BASEPRI, r3
 8014d36:	f3bf 8f6f 	isb	sy
 8014d3a:	f3bf 8f4f 	dsb	sy
 8014d3e:	607b      	str	r3, [r7, #4]
}
 8014d40:	bf00      	nop
 8014d42:	e7fe      	b.n	8014d42 <vTaskSwitchContext+0x3e>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	60fb      	str	r3, [r7, #12]
 8014d4a:	491b      	ldr	r1, [pc, #108]	; (8014db8 <vTaskSwitchContext+0xb4>)
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	4613      	mov	r3, r2
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	4413      	add	r3, r2
 8014d54:	009b      	lsls	r3, r3, #2
 8014d56:	440b      	add	r3, r1
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d0e4      	beq.n	8014d28 <vTaskSwitchContext+0x24>
 8014d5e:	68fa      	ldr	r2, [r7, #12]
 8014d60:	4613      	mov	r3, r2
 8014d62:	009b      	lsls	r3, r3, #2
 8014d64:	4413      	add	r3, r2
 8014d66:	009b      	lsls	r3, r3, #2
 8014d68:	4a13      	ldr	r2, [pc, #76]	; (8014db8 <vTaskSwitchContext+0xb4>)
 8014d6a:	4413      	add	r3, r2
 8014d6c:	60bb      	str	r3, [r7, #8]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	685a      	ldr	r2, [r3, #4]
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	605a      	str	r2, [r3, #4]
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	685a      	ldr	r2, [r3, #4]
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	3308      	adds	r3, #8
 8014d80:	429a      	cmp	r2, r3
 8014d82:	d104      	bne.n	8014d8e <vTaskSwitchContext+0x8a>
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	685a      	ldr	r2, [r3, #4]
 8014d8a:	68bb      	ldr	r3, [r7, #8]
 8014d8c:	605a      	str	r2, [r3, #4]
 8014d8e:	68bb      	ldr	r3, [r7, #8]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	68db      	ldr	r3, [r3, #12]
 8014d94:	4a09      	ldr	r2, [pc, #36]	; (8014dbc <vTaskSwitchContext+0xb8>)
 8014d96:	6013      	str	r3, [r2, #0]
 8014d98:	4a06      	ldr	r2, [pc, #24]	; (8014db4 <vTaskSwitchContext+0xb0>)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6013      	str	r3, [r2, #0]
}
 8014d9e:	bf00      	nop
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	24001d04 	.word	0x24001d04
 8014db0:	24001cf0 	.word	0x24001cf0
 8014db4:	24001ce4 	.word	0x24001ce4
 8014db8:	2400180c 	.word	0x2400180c
 8014dbc:	24001808 	.word	0x24001808

08014dc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b084      	sub	sp, #16
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d10a      	bne.n	8014de6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd4:	f383 8811 	msr	BASEPRI, r3
 8014dd8:	f3bf 8f6f 	isb	sy
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	60fb      	str	r3, [r7, #12]
}
 8014de2:	bf00      	nop
 8014de4:	e7fe      	b.n	8014de4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014de6:	4b07      	ldr	r3, [pc, #28]	; (8014e04 <vTaskPlaceOnEventList+0x44>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	3318      	adds	r3, #24
 8014dec:	4619      	mov	r1, r3
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f7fe fcab 	bl	801374a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014df4:	2101      	movs	r1, #1
 8014df6:	6838      	ldr	r0, [r7, #0]
 8014df8:	f000 fb32 	bl	8015460 <prvAddCurrentTaskToDelayedList>
}
 8014dfc:	bf00      	nop
 8014dfe:	3710      	adds	r7, #16
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	24001808 	.word	0x24001808

08014e08 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b086      	sub	sp, #24
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	60f8      	str	r0, [r7, #12]
 8014e10:	60b9      	str	r1, [r7, #8]
 8014e12:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d10a      	bne.n	8014e30 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e1e:	f383 8811 	msr	BASEPRI, r3
 8014e22:	f3bf 8f6f 	isb	sy
 8014e26:	f3bf 8f4f 	dsb	sy
 8014e2a:	617b      	str	r3, [r7, #20]
}
 8014e2c:	bf00      	nop
 8014e2e:	e7fe      	b.n	8014e2e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014e30:	4b11      	ldr	r3, [pc, #68]	; (8014e78 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d10a      	bne.n	8014e4e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e3c:	f383 8811 	msr	BASEPRI, r3
 8014e40:	f3bf 8f6f 	isb	sy
 8014e44:	f3bf 8f4f 	dsb	sy
 8014e48:	613b      	str	r3, [r7, #16]
}
 8014e4a:	bf00      	nop
 8014e4c:	e7fe      	b.n	8014e4c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014e4e:	4b0b      	ldr	r3, [pc, #44]	; (8014e7c <vTaskPlaceOnUnorderedEventList+0x74>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	68ba      	ldr	r2, [r7, #8]
 8014e54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014e58:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014e5a:	4b08      	ldr	r3, [pc, #32]	; (8014e7c <vTaskPlaceOnUnorderedEventList+0x74>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	3318      	adds	r3, #24
 8014e60:	4619      	mov	r1, r3
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f7fe fc4d 	bl	8013702 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014e68:	2101      	movs	r1, #1
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 faf8 	bl	8015460 <prvAddCurrentTaskToDelayedList>
}
 8014e70:	bf00      	nop
 8014e72:	3718      	adds	r7, #24
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	24001d04 	.word	0x24001d04
 8014e7c:	24001808 	.word	0x24001808

08014e80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b086      	sub	sp, #24
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	60f8      	str	r0, [r7, #12]
 8014e88:	60b9      	str	r1, [r7, #8]
 8014e8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d10a      	bne.n	8014ea8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e96:	f383 8811 	msr	BASEPRI, r3
 8014e9a:	f3bf 8f6f 	isb	sy
 8014e9e:	f3bf 8f4f 	dsb	sy
 8014ea2:	617b      	str	r3, [r7, #20]
}
 8014ea4:	bf00      	nop
 8014ea6:	e7fe      	b.n	8014ea6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014ea8:	4b0a      	ldr	r3, [pc, #40]	; (8014ed4 <vTaskPlaceOnEventListRestricted+0x54>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	3318      	adds	r3, #24
 8014eae:	4619      	mov	r1, r3
 8014eb0:	68f8      	ldr	r0, [r7, #12]
 8014eb2:	f7fe fc26 	bl	8013702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d002      	beq.n	8014ec2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ec0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014ec2:	6879      	ldr	r1, [r7, #4]
 8014ec4:	68b8      	ldr	r0, [r7, #8]
 8014ec6:	f000 facb 	bl	8015460 <prvAddCurrentTaskToDelayedList>
	}
 8014eca:	bf00      	nop
 8014ecc:	3718      	adds	r7, #24
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	24001808 	.word	0x24001808

08014ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b086      	sub	sp, #24
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	68db      	ldr	r3, [r3, #12]
 8014ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d10a      	bne.n	8014f04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef2:	f383 8811 	msr	BASEPRI, r3
 8014ef6:	f3bf 8f6f 	isb	sy
 8014efa:	f3bf 8f4f 	dsb	sy
 8014efe:	60fb      	str	r3, [r7, #12]
}
 8014f00:	bf00      	nop
 8014f02:	e7fe      	b.n	8014f02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	3318      	adds	r3, #24
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fe fc57 	bl	80137bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f0e:	4b1e      	ldr	r3, [pc, #120]	; (8014f88 <xTaskRemoveFromEventList+0xb0>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d11d      	bne.n	8014f52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	3304      	adds	r3, #4
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7fe fc4e 	bl	80137bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f24:	4b19      	ldr	r3, [pc, #100]	; (8014f8c <xTaskRemoveFromEventList+0xb4>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d903      	bls.n	8014f34 <xTaskRemoveFromEventList+0x5c>
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f30:	4a16      	ldr	r2, [pc, #88]	; (8014f8c <xTaskRemoveFromEventList+0xb4>)
 8014f32:	6013      	str	r3, [r2, #0]
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f38:	4613      	mov	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4413      	add	r3, r2
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	4a13      	ldr	r2, [pc, #76]	; (8014f90 <xTaskRemoveFromEventList+0xb8>)
 8014f42:	441a      	add	r2, r3
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	3304      	adds	r3, #4
 8014f48:	4619      	mov	r1, r3
 8014f4a:	4610      	mov	r0, r2
 8014f4c:	f7fe fbd9 	bl	8013702 <vListInsertEnd>
 8014f50:	e005      	b.n	8014f5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	3318      	adds	r3, #24
 8014f56:	4619      	mov	r1, r3
 8014f58:	480e      	ldr	r0, [pc, #56]	; (8014f94 <xTaskRemoveFromEventList+0xbc>)
 8014f5a:	f7fe fbd2 	bl	8013702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f62:	4b0d      	ldr	r3, [pc, #52]	; (8014f98 <xTaskRemoveFromEventList+0xc0>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f68:	429a      	cmp	r2, r3
 8014f6a:	d905      	bls.n	8014f78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014f70:	4b0a      	ldr	r3, [pc, #40]	; (8014f9c <xTaskRemoveFromEventList+0xc4>)
 8014f72:	2201      	movs	r2, #1
 8014f74:	601a      	str	r2, [r3, #0]
 8014f76:	e001      	b.n	8014f7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014f7c:	697b      	ldr	r3, [r7, #20]
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3718      	adds	r7, #24
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	24001d04 	.word	0x24001d04
 8014f8c:	24001ce4 	.word	0x24001ce4
 8014f90:	2400180c 	.word	0x2400180c
 8014f94:	24001c9c 	.word	0x24001c9c
 8014f98:	24001808 	.word	0x24001808
 8014f9c:	24001cf0 	.word	0x24001cf0

08014fa0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b086      	sub	sp, #24
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014faa:	4b29      	ldr	r3, [pc, #164]	; (8015050 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d10a      	bne.n	8014fc8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb6:	f383 8811 	msr	BASEPRI, r3
 8014fba:	f3bf 8f6f 	isb	sy
 8014fbe:	f3bf 8f4f 	dsb	sy
 8014fc2:	613b      	str	r3, [r7, #16]
}
 8014fc4:	bf00      	nop
 8014fc6:	e7fe      	b.n	8014fc6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014fc8:	683b      	ldr	r3, [r7, #0]
 8014fca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	68db      	ldr	r3, [r3, #12]
 8014fd6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014fd8:	697b      	ldr	r3, [r7, #20]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d10a      	bne.n	8014ff4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe2:	f383 8811 	msr	BASEPRI, r3
 8014fe6:	f3bf 8f6f 	isb	sy
 8014fea:	f3bf 8f4f 	dsb	sy
 8014fee:	60fb      	str	r3, [r7, #12]
}
 8014ff0:	bf00      	nop
 8014ff2:	e7fe      	b.n	8014ff2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7fe fbe1 	bl	80137bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	3304      	adds	r3, #4
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7fe fbdc 	bl	80137bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015008:	4b12      	ldr	r3, [pc, #72]	; (8015054 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	429a      	cmp	r2, r3
 801500e:	d903      	bls.n	8015018 <vTaskRemoveFromUnorderedEventList+0x78>
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015014:	4a0f      	ldr	r2, [pc, #60]	; (8015054 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015016:	6013      	str	r3, [r2, #0]
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801501c:	4613      	mov	r3, r2
 801501e:	009b      	lsls	r3, r3, #2
 8015020:	4413      	add	r3, r2
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	4a0c      	ldr	r2, [pc, #48]	; (8015058 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015026:	441a      	add	r2, r3
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	3304      	adds	r3, #4
 801502c:	4619      	mov	r1, r3
 801502e:	4610      	mov	r0, r2
 8015030:	f7fe fb67 	bl	8013702 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015038:	4b08      	ldr	r3, [pc, #32]	; (801505c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801503e:	429a      	cmp	r2, r3
 8015040:	d902      	bls.n	8015048 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015042:	4b07      	ldr	r3, [pc, #28]	; (8015060 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015044:	2201      	movs	r2, #1
 8015046:	601a      	str	r2, [r3, #0]
	}
}
 8015048:	bf00      	nop
 801504a:	3718      	adds	r7, #24
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	24001d04 	.word	0x24001d04
 8015054:	24001ce4 	.word	0x24001ce4
 8015058:	2400180c 	.word	0x2400180c
 801505c:	24001808 	.word	0x24001808
 8015060:	24001cf0 	.word	0x24001cf0

08015064 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015064:	b480      	push	{r7}
 8015066:	b083      	sub	sp, #12
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801506c:	4b06      	ldr	r3, [pc, #24]	; (8015088 <vTaskInternalSetTimeOutState+0x24>)
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015074:	4b05      	ldr	r3, [pc, #20]	; (801508c <vTaskInternalSetTimeOutState+0x28>)
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	605a      	str	r2, [r3, #4]
}
 801507c:	bf00      	nop
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr
 8015088:	24001cf4 	.word	0x24001cf4
 801508c:	24001ce0 	.word	0x24001ce0

08015090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b088      	sub	sp, #32
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d10a      	bne.n	80150b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80150a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a4:	f383 8811 	msr	BASEPRI, r3
 80150a8:	f3bf 8f6f 	isb	sy
 80150ac:	f3bf 8f4f 	dsb	sy
 80150b0:	613b      	str	r3, [r7, #16]
}
 80150b2:	bf00      	nop
 80150b4:	e7fe      	b.n	80150b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d10a      	bne.n	80150d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80150bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c0:	f383 8811 	msr	BASEPRI, r3
 80150c4:	f3bf 8f6f 	isb	sy
 80150c8:	f3bf 8f4f 	dsb	sy
 80150cc:	60fb      	str	r3, [r7, #12]
}
 80150ce:	bf00      	nop
 80150d0:	e7fe      	b.n	80150d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80150d2:	f000 feb7 	bl	8015e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80150d6:	4b1d      	ldr	r3, [pc, #116]	; (801514c <xTaskCheckForTimeOut+0xbc>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	69ba      	ldr	r2, [r7, #24]
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150ee:	d102      	bne.n	80150f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80150f0:	2300      	movs	r3, #0
 80150f2:	61fb      	str	r3, [r7, #28]
 80150f4:	e023      	b.n	801513e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681a      	ldr	r2, [r3, #0]
 80150fa:	4b15      	ldr	r3, [pc, #84]	; (8015150 <xTaskCheckForTimeOut+0xc0>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d007      	beq.n	8015112 <xTaskCheckForTimeOut+0x82>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	69ba      	ldr	r2, [r7, #24]
 8015108:	429a      	cmp	r2, r3
 801510a:	d302      	bcc.n	8015112 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801510c:	2301      	movs	r3, #1
 801510e:	61fb      	str	r3, [r7, #28]
 8015110:	e015      	b.n	801513e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015112:	683b      	ldr	r3, [r7, #0]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	697a      	ldr	r2, [r7, #20]
 8015118:	429a      	cmp	r2, r3
 801511a:	d20b      	bcs.n	8015134 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	1ad2      	subs	r2, r2, r3
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7ff ff9b 	bl	8015064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801512e:	2300      	movs	r3, #0
 8015130:	61fb      	str	r3, [r7, #28]
 8015132:	e004      	b.n	801513e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	2200      	movs	r2, #0
 8015138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801513a:	2301      	movs	r3, #1
 801513c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801513e:	f000 feb1 	bl	8015ea4 <vPortExitCritical>

	return xReturn;
 8015142:	69fb      	ldr	r3, [r7, #28]
}
 8015144:	4618      	mov	r0, r3
 8015146:	3720      	adds	r7, #32
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	24001ce0 	.word	0x24001ce0
 8015150:	24001cf4 	.word	0x24001cf4

08015154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015154:	b480      	push	{r7}
 8015156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015158:	4b03      	ldr	r3, [pc, #12]	; (8015168 <vTaskMissedYield+0x14>)
 801515a:	2201      	movs	r2, #1
 801515c:	601a      	str	r2, [r3, #0]
}
 801515e:	bf00      	nop
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	4770      	bx	lr
 8015168:	24001cf0 	.word	0x24001cf0

0801516c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015174:	f000 f852 	bl	801521c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015178:	4b06      	ldr	r3, [pc, #24]	; (8015194 <prvIdleTask+0x28>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2b01      	cmp	r3, #1
 801517e:	d9f9      	bls.n	8015174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015180:	4b05      	ldr	r3, [pc, #20]	; (8015198 <prvIdleTask+0x2c>)
 8015182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015186:	601a      	str	r2, [r3, #0]
 8015188:	f3bf 8f4f 	dsb	sy
 801518c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015190:	e7f0      	b.n	8015174 <prvIdleTask+0x8>
 8015192:	bf00      	nop
 8015194:	2400180c 	.word	0x2400180c
 8015198:	e000ed04 	.word	0xe000ed04

0801519c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b082      	sub	sp, #8
 80151a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151a2:	2300      	movs	r3, #0
 80151a4:	607b      	str	r3, [r7, #4]
 80151a6:	e00c      	b.n	80151c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	4613      	mov	r3, r2
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	4413      	add	r3, r2
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	4a12      	ldr	r2, [pc, #72]	; (80151fc <prvInitialiseTaskLists+0x60>)
 80151b4:	4413      	add	r3, r2
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7fe fa76 	bl	80136a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	3301      	adds	r3, #1
 80151c0:	607b      	str	r3, [r7, #4]
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	2b37      	cmp	r3, #55	; 0x37
 80151c6:	d9ef      	bls.n	80151a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80151c8:	480d      	ldr	r0, [pc, #52]	; (8015200 <prvInitialiseTaskLists+0x64>)
 80151ca:	f7fe fa6d 	bl	80136a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80151ce:	480d      	ldr	r0, [pc, #52]	; (8015204 <prvInitialiseTaskLists+0x68>)
 80151d0:	f7fe fa6a 	bl	80136a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80151d4:	480c      	ldr	r0, [pc, #48]	; (8015208 <prvInitialiseTaskLists+0x6c>)
 80151d6:	f7fe fa67 	bl	80136a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80151da:	480c      	ldr	r0, [pc, #48]	; (801520c <prvInitialiseTaskLists+0x70>)
 80151dc:	f7fe fa64 	bl	80136a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80151e0:	480b      	ldr	r0, [pc, #44]	; (8015210 <prvInitialiseTaskLists+0x74>)
 80151e2:	f7fe fa61 	bl	80136a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80151e6:	4b0b      	ldr	r3, [pc, #44]	; (8015214 <prvInitialiseTaskLists+0x78>)
 80151e8:	4a05      	ldr	r2, [pc, #20]	; (8015200 <prvInitialiseTaskLists+0x64>)
 80151ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80151ec:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <prvInitialiseTaskLists+0x7c>)
 80151ee:	4a05      	ldr	r2, [pc, #20]	; (8015204 <prvInitialiseTaskLists+0x68>)
 80151f0:	601a      	str	r2, [r3, #0]
}
 80151f2:	bf00      	nop
 80151f4:	3708      	adds	r7, #8
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	2400180c 	.word	0x2400180c
 8015200:	24001c6c 	.word	0x24001c6c
 8015204:	24001c80 	.word	0x24001c80
 8015208:	24001c9c 	.word	0x24001c9c
 801520c:	24001cb0 	.word	0x24001cb0
 8015210:	24001cc8 	.word	0x24001cc8
 8015214:	24001c94 	.word	0x24001c94
 8015218:	24001c98 	.word	0x24001c98

0801521c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b082      	sub	sp, #8
 8015220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015222:	e019      	b.n	8015258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015224:	f000 fe0e 	bl	8015e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015228:	4b10      	ldr	r3, [pc, #64]	; (801526c <prvCheckTasksWaitingTermination+0x50>)
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	68db      	ldr	r3, [r3, #12]
 801522e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	3304      	adds	r3, #4
 8015234:	4618      	mov	r0, r3
 8015236:	f7fe fac1 	bl	80137bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801523a:	4b0d      	ldr	r3, [pc, #52]	; (8015270 <prvCheckTasksWaitingTermination+0x54>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	3b01      	subs	r3, #1
 8015240:	4a0b      	ldr	r2, [pc, #44]	; (8015270 <prvCheckTasksWaitingTermination+0x54>)
 8015242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015244:	4b0b      	ldr	r3, [pc, #44]	; (8015274 <prvCheckTasksWaitingTermination+0x58>)
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	3b01      	subs	r3, #1
 801524a:	4a0a      	ldr	r2, [pc, #40]	; (8015274 <prvCheckTasksWaitingTermination+0x58>)
 801524c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801524e:	f000 fe29 	bl	8015ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 f810 	bl	8015278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015258:	4b06      	ldr	r3, [pc, #24]	; (8015274 <prvCheckTasksWaitingTermination+0x58>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d1e1      	bne.n	8015224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015260:	bf00      	nop
 8015262:	bf00      	nop
 8015264:	3708      	adds	r7, #8
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	24001cb0 	.word	0x24001cb0
 8015270:	24001cdc 	.word	0x24001cdc
 8015274:	24001cc4 	.word	0x24001cc4

08015278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015278:	b580      	push	{r7, lr}
 801527a:	b084      	sub	sp, #16
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015286:	2b00      	cmp	r3, #0
 8015288:	d108      	bne.n	801529c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801528e:	4618      	mov	r0, r3
 8015290:	f000 ffc6 	bl	8016220 <vPortFree>
				vPortFree( pxTCB );
 8015294:	6878      	ldr	r0, [r7, #4]
 8015296:	f000 ffc3 	bl	8016220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801529a:	e018      	b.n	80152ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d103      	bne.n	80152ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 ffba 	bl	8016220 <vPortFree>
	}
 80152ac:	e00f      	b.n	80152ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80152b4:	2b02      	cmp	r3, #2
 80152b6:	d00a      	beq.n	80152ce <prvDeleteTCB+0x56>
	__asm volatile
 80152b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152bc:	f383 8811 	msr	BASEPRI, r3
 80152c0:	f3bf 8f6f 	isb	sy
 80152c4:	f3bf 8f4f 	dsb	sy
 80152c8:	60fb      	str	r3, [r7, #12]
}
 80152ca:	bf00      	nop
 80152cc:	e7fe      	b.n	80152cc <prvDeleteTCB+0x54>
	}
 80152ce:	bf00      	nop
 80152d0:	3710      	adds	r7, #16
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
	...

080152d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80152d8:	b480      	push	{r7}
 80152da:	b083      	sub	sp, #12
 80152dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152de:	4b0c      	ldr	r3, [pc, #48]	; (8015310 <prvResetNextTaskUnblockTime+0x38>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d104      	bne.n	80152f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80152e8:	4b0a      	ldr	r3, [pc, #40]	; (8015314 <prvResetNextTaskUnblockTime+0x3c>)
 80152ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80152f0:	e008      	b.n	8015304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152f2:	4b07      	ldr	r3, [pc, #28]	; (8015310 <prvResetNextTaskUnblockTime+0x38>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	68db      	ldr	r3, [r3, #12]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	4a04      	ldr	r2, [pc, #16]	; (8015314 <prvResetNextTaskUnblockTime+0x3c>)
 8015302:	6013      	str	r3, [r2, #0]
}
 8015304:	bf00      	nop
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr
 8015310:	24001c94 	.word	0x24001c94
 8015314:	24001cfc 	.word	0x24001cfc

08015318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015318:	b480      	push	{r7}
 801531a:	b083      	sub	sp, #12
 801531c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801531e:	4b0b      	ldr	r3, [pc, #44]	; (801534c <xTaskGetSchedulerState+0x34>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d102      	bne.n	801532c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015326:	2301      	movs	r3, #1
 8015328:	607b      	str	r3, [r7, #4]
 801532a:	e008      	b.n	801533e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801532c:	4b08      	ldr	r3, [pc, #32]	; (8015350 <xTaskGetSchedulerState+0x38>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d102      	bne.n	801533a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015334:	2302      	movs	r3, #2
 8015336:	607b      	str	r3, [r7, #4]
 8015338:	e001      	b.n	801533e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801533a:	2300      	movs	r3, #0
 801533c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801533e:	687b      	ldr	r3, [r7, #4]
	}
 8015340:	4618      	mov	r0, r3
 8015342:	370c      	adds	r7, #12
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr
 801534c:	24001ce8 	.word	0x24001ce8
 8015350:	24001d04 	.word	0x24001d04

08015354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015354:	b580      	push	{r7, lr}
 8015356:	b086      	sub	sp, #24
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015360:	2300      	movs	r3, #0
 8015362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d056      	beq.n	8015418 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801536a:	4b2e      	ldr	r3, [pc, #184]	; (8015424 <xTaskPriorityDisinherit+0xd0>)
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	693a      	ldr	r2, [r7, #16]
 8015370:	429a      	cmp	r2, r3
 8015372:	d00a      	beq.n	801538a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015378:	f383 8811 	msr	BASEPRI, r3
 801537c:	f3bf 8f6f 	isb	sy
 8015380:	f3bf 8f4f 	dsb	sy
 8015384:	60fb      	str	r3, [r7, #12]
}
 8015386:	bf00      	nop
 8015388:	e7fe      	b.n	8015388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801538a:	693b      	ldr	r3, [r7, #16]
 801538c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801538e:	2b00      	cmp	r3, #0
 8015390:	d10a      	bne.n	80153a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015396:	f383 8811 	msr	BASEPRI, r3
 801539a:	f3bf 8f6f 	isb	sy
 801539e:	f3bf 8f4f 	dsb	sy
 80153a2:	60bb      	str	r3, [r7, #8]
}
 80153a4:	bf00      	nop
 80153a6:	e7fe      	b.n	80153a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153ac:	1e5a      	subs	r2, r3, #1
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80153b2:	693b      	ldr	r3, [r7, #16]
 80153b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d02c      	beq.n	8015418 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80153be:	693b      	ldr	r3, [r7, #16]
 80153c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d128      	bne.n	8015418 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	3304      	adds	r3, #4
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7fe f9f6 	bl	80137bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153e8:	4b0f      	ldr	r3, [pc, #60]	; (8015428 <xTaskPriorityDisinherit+0xd4>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d903      	bls.n	80153f8 <xTaskPriorityDisinherit+0xa4>
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153f4:	4a0c      	ldr	r2, [pc, #48]	; (8015428 <xTaskPriorityDisinherit+0xd4>)
 80153f6:	6013      	str	r3, [r2, #0]
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153fc:	4613      	mov	r3, r2
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	4413      	add	r3, r2
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	4a09      	ldr	r2, [pc, #36]	; (801542c <xTaskPriorityDisinherit+0xd8>)
 8015406:	441a      	add	r2, r3
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	3304      	adds	r3, #4
 801540c:	4619      	mov	r1, r3
 801540e:	4610      	mov	r0, r2
 8015410:	f7fe f977 	bl	8013702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015414:	2301      	movs	r3, #1
 8015416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015418:	697b      	ldr	r3, [r7, #20]
	}
 801541a:	4618      	mov	r0, r3
 801541c:	3718      	adds	r7, #24
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	24001808 	.word	0x24001808
 8015428:	24001ce4 	.word	0x24001ce4
 801542c:	2400180c 	.word	0x2400180c

08015430 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015436:	4b09      	ldr	r3, [pc, #36]	; (801545c <uxTaskResetEventItemValue+0x2c>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	699b      	ldr	r3, [r3, #24]
 801543c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801543e:	4b07      	ldr	r3, [pc, #28]	; (801545c <uxTaskResetEventItemValue+0x2c>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015444:	4b05      	ldr	r3, [pc, #20]	; (801545c <uxTaskResetEventItemValue+0x2c>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801544c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801544e:	687b      	ldr	r3, [r7, #4]
}
 8015450:	4618      	mov	r0, r3
 8015452:	370c      	adds	r7, #12
 8015454:	46bd      	mov	sp, r7
 8015456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545a:	4770      	bx	lr
 801545c:	24001808 	.word	0x24001808

08015460 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801546a:	4b21      	ldr	r3, [pc, #132]	; (80154f0 <prvAddCurrentTaskToDelayedList+0x90>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015470:	4b20      	ldr	r3, [pc, #128]	; (80154f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	3304      	adds	r3, #4
 8015476:	4618      	mov	r0, r3
 8015478:	f7fe f9a0 	bl	80137bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015482:	d10a      	bne.n	801549a <prvAddCurrentTaskToDelayedList+0x3a>
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d007      	beq.n	801549a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801548a:	4b1a      	ldr	r3, [pc, #104]	; (80154f4 <prvAddCurrentTaskToDelayedList+0x94>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	3304      	adds	r3, #4
 8015490:	4619      	mov	r1, r3
 8015492:	4819      	ldr	r0, [pc, #100]	; (80154f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015494:	f7fe f935 	bl	8013702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015498:	e026      	b.n	80154e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801549a:	68fa      	ldr	r2, [r7, #12]
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	4413      	add	r3, r2
 80154a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80154a2:	4b14      	ldr	r3, [pc, #80]	; (80154f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	68ba      	ldr	r2, [r7, #8]
 80154a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80154aa:	68ba      	ldr	r2, [r7, #8]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	429a      	cmp	r2, r3
 80154b0:	d209      	bcs.n	80154c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154b2:	4b12      	ldr	r3, [pc, #72]	; (80154fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	4b0f      	ldr	r3, [pc, #60]	; (80154f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	3304      	adds	r3, #4
 80154bc:	4619      	mov	r1, r3
 80154be:	4610      	mov	r0, r2
 80154c0:	f7fe f943 	bl	801374a <vListInsert>
}
 80154c4:	e010      	b.n	80154e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80154c6:	4b0e      	ldr	r3, [pc, #56]	; (8015500 <prvAddCurrentTaskToDelayedList+0xa0>)
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	4b0a      	ldr	r3, [pc, #40]	; (80154f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	3304      	adds	r3, #4
 80154d0:	4619      	mov	r1, r3
 80154d2:	4610      	mov	r0, r2
 80154d4:	f7fe f939 	bl	801374a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80154d8:	4b0a      	ldr	r3, [pc, #40]	; (8015504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	68ba      	ldr	r2, [r7, #8]
 80154de:	429a      	cmp	r2, r3
 80154e0:	d202      	bcs.n	80154e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80154e2:	4a08      	ldr	r2, [pc, #32]	; (8015504 <prvAddCurrentTaskToDelayedList+0xa4>)
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	6013      	str	r3, [r2, #0]
}
 80154e8:	bf00      	nop
 80154ea:	3710      	adds	r7, #16
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	24001ce0 	.word	0x24001ce0
 80154f4:	24001808 	.word	0x24001808
 80154f8:	24001cc8 	.word	0x24001cc8
 80154fc:	24001c98 	.word	0x24001c98
 8015500:	24001c94 	.word	0x24001c94
 8015504:	24001cfc 	.word	0x24001cfc

08015508 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b08a      	sub	sp, #40	; 0x28
 801550c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801550e:	2300      	movs	r3, #0
 8015510:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015512:	f000 fb07 	bl	8015b24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015516:	4b1c      	ldr	r3, [pc, #112]	; (8015588 <xTimerCreateTimerTask+0x80>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d021      	beq.n	8015562 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801551e:	2300      	movs	r3, #0
 8015520:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015522:	2300      	movs	r3, #0
 8015524:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015526:	1d3a      	adds	r2, r7, #4
 8015528:	f107 0108 	add.w	r1, r7, #8
 801552c:	f107 030c 	add.w	r3, r7, #12
 8015530:	4618      	mov	r0, r3
 8015532:	f7fd feb1 	bl	8013298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	68fa      	ldr	r2, [r7, #12]
 801553c:	9202      	str	r2, [sp, #8]
 801553e:	9301      	str	r3, [sp, #4]
 8015540:	2302      	movs	r3, #2
 8015542:	9300      	str	r3, [sp, #0]
 8015544:	2300      	movs	r3, #0
 8015546:	460a      	mov	r2, r1
 8015548:	4910      	ldr	r1, [pc, #64]	; (801558c <xTimerCreateTimerTask+0x84>)
 801554a:	4811      	ldr	r0, [pc, #68]	; (8015590 <xTimerCreateTimerTask+0x88>)
 801554c:	f7fe ff06 	bl	801435c <xTaskCreateStatic>
 8015550:	4603      	mov	r3, r0
 8015552:	4a10      	ldr	r2, [pc, #64]	; (8015594 <xTimerCreateTimerTask+0x8c>)
 8015554:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015556:	4b0f      	ldr	r3, [pc, #60]	; (8015594 <xTimerCreateTimerTask+0x8c>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d001      	beq.n	8015562 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801555e:	2301      	movs	r3, #1
 8015560:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d10a      	bne.n	801557e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801556c:	f383 8811 	msr	BASEPRI, r3
 8015570:	f3bf 8f6f 	isb	sy
 8015574:	f3bf 8f4f 	dsb	sy
 8015578:	613b      	str	r3, [r7, #16]
}
 801557a:	bf00      	nop
 801557c:	e7fe      	b.n	801557c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801557e:	697b      	ldr	r3, [r7, #20]
}
 8015580:	4618      	mov	r0, r3
 8015582:	3718      	adds	r7, #24
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}
 8015588:	24001d38 	.word	0x24001d38
 801558c:	08017184 	.word	0x08017184
 8015590:	080156cd 	.word	0x080156cd
 8015594:	24001d3c 	.word	0x24001d3c

08015598 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b08a      	sub	sp, #40	; 0x28
 801559c:	af00      	add	r7, sp, #0
 801559e:	60f8      	str	r0, [r7, #12]
 80155a0:	60b9      	str	r1, [r7, #8]
 80155a2:	607a      	str	r2, [r7, #4]
 80155a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80155a6:	2300      	movs	r3, #0
 80155a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d10a      	bne.n	80155c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80155b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b4:	f383 8811 	msr	BASEPRI, r3
 80155b8:	f3bf 8f6f 	isb	sy
 80155bc:	f3bf 8f4f 	dsb	sy
 80155c0:	623b      	str	r3, [r7, #32]
}
 80155c2:	bf00      	nop
 80155c4:	e7fe      	b.n	80155c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80155c6:	4b1a      	ldr	r3, [pc, #104]	; (8015630 <xTimerGenericCommand+0x98>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d02a      	beq.n	8015624 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	2b05      	cmp	r3, #5
 80155de:	dc18      	bgt.n	8015612 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80155e0:	f7ff fe9a 	bl	8015318 <xTaskGetSchedulerState>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b02      	cmp	r3, #2
 80155e8:	d109      	bne.n	80155fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80155ea:	4b11      	ldr	r3, [pc, #68]	; (8015630 <xTimerGenericCommand+0x98>)
 80155ec:	6818      	ldr	r0, [r3, #0]
 80155ee:	f107 0110 	add.w	r1, r7, #16
 80155f2:	2300      	movs	r3, #0
 80155f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155f6:	f7fe fa49 	bl	8013a8c <xQueueGenericSend>
 80155fa:	6278      	str	r0, [r7, #36]	; 0x24
 80155fc:	e012      	b.n	8015624 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80155fe:	4b0c      	ldr	r3, [pc, #48]	; (8015630 <xTimerGenericCommand+0x98>)
 8015600:	6818      	ldr	r0, [r3, #0]
 8015602:	f107 0110 	add.w	r1, r7, #16
 8015606:	2300      	movs	r3, #0
 8015608:	2200      	movs	r2, #0
 801560a:	f7fe fa3f 	bl	8013a8c <xQueueGenericSend>
 801560e:	6278      	str	r0, [r7, #36]	; 0x24
 8015610:	e008      	b.n	8015624 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015612:	4b07      	ldr	r3, [pc, #28]	; (8015630 <xTimerGenericCommand+0x98>)
 8015614:	6818      	ldr	r0, [r3, #0]
 8015616:	f107 0110 	add.w	r1, r7, #16
 801561a:	2300      	movs	r3, #0
 801561c:	683a      	ldr	r2, [r7, #0]
 801561e:	f7fe fb33 	bl	8013c88 <xQueueGenericSendFromISR>
 8015622:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015626:	4618      	mov	r0, r3
 8015628:	3728      	adds	r7, #40	; 0x28
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	24001d38 	.word	0x24001d38

08015634 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b088      	sub	sp, #32
 8015638:	af02      	add	r7, sp, #8
 801563a:	6078      	str	r0, [r7, #4]
 801563c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801563e:	4b22      	ldr	r3, [pc, #136]	; (80156c8 <prvProcessExpiredTimer+0x94>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	3304      	adds	r3, #4
 801564c:	4618      	mov	r0, r3
 801564e:	f7fe f8b5 	bl	80137bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015658:	f003 0304 	and.w	r3, r3, #4
 801565c:	2b00      	cmp	r3, #0
 801565e:	d022      	beq.n	80156a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	699a      	ldr	r2, [r3, #24]
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	18d1      	adds	r1, r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	6978      	ldr	r0, [r7, #20]
 801566e:	f000 f8d1 	bl	8015814 <prvInsertTimerInActiveList>
 8015672:	4603      	mov	r3, r0
 8015674:	2b00      	cmp	r3, #0
 8015676:	d01f      	beq.n	80156b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015678:	2300      	movs	r3, #0
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	2300      	movs	r3, #0
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	2100      	movs	r1, #0
 8015682:	6978      	ldr	r0, [r7, #20]
 8015684:	f7ff ff88 	bl	8015598 <xTimerGenericCommand>
 8015688:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d113      	bne.n	80156b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	60fb      	str	r3, [r7, #12]
}
 80156a2:	bf00      	nop
 80156a4:	e7fe      	b.n	80156a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ac:	f023 0301 	bic.w	r3, r3, #1
 80156b0:	b2da      	uxtb	r2, r3
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	6a1b      	ldr	r3, [r3, #32]
 80156bc:	6978      	ldr	r0, [r7, #20]
 80156be:	4798      	blx	r3
}
 80156c0:	bf00      	nop
 80156c2:	3718      	adds	r7, #24
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	24001d30 	.word	0x24001d30

080156cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b084      	sub	sp, #16
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156d4:	f107 0308 	add.w	r3, r7, #8
 80156d8:	4618      	mov	r0, r3
 80156da:	f000 f857 	bl	801578c <prvGetNextExpireTime>
 80156de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	4619      	mov	r1, r3
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f000 f803 	bl	80156f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80156ea:	f000 f8d5 	bl	8015898 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80156ee:	e7f1      	b.n	80156d4 <prvTimerTask+0x8>

080156f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b084      	sub	sp, #16
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80156fa:	f7ff f985 	bl	8014a08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80156fe:	f107 0308 	add.w	r3, r7, #8
 8015702:	4618      	mov	r0, r3
 8015704:	f000 f866 	bl	80157d4 <prvSampleTimeNow>
 8015708:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d130      	bne.n	8015772 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d10a      	bne.n	801572c <prvProcessTimerOrBlockTask+0x3c>
 8015716:	687a      	ldr	r2, [r7, #4]
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	429a      	cmp	r2, r3
 801571c:	d806      	bhi.n	801572c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801571e:	f7ff f981 	bl	8014a24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015722:	68f9      	ldr	r1, [r7, #12]
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f7ff ff85 	bl	8015634 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801572a:	e024      	b.n	8015776 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d008      	beq.n	8015744 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015732:	4b13      	ldr	r3, [pc, #76]	; (8015780 <prvProcessTimerOrBlockTask+0x90>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d101      	bne.n	8015740 <prvProcessTimerOrBlockTask+0x50>
 801573c:	2301      	movs	r3, #1
 801573e:	e000      	b.n	8015742 <prvProcessTimerOrBlockTask+0x52>
 8015740:	2300      	movs	r3, #0
 8015742:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015744:	4b0f      	ldr	r3, [pc, #60]	; (8015784 <prvProcessTimerOrBlockTask+0x94>)
 8015746:	6818      	ldr	r0, [r3, #0]
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	1ad3      	subs	r3, r2, r3
 801574e:	683a      	ldr	r2, [r7, #0]
 8015750:	4619      	mov	r1, r3
 8015752:	f7fe fdcf 	bl	80142f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015756:	f7ff f965 	bl	8014a24 <xTaskResumeAll>
 801575a:	4603      	mov	r3, r0
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10a      	bne.n	8015776 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015760:	4b09      	ldr	r3, [pc, #36]	; (8015788 <prvProcessTimerOrBlockTask+0x98>)
 8015762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015766:	601a      	str	r2, [r3, #0]
 8015768:	f3bf 8f4f 	dsb	sy
 801576c:	f3bf 8f6f 	isb	sy
}
 8015770:	e001      	b.n	8015776 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015772:	f7ff f957 	bl	8014a24 <xTaskResumeAll>
}
 8015776:	bf00      	nop
 8015778:	3710      	adds	r7, #16
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}
 801577e:	bf00      	nop
 8015780:	24001d34 	.word	0x24001d34
 8015784:	24001d38 	.word	0x24001d38
 8015788:	e000ed04 	.word	0xe000ed04

0801578c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801578c:	b480      	push	{r7}
 801578e:	b085      	sub	sp, #20
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015794:	4b0e      	ldr	r3, [pc, #56]	; (80157d0 <prvGetNextExpireTime+0x44>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d101      	bne.n	80157a2 <prvGetNextExpireTime+0x16>
 801579e:	2201      	movs	r2, #1
 80157a0:	e000      	b.n	80157a4 <prvGetNextExpireTime+0x18>
 80157a2:	2200      	movs	r2, #0
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d105      	bne.n	80157bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80157b0:	4b07      	ldr	r3, [pc, #28]	; (80157d0 <prvGetNextExpireTime+0x44>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	60fb      	str	r3, [r7, #12]
 80157ba:	e001      	b.n	80157c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80157bc:	2300      	movs	r3, #0
 80157be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80157c0:	68fb      	ldr	r3, [r7, #12]
}
 80157c2:	4618      	mov	r0, r3
 80157c4:	3714      	adds	r7, #20
 80157c6:	46bd      	mov	sp, r7
 80157c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop
 80157d0:	24001d30 	.word	0x24001d30

080157d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b084      	sub	sp, #16
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80157dc:	f7ff f9c0 	bl	8014b60 <xTaskGetTickCount>
 80157e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80157e2:	4b0b      	ldr	r3, [pc, #44]	; (8015810 <prvSampleTimeNow+0x3c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	68fa      	ldr	r2, [r7, #12]
 80157e8:	429a      	cmp	r2, r3
 80157ea:	d205      	bcs.n	80157f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80157ec:	f000 f936 	bl	8015a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2201      	movs	r2, #1
 80157f4:	601a      	str	r2, [r3, #0]
 80157f6:	e002      	b.n	80157fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2200      	movs	r2, #0
 80157fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80157fe:	4a04      	ldr	r2, [pc, #16]	; (8015810 <prvSampleTimeNow+0x3c>)
 8015800:	68fb      	ldr	r3, [r7, #12]
 8015802:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015804:	68fb      	ldr	r3, [r7, #12]
}
 8015806:	4618      	mov	r0, r3
 8015808:	3710      	adds	r7, #16
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	24001d40 	.word	0x24001d40

08015814 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b086      	sub	sp, #24
 8015818:	af00      	add	r7, sp, #0
 801581a:	60f8      	str	r0, [r7, #12]
 801581c:	60b9      	str	r1, [r7, #8]
 801581e:	607a      	str	r2, [r7, #4]
 8015820:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015822:	2300      	movs	r3, #0
 8015824:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	68ba      	ldr	r2, [r7, #8]
 801582a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	68fa      	ldr	r2, [r7, #12]
 8015830:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015832:	68ba      	ldr	r2, [r7, #8]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	429a      	cmp	r2, r3
 8015838:	d812      	bhi.n	8015860 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	683b      	ldr	r3, [r7, #0]
 801583e:	1ad2      	subs	r2, r2, r3
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	699b      	ldr	r3, [r3, #24]
 8015844:	429a      	cmp	r2, r3
 8015846:	d302      	bcc.n	801584e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015848:	2301      	movs	r3, #1
 801584a:	617b      	str	r3, [r7, #20]
 801584c:	e01b      	b.n	8015886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801584e:	4b10      	ldr	r3, [pc, #64]	; (8015890 <prvInsertTimerInActiveList+0x7c>)
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	3304      	adds	r3, #4
 8015856:	4619      	mov	r1, r3
 8015858:	4610      	mov	r0, r2
 801585a:	f7fd ff76 	bl	801374a <vListInsert>
 801585e:	e012      	b.n	8015886 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015860:	687a      	ldr	r2, [r7, #4]
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	429a      	cmp	r2, r3
 8015866:	d206      	bcs.n	8015876 <prvInsertTimerInActiveList+0x62>
 8015868:	68ba      	ldr	r2, [r7, #8]
 801586a:	683b      	ldr	r3, [r7, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d302      	bcc.n	8015876 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015870:	2301      	movs	r3, #1
 8015872:	617b      	str	r3, [r7, #20]
 8015874:	e007      	b.n	8015886 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015876:	4b07      	ldr	r3, [pc, #28]	; (8015894 <prvInsertTimerInActiveList+0x80>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	3304      	adds	r3, #4
 801587e:	4619      	mov	r1, r3
 8015880:	4610      	mov	r0, r2
 8015882:	f7fd ff62 	bl	801374a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015886:	697b      	ldr	r3, [r7, #20]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3718      	adds	r7, #24
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	24001d34 	.word	0x24001d34
 8015894:	24001d30 	.word	0x24001d30

08015898 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08e      	sub	sp, #56	; 0x38
 801589c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801589e:	e0ca      	b.n	8015a36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	da18      	bge.n	80158d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80158a6:	1d3b      	adds	r3, r7, #4
 80158a8:	3304      	adds	r3, #4
 80158aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80158ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d10a      	bne.n	80158c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80158b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158b6:	f383 8811 	msr	BASEPRI, r3
 80158ba:	f3bf 8f6f 	isb	sy
 80158be:	f3bf 8f4f 	dsb	sy
 80158c2:	61fb      	str	r3, [r7, #28]
}
 80158c4:	bf00      	nop
 80158c6:	e7fe      	b.n	80158c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80158c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158ce:	6850      	ldr	r0, [r2, #4]
 80158d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158d2:	6892      	ldr	r2, [r2, #8]
 80158d4:	4611      	mov	r1, r2
 80158d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f2c0 80aa 	blt.w	8015a34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80158e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e6:	695b      	ldr	r3, [r3, #20]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d004      	beq.n	80158f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	3304      	adds	r3, #4
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7fd ff63 	bl	80137bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80158f6:	463b      	mov	r3, r7
 80158f8:	4618      	mov	r0, r3
 80158fa:	f7ff ff6b 	bl	80157d4 <prvSampleTimeNow>
 80158fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2b09      	cmp	r3, #9
 8015904:	f200 8097 	bhi.w	8015a36 <prvProcessReceivedCommands+0x19e>
 8015908:	a201      	add	r2, pc, #4	; (adr r2, 8015910 <prvProcessReceivedCommands+0x78>)
 801590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801590e:	bf00      	nop
 8015910:	08015939 	.word	0x08015939
 8015914:	08015939 	.word	0x08015939
 8015918:	08015939 	.word	0x08015939
 801591c:	080159ad 	.word	0x080159ad
 8015920:	080159c1 	.word	0x080159c1
 8015924:	08015a0b 	.word	0x08015a0b
 8015928:	08015939 	.word	0x08015939
 801592c:	08015939 	.word	0x08015939
 8015930:	080159ad 	.word	0x080159ad
 8015934:	080159c1 	.word	0x080159c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801593e:	f043 0301 	orr.w	r3, r3, #1
 8015942:	b2da      	uxtb	r2, r3
 8015944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801594a:	68ba      	ldr	r2, [r7, #8]
 801594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594e:	699b      	ldr	r3, [r3, #24]
 8015950:	18d1      	adds	r1, r2, r3
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015958:	f7ff ff5c 	bl	8015814 <prvInsertTimerInActiveList>
 801595c:	4603      	mov	r3, r0
 801595e:	2b00      	cmp	r3, #0
 8015960:	d069      	beq.n	8015a36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015964:	6a1b      	ldr	r3, [r3, #32]
 8015966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015968:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015970:	f003 0304 	and.w	r3, r3, #4
 8015974:	2b00      	cmp	r3, #0
 8015976:	d05e      	beq.n	8015a36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015978:	68ba      	ldr	r2, [r7, #8]
 801597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801597c:	699b      	ldr	r3, [r3, #24]
 801597e:	441a      	add	r2, r3
 8015980:	2300      	movs	r3, #0
 8015982:	9300      	str	r3, [sp, #0]
 8015984:	2300      	movs	r3, #0
 8015986:	2100      	movs	r1, #0
 8015988:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801598a:	f7ff fe05 	bl	8015598 <xTimerGenericCommand>
 801598e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015990:	6a3b      	ldr	r3, [r7, #32]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d14f      	bne.n	8015a36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599a:	f383 8811 	msr	BASEPRI, r3
 801599e:	f3bf 8f6f 	isb	sy
 80159a2:	f3bf 8f4f 	dsb	sy
 80159a6:	61bb      	str	r3, [r7, #24]
}
 80159a8:	bf00      	nop
 80159aa:	e7fe      	b.n	80159aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b2:	f023 0301 	bic.w	r3, r3, #1
 80159b6:	b2da      	uxtb	r2, r3
 80159b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80159be:	e03a      	b.n	8015a36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80159c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159c6:	f043 0301 	orr.w	r3, r3, #1
 80159ca:	b2da      	uxtb	r2, r3
 80159cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80159d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159da:	699b      	ldr	r3, [r3, #24]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d10a      	bne.n	80159f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80159e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159e4:	f383 8811 	msr	BASEPRI, r3
 80159e8:	f3bf 8f6f 	isb	sy
 80159ec:	f3bf 8f4f 	dsb	sy
 80159f0:	617b      	str	r3, [r7, #20]
}
 80159f2:	bf00      	nop
 80159f4:	e7fe      	b.n	80159f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80159f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f8:	699a      	ldr	r2, [r3, #24]
 80159fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159fc:	18d1      	adds	r1, r2, r3
 80159fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a04:	f7ff ff06 	bl	8015814 <prvInsertTimerInActiveList>
					break;
 8015a08:	e015      	b.n	8015a36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a10:	f003 0302 	and.w	r3, r3, #2
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d103      	bne.n	8015a20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a1a:	f000 fc01 	bl	8016220 <vPortFree>
 8015a1e:	e00a      	b.n	8015a36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a26:	f023 0301 	bic.w	r3, r3, #1
 8015a2a:	b2da      	uxtb	r2, r3
 8015a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015a32:	e000      	b.n	8015a36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015a34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015a36:	4b08      	ldr	r3, [pc, #32]	; (8015a58 <prvProcessReceivedCommands+0x1c0>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	1d39      	adds	r1, r7, #4
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7fe f9be 	bl	8013dc0 <xQueueReceive>
 8015a44:	4603      	mov	r3, r0
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	f47f af2a 	bne.w	80158a0 <prvProcessReceivedCommands+0x8>
	}
}
 8015a4c:	bf00      	nop
 8015a4e:	bf00      	nop
 8015a50:	3730      	adds	r7, #48	; 0x30
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	24001d38 	.word	0x24001d38

08015a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b088      	sub	sp, #32
 8015a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a62:	e048      	b.n	8015af6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015a64:	4b2d      	ldr	r3, [pc, #180]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	68db      	ldr	r3, [r3, #12]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a6e:	4b2b      	ldr	r3, [pc, #172]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a78:	68fb      	ldr	r3, [r7, #12]
 8015a7a:	3304      	adds	r3, #4
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7fd fe9d 	bl	80137bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	6a1b      	ldr	r3, [r3, #32]
 8015a86:	68f8      	ldr	r0, [r7, #12]
 8015a88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a90:	f003 0304 	and.w	r3, r3, #4
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d02e      	beq.n	8015af6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	699b      	ldr	r3, [r3, #24]
 8015a9c:	693a      	ldr	r2, [r7, #16]
 8015a9e:	4413      	add	r3, r2
 8015aa0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015aa2:	68ba      	ldr	r2, [r7, #8]
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d90e      	bls.n	8015ac8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	68ba      	ldr	r2, [r7, #8]
 8015aae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	68fa      	ldr	r2, [r7, #12]
 8015ab4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015ab6:	4b19      	ldr	r3, [pc, #100]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015ab8:	681a      	ldr	r2, [r3, #0]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	3304      	adds	r3, #4
 8015abe:	4619      	mov	r1, r3
 8015ac0:	4610      	mov	r0, r2
 8015ac2:	f7fd fe42 	bl	801374a <vListInsert>
 8015ac6:	e016      	b.n	8015af6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ac8:	2300      	movs	r3, #0
 8015aca:	9300      	str	r3, [sp, #0]
 8015acc:	2300      	movs	r3, #0
 8015ace:	693a      	ldr	r2, [r7, #16]
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f7ff fd60 	bl	8015598 <xTimerGenericCommand>
 8015ad8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d10a      	bne.n	8015af6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ae4:	f383 8811 	msr	BASEPRI, r3
 8015ae8:	f3bf 8f6f 	isb	sy
 8015aec:	f3bf 8f4f 	dsb	sy
 8015af0:	603b      	str	r3, [r7, #0]
}
 8015af2:	bf00      	nop
 8015af4:	e7fe      	b.n	8015af4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015af6:	4b09      	ldr	r3, [pc, #36]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d1b1      	bne.n	8015a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015b00:	4b06      	ldr	r3, [pc, #24]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015b06:	4b06      	ldr	r3, [pc, #24]	; (8015b20 <prvSwitchTimerLists+0xc4>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	4a04      	ldr	r2, [pc, #16]	; (8015b1c <prvSwitchTimerLists+0xc0>)
 8015b0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015b0e:	4a04      	ldr	r2, [pc, #16]	; (8015b20 <prvSwitchTimerLists+0xc4>)
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	6013      	str	r3, [r2, #0]
}
 8015b14:	bf00      	nop
 8015b16:	3718      	adds	r7, #24
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	24001d30 	.word	0x24001d30
 8015b20:	24001d34 	.word	0x24001d34

08015b24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015b24:	b580      	push	{r7, lr}
 8015b26:	b082      	sub	sp, #8
 8015b28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015b2a:	f000 f98b 	bl	8015e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015b2e:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <prvCheckForValidListAndQueue+0x60>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d120      	bne.n	8015b78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015b36:	4814      	ldr	r0, [pc, #80]	; (8015b88 <prvCheckForValidListAndQueue+0x64>)
 8015b38:	f7fd fdb6 	bl	80136a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015b3c:	4813      	ldr	r0, [pc, #76]	; (8015b8c <prvCheckForValidListAndQueue+0x68>)
 8015b3e:	f7fd fdb3 	bl	80136a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015b42:	4b13      	ldr	r3, [pc, #76]	; (8015b90 <prvCheckForValidListAndQueue+0x6c>)
 8015b44:	4a10      	ldr	r2, [pc, #64]	; (8015b88 <prvCheckForValidListAndQueue+0x64>)
 8015b46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015b48:	4b12      	ldr	r3, [pc, #72]	; (8015b94 <prvCheckForValidListAndQueue+0x70>)
 8015b4a:	4a10      	ldr	r2, [pc, #64]	; (8015b8c <prvCheckForValidListAndQueue+0x68>)
 8015b4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	4b11      	ldr	r3, [pc, #68]	; (8015b98 <prvCheckForValidListAndQueue+0x74>)
 8015b54:	4a11      	ldr	r2, [pc, #68]	; (8015b9c <prvCheckForValidListAndQueue+0x78>)
 8015b56:	2110      	movs	r1, #16
 8015b58:	200a      	movs	r0, #10
 8015b5a:	f7fd fec1 	bl	80138e0 <xQueueGenericCreateStatic>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	4a08      	ldr	r2, [pc, #32]	; (8015b84 <prvCheckForValidListAndQueue+0x60>)
 8015b62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015b64:	4b07      	ldr	r3, [pc, #28]	; (8015b84 <prvCheckForValidListAndQueue+0x60>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d005      	beq.n	8015b78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015b6c:	4b05      	ldr	r3, [pc, #20]	; (8015b84 <prvCheckForValidListAndQueue+0x60>)
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	490b      	ldr	r1, [pc, #44]	; (8015ba0 <prvCheckForValidListAndQueue+0x7c>)
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fe fb94 	bl	80142a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b78:	f000 f994 	bl	8015ea4 <vPortExitCritical>
}
 8015b7c:	bf00      	nop
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	24001d38 	.word	0x24001d38
 8015b88:	24001d08 	.word	0x24001d08
 8015b8c:	24001d1c 	.word	0x24001d1c
 8015b90:	24001d30 	.word	0x24001d30
 8015b94:	24001d34 	.word	0x24001d34
 8015b98:	24001de4 	.word	0x24001de4
 8015b9c:	24001d44 	.word	0x24001d44
 8015ba0:	0801718c 	.word	0x0801718c

08015ba4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b08a      	sub	sp, #40	; 0x28
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	60b9      	str	r1, [r7, #8]
 8015bae:	607a      	str	r2, [r7, #4]
 8015bb0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015bb2:	f06f 0301 	mvn.w	r3, #1
 8015bb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015bc4:	4b06      	ldr	r3, [pc, #24]	; (8015be0 <xTimerPendFunctionCallFromISR+0x3c>)
 8015bc6:	6818      	ldr	r0, [r3, #0]
 8015bc8:	f107 0114 	add.w	r1, r7, #20
 8015bcc:	2300      	movs	r3, #0
 8015bce:	683a      	ldr	r2, [r7, #0]
 8015bd0:	f7fe f85a 	bl	8013c88 <xQueueGenericSendFromISR>
 8015bd4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3728      	adds	r7, #40	; 0x28
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	24001d38 	.word	0x24001d38

08015be4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015be4:	b480      	push	{r7}
 8015be6:	b085      	sub	sp, #20
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	60f8      	str	r0, [r7, #12]
 8015bec:	60b9      	str	r1, [r7, #8]
 8015bee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	3b04      	subs	r3, #4
 8015bf4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015bfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	3b04      	subs	r3, #4
 8015c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	f023 0201 	bic.w	r2, r3, #1
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	3b04      	subs	r3, #4
 8015c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015c14:	4a0c      	ldr	r2, [pc, #48]	; (8015c48 <pxPortInitialiseStack+0x64>)
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	3b14      	subs	r3, #20
 8015c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015c20:	687a      	ldr	r2, [r7, #4]
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	3b04      	subs	r3, #4
 8015c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	f06f 0202 	mvn.w	r2, #2
 8015c32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	3b20      	subs	r3, #32
 8015c38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015c3a:	68fb      	ldr	r3, [r7, #12]
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3714      	adds	r7, #20
 8015c40:	46bd      	mov	sp, r7
 8015c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c46:	4770      	bx	lr
 8015c48:	08015c4d 	.word	0x08015c4d

08015c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b085      	sub	sp, #20
 8015c50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015c52:	2300      	movs	r3, #0
 8015c54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015c56:	4b12      	ldr	r3, [pc, #72]	; (8015ca0 <prvTaskExitError+0x54>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c5e:	d00a      	beq.n	8015c76 <prvTaskExitError+0x2a>
	__asm volatile
 8015c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c64:	f383 8811 	msr	BASEPRI, r3
 8015c68:	f3bf 8f6f 	isb	sy
 8015c6c:	f3bf 8f4f 	dsb	sy
 8015c70:	60fb      	str	r3, [r7, #12]
}
 8015c72:	bf00      	nop
 8015c74:	e7fe      	b.n	8015c74 <prvTaskExitError+0x28>
	__asm volatile
 8015c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c7a:	f383 8811 	msr	BASEPRI, r3
 8015c7e:	f3bf 8f6f 	isb	sy
 8015c82:	f3bf 8f4f 	dsb	sy
 8015c86:	60bb      	str	r3, [r7, #8]
}
 8015c88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015c8a:	bf00      	nop
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d0fc      	beq.n	8015c8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015c92:	bf00      	nop
 8015c94:	bf00      	nop
 8015c96:	3714      	adds	r7, #20
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr
 8015ca0:	240000a0 	.word	0x240000a0
	...

08015cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015cb0:	4b07      	ldr	r3, [pc, #28]	; (8015cd0 <pxCurrentTCBConst2>)
 8015cb2:	6819      	ldr	r1, [r3, #0]
 8015cb4:	6808      	ldr	r0, [r1, #0]
 8015cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cba:	f380 8809 	msr	PSP, r0
 8015cbe:	f3bf 8f6f 	isb	sy
 8015cc2:	f04f 0000 	mov.w	r0, #0
 8015cc6:	f380 8811 	msr	BASEPRI, r0
 8015cca:	4770      	bx	lr
 8015ccc:	f3af 8000 	nop.w

08015cd0 <pxCurrentTCBConst2>:
 8015cd0:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015cd4:	bf00      	nop
 8015cd6:	bf00      	nop

08015cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015cd8:	4808      	ldr	r0, [pc, #32]	; (8015cfc <prvPortStartFirstTask+0x24>)
 8015cda:	6800      	ldr	r0, [r0, #0]
 8015cdc:	6800      	ldr	r0, [r0, #0]
 8015cde:	f380 8808 	msr	MSP, r0
 8015ce2:	f04f 0000 	mov.w	r0, #0
 8015ce6:	f380 8814 	msr	CONTROL, r0
 8015cea:	b662      	cpsie	i
 8015cec:	b661      	cpsie	f
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	f3bf 8f6f 	isb	sy
 8015cf6:	df00      	svc	0
 8015cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015cfa:	bf00      	nop
 8015cfc:	e000ed08 	.word	0xe000ed08

08015d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b086      	sub	sp, #24
 8015d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015d06:	4b46      	ldr	r3, [pc, #280]	; (8015e20 <xPortStartScheduler+0x120>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	4a46      	ldr	r2, [pc, #280]	; (8015e24 <xPortStartScheduler+0x124>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d10a      	bne.n	8015d26 <xPortStartScheduler+0x26>
	__asm volatile
 8015d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d14:	f383 8811 	msr	BASEPRI, r3
 8015d18:	f3bf 8f6f 	isb	sy
 8015d1c:	f3bf 8f4f 	dsb	sy
 8015d20:	613b      	str	r3, [r7, #16]
}
 8015d22:	bf00      	nop
 8015d24:	e7fe      	b.n	8015d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015d26:	4b3e      	ldr	r3, [pc, #248]	; (8015e20 <xPortStartScheduler+0x120>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	4a3f      	ldr	r2, [pc, #252]	; (8015e28 <xPortStartScheduler+0x128>)
 8015d2c:	4293      	cmp	r3, r2
 8015d2e:	d10a      	bne.n	8015d46 <xPortStartScheduler+0x46>
	__asm volatile
 8015d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d34:	f383 8811 	msr	BASEPRI, r3
 8015d38:	f3bf 8f6f 	isb	sy
 8015d3c:	f3bf 8f4f 	dsb	sy
 8015d40:	60fb      	str	r3, [r7, #12]
}
 8015d42:	bf00      	nop
 8015d44:	e7fe      	b.n	8015d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015d46:	4b39      	ldr	r3, [pc, #228]	; (8015e2c <xPortStartScheduler+0x12c>)
 8015d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015d4a:	697b      	ldr	r3, [r7, #20]
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	22ff      	movs	r2, #255	; 0xff
 8015d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	781b      	ldrb	r3, [r3, #0]
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015d60:	78fb      	ldrb	r3, [r7, #3]
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015d68:	b2da      	uxtb	r2, r3
 8015d6a:	4b31      	ldr	r3, [pc, #196]	; (8015e30 <xPortStartScheduler+0x130>)
 8015d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015d6e:	4b31      	ldr	r3, [pc, #196]	; (8015e34 <xPortStartScheduler+0x134>)
 8015d70:	2207      	movs	r2, #7
 8015d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d74:	e009      	b.n	8015d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015d76:	4b2f      	ldr	r3, [pc, #188]	; (8015e34 <xPortStartScheduler+0x134>)
 8015d78:	681b      	ldr	r3, [r3, #0]
 8015d7a:	3b01      	subs	r3, #1
 8015d7c:	4a2d      	ldr	r2, [pc, #180]	; (8015e34 <xPortStartScheduler+0x134>)
 8015d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015d80:	78fb      	ldrb	r3, [r7, #3]
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	b2db      	uxtb	r3, r3
 8015d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015d8a:	78fb      	ldrb	r3, [r7, #3]
 8015d8c:	b2db      	uxtb	r3, r3
 8015d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d92:	2b80      	cmp	r3, #128	; 0x80
 8015d94:	d0ef      	beq.n	8015d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015d96:	4b27      	ldr	r3, [pc, #156]	; (8015e34 <xPortStartScheduler+0x134>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	f1c3 0307 	rsb	r3, r3, #7
 8015d9e:	2b04      	cmp	r3, #4
 8015da0:	d00a      	beq.n	8015db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da6:	f383 8811 	msr	BASEPRI, r3
 8015daa:	f3bf 8f6f 	isb	sy
 8015dae:	f3bf 8f4f 	dsb	sy
 8015db2:	60bb      	str	r3, [r7, #8]
}
 8015db4:	bf00      	nop
 8015db6:	e7fe      	b.n	8015db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015db8:	4b1e      	ldr	r3, [pc, #120]	; (8015e34 <xPortStartScheduler+0x134>)
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	021b      	lsls	r3, r3, #8
 8015dbe:	4a1d      	ldr	r2, [pc, #116]	; (8015e34 <xPortStartScheduler+0x134>)
 8015dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015dc2:	4b1c      	ldr	r3, [pc, #112]	; (8015e34 <xPortStartScheduler+0x134>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015dca:	4a1a      	ldr	r2, [pc, #104]	; (8015e34 <xPortStartScheduler+0x134>)
 8015dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	b2da      	uxtb	r2, r3
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015dd6:	4b18      	ldr	r3, [pc, #96]	; (8015e38 <xPortStartScheduler+0x138>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	4a17      	ldr	r2, [pc, #92]	; (8015e38 <xPortStartScheduler+0x138>)
 8015ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015de2:	4b15      	ldr	r3, [pc, #84]	; (8015e38 <xPortStartScheduler+0x138>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4a14      	ldr	r2, [pc, #80]	; (8015e38 <xPortStartScheduler+0x138>)
 8015de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015dee:	f000 f8dd 	bl	8015fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015df2:	4b12      	ldr	r3, [pc, #72]	; (8015e3c <xPortStartScheduler+0x13c>)
 8015df4:	2200      	movs	r2, #0
 8015df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015df8:	f000 f8fc 	bl	8015ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015dfc:	4b10      	ldr	r3, [pc, #64]	; (8015e40 <xPortStartScheduler+0x140>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4a0f      	ldr	r2, [pc, #60]	; (8015e40 <xPortStartScheduler+0x140>)
 8015e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015e08:	f7ff ff66 	bl	8015cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015e0c:	f7fe ff7a 	bl	8014d04 <vTaskSwitchContext>
	prvTaskExitError();
 8015e10:	f7ff ff1c 	bl	8015c4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015e14:	2300      	movs	r3, #0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3718      	adds	r7, #24
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	bf00      	nop
 8015e20:	e000ed00 	.word	0xe000ed00
 8015e24:	410fc271 	.word	0x410fc271
 8015e28:	410fc270 	.word	0x410fc270
 8015e2c:	e000e400 	.word	0xe000e400
 8015e30:	24001e34 	.word	0x24001e34
 8015e34:	24001e38 	.word	0x24001e38
 8015e38:	e000ed20 	.word	0xe000ed20
 8015e3c:	240000a0 	.word	0x240000a0
 8015e40:	e000ef34 	.word	0xe000ef34

08015e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015e44:	b480      	push	{r7}
 8015e46:	b083      	sub	sp, #12
 8015e48:	af00      	add	r7, sp, #0
	__asm volatile
 8015e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	607b      	str	r3, [r7, #4]
}
 8015e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015e5e:	4b0f      	ldr	r3, [pc, #60]	; (8015e9c <vPortEnterCritical+0x58>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	3301      	adds	r3, #1
 8015e64:	4a0d      	ldr	r2, [pc, #52]	; (8015e9c <vPortEnterCritical+0x58>)
 8015e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015e68:	4b0c      	ldr	r3, [pc, #48]	; (8015e9c <vPortEnterCritical+0x58>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d10f      	bne.n	8015e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015e70:	4b0b      	ldr	r3, [pc, #44]	; (8015ea0 <vPortEnterCritical+0x5c>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00a      	beq.n	8015e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	603b      	str	r3, [r7, #0]
}
 8015e8c:	bf00      	nop
 8015e8e:	e7fe      	b.n	8015e8e <vPortEnterCritical+0x4a>
	}
}
 8015e90:	bf00      	nop
 8015e92:	370c      	adds	r7, #12
 8015e94:	46bd      	mov	sp, r7
 8015e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9a:	4770      	bx	lr
 8015e9c:	240000a0 	.word	0x240000a0
 8015ea0:	e000ed04 	.word	0xe000ed04

08015ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015ea4:	b480      	push	{r7}
 8015ea6:	b083      	sub	sp, #12
 8015ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015eaa:	4b12      	ldr	r3, [pc, #72]	; (8015ef4 <vPortExitCritical+0x50>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d10a      	bne.n	8015ec8 <vPortExitCritical+0x24>
	__asm volatile
 8015eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb6:	f383 8811 	msr	BASEPRI, r3
 8015eba:	f3bf 8f6f 	isb	sy
 8015ebe:	f3bf 8f4f 	dsb	sy
 8015ec2:	607b      	str	r3, [r7, #4]
}
 8015ec4:	bf00      	nop
 8015ec6:	e7fe      	b.n	8015ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015ec8:	4b0a      	ldr	r3, [pc, #40]	; (8015ef4 <vPortExitCritical+0x50>)
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	3b01      	subs	r3, #1
 8015ece:	4a09      	ldr	r2, [pc, #36]	; (8015ef4 <vPortExitCritical+0x50>)
 8015ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ed2:	4b08      	ldr	r3, [pc, #32]	; (8015ef4 <vPortExitCritical+0x50>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d105      	bne.n	8015ee6 <vPortExitCritical+0x42>
 8015eda:	2300      	movs	r3, #0
 8015edc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	f383 8811 	msr	BASEPRI, r3
}
 8015ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015ee6:	bf00      	nop
 8015ee8:	370c      	adds	r7, #12
 8015eea:	46bd      	mov	sp, r7
 8015eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef0:	4770      	bx	lr
 8015ef2:	bf00      	nop
 8015ef4:	240000a0 	.word	0x240000a0
	...

08015f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015f00:	f3ef 8009 	mrs	r0, PSP
 8015f04:	f3bf 8f6f 	isb	sy
 8015f08:	4b15      	ldr	r3, [pc, #84]	; (8015f60 <pxCurrentTCBConst>)
 8015f0a:	681a      	ldr	r2, [r3, #0]
 8015f0c:	f01e 0f10 	tst.w	lr, #16
 8015f10:	bf08      	it	eq
 8015f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f1a:	6010      	str	r0, [r2, #0]
 8015f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015f24:	f380 8811 	msr	BASEPRI, r0
 8015f28:	f3bf 8f4f 	dsb	sy
 8015f2c:	f3bf 8f6f 	isb	sy
 8015f30:	f7fe fee8 	bl	8014d04 <vTaskSwitchContext>
 8015f34:	f04f 0000 	mov.w	r0, #0
 8015f38:	f380 8811 	msr	BASEPRI, r0
 8015f3c:	bc09      	pop	{r0, r3}
 8015f3e:	6819      	ldr	r1, [r3, #0]
 8015f40:	6808      	ldr	r0, [r1, #0]
 8015f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f46:	f01e 0f10 	tst.w	lr, #16
 8015f4a:	bf08      	it	eq
 8015f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015f50:	f380 8809 	msr	PSP, r0
 8015f54:	f3bf 8f6f 	isb	sy
 8015f58:	4770      	bx	lr
 8015f5a:	bf00      	nop
 8015f5c:	f3af 8000 	nop.w

08015f60 <pxCurrentTCBConst>:
 8015f60:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015f64:	bf00      	nop
 8015f66:	bf00      	nop

08015f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8015f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f72:	f383 8811 	msr	BASEPRI, r3
 8015f76:	f3bf 8f6f 	isb	sy
 8015f7a:	f3bf 8f4f 	dsb	sy
 8015f7e:	607b      	str	r3, [r7, #4]
}
 8015f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015f82:	f7fe fdfd 	bl	8014b80 <xTaskIncrementTick>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d003      	beq.n	8015f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015f8c:	4b06      	ldr	r3, [pc, #24]	; (8015fa8 <xPortSysTickHandler+0x40>)
 8015f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f92:	601a      	str	r2, [r3, #0]
 8015f94:	2300      	movs	r3, #0
 8015f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	f383 8811 	msr	BASEPRI, r3
}
 8015f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	e000ed04 	.word	0xe000ed04

08015fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015fac:	b480      	push	{r7}
 8015fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015fb0:	4b0b      	ldr	r3, [pc, #44]	; (8015fe0 <vPortSetupTimerInterrupt+0x34>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015fb6:	4b0b      	ldr	r3, [pc, #44]	; (8015fe4 <vPortSetupTimerInterrupt+0x38>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015fbc:	4b0a      	ldr	r3, [pc, #40]	; (8015fe8 <vPortSetupTimerInterrupt+0x3c>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4a0a      	ldr	r2, [pc, #40]	; (8015fec <vPortSetupTimerInterrupt+0x40>)
 8015fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8015fc6:	099b      	lsrs	r3, r3, #6
 8015fc8:	4a09      	ldr	r2, [pc, #36]	; (8015ff0 <vPortSetupTimerInterrupt+0x44>)
 8015fca:	3b01      	subs	r3, #1
 8015fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015fce:	4b04      	ldr	r3, [pc, #16]	; (8015fe0 <vPortSetupTimerInterrupt+0x34>)
 8015fd0:	2207      	movs	r2, #7
 8015fd2:	601a      	str	r2, [r3, #0]
}
 8015fd4:	bf00      	nop
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fdc:	4770      	bx	lr
 8015fde:	bf00      	nop
 8015fe0:	e000e010 	.word	0xe000e010
 8015fe4:	e000e018 	.word	0xe000e018
 8015fe8:	24000090 	.word	0x24000090
 8015fec:	10624dd3 	.word	0x10624dd3
 8015ff0:	e000e014 	.word	0xe000e014

08015ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016004 <vPortEnableVFP+0x10>
 8015ff8:	6801      	ldr	r1, [r0, #0]
 8015ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015ffe:	6001      	str	r1, [r0, #0]
 8016000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016002:	bf00      	nop
 8016004:	e000ed88 	.word	0xe000ed88

08016008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016008:	b480      	push	{r7}
 801600a:	b085      	sub	sp, #20
 801600c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801600e:	f3ef 8305 	mrs	r3, IPSR
 8016012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2b0f      	cmp	r3, #15
 8016018:	d914      	bls.n	8016044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801601a:	4a17      	ldr	r2, [pc, #92]	; (8016078 <vPortValidateInterruptPriority+0x70>)
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	4413      	add	r3, r2
 8016020:	781b      	ldrb	r3, [r3, #0]
 8016022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016024:	4b15      	ldr	r3, [pc, #84]	; (801607c <vPortValidateInterruptPriority+0x74>)
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	7afa      	ldrb	r2, [r7, #11]
 801602a:	429a      	cmp	r2, r3
 801602c:	d20a      	bcs.n	8016044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016032:	f383 8811 	msr	BASEPRI, r3
 8016036:	f3bf 8f6f 	isb	sy
 801603a:	f3bf 8f4f 	dsb	sy
 801603e:	607b      	str	r3, [r7, #4]
}
 8016040:	bf00      	nop
 8016042:	e7fe      	b.n	8016042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016044:	4b0e      	ldr	r3, [pc, #56]	; (8016080 <vPortValidateInterruptPriority+0x78>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801604c:	4b0d      	ldr	r3, [pc, #52]	; (8016084 <vPortValidateInterruptPriority+0x7c>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	429a      	cmp	r2, r3
 8016052:	d90a      	bls.n	801606a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016058:	f383 8811 	msr	BASEPRI, r3
 801605c:	f3bf 8f6f 	isb	sy
 8016060:	f3bf 8f4f 	dsb	sy
 8016064:	603b      	str	r3, [r7, #0]
}
 8016066:	bf00      	nop
 8016068:	e7fe      	b.n	8016068 <vPortValidateInterruptPriority+0x60>
	}
 801606a:	bf00      	nop
 801606c:	3714      	adds	r7, #20
 801606e:	46bd      	mov	sp, r7
 8016070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016074:	4770      	bx	lr
 8016076:	bf00      	nop
 8016078:	e000e3f0 	.word	0xe000e3f0
 801607c:	24001e34 	.word	0x24001e34
 8016080:	e000ed0c 	.word	0xe000ed0c
 8016084:	24001e38 	.word	0x24001e38

08016088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b08a      	sub	sp, #40	; 0x28
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016090:	2300      	movs	r3, #0
 8016092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016094:	f7fe fcb8 	bl	8014a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016098:	4b5b      	ldr	r3, [pc, #364]	; (8016208 <pvPortMalloc+0x180>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d101      	bne.n	80160a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80160a0:	f000 f920 	bl	80162e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80160a4:	4b59      	ldr	r3, [pc, #356]	; (801620c <pvPortMalloc+0x184>)
 80160a6:	681a      	ldr	r2, [r3, #0]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	4013      	ands	r3, r2
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	f040 8093 	bne.w	80161d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d01d      	beq.n	80160f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80160b8:	2208      	movs	r2, #8
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	4413      	add	r3, r2
 80160be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f003 0307 	and.w	r3, r3, #7
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d014      	beq.n	80160f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f023 0307 	bic.w	r3, r3, #7
 80160d0:	3308      	adds	r3, #8
 80160d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	f003 0307 	and.w	r3, r3, #7
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d00a      	beq.n	80160f4 <pvPortMalloc+0x6c>
	__asm volatile
 80160de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160e2:	f383 8811 	msr	BASEPRI, r3
 80160e6:	f3bf 8f6f 	isb	sy
 80160ea:	f3bf 8f4f 	dsb	sy
 80160ee:	617b      	str	r3, [r7, #20]
}
 80160f0:	bf00      	nop
 80160f2:	e7fe      	b.n	80160f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d06e      	beq.n	80161d8 <pvPortMalloc+0x150>
 80160fa:	4b45      	ldr	r3, [pc, #276]	; (8016210 <pvPortMalloc+0x188>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	687a      	ldr	r2, [r7, #4]
 8016100:	429a      	cmp	r2, r3
 8016102:	d869      	bhi.n	80161d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016104:	4b43      	ldr	r3, [pc, #268]	; (8016214 <pvPortMalloc+0x18c>)
 8016106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016108:	4b42      	ldr	r3, [pc, #264]	; (8016214 <pvPortMalloc+0x18c>)
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801610e:	e004      	b.n	801611a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611c:	685b      	ldr	r3, [r3, #4]
 801611e:	687a      	ldr	r2, [r7, #4]
 8016120:	429a      	cmp	r2, r3
 8016122:	d903      	bls.n	801612c <pvPortMalloc+0xa4>
 8016124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1f1      	bne.n	8016110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801612c:	4b36      	ldr	r3, [pc, #216]	; (8016208 <pvPortMalloc+0x180>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016132:	429a      	cmp	r2, r3
 8016134:	d050      	beq.n	80161d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016136:	6a3b      	ldr	r3, [r7, #32]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	2208      	movs	r2, #8
 801613c:	4413      	add	r3, r2
 801613e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	6a3b      	ldr	r3, [r7, #32]
 8016146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614a:	685a      	ldr	r2, [r3, #4]
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	1ad2      	subs	r2, r2, r3
 8016150:	2308      	movs	r3, #8
 8016152:	005b      	lsls	r3, r3, #1
 8016154:	429a      	cmp	r2, r3
 8016156:	d91f      	bls.n	8016198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	4413      	add	r3, r2
 801615e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016160:	69bb      	ldr	r3, [r7, #24]
 8016162:	f003 0307 	and.w	r3, r3, #7
 8016166:	2b00      	cmp	r3, #0
 8016168:	d00a      	beq.n	8016180 <pvPortMalloc+0xf8>
	__asm volatile
 801616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801616e:	f383 8811 	msr	BASEPRI, r3
 8016172:	f3bf 8f6f 	isb	sy
 8016176:	f3bf 8f4f 	dsb	sy
 801617a:	613b      	str	r3, [r7, #16]
}
 801617c:	bf00      	nop
 801617e:	e7fe      	b.n	801617e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016182:	685a      	ldr	r2, [r3, #4]
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	1ad2      	subs	r2, r2, r3
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016192:	69b8      	ldr	r0, [r7, #24]
 8016194:	f000 f908 	bl	80163a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016198:	4b1d      	ldr	r3, [pc, #116]	; (8016210 <pvPortMalloc+0x188>)
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619e:	685b      	ldr	r3, [r3, #4]
 80161a0:	1ad3      	subs	r3, r2, r3
 80161a2:	4a1b      	ldr	r2, [pc, #108]	; (8016210 <pvPortMalloc+0x188>)
 80161a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80161a6:	4b1a      	ldr	r3, [pc, #104]	; (8016210 <pvPortMalloc+0x188>)
 80161a8:	681a      	ldr	r2, [r3, #0]
 80161aa:	4b1b      	ldr	r3, [pc, #108]	; (8016218 <pvPortMalloc+0x190>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d203      	bcs.n	80161ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80161b2:	4b17      	ldr	r3, [pc, #92]	; (8016210 <pvPortMalloc+0x188>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	4a18      	ldr	r2, [pc, #96]	; (8016218 <pvPortMalloc+0x190>)
 80161b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	685a      	ldr	r2, [r3, #4]
 80161be:	4b13      	ldr	r3, [pc, #76]	; (801620c <pvPortMalloc+0x184>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	431a      	orrs	r2, r3
 80161c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80161c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ca:	2200      	movs	r2, #0
 80161cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80161ce:	4b13      	ldr	r3, [pc, #76]	; (801621c <pvPortMalloc+0x194>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	3301      	adds	r3, #1
 80161d4:	4a11      	ldr	r2, [pc, #68]	; (801621c <pvPortMalloc+0x194>)
 80161d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80161d8:	f7fe fc24 	bl	8014a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	f003 0307 	and.w	r3, r3, #7
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00a      	beq.n	80161fc <pvPortMalloc+0x174>
	__asm volatile
 80161e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ea:	f383 8811 	msr	BASEPRI, r3
 80161ee:	f3bf 8f6f 	isb	sy
 80161f2:	f3bf 8f4f 	dsb	sy
 80161f6:	60fb      	str	r3, [r7, #12]
}
 80161f8:	bf00      	nop
 80161fa:	e7fe      	b.n	80161fa <pvPortMalloc+0x172>
	return pvReturn;
 80161fc:	69fb      	ldr	r3, [r7, #28]
}
 80161fe:	4618      	mov	r0, r3
 8016200:	3728      	adds	r7, #40	; 0x28
 8016202:	46bd      	mov	sp, r7
 8016204:	bd80      	pop	{r7, pc}
 8016206:	bf00      	nop
 8016208:	24005a44 	.word	0x24005a44
 801620c:	24005a58 	.word	0x24005a58
 8016210:	24005a48 	.word	0x24005a48
 8016214:	24005a3c 	.word	0x24005a3c
 8016218:	24005a4c 	.word	0x24005a4c
 801621c:	24005a50 	.word	0x24005a50

08016220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b086      	sub	sp, #24
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d04d      	beq.n	80162ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016232:	2308      	movs	r3, #8
 8016234:	425b      	negs	r3, r3
 8016236:	697a      	ldr	r2, [r7, #20]
 8016238:	4413      	add	r3, r2
 801623a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801623c:	697b      	ldr	r3, [r7, #20]
 801623e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016240:	693b      	ldr	r3, [r7, #16]
 8016242:	685a      	ldr	r2, [r3, #4]
 8016244:	4b24      	ldr	r3, [pc, #144]	; (80162d8 <vPortFree+0xb8>)
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	4013      	ands	r3, r2
 801624a:	2b00      	cmp	r3, #0
 801624c:	d10a      	bne.n	8016264 <vPortFree+0x44>
	__asm volatile
 801624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016252:	f383 8811 	msr	BASEPRI, r3
 8016256:	f3bf 8f6f 	isb	sy
 801625a:	f3bf 8f4f 	dsb	sy
 801625e:	60fb      	str	r3, [r7, #12]
}
 8016260:	bf00      	nop
 8016262:	e7fe      	b.n	8016262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016264:	693b      	ldr	r3, [r7, #16]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d00a      	beq.n	8016282 <vPortFree+0x62>
	__asm volatile
 801626c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016270:	f383 8811 	msr	BASEPRI, r3
 8016274:	f3bf 8f6f 	isb	sy
 8016278:	f3bf 8f4f 	dsb	sy
 801627c:	60bb      	str	r3, [r7, #8]
}
 801627e:	bf00      	nop
 8016280:	e7fe      	b.n	8016280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	685a      	ldr	r2, [r3, #4]
 8016286:	4b14      	ldr	r3, [pc, #80]	; (80162d8 <vPortFree+0xb8>)
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4013      	ands	r3, r2
 801628c:	2b00      	cmp	r3, #0
 801628e:	d01e      	beq.n	80162ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d11a      	bne.n	80162ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016298:	693b      	ldr	r3, [r7, #16]
 801629a:	685a      	ldr	r2, [r3, #4]
 801629c:	4b0e      	ldr	r3, [pc, #56]	; (80162d8 <vPortFree+0xb8>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	43db      	mvns	r3, r3
 80162a2:	401a      	ands	r2, r3
 80162a4:	693b      	ldr	r3, [r7, #16]
 80162a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80162a8:	f7fe fbae 	bl	8014a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	685a      	ldr	r2, [r3, #4]
 80162b0:	4b0a      	ldr	r3, [pc, #40]	; (80162dc <vPortFree+0xbc>)
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	4413      	add	r3, r2
 80162b6:	4a09      	ldr	r2, [pc, #36]	; (80162dc <vPortFree+0xbc>)
 80162b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80162ba:	6938      	ldr	r0, [r7, #16]
 80162bc:	f000 f874 	bl	80163a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80162c0:	4b07      	ldr	r3, [pc, #28]	; (80162e0 <vPortFree+0xc0>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	3301      	adds	r3, #1
 80162c6:	4a06      	ldr	r2, [pc, #24]	; (80162e0 <vPortFree+0xc0>)
 80162c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80162ca:	f7fe fbab 	bl	8014a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80162ce:	bf00      	nop
 80162d0:	3718      	adds	r7, #24
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	24005a58 	.word	0x24005a58
 80162dc:	24005a48 	.word	0x24005a48
 80162e0:	24005a54 	.word	0x24005a54

080162e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80162ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80162ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80162f0:	4b27      	ldr	r3, [pc, #156]	; (8016390 <prvHeapInit+0xac>)
 80162f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	f003 0307 	and.w	r3, r3, #7
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d00c      	beq.n	8016318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	3307      	adds	r3, #7
 8016302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	f023 0307 	bic.w	r3, r3, #7
 801630a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801630c:	68ba      	ldr	r2, [r7, #8]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	1ad3      	subs	r3, r2, r3
 8016312:	4a1f      	ldr	r2, [pc, #124]	; (8016390 <prvHeapInit+0xac>)
 8016314:	4413      	add	r3, r2
 8016316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801631c:	4a1d      	ldr	r2, [pc, #116]	; (8016394 <prvHeapInit+0xb0>)
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016322:	4b1c      	ldr	r3, [pc, #112]	; (8016394 <prvHeapInit+0xb0>)
 8016324:	2200      	movs	r2, #0
 8016326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	68ba      	ldr	r2, [r7, #8]
 801632c:	4413      	add	r3, r2
 801632e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016330:	2208      	movs	r2, #8
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	1a9b      	subs	r3, r3, r2
 8016336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	f023 0307 	bic.w	r3, r3, #7
 801633e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	4a15      	ldr	r2, [pc, #84]	; (8016398 <prvHeapInit+0xb4>)
 8016344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016346:	4b14      	ldr	r3, [pc, #80]	; (8016398 <prvHeapInit+0xb4>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	2200      	movs	r2, #0
 801634c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801634e:	4b12      	ldr	r3, [pc, #72]	; (8016398 <prvHeapInit+0xb4>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2200      	movs	r2, #0
 8016354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	68fa      	ldr	r2, [r7, #12]
 801635e:	1ad2      	subs	r2, r2, r3
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016364:	4b0c      	ldr	r3, [pc, #48]	; (8016398 <prvHeapInit+0xb4>)
 8016366:	681a      	ldr	r2, [r3, #0]
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	4a0a      	ldr	r2, [pc, #40]	; (801639c <prvHeapInit+0xb8>)
 8016372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	4a09      	ldr	r2, [pc, #36]	; (80163a0 <prvHeapInit+0xbc>)
 801637a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801637c:	4b09      	ldr	r3, [pc, #36]	; (80163a4 <prvHeapInit+0xc0>)
 801637e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016382:	601a      	str	r2, [r3, #0]
}
 8016384:	bf00      	nop
 8016386:	3714      	adds	r7, #20
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr
 8016390:	24001e3c 	.word	0x24001e3c
 8016394:	24005a3c 	.word	0x24005a3c
 8016398:	24005a44 	.word	0x24005a44
 801639c:	24005a4c 	.word	0x24005a4c
 80163a0:	24005a48 	.word	0x24005a48
 80163a4:	24005a58 	.word	0x24005a58

080163a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80163a8:	b480      	push	{r7}
 80163aa:	b085      	sub	sp, #20
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80163b0:	4b28      	ldr	r3, [pc, #160]	; (8016454 <prvInsertBlockIntoFreeList+0xac>)
 80163b2:	60fb      	str	r3, [r7, #12]
 80163b4:	e002      	b.n	80163bc <prvInsertBlockIntoFreeList+0x14>
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	60fb      	str	r3, [r7, #12]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	687a      	ldr	r2, [r7, #4]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d8f7      	bhi.n	80163b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	685b      	ldr	r3, [r3, #4]
 80163ce:	68ba      	ldr	r2, [r7, #8]
 80163d0:	4413      	add	r3, r2
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	429a      	cmp	r2, r3
 80163d6:	d108      	bne.n	80163ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	685a      	ldr	r2, [r3, #4]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	441a      	add	r2, r3
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	68ba      	ldr	r2, [r7, #8]
 80163f4:	441a      	add	r2, r3
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d118      	bne.n	8016430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681a      	ldr	r2, [r3, #0]
 8016402:	4b15      	ldr	r3, [pc, #84]	; (8016458 <prvInsertBlockIntoFreeList+0xb0>)
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	429a      	cmp	r2, r3
 8016408:	d00d      	beq.n	8016426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	685a      	ldr	r2, [r3, #4]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	441a      	add	r2, r3
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	601a      	str	r2, [r3, #0]
 8016424:	e008      	b.n	8016438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016426:	4b0c      	ldr	r3, [pc, #48]	; (8016458 <prvInsertBlockIntoFreeList+0xb0>)
 8016428:	681a      	ldr	r2, [r3, #0]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	601a      	str	r2, [r3, #0]
 801642e:	e003      	b.n	8016438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681a      	ldr	r2, [r3, #0]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016438:	68fa      	ldr	r2, [r7, #12]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	429a      	cmp	r2, r3
 801643e:	d002      	beq.n	8016446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	687a      	ldr	r2, [r7, #4]
 8016444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016446:	bf00      	nop
 8016448:	3714      	adds	r7, #20
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr
 8016452:	bf00      	nop
 8016454:	24005a3c 	.word	0x24005a3c
 8016458:	24005a44 	.word	0x24005a44

0801645c <__errno>:
 801645c:	4b01      	ldr	r3, [pc, #4]	; (8016464 <__errno+0x8>)
 801645e:	6818      	ldr	r0, [r3, #0]
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	240000a4 	.word	0x240000a4

08016468 <__libc_init_array>:
 8016468:	b570      	push	{r4, r5, r6, lr}
 801646a:	4d0d      	ldr	r5, [pc, #52]	; (80164a0 <__libc_init_array+0x38>)
 801646c:	4c0d      	ldr	r4, [pc, #52]	; (80164a4 <__libc_init_array+0x3c>)
 801646e:	1b64      	subs	r4, r4, r5
 8016470:	10a4      	asrs	r4, r4, #2
 8016472:	2600      	movs	r6, #0
 8016474:	42a6      	cmp	r6, r4
 8016476:	d109      	bne.n	801648c <__libc_init_array+0x24>
 8016478:	4d0b      	ldr	r5, [pc, #44]	; (80164a8 <__libc_init_array+0x40>)
 801647a:	4c0c      	ldr	r4, [pc, #48]	; (80164ac <__libc_init_array+0x44>)
 801647c:	f000 fd3c 	bl	8016ef8 <_init>
 8016480:	1b64      	subs	r4, r4, r5
 8016482:	10a4      	asrs	r4, r4, #2
 8016484:	2600      	movs	r6, #0
 8016486:	42a6      	cmp	r6, r4
 8016488:	d105      	bne.n	8016496 <__libc_init_array+0x2e>
 801648a:	bd70      	pop	{r4, r5, r6, pc}
 801648c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016490:	4798      	blx	r3
 8016492:	3601      	adds	r6, #1
 8016494:	e7ee      	b.n	8016474 <__libc_init_array+0xc>
 8016496:	f855 3b04 	ldr.w	r3, [r5], #4
 801649a:	4798      	blx	r3
 801649c:	3601      	adds	r6, #1
 801649e:	e7f2      	b.n	8016486 <__libc_init_array+0x1e>
 80164a0:	08017360 	.word	0x08017360
 80164a4:	08017360 	.word	0x08017360
 80164a8:	08017360 	.word	0x08017360
 80164ac:	08017364 	.word	0x08017364

080164b0 <malloc>:
 80164b0:	4b02      	ldr	r3, [pc, #8]	; (80164bc <malloc+0xc>)
 80164b2:	4601      	mov	r1, r0
 80164b4:	6818      	ldr	r0, [r3, #0]
 80164b6:	f000 b88d 	b.w	80165d4 <_malloc_r>
 80164ba:	bf00      	nop
 80164bc:	240000a4 	.word	0x240000a4

080164c0 <free>:
 80164c0:	4b02      	ldr	r3, [pc, #8]	; (80164cc <free+0xc>)
 80164c2:	4601      	mov	r1, r0
 80164c4:	6818      	ldr	r0, [r3, #0]
 80164c6:	f000 b819 	b.w	80164fc <_free_r>
 80164ca:	bf00      	nop
 80164cc:	240000a4 	.word	0x240000a4

080164d0 <memcpy>:
 80164d0:	440a      	add	r2, r1
 80164d2:	4291      	cmp	r1, r2
 80164d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80164d8:	d100      	bne.n	80164dc <memcpy+0xc>
 80164da:	4770      	bx	lr
 80164dc:	b510      	push	{r4, lr}
 80164de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80164e6:	4291      	cmp	r1, r2
 80164e8:	d1f9      	bne.n	80164de <memcpy+0xe>
 80164ea:	bd10      	pop	{r4, pc}

080164ec <memset>:
 80164ec:	4402      	add	r2, r0
 80164ee:	4603      	mov	r3, r0
 80164f0:	4293      	cmp	r3, r2
 80164f2:	d100      	bne.n	80164f6 <memset+0xa>
 80164f4:	4770      	bx	lr
 80164f6:	f803 1b01 	strb.w	r1, [r3], #1
 80164fa:	e7f9      	b.n	80164f0 <memset+0x4>

080164fc <_free_r>:
 80164fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164fe:	2900      	cmp	r1, #0
 8016500:	d044      	beq.n	801658c <_free_r+0x90>
 8016502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016506:	9001      	str	r0, [sp, #4]
 8016508:	2b00      	cmp	r3, #0
 801650a:	f1a1 0404 	sub.w	r4, r1, #4
 801650e:	bfb8      	it	lt
 8016510:	18e4      	addlt	r4, r4, r3
 8016512:	f000 fc39 	bl	8016d88 <__malloc_lock>
 8016516:	4a1e      	ldr	r2, [pc, #120]	; (8016590 <_free_r+0x94>)
 8016518:	9801      	ldr	r0, [sp, #4]
 801651a:	6813      	ldr	r3, [r2, #0]
 801651c:	b933      	cbnz	r3, 801652c <_free_r+0x30>
 801651e:	6063      	str	r3, [r4, #4]
 8016520:	6014      	str	r4, [r2, #0]
 8016522:	b003      	add	sp, #12
 8016524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016528:	f000 bc34 	b.w	8016d94 <__malloc_unlock>
 801652c:	42a3      	cmp	r3, r4
 801652e:	d908      	bls.n	8016542 <_free_r+0x46>
 8016530:	6825      	ldr	r5, [r4, #0]
 8016532:	1961      	adds	r1, r4, r5
 8016534:	428b      	cmp	r3, r1
 8016536:	bf01      	itttt	eq
 8016538:	6819      	ldreq	r1, [r3, #0]
 801653a:	685b      	ldreq	r3, [r3, #4]
 801653c:	1949      	addeq	r1, r1, r5
 801653e:	6021      	streq	r1, [r4, #0]
 8016540:	e7ed      	b.n	801651e <_free_r+0x22>
 8016542:	461a      	mov	r2, r3
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	b10b      	cbz	r3, 801654c <_free_r+0x50>
 8016548:	42a3      	cmp	r3, r4
 801654a:	d9fa      	bls.n	8016542 <_free_r+0x46>
 801654c:	6811      	ldr	r1, [r2, #0]
 801654e:	1855      	adds	r5, r2, r1
 8016550:	42a5      	cmp	r5, r4
 8016552:	d10b      	bne.n	801656c <_free_r+0x70>
 8016554:	6824      	ldr	r4, [r4, #0]
 8016556:	4421      	add	r1, r4
 8016558:	1854      	adds	r4, r2, r1
 801655a:	42a3      	cmp	r3, r4
 801655c:	6011      	str	r1, [r2, #0]
 801655e:	d1e0      	bne.n	8016522 <_free_r+0x26>
 8016560:	681c      	ldr	r4, [r3, #0]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	6053      	str	r3, [r2, #4]
 8016566:	4421      	add	r1, r4
 8016568:	6011      	str	r1, [r2, #0]
 801656a:	e7da      	b.n	8016522 <_free_r+0x26>
 801656c:	d902      	bls.n	8016574 <_free_r+0x78>
 801656e:	230c      	movs	r3, #12
 8016570:	6003      	str	r3, [r0, #0]
 8016572:	e7d6      	b.n	8016522 <_free_r+0x26>
 8016574:	6825      	ldr	r5, [r4, #0]
 8016576:	1961      	adds	r1, r4, r5
 8016578:	428b      	cmp	r3, r1
 801657a:	bf04      	itt	eq
 801657c:	6819      	ldreq	r1, [r3, #0]
 801657e:	685b      	ldreq	r3, [r3, #4]
 8016580:	6063      	str	r3, [r4, #4]
 8016582:	bf04      	itt	eq
 8016584:	1949      	addeq	r1, r1, r5
 8016586:	6021      	streq	r1, [r4, #0]
 8016588:	6054      	str	r4, [r2, #4]
 801658a:	e7ca      	b.n	8016522 <_free_r+0x26>
 801658c:	b003      	add	sp, #12
 801658e:	bd30      	pop	{r4, r5, pc}
 8016590:	24005a5c 	.word	0x24005a5c

08016594 <sbrk_aligned>:
 8016594:	b570      	push	{r4, r5, r6, lr}
 8016596:	4e0e      	ldr	r6, [pc, #56]	; (80165d0 <sbrk_aligned+0x3c>)
 8016598:	460c      	mov	r4, r1
 801659a:	6831      	ldr	r1, [r6, #0]
 801659c:	4605      	mov	r5, r0
 801659e:	b911      	cbnz	r1, 80165a6 <sbrk_aligned+0x12>
 80165a0:	f000 f902 	bl	80167a8 <_sbrk_r>
 80165a4:	6030      	str	r0, [r6, #0]
 80165a6:	4621      	mov	r1, r4
 80165a8:	4628      	mov	r0, r5
 80165aa:	f000 f8fd 	bl	80167a8 <_sbrk_r>
 80165ae:	1c43      	adds	r3, r0, #1
 80165b0:	d00a      	beq.n	80165c8 <sbrk_aligned+0x34>
 80165b2:	1cc4      	adds	r4, r0, #3
 80165b4:	f024 0403 	bic.w	r4, r4, #3
 80165b8:	42a0      	cmp	r0, r4
 80165ba:	d007      	beq.n	80165cc <sbrk_aligned+0x38>
 80165bc:	1a21      	subs	r1, r4, r0
 80165be:	4628      	mov	r0, r5
 80165c0:	f000 f8f2 	bl	80167a8 <_sbrk_r>
 80165c4:	3001      	adds	r0, #1
 80165c6:	d101      	bne.n	80165cc <sbrk_aligned+0x38>
 80165c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80165cc:	4620      	mov	r0, r4
 80165ce:	bd70      	pop	{r4, r5, r6, pc}
 80165d0:	24005a60 	.word	0x24005a60

080165d4 <_malloc_r>:
 80165d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d8:	1ccd      	adds	r5, r1, #3
 80165da:	f025 0503 	bic.w	r5, r5, #3
 80165de:	3508      	adds	r5, #8
 80165e0:	2d0c      	cmp	r5, #12
 80165e2:	bf38      	it	cc
 80165e4:	250c      	movcc	r5, #12
 80165e6:	2d00      	cmp	r5, #0
 80165e8:	4607      	mov	r7, r0
 80165ea:	db01      	blt.n	80165f0 <_malloc_r+0x1c>
 80165ec:	42a9      	cmp	r1, r5
 80165ee:	d905      	bls.n	80165fc <_malloc_r+0x28>
 80165f0:	230c      	movs	r3, #12
 80165f2:	603b      	str	r3, [r7, #0]
 80165f4:	2600      	movs	r6, #0
 80165f6:	4630      	mov	r0, r6
 80165f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165fc:	4e2e      	ldr	r6, [pc, #184]	; (80166b8 <_malloc_r+0xe4>)
 80165fe:	f000 fbc3 	bl	8016d88 <__malloc_lock>
 8016602:	6833      	ldr	r3, [r6, #0]
 8016604:	461c      	mov	r4, r3
 8016606:	bb34      	cbnz	r4, 8016656 <_malloc_r+0x82>
 8016608:	4629      	mov	r1, r5
 801660a:	4638      	mov	r0, r7
 801660c:	f7ff ffc2 	bl	8016594 <sbrk_aligned>
 8016610:	1c43      	adds	r3, r0, #1
 8016612:	4604      	mov	r4, r0
 8016614:	d14d      	bne.n	80166b2 <_malloc_r+0xde>
 8016616:	6834      	ldr	r4, [r6, #0]
 8016618:	4626      	mov	r6, r4
 801661a:	2e00      	cmp	r6, #0
 801661c:	d140      	bne.n	80166a0 <_malloc_r+0xcc>
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	4631      	mov	r1, r6
 8016622:	4638      	mov	r0, r7
 8016624:	eb04 0803 	add.w	r8, r4, r3
 8016628:	f000 f8be 	bl	80167a8 <_sbrk_r>
 801662c:	4580      	cmp	r8, r0
 801662e:	d13a      	bne.n	80166a6 <_malloc_r+0xd2>
 8016630:	6821      	ldr	r1, [r4, #0]
 8016632:	3503      	adds	r5, #3
 8016634:	1a6d      	subs	r5, r5, r1
 8016636:	f025 0503 	bic.w	r5, r5, #3
 801663a:	3508      	adds	r5, #8
 801663c:	2d0c      	cmp	r5, #12
 801663e:	bf38      	it	cc
 8016640:	250c      	movcc	r5, #12
 8016642:	4629      	mov	r1, r5
 8016644:	4638      	mov	r0, r7
 8016646:	f7ff ffa5 	bl	8016594 <sbrk_aligned>
 801664a:	3001      	adds	r0, #1
 801664c:	d02b      	beq.n	80166a6 <_malloc_r+0xd2>
 801664e:	6823      	ldr	r3, [r4, #0]
 8016650:	442b      	add	r3, r5
 8016652:	6023      	str	r3, [r4, #0]
 8016654:	e00e      	b.n	8016674 <_malloc_r+0xa0>
 8016656:	6822      	ldr	r2, [r4, #0]
 8016658:	1b52      	subs	r2, r2, r5
 801665a:	d41e      	bmi.n	801669a <_malloc_r+0xc6>
 801665c:	2a0b      	cmp	r2, #11
 801665e:	d916      	bls.n	801668e <_malloc_r+0xba>
 8016660:	1961      	adds	r1, r4, r5
 8016662:	42a3      	cmp	r3, r4
 8016664:	6025      	str	r5, [r4, #0]
 8016666:	bf18      	it	ne
 8016668:	6059      	strne	r1, [r3, #4]
 801666a:	6863      	ldr	r3, [r4, #4]
 801666c:	bf08      	it	eq
 801666e:	6031      	streq	r1, [r6, #0]
 8016670:	5162      	str	r2, [r4, r5]
 8016672:	604b      	str	r3, [r1, #4]
 8016674:	4638      	mov	r0, r7
 8016676:	f104 060b 	add.w	r6, r4, #11
 801667a:	f000 fb8b 	bl	8016d94 <__malloc_unlock>
 801667e:	f026 0607 	bic.w	r6, r6, #7
 8016682:	1d23      	adds	r3, r4, #4
 8016684:	1af2      	subs	r2, r6, r3
 8016686:	d0b6      	beq.n	80165f6 <_malloc_r+0x22>
 8016688:	1b9b      	subs	r3, r3, r6
 801668a:	50a3      	str	r3, [r4, r2]
 801668c:	e7b3      	b.n	80165f6 <_malloc_r+0x22>
 801668e:	6862      	ldr	r2, [r4, #4]
 8016690:	42a3      	cmp	r3, r4
 8016692:	bf0c      	ite	eq
 8016694:	6032      	streq	r2, [r6, #0]
 8016696:	605a      	strne	r2, [r3, #4]
 8016698:	e7ec      	b.n	8016674 <_malloc_r+0xa0>
 801669a:	4623      	mov	r3, r4
 801669c:	6864      	ldr	r4, [r4, #4]
 801669e:	e7b2      	b.n	8016606 <_malloc_r+0x32>
 80166a0:	4634      	mov	r4, r6
 80166a2:	6876      	ldr	r6, [r6, #4]
 80166a4:	e7b9      	b.n	801661a <_malloc_r+0x46>
 80166a6:	230c      	movs	r3, #12
 80166a8:	603b      	str	r3, [r7, #0]
 80166aa:	4638      	mov	r0, r7
 80166ac:	f000 fb72 	bl	8016d94 <__malloc_unlock>
 80166b0:	e7a1      	b.n	80165f6 <_malloc_r+0x22>
 80166b2:	6025      	str	r5, [r4, #0]
 80166b4:	e7de      	b.n	8016674 <_malloc_r+0xa0>
 80166b6:	bf00      	nop
 80166b8:	24005a5c 	.word	0x24005a5c

080166bc <_puts_r>:
 80166bc:	b570      	push	{r4, r5, r6, lr}
 80166be:	460e      	mov	r6, r1
 80166c0:	4605      	mov	r5, r0
 80166c2:	b118      	cbz	r0, 80166cc <_puts_r+0x10>
 80166c4:	6983      	ldr	r3, [r0, #24]
 80166c6:	b90b      	cbnz	r3, 80166cc <_puts_r+0x10>
 80166c8:	f000 fa58 	bl	8016b7c <__sinit>
 80166cc:	69ab      	ldr	r3, [r5, #24]
 80166ce:	68ac      	ldr	r4, [r5, #8]
 80166d0:	b913      	cbnz	r3, 80166d8 <_puts_r+0x1c>
 80166d2:	4628      	mov	r0, r5
 80166d4:	f000 fa52 	bl	8016b7c <__sinit>
 80166d8:	4b2c      	ldr	r3, [pc, #176]	; (801678c <_puts_r+0xd0>)
 80166da:	429c      	cmp	r4, r3
 80166dc:	d120      	bne.n	8016720 <_puts_r+0x64>
 80166de:	686c      	ldr	r4, [r5, #4]
 80166e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80166e2:	07db      	lsls	r3, r3, #31
 80166e4:	d405      	bmi.n	80166f2 <_puts_r+0x36>
 80166e6:	89a3      	ldrh	r3, [r4, #12]
 80166e8:	0598      	lsls	r0, r3, #22
 80166ea:	d402      	bmi.n	80166f2 <_puts_r+0x36>
 80166ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166ee:	f000 fae3 	bl	8016cb8 <__retarget_lock_acquire_recursive>
 80166f2:	89a3      	ldrh	r3, [r4, #12]
 80166f4:	0719      	lsls	r1, r3, #28
 80166f6:	d51d      	bpl.n	8016734 <_puts_r+0x78>
 80166f8:	6923      	ldr	r3, [r4, #16]
 80166fa:	b1db      	cbz	r3, 8016734 <_puts_r+0x78>
 80166fc:	3e01      	subs	r6, #1
 80166fe:	68a3      	ldr	r3, [r4, #8]
 8016700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016704:	3b01      	subs	r3, #1
 8016706:	60a3      	str	r3, [r4, #8]
 8016708:	bb39      	cbnz	r1, 801675a <_puts_r+0x9e>
 801670a:	2b00      	cmp	r3, #0
 801670c:	da38      	bge.n	8016780 <_puts_r+0xc4>
 801670e:	4622      	mov	r2, r4
 8016710:	210a      	movs	r1, #10
 8016712:	4628      	mov	r0, r5
 8016714:	f000 f858 	bl	80167c8 <__swbuf_r>
 8016718:	3001      	adds	r0, #1
 801671a:	d011      	beq.n	8016740 <_puts_r+0x84>
 801671c:	250a      	movs	r5, #10
 801671e:	e011      	b.n	8016744 <_puts_r+0x88>
 8016720:	4b1b      	ldr	r3, [pc, #108]	; (8016790 <_puts_r+0xd4>)
 8016722:	429c      	cmp	r4, r3
 8016724:	d101      	bne.n	801672a <_puts_r+0x6e>
 8016726:	68ac      	ldr	r4, [r5, #8]
 8016728:	e7da      	b.n	80166e0 <_puts_r+0x24>
 801672a:	4b1a      	ldr	r3, [pc, #104]	; (8016794 <_puts_r+0xd8>)
 801672c:	429c      	cmp	r4, r3
 801672e:	bf08      	it	eq
 8016730:	68ec      	ldreq	r4, [r5, #12]
 8016732:	e7d5      	b.n	80166e0 <_puts_r+0x24>
 8016734:	4621      	mov	r1, r4
 8016736:	4628      	mov	r0, r5
 8016738:	f000 f898 	bl	801686c <__swsetup_r>
 801673c:	2800      	cmp	r0, #0
 801673e:	d0dd      	beq.n	80166fc <_puts_r+0x40>
 8016740:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016746:	07da      	lsls	r2, r3, #31
 8016748:	d405      	bmi.n	8016756 <_puts_r+0x9a>
 801674a:	89a3      	ldrh	r3, [r4, #12]
 801674c:	059b      	lsls	r3, r3, #22
 801674e:	d402      	bmi.n	8016756 <_puts_r+0x9a>
 8016750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016752:	f000 fab2 	bl	8016cba <__retarget_lock_release_recursive>
 8016756:	4628      	mov	r0, r5
 8016758:	bd70      	pop	{r4, r5, r6, pc}
 801675a:	2b00      	cmp	r3, #0
 801675c:	da04      	bge.n	8016768 <_puts_r+0xac>
 801675e:	69a2      	ldr	r2, [r4, #24]
 8016760:	429a      	cmp	r2, r3
 8016762:	dc06      	bgt.n	8016772 <_puts_r+0xb6>
 8016764:	290a      	cmp	r1, #10
 8016766:	d004      	beq.n	8016772 <_puts_r+0xb6>
 8016768:	6823      	ldr	r3, [r4, #0]
 801676a:	1c5a      	adds	r2, r3, #1
 801676c:	6022      	str	r2, [r4, #0]
 801676e:	7019      	strb	r1, [r3, #0]
 8016770:	e7c5      	b.n	80166fe <_puts_r+0x42>
 8016772:	4622      	mov	r2, r4
 8016774:	4628      	mov	r0, r5
 8016776:	f000 f827 	bl	80167c8 <__swbuf_r>
 801677a:	3001      	adds	r0, #1
 801677c:	d1bf      	bne.n	80166fe <_puts_r+0x42>
 801677e:	e7df      	b.n	8016740 <_puts_r+0x84>
 8016780:	6823      	ldr	r3, [r4, #0]
 8016782:	250a      	movs	r5, #10
 8016784:	1c5a      	adds	r2, r3, #1
 8016786:	6022      	str	r2, [r4, #0]
 8016788:	701d      	strb	r5, [r3, #0]
 801678a:	e7db      	b.n	8016744 <_puts_r+0x88>
 801678c:	08017318 	.word	0x08017318
 8016790:	08017338 	.word	0x08017338
 8016794:	080172f8 	.word	0x080172f8

08016798 <puts>:
 8016798:	4b02      	ldr	r3, [pc, #8]	; (80167a4 <puts+0xc>)
 801679a:	4601      	mov	r1, r0
 801679c:	6818      	ldr	r0, [r3, #0]
 801679e:	f7ff bf8d 	b.w	80166bc <_puts_r>
 80167a2:	bf00      	nop
 80167a4:	240000a4 	.word	0x240000a4

080167a8 <_sbrk_r>:
 80167a8:	b538      	push	{r3, r4, r5, lr}
 80167aa:	4d06      	ldr	r5, [pc, #24]	; (80167c4 <_sbrk_r+0x1c>)
 80167ac:	2300      	movs	r3, #0
 80167ae:	4604      	mov	r4, r0
 80167b0:	4608      	mov	r0, r1
 80167b2:	602b      	str	r3, [r5, #0]
 80167b4:	f7ed f95e 	bl	8003a74 <_sbrk>
 80167b8:	1c43      	adds	r3, r0, #1
 80167ba:	d102      	bne.n	80167c2 <_sbrk_r+0x1a>
 80167bc:	682b      	ldr	r3, [r5, #0]
 80167be:	b103      	cbz	r3, 80167c2 <_sbrk_r+0x1a>
 80167c0:	6023      	str	r3, [r4, #0]
 80167c2:	bd38      	pop	{r3, r4, r5, pc}
 80167c4:	24005a68 	.word	0x24005a68

080167c8 <__swbuf_r>:
 80167c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ca:	460e      	mov	r6, r1
 80167cc:	4614      	mov	r4, r2
 80167ce:	4605      	mov	r5, r0
 80167d0:	b118      	cbz	r0, 80167da <__swbuf_r+0x12>
 80167d2:	6983      	ldr	r3, [r0, #24]
 80167d4:	b90b      	cbnz	r3, 80167da <__swbuf_r+0x12>
 80167d6:	f000 f9d1 	bl	8016b7c <__sinit>
 80167da:	4b21      	ldr	r3, [pc, #132]	; (8016860 <__swbuf_r+0x98>)
 80167dc:	429c      	cmp	r4, r3
 80167de:	d12b      	bne.n	8016838 <__swbuf_r+0x70>
 80167e0:	686c      	ldr	r4, [r5, #4]
 80167e2:	69a3      	ldr	r3, [r4, #24]
 80167e4:	60a3      	str	r3, [r4, #8]
 80167e6:	89a3      	ldrh	r3, [r4, #12]
 80167e8:	071a      	lsls	r2, r3, #28
 80167ea:	d52f      	bpl.n	801684c <__swbuf_r+0x84>
 80167ec:	6923      	ldr	r3, [r4, #16]
 80167ee:	b36b      	cbz	r3, 801684c <__swbuf_r+0x84>
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	6820      	ldr	r0, [r4, #0]
 80167f4:	1ac0      	subs	r0, r0, r3
 80167f6:	6963      	ldr	r3, [r4, #20]
 80167f8:	b2f6      	uxtb	r6, r6
 80167fa:	4283      	cmp	r3, r0
 80167fc:	4637      	mov	r7, r6
 80167fe:	dc04      	bgt.n	801680a <__swbuf_r+0x42>
 8016800:	4621      	mov	r1, r4
 8016802:	4628      	mov	r0, r5
 8016804:	f000 f926 	bl	8016a54 <_fflush_r>
 8016808:	bb30      	cbnz	r0, 8016858 <__swbuf_r+0x90>
 801680a:	68a3      	ldr	r3, [r4, #8]
 801680c:	3b01      	subs	r3, #1
 801680e:	60a3      	str	r3, [r4, #8]
 8016810:	6823      	ldr	r3, [r4, #0]
 8016812:	1c5a      	adds	r2, r3, #1
 8016814:	6022      	str	r2, [r4, #0]
 8016816:	701e      	strb	r6, [r3, #0]
 8016818:	6963      	ldr	r3, [r4, #20]
 801681a:	3001      	adds	r0, #1
 801681c:	4283      	cmp	r3, r0
 801681e:	d004      	beq.n	801682a <__swbuf_r+0x62>
 8016820:	89a3      	ldrh	r3, [r4, #12]
 8016822:	07db      	lsls	r3, r3, #31
 8016824:	d506      	bpl.n	8016834 <__swbuf_r+0x6c>
 8016826:	2e0a      	cmp	r6, #10
 8016828:	d104      	bne.n	8016834 <__swbuf_r+0x6c>
 801682a:	4621      	mov	r1, r4
 801682c:	4628      	mov	r0, r5
 801682e:	f000 f911 	bl	8016a54 <_fflush_r>
 8016832:	b988      	cbnz	r0, 8016858 <__swbuf_r+0x90>
 8016834:	4638      	mov	r0, r7
 8016836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016838:	4b0a      	ldr	r3, [pc, #40]	; (8016864 <__swbuf_r+0x9c>)
 801683a:	429c      	cmp	r4, r3
 801683c:	d101      	bne.n	8016842 <__swbuf_r+0x7a>
 801683e:	68ac      	ldr	r4, [r5, #8]
 8016840:	e7cf      	b.n	80167e2 <__swbuf_r+0x1a>
 8016842:	4b09      	ldr	r3, [pc, #36]	; (8016868 <__swbuf_r+0xa0>)
 8016844:	429c      	cmp	r4, r3
 8016846:	bf08      	it	eq
 8016848:	68ec      	ldreq	r4, [r5, #12]
 801684a:	e7ca      	b.n	80167e2 <__swbuf_r+0x1a>
 801684c:	4621      	mov	r1, r4
 801684e:	4628      	mov	r0, r5
 8016850:	f000 f80c 	bl	801686c <__swsetup_r>
 8016854:	2800      	cmp	r0, #0
 8016856:	d0cb      	beq.n	80167f0 <__swbuf_r+0x28>
 8016858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801685c:	e7ea      	b.n	8016834 <__swbuf_r+0x6c>
 801685e:	bf00      	nop
 8016860:	08017318 	.word	0x08017318
 8016864:	08017338 	.word	0x08017338
 8016868:	080172f8 	.word	0x080172f8

0801686c <__swsetup_r>:
 801686c:	4b32      	ldr	r3, [pc, #200]	; (8016938 <__swsetup_r+0xcc>)
 801686e:	b570      	push	{r4, r5, r6, lr}
 8016870:	681d      	ldr	r5, [r3, #0]
 8016872:	4606      	mov	r6, r0
 8016874:	460c      	mov	r4, r1
 8016876:	b125      	cbz	r5, 8016882 <__swsetup_r+0x16>
 8016878:	69ab      	ldr	r3, [r5, #24]
 801687a:	b913      	cbnz	r3, 8016882 <__swsetup_r+0x16>
 801687c:	4628      	mov	r0, r5
 801687e:	f000 f97d 	bl	8016b7c <__sinit>
 8016882:	4b2e      	ldr	r3, [pc, #184]	; (801693c <__swsetup_r+0xd0>)
 8016884:	429c      	cmp	r4, r3
 8016886:	d10f      	bne.n	80168a8 <__swsetup_r+0x3c>
 8016888:	686c      	ldr	r4, [r5, #4]
 801688a:	89a3      	ldrh	r3, [r4, #12]
 801688c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016890:	0719      	lsls	r1, r3, #28
 8016892:	d42c      	bmi.n	80168ee <__swsetup_r+0x82>
 8016894:	06dd      	lsls	r5, r3, #27
 8016896:	d411      	bmi.n	80168bc <__swsetup_r+0x50>
 8016898:	2309      	movs	r3, #9
 801689a:	6033      	str	r3, [r6, #0]
 801689c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80168a0:	81a3      	strh	r3, [r4, #12]
 80168a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80168a6:	e03e      	b.n	8016926 <__swsetup_r+0xba>
 80168a8:	4b25      	ldr	r3, [pc, #148]	; (8016940 <__swsetup_r+0xd4>)
 80168aa:	429c      	cmp	r4, r3
 80168ac:	d101      	bne.n	80168b2 <__swsetup_r+0x46>
 80168ae:	68ac      	ldr	r4, [r5, #8]
 80168b0:	e7eb      	b.n	801688a <__swsetup_r+0x1e>
 80168b2:	4b24      	ldr	r3, [pc, #144]	; (8016944 <__swsetup_r+0xd8>)
 80168b4:	429c      	cmp	r4, r3
 80168b6:	bf08      	it	eq
 80168b8:	68ec      	ldreq	r4, [r5, #12]
 80168ba:	e7e6      	b.n	801688a <__swsetup_r+0x1e>
 80168bc:	0758      	lsls	r0, r3, #29
 80168be:	d512      	bpl.n	80168e6 <__swsetup_r+0x7a>
 80168c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168c2:	b141      	cbz	r1, 80168d6 <__swsetup_r+0x6a>
 80168c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168c8:	4299      	cmp	r1, r3
 80168ca:	d002      	beq.n	80168d2 <__swsetup_r+0x66>
 80168cc:	4630      	mov	r0, r6
 80168ce:	f7ff fe15 	bl	80164fc <_free_r>
 80168d2:	2300      	movs	r3, #0
 80168d4:	6363      	str	r3, [r4, #52]	; 0x34
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80168dc:	81a3      	strh	r3, [r4, #12]
 80168de:	2300      	movs	r3, #0
 80168e0:	6063      	str	r3, [r4, #4]
 80168e2:	6923      	ldr	r3, [r4, #16]
 80168e4:	6023      	str	r3, [r4, #0]
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	f043 0308 	orr.w	r3, r3, #8
 80168ec:	81a3      	strh	r3, [r4, #12]
 80168ee:	6923      	ldr	r3, [r4, #16]
 80168f0:	b94b      	cbnz	r3, 8016906 <__swsetup_r+0x9a>
 80168f2:	89a3      	ldrh	r3, [r4, #12]
 80168f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80168f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168fc:	d003      	beq.n	8016906 <__swsetup_r+0x9a>
 80168fe:	4621      	mov	r1, r4
 8016900:	4630      	mov	r0, r6
 8016902:	f000 fa01 	bl	8016d08 <__smakebuf_r>
 8016906:	89a0      	ldrh	r0, [r4, #12]
 8016908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801690c:	f010 0301 	ands.w	r3, r0, #1
 8016910:	d00a      	beq.n	8016928 <__swsetup_r+0xbc>
 8016912:	2300      	movs	r3, #0
 8016914:	60a3      	str	r3, [r4, #8]
 8016916:	6963      	ldr	r3, [r4, #20]
 8016918:	425b      	negs	r3, r3
 801691a:	61a3      	str	r3, [r4, #24]
 801691c:	6923      	ldr	r3, [r4, #16]
 801691e:	b943      	cbnz	r3, 8016932 <__swsetup_r+0xc6>
 8016920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016924:	d1ba      	bne.n	801689c <__swsetup_r+0x30>
 8016926:	bd70      	pop	{r4, r5, r6, pc}
 8016928:	0781      	lsls	r1, r0, #30
 801692a:	bf58      	it	pl
 801692c:	6963      	ldrpl	r3, [r4, #20]
 801692e:	60a3      	str	r3, [r4, #8]
 8016930:	e7f4      	b.n	801691c <__swsetup_r+0xb0>
 8016932:	2000      	movs	r0, #0
 8016934:	e7f7      	b.n	8016926 <__swsetup_r+0xba>
 8016936:	bf00      	nop
 8016938:	240000a4 	.word	0x240000a4
 801693c:	08017318 	.word	0x08017318
 8016940:	08017338 	.word	0x08017338
 8016944:	080172f8 	.word	0x080172f8

08016948 <__sflush_r>:
 8016948:	898a      	ldrh	r2, [r1, #12]
 801694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694e:	4605      	mov	r5, r0
 8016950:	0710      	lsls	r0, r2, #28
 8016952:	460c      	mov	r4, r1
 8016954:	d458      	bmi.n	8016a08 <__sflush_r+0xc0>
 8016956:	684b      	ldr	r3, [r1, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	dc05      	bgt.n	8016968 <__sflush_r+0x20>
 801695c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801695e:	2b00      	cmp	r3, #0
 8016960:	dc02      	bgt.n	8016968 <__sflush_r+0x20>
 8016962:	2000      	movs	r0, #0
 8016964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801696a:	2e00      	cmp	r6, #0
 801696c:	d0f9      	beq.n	8016962 <__sflush_r+0x1a>
 801696e:	2300      	movs	r3, #0
 8016970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016974:	682f      	ldr	r7, [r5, #0]
 8016976:	602b      	str	r3, [r5, #0]
 8016978:	d032      	beq.n	80169e0 <__sflush_r+0x98>
 801697a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801697c:	89a3      	ldrh	r3, [r4, #12]
 801697e:	075a      	lsls	r2, r3, #29
 8016980:	d505      	bpl.n	801698e <__sflush_r+0x46>
 8016982:	6863      	ldr	r3, [r4, #4]
 8016984:	1ac0      	subs	r0, r0, r3
 8016986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016988:	b10b      	cbz	r3, 801698e <__sflush_r+0x46>
 801698a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801698c:	1ac0      	subs	r0, r0, r3
 801698e:	2300      	movs	r3, #0
 8016990:	4602      	mov	r2, r0
 8016992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016994:	6a21      	ldr	r1, [r4, #32]
 8016996:	4628      	mov	r0, r5
 8016998:	47b0      	blx	r6
 801699a:	1c43      	adds	r3, r0, #1
 801699c:	89a3      	ldrh	r3, [r4, #12]
 801699e:	d106      	bne.n	80169ae <__sflush_r+0x66>
 80169a0:	6829      	ldr	r1, [r5, #0]
 80169a2:	291d      	cmp	r1, #29
 80169a4:	d82c      	bhi.n	8016a00 <__sflush_r+0xb8>
 80169a6:	4a2a      	ldr	r2, [pc, #168]	; (8016a50 <__sflush_r+0x108>)
 80169a8:	40ca      	lsrs	r2, r1
 80169aa:	07d6      	lsls	r6, r2, #31
 80169ac:	d528      	bpl.n	8016a00 <__sflush_r+0xb8>
 80169ae:	2200      	movs	r2, #0
 80169b0:	6062      	str	r2, [r4, #4]
 80169b2:	04d9      	lsls	r1, r3, #19
 80169b4:	6922      	ldr	r2, [r4, #16]
 80169b6:	6022      	str	r2, [r4, #0]
 80169b8:	d504      	bpl.n	80169c4 <__sflush_r+0x7c>
 80169ba:	1c42      	adds	r2, r0, #1
 80169bc:	d101      	bne.n	80169c2 <__sflush_r+0x7a>
 80169be:	682b      	ldr	r3, [r5, #0]
 80169c0:	b903      	cbnz	r3, 80169c4 <__sflush_r+0x7c>
 80169c2:	6560      	str	r0, [r4, #84]	; 0x54
 80169c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80169c6:	602f      	str	r7, [r5, #0]
 80169c8:	2900      	cmp	r1, #0
 80169ca:	d0ca      	beq.n	8016962 <__sflush_r+0x1a>
 80169cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169d0:	4299      	cmp	r1, r3
 80169d2:	d002      	beq.n	80169da <__sflush_r+0x92>
 80169d4:	4628      	mov	r0, r5
 80169d6:	f7ff fd91 	bl	80164fc <_free_r>
 80169da:	2000      	movs	r0, #0
 80169dc:	6360      	str	r0, [r4, #52]	; 0x34
 80169de:	e7c1      	b.n	8016964 <__sflush_r+0x1c>
 80169e0:	6a21      	ldr	r1, [r4, #32]
 80169e2:	2301      	movs	r3, #1
 80169e4:	4628      	mov	r0, r5
 80169e6:	47b0      	blx	r6
 80169e8:	1c41      	adds	r1, r0, #1
 80169ea:	d1c7      	bne.n	801697c <__sflush_r+0x34>
 80169ec:	682b      	ldr	r3, [r5, #0]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d0c4      	beq.n	801697c <__sflush_r+0x34>
 80169f2:	2b1d      	cmp	r3, #29
 80169f4:	d001      	beq.n	80169fa <__sflush_r+0xb2>
 80169f6:	2b16      	cmp	r3, #22
 80169f8:	d101      	bne.n	80169fe <__sflush_r+0xb6>
 80169fa:	602f      	str	r7, [r5, #0]
 80169fc:	e7b1      	b.n	8016962 <__sflush_r+0x1a>
 80169fe:	89a3      	ldrh	r3, [r4, #12]
 8016a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a04:	81a3      	strh	r3, [r4, #12]
 8016a06:	e7ad      	b.n	8016964 <__sflush_r+0x1c>
 8016a08:	690f      	ldr	r7, [r1, #16]
 8016a0a:	2f00      	cmp	r7, #0
 8016a0c:	d0a9      	beq.n	8016962 <__sflush_r+0x1a>
 8016a0e:	0793      	lsls	r3, r2, #30
 8016a10:	680e      	ldr	r6, [r1, #0]
 8016a12:	bf08      	it	eq
 8016a14:	694b      	ldreq	r3, [r1, #20]
 8016a16:	600f      	str	r7, [r1, #0]
 8016a18:	bf18      	it	ne
 8016a1a:	2300      	movne	r3, #0
 8016a1c:	eba6 0807 	sub.w	r8, r6, r7
 8016a20:	608b      	str	r3, [r1, #8]
 8016a22:	f1b8 0f00 	cmp.w	r8, #0
 8016a26:	dd9c      	ble.n	8016962 <__sflush_r+0x1a>
 8016a28:	6a21      	ldr	r1, [r4, #32]
 8016a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a2c:	4643      	mov	r3, r8
 8016a2e:	463a      	mov	r2, r7
 8016a30:	4628      	mov	r0, r5
 8016a32:	47b0      	blx	r6
 8016a34:	2800      	cmp	r0, #0
 8016a36:	dc06      	bgt.n	8016a46 <__sflush_r+0xfe>
 8016a38:	89a3      	ldrh	r3, [r4, #12]
 8016a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a3e:	81a3      	strh	r3, [r4, #12]
 8016a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a44:	e78e      	b.n	8016964 <__sflush_r+0x1c>
 8016a46:	4407      	add	r7, r0
 8016a48:	eba8 0800 	sub.w	r8, r8, r0
 8016a4c:	e7e9      	b.n	8016a22 <__sflush_r+0xda>
 8016a4e:	bf00      	nop
 8016a50:	20400001 	.word	0x20400001

08016a54 <_fflush_r>:
 8016a54:	b538      	push	{r3, r4, r5, lr}
 8016a56:	690b      	ldr	r3, [r1, #16]
 8016a58:	4605      	mov	r5, r0
 8016a5a:	460c      	mov	r4, r1
 8016a5c:	b913      	cbnz	r3, 8016a64 <_fflush_r+0x10>
 8016a5e:	2500      	movs	r5, #0
 8016a60:	4628      	mov	r0, r5
 8016a62:	bd38      	pop	{r3, r4, r5, pc}
 8016a64:	b118      	cbz	r0, 8016a6e <_fflush_r+0x1a>
 8016a66:	6983      	ldr	r3, [r0, #24]
 8016a68:	b90b      	cbnz	r3, 8016a6e <_fflush_r+0x1a>
 8016a6a:	f000 f887 	bl	8016b7c <__sinit>
 8016a6e:	4b14      	ldr	r3, [pc, #80]	; (8016ac0 <_fflush_r+0x6c>)
 8016a70:	429c      	cmp	r4, r3
 8016a72:	d11b      	bne.n	8016aac <_fflush_r+0x58>
 8016a74:	686c      	ldr	r4, [r5, #4]
 8016a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d0ef      	beq.n	8016a5e <_fflush_r+0xa>
 8016a7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a80:	07d0      	lsls	r0, r2, #31
 8016a82:	d404      	bmi.n	8016a8e <_fflush_r+0x3a>
 8016a84:	0599      	lsls	r1, r3, #22
 8016a86:	d402      	bmi.n	8016a8e <_fflush_r+0x3a>
 8016a88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a8a:	f000 f915 	bl	8016cb8 <__retarget_lock_acquire_recursive>
 8016a8e:	4628      	mov	r0, r5
 8016a90:	4621      	mov	r1, r4
 8016a92:	f7ff ff59 	bl	8016948 <__sflush_r>
 8016a96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a98:	07da      	lsls	r2, r3, #31
 8016a9a:	4605      	mov	r5, r0
 8016a9c:	d4e0      	bmi.n	8016a60 <_fflush_r+0xc>
 8016a9e:	89a3      	ldrh	r3, [r4, #12]
 8016aa0:	059b      	lsls	r3, r3, #22
 8016aa2:	d4dd      	bmi.n	8016a60 <_fflush_r+0xc>
 8016aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016aa6:	f000 f908 	bl	8016cba <__retarget_lock_release_recursive>
 8016aaa:	e7d9      	b.n	8016a60 <_fflush_r+0xc>
 8016aac:	4b05      	ldr	r3, [pc, #20]	; (8016ac4 <_fflush_r+0x70>)
 8016aae:	429c      	cmp	r4, r3
 8016ab0:	d101      	bne.n	8016ab6 <_fflush_r+0x62>
 8016ab2:	68ac      	ldr	r4, [r5, #8]
 8016ab4:	e7df      	b.n	8016a76 <_fflush_r+0x22>
 8016ab6:	4b04      	ldr	r3, [pc, #16]	; (8016ac8 <_fflush_r+0x74>)
 8016ab8:	429c      	cmp	r4, r3
 8016aba:	bf08      	it	eq
 8016abc:	68ec      	ldreq	r4, [r5, #12]
 8016abe:	e7da      	b.n	8016a76 <_fflush_r+0x22>
 8016ac0:	08017318 	.word	0x08017318
 8016ac4:	08017338 	.word	0x08017338
 8016ac8:	080172f8 	.word	0x080172f8

08016acc <std>:
 8016acc:	2300      	movs	r3, #0
 8016ace:	b510      	push	{r4, lr}
 8016ad0:	4604      	mov	r4, r0
 8016ad2:	e9c0 3300 	strd	r3, r3, [r0]
 8016ad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ada:	6083      	str	r3, [r0, #8]
 8016adc:	8181      	strh	r1, [r0, #12]
 8016ade:	6643      	str	r3, [r0, #100]	; 0x64
 8016ae0:	81c2      	strh	r2, [r0, #14]
 8016ae2:	6183      	str	r3, [r0, #24]
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	2208      	movs	r2, #8
 8016ae8:	305c      	adds	r0, #92	; 0x5c
 8016aea:	f7ff fcff 	bl	80164ec <memset>
 8016aee:	4b05      	ldr	r3, [pc, #20]	; (8016b04 <std+0x38>)
 8016af0:	6263      	str	r3, [r4, #36]	; 0x24
 8016af2:	4b05      	ldr	r3, [pc, #20]	; (8016b08 <std+0x3c>)
 8016af4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016af6:	4b05      	ldr	r3, [pc, #20]	; (8016b0c <std+0x40>)
 8016af8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016afa:	4b05      	ldr	r3, [pc, #20]	; (8016b10 <std+0x44>)
 8016afc:	6224      	str	r4, [r4, #32]
 8016afe:	6323      	str	r3, [r4, #48]	; 0x30
 8016b00:	bd10      	pop	{r4, pc}
 8016b02:	bf00      	nop
 8016b04:	08016da1 	.word	0x08016da1
 8016b08:	08016dc3 	.word	0x08016dc3
 8016b0c:	08016dfb 	.word	0x08016dfb
 8016b10:	08016e1f 	.word	0x08016e1f

08016b14 <_cleanup_r>:
 8016b14:	4901      	ldr	r1, [pc, #4]	; (8016b1c <_cleanup_r+0x8>)
 8016b16:	f000 b8af 	b.w	8016c78 <_fwalk_reent>
 8016b1a:	bf00      	nop
 8016b1c:	08016a55 	.word	0x08016a55

08016b20 <__sfmoreglue>:
 8016b20:	b570      	push	{r4, r5, r6, lr}
 8016b22:	2268      	movs	r2, #104	; 0x68
 8016b24:	1e4d      	subs	r5, r1, #1
 8016b26:	4355      	muls	r5, r2
 8016b28:	460e      	mov	r6, r1
 8016b2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016b2e:	f7ff fd51 	bl	80165d4 <_malloc_r>
 8016b32:	4604      	mov	r4, r0
 8016b34:	b140      	cbz	r0, 8016b48 <__sfmoreglue+0x28>
 8016b36:	2100      	movs	r1, #0
 8016b38:	e9c0 1600 	strd	r1, r6, [r0]
 8016b3c:	300c      	adds	r0, #12
 8016b3e:	60a0      	str	r0, [r4, #8]
 8016b40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016b44:	f7ff fcd2 	bl	80164ec <memset>
 8016b48:	4620      	mov	r0, r4
 8016b4a:	bd70      	pop	{r4, r5, r6, pc}

08016b4c <__sfp_lock_acquire>:
 8016b4c:	4801      	ldr	r0, [pc, #4]	; (8016b54 <__sfp_lock_acquire+0x8>)
 8016b4e:	f000 b8b3 	b.w	8016cb8 <__retarget_lock_acquire_recursive>
 8016b52:	bf00      	nop
 8016b54:	24005a65 	.word	0x24005a65

08016b58 <__sfp_lock_release>:
 8016b58:	4801      	ldr	r0, [pc, #4]	; (8016b60 <__sfp_lock_release+0x8>)
 8016b5a:	f000 b8ae 	b.w	8016cba <__retarget_lock_release_recursive>
 8016b5e:	bf00      	nop
 8016b60:	24005a65 	.word	0x24005a65

08016b64 <__sinit_lock_acquire>:
 8016b64:	4801      	ldr	r0, [pc, #4]	; (8016b6c <__sinit_lock_acquire+0x8>)
 8016b66:	f000 b8a7 	b.w	8016cb8 <__retarget_lock_acquire_recursive>
 8016b6a:	bf00      	nop
 8016b6c:	24005a66 	.word	0x24005a66

08016b70 <__sinit_lock_release>:
 8016b70:	4801      	ldr	r0, [pc, #4]	; (8016b78 <__sinit_lock_release+0x8>)
 8016b72:	f000 b8a2 	b.w	8016cba <__retarget_lock_release_recursive>
 8016b76:	bf00      	nop
 8016b78:	24005a66 	.word	0x24005a66

08016b7c <__sinit>:
 8016b7c:	b510      	push	{r4, lr}
 8016b7e:	4604      	mov	r4, r0
 8016b80:	f7ff fff0 	bl	8016b64 <__sinit_lock_acquire>
 8016b84:	69a3      	ldr	r3, [r4, #24]
 8016b86:	b11b      	cbz	r3, 8016b90 <__sinit+0x14>
 8016b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b8c:	f7ff bff0 	b.w	8016b70 <__sinit_lock_release>
 8016b90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016b94:	6523      	str	r3, [r4, #80]	; 0x50
 8016b96:	4b13      	ldr	r3, [pc, #76]	; (8016be4 <__sinit+0x68>)
 8016b98:	4a13      	ldr	r2, [pc, #76]	; (8016be8 <__sinit+0x6c>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016b9e:	42a3      	cmp	r3, r4
 8016ba0:	bf04      	itt	eq
 8016ba2:	2301      	moveq	r3, #1
 8016ba4:	61a3      	streq	r3, [r4, #24]
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	f000 f820 	bl	8016bec <__sfp>
 8016bac:	6060      	str	r0, [r4, #4]
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f000 f81c 	bl	8016bec <__sfp>
 8016bb4:	60a0      	str	r0, [r4, #8]
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	f000 f818 	bl	8016bec <__sfp>
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	60e0      	str	r0, [r4, #12]
 8016bc0:	2104      	movs	r1, #4
 8016bc2:	6860      	ldr	r0, [r4, #4]
 8016bc4:	f7ff ff82 	bl	8016acc <std>
 8016bc8:	68a0      	ldr	r0, [r4, #8]
 8016bca:	2201      	movs	r2, #1
 8016bcc:	2109      	movs	r1, #9
 8016bce:	f7ff ff7d 	bl	8016acc <std>
 8016bd2:	68e0      	ldr	r0, [r4, #12]
 8016bd4:	2202      	movs	r2, #2
 8016bd6:	2112      	movs	r1, #18
 8016bd8:	f7ff ff78 	bl	8016acc <std>
 8016bdc:	2301      	movs	r3, #1
 8016bde:	61a3      	str	r3, [r4, #24]
 8016be0:	e7d2      	b.n	8016b88 <__sinit+0xc>
 8016be2:	bf00      	nop
 8016be4:	080172f4 	.word	0x080172f4
 8016be8:	08016b15 	.word	0x08016b15

08016bec <__sfp>:
 8016bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bee:	4607      	mov	r7, r0
 8016bf0:	f7ff ffac 	bl	8016b4c <__sfp_lock_acquire>
 8016bf4:	4b1e      	ldr	r3, [pc, #120]	; (8016c70 <__sfp+0x84>)
 8016bf6:	681e      	ldr	r6, [r3, #0]
 8016bf8:	69b3      	ldr	r3, [r6, #24]
 8016bfa:	b913      	cbnz	r3, 8016c02 <__sfp+0x16>
 8016bfc:	4630      	mov	r0, r6
 8016bfe:	f7ff ffbd 	bl	8016b7c <__sinit>
 8016c02:	3648      	adds	r6, #72	; 0x48
 8016c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016c08:	3b01      	subs	r3, #1
 8016c0a:	d503      	bpl.n	8016c14 <__sfp+0x28>
 8016c0c:	6833      	ldr	r3, [r6, #0]
 8016c0e:	b30b      	cbz	r3, 8016c54 <__sfp+0x68>
 8016c10:	6836      	ldr	r6, [r6, #0]
 8016c12:	e7f7      	b.n	8016c04 <__sfp+0x18>
 8016c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016c18:	b9d5      	cbnz	r5, 8016c50 <__sfp+0x64>
 8016c1a:	4b16      	ldr	r3, [pc, #88]	; (8016c74 <__sfp+0x88>)
 8016c1c:	60e3      	str	r3, [r4, #12]
 8016c1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016c22:	6665      	str	r5, [r4, #100]	; 0x64
 8016c24:	f000 f847 	bl	8016cb6 <__retarget_lock_init_recursive>
 8016c28:	f7ff ff96 	bl	8016b58 <__sfp_lock_release>
 8016c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016c34:	6025      	str	r5, [r4, #0]
 8016c36:	61a5      	str	r5, [r4, #24]
 8016c38:	2208      	movs	r2, #8
 8016c3a:	4629      	mov	r1, r5
 8016c3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016c40:	f7ff fc54 	bl	80164ec <memset>
 8016c44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016c48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016c4c:	4620      	mov	r0, r4
 8016c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c50:	3468      	adds	r4, #104	; 0x68
 8016c52:	e7d9      	b.n	8016c08 <__sfp+0x1c>
 8016c54:	2104      	movs	r1, #4
 8016c56:	4638      	mov	r0, r7
 8016c58:	f7ff ff62 	bl	8016b20 <__sfmoreglue>
 8016c5c:	4604      	mov	r4, r0
 8016c5e:	6030      	str	r0, [r6, #0]
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d1d5      	bne.n	8016c10 <__sfp+0x24>
 8016c64:	f7ff ff78 	bl	8016b58 <__sfp_lock_release>
 8016c68:	230c      	movs	r3, #12
 8016c6a:	603b      	str	r3, [r7, #0]
 8016c6c:	e7ee      	b.n	8016c4c <__sfp+0x60>
 8016c6e:	bf00      	nop
 8016c70:	080172f4 	.word	0x080172f4
 8016c74:	ffff0001 	.word	0xffff0001

08016c78 <_fwalk_reent>:
 8016c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	4688      	mov	r8, r1
 8016c80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016c84:	2700      	movs	r7, #0
 8016c86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8016c8e:	d505      	bpl.n	8016c9c <_fwalk_reent+0x24>
 8016c90:	6824      	ldr	r4, [r4, #0]
 8016c92:	2c00      	cmp	r4, #0
 8016c94:	d1f7      	bne.n	8016c86 <_fwalk_reent+0xe>
 8016c96:	4638      	mov	r0, r7
 8016c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c9c:	89ab      	ldrh	r3, [r5, #12]
 8016c9e:	2b01      	cmp	r3, #1
 8016ca0:	d907      	bls.n	8016cb2 <_fwalk_reent+0x3a>
 8016ca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	d003      	beq.n	8016cb2 <_fwalk_reent+0x3a>
 8016caa:	4629      	mov	r1, r5
 8016cac:	4630      	mov	r0, r6
 8016cae:	47c0      	blx	r8
 8016cb0:	4307      	orrs	r7, r0
 8016cb2:	3568      	adds	r5, #104	; 0x68
 8016cb4:	e7e9      	b.n	8016c8a <_fwalk_reent+0x12>

08016cb6 <__retarget_lock_init_recursive>:
 8016cb6:	4770      	bx	lr

08016cb8 <__retarget_lock_acquire_recursive>:
 8016cb8:	4770      	bx	lr

08016cba <__retarget_lock_release_recursive>:
 8016cba:	4770      	bx	lr

08016cbc <__swhatbuf_r>:
 8016cbc:	b570      	push	{r4, r5, r6, lr}
 8016cbe:	460e      	mov	r6, r1
 8016cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cc4:	2900      	cmp	r1, #0
 8016cc6:	b096      	sub	sp, #88	; 0x58
 8016cc8:	4614      	mov	r4, r2
 8016cca:	461d      	mov	r5, r3
 8016ccc:	da08      	bge.n	8016ce0 <__swhatbuf_r+0x24>
 8016cce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	602a      	str	r2, [r5, #0]
 8016cd6:	061a      	lsls	r2, r3, #24
 8016cd8:	d410      	bmi.n	8016cfc <__swhatbuf_r+0x40>
 8016cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016cde:	e00e      	b.n	8016cfe <__swhatbuf_r+0x42>
 8016ce0:	466a      	mov	r2, sp
 8016ce2:	f000 f8c3 	bl	8016e6c <_fstat_r>
 8016ce6:	2800      	cmp	r0, #0
 8016ce8:	dbf1      	blt.n	8016cce <__swhatbuf_r+0x12>
 8016cea:	9a01      	ldr	r2, [sp, #4]
 8016cec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016cf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016cf4:	425a      	negs	r2, r3
 8016cf6:	415a      	adcs	r2, r3
 8016cf8:	602a      	str	r2, [r5, #0]
 8016cfa:	e7ee      	b.n	8016cda <__swhatbuf_r+0x1e>
 8016cfc:	2340      	movs	r3, #64	; 0x40
 8016cfe:	2000      	movs	r0, #0
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	b016      	add	sp, #88	; 0x58
 8016d04:	bd70      	pop	{r4, r5, r6, pc}
	...

08016d08 <__smakebuf_r>:
 8016d08:	898b      	ldrh	r3, [r1, #12]
 8016d0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d0c:	079d      	lsls	r5, r3, #30
 8016d0e:	4606      	mov	r6, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	d507      	bpl.n	8016d24 <__smakebuf_r+0x1c>
 8016d14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d18:	6023      	str	r3, [r4, #0]
 8016d1a:	6123      	str	r3, [r4, #16]
 8016d1c:	2301      	movs	r3, #1
 8016d1e:	6163      	str	r3, [r4, #20]
 8016d20:	b002      	add	sp, #8
 8016d22:	bd70      	pop	{r4, r5, r6, pc}
 8016d24:	ab01      	add	r3, sp, #4
 8016d26:	466a      	mov	r2, sp
 8016d28:	f7ff ffc8 	bl	8016cbc <__swhatbuf_r>
 8016d2c:	9900      	ldr	r1, [sp, #0]
 8016d2e:	4605      	mov	r5, r0
 8016d30:	4630      	mov	r0, r6
 8016d32:	f7ff fc4f 	bl	80165d4 <_malloc_r>
 8016d36:	b948      	cbnz	r0, 8016d4c <__smakebuf_r+0x44>
 8016d38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d3c:	059a      	lsls	r2, r3, #22
 8016d3e:	d4ef      	bmi.n	8016d20 <__smakebuf_r+0x18>
 8016d40:	f023 0303 	bic.w	r3, r3, #3
 8016d44:	f043 0302 	orr.w	r3, r3, #2
 8016d48:	81a3      	strh	r3, [r4, #12]
 8016d4a:	e7e3      	b.n	8016d14 <__smakebuf_r+0xc>
 8016d4c:	4b0d      	ldr	r3, [pc, #52]	; (8016d84 <__smakebuf_r+0x7c>)
 8016d4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	6020      	str	r0, [r4, #0]
 8016d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d58:	81a3      	strh	r3, [r4, #12]
 8016d5a:	9b00      	ldr	r3, [sp, #0]
 8016d5c:	6163      	str	r3, [r4, #20]
 8016d5e:	9b01      	ldr	r3, [sp, #4]
 8016d60:	6120      	str	r0, [r4, #16]
 8016d62:	b15b      	cbz	r3, 8016d7c <__smakebuf_r+0x74>
 8016d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d68:	4630      	mov	r0, r6
 8016d6a:	f000 f891 	bl	8016e90 <_isatty_r>
 8016d6e:	b128      	cbz	r0, 8016d7c <__smakebuf_r+0x74>
 8016d70:	89a3      	ldrh	r3, [r4, #12]
 8016d72:	f023 0303 	bic.w	r3, r3, #3
 8016d76:	f043 0301 	orr.w	r3, r3, #1
 8016d7a:	81a3      	strh	r3, [r4, #12]
 8016d7c:	89a0      	ldrh	r0, [r4, #12]
 8016d7e:	4305      	orrs	r5, r0
 8016d80:	81a5      	strh	r5, [r4, #12]
 8016d82:	e7cd      	b.n	8016d20 <__smakebuf_r+0x18>
 8016d84:	08016b15 	.word	0x08016b15

08016d88 <__malloc_lock>:
 8016d88:	4801      	ldr	r0, [pc, #4]	; (8016d90 <__malloc_lock+0x8>)
 8016d8a:	f7ff bf95 	b.w	8016cb8 <__retarget_lock_acquire_recursive>
 8016d8e:	bf00      	nop
 8016d90:	24005a64 	.word	0x24005a64

08016d94 <__malloc_unlock>:
 8016d94:	4801      	ldr	r0, [pc, #4]	; (8016d9c <__malloc_unlock+0x8>)
 8016d96:	f7ff bf90 	b.w	8016cba <__retarget_lock_release_recursive>
 8016d9a:	bf00      	nop
 8016d9c:	24005a64 	.word	0x24005a64

08016da0 <__sread>:
 8016da0:	b510      	push	{r4, lr}
 8016da2:	460c      	mov	r4, r1
 8016da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016da8:	f000 f894 	bl	8016ed4 <_read_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	bfab      	itete	ge
 8016db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016db2:	89a3      	ldrhlt	r3, [r4, #12]
 8016db4:	181b      	addge	r3, r3, r0
 8016db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016dba:	bfac      	ite	ge
 8016dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016dbe:	81a3      	strhlt	r3, [r4, #12]
 8016dc0:	bd10      	pop	{r4, pc}

08016dc2 <__swrite>:
 8016dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dc6:	461f      	mov	r7, r3
 8016dc8:	898b      	ldrh	r3, [r1, #12]
 8016dca:	05db      	lsls	r3, r3, #23
 8016dcc:	4605      	mov	r5, r0
 8016dce:	460c      	mov	r4, r1
 8016dd0:	4616      	mov	r6, r2
 8016dd2:	d505      	bpl.n	8016de0 <__swrite+0x1e>
 8016dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dd8:	2302      	movs	r3, #2
 8016dda:	2200      	movs	r2, #0
 8016ddc:	f000 f868 	bl	8016eb0 <_lseek_r>
 8016de0:	89a3      	ldrh	r3, [r4, #12]
 8016de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016dea:	81a3      	strh	r3, [r4, #12]
 8016dec:	4632      	mov	r2, r6
 8016dee:	463b      	mov	r3, r7
 8016df0:	4628      	mov	r0, r5
 8016df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016df6:	f000 b817 	b.w	8016e28 <_write_r>

08016dfa <__sseek>:
 8016dfa:	b510      	push	{r4, lr}
 8016dfc:	460c      	mov	r4, r1
 8016dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e02:	f000 f855 	bl	8016eb0 <_lseek_r>
 8016e06:	1c43      	adds	r3, r0, #1
 8016e08:	89a3      	ldrh	r3, [r4, #12]
 8016e0a:	bf15      	itete	ne
 8016e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e16:	81a3      	strheq	r3, [r4, #12]
 8016e18:	bf18      	it	ne
 8016e1a:	81a3      	strhne	r3, [r4, #12]
 8016e1c:	bd10      	pop	{r4, pc}

08016e1e <__sclose>:
 8016e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e22:	f000 b813 	b.w	8016e4c <_close_r>
	...

08016e28 <_write_r>:
 8016e28:	b538      	push	{r3, r4, r5, lr}
 8016e2a:	4d07      	ldr	r5, [pc, #28]	; (8016e48 <_write_r+0x20>)
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	4608      	mov	r0, r1
 8016e30:	4611      	mov	r1, r2
 8016e32:	2200      	movs	r2, #0
 8016e34:	602a      	str	r2, [r5, #0]
 8016e36:	461a      	mov	r2, r3
 8016e38:	f7ec fdcb 	bl	80039d2 <_write>
 8016e3c:	1c43      	adds	r3, r0, #1
 8016e3e:	d102      	bne.n	8016e46 <_write_r+0x1e>
 8016e40:	682b      	ldr	r3, [r5, #0]
 8016e42:	b103      	cbz	r3, 8016e46 <_write_r+0x1e>
 8016e44:	6023      	str	r3, [r4, #0]
 8016e46:	bd38      	pop	{r3, r4, r5, pc}
 8016e48:	24005a68 	.word	0x24005a68

08016e4c <_close_r>:
 8016e4c:	b538      	push	{r3, r4, r5, lr}
 8016e4e:	4d06      	ldr	r5, [pc, #24]	; (8016e68 <_close_r+0x1c>)
 8016e50:	2300      	movs	r3, #0
 8016e52:	4604      	mov	r4, r0
 8016e54:	4608      	mov	r0, r1
 8016e56:	602b      	str	r3, [r5, #0]
 8016e58:	f7ec fdd7 	bl	8003a0a <_close>
 8016e5c:	1c43      	adds	r3, r0, #1
 8016e5e:	d102      	bne.n	8016e66 <_close_r+0x1a>
 8016e60:	682b      	ldr	r3, [r5, #0]
 8016e62:	b103      	cbz	r3, 8016e66 <_close_r+0x1a>
 8016e64:	6023      	str	r3, [r4, #0]
 8016e66:	bd38      	pop	{r3, r4, r5, pc}
 8016e68:	24005a68 	.word	0x24005a68

08016e6c <_fstat_r>:
 8016e6c:	b538      	push	{r3, r4, r5, lr}
 8016e6e:	4d07      	ldr	r5, [pc, #28]	; (8016e8c <_fstat_r+0x20>)
 8016e70:	2300      	movs	r3, #0
 8016e72:	4604      	mov	r4, r0
 8016e74:	4608      	mov	r0, r1
 8016e76:	4611      	mov	r1, r2
 8016e78:	602b      	str	r3, [r5, #0]
 8016e7a:	f7ec fdd2 	bl	8003a22 <_fstat>
 8016e7e:	1c43      	adds	r3, r0, #1
 8016e80:	d102      	bne.n	8016e88 <_fstat_r+0x1c>
 8016e82:	682b      	ldr	r3, [r5, #0]
 8016e84:	b103      	cbz	r3, 8016e88 <_fstat_r+0x1c>
 8016e86:	6023      	str	r3, [r4, #0]
 8016e88:	bd38      	pop	{r3, r4, r5, pc}
 8016e8a:	bf00      	nop
 8016e8c:	24005a68 	.word	0x24005a68

08016e90 <_isatty_r>:
 8016e90:	b538      	push	{r3, r4, r5, lr}
 8016e92:	4d06      	ldr	r5, [pc, #24]	; (8016eac <_isatty_r+0x1c>)
 8016e94:	2300      	movs	r3, #0
 8016e96:	4604      	mov	r4, r0
 8016e98:	4608      	mov	r0, r1
 8016e9a:	602b      	str	r3, [r5, #0]
 8016e9c:	f7ec fdd1 	bl	8003a42 <_isatty>
 8016ea0:	1c43      	adds	r3, r0, #1
 8016ea2:	d102      	bne.n	8016eaa <_isatty_r+0x1a>
 8016ea4:	682b      	ldr	r3, [r5, #0]
 8016ea6:	b103      	cbz	r3, 8016eaa <_isatty_r+0x1a>
 8016ea8:	6023      	str	r3, [r4, #0]
 8016eaa:	bd38      	pop	{r3, r4, r5, pc}
 8016eac:	24005a68 	.word	0x24005a68

08016eb0 <_lseek_r>:
 8016eb0:	b538      	push	{r3, r4, r5, lr}
 8016eb2:	4d07      	ldr	r5, [pc, #28]	; (8016ed0 <_lseek_r+0x20>)
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	4608      	mov	r0, r1
 8016eb8:	4611      	mov	r1, r2
 8016eba:	2200      	movs	r2, #0
 8016ebc:	602a      	str	r2, [r5, #0]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	f7ec fdca 	bl	8003a58 <_lseek>
 8016ec4:	1c43      	adds	r3, r0, #1
 8016ec6:	d102      	bne.n	8016ece <_lseek_r+0x1e>
 8016ec8:	682b      	ldr	r3, [r5, #0]
 8016eca:	b103      	cbz	r3, 8016ece <_lseek_r+0x1e>
 8016ecc:	6023      	str	r3, [r4, #0]
 8016ece:	bd38      	pop	{r3, r4, r5, pc}
 8016ed0:	24005a68 	.word	0x24005a68

08016ed4 <_read_r>:
 8016ed4:	b538      	push	{r3, r4, r5, lr}
 8016ed6:	4d07      	ldr	r5, [pc, #28]	; (8016ef4 <_read_r+0x20>)
 8016ed8:	4604      	mov	r4, r0
 8016eda:	4608      	mov	r0, r1
 8016edc:	4611      	mov	r1, r2
 8016ede:	2200      	movs	r2, #0
 8016ee0:	602a      	str	r2, [r5, #0]
 8016ee2:	461a      	mov	r2, r3
 8016ee4:	f7ec fd58 	bl	8003998 <_read>
 8016ee8:	1c43      	adds	r3, r0, #1
 8016eea:	d102      	bne.n	8016ef2 <_read_r+0x1e>
 8016eec:	682b      	ldr	r3, [r5, #0]
 8016eee:	b103      	cbz	r3, 8016ef2 <_read_r+0x1e>
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	bd38      	pop	{r3, r4, r5, pc}
 8016ef4:	24005a68 	.word	0x24005a68

08016ef8 <_init>:
 8016ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016efa:	bf00      	nop
 8016efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016efe:	bc08      	pop	{r3}
 8016f00:	469e      	mov	lr, r3
 8016f02:	4770      	bx	lr

08016f04 <_fini>:
 8016f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f06:	bf00      	nop
 8016f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f0a:	bc08      	pop	{r3}
 8016f0c:	469e      	mov	lr, r3
 8016f0e:	4770      	bx	lr
