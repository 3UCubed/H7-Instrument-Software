
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018850  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08018af0  08018af0  00028af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018f88  08018f88  00028f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018f90  08018f90  00028f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018f94  08018f94  00028f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000fc  24000000  08018f98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000067e0  24000100  08019094  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240068e0  08019094  000368e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003c464  00000000  00000000  0003012a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070ed  00000000  00000000  0006c58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002918  00000000  00000000  00073680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002630  00000000  00000000  00075f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044b35  00000000  00000000  000785c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cb67  00000000  00000000  000bd0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00195121  00000000  00000000  000f9c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028ed85  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b2ec  00000000  00000000  0028edd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018ad8 	.word	0x08018ad8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08018ad8 	.word	0x08018ad8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ffcb 	bl	8004604 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fe46 	bl	8002304 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f8e6 	bl	8005854 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fe39 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fa29 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fe20 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fa1b 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fe12 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 fa0d 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fe04 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f9ff 	bl	8004b0c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fdf6 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f9f0 	bl	8004b0c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fde7 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f9e1 	bl	8004b0c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fdd8 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f9d2 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fdc9 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f9c3 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fdba 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f9b4 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fdab 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f9a5 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fd9c 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f996 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fd8d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 feb3 	bl	8004604 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fd2e 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f91e 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fd15 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f910 	bl	8004b0c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fd07 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f902 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fcf9 	bl	8002304 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f8f4 	bl	8004b0c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fceb 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fb44 	bl	8009088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fb38 	bl	8009088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fb2c 	bl	8009088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fcb1 	bl	80063dc <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fc40 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fb6c 	bl	80041bc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fb66 	bl	80041bc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fc51 	bl	80063dc <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fbe0 	bl	8002304 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f017 fa9d 	bl	80180cc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 f819 	bl	8005bd0 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fbae 	bl	8002304 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fa34 	bl	8006030 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fb99 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 fa17 	bl	8009088 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb9c 	bl	80063dc <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fb2b 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 ff5e 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 ff75 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 ff35 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 ff4c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 ff2d 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 ff44 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 ff25 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 ff3c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f004 ff1d 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f004 ff34 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f004 ff15 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f004 ff2c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f004 ff0d 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f004 ff24 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f004 ff05 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f004 ff1c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f004 fefd 	bl	8005b80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f004 ff14 	bl	8005bb4 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <vApplicationTickHook+0x18>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <vApplicationTickHook+0x18>)
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	24001a54 	.word	0x24001a54

08000db4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <MX_FREERTOS_Init+0x98>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <MX_FREERTOS_Init+0x9c>)
 8000dd6:	f013 ffab 	bl	8014d30 <osThreadNew>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <MX_FREERTOS_Init+0xa0>)
 8000dde:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000de0:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_FREERTOS_Init+0xa4>)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <MX_FREERTOS_Init+0xa8>)
 8000de6:	f013 ffa3 	bl	8014d30 <osThreadNew>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <MX_FREERTOS_Init+0xac>)
 8000dee:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <MX_FREERTOS_Init+0xb0>)
 8000df2:	2100      	movs	r1, #0
 8000df4:	4822      	ldr	r0, [pc, #136]	; (8000e80 <MX_FREERTOS_Init+0xb4>)
 8000df6:	f013 ff9b 	bl	8014d30 <osThreadNew>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <MX_FREERTOS_Init+0xb8>)
 8000dfe:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <MX_FREERTOS_Init+0xbc>)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4821      	ldr	r0, [pc, #132]	; (8000e8c <MX_FREERTOS_Init+0xc0>)
 8000e06:	f013 ff93 	bl	8014d30 <osThreadNew>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <MX_FREERTOS_Init+0xc4>)
 8000e0e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000e10:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <MX_FREERTOS_Init+0xc8>)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_FREERTOS_Init+0xcc>)
 8000e16:	f013 ff8b 	bl	8014d30 <osThreadNew>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <MX_FREERTOS_Init+0xd0>)
 8000e1e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <MX_FREERTOS_Init+0xd4>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	481f      	ldr	r0, [pc, #124]	; (8000ea4 <MX_FREERTOS_Init+0xd8>)
 8000e26:	f013 ff83 	bl	8014d30 <osThreadNew>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ea8 <MX_FREERTOS_Init+0xdc>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <MX_FREERTOS_Init+0xe0>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <MX_FREERTOS_Init+0xe4>)
 8000e36:	f013 ff7b 	bl	8014d30 <osThreadNew>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <MX_FREERTOS_Init+0xe8>)
 8000e3e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <MX_FREERTOS_Init+0xec>)
 8000e42:	2100      	movs	r1, #0
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <MX_FREERTOS_Init+0xf0>)
 8000e46:	f013 ff73 	bl	8014d30 <osThreadNew>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <MX_FREERTOS_Init+0xf4>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <MX_FREERTOS_Init+0xf8>)
 8000e52:	2100      	movs	r1, #0
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_FREERTOS_Init+0xfc>)
 8000e56:	f013 ff6b 	bl	8014d30 <osThreadNew>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ecc <MX_FREERTOS_Init+0x100>)
 8000e5e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08018d58 	.word	0x08018d58
 8000e68:	08000ed1 	.word	0x08000ed1
 8000e6c:	24000360 	.word	0x24000360
 8000e70:	08018d7c 	.word	0x08018d7c
 8000e74:	08000ef9 	.word	0x08000ef9
 8000e78:	240005c0 	.word	0x240005c0
 8000e7c:	08018da0 	.word	0x08018da0
 8000e80:	08000f21 	.word	0x08000f21
 8000e84:	24000820 	.word	0x24000820
 8000e88:	08018dc4 	.word	0x08018dc4
 8000e8c:	08000f49 	.word	0x08000f49
 8000e90:	24000a80 	.word	0x24000a80
 8000e94:	08018de8 	.word	0x08018de8
 8000e98:	08000fc1 	.word	0x08000fc1
 8000e9c:	24000ce0 	.word	0x24000ce0
 8000ea0:	08018e0c 	.word	0x08018e0c
 8000ea4:	08001039 	.word	0x08001039
 8000ea8:	24000f40 	.word	0x24000f40
 8000eac:	08018e30 	.word	0x08018e30
 8000eb0:	080010e5 	.word	0x080010e5
 8000eb4:	240011a0 	.word	0x240011a0
 8000eb8:	08018e54 	.word	0x08018e54
 8000ebc:	08001115 	.word	0x08001115
 8000ec0:	24001400 	.word	0x24001400
 8000ec4:	08018e78 	.word	0x08018e78
 8000ec8:	080011e5 	.word	0x080011e5
 8000ecc:	24001660 	.word	0x24001660

08000ed0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <PMT_init+0x24>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	f014 f8a6 	bl	8015034 <osEventFlagsWait>

		create_pmt_packet();
 8000ee8:	f001 fa12 	bl	8002310 <create_pmt_packet>

		osThreadYield();
 8000eec:	f013 ffb2 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ef0:	e7f2      	b.n	8000ed8 <PMT_init+0x8>
 8000ef2:	bf00      	nop
 8000ef4:	24001a04 	.word	0x24001a04

08000ef8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <ERPA_init+0x24>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2102      	movs	r1, #2
 8000f0c:	f014 f892 	bl	8015034 <osEventFlagsWait>

		create_erpa_packet();
 8000f10:	f001 fa44 	bl	800239c <create_erpa_packet>

		osThreadYield();
 8000f14:	f013 ff9e 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f18:	e7f2      	b.n	8000f00 <ERPA_init+0x8>
 8000f1a:	bf00      	nop
 8000f1c:	24001a04 	.word	0x24001a04

08000f20 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HK_init+0x24>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f30:	2200      	movs	r2, #0
 8000f32:	2104      	movs	r1, #4
 8000f34:	f014 f87e 	bl	8015034 <osEventFlagsWait>

		create_hk_packet();
 8000f38:	f001 fa8e 	bl	8002458 <create_hk_packet>

		osThreadYield();
 8000f3c:	f013 ff8a 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f40:	e7f2      	b.n	8000f28 <HK_init+0x8>
 8000f42:	bf00      	nop
 8000f44:	24001a04 	.word	0x24001a04

08000f48 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <AUTOINIT_init+0x70>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	f014 f86a 	bl	8015034 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e012      	b.n	8000f8c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <AUTOINIT_init+0x74>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f6e:	4a13      	ldr	r2, [pc, #76]	; (8000fbc <AUTOINIT_init+0x74>)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	4413      	add	r3, r2
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f008 fa4c 	bl	8009418 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f013 ff87 	bl	8014e94 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	dde9      	ble.n	8000f66 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f92:	2308      	movs	r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	e008      	b.n	8000faa <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 ffd6 	bl	8003f50 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	ddf3      	ble.n	8000f98 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000fb0:	f013 ff50 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fb4:	e7cc      	b.n	8000f50 <AUTOINIT_init+0x8>
 8000fb6:	bf00      	nop
 8000fb8:	24001a08 	.word	0x24001a08
 8000fbc:	08018e9c 	.word	0x08018e9c

08000fc0 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <AUTODEINIT_init+0x70>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	f014 f82e 	bl	8015034 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fd8:	230d      	movs	r3, #13
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e008      	b.n	8000ff0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 ffb3 	bl	8003f50 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	dcf3      	bgt.n	8000fde <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e012      	b.n	8001022 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <AUTODEINIT_init+0x74>)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <AUTODEINIT_init+0x74>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	889b      	ldrh	r3, [r3, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f008 fa01 	bl	8009418 <HAL_GPIO_WritePin>
			osDelay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f013 ff3c 	bl	8014e94 <osDelay>
		for (int i = 6; i >= 0; i--) {
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	3b01      	subs	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	dae9      	bge.n	8000ffc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8001028:	f013 ff14 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800102c:	e7cc      	b.n	8000fc8 <AUTODEINIT_init+0x8>
 800102e:	bf00      	nop
 8001030:	24001a08 	.word	0x24001a08
 8001034:	08018e9c 	.word	0x08018e9c

08001038 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <Voltage_Monitor_init+0xa8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001048:	2200      	movs	r2, #0
 800104a:	2101      	movs	r1, #1
 800104c:	f013 fff2 	bl	8015034 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 8001050:	f002 ffa8 	bl	8003fa4 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 8001054:	f002 ff9c 	bl	8003f90 <get_rail_monitor>
 8001058:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e03b      	b.n	80010d8 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	461a      	mov	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4413      	add	r3, r2
 8001070:	789b      	ldrb	r3, [r3, #2]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d02d      	beq.n	80010d2 <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	8898      	ldrh	r0, [r3, #4]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	461a      	mov	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	891b      	ldrh	r3, [r3, #8]
 800109a:	4619      	mov	r1, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4613      	mov	r3, r2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	461a      	mov	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4413      	add	r3, r2
 80010ac:	88db      	ldrh	r3, [r3, #6]
 80010ae:	461a      	mov	r2, r3
 80010b0:	f002 ffda 	bl	8004068 <in_range>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10b      	bne.n	80010d2 <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	461a      	mov	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	785a      	ldrb	r2, [r3, #1]
 80010cc:	3201      	adds	r2, #1
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b11      	cmp	r3, #17
 80010dc:	ddc0      	ble.n	8001060 <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010de:	e7af      	b.n	8001040 <Voltage_Monitor_init+0x8>
 80010e0:	24001a08 	.word	0x24001a08

080010e4 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <STOP_init+0x2c>)
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f4:	2200      	movs	r2, #0
 80010f6:	2102      	movs	r1, #2
 80010f8:	f013 ff9c 	bl	8015034 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <STOP_init+0x2c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2102      	movs	r1, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f013 ff64 	bl	8014fd0 <osEventFlagsClear>

	  enter_stop();
 8001108:	f001 f8de 	bl	80022c8 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 800110c:	e7ee      	b.n	80010ec <STOP_init+0x8>
 800110e:	bf00      	nop
 8001110:	24001a08 	.word	0x24001a08

08001114 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800111c:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <Science_init+0xb0>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	f013 ff84 	bl	8015034 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	e012      	b.n	8001158 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <Science_init+0xb4>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800113a:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <Science_init+0xb4>)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4413      	add	r3, r2
 8001142:	889b      	ldrh	r3, [r3, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	4619      	mov	r1, r3
 8001148:	f008 f966 	bl	8009418 <HAL_GPIO_WritePin>
			osDelay(200);
 800114c:	20c8      	movs	r0, #200	; 0xc8
 800114e:	f013 fea1 	bl	8014e94 <osDelay>
		for (int i = 0; i < 9; i++) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b08      	cmp	r3, #8
 800115c:	dde9      	ble.n	8001132 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 800115e:	2308      	movs	r3, #8
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	e008      	b.n	8001176 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f002 fef0 	bl	8003f50 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	3301      	adds	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b10      	cmp	r3, #16
 800117a:	ddf3      	ble.n	8001164 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2320      	movs	r3, #32
 8001186:	4a11      	ldr	r2, [pc, #68]	; (80011cc <Science_init+0xb8>)
 8001188:	2100      	movs	r1, #0
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <Science_init+0xbc>)
 800118c:	f004 fd9a 	bl	8005cc4 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <Science_init+0xc0>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <Science_init+0xc4>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <Science_init+0xc8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80011a2:	f001 faa7 	bl	80026f4 <reset_packet_sequence_numbers>
		TIM2->CCR4 = 312;
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80011b0:	2100      	movs	r1, #0
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <Science_init+0xcc>)
 80011b4:	f00f fbda 	bl	801096c <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80011b8:	b662      	cpsie	i
}
 80011ba:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 80011bc:	f013 fe4a 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80011c0:	e7ac      	b.n	800111c <Science_init+0x8>
 80011c2:	bf00      	nop
 80011c4:	24001a0c 	.word	0x24001a0c
 80011c8:	08018e9c 	.word	0x08018e9c
 80011cc:	24000000 	.word	0x24000000
 80011d0:	240002d4 	.word	0x240002d4
 80011d4:	24001a50 	.word	0x24001a50
 80011d8:	24001a51 	.word	0x24001a51
 80011dc:	24001a54 	.word	0x24001a54
 80011e0:	24001d24 	.word	0x24001d24

080011e4 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80011ec:	4b22      	ldr	r3, [pc, #136]	; (8001278 <Idle_init+0x94>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f4:	2200      	movs	r2, #0
 80011f6:	2102      	movs	r1, #2
 80011f8:	f013 ff1c 	bl	8015034 <osEventFlagsWait>

		ERPA_ENABLED = 0;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <Idle_init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001206:	2200      	movs	r2, #0
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800120a:	2100      	movs	r1, #0
 800120c:	481c      	ldr	r0, [pc, #112]	; (8001280 <Idle_init+0x9c>)
 800120e:	f00f fd07 	bl	8010c20 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <Idle_init+0xa0>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8001218:	2100      	movs	r1, #0
 800121a:	481b      	ldr	r0, [pc, #108]	; (8001288 <Idle_init+0xa4>)
 800121c:	f004 fe12 	bl	8005e44 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001220:	2310      	movs	r3, #16
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	e008      	b.n	8001238 <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f002 fe8f 	bl	8003f50 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	3b01      	subs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b07      	cmp	r3, #7
 800123c:	dcf3      	bgt.n	8001226 <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 800123e:	2308      	movs	r3, #8
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	e012      	b.n	800126a <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001244:	4a11      	ldr	r2, [pc, #68]	; (800128c <Idle_init+0xa8>)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <Idle_init+0xa8>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	4413      	add	r3, r2
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	4619      	mov	r1, r3
 800125a:	f008 f8dd 	bl	8009418 <HAL_GPIO_WritePin>
			osDelay(200);
 800125e:	20c8      	movs	r0, #200	; 0xc8
 8001260:	f013 fe18 	bl	8014e94 <osDelay>
		for (int i = 8; i >= 0; i--) {
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	3b01      	subs	r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dae9      	bge.n	8001244 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8001270:	f013 fdf0 	bl	8014e54 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001274:	e7ba      	b.n	80011ec <Idle_init+0x8>
 8001276:	bf00      	nop
 8001278:	24001a0c 	.word	0x24001a0c
 800127c:	24001a51 	.word	0x24001a51
 8001280:	24001d24 	.word	0x24001d24
 8001284:	24001a50 	.word	0x24001a50
 8001288:	240002d4 	.word	0x240002d4
 800128c:	08018e9c 	.word	0x08018e9c

08001290 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	4a23      	ldr	r2, [pc, #140]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_GPIO_Init+0xe8>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <MX_GPIO_Init+0xe8>)
 8001302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001306:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <MX_GPIO_Init+0xe8>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_GPIO_Init+0xe8>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001324:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_GPIO_Init+0xec>)
 8001326:	f008 f877 	bl	8009418 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2164      	movs	r1, #100	; 0x64
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_GPIO_Init+0xf0>)
 8001330:	f008 f872 	bl	8009418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001334:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001338:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0xec>)
 800134e:	f007 fe9b 	bl	8009088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001352:	2364      	movs	r3, #100	; 0x64
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_GPIO_Init+0xf0>)
 800136a:	f007 fe8d 	bl	8009088 <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58024400 	.word	0x58024400
 800137c:	58020800 	.word	0x58020800
 8001380:	58020400 	.word	0x58020400

08001384 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_I2C1_Init+0x78>)
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <MX_I2C1_Init+0x7c>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_I2C1_Init+0x78>)
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <MX_I2C1_Init+0x80>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_I2C1_Init+0x78>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_I2C1_Init+0x78>)
 800139c:	2201      	movs	r2, #1
 800139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_I2C1_Init+0x78>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_I2C1_Init+0x78>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <MX_I2C1_Init+0x78>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_I2C1_Init+0x78>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_I2C1_Init+0x78>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013be:	480f      	ldr	r0, [pc, #60]	; (80013fc <MX_I2C1_Init+0x78>)
 80013c0:	f008 f844 	bl	800944c <HAL_I2C_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ca:	f000 ff9b 	bl	8002304 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <MX_I2C1_Init+0x78>)
 80013d2:	f00a fae3 	bl	800b99c <HAL_I2CEx_ConfigAnalogFilter>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013dc:	f000 ff92 	bl	8002304 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_I2C1_Init+0x78>)
 80013e4:	f00a fb25 	bl	800ba32 <HAL_I2CEx_ConfigDigitalFilter>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 ff89 	bl	8002304 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f00a fb6a 	bl	800bacc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	240018c0 	.word	0x240018c0
 8001400:	40005400 	.word	0x40005400
 8001404:	00100517 	.word	0x00100517

08001408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b0ba      	sub	sp, #232	; 0xe8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	22c0      	movs	r2, #192	; 0xc0
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f016 fe4f 	bl	80180cc <memset>
  if(i2cHandle->Instance==I2C1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <HAL_I2C_MspInit+0x1a0>)
 8001434:	4293      	cmp	r3, r2
 8001436:	f040 80b3 	bne.w	80015a0 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143a:	f04f 0208 	mov.w	r2, #8
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4618      	mov	r0, r3
 8001452:	f00b fbfd 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 800145c:	f000 ff52 	bl	8002304 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b52      	ldr	r3, [pc, #328]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a51      	ldr	r2, [pc, #324]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b4e      	ldr	r3, [pc, #312]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001486:	2312      	movs	r3, #18
 8001488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001498:	2304      	movs	r3, #4
 800149a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4842      	ldr	r0, [pc, #264]	; (80015b0 <HAL_I2C_MspInit+0x1a8>)
 80014a6:	f007 fdef 	bl	8009088 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 80014ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b0:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <HAL_I2C_MspInit+0x1a4>)
 80014bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_I2C_MspInit+0x1b0>)
 80014cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80014ce:	4b39      	ldr	r3, [pc, #228]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014d0:	2222      	movs	r2, #34	; 0x22
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 80014fc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001500:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 8001504:	2200      	movs	r2, #0
 8001506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 800150a:	f004 ff67 	bl	80063dc <HAL_DMA_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8001514:	f000 fef6 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 800151c:	639a      	str	r2, [r3, #56]	; 0x38
 800151e:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_I2C_MspInit+0x1ac>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001526:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_I2C_MspInit+0x1b8>)
 8001528:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 800152c:	2221      	movs	r2, #33	; 0x21
 800152e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001536:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800153c:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 800153e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001542:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001558:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800155c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001560:	2200      	movs	r2, #0
 8001562:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001566:	f004 ff39 	bl	80063dc <HAL_DMA_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8001570:	f000 fec8 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c
 800157a:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_I2C_MspInit+0x1b4>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001580:	2200      	movs	r2, #0
 8001582:	2105      	movs	r1, #5
 8001584:	201f      	movs	r0, #31
 8001586:	f004 fafb 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800158a:	201f      	movs	r0, #31
 800158c:	f004 fb12 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2105      	movs	r1, #5
 8001594:	2020      	movs	r0, #32
 8001596:	f004 faf3 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800159a:	2020      	movs	r0, #32
 800159c:	f004 fb0a 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015a0:	bf00      	nop
 80015a2:	37e8      	adds	r7, #232	; 0xe8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40005400 	.word	0x40005400
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020400 	.word	0x58020400
 80015b4:	24001914 	.word	0x24001914
 80015b8:	400200a0 	.word	0x400200a0
 80015bc:	2400198c 	.word	0x2400198c
 80015c0:	400200b8 	.word	0x400200b8

080015c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015c8:	f3bf 8f4f 	dsb	sy
}
 80015cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <__NVIC_SystemReset+0x24>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015d6:	4904      	ldr	r1, [pc, #16]	; (80015e8 <__NVIC_SystemReset+0x24>)
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_SystemReset+0x28>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015de:	f3bf 8f4f 	dsb	sy
}
 80015e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <__NVIC_SystemReset+0x20>
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	05fa0004 	.word	0x05fa0004

080015f0 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a20      	ldr	r2, [pc, #128]	; (800167c <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d106      	bne.n	800160e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2101      	movs	r1, #1
 8001606:	4618      	mov	r0, r3
 8001608:	f013 fc9e 	bl	8014f48 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800160c:	e032      	b.n	8001674 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2102      	movs	r1, #2
 8001626:	4618      	mov	r0, r3
 8001628:	f013 fc8e 	bl	8014f48 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b20      	cmp	r3, #32
 8001634:	d113      	bne.n	800165e <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2101      	movs	r1, #1
 800163c:	4618      	mov	r0, r3
 800163e:	f013 fc83 	bl	8014f48 <osEventFlagsSet>
			if (HK_ENABLED){
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2104      	movs	r1, #4
 8001652:	4618      	mov	r0, r3
 8001654:	f013 fc78 	bl	8014f48 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800166a:	701a      	strb	r2, [r3, #0]
}
 800166c:	e002      	b.n	8001674 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001670:	f016 fda2 	bl	80181b8 <puts>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	24001d24 	.word	0x24001d24
 8001680:	24001a04 	.word	0x24001a04
 8001684:	24001d70 	.word	0x24001d70
 8001688:	24001a51 	.word	0x24001a51
 800168c:	24001a58 	.word	0x24001a58
 8001690:	24001a08 	.word	0x24001a08
 8001694:	24001a50 	.word	0x24001a50
 8001698:	08018b68 	.word	0x08018b68

0800169c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	49f2      	ldr	r1, [pc, #968]	; (8001a70 <HAL_UART_RxCpltCallback+0x3d4>)
 80016a8:	48f2      	ldr	r0, [pc, #968]	; (8001a74 <HAL_UART_RxCpltCallback+0x3d8>)
 80016aa:	f010 fe3f 	bl	801232c <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80016ae:	4bf0      	ldr	r3, [pc, #960]	; (8001a70 <HAL_UART_RxCpltCallback+0x3d4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	2be0      	cmp	r3, #224	; 0xe0
 80016b8:	f200 8421 	bhi.w	8001efe <HAL_UART_RxCpltCallback+0x862>
 80016bc:	a201      	add	r2, pc, #4	; (adr r2, 80016c4 <HAL_UART_RxCpltCallback+0x28>)
 80016be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c2:	bf00      	nop
 80016c4:	08001a5d 	.word	0x08001a5d
 80016c8:	08001aa1 	.word	0x08001aa1
 80016cc:	08001b11 	.word	0x08001b11
 80016d0:	08001b4b 	.word	0x08001b4b
 80016d4:	08001b83 	.word	0x08001b83
 80016d8:	08001bbd 	.word	0x08001bbd
 80016dc:	08001bf9 	.word	0x08001bf9
 80016e0:	08001c35 	.word	0x08001c35
 80016e4:	08001c6f 	.word	0x08001c6f
 80016e8:	08001ca3 	.word	0x08001ca3
 80016ec:	08001cd7 	.word	0x08001cd7
 80016f0:	08001d09 	.word	0x08001d09
 80016f4:	08001d33 	.word	0x08001d33
 80016f8:	08001e11 	.word	0x08001e11
 80016fc:	08001e79 	.word	0x08001e79
 8001700:	08001ea1 	.word	0x08001ea1
 8001704:	08001a49 	.word	0x08001a49
 8001708:	08001a85 	.word	0x08001a85
 800170c:	08001af3 	.word	0x08001af3
 8001710:	08001b2f 	.word	0x08001b2f
 8001714:	08001b67 	.word	0x08001b67
 8001718:	08001b9f 	.word	0x08001b9f
 800171c:	08001bdb 	.word	0x08001bdb
 8001720:	08001c17 	.word	0x08001c17
 8001724:	08001c53 	.word	0x08001c53
 8001728:	08001c8b 	.word	0x08001c8b
 800172c:	08001cb3 	.word	0x08001cb3
 8001730:	08001ced 	.word	0x08001ced
 8001734:	08001d19 	.word	0x08001d19
 8001738:	08001d41 	.word	0x08001d41
 800173c:	08001e51 	.word	0x08001e51
 8001740:	08001eff 	.word	0x08001eff
 8001744:	08001eff 	.word	0x08001eff
 8001748:	08001eff 	.word	0x08001eff
 800174c:	08001eff 	.word	0x08001eff
 8001750:	08001eff 	.word	0x08001eff
 8001754:	08001eff 	.word	0x08001eff
 8001758:	08001eff 	.word	0x08001eff
 800175c:	08001eff 	.word	0x08001eff
 8001760:	08001eff 	.word	0x08001eff
 8001764:	08001eff 	.word	0x08001eff
 8001768:	08001eff 	.word	0x08001eff
 800176c:	08001eff 	.word	0x08001eff
 8001770:	08001eff 	.word	0x08001eff
 8001774:	08001eff 	.word	0x08001eff
 8001778:	08001eff 	.word	0x08001eff
 800177c:	08001eff 	.word	0x08001eff
 8001780:	08001eff 	.word	0x08001eff
 8001784:	08001eff 	.word	0x08001eff
 8001788:	08001eff 	.word	0x08001eff
 800178c:	08001eff 	.word	0x08001eff
 8001790:	08001eff 	.word	0x08001eff
 8001794:	08001eff 	.word	0x08001eff
 8001798:	08001eff 	.word	0x08001eff
 800179c:	08001eff 	.word	0x08001eff
 80017a0:	08001eff 	.word	0x08001eff
 80017a4:	08001eff 	.word	0x08001eff
 80017a8:	08001eff 	.word	0x08001eff
 80017ac:	08001eff 	.word	0x08001eff
 80017b0:	08001eff 	.word	0x08001eff
 80017b4:	08001eff 	.word	0x08001eff
 80017b8:	08001eff 	.word	0x08001eff
 80017bc:	08001eff 	.word	0x08001eff
 80017c0:	08001eff 	.word	0x08001eff
 80017c4:	08001eff 	.word	0x08001eff
 80017c8:	08001eff 	.word	0x08001eff
 80017cc:	08001eff 	.word	0x08001eff
 80017d0:	08001eff 	.word	0x08001eff
 80017d4:	08001eff 	.word	0x08001eff
 80017d8:	08001eff 	.word	0x08001eff
 80017dc:	08001eff 	.word	0x08001eff
 80017e0:	08001eff 	.word	0x08001eff
 80017e4:	08001eff 	.word	0x08001eff
 80017e8:	08001eff 	.word	0x08001eff
 80017ec:	08001eff 	.word	0x08001eff
 80017f0:	08001eff 	.word	0x08001eff
 80017f4:	08001eff 	.word	0x08001eff
 80017f8:	08001eff 	.word	0x08001eff
 80017fc:	08001eff 	.word	0x08001eff
 8001800:	08001eff 	.word	0x08001eff
 8001804:	08001eff 	.word	0x08001eff
 8001808:	08001eff 	.word	0x08001eff
 800180c:	08001eff 	.word	0x08001eff
 8001810:	08001eff 	.word	0x08001eff
 8001814:	08001eff 	.word	0x08001eff
 8001818:	08001eff 	.word	0x08001eff
 800181c:	08001eff 	.word	0x08001eff
 8001820:	08001eff 	.word	0x08001eff
 8001824:	08001eff 	.word	0x08001eff
 8001828:	08001eff 	.word	0x08001eff
 800182c:	08001eff 	.word	0x08001eff
 8001830:	08001eff 	.word	0x08001eff
 8001834:	08001eff 	.word	0x08001eff
 8001838:	08001eff 	.word	0x08001eff
 800183c:	08001eff 	.word	0x08001eff
 8001840:	08001eff 	.word	0x08001eff
 8001844:	08001eff 	.word	0x08001eff
 8001848:	08001eff 	.word	0x08001eff
 800184c:	08001eff 	.word	0x08001eff
 8001850:	08001eff 	.word	0x08001eff
 8001854:	08001eff 	.word	0x08001eff
 8001858:	08001eff 	.word	0x08001eff
 800185c:	08001eff 	.word	0x08001eff
 8001860:	08001eff 	.word	0x08001eff
 8001864:	08001eff 	.word	0x08001eff
 8001868:	08001eff 	.word	0x08001eff
 800186c:	08001eff 	.word	0x08001eff
 8001870:	08001eff 	.word	0x08001eff
 8001874:	08001eff 	.word	0x08001eff
 8001878:	08001eff 	.word	0x08001eff
 800187c:	08001eff 	.word	0x08001eff
 8001880:	08001eff 	.word	0x08001eff
 8001884:	08001eff 	.word	0x08001eff
 8001888:	08001eff 	.word	0x08001eff
 800188c:	08001eff 	.word	0x08001eff
 8001890:	08001eff 	.word	0x08001eff
 8001894:	08001eff 	.word	0x08001eff
 8001898:	08001eff 	.word	0x08001eff
 800189c:	08001eff 	.word	0x08001eff
 80018a0:	08001eff 	.word	0x08001eff
 80018a4:	08001eff 	.word	0x08001eff
 80018a8:	08001eff 	.word	0x08001eff
 80018ac:	08001eff 	.word	0x08001eff
 80018b0:	08001eff 	.word	0x08001eff
 80018b4:	08001eff 	.word	0x08001eff
 80018b8:	08001eff 	.word	0x08001eff
 80018bc:	08001eff 	.word	0x08001eff
 80018c0:	08001eff 	.word	0x08001eff
 80018c4:	08001eff 	.word	0x08001eff
 80018c8:	08001eff 	.word	0x08001eff
 80018cc:	08001eff 	.word	0x08001eff
 80018d0:	08001eff 	.word	0x08001eff
 80018d4:	08001eff 	.word	0x08001eff
 80018d8:	08001eff 	.word	0x08001eff
 80018dc:	08001eff 	.word	0x08001eff
 80018e0:	08001eff 	.word	0x08001eff
 80018e4:	08001eff 	.word	0x08001eff
 80018e8:	08001eff 	.word	0x08001eff
 80018ec:	08001eff 	.word	0x08001eff
 80018f0:	08001eff 	.word	0x08001eff
 80018f4:	08001eff 	.word	0x08001eff
 80018f8:	08001eff 	.word	0x08001eff
 80018fc:	08001eff 	.word	0x08001eff
 8001900:	08001eff 	.word	0x08001eff
 8001904:	08001eff 	.word	0x08001eff
 8001908:	08001eff 	.word	0x08001eff
 800190c:	08001eff 	.word	0x08001eff
 8001910:	08001eff 	.word	0x08001eff
 8001914:	08001eff 	.word	0x08001eff
 8001918:	08001eff 	.word	0x08001eff
 800191c:	08001eff 	.word	0x08001eff
 8001920:	08001eff 	.word	0x08001eff
 8001924:	08001eff 	.word	0x08001eff
 8001928:	08001eff 	.word	0x08001eff
 800192c:	08001eff 	.word	0x08001eff
 8001930:	08001eff 	.word	0x08001eff
 8001934:	08001eff 	.word	0x08001eff
 8001938:	08001eff 	.word	0x08001eff
 800193c:	08001eff 	.word	0x08001eff
 8001940:	08001eff 	.word	0x08001eff
 8001944:	08001eff 	.word	0x08001eff
 8001948:	08001eff 	.word	0x08001eff
 800194c:	08001eff 	.word	0x08001eff
 8001950:	08001eff 	.word	0x08001eff
 8001954:	08001eff 	.word	0x08001eff
 8001958:	08001eff 	.word	0x08001eff
 800195c:	08001eff 	.word	0x08001eff
 8001960:	08001eff 	.word	0x08001eff
 8001964:	08001eff 	.word	0x08001eff
 8001968:	08001eff 	.word	0x08001eff
 800196c:	08001eff 	.word	0x08001eff
 8001970:	08001eff 	.word	0x08001eff
 8001974:	08001eff 	.word	0x08001eff
 8001978:	08001eff 	.word	0x08001eff
 800197c:	08001eff 	.word	0x08001eff
 8001980:	08001edd 	.word	0x08001edd
 8001984:	08001eff 	.word	0x08001eff
 8001988:	08001eff 	.word	0x08001eff
 800198c:	08001eff 	.word	0x08001eff
 8001990:	08001eff 	.word	0x08001eff
 8001994:	08001eff 	.word	0x08001eff
 8001998:	08001eff 	.word	0x08001eff
 800199c:	08001eff 	.word	0x08001eff
 80019a0:	08001eff 	.word	0x08001eff
 80019a4:	08001eff 	.word	0x08001eff
 80019a8:	08001eff 	.word	0x08001eff
 80019ac:	08001eff 	.word	0x08001eff
 80019b0:	08001eff 	.word	0x08001eff
 80019b4:	08001eff 	.word	0x08001eff
 80019b8:	08001eff 	.word	0x08001eff
 80019bc:	08001eff 	.word	0x08001eff
 80019c0:	08001ee3 	.word	0x08001ee3
 80019c4:	08001eff 	.word	0x08001eff
 80019c8:	08001eff 	.word	0x08001eff
 80019cc:	08001eff 	.word	0x08001eff
 80019d0:	08001eff 	.word	0x08001eff
 80019d4:	08001eff 	.word	0x08001eff
 80019d8:	08001eff 	.word	0x08001eff
 80019dc:	08001eff 	.word	0x08001eff
 80019e0:	08001eff 	.word	0x08001eff
 80019e4:	08001eff 	.word	0x08001eff
 80019e8:	08001eff 	.word	0x08001eff
 80019ec:	08001eff 	.word	0x08001eff
 80019f0:	08001eff 	.word	0x08001eff
 80019f4:	08001eff 	.word	0x08001eff
 80019f8:	08001eff 	.word	0x08001eff
 80019fc:	08001eff 	.word	0x08001eff
 8001a00:	08001ef1 	.word	0x08001ef1
 8001a04:	08001ec9 	.word	0x08001ec9
 8001a08:	08001eff 	.word	0x08001eff
 8001a0c:	08001eff 	.word	0x08001eff
 8001a10:	08001eff 	.word	0x08001eff
 8001a14:	08001eff 	.word	0x08001eff
 8001a18:	08001eff 	.word	0x08001eff
 8001a1c:	08001eff 	.word	0x08001eff
 8001a20:	08001eff 	.word	0x08001eff
 8001a24:	08001eff 	.word	0x08001eff
 8001a28:	08001eff 	.word	0x08001eff
 8001a2c:	08001eff 	.word	0x08001eff
 8001a30:	08001eff 	.word	0x08001eff
 8001a34:	08001eff 	.word	0x08001eff
 8001a38:	08001eff 	.word	0x08001eff
 8001a3c:	08001eff 	.word	0x08001eff
 8001a40:	08001eff 	.word	0x08001eff
 8001a44:	08001eb5 	.word	0x08001eb5
	case 0x10: {
		printf("SDN1 ON\n");
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <HAL_UART_RxCpltCallback+0x3dc>)
 8001a4a:	f016 fbb5 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_UART_RxCpltCallback+0x3e0>)
 8001a50:	2104      	movs	r1, #4
 8001a52:	2201      	movs	r2, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f007 fcdf 	bl	8009418 <HAL_GPIO_WritePin>
		break;
 8001a5a:	e25b      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001a5c:	4808      	ldr	r0, [pc, #32]	; (8001a80 <HAL_UART_RxCpltCallback+0x3e4>)
 8001a5e:	f016 fbab 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_UART_RxCpltCallback+0x3e0>)
 8001a64:	2104      	movs	r1, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f007 fcd5 	bl	8009418 <HAL_GPIO_WritePin>
		break;
 8001a6e:	e251      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
 8001a70:	24001a10 	.word	0x24001a10
 8001a74:	24001dbc 	.word	0x24001dbc
 8001a78:	08018b80 	.word	0x08018b80
 8001a7c:	58020400 	.word	0x58020400
 8001a80:	08018b88 	.word	0x08018b88
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001a84:	48bf      	ldr	r0, [pc, #764]	; (8001d84 <HAL_UART_RxCpltCallback+0x6e8>)
 8001a86:	f016 fb97 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001a8a:	4bbf      	ldr	r3, [pc, #764]	; (8001d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fcc1 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001a96:	2101      	movs	r1, #1
 8001a98:	2008      	movs	r0, #8
 8001a9a:	f002 fa59 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001a9e:	e239      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001aa0:	48ba      	ldr	r0, [pc, #744]	; (8001d8c <HAL_UART_RxCpltCallback+0x6f0>)
 8001aa2:	f016 fb89 	bl	80181b8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00f      	b.n	8001acc <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001aac:	4ab8      	ldr	r2, [pc, #736]	; (8001d90 <HAL_UART_RxCpltCallback+0x6f4>)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001ab4:	4ab6      	ldr	r2, [pc, #728]	; (8001d90 <HAL_UART_RxCpltCallback+0x6f4>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4413      	add	r3, r2
 8001abc:	889b      	ldrh	r3, [r3, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f007 fca9 	bl	8009418 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	dcec      	bgt.n	8001aac <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	e008      	b.n	8001aea <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fa36 	bl	8003f50 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	2b07      	cmp	r3, #7
 8001aee:	dcf3      	bgt.n	8001ad8 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001af0:	e210      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001af2:	48a8      	ldr	r0, [pc, #672]	; (8001d94 <HAL_UART_RxCpltCallback+0x6f8>)
 8001af4:	f016 fb60 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001af8:	4ba7      	ldr	r3, [pc, #668]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	2201      	movs	r2, #1
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 fc89 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	2009      	movs	r0, #9
 8001b0a:	f002 fa21 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001b0e:	e201      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8001b10:	48a2      	ldr	r0, [pc, #648]	; (8001d9c <HAL_UART_RxCpltCallback+0x700>)
 8001b12:	f016 fb51 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8001b16:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fc7a 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001b24:	2100      	movs	r1, #0
 8001b26:	2009      	movs	r0, #9
 8001b28:	f002 fa12 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001b2c:	e1f2      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001b2e:	489c      	ldr	r0, [pc, #624]	; (8001da0 <HAL_UART_RxCpltCallback+0x704>)
 8001b30:	f016 fb42 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001b34:	4b98      	ldr	r3, [pc, #608]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 fc6c 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001b40:	2101      	movs	r1, #1
 8001b42:	200a      	movs	r0, #10
 8001b44:	f002 fa04 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001b48:	e1e4      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001b4a:	4896      	ldr	r0, [pc, #600]	; (8001da4 <HAL_UART_RxCpltCallback+0x708>)
 8001b4c:	f016 fb34 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001b50:	4b91      	ldr	r3, [pc, #580]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fc5e 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	200a      	movs	r0, #10
 8001b60:	f002 f9f6 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001b64:	e1d6      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001b66:	4890      	ldr	r0, [pc, #576]	; (8001da8 <HAL_UART_RxCpltCallback+0x70c>)
 8001b68:	f016 fb26 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001b6c:	4b8a      	ldr	r3, [pc, #552]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	2201      	movs	r2, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fc50 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001b78:	2101      	movs	r1, #1
 8001b7a:	200b      	movs	r0, #11
 8001b7c:	f002 f9e8 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001b80:	e1c8      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001b82:	488a      	ldr	r0, [pc, #552]	; (8001dac <HAL_UART_RxCpltCallback+0x710>)
 8001b84:	f016 fb18 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001b88:	4b83      	ldr	r3, [pc, #524]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f007 fc42 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001b94:	2100      	movs	r1, #0
 8001b96:	200b      	movs	r0, #11
 8001b98:	f002 f9da 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001b9c:	e1ba      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001b9e:	4884      	ldr	r0, [pc, #528]	; (8001db0 <HAL_UART_RxCpltCallback+0x714>)
 8001ba0:	f016 fb0a 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001baa:	2201      	movs	r2, #1
 8001bac:	4618      	mov	r0, r3
 8001bae:	f007 fc33 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	200c      	movs	r0, #12
 8001bb6:	f002 f9cb 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001bba:	e1ab      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001bbc:	487d      	ldr	r0, [pc, #500]	; (8001db4 <HAL_UART_RxCpltCallback+0x718>)
 8001bbe:	f016 fafb 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001bc2:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001bc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f007 fc24 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	200c      	movs	r0, #12
 8001bd4:	f002 f9bc 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001bd8:	e19c      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001bda:	4877      	ldr	r0, [pc, #476]	; (8001db8 <HAL_UART_RxCpltCallback+0x71c>)
 8001bdc:	f016 faec 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001be0:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001be2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001be6:	2201      	movs	r2, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f007 fc15 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001bee:	2101      	movs	r1, #1
 8001bf0:	200d      	movs	r0, #13
 8001bf2:	f002 f9ad 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001bf6:	e18d      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001bf8:	4870      	ldr	r0, [pc, #448]	; (8001dbc <HAL_UART_RxCpltCallback+0x720>)
 8001bfa:	f016 fadd 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c04:	2200      	movs	r2, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f007 fc06 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200d      	movs	r0, #13
 8001c10:	f002 f99e 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001c14:	e17e      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001c16:	486a      	ldr	r0, [pc, #424]	; (8001dc0 <HAL_UART_RxCpltCallback+0x724>)
 8001c18:	f016 face 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c22:	2201      	movs	r2, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f007 fbf7 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	200f      	movs	r0, #15
 8001c2e:	f002 f98f 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001c32:	e16f      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001c34:	4863      	ldr	r0, [pc, #396]	; (8001dc4 <HAL_UART_RxCpltCallback+0x728>)
 8001c36:	f016 fabf 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001c3a:	4b57      	ldr	r3, [pc, #348]	; (8001d98 <HAL_UART_RxCpltCallback+0x6fc>)
 8001c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c40:	2200      	movs	r2, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 fbe8 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f002 f980 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001c50:	e160      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001c52:	485d      	ldr	r0, [pc, #372]	; (8001dc8 <HAL_UART_RxCpltCallback+0x72c>)
 8001c54:	f016 fab0 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001c58:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8001c5a:	2140      	movs	r1, #64	; 0x40
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f007 fbda 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001c64:	2101      	movs	r1, #1
 8001c66:	2010      	movs	r0, #16
 8001c68:	f002 f972 	bl	8003f50 <set_rail_monitor_enable>

		break;
 8001c6c:	e152      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001c6e:	4857      	ldr	r0, [pc, #348]	; (8001dcc <HAL_UART_RxCpltCallback+0x730>)
 8001c70:	f016 faa2 	bl	80181b8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_UART_RxCpltCallback+0x6ec>)
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f007 fbcc 	bl	8009418 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001c80:	2100      	movs	r1, #0
 8001c82:	2010      	movs	r0, #16
 8001c84:	f002 f964 	bl	8003f50 <set_rail_monitor_enable>
		break;
 8001c88:	e144      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001c8a:	4851      	ldr	r0, [pc, #324]	; (8001dd0 <HAL_UART_RxCpltCallback+0x734>)
 8001c8c:	f016 fa94 	bl	80181b8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001c90:	2300      	movs	r3, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2320      	movs	r3, #32
 8001c96:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_UART_RxCpltCallback+0x738>)
 8001c98:	2100      	movs	r1, #0
 8001c9a:	484f      	ldr	r0, [pc, #316]	; (8001dd8 <HAL_UART_RxCpltCallback+0x73c>)
 8001c9c:	f004 f812 	bl	8005cc4 <HAL_DAC_Start_DMA>
		break;
 8001ca0:	e138      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001ca2:	484e      	ldr	r0, [pc, #312]	; (8001ddc <HAL_UART_RxCpltCallback+0x740>)
 8001ca4:	f016 fa88 	bl	80181b8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001ca8:	2100      	movs	r1, #0
 8001caa:	484b      	ldr	r0, [pc, #300]	; (8001dd8 <HAL_UART_RxCpltCallback+0x73c>)
 8001cac:	f004 f8ca 	bl	8005e44 <HAL_DAC_Stop_DMA>
		break;
 8001cb0:	e130      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001cb2:	484b      	ldr	r0, [pc, #300]	; (8001de0 <HAL_UART_RxCpltCallback+0x744>)
 8001cb4:	f016 fa80 	bl	80181b8 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <HAL_UART_RxCpltCallback+0x748>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2102      	movs	r1, #2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f013 f942 	bl	8014f48 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8001cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cc8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <HAL_UART_RxCpltCallback+0x74c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]

		break;
 8001cd4:	e11e      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001cd6:	4845      	ldr	r0, [pc, #276]	; (8001dec <HAL_UART_RxCpltCallback+0x750>)
 8001cd8:	f016 fa6e 	bl	80181b8 <puts>
		ERPA_ENABLED = 0;
 8001cdc:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <HAL_UART_RxCpltCallback+0x74c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8001ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001cea:	e113      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001cec:	4840      	ldr	r0, [pc, #256]	; (8001df0 <HAL_UART_RxCpltCallback+0x754>)
 8001cee:	f016 fa63 	bl	80181b8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	483f      	ldr	r0, [pc, #252]	; (8001df4 <HAL_UART_RxCpltCallback+0x758>)
 8001cf6:	f00e fe39 	bl	801096c <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	; (8001de4 <HAL_UART_RxCpltCallback+0x748>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4618      	mov	r0, r3
 8001d02:	f013 f921 	bl	8014f48 <osEventFlagsSet>
		break;
 8001d06:	e105      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001d08:	483b      	ldr	r0, [pc, #236]	; (8001df8 <HAL_UART_RxCpltCallback+0x75c>)
 8001d0a:	f016 fa55 	bl	80181b8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4838      	ldr	r0, [pc, #224]	; (8001df4 <HAL_UART_RxCpltCallback+0x758>)
 8001d12:	f00e ff85 	bl	8010c20 <HAL_TIM_OC_Stop_IT>
		break;
 8001d16:	e0fd      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001d18:	4838      	ldr	r0, [pc, #224]	; (8001dfc <HAL_UART_RxCpltCallback+0x760>)
 8001d1a:	f016 fa4d 	bl	80181b8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_UART_RxCpltCallback+0x748>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2104      	movs	r1, #4
 8001d24:	4618      	mov	r0, r3
 8001d26:	f013 f90f 	bl	8014f48 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_UART_RxCpltCallback+0x764>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
		break;
 8001d30:	e0f0      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001d32:	4834      	ldr	r0, [pc, #208]	; (8001e04 <HAL_UART_RxCpltCallback+0x768>)
 8001d34:	f016 fa40 	bl	80181b8 <puts>
		HK_ENABLED = 0;
 8001d38:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <HAL_UART_RxCpltCallback+0x764>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
		break;
 8001d3e:	e0e9      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001d40:	4831      	ldr	r0, [pc, #196]	; (8001e08 <HAL_UART_RxCpltCallback+0x76c>)
 8001d42:	f016 fa39 	bl	80181b8 <puts>
		if (step < 14) {
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_UART_RxCpltCallback+0x770>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b0d      	cmp	r3, #13
 8001d4e:	f200 80da 	bhi.w	8001f06 <HAL_UART_RxCpltCallback+0x86a>
			step += 2;
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_UART_RxCpltCallback+0x770>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3302      	adds	r3, #2
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <HAL_UART_RxCpltCallback+0x770>)
 8001d5e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_UART_RxCpltCallback+0x770>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_UART_RxCpltCallback+0x738>)
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <HAL_UART_RxCpltCallback+0x73c>)
 8001d74:	f004 f909 	bl	8005f8a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <HAL_UART_RxCpltCallback+0x73c>)
 8001d7c:	f003 ff4a 	bl	8005c14 <HAL_DAC_Start>
		}
		break;
 8001d80:	e0c1      	b.n	8001f06 <HAL_UART_RxCpltCallback+0x86a>
 8001d82:	bf00      	nop
 8001d84:	08018b94 	.word	0x08018b94
 8001d88:	58020400 	.word	0x58020400
 8001d8c:	08018ba0 	.word	0x08018ba0
 8001d90:	08018e9c 	.word	0x08018e9c
 8001d94:	08018bac 	.word	0x08018bac
 8001d98:	58020800 	.word	0x58020800
 8001d9c:	08018bb8 	.word	0x08018bb8
 8001da0:	08018bc8 	.word	0x08018bc8
 8001da4:	08018bd4 	.word	0x08018bd4
 8001da8:	08018be0 	.word	0x08018be0
 8001dac:	08018bec 	.word	0x08018bec
 8001db0:	08018bfc 	.word	0x08018bfc
 8001db4:	08018c08 	.word	0x08018c08
 8001db8:	08018c14 	.word	0x08018c14
 8001dbc:	08018c20 	.word	0x08018c20
 8001dc0:	08018c2c 	.word	0x08018c2c
 8001dc4:	08018c3c 	.word	0x08018c3c
 8001dc8:	08018c4c 	.word	0x08018c4c
 8001dcc:	08018c58 	.word	0x08018c58
 8001dd0:	08018c68 	.word	0x08018c68
 8001dd4:	24000000 	.word	0x24000000
 8001dd8:	240002d4 	.word	0x240002d4
 8001ddc:	08018c78 	.word	0x08018c78
 8001de0:	08018c88 	.word	0x08018c88
 8001de4:	24001a04 	.word	0x24001a04
 8001de8:	24001a51 	.word	0x24001a51
 8001dec:	08018c90 	.word	0x08018c90
 8001df0:	08018c9c 	.word	0x08018c9c
 8001df4:	24001d24 	.word	0x24001d24
 8001df8:	08018ca4 	.word	0x08018ca4
 8001dfc:	08018cac 	.word	0x08018cac
 8001e00:	24001a50 	.word	0x24001a50
 8001e04:	08018cb4 	.word	0x08018cb4
 8001e08:	08018cbc 	.word	0x08018cbc
 8001e0c:	24001a52 	.word	0x24001a52
	}
	case 0x0D: {
		printf("Step Down\n");
 8001e10:	4842      	ldr	r0, [pc, #264]	; (8001f1c <HAL_UART_RxCpltCallback+0x880>)
 8001e12:	f016 f9d1 	bl	80181b8 <puts>
		if (step > 1) {
 8001e16:	4b42      	ldr	r3, [pc, #264]	; (8001f20 <HAL_UART_RxCpltCallback+0x884>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d974      	bls.n	8001f0a <HAL_UART_RxCpltCallback+0x86e>
			step -= 2;
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <HAL_UART_RxCpltCallback+0x884>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3b02      	subs	r3, #2
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_UART_RxCpltCallback+0x884>)
 8001e2c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_UART_RxCpltCallback+0x884>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_UART_RxCpltCallback+0x888>)
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4839      	ldr	r0, [pc, #228]	; (8001f28 <HAL_UART_RxCpltCallback+0x88c>)
 8001e42:	f004 f8a2 	bl	8005f8a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001e46:	2100      	movs	r1, #0
 8001e48:	4837      	ldr	r0, [pc, #220]	; (8001f28 <HAL_UART_RxCpltCallback+0x88c>)
 8001e4a:	f003 fee3 	bl	8005c14 <HAL_DAC_Start>
		}
		break;
 8001e4e:	e05c      	b.n	8001f0a <HAL_UART_RxCpltCallback+0x86e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001e50:	4836      	ldr	r0, [pc, #216]	; (8001f2c <HAL_UART_RxCpltCallback+0x890>)
 8001e52:	f016 f9b1 	bl	80181b8 <puts>
		if (cadence <= 50000) {
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d855      	bhi.n	8001f0e <HAL_UART_RxCpltCallback+0x872>
			cadence *= 2;
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e6a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e70:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001e76:	e04a      	b.n	8001f0e <HAL_UART_RxCpltCallback+0x872>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001e78:	482e      	ldr	r0, [pc, #184]	; (8001f34 <HAL_UART_RxCpltCallback+0x898>)
 8001e7a:	f016 f99d 	bl	80181b8 <puts>
		if (cadence >= 6250) {
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f641 0269 	movw	r2, #6249	; 0x1869
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d943      	bls.n	8001f12 <HAL_UART_RxCpltCallback+0x876>
			cadence /= 2;
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e92:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_UART_RxCpltCallback+0x894>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001e9e:	e038      	b.n	8001f12 <HAL_UART_RxCpltCallback+0x876>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001ea0:	4825      	ldr	r0, [pc, #148]	; (8001f38 <HAL_UART_RxCpltCallback+0x89c>)
 8001ea2:	f016 f989 	bl	80181b8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_UART_RxCpltCallback+0x8a0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2102      	movs	r1, #2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f013 f84b 	bl	8014f48 <osEventFlagsSet>
		break;
 8001eb2:	e02f      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001eb4:	4822      	ldr	r0, [pc, #136]	; (8001f40 <HAL_UART_RxCpltCallback+0x8a4>)
 8001eb6:	f016 f97f 	bl	80181b8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_UART_RxCpltCallback+0x8a0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f013 f841 	bl	8014f48 <osEventFlagsSet>
		break;
 8001ec6:	e025      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001ec8:	481e      	ldr	r0, [pc, #120]	; (8001f44 <HAL_UART_RxCpltCallback+0x8a8>)
 8001eca:	f016 f975 	bl	80181b8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_UART_RxCpltCallback+0x8a0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f013 f837 	bl	8014f48 <osEventFlagsSet>
		break;
 8001eda:	e01b      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xAF: {
		sync();
 8001edc:	f000 f95c 	bl	8002198 <sync>
		break;
 8001ee0:	e018      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_UART_RxCpltCallback+0x8ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f013 f82d 	bl	8014f48 <osEventFlagsSet>
		break;
 8001eee:	e011      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_UART_RxCpltCallback+0x8ac>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f013 f826 	bl	8014f48 <osEventFlagsSet>
		break;
 8001efc:	e00a      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
	}
	default: {
		printf("Unknown Command\n");
 8001efe:	4813      	ldr	r0, [pc, #76]	; (8001f4c <HAL_UART_RxCpltCallback+0x8b0>)
 8001f00:	f016 f95a 	bl	80181b8 <puts>
		break;
 8001f04:	e006      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
		break;
 8001f06:	bf00      	nop
 8001f08:	e004      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
		break;
 8001f0a:	bf00      	nop
 8001f0c:	e002      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
		break;
 8001f0e:	bf00      	nop
 8001f10:	e000      	b.n	8001f14 <HAL_UART_RxCpltCallback+0x878>
		break;
 8001f12:	bf00      	nop
	}
	}
}
 8001f14:	bf00      	nop
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	08018cc4 	.word	0x08018cc4
 8001f20:	24001a52 	.word	0x24001a52
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240002d4 	.word	0x240002d4
 8001f2c:	08018cd0 	.word	0x08018cd0
 8001f30:	24000080 	.word	0x24000080
 8001f34:	08018cdc 	.word	0x08018cdc
 8001f38:	08018ce8 	.word	0x08018ce8
 8001f3c:	24001a08 	.word	0x24001a08
 8001f40:	08018cf8 	.word	0x08018cf8
 8001f44:	08018d04 	.word	0x08018d04
 8001f48:	24001a0c 	.word	0x24001a0c
 8001f4c:	08018d10 	.word	0x08018d10

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f002 f8ca 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f824 	bl	8001fa4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f5c:	f000 f8a2 	bl	80020a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f60:	f7ff f996 	bl	8001290 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f64:	f7fe fec0 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001f68:	f001 fd2a 	bl	80039c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f6c:	f7ff fa0a 	bl	8001384 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001f70:	f000 fe60 	bl	8002c34 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001f74:	f001 fb4c 	bl	8003610 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001f78:	f001 fa9c 	bl	80034b4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001f7c:	f7fe fc54 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001f80:	f7fe fb30 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001f84:	f7fe fdfc 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001f88:	f000 fdfc 	bl	8002b84 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f8c:	f000 fbc8 	bl	8002720 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001f90:	f000 f8b8 	bl	8002104 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f94:	f012 fe82 	bl	8014c9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f98:	f7fe ff18 	bl	8000dcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f9c:	f012 fea2 	bl	8014ce4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001fa0:	e7fe      	b.n	8001fa0 <main+0x50>
	...

08001fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b09c      	sub	sp, #112	; 0x70
 8001fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	224c      	movs	r2, #76	; 0x4c
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f016 f88a 	bl	80180cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2220      	movs	r2, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f016 f884 	bl	80180cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f009 fde1 	bl	800bb8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b33      	ldr	r3, [pc, #204]	; (800209c <SystemClock_Config+0xf8>)
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	4a32      	ldr	r2, [pc, #200]	; (800209c <SystemClock_Config+0xf8>)
 8001fd4:	f023 0301 	bic.w	r3, r3, #1
 8001fd8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001fda:	4b30      	ldr	r3, [pc, #192]	; (800209c <SystemClock_Config+0xf8>)
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <SystemClock_Config+0xfc>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fec:	4a2c      	ldr	r2, [pc, #176]	; (80020a0 <SystemClock_Config+0xfc>)
 8001fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <SystemClock_Config+0xfc>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002000:	bf00      	nop
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <SystemClock_Config+0xfc>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200e:	d1f8      	bne.n	8002002 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002010:	2303      	movs	r3, #3
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800201a:	2309      	movs	r3, #9
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800201e:	2340      	movs	r3, #64	; 0x40
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002022:	2302      	movs	r3, #2
 8002024:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002026:	2302      	movs	r3, #2
 8002028:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800202a:	2304      	movs	r3, #4
 800202c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800202e:	2318      	movs	r3, #24
 8002030:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002032:	2302      	movs	r3, #2
 8002034:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002036:	2302      	movs	r3, #2
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800203a:	2302      	movs	r3, #2
 800203c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800203e:	2308      	movs	r3, #8
 8002040:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002042:	2302      	movs	r3, #2
 8002044:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002046:	2300      	movs	r3, #0
 8002048:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	4618      	mov	r0, r3
 8002050:	f009 fdd6 	bl	800bc00 <HAL_RCC_OscConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800205a:	f000 f953 	bl	8002304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800205e:	233f      	movs	r3, #63	; 0x3f
 8002060:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002062:	2303      	movs	r3, #3
 8002064:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f00a fa16 	bl	800c4b4 <HAL_RCC_ClockConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800208e:	f000 f939 	bl	8002304 <Error_Handler>
  }
}
 8002092:	bf00      	nop
 8002094:	3770      	adds	r7, #112	; 0x70
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	58000400 	.word	0x58000400
 80020a0:	58024800 	.word	0x58024800

080020a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b0b0      	sub	sp, #192	; 0xc0
 80020a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020aa:	463b      	mov	r3, r7
 80020ac:	22c0      	movs	r2, #192	; 0xc0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f016 f80b 	bl	80180cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80020c2:	2304      	movs	r3, #4
 80020c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80020c6:	2318      	movs	r3, #24
 80020c8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80020ca:	2308      	movs	r3, #8
 80020cc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80020da:	2320      	movs	r3, #32
 80020dc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e8:	463b      	mov	r3, r7
 80020ea:	4618      	mov	r0, r3
 80020ec:	f00a fdb0 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80020f6:	f000 f905 	bl	8002304 <Error_Handler>
  }
}
 80020fa:	bf00      	nop
 80020fc:	37c0      	adds	r7, #192	; 0xc0
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	packet_event_flags = osEventFlagsNew(NULL);
 8002108:	2000      	movs	r0, #0
 800210a:	f012 fede 	bl	8014eca <osEventFlagsNew>
 800210e:	4603      	mov	r3, r0
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <system_setup+0x7c>)
 8002112:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <system_setup+0x7c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d100      	bne.n	800211e <system_setup+0x1a>
        while (1);
 800211c:	e7fe      	b.n	800211c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800211e:	2000      	movs	r0, #0
 8002120:	f012 fed3 	bl	8014eca <osEventFlagsNew>
 8002124:	4603      	mov	r3, r0
 8002126:	4a17      	ldr	r2, [pc, #92]	; (8002184 <system_setup+0x80>)
 8002128:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <system_setup+0x80>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <system_setup+0x30>
        while (1);
 8002132:	e7fe      	b.n	8002132 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002134:	2000      	movs	r0, #0
 8002136:	f012 fec8 	bl	8014eca <osEventFlagsNew>
 800213a:	4603      	mov	r3, r0
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <system_setup+0x84>)
 800213e:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <system_setup+0x84>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d100      	bne.n	800214a <system_setup+0x46>
        while (1);
 8002148:	e7fe      	b.n	8002148 <system_setup+0x44>
    }

    TIM2->CCR4 = 0;
 800214a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214e:	2200      	movs	r2, #0
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8002152:	210c      	movs	r1, #12
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <system_setup+0x88>)
 8002156:	f00e fc09 	bl	801096c <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 800215a:	f001 fd3b 	bl	8003bd4 <voltage_monitor_init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d100      	bne.n	8002166 <system_setup+0x62>
		while (1);
 8002164:	e7fe      	b.n	8002164 <system_setup+0x60>
	}




	if (!init_adc_dma()) {
 8002166:	f000 fb6d 	bl	8002844 <init_adc_dma>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d100      	bne.n	8002172 <system_setup+0x6e>
		while (1);
 8002170:	e7fe      	b.n	8002170 <system_setup+0x6c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002172:	2201      	movs	r2, #1
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <system_setup+0x8c>)
 8002176:	4807      	ldr	r0, [pc, #28]	; (8002194 <system_setup+0x90>)
 8002178:	f010 f8d8 	bl	801232c <HAL_UART_Receive_IT>

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	24001a04 	.word	0x24001a04
 8002184:	24001a08 	.word	0x24001a08
 8002188:	24001a0c 	.word	0x24001a0c
 800218c:	24001d70 	.word	0x24001d70
 8002190:	24001a10 	.word	0x24001a10
 8002194:	24001dbc 	.word	0x24001dbc

08002198 <sync>:

void sync() {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	send_ACK();
 800219e:	f000 f81f 	bl	80021e0 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <sync+0x40>)
 80021a4:	f010 f90e 	bl	80123c4 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	2209      	movs	r2, #9
 80021ac:	490b      	ldr	r1, [pc, #44]	; (80021dc <sync+0x44>)
 80021ae:	480a      	ldr	r0, [pc, #40]	; (80021d8 <sync+0x40>)
 80021b0:	f00f fff4 	bl	801219c <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <sync+0x44>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	2bff      	cmp	r3, #255	; 0xff
 80021be:	d1f3      	bne.n	80021a8 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80021c0:	2201      	movs	r2, #1
 80021c2:	4906      	ldr	r1, [pc, #24]	; (80021dc <sync+0x44>)
 80021c4:	4804      	ldr	r0, [pc, #16]	; (80021d8 <sync+0x40>)
 80021c6:	f010 f8b1 	bl	801232c <HAL_UART_Receive_IT>

	send_ACK();
 80021ca:	f000 f809 	bl	80021e0 <send_ACK>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	24001dbc 	.word	0x24001dbc
 80021dc:	24001a10 	.word	0x24001a10

080021e0 <send_ACK>:

void send_ACK() {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <send_ACK+0x1c>)
 80021e6:	22ff      	movs	r2, #255	; 0xff
 80021e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 80021ea:	2364      	movs	r3, #100	; 0x64
 80021ec:	2201      	movs	r2, #1
 80021ee:	4903      	ldr	r1, [pc, #12]	; (80021fc <send_ACK+0x1c>)
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <send_ACK+0x20>)
 80021f2:	f00f ff45 	bl	8012080 <HAL_UART_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	24001a5c 	.word	0x24001a5c
 8002200:	24001dbc 	.word	0x24001dbc

08002204 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <get_current_step+0xc0>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002216:	4293      	cmp	r3, r2
 8002218:	d04a      	beq.n	80022b0 <get_current_step+0xac>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002220:	da48      	bge.n	80022b4 <get_current_step+0xb0>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002228:	4293      	cmp	r3, r2
 800222a:	d03f      	beq.n	80022ac <get_current_step+0xa8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8002232:	4293      	cmp	r3, r2
 8002234:	dc3e      	bgt.n	80022b4 <get_current_step+0xb0>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f640 421f 	movw	r2, #3103	; 0xc1f
 800223c:	4293      	cmp	r3, r2
 800223e:	d033      	beq.n	80022a8 <get_current_step+0xa4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002246:	da35      	bge.n	80022b4 <get_current_step+0xb0>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800224e:	4293      	cmp	r3, r2
 8002250:	d028      	beq.n	80022a4 <get_current_step+0xa0>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002258:	4293      	cmp	r3, r2
 800225a:	dc2b      	bgt.n	80022b4 <get_current_step+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f240 7245 	movw	r2, #1861	; 0x745
 8002262:	4293      	cmp	r3, r2
 8002264:	d01c      	beq.n	80022a0 <get_current_step+0x9c>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f240 7245 	movw	r2, #1861	; 0x745
 800226c:	4293      	cmp	r3, r2
 800226e:	dc21      	bgt.n	80022b4 <get_current_step+0xb0>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002276:	4293      	cmp	r3, r2
 8002278:	d010      	beq.n	800229c <get_current_step+0x98>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002280:	4293      	cmp	r3, r2
 8002282:	dc17      	bgt.n	80022b4 <get_current_step+0xb0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <get_current_step+0x90>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002290:	d002      	beq.n	8002298 <get_current_step+0x94>
 8002292:	e00f      	b.n	80022b4 <get_current_step+0xb0>
	case 0:
		return 0;
 8002294:	2300      	movs	r3, #0
 8002296:	e00e      	b.n	80022b6 <get_current_step+0xb2>
	case 620:
		return 1;
 8002298:	2301      	movs	r3, #1
 800229a:	e00c      	b.n	80022b6 <get_current_step+0xb2>
	case 1241:
		return 2;
 800229c:	2302      	movs	r3, #2
 800229e:	e00a      	b.n	80022b6 <get_current_step+0xb2>
	case 1861:
		return 3;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e008      	b.n	80022b6 <get_current_step+0xb2>
	case 2482:
		return 4;
 80022a4:	2304      	movs	r3, #4
 80022a6:	e006      	b.n	80022b6 <get_current_step+0xb2>
	case 3103:
		return 5;
 80022a8:	2305      	movs	r3, #5
 80022aa:	e004      	b.n	80022b6 <get_current_step+0xb2>
	case 3723:
		return 6;
 80022ac:	2306      	movs	r3, #6
 80022ae:	e002      	b.n	80022b6 <get_current_step+0xb2>
	case 4095:
		return 7;
 80022b0:	2307      	movs	r3, #7
 80022b2:	e000      	b.n	80022b6 <get_current_step+0xb2>
	default:
		return -1;
 80022b4:	23ff      	movs	r3, #255	; 0xff
	}
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40007400 	.word	0x40007400

080022c8 <enter_stop>:

void enter_stop() {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	  send_ACK();
 80022cc:	f7ff ff88 	bl	80021e0 <send_ACK>

	  vTaskSuspendAll();
 80022d0:	f014 f992 	bl	80165f8 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80022d4:	2101      	movs	r1, #1
 80022d6:	2001      	movs	r0, #1
 80022d8:	f009 fc1c 	bl	800bb14 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 80022dc:	f7ff f972 	bl	80015c4 <__NVIC_SystemReset>

080022e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022f2:	f001 ff37 	bl	8004164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40001000 	.word	0x40001000

08002304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002308:	b672      	cpsid	i
}
 800230a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800230c:	e7fe      	b.n	800230c <Error_Handler+0x8>
	...

08002310 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8002316:	bf00      	nop
 8002318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800231c:	481c      	ldr	r0, [pc, #112]	; (8002390 <create_pmt_packet+0x80>)
 800231e:	f007 f863 	bl	80093e8 <HAL_GPIO_ReadPin>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f7      	bne.n	8002318 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4618      	mov	r0, r3
 800232c:	f001 faa8 	bl	8003880 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fad9 	bl	80028ec <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 800233a:	23bb      	movs	r3, #187	; 0xbb
 800233c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 800233e:	23bb      	movs	r3, #187	; 0xbb
 8002340:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <create_pmt_packet+0x84>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <create_pmt_packet+0x84>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8002356:	7a3b      	ldrb	r3, [r7, #8]
 8002358:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 800235a:	7a7b      	ldrb	r3, [r7, #9]
 800235c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 800235e:	793b      	ldrb	r3, [r7, #4]
 8002360:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8002362:	797b      	ldrb	r3, [r7, #5]
 8002364:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 800236e:	f107 010c 	add.w	r1, r7, #12
 8002372:	2364      	movs	r3, #100	; 0x64
 8002374:	220a      	movs	r2, #10
 8002376:	4808      	ldr	r0, [pc, #32]	; (8002398 <create_pmt_packet+0x88>)
 8002378:	f00f fe82 	bl	8012080 <HAL_UART_Transmit>

	pmt_seq++;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <create_pmt_packet+0x84>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <create_pmt_packet+0x84>)
 8002386:	801a      	strh	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	58020000 	.word	0x58020000
 8002394:	24001a5e 	.word	0x24001a5e
 8002398:	24001dbc 	.word	0x24001dbc

0800239c <create_erpa_packet>:


void create_erpa_packet() {
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80023a2:	bf00      	nop
 80023a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a8:	4828      	ldr	r0, [pc, #160]	; (800244c <create_erpa_packet+0xb0>)
 80023aa:	f007 f81d 	bl	80093e8 <HAL_GPIO_ReadPin>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f7      	bne.n	80023a4 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 80023b4:	23ff      	movs	r3, #255	; 0xff
 80023b6:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fa60 	bl	8003880 <get_uptime>
	sweep_step = get_current_step();
 80023c0:	f7ff ff20 	bl	8002204 <get_current_step>
 80023c4:	4603      	mov	r3, r0
 80023c6:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 faad 	bl	800292c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fac8 	bl	800296c <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80023dc:	23aa      	movs	r3, #170	; 0xaa
 80023de:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 80023e0:	23aa      	movs	r3, #170	; 0xaa
 80023e2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <create_erpa_packet+0xb4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <create_erpa_packet+0xb4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <create_erpa_packet+0xb4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8002400:	7ffb      	ldrb	r3, [r7, #31]
 8002402:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002404:	893b      	ldrh	r3, [r7, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	b29b      	uxth	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800240e:	893b      	ldrh	r3, [r7, #8]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002414:	7b3b      	ldrb	r3, [r7, #12]
 8002416:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002418:	7b7b      	ldrb	r3, [r7, #13]
 800241a:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 800241c:	793b      	ldrb	r3, [r7, #4]
 800241e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8002420:	797b      	ldrb	r3, [r7, #5]
 8002422:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 800242c:	f107 0110 	add.w	r1, r7, #16
 8002430:	2364      	movs	r3, #100	; 0x64
 8002432:	220e      	movs	r2, #14
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <create_erpa_packet+0xb8>)
 8002436:	f00f fe23 	bl	8012080 <HAL_UART_Transmit>

	erpa_seq++;
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <create_erpa_packet+0xb4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a03      	ldr	r2, [pc, #12]	; (8002450 <create_erpa_packet+0xb4>)
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	58020400 	.word	0x58020400
 8002450:	24001a60 	.word	0x24001a60
 8002454:	24001dbc 	.word	0x24001dbc

08002458 <create_hk_packet>:


void create_hk_packet() {
 8002458:	b580      	push	{r7, lr}
 800245a:	b094      	sub	sp, #80	; 0x50
 800245c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4618      	mov	r0, r3
 8002462:	f001 fa0d 	bl	8003880 <get_uptime>
	get_timestamp(timestamp);
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4618      	mov	r0, r3
 800246c:	f001 fa58 	bl	8003920 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002470:	f001 fd8e 	bl	8003f90 <get_rail_monitor>
 8002474:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002476:	23cc      	movs	r3, #204	; 0xcc
 8002478:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800247a:	23cc      	movs	r3, #204	; 0xcc
 800247c:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800247e:	4b9b      	ldr	r3, [pc, #620]	; (80026ec <create_hk_packet+0x294>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800248a:	4b98      	ldr	r3, [pc, #608]	; (80026ec <create_hk_packet+0x294>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002494:	889b      	ldrh	r3, [r3, #4]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b29b      	uxth	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 800249e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a0:	889b      	ldrh	r3, [r3, #4]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80024a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a8:	330a      	adds	r3, #10
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	330a      	adds	r3, #10
 80024b8:	889b      	ldrh	r3, [r3, #4]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80024be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c0:	3314      	adds	r3, #20
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80024cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ce:	3314      	adds	r3, #20
 80024d0:	889b      	ldrh	r3, [r3, #4]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	331e      	adds	r3, #30
 80024da:	889b      	ldrh	r3, [r3, #4]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80024e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e6:	331e      	adds	r3, #30
 80024e8:	889b      	ldrh	r3, [r3, #4]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	3328      	adds	r3, #40	; 0x28
 80024f2:	889b      	ldrh	r3, [r3, #4]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80024fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002500:	3328      	adds	r3, #40	; 0x28
 8002502:	889b      	ldrh	r3, [r3, #4]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 800250a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250c:	3332      	adds	r3, #50	; 0x32
 800250e:	889b      	ldrh	r3, [r3, #4]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	b29b      	uxth	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251c:	3332      	adds	r3, #50	; 0x32
 800251e:	889b      	ldrh	r3, [r3, #4]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	333c      	adds	r3, #60	; 0x3c
 800252a:	889b      	ldrh	r3, [r3, #4]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b29b      	uxth	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002538:	333c      	adds	r3, #60	; 0x3c
 800253a:	889b      	ldrh	r3, [r3, #4]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002544:	3346      	adds	r3, #70	; 0x46
 8002546:	889b      	ldrh	r3, [r3, #4]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29b      	uxth	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002554:	3346      	adds	r3, #70	; 0x46
 8002556:	889b      	ldrh	r3, [r3, #4]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 800255e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002560:	3350      	adds	r3, #80	; 0x50
 8002562:	889b      	ldrh	r3, [r3, #4]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 800256e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002570:	3350      	adds	r3, #80	; 0x50
 8002572:	889b      	ldrh	r3, [r3, #4]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 800257a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257c:	335a      	adds	r3, #90	; 0x5a
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	b29b      	uxth	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 800258a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258c:	335a      	adds	r3, #90	; 0x5a
 800258e:	889b      	ldrh	r3, [r3, #4]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8002596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002598:	3364      	adds	r3, #100	; 0x64
 800259a:	889b      	ldrh	r3, [r3, #4]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80025a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a8:	3364      	adds	r3, #100	; 0x64
 80025aa:	889b      	ldrh	r3, [r3, #4]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80025b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b4:	336e      	adds	r3, #110	; 0x6e
 80025b6:	889b      	ldrh	r3, [r3, #4]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80025c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c4:	336e      	adds	r3, #110	; 0x6e
 80025c6:	889b      	ldrh	r3, [r3, #4]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d0:	3378      	adds	r3, #120	; 0x78
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	3378      	adds	r3, #120	; 0x78
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80025ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ec:	3382      	adds	r3, #130	; 0x82
 80025ee:	889b      	ldrh	r3, [r3, #4]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80025fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fc:	3382      	adds	r3, #130	; 0x82
 80025fe:	889b      	ldrh	r3, [r3, #4]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	338c      	adds	r3, #140	; 0x8c
 800260a:	889b      	ldrh	r3, [r3, #4]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002618:	338c      	adds	r3, #140	; 0x8c
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002624:	3396      	adds	r3, #150	; 0x96
 8002626:	889b      	ldrh	r3, [r3, #4]
 8002628:	0a1b      	lsrs	r3, r3, #8
 800262a:	b29b      	uxth	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	3396      	adds	r3, #150	; 0x96
 8002636:	889b      	ldrh	r3, [r3, #4]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	33a0      	adds	r3, #160	; 0xa0
 8002642:	889b      	ldrh	r3, [r3, #4]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	33a0      	adds	r3, #160	; 0xa0
 8002652:	889b      	ldrh	r3, [r3, #4]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800265a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265c:	33aa      	adds	r3, #170	; 0xaa
 800265e:	889b      	ldrh	r3, [r3, #4]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 800266a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266c:	33aa      	adds	r3, #170	; 0xaa
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8002676:	7a3b      	ldrb	r3, [r7, #8]
 8002678:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8002682:	7abb      	ldrb	r3, [r7, #10]
 8002684:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 800268e:	7b3b      	ldrb	r3, [r7, #12]
 8002690:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8002694:	7b7b      	ldrb	r3, [r7, #13]
 8002696:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 80026a6:	7c3b      	ldrb	r3, [r7, #16]
 80026a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 80026ac:	7c7b      	ldrb	r3, [r7, #17]
 80026ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 80026b2:	793b      	ldrb	r3, [r7, #4]
 80026b4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 80026b8:	797b      	ldrb	r3, [r7, #5]
 80026ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 80026ca:	f107 0114 	add.w	r1, r7, #20
 80026ce:	2364      	movs	r3, #100	; 0x64
 80026d0:	2236      	movs	r2, #54	; 0x36
 80026d2:	4807      	ldr	r0, [pc, #28]	; (80026f0 <create_hk_packet+0x298>)
 80026d4:	f00f fcd4 	bl	8012080 <HAL_UART_Transmit>

	hk_seq++;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <create_hk_packet+0x294>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <create_hk_packet+0x294>)
 80026e2:	801a      	strh	r2, [r3, #0]
}
 80026e4:	bf00      	nop
 80026e6:	3750      	adds	r7, #80	; 0x50
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	24001a64 	.word	0x24001a64
 80026f0:	24001dbc 	.word	0x24001dbc

080026f4 <reset_packet_sequence_numbers>:
	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
}



void reset_packet_sequence_numbers() {
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <reset_packet_sequence_numbers+0x20>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <reset_packet_sequence_numbers+0x24>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <reset_packet_sequence_numbers+0x28>)
 8002706:	2200      	movs	r2, #0
 8002708:	801a      	strh	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	24001a5e 	.word	0x24001a5e
 8002718:	24001a60 	.word	0x24001a60
 800271c:	24001a64 	.word	0x24001a64

08002720 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <MX_RTC_Init+0xb4>)
 800273a:	4a27      	ldr	r2, [pc, #156]	; (80027d8 <MX_RTC_Init+0xb8>)
 800273c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002746:	2263      	movs	r2, #99	; 0x63
 8002748:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <MX_RTC_Init+0xb4>)
 800274c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002750:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <MX_RTC_Init+0xb4>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002760:	2200      	movs	r2, #0
 8002762:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800276a:	481a      	ldr	r0, [pc, #104]	; (80027d4 <MX_RTC_Init+0xb4>)
 800276c:	f00c ff6e 	bl	800f64c <HAL_RTC_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002776:	f7ff fdc5 	bl	8002304 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800277a:	2300      	movs	r3, #0
 800277c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800277e:	2300      	movs	r3, #0
 8002780:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002782:	2300      	movs	r3, #0
 8002784:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2201      	movs	r2, #1
 8002792:	4619      	mov	r1, r3
 8002794:	480f      	ldr	r0, [pc, #60]	; (80027d4 <MX_RTC_Init+0xb4>)
 8002796:	f00c ffdb 	bl	800f750 <HAL_RTC_SetTime>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80027a0:	f7ff fdb0 	bl	8002304 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027a4:	2301      	movs	r3, #1
 80027a6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027a8:	2301      	movs	r3, #1
 80027aa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027b4:	463b      	mov	r3, r7
 80027b6:	2201      	movs	r2, #1
 80027b8:	4619      	mov	r1, r3
 80027ba:	4806      	ldr	r0, [pc, #24]	; (80027d4 <MX_RTC_Init+0xb4>)
 80027bc:	f00d f8c2 	bl	800f944 <HAL_RTC_SetDate>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80027c6:	f7ff fd9d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	24001a68 	.word	0x24001a68
 80027d8:	58004000 	.word	0x58004000

080027dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0b2      	sub	sp, #200	; 0xc8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	22c0      	movs	r2, #192	; 0xc0
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f015 fc6d 	bl	80180cc <memset>
  if(rtcHandle->Instance==RTC)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_RTC_MspInit+0x5c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d118      	bne.n	800282e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002808:	4b0c      	ldr	r3, [pc, #48]	; (800283c <HAL_RTC_MspInit+0x60>)
 800280a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	4618      	mov	r0, r3
 8002814:	f00a fa1c 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800281e:	f7ff fd71 	bl	8002304 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_RTC_MspInit+0x64>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a06      	ldr	r2, [pc, #24]	; (8002840 <HAL_RTC_MspInit+0x64>)
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800282e:	bf00      	nop
 8002830:	37c8      	adds	r7, #200	; 0xc8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	58004000 	.word	0x58004000
 800283c:	00019300 	.word	0x00019300
 8002840:	58024400 	.word	0x58024400

08002844 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800284e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002852:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002856:	481f      	ldr	r0, [pc, #124]	; (80028d4 <init_adc_dma+0x90>)
 8002858:	f002 ff98 	bl	800578c <HAL_ADCEx_Calibration_Start>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002862:	f7ff fd4f 	bl	8002304 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002866:	220b      	movs	r2, #11
 8002868:	491b      	ldr	r1, [pc, #108]	; (80028d8 <init_adc_dma+0x94>)
 800286a:	481a      	ldr	r0, [pc, #104]	; (80028d4 <init_adc_dma+0x90>)
 800286c:	f002 f86c 	bl	8004948 <HAL_ADC_Start_DMA>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002876:	f7ff fd45 	bl	8002304 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800287a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800287e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002882:	4816      	ldr	r0, [pc, #88]	; (80028dc <init_adc_dma+0x98>)
 8002884:	f002 ff82 	bl	800578c <HAL_ADCEx_Calibration_Start>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800288e:	f7ff fd39 	bl	8002304 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002892:	2204      	movs	r2, #4
 8002894:	4912      	ldr	r1, [pc, #72]	; (80028e0 <init_adc_dma+0x9c>)
 8002896:	4811      	ldr	r0, [pc, #68]	; (80028dc <init_adc_dma+0x98>)
 8002898:	f002 f856 	bl	8004948 <HAL_ADC_Start_DMA>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80028a2:	f7ff fd2f 	bl	8002304 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <init_adc_dma+0xa0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <init_adc_dma+0xa0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b4:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <init_adc_dma+0xa4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <init_adc_dma+0xa4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028c4:	601a      	str	r2, [r3, #0]


	status = 1;
 80028c6:	2301      	movs	r3, #1
 80028c8:	71fb      	strb	r3, [r7, #7]

	return status;
 80028ca:	79fb      	ldrb	r3, [r7, #7]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	2400011c 	.word	0x2400011c
 80028d8:	24001aa0 	.word	0x24001aa0
 80028dc:	24000180 	.word	0x24000180
 80028e0:	24001ac0 	.word	0x24001ac0
 80028e4:	24001b5c 	.word	0x24001b5c
 80028e8:	24001ad4 	.word	0x24001ad4

080028ec <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80028f4:	2201      	movs	r2, #1
 80028f6:	490b      	ldr	r1, [pc, #44]	; (8002924 <sample_pmt_spi+0x38>)
 80028f8:	480b      	ldr	r0, [pc, #44]	; (8002928 <sample_pmt_spi+0x3c>)
 80028fa:	f00d faed 	bl	800fed8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <sample_pmt_spi+0x38>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	b29b      	uxth	r3, r3
 8002906:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <sample_pmt_spi+0x38>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3301      	adds	r3, #1
 8002918:	7bba      	ldrb	r2, [r7, #14]
 800291a:	701a      	strb	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24001acc 	.word	0x24001acc
 8002928:	24001ad4 	.word	0x24001ad4

0800292c <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8002934:	2201      	movs	r2, #1
 8002936:	490b      	ldr	r1, [pc, #44]	; (8002964 <sample_erpa_spi+0x38>)
 8002938:	480b      	ldr	r0, [pc, #44]	; (8002968 <sample_erpa_spi+0x3c>)
 800293a:	f00d facd 	bl	800fed8 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <sample_erpa_spi+0x38>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b29b      	uxth	r3, r3
 8002946:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <sample_erpa_spi+0x38>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	7bba      	ldrb	r2, [r7, #14]
 800295a:	701a      	strb	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	24001ac8 	.word	0x24001ac8
 8002968:	24001b5c 	.word	0x24001b5c

0800296c <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <sample_erpa_adc+0x20>)
 8002976:	885b      	ldrh	r3, [r3, #2]
 8002978:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	89fa      	ldrh	r2, [r7, #14]
 800297e:	801a      	strh	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	24001aa0 	.word	0x24001aa0

08002990 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002998:	2390      	movs	r3, #144	; 0x90
 800299a:	4618      	mov	r0, r3
 800299c:	f000 f8a2 	bl	8002ae4 <poll_i2c_sensor>
 80029a0:	4603      	mov	r3, r0
 80029a2:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 80029a4:	2394      	movs	r3, #148	; 0x94
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f89c 	bl	8002ae4 <poll_i2c_sensor>
 80029ac:	4603      	mov	r3, r0
 80029ae:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 80029b0:	2392      	movs	r3, #146	; 0x92
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f896 	bl	8002ae4 <poll_i2c_sensor>
 80029b8:	4603      	mov	r3, r0
 80029ba:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 80029bc:	2396      	movs	r3, #150	; 0x96
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f890 	bl	8002ae4 <poll_i2c_sensor>
 80029c4:	4603      	mov	r3, r0
 80029c6:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	89fa      	ldrh	r2, [r7, #14]
 80029cc:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3302      	adds	r3, #2
 80029d2:	89ba      	ldrh	r2, [r7, #12]
 80029d4:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	897a      	ldrh	r2, [r7, #10]
 80029dc:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3306      	adds	r3, #6
 80029e2:	893a      	ldrh	r2, [r7, #8]
 80029e4:	801a      	strh	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <sample_hk_adc1+0xa0>)
 80029fa:	8a9b      	ldrh	r3, [r3, #20]
 80029fc:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a00:	8a1b      	ldrh	r3, [r3, #16]
 8002a02:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a06:	899b      	ldrh	r3, [r3, #12]
 8002a08:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002a0a:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a0c:	8a5b      	ldrh	r3, [r3, #18]
 8002a0e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a12:	889b      	ldrh	r3, [r3, #4]
 8002a14:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a18:	88db      	ldrh	r3, [r3, #6]
 8002a1a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a1e:	89db      	ldrh	r3, [r3, #14]
 8002a20:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a24:	891b      	ldrh	r3, [r3, #8]
 8002a26:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a2a:	881b      	ldrh	r3, [r3, #0]
 8002a2c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002a2e:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <sample_hk_adc1+0xa0>)
 8002a30:	895b      	ldrh	r3, [r3, #10]
 8002a32:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8bfa      	ldrh	r2, [r7, #30]
 8002a38:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	8bba      	ldrh	r2, [r7, #28]
 8002a40:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	8b7a      	ldrh	r2, [r7, #26]
 8002a48:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3306      	adds	r3, #6
 8002a4e:	8b3a      	ldrh	r2, [r7, #24]
 8002a50:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3308      	adds	r3, #8
 8002a56:	8afa      	ldrh	r2, [r7, #22]
 8002a58:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	330a      	adds	r3, #10
 8002a5e:	8aba      	ldrh	r2, [r7, #20]
 8002a60:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	330c      	adds	r3, #12
 8002a66:	8a7a      	ldrh	r2, [r7, #18]
 8002a68:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	330e      	adds	r3, #14
 8002a6e:	8a3a      	ldrh	r2, [r7, #16]
 8002a70:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3310      	adds	r3, #16
 8002a76:	89fa      	ldrh	r2, [r7, #14]
 8002a78:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3312      	adds	r3, #18
 8002a7e:	89ba      	ldrh	r2, [r7, #12]
 8002a80:	801a      	strh	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	24001aa0 	.word	0x24001aa0

08002a94 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <sample_hk_adc3+0x4c>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <sample_hk_adc3+0x4c>)
 8002aa4:	885b      	ldrh	r3, [r3, #2]
 8002aa6:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <sample_hk_adc3+0x4c>)
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <sample_hk_adc3+0x4c>)
 8002ab0:	88db      	ldrh	r3, [r3, #6]
 8002ab2:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	89fa      	ldrh	r2, [r7, #14]
 8002ab8:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3302      	adds	r3, #2
 8002abe:	89ba      	ldrh	r2, [r7, #12]
 8002ac0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	897a      	ldrh	r2, [r7, #10]
 8002ac8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3306      	adds	r3, #6
 8002ace:	893a      	ldrh	r2, [r7, #8]
 8002ad0:	801a      	strh	r2, [r3, #0]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	24001ac0 	.word	0x24001ac0

08002ae4 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8002aee:	2200      	movs	r2, #0
 8002af0:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <poll_i2c_sensor+0x90>)
 8002af2:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	b299      	uxth	r1, r3
 8002af8:	2301      	movs	r3, #1
 8002afa:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <poll_i2c_sensor+0x90>)
 8002afc:	481e      	ldr	r0, [pc, #120]	; (8002b78 <poll_i2c_sensor+0x94>)
 8002afe:	f006 fd41 	bl	8009584 <HAL_I2C_Master_Transmit_DMA>
 8002b02:	4603      	mov	r3, r0
 8002b04:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002b06:	7b7b      	ldrb	r3, [r7, #13]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 8002b0c:	481b      	ldr	r0, [pc, #108]	; (8002b7c <poll_i2c_sensor+0x98>)
 8002b0e:	f015 fb53 	bl	80181b8 <puts>
 8002b12:	e028      	b.n	8002b66 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8002b14:	bf00      	nop
 8002b16:	4818      	ldr	r0, [pc, #96]	; (8002b78 <poll_i2c_sensor+0x94>)
 8002b18:	f007 f81b 	bl	8009b52 <HAL_I2C_GetState>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d1f9      	bne.n	8002b16 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	b299      	uxth	r1, r3
 8002b26:	2302      	movs	r3, #2
 8002b28:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <poll_i2c_sensor+0x90>)
 8002b2a:	4813      	ldr	r0, [pc, #76]	; (8002b78 <poll_i2c_sensor+0x94>)
 8002b2c:	f006 fe3e 	bl	80097ac <HAL_I2C_Master_Receive_DMA>
 8002b30:	4603      	mov	r3, r0
 8002b32:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002b34:	7b7b      	ldrb	r3, [r7, #13]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002b3a:	4811      	ldr	r0, [pc, #68]	; (8002b80 <poll_i2c_sensor+0x9c>)
 8002b3c:	f015 fb3c 	bl	80181b8 <puts>
 8002b40:	e011      	b.n	8002b66 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8002b42:	bf00      	nop
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <poll_i2c_sensor+0x94>)
 8002b46:	f007 f804 	bl	8009b52 <HAL_I2C_GetState>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d1f9      	bne.n	8002b44 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <poll_i2c_sensor+0x90>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8002b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <poll_i2c_sensor+0x90>)
 8002b5e:	7852      	ldrb	r2, [r2, #1]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	10db      	asrs	r3, r3, #3
 8002b64:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	24001ad0 	.word	0x24001ad0
 8002b78:	240018c0 	.word	0x240018c0
 8002b7c:	08018d20 	.word	0x08018d20
 8002b80:	08018d30 	.word	0x08018d30

08002b84 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002b8a:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <MX_SPI1_Init+0xac>)
 8002b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b8e:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002b90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002b96:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002b98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b9c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002baa:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bba:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002bd2:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002bfe:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c16:	4805      	ldr	r0, [pc, #20]	; (8002c2c <MX_SPI1_Init+0xa8>)
 8002c18:	f00d f83a 	bl	800fc90 <HAL_SPI_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002c22:	f7ff fb6f 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	24001ad4 	.word	0x24001ad4
 8002c30:	40013000 	.word	0x40013000

08002c34 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c3a:	4a29      	ldr	r2, [pc, #164]	; (8002ce0 <MX_SPI2_Init+0xac>)
 8002c3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c48:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c4c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c50:	220f      	movs	r2, #15
 8002c52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002c66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c68:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c6a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002c6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7c:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_SPI2_Init+0xa8>)
 8002cc8:	f00c ffe2 	bl	800fc90 <HAL_SPI_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002cd2:	f7ff fb17 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	24001b5c 	.word	0x24001b5c
 8002ce0:	40003800 	.word	0x40003800

08002ce4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b0bc      	sub	sp, #240	; 0xf0
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cfc:	f107 0318 	add.w	r3, r7, #24
 8002d00:	22c0      	movs	r2, #192	; 0xc0
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f015 f9e1 	bl	80180cc <memset>
  if(spiHandle->Instance==SPI1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a83      	ldr	r2, [pc, #524]	; (8002f1c <HAL_SPI_MspInit+0x238>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d17c      	bne.n	8002e0e <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d24:	f107 0318 	add.w	r3, r7, #24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f009 ff91 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002d34:	f7ff fae6 	bl	8002304 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d3e:	4a78      	ldr	r2, [pc, #480]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	4b72      	ldr	r3, [pc, #456]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5c:	4a70      	ldr	r2, [pc, #448]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002d74:	2318      	movs	r3, #24
 8002d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d8c:	2305      	movs	r3, #5
 8002d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d96:	4619      	mov	r1, r3
 8002d98:	4862      	ldr	r0, [pc, #392]	; (8002f24 <HAL_SPI_MspInit+0x240>)
 8002d9a:	f006 f975 	bl	8009088 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002da0:	4a62      	ldr	r2, [pc, #392]	; (8002f2c <HAL_SPI_MspInit+0x248>)
 8002da2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002da6:	2225      	movs	r2, #37	; 0x25
 8002da8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002db6:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dbe:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dc4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dcc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002dce:	4b56      	ldr	r3, [pc, #344]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dd4:	4b54      	ldr	r3, [pc, #336]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dda:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002de0:	4851      	ldr	r0, [pc, #324]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002de2:	f003 fafb 	bl	80063dc <HAL_DMA_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002dec:	f7ff fa8a 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a4d      	ldr	r2, [pc, #308]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002df4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002df6:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_SPI_MspInit+0x244>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2105      	movs	r1, #5
 8002e00:	2023      	movs	r0, #35	; 0x23
 8002e02:	f002 febd 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002e06:	2023      	movs	r0, #35	; 0x23
 8002e08:	f002 fed4 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e0c:	e081      	b.n	8002f12 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <HAL_SPI_MspInit+0x24c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d17c      	bne.n	8002f12 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002e18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f009 ff0f 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8002e38:	f7ff fa64 	bl	8002304 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e42:	4a37      	ldr	r2, [pc, #220]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	4a2f      	ldr	r2, [pc, #188]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e62:	f043 0302 	orr.w	r3, r3, #2
 8002e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_SPI_MspInit+0x23c>)
 8002e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002e78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002e7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e92:	2305      	movs	r3, #5
 8002e94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4821      	ldr	r0, [pc, #132]	; (8002f24 <HAL_SPI_MspInit+0x240>)
 8002ea0:	f006 f8f2 	bl	8009088 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_SPI_MspInit+0x254>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002eac:	2227      	movs	r2, #39	; 0x27
 8002eae:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ebe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ec6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eca:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ece:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ed2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ee6:	4813      	ldr	r0, [pc, #76]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002ee8:	f003 fa78 	bl	80063dc <HAL_DMA_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8002ef2:	f7ff fa07 	bl	8002304 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002efa:	67da      	str	r2, [r3, #124]	; 0x7c
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_SPI_MspInit+0x250>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2105      	movs	r1, #5
 8002f06:	2024      	movs	r0, #36	; 0x24
 8002f08:	f002 fe3a 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f0c:	2024      	movs	r0, #36	; 0x24
 8002f0e:	f002 fe51 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
}
 8002f12:	bf00      	nop
 8002f14:	37f0      	adds	r7, #240	; 0xf0
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40013000 	.word	0x40013000
 8002f20:	58024400 	.word	0x58024400
 8002f24:	58020400 	.word	0x58020400
 8002f28:	24001be4 	.word	0x24001be4
 8002f2c:	40020070 	.word	0x40020070
 8002f30:	40003800 	.word	0x40003800
 8002f34:	24001c5c 	.word	0x24001c5c
 8002f38:	40020058 	.word	0x40020058

08002f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_MspInit+0x38>)
 8002f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <HAL_MspInit+0x38>)
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <HAL_MspInit+0x38>)
 8002f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	607b      	str	r3, [r7, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f60:	2200      	movs	r2, #0
 8002f62:	210f      	movs	r1, #15
 8002f64:	f06f 0001 	mvn.w	r0, #1
 8002f68:	f002 fe0a 	bl	8005b80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400

08002f78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b090      	sub	sp, #64	; 0x40
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b0f      	cmp	r3, #15
 8002f84:	d827      	bhi.n	8002fd6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002f86:	2200      	movs	r2, #0
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	2036      	movs	r0, #54	; 0x36
 8002f8c:	f002 fdf8 	bl	8005b80 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f90:	2036      	movs	r0, #54	; 0x36
 8002f92:	f002 fe0f 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002f96:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_InitTick+0xc4>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_InitTick+0xc8>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa2:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_InitTick+0xc8>)
 8002fa4:	f043 0310 	orr.w	r3, r3, #16
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_InitTick+0xc8>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fba:	f107 0210 	add.w	r2, r7, #16
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f009 fe01 	bl	800cbcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <HAL_InitTick+0x6a>
 8002fd4:	e001      	b.n	8002fda <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e02b      	b.n	8003032 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002fda:	f009 fdcb 	bl	800cb74 <HAL_RCC_GetPCLK1Freq>
 8002fde:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002fe0:	e004      	b.n	8002fec <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002fe2:	f009 fdc7 	bl	800cb74 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_InitTick+0xcc>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	0c9b      	lsrs	r3, r3, #18
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ffa:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_InitTick+0xd0>)
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_InitTick+0xd4>)
 8002ffe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_InitTick+0xd0>)
 8003002:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003006:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_InitTick+0xd0>)
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_InitTick+0xd0>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_InitTick+0xd0>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800301a:	480b      	ldr	r0, [pc, #44]	; (8003048 <HAL_InitTick+0xd0>)
 800301c:	f00d fbd7 	bl	80107ce <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003026:	4808      	ldr	r0, [pc, #32]	; (8003048 <HAL_InitTick+0xd0>)
 8003028:	f00d fc28 	bl	801087c <HAL_TIM_Base_Start_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	e000      	b.n	8003032 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
}
 8003032:	4618      	mov	r0, r3
 8003034:	3740      	adds	r7, #64	; 0x40
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2400008c 	.word	0x2400008c
 8003040:	58024400 	.word	0x58024400
 8003044:	431bde83 	.word	0x431bde83
 8003048:	24001cd4 	.word	0x24001cd4
 800304c:	40001000 	.word	0x40001000

08003050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003054:	e7fe      	b.n	8003054 <NMI_Handler+0x4>

08003056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <HardFault_Handler+0x4>

0800305c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <MemManage_Handler+0x4>

08003062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <BusFault_Handler+0x4>

08003068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <UsageFault_Handler+0x4>

0800306e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <DMA1_Stream0_IRQHandler+0x10>)
 8003082:	f004 fcd5 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	240001e4 	.word	0x240001e4

08003090 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <DMA1_Stream1_IRQHandler+0x10>)
 8003096:	f004 fccb 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2400025c 	.word	0x2400025c

080030a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <DMA1_Stream2_IRQHandler+0x10>)
 80030aa:	f004 fcc1 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	24001e50 	.word	0x24001e50

080030b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <DMA1_Stream3_IRQHandler+0x10>)
 80030be:	f004 fcb7 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	24001c5c 	.word	0x24001c5c

080030cc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <DMA1_Stream4_IRQHandler+0x10>)
 80030d2:	f004 fcad 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	24001be4 	.word	0x24001be4

080030e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DMA1_Stream5_IRQHandler+0x10>)
 80030e6:	f004 fca3 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	240002e8 	.word	0x240002e8

080030f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA1_Stream6_IRQHandler+0x10>)
 80030fa:	f004 fc99 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	24001914 	.word	0x24001914

08003108 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <TIM1_BRK_IRQHandler+0x10>)
 800310e:	f00d fecc 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	24001d24 	.word	0x24001d24

0800311c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <TIM1_UP_IRQHandler+0x10>)
 8003122:	f00d fec2 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	24001d24 	.word	0x24001d24

08003130 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003136:	f00d feb8 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	24001d24 	.word	0x24001d24

08003144 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003148:	4802      	ldr	r0, [pc, #8]	; (8003154 <TIM1_CC_IRQHandler+0x10>)
 800314a:	f00d feae 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	24001d24 	.word	0x24001d24

08003158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800315c:	4802      	ldr	r0, [pc, #8]	; (8003168 <TIM2_IRQHandler+0x10>)
 800315e:	f00d fea4 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	24001d70 	.word	0x24001d70

0800316c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003170:	4802      	ldr	r0, [pc, #8]	; (800317c <I2C1_EV_IRQHandler+0x10>)
 8003172:	f006 fc0b 	bl	800998c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003176:	bf00      	nop
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	240018c0 	.word	0x240018c0

08003180 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003184:	4802      	ldr	r0, [pc, #8]	; (8003190 <I2C1_ER_IRQHandler+0x10>)
 8003186:	f006 fc1b 	bl	80099c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	240018c0 	.word	0x240018c0

08003194 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <SPI1_IRQHandler+0x10>)
 800319a:	f00c ffe5 	bl	8010168 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	24001ad4 	.word	0x24001ad4

080031a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <SPI2_IRQHandler+0x10>)
 80031ae:	f00c ffdb 	bl	8010168 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	24001b5c 	.word	0x24001b5c

080031bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80031c0:	4802      	ldr	r0, [pc, #8]	; (80031cc <USART1_IRQHandler+0x10>)
 80031c2:	f00f f9b5 	bl	8012530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	24001dbc 	.word	0x24001dbc

080031d0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DMA1_Stream7_IRQHandler+0x10>)
 80031d6:	f004 fc2b 	bl	8007a30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2400198c 	.word	0x2400198c

080031e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <TIM6_DAC_IRQHandler+0x20>)
 80031ea:	791b      	ldrb	r3, [r3, #4]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80031f2:	4804      	ldr	r0, [pc, #16]	; (8003204 <TIM6_DAC_IRQHandler+0x20>)
 80031f4:	f002 fe73 	bl	8005ede <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <TIM6_DAC_IRQHandler+0x24>)
 80031fa:	f00d fe56 	bl	8010eaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	240002d4 	.word	0x240002d4
 8003208:	24001cd4 	.word	0x24001cd4

0800320c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <ITM_SendChar+0x48>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <ITM_SendChar+0x48>)
 800321c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <ITM_SendChar+0x4c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <ITM_SendChar+0x4c>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800322e:	bf00      	nop
 8003230:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f8      	beq.n	8003230 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800323e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	6013      	str	r3, [r2, #0]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000edfc 	.word	0xe000edfc
 8003258:	e0000e00 	.word	0xe0000e00

0800325c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e00a      	b.n	8003284 <_read+0x28>
		*ptr++ = __io_getchar();
 800326e:	f3af 8000 	nop.w
 8003272:	4601      	mov	r1, r0
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	b2ca      	uxtb	r2, r1
 800327c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	dbf0      	blt.n	800326e <_read+0x12>
	}

	return len;
 800328c:	687b      	ldr	r3, [r7, #4]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e009      	b.n	80032bc <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60ba      	str	r2, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ffab 	bl	800320c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	dbf1      	blt.n	80032a8 <_write+0x12>
	}
	return len;
 80032c4:	687b      	ldr	r3, [r7, #4]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_close>:

int _close(int file) {
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032f6:	605a      	str	r2, [r3, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_isatty>:

int _isatty(int file) {
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <_sbrk+0x64>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <_sbrk+0x64>)
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <_sbrk+0x68>)
 8003358:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <_sbrk+0x40>
		errno = ENOMEM;
 8003368:	f014 fe78 	bl	801805c <__errno>
 800336c:	4603      	mov	r3, r0
 800336e:	220c      	movs	r2, #12
 8003370:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003376:	e009      	b.n	800338c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <_sbrk+0x64>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <_sbrk+0x64>)
 8003388:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	24080000 	.word	0x24080000
 8003398:	00000400 	.word	0x00000400
 800339c:	24001d20 	.word	0x24001d20
 80033a0:	240068e0 	.word	0x240068e0

080033a4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80033a8:	4b37      	ldr	r3, [pc, #220]	; (8003488 <SystemInit+0xe4>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	4a36      	ldr	r2, [pc, #216]	; (8003488 <SystemInit+0xe4>)
 80033b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033b8:	4b34      	ldr	r3, [pc, #208]	; (800348c <SystemInit+0xe8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d807      	bhi.n	80033d4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <SystemInit+0xe8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 030f 	bic.w	r3, r3, #15
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <SystemInit+0xe8>)
 80033ce:	f043 0307 	orr.w	r3, r3, #7
 80033d2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <SystemInit+0xec>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <SystemInit+0xec>)
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <SystemInit+0xec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033e6:	4b2a      	ldr	r3, [pc, #168]	; (8003490 <SystemInit+0xec>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	4929      	ldr	r1, [pc, #164]	; (8003490 <SystemInit+0xec>)
 80033ec:	4b29      	ldr	r3, [pc, #164]	; (8003494 <SystemInit+0xf0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <SystemInit+0xe8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <SystemInit+0xe8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 030f 	bic.w	r3, r3, #15
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <SystemInit+0xe8>)
 8003408:	f043 0307 	orr.w	r3, r3, #7
 800340c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <SystemInit+0xec>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <SystemInit+0xec>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800341a:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <SystemInit+0xec>)
 800341c:	2200      	movs	r2, #0
 800341e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <SystemInit+0xec>)
 8003422:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <SystemInit+0xf4>)
 8003424:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <SystemInit+0xec>)
 8003428:	4a1c      	ldr	r2, [pc, #112]	; (800349c <SystemInit+0xf8>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <SystemInit+0xec>)
 800342e:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <SystemInit+0xfc>)
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <SystemInit+0xec>)
 8003434:	2200      	movs	r2, #0
 8003436:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <SystemInit+0xec>)
 800343a:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <SystemInit+0xfc>)
 800343c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <SystemInit+0xec>)
 8003440:	2200      	movs	r2, #0
 8003442:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <SystemInit+0xec>)
 8003446:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <SystemInit+0xfc>)
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <SystemInit+0xec>)
 800344c:	2200      	movs	r2, #0
 800344e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <SystemInit+0xec>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <SystemInit+0xec>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800345c:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <SystemInit+0xec>)
 800345e:	2200      	movs	r2, #0
 8003460:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <SystemInit+0x100>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <SystemInit+0x104>)
 8003468:	4013      	ands	r3, r2
 800346a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346e:	d202      	bcs.n	8003476 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <SystemInit+0x108>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <SystemInit+0x10c>)
 8003478:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800347c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00
 800348c:	52002000 	.word	0x52002000
 8003490:	58024400 	.word	0x58024400
 8003494:	eaf6ed7f 	.word	0xeaf6ed7f
 8003498:	02020200 	.word	0x02020200
 800349c:	01ff0000 	.word	0x01ff0000
 80034a0:	01010280 	.word	0x01010280
 80034a4:	5c001000 	.word	0x5c001000
 80034a8:	ffff0000 	.word	0xffff0000
 80034ac:	51008108 	.word	0x51008108
 80034b0:	52004000 	.word	0x52004000

080034b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b09a      	sub	sp, #104	; 0x68
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
 80034e4:	615a      	str	r2, [r3, #20]
 80034e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	222c      	movs	r2, #44	; 0x2c
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f014 fdec 	bl	80180cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034f4:	4b44      	ldr	r3, [pc, #272]	; (8003608 <MX_TIM1_Init+0x154>)
 80034f6:	4a45      	ldr	r2, [pc, #276]	; (800360c <MX_TIM1_Init+0x158>)
 80034f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <MX_TIM1_Init+0x154>)
 80034fc:	224a      	movs	r2, #74	; 0x4a
 80034fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003500:	4b41      	ldr	r3, [pc, #260]	; (8003608 <MX_TIM1_Init+0x154>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8003506:	4b40      	ldr	r3, [pc, #256]	; (8003608 <MX_TIM1_Init+0x154>)
 8003508:	f24f 4223 	movw	r2, #62499	; 0xf423
 800350c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350e:	4b3e      	ldr	r3, [pc, #248]	; (8003608 <MX_TIM1_Init+0x154>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <MX_TIM1_Init+0x154>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800351a:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <MX_TIM1_Init+0x154>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003520:	4839      	ldr	r0, [pc, #228]	; (8003608 <MX_TIM1_Init+0x154>)
 8003522:	f00d f954 	bl	80107ce <HAL_TIM_Base_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800352c:	f7fe feea 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003534:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003536:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800353a:	4619      	mov	r1, r3
 800353c:	4832      	ldr	r0, [pc, #200]	; (8003608 <MX_TIM1_Init+0x154>)
 800353e:	f00d fecf 	bl	80112e0 <HAL_TIM_ConfigClockSource>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003548:	f7fe fedc 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800354c:	482e      	ldr	r0, [pc, #184]	; (8003608 <MX_TIM1_Init+0x154>)
 800354e:	f00d fc4b 	bl	8010de8 <HAL_TIM_PWM_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003558:	f7fe fed4 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003568:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800356c:	4619      	mov	r1, r3
 800356e:	4826      	ldr	r0, [pc, #152]	; (8003608 <MX_TIM1_Init+0x154>)
 8003570:	f00e fc0c 	bl	8011d8c <HAL_TIMEx_MasterConfigSynchronization>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800357a:	f7fe fec3 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800357e:	2360      	movs	r3, #96	; 0x60
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8003582:	f240 13df 	movw	r3, #479	; 0x1df
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003588:	2300      	movs	r3, #0
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800358c:	2300      	movs	r3, #0
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003598:	2300      	movs	r3, #0
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800359c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035a0:	2200      	movs	r2, #0
 80035a2:	4619      	mov	r1, r3
 80035a4:	4818      	ldr	r0, [pc, #96]	; (8003608 <MX_TIM1_Init+0x154>)
 80035a6:	f00d fd87 	bl	80110b8 <HAL_TIM_PWM_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80035b0:	f7fe fea8 	bl	8002304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035bc:	2300      	movs	r3, #0
 80035be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80035d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4807      	ldr	r0, [pc, #28]	; (8003608 <MX_TIM1_Init+0x154>)
 80035ea:	f00e fc5d 	bl	8011ea8 <HAL_TIMEx_ConfigBreakDeadTime>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80035f4:	f7fe fe86 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035f8:	4803      	ldr	r0, [pc, #12]	; (8003608 <MX_TIM1_Init+0x154>)
 80035fa:	f000 f8dd 	bl	80037b8 <HAL_TIM_MspPostInit>

}
 80035fe:	bf00      	nop
 8003600:	3768      	adds	r7, #104	; 0x68
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	24001d24 	.word	0x24001d24
 800360c:	40010000 	.word	0x40010000

08003610 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003630:	463b      	mov	r3, r7
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003642:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 800364a:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <MX_TIM2_Init+0xe8>)
 800364c:	224a      	movs	r2, #74	; 0x4a
 800364e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003658:	f640 4234 	movw	r2, #3124	; 0xc34
 800365c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800365e:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800366a:	4823      	ldr	r0, [pc, #140]	; (80036f8 <MX_TIM2_Init+0xe8>)
 800366c:	f00d f8af 	bl	80107ce <HAL_TIM_Base_Init>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003676:	f7fe fe45 	bl	8002304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003684:	4619      	mov	r1, r3
 8003686:	481c      	ldr	r0, [pc, #112]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003688:	f00d fe2a 	bl	80112e0 <HAL_TIM_ConfigClockSource>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003692:	f7fe fe37 	bl	8002304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003696:	4818      	ldr	r0, [pc, #96]	; (80036f8 <MX_TIM2_Init+0xe8>)
 8003698:	f00d fba6 	bl	8010de8 <HAL_TIM_PWM_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80036a2:	f7fe fe2f 	bl	8002304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80036a6:	2320      	movs	r3, #32
 80036a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80036ae:	f107 031c 	add.w	r3, r7, #28
 80036b2:	4619      	mov	r1, r3
 80036b4:	4810      	ldr	r0, [pc, #64]	; (80036f8 <MX_TIM2_Init+0xe8>)
 80036b6:	f00e fb69 	bl	8011d8c <HAL_TIMEx_MasterConfigSynchronization>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80036c0:	f7fe fe20 	bl	8002304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036c4:	2360      	movs	r3, #96	; 0x60
 80036c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80036d4:	463b      	mov	r3, r7
 80036d6:	220c      	movs	r2, #12
 80036d8:	4619      	mov	r1, r3
 80036da:	4807      	ldr	r0, [pc, #28]	; (80036f8 <MX_TIM2_Init+0xe8>)
 80036dc:	f00d fcec 	bl	80110b8 <HAL_TIM_PWM_ConfigChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80036e6:	f7fe fe0d 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <MX_TIM2_Init+0xe8>)
 80036ec:	f000 f864 	bl	80037b8 <HAL_TIM_MspPostInit>

}
 80036f0:	bf00      	nop
 80036f2:	3738      	adds	r7, #56	; 0x38
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	24001d70 	.word	0x24001d70

080036fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_TIM_Base_MspInit+0xb4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d12f      	bne.n	800376e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370e:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 8003710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 8003716:	f043 0301 	orr.w	r3, r3, #1
 800371a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800371e:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 8003720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2105      	movs	r1, #5
 8003730:	2018      	movs	r0, #24
 8003732:	f002 fa25 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8003736:	2018      	movs	r0, #24
 8003738:	f002 fa3c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2105      	movs	r1, #5
 8003740:	2019      	movs	r0, #25
 8003742:	f002 fa1d 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003746:	2019      	movs	r0, #25
 8003748:	f002 fa34 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800374c:	2200      	movs	r2, #0
 800374e:	2105      	movs	r1, #5
 8003750:	201a      	movs	r0, #26
 8003752:	f002 fa15 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8003756:	201a      	movs	r0, #26
 8003758:	f002 fa2c 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800375c:	2200      	movs	r2, #0
 800375e:	2105      	movs	r1, #5
 8003760:	201b      	movs	r0, #27
 8003762:	f002 fa0d 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003766:	201b      	movs	r0, #27
 8003768:	f002 fa24 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800376c:	e01b      	b.n	80037a6 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d116      	bne.n	80037a6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 800377a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800377e:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_TIM_Base_MspInit+0xb8>)
 800378a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
 8003794:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2105      	movs	r1, #5
 800379a:	201c      	movs	r0, #28
 800379c:	f002 f9f0 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037a0:	201c      	movs	r0, #28
 80037a2:	f002 fa07 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40010000 	.word	0x40010000
 80037b4:	58024400 	.word	0x58024400

080037b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	; 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <HAL_TIM_MspPostInit+0xb8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d120      	bne.n	800381c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	4b26      	ldr	r3, [pc, #152]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 80037dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 80037ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80037f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800380a:	2301      	movs	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	f107 0314 	add.w	r3, r7, #20
 8003812:	4619      	mov	r1, r3
 8003814:	4818      	ldr	r0, [pc, #96]	; (8003878 <HAL_TIM_MspPostInit+0xc0>)
 8003816:	f005 fc37 	bl	8009088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800381a:	e024      	b.n	8003866 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d11f      	bne.n	8003866 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 8003828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382c:	4a11      	ldr	r2, [pc, #68]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_TIM_MspPostInit+0xbc>)
 8003838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003856:	2301      	movs	r3, #1
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	4619      	mov	r1, r3
 8003860:	4806      	ldr	r0, [pc, #24]	; (800387c <HAL_TIM_MspPostInit+0xc4>)
 8003862:	f005 fc11 	bl	8009088 <HAL_GPIO_Init>
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40010000 	.word	0x40010000
 8003874:	58024400 	.word	0x58024400
 8003878:	58020000 	.word	0x58020000
 800387c:	58020400 	.word	0x58020400

08003880 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <get_uptime+0x94>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <get_uptime+0x98>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <get_uptime+0x94>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d005      	beq.n	80038ae <get_uptime+0x2e>
		ms = uptime_millis;
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <get_uptime+0x94>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <get_uptime+0x98>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038b4:	fb03 f202 	mul.w	r2, r3, r2
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <get_uptime+0x98>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	3301      	adds	r3, #1
 80038be:	4917      	ldr	r1, [pc, #92]	; (800391c <get_uptime+0x9c>)
 80038c0:	fba1 1303 	umull	r1, r3, r1, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <get_uptime+0x5a>
		uptime = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	0e1b      	lsrs	r3, r3, #24
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0c1a      	lsrs	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3301      	adds	r3, #1
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	0a1a      	lsrs	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3302      	adds	r3, #2
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3303      	adds	r3, #3
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	24001a54 	.word	0x24001a54
 8003918:	e000e010 	.word	0xe000e010
 800391c:	10624dd3 	.word	0x10624dd3

08003920 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	2200      	movs	r2, #0
 800392e:	4619      	mov	r1, r3
 8003930:	4821      	ldr	r0, [pc, #132]	; (80039b8 <get_timestamp+0x98>)
 8003932:	f00b ffab 	bl	800f88c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	2200      	movs	r2, #0
 800393c:	4619      	mov	r1, r3
 800393e:	481e      	ldr	r0, [pc, #120]	; (80039b8 <get_timestamp+0x98>)
 8003940:	f00c f888 	bl	800fa54 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2264      	movs	r2, #100	; 0x64
 8003948:	fb03 f202 	mul.w	r2, r3, r2
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <get_timestamp+0x9c>)
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	7b7a      	ldrb	r2, [r7, #13]
 800395e:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3302      	adds	r3, #2
 8003964:	7bba      	ldrb	r2, [r7, #14]
 8003966:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3303      	adds	r3, #3
 800396c:	7c3a      	ldrb	r2, [r7, #16]
 800396e:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	7c7a      	ldrb	r2, [r7, #17]
 8003976:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3305      	adds	r3, #5
 800397c:	7cba      	ldrb	r2, [r7, #18]
 800397e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	0e1a      	lsrs	r2, r3, #24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3306      	adds	r3, #6
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	0c1a      	lsrs	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3307      	adds	r3, #7
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	0a1a      	lsrs	r2, r3, #8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3308      	adds	r3, #8
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3309      	adds	r3, #9
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	24001a68 	.word	0x24001a68
 80039bc:	000f4240 	.word	0x000f4240

080039c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039c6:	4a31      	ldr	r2, [pc, #196]	; (8003a8c <MX_USART1_UART_Init+0xcc>)
 80039c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80039ca:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039cc:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80039d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039d2:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039da:	2200      	movs	r2, #0
 80039dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039e6:	220c      	movs	r2, #12
 80039e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039fc:	4b22      	ldr	r3, [pc, #136]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a08:	481f      	ldr	r0, [pc, #124]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a0a:	f00e fae9 	bl	8011fe0 <HAL_UART_Init>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003a14:	f7fe fc76 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a18:	2100      	movs	r1, #0
 8003a1a:	481b      	ldr	r0, [pc, #108]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a1c:	f011 f82f 	bl	8014a7e <HAL_UARTEx_SetTxFifoThreshold>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003a26:	f7fe fc6d 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	4816      	ldr	r0, [pc, #88]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a2e:	f011 f864 	bl	8014afa <HAL_UARTEx_SetRxFifoThreshold>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003a38:	f7fe fc64 	bl	8002304 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003a3c:	4812      	ldr	r0, [pc, #72]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a3e:	f010 ffe5 	bl	8014a0c <HAL_UARTEx_DisableFifoMode>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003a48:	f7fe fc5c 	bl	8002304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003a4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a52:	f011 f852 	bl	8014afa <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8003a56:	480c      	ldr	r0, [pc, #48]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a58:	f010 ff9d 	bl	8014996 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003a5c:	480a      	ldr	r0, [pc, #40]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a5e:	f010 ff67 	bl	8014930 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a70:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <MX_USART1_UART_Init+0xc8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003a80:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	24001dbc 	.word	0x24001dbc
 8003a8c:	40011000 	.word	0x40011000

08003a90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b0ba      	sub	sp, #232	; 0xe8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003aa8:	f107 0310 	add.w	r3, r7, #16
 8003aac:	22c0      	movs	r2, #192	; 0xc0
 8003aae:	2100      	movs	r1, #0
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f014 fb0b 	bl	80180cc <memset>
  if(uartHandle->Instance==USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a41      	ldr	r2, [pc, #260]	; (8003bc0 <HAL_UART_MspInit+0x130>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d17b      	bne.n	8003bb8 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ac0:	f04f 0201 	mov.w	r2, #1
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003acc:	2318      	movs	r3, #24
 8003ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ad2:	f107 0310 	add.w	r3, r7, #16
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f009 f8ba 	bl	800cc50 <HAL_RCCEx_PeriphCLKConfig>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003ae2:	f7fe fc0f 	bl	8002304 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aec:	4a35      	ldr	r2, [pc, #212]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003aee:	f043 0310 	orr.w	r3, r3, #16
 8003af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b0a:	4a2e      	ldr	r2, [pc, #184]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b14:	4b2b      	ldr	r3, [pc, #172]	; (8003bc4 <HAL_UART_MspInit+0x134>)
 8003b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b46:	4619      	mov	r1, r3
 8003b48:	481f      	ldr	r0, [pc, #124]	; (8003bc8 <HAL_UART_MspInit+0x138>)
 8003b4a:	f005 fa9d 	bl	8009088 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003b4e:	4b1f      	ldr	r3, [pc, #124]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b50:	4a1f      	ldr	r2, [pc, #124]	; (8003bd0 <HAL_UART_MspInit+0x140>)
 8003b52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b56:	222a      	movs	r2, #42	; 0x2a
 8003b58:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b5a:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b66:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b74:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b7a:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b8c:	480f      	ldr	r0, [pc, #60]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003b8e:	f002 fc25 	bl	80063dc <HAL_DMA_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003b98:	f7fe fbb4 	bl	8002304 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003ba0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_UART_MspInit+0x13c>)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2105      	movs	r1, #5
 8003bac:	2025      	movs	r0, #37	; 0x25
 8003bae:	f001 ffe7 	bl	8005b80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bb2:	2025      	movs	r0, #37	; 0x25
 8003bb4:	f001 fffe 	bl	8005bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003bb8:	bf00      	nop
 8003bba:	37e8      	adds	r7, #232	; 0xe8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58020000 	.word	0x58020000
 8003bcc:	24001e50 	.word	0x24001e50
 8003bd0:	40020040 	.word	0x40020040

08003bd4 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003bde:	4bc2      	ldr	r3, [pc, #776]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003be4:	4bc0      	ldr	r3, [pc, #768]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003bea:	4bbf      	ldr	r3, [pc, #764]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003bec:	2201      	movs	r2, #1
 8003bee:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003bf0:	4bbd      	ldr	r3, [pc, #756]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003bf6:	4bbc      	ldr	r3, [pc, #752]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003bf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8003bfc:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003bfe:	4bba      	ldr	r3, [pc, #744]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003c04:	4bb8      	ldr	r3, [pc, #736]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003c0a:	4bb7      	ldr	r3, [pc, #732]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003c10:	4bb5      	ldr	r3, [pc, #724]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003c16:	4bb4      	ldr	r3, [pc, #720]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c1c:	4bb2      	ldr	r3, [pc, #712]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c22:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003c24:	4bb0      	ldr	r3, [pc, #704]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003c2a:	4baf      	ldr	r3, [pc, #700]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003c30:	4bad      	ldr	r3, [pc, #692]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003c36:	4bac      	ldr	r3, [pc, #688]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c38:	2201      	movs	r2, #1
 8003c3a:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003c3c:	4baa      	ldr	r3, [pc, #680]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c42:	4ba9      	ldr	r3, [pc, #676]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c44:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c48:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003c4a:	4ba7      	ldr	r3, [pc, #668]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003c50:	4ba5      	ldr	r3, [pc, #660]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c52:	2203      	movs	r2, #3
 8003c54:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003c56:	4ba4      	ldr	r3, [pc, #656]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003c5c:	4ba2      	ldr	r3, [pc, #648]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003c64:	4ba0      	ldr	r3, [pc, #640]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c6a:	4b9f      	ldr	r3, [pc, #636]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c70:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003c72:	4b9d      	ldr	r3, [pc, #628]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003c78:	4b9b      	ldr	r3, [pc, #620]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003c80:	4b99      	ldr	r3, [pc, #612]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003c88:	4b97      	ldr	r3, [pc, #604]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003c90:	4b95      	ldr	r3, [pc, #596]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003c96:	4b94      	ldr	r3, [pc, #592]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003c98:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c9c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003c9e:	4b92      	ldr	r3, [pc, #584]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003ca4:	4b90      	ldr	r3, [pc, #576]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003cac:	4b8e      	ldr	r3, [pc, #568]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003cb4:	4b8c      	ldr	r3, [pc, #560]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cc2:	4b89      	ldr	r3, [pc, #548]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cc8:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003cd0:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cd2:	2206      	movs	r2, #6
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003cd8:	4b83      	ldr	r3, [pc, #524]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003ce0:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003ce8:	4b7f      	ldr	r3, [pc, #508]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003cf0:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cf2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cf6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003d02:	4b79      	ldr	r3, [pc, #484]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003d0a:	4b77      	ldr	r3, [pc, #476]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003d12:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003d1a:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003d22:	4b71      	ldr	r3, [pc, #452]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d24:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003d2c:	4b6e      	ldr	r3, [pc, #440]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003d34:	4b6c      	ldr	r3, [pc, #432]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d36:	2208      	movs	r2, #8
 8003d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003d3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003d4c:	4b66      	ldr	r3, [pc, #408]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003d54:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d56:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003d5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003d5e:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d60:	f640 3283 	movw	r2, #2947	; 0xb83
 8003d64:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003d68:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d6a:	2209      	movs	r2, #9
 8003d6c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003d70:	4b5d      	ldr	r3, [pc, #372]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003d78:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003d88:	4b57      	ldr	r3, [pc, #348]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d8a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003d92:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003da2:	4b51      	ldr	r3, [pc, #324]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003daa:	4b4f      	ldr	r3, [pc, #316]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003db2:	4b4d      	ldr	r3, [pc, #308]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003dba:	4b4b      	ldr	r3, [pc, #300]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dbc:	f640 7245 	movw	r2, #3909	; 0xf45
 8003dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dc6:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003dca:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003dce:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dd0:	220b      	movs	r2, #11
 8003dd2:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003dd6:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003dde:	4b42      	ldr	r3, [pc, #264]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003de6:	4b40      	ldr	r3, [pc, #256]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003df0:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003df4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003df8:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003dfa:	f640 6276 	movw	r2, #3702	; 0xe76
 8003dfe:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e04:	220c      	movs	r2, #12
 8003e06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003e0a:	4b37      	ldr	r3, [pc, #220]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003e12:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e24:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003e28:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003e34:	4b2c      	ldr	r3, [pc, #176]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e36:	220d      	movs	r2, #13
 8003e38:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003e3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003e44:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003e4c:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003e54:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e56:	f640 7238 	movw	r2, #3896	; 0xf38
 8003e5a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e60:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003e64:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003e68:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e6a:	220e      	movs	r2, #14
 8003e6c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003e70:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e8a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003e8e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003e92:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e94:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003e98:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ebe:	f241 0264 	movw	r2, #4196	; 0x1064
 8003ec2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ed0:	2210      	movs	r2, #16
 8003ed2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003ede:	4b02      	ldr	r3, [pc, #8]	; (8003ee8 <voltage_monitor_init+0x314>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003ee6:	e001      	b.n	8003eec <voltage_monitor_init+0x318>
 8003ee8:	24001ec8 	.word	0x24001ec8
	rail_monitor[RAIL_n800v].data = 0;
 8003eec:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <voltage_monitor_init+0x378>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003ef4:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <voltage_monitor_init+0x378>)
 8003ef6:	f640 5208 	movw	r2, #3336	; 0xd08
 8003efa:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f00:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003f04:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f0a:	2211      	movs	r2, #17
 8003f0c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f28:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f2e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <voltage_monitor_init+0x378>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	71fb      	strb	r3, [r7, #7]

	return status;
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	24001ec8 	.word	0x24001ec8

08003f50 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	460a      	mov	r2, r1
 8003f5a:	71fb      	strb	r3, [r7, #7]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003f64:	79fa      	ldrb	r2, [r7, #7]
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <set_rail_monitor_enable+0x3c>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	440b      	add	r3, r1
 8003f72:	3302      	adds	r3, #2
 8003f74:	79ba      	ldrb	r2, [r7, #6]
 8003f76:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	24001ec8 	.word	0x24001ec8

08003f90 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <get_rail_monitor+0x10>)
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	24001ec8 	.word	0x24001ec8

08003fa4 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fcec 	bl	8002990 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003fb8:	f107 0310 	add.w	r3, r7, #16
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fe fd17 	bl	80029f0 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe fd64 	bl	8002a94 <sample_hk_adc3>
 8003fcc:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 8003fce:	4b25      	ldr	r3, [pc, #148]	; (8004064 <set_rail_monitor+0xc0>)
 8003fd0:	809a      	strh	r2, [r3, #4]
 8003fd2:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <set_rail_monitor+0xc0>)
 8003fd6:	81da      	strh	r2, [r3, #14]
 8003fd8:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <set_rail_monitor+0xc0>)
 8003fdc:	831a      	strh	r2, [r3, #24]
 8003fde:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <set_rail_monitor+0xc0>)
 8003fe2:	845a      	strh	r2, [r3, #34]	; 0x22
 8003fe4:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <set_rail_monitor+0xc0>)
 8003fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003fea:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <set_rail_monitor+0xc0>)
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff0:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <set_rail_monitor+0xc0>)
 8003ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8003ff8:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <set_rail_monitor+0xc0>)
 8003ffc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004000:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8004002:	4b18      	ldr	r3, [pc, #96]	; (8004064 <set_rail_monitor+0xc0>)
 8004004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004008:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <set_rail_monitor+0xc0>)
 800400c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004010:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <set_rail_monitor+0xc0>)
 8004014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8004018:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <set_rail_monitor+0xc0>)
 800401c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8004020:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8004022:	4b10      	ldr	r3, [pc, #64]	; (8004064 <set_rail_monitor+0xc0>)
 8004024:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8004028:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <set_rail_monitor+0xc0>)
 800402c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8004030:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <set_rail_monitor+0xc0>)
 8004034:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8004038:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <set_rail_monitor+0xc0>)
 800403c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8004040:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <set_rail_monitor+0xc0>)
 8004044:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8004048:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <set_rail_monitor+0xc0>)
 800404c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8004056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800405a:	4618      	mov	r0, r3
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	24001ec8 	.word	0x24001ec8

08004068 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8004076:	89fb      	ldrh	r3, [r7, #14]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	db05      	blt.n	800408a <in_range+0x22>
 800407e:	89fb      	ldrh	r3, [r7, #14]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	dc01      	bgt.n	800408a <in_range+0x22>
		return 1;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <in_range+0x24>
	}
	return 0;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800409c:	f7ff f982 	bl	80033a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c6:	f013 ffcf 	bl	8018068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7fd ff41 	bl	8001f50 <main>
  bx  lr
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80040d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040d8:	240000fc 	.word	0x240000fc
  ldr r2, =_sidata
 80040dc:	08018f98 	.word	0x08018f98
  ldr r2, =_sbss
 80040e0:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80040e4:	240068e0 	.word	0x240068e0

080040e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC3_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f2:	2003      	movs	r0, #3
 80040f4:	f001 fd39 	bl	8005b6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040f8:	f008 fb92 	bl	800c820 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_Init+0x68>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	4913      	ldr	r1, [pc, #76]	; (8004158 <HAL_Init+0x6c>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_Init+0x68>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_Init+0x6c>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <HAL_Init+0x70>)
 800412e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <HAL_Init+0x74>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004136:	2005      	movs	r0, #5
 8004138:	f7fe ff1e 	bl	8002f78 <HAL_InitTick>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e002      	b.n	800414c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004146:	f7fe fef9 	bl	8002f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	08018ee4 	.word	0x08018ee4
 800415c:	24000088 	.word	0x24000088
 8004160:	24000084 	.word	0x24000084

08004164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_IncTick+0x20>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_IncTick+0x24>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4413      	add	r3, r2
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_IncTick+0x24>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	24000090 	.word	0x24000090
 8004188:	24001f7c 	.word	0x24001f7c

0800418c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  return uwTick;
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_GetTick+0x14>)
 8004192:	681b      	ldr	r3, [r3, #0]
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	24001f7c 	.word	0x24001f7c

080041a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_GetREVID+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	0c1b      	lsrs	r3, r3, #16
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	5c001000 	.word	0x5c001000

080041bc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80041c6:	4b07      	ldr	r3, [pc, #28]	; (80041e4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	4904      	ldr	r1, [pc, #16]	; (80041e4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	58000400 	.word	0x58000400

080041e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3360      	adds	r3, #96	; 0x60
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	430b      	orrs	r3, r1
 800427e:	431a      	orrs	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004284:	bf00      	nop
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 031f 	and.w	r3, r3, #31
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fa01 f303 	lsl.w	r3, r1, r3
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	611a      	str	r2, [r3, #16]
}
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3360      	adds	r3, #96	; 0x60
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	601a      	str	r2, [r3, #0]
  }
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800431e:	b480      	push	{r7}
 8004320:	b087      	sub	sp, #28
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3330      	adds	r3, #48	; 0x30
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	4413      	add	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	211f      	movs	r1, #31
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	401a      	ands	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	f003 011f 	and.w	r1, r3, #31
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f023 0203 	bic.w	r2, r3, #3
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3314      	adds	r3, #20
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	0e5b      	lsrs	r3, r3, #25
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0d1b      	lsrs	r3, r3, #20
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2107      	movs	r1, #7
 80043ca:	fa01 f303 	lsl.w	r3, r1, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	401a      	ands	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0d1b      	lsrs	r3, r3, #20
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0318 	and.w	r3, r3, #24
 8004416:	4908      	ldr	r1, [pc, #32]	; (8004438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004418:	40d9      	lsrs	r1, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	400b      	ands	r3, r1
 800441e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	000fffff 	.word	0x000fffff

0800443c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 031f 	and.w	r3, r3, #31
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	4b04      	ldr	r3, [pc, #16]	; (8004478 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6093      	str	r3, [r2, #8]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	5fffffc0 	.word	0x5fffffc0

0800447c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800448c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004490:	d101      	bne.n	8004496 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	6fffffc0 	.word	0x6fffffc0

080044cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e0:	d101      	bne.n	80044e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <LL_ADC_Enable+0x24>)
 8004502:	4013      	ands	r3, r2
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	7fffffc0 	.word	0x7fffffc0

0800451c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <LL_ADC_Disable+0x24>)
 800452a:	4013      	ands	r3, r2
 800452c:	f043 0202 	orr.w	r2, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	7fffffc0 	.word	0x7fffffc0

08004544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <LL_ADC_IsEnabled+0x18>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <LL_ADC_IsEnabled+0x1a>
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d101      	bne.n	8004582 <LL_ADC_IsDisableOngoing+0x18>
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <LL_ADC_IsDisableOngoing+0x1a>
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <LL_ADC_REG_StartConversion+0x24>)
 800459e:	4013      	ands	r3, r2
 80045a0:	f043 0204 	orr.w	r2, r3, #4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	7fffffc0 	.word	0x7fffffc0

080045b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d101      	bne.n	80045d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d101      	bne.n	80045f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e18f      	b.n	800493e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fc f98d 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff19 	bl	800447c <LL_ADC_IsDeepPowerDownEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d004      	beq.n	800465a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff feff 	bl	8004458 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ff34 	bl	80044cc <LL_ADC_IsInternalRegulatorEnabled>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d114      	bne.n	8004694 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff18 	bl	80044a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004674:	4b87      	ldr	r3, [pc, #540]	; (8004894 <HAL_ADC_Init+0x290>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	4a87      	ldr	r2, [pc, #540]	; (8004898 <HAL_ADC_Init+0x294>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004686:	e002      	b.n	800468e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3b01      	subs	r3, #1
 800468c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f9      	bne.n	8004688 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff17 	bl	80044cc <LL_ADC_IsInternalRegulatorEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10d      	bne.n	80046c0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a8:	f043 0210 	orr.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f043 0201 	orr.w	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff ff77 	bl	80045b8 <LL_ADC_REG_IsConversionOngoing>
 80046ca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 8129 	bne.w	800492c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f040 8125 	bne.w	800492c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80046ea:	f043 0202 	orr.w	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff ff24 	bl	8004544 <LL_ADC_IsEnabled>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d136      	bne.n	8004770 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_ADC_Init+0x298>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_ADC_Init+0x112>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a63      	ldr	r2, [pc, #396]	; (80048a0 <HAL_ADC_Init+0x29c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10e      	bne.n	8004734 <HAL_ADC_Init+0x130>
 8004716:	4861      	ldr	r0, [pc, #388]	; (800489c <HAL_ADC_Init+0x298>)
 8004718:	f7ff ff14 	bl	8004544 <LL_ADC_IsEnabled>
 800471c:	4604      	mov	r4, r0
 800471e:	4860      	ldr	r0, [pc, #384]	; (80048a0 <HAL_ADC_Init+0x29c>)
 8004720:	f7ff ff10 	bl	8004544 <LL_ADC_IsEnabled>
 8004724:	4603      	mov	r3, r0
 8004726:	4323      	orrs	r3, r4
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e008      	b.n	8004746 <HAL_ADC_Init+0x142>
 8004734:	485b      	ldr	r0, [pc, #364]	; (80048a4 <HAL_ADC_Init+0x2a0>)
 8004736:	f7ff ff05 	bl	8004544 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a53      	ldr	r2, [pc, #332]	; (800489c <HAL_ADC_Init+0x298>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d004      	beq.n	800475e <HAL_ADC_Init+0x15a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <HAL_ADC_Init+0x29c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_ADC_Init+0x15e>
 800475e:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_ADC_Init+0x2a4>)
 8004760:	e000      	b.n	8004764 <HAL_ADC_Init+0x160>
 8004762:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_ADC_Init+0x2a8>)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	4610      	mov	r0, r2
 800476c:	f7ff fd3c 	bl	80041e8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004770:	f7ff fd18 	bl	80041a4 <HAL_GetREVID>
 8004774:	4603      	mov	r3, r0
 8004776:	f241 0203 	movw	r2, #4099	; 0x1003
 800477a:	4293      	cmp	r3, r2
 800477c:	d914      	bls.n	80047a8 <HAL_ADC_Init+0x1a4>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d110      	bne.n	80047a8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	7d5b      	ldrb	r3, [r3, #21]
 800478a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004790:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004796:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7f1b      	ldrb	r3, [r3, #28]
 800479c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800479e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047a0:	f043 030c 	orr.w	r3, r3, #12
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	e00d      	b.n	80047c4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7d5b      	ldrb	r3, [r3, #21]
 80047ac:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047b2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80047b8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7f1b      	ldrb	r3, [r3, #28]
 80047be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80047c0:	4313      	orrs	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	7f1b      	ldrb	r3, [r3, #28]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	045b      	lsls	r3, r3, #17
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_ADC_Init+0x2ac>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	430b      	orrs	r3, r1
 8004808:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fed2 	bl	80045b8 <LL_ADC_REG_IsConversionOngoing>
 8004814:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fedf 	bl	80045de <LL_ADC_INJ_IsConversionOngoing>
 8004820:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d15f      	bne.n	80048e8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d15c      	bne.n	80048e8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	7d1b      	ldrb	r3, [r3, #20]
 8004832:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_ADC_Init+0x2b0>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	69b9      	ldr	r1, [r7, #24]
 800484c:	430b      	orrs	r3, r1
 800484e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004856:	2b01      	cmp	r3, #1
 8004858:	d130      	bne.n	80048bc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_ADC_Init+0x2b4>)
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800486e:	3a01      	subs	r2, #1
 8004870:	0411      	lsls	r1, r2, #16
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800487c:	4311      	orrs	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004882:	430a      	orrs	r2, r1
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	611a      	str	r2, [r3, #16]
 8004890:	e01c      	b.n	80048cc <HAL_ADC_Init+0x2c8>
 8004892:	bf00      	nop
 8004894:	24000084 	.word	0x24000084
 8004898:	053e2d63 	.word	0x053e2d63
 800489c:	40022000 	.word	0x40022000
 80048a0:	40022100 	.word	0x40022100
 80048a4:	58026000 	.word	0x58026000
 80048a8:	40022300 	.word	0x40022300
 80048ac:	58026300 	.word	0x58026300
 80048b0:	fff0c003 	.word	0xfff0c003
 80048b4:	ffffbffc 	.word	0xffffbffc
 80048b8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fdec 	bl	80054c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d10c      	bne.n	800490a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f023 010f 	bic.w	r1, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	1e5a      	subs	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
 8004908:	e007      	b.n	800491a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 020f 	bic.w	r2, r2, #15
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
 800492a:	e007      	b.n	800493c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004930:	f043 0210 	orr.w	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	; 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a55      	ldr	r2, [pc, #340]	; (8004ab0 <HAL_ADC_Start_DMA+0x168>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_ADC_Start_DMA+0x20>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_ADC_Start_DMA+0x16c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d101      	bne.n	800496c <HAL_ADC_Start_DMA+0x24>
 8004968:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_ADC_Start_DMA+0x170>)
 800496a:	e000      	b.n	800496e <HAL_ADC_Start_DMA+0x26>
 800496c:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_ADC_Start_DMA+0x174>)
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fd64 	bl	800443c <LL_ADC_GetMultimode>
 8004974:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fe1c 	bl	80045b8 <LL_ADC_REG_IsConversionOngoing>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 808c 	bne.w	8004aa0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800498e:	2b01      	cmp	r3, #1
 8004990:	d101      	bne.n	8004996 <HAL_ADC_Start_DMA+0x4e>
 8004992:	2302      	movs	r3, #2
 8004994:	e087      	b.n	8004aa6 <HAL_ADC_Start_DMA+0x15e>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d002      	beq.n	80049b0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	2b09      	cmp	r3, #9
 80049ae:	d170      	bne.n	8004a92 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fc07 	bl	80051c4 <ADC_Enable>
 80049b6:	4603      	mov	r3, r0
 80049b8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d163      	bne.n	8004a88 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c4:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <HAL_ADC_Start_DMA+0x178>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <HAL_ADC_Start_DMA+0x16c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d002      	beq.n	80049e0 <HAL_ADC_Start_DMA+0x98>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	e000      	b.n	80049e2 <HAL_ADC_Start_DMA+0x9a>
 80049e0:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <HAL_ADC_Start_DMA+0x168>)
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d002      	beq.n	80049f0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d006      	beq.n	8004a16 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	f023 0206 	bic.w	r2, r3, #6
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	659a      	str	r2, [r3, #88]	; 0x58
 8004a14:	e002      	b.n	8004a1c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a20:	4a28      	ldr	r2, [pc, #160]	; (8004ac4 <HAL_ADC_Start_DMA+0x17c>)
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <HAL_ADC_Start_DMA+0x180>)
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <HAL_ADC_Start_DMA+0x184>)
 8004a32:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	221c      	movs	r2, #28
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0210 	orr.w	r2, r2, #16
 8004a52:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7ff fc89 	bl	8004376 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3340      	adds	r3, #64	; 0x40
 8004a6e:	4619      	mov	r1, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f002 f80e 	bl	8006a94 <HAL_DMA_Start_IT>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff fd85 	bl	8004590 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a86:	e00d      	b.n	8004aa4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004a90:	e008      	b.n	8004aa4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004a9e:	e001      	b.n	8004aa4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40022000 	.word	0x40022000
 8004ab4:	40022100 	.word	0x40022100
 8004ab8:	40022300 	.word	0x40022300
 8004abc:	58026300 	.word	0x58026300
 8004ac0:	fffff0fe 	.word	0xfffff0fe
 8004ac4:	08005397 	.word	0x08005397
 8004ac8:	0800546f 	.word	0x0800546f
 8004acc:	0800548b 	.word	0x0800548b

08004ad0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b0a1      	sub	sp, #132	; 0x84
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a65      	ldr	r2, [pc, #404]	; (8004cbc <HAL_ADC_ConfigChannel+0x1b0>)
 8004b26:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x2a>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e32e      	b.n	8005194 <HAL_ADC_ConfigChannel+0x688>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fd38 	bl	80045b8 <LL_ADC_REG_IsConversionOngoing>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8313 	bne.w	8005176 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	db2c      	blt.n	8004bb2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d108      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x6a>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0e9b      	lsrs	r3, r3, #26
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2201      	movs	r2, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	e016      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x98>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b86:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	e003      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	69d1      	ldr	r1, [r2, #28]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7ff fbad 	bl	800431e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff fcf5 	bl	80045b8 <LL_ADC_REG_IsConversionOngoing>
 8004bce:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fd02 	bl	80045de <LL_ADC_INJ_IsConversionOngoing>
 8004bda:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f040 80b8 	bne.w	8004d54 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 80b4 	bne.w	8004d54 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f7ff fbcf 	bl	800439c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bfe:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0a:	d10b      	bne.n	8004c24 <HAL_ADC_ConfigChannel+0x118>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	e01d      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x154>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10b      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x13e>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	089b      	lsrs	r3, r3, #2
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	e00a      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x154>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d02c      	beq.n	8004cc4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6919      	ldr	r1, [r3, #16]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c78:	f7ff faea 	bl	8004250 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6919      	ldr	r1, [r3, #16]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	7e5b      	ldrb	r3, [r3, #25]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d102      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x186>
 8004c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c90:	e000      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x188>
 8004c92:	2300      	movs	r3, #0
 8004c94:	461a      	mov	r2, r3
 8004c96:	f7ff fb14 	bl	80042c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6919      	ldr	r1, [r3, #16]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	7e1b      	ldrb	r3, [r3, #24]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d102      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x1a4>
 8004caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cae:	e000      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x1a6>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7ff faec 	bl	8004290 <LL_ADC_SetDataRightShift>
 8004cb8:	e04c      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x248>
 8004cba:	bf00      	nop
 8004cbc:	47ff0000 	.word	0x47ff0000
 8004cc0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	069b      	lsls	r3, r3, #26
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	069b      	lsls	r3, r3, #26
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d107      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d0a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	069b      	lsls	r3, r3, #26
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d107      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d2e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	069b      	lsls	r3, r3, #26
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d107      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fbf3 	bl	8004544 <LL_ADC_IsEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8211 	bne.w	8005188 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7ff fb3e 	bl	80043f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4aa1      	ldr	r2, [pc, #644]	; (8005004 <HAL_ADC_ConfigChannel+0x4f8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	f040 812e 	bne.w	8004fe0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_ADC_ConfigChannel+0x2a0>
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	0e9b      	lsrs	r3, r3, #26
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	2b09      	cmp	r3, #9
 8004da2:	bf94      	ite	ls
 8004da4:	2301      	movls	r3, #1
 8004da6:	2300      	movhi	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e019      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x2d4>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004db4:	fa93 f3a3 	rbit	r3, r3
 8004db8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004dc4:	2320      	movs	r3, #32
 8004dc6:	e003      	b.n	8004dd0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dca:	fab3 f383 	clz	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2b09      	cmp	r3, #9
 8004dd8:	bf94      	ite	ls
 8004dda:	2301      	movls	r3, #1
 8004ddc:	2300      	movhi	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d079      	beq.n	8004ed8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d107      	bne.n	8004e00 <HAL_ADC_ConfigChannel+0x2f4>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	3301      	adds	r3, #1
 8004df8:	069b      	lsls	r3, r3, #26
 8004dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dfe:	e015      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x320>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e08:	fa93 f3a3 	rbit	r3, r3
 8004e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004e18:	2320      	movs	r3, #32
 8004e1a:	e003      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	3301      	adds	r3, #1
 8004e26:	069b      	lsls	r3, r3, #26
 8004e28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_ADC_ConfigChannel+0x340>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	0e9b      	lsrs	r3, r3, #26
 8004e3e:	3301      	adds	r3, #1
 8004e40:	f003 031f 	and.w	r3, r3, #31
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	e017      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x370>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e54:	fa93 f3a3 	rbit	r3, r3
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004e64:	2320      	movs	r3, #32
 8004e66:	e003      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e6a:	fab3 f383 	clz	r3, r3
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	3301      	adds	r3, #1
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2101      	movs	r1, #1
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	ea42 0103 	orr.w	r1, r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x396>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	0e9b      	lsrs	r3, r3, #26
 8004e92:	3301      	adds	r3, #1
 8004e94:	f003 021f 	and.w	r2, r3, #31
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	051b      	lsls	r3, r3, #20
 8004ea0:	e018      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x3c8>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e003      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	f003 021f 	and.w	r2, r3, #31
 8004ecc:	4613      	mov	r3, r2
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	4413      	add	r3, r2
 8004ed2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	e07e      	b.n	8004fd6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x3e8>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	0e9b      	lsrs	r3, r3, #26
 8004eea:	3301      	adds	r3, #1
 8004eec:	069b      	lsls	r3, r3, #26
 8004eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ef2:	e015      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x414>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	e003      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	069b      	lsls	r3, r3, #26
 8004f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x434>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0e9b      	lsrs	r3, r3, #26
 8004f32:	3301      	adds	r3, #1
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	e017      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x464>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	61bb      	str	r3, [r7, #24]
  return result;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	e003      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10d      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x490>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	3301      	adds	r3, #1
 8004f88:	f003 021f 	and.w	r2, r3, #31
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	3b1e      	subs	r3, #30
 8004f94:	051b      	lsls	r3, r3, #20
 8004f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f9a:	e01b      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x4c8>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	fa93 f3a3 	rbit	r3, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
  return result;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	e003      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f003 021f 	and.w	r2, r3, #31
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	3b1e      	subs	r3, #30
 8004fce:	051b      	lsls	r3, r3, #20
 8004fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	6892      	ldr	r2, [r2, #8]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7ff f9de 	bl	800439c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f280 80cf 	bge.w	8005188 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a06      	ldr	r2, [pc, #24]	; (8005008 <HAL_ADC_ConfigChannel+0x4fc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_ADC_ConfigChannel+0x4f2>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a04      	ldr	r2, [pc, #16]	; (800500c <HAL_ADC_ConfigChannel+0x500>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10a      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x508>
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_ADC_ConfigChannel+0x504>)
 8005000:	e009      	b.n	8005016 <HAL_ADC_ConfigChannel+0x50a>
 8005002:	bf00      	nop
 8005004:	47ff0000 	.word	0x47ff0000
 8005008:	40022000 	.word	0x40022000
 800500c:	40022100 	.word	0x40022100
 8005010:	40022300 	.word	0x40022300
 8005014:	4b61      	ldr	r3, [pc, #388]	; (800519c <HAL_ADC_ConfigChannel+0x690>)
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f90c 	bl	8004234 <LL_ADC_GetCommonPathInternalCh>
 800501c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a5f      	ldr	r2, [pc, #380]	; (80051a0 <HAL_ADC_ConfigChannel+0x694>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_ADC_ConfigChannel+0x526>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a5d      	ldr	r2, [pc, #372]	; (80051a4 <HAL_ADC_ConfigChannel+0x698>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10e      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x544>
 8005032:	485b      	ldr	r0, [pc, #364]	; (80051a0 <HAL_ADC_ConfigChannel+0x694>)
 8005034:	f7ff fa86 	bl	8004544 <LL_ADC_IsEnabled>
 8005038:	4604      	mov	r4, r0
 800503a:	485a      	ldr	r0, [pc, #360]	; (80051a4 <HAL_ADC_ConfigChannel+0x698>)
 800503c:	f7ff fa82 	bl	8004544 <LL_ADC_IsEnabled>
 8005040:	4603      	mov	r3, r0
 8005042:	4323      	orrs	r3, r4
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e008      	b.n	8005062 <HAL_ADC_ConfigChannel+0x556>
 8005050:	4855      	ldr	r0, [pc, #340]	; (80051a8 <HAL_ADC_ConfigChannel+0x69c>)
 8005052:	f7ff fa77 	bl	8004544 <LL_ADC_IsEnabled>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf0c      	ite	eq
 800505c:	2301      	moveq	r3, #1
 800505e:	2300      	movne	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d07d      	beq.n	8005162 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a50      	ldr	r2, [pc, #320]	; (80051ac <HAL_ADC_ConfigChannel+0x6a0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d130      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x5c6>
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12b      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a4a      	ldr	r2, [pc, #296]	; (80051a8 <HAL_ADC_ConfigChannel+0x69c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	f040 8081 	bne.w	8005188 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a45      	ldr	r2, [pc, #276]	; (80051a0 <HAL_ADC_ConfigChannel+0x694>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_ADC_ConfigChannel+0x58e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a43      	ldr	r2, [pc, #268]	; (80051a4 <HAL_ADC_ConfigChannel+0x698>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <HAL_ADC_ConfigChannel+0x592>
 800509a:	4a45      	ldr	r2, [pc, #276]	; (80051b0 <HAL_ADC_ConfigChannel+0x6a4>)
 800509c:	e000      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x594>
 800509e:	4a3f      	ldr	r2, [pc, #252]	; (800519c <HAL_ADC_ConfigChannel+0x690>)
 80050a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7ff f8b0 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050ae:	4b41      	ldr	r3, [pc, #260]	; (80051b4 <HAL_ADC_ConfigChannel+0x6a8>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	099b      	lsrs	r3, r3, #6
 80050b4:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <HAL_ADC_ConfigChannel+0x6ac>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	099b      	lsrs	r3, r3, #6
 80050bc:	3301      	adds	r3, #1
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80050c2:	e002      	b.n	80050ca <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f9      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050d0:	e05a      	b.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a39      	ldr	r2, [pc, #228]	; (80051bc <HAL_ADC_ConfigChannel+0x6b0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d11e      	bne.n	800511a <HAL_ADC_ConfigChannel+0x60e>
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d119      	bne.n	800511a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <HAL_ADC_ConfigChannel+0x69c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d14b      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_ADC_ConfigChannel+0x694>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_ADC_ConfigChannel+0x5f8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <HAL_ADC_ConfigChannel+0x698>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d101      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x5fc>
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <HAL_ADC_ConfigChannel+0x6a4>)
 8005106:	e000      	b.n	800510a <HAL_ADC_ConfigChannel+0x5fe>
 8005108:	4a24      	ldr	r2, [pc, #144]	; (800519c <HAL_ADC_ConfigChannel+0x690>)
 800510a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7ff f87b 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005118:	e036      	b.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_ADC_ConfigChannel+0x6b4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d131      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d12c      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_ADC_ConfigChannel+0x69c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d127      	bne.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_ADC_ConfigChannel+0x694>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_ADC_ConfigChannel+0x640>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <HAL_ADC_ConfigChannel+0x698>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d101      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x644>
 800514c:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_ADC_ConfigChannel+0x6a4>)
 800514e:	e000      	b.n	8005152 <HAL_ADC_ConfigChannel+0x646>
 8005150:	4a12      	ldr	r2, [pc, #72]	; (800519c <HAL_ADC_ConfigChannel+0x690>)
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f7ff f857 	bl	800420e <LL_ADC_SetCommonPathInternalCh>
 8005160:	e012      	b.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005174:	e008      	b.n	8005188 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005190:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005194:	4618      	mov	r0, r3
 8005196:	3784      	adds	r7, #132	; 0x84
 8005198:	46bd      	mov	sp, r7
 800519a:	bd90      	pop	{r4, r7, pc}
 800519c:	58026300 	.word	0x58026300
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40022100 	.word	0x40022100
 80051a8:	58026000 	.word	0x58026000
 80051ac:	cb840000 	.word	0xcb840000
 80051b0:	40022300 	.word	0x40022300
 80051b4:	24000084 	.word	0x24000084
 80051b8:	053e2d63 	.word	0x053e2d63
 80051bc:	c7520000 	.word	0xc7520000
 80051c0:	cfb80000 	.word	0xcfb80000

080051c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff f9b7 	bl	8004544 <LL_ADC_IsEnabled>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d16e      	bne.n	80052ba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689a      	ldr	r2, [r3, #8]
 80051e2:	4b38      	ldr	r3, [pc, #224]	; (80052c4 <ADC_Enable+0x100>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e05a      	b.n	80052bc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff f972 	bl	80044f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005210:	f7fe ffbc 	bl	800418c <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <ADC_Enable+0x104>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d004      	beq.n	800522a <ADC_Enable+0x66>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <ADC_Enable+0x108>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <ADC_Enable+0x6a>
 800522a:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <ADC_Enable+0x10c>)
 800522c:	e000      	b.n	8005230 <ADC_Enable+0x6c>
 800522e:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <ADC_Enable+0x110>)
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f903 	bl	800443c <LL_ADC_GetMultimode>
 8005236:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <ADC_Enable+0x108>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d002      	beq.n	8005248 <ADC_Enable+0x84>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	e000      	b.n	800524a <ADC_Enable+0x86>
 8005248:	4b1f      	ldr	r3, [pc, #124]	; (80052c8 <ADC_Enable+0x104>)
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	4293      	cmp	r3, r2
 8005250:	d02c      	beq.n	80052ac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d130      	bne.n	80052ba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005258:	e028      	b.n	80052ac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff f970 	bl	8004544 <LL_ADC_IsEnabled>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff f940 	bl	80044f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005274:	f7fe ff8a 	bl	800418c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d914      	bls.n	80052ac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	d00d      	beq.n	80052ac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005294:	f043 0210 	orr.w	r2, r3, #16
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	f043 0201 	orr.w	r2, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e007      	b.n	80052bc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d1cf      	bne.n	800525a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	8000003f 	.word	0x8000003f
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40022100 	.word	0x40022100
 80052d0:	40022300 	.word	0x40022300
 80052d4:	58026300 	.word	0x58026300

080052d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff f940 	bl	800456a <LL_ADC_IsDisableOngoing>
 80052ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff f927 	bl	8004544 <LL_ADC_IsEnabled>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d047      	beq.n	800538c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d144      	bne.n	800538c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 030d 	and.w	r3, r3, #13
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10c      	bne.n	800532a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff f901 	bl	800451c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2203      	movs	r2, #3
 8005320:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005322:	f7fe ff33 	bl	800418c <HAL_GetTick>
 8005326:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005328:	e029      	b.n	800537e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f043 0210 	orr.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f043 0201 	orr.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e023      	b.n	800538e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005346:	f7fe ff21 	bl	800418c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d914      	bls.n	800537e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00d      	beq.n	800537e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e007      	b.n	800538e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1dc      	bne.n	8005346 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d14b      	bne.n	8005448 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d021      	beq.n	800540e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe ff92 	bl	80042f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d032      	beq.n	8005440 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d12b      	bne.n	8005440 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11f      	bne.n	8005440 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005404:	f043 0201 	orr.w	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
 800540c:	e018      	b.n	8005440 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d111      	bne.n	8005440 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d105      	bne.n	8005440 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	f043 0201 	orr.w	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fb45 	bl	8004ad0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005446:	e00e      	b.n	8005466 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff fb4f 	bl	8004af8 <HAL_ADC_ErrorCallback>
}
 800545a:	e004      	b.n	8005466 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	4798      	blx	r3
}
 8005466:	bf00      	nop
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f7ff fb31 	bl	8004ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a8:	f043 0204 	orr.w	r2, r3, #4
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f7ff fb21 	bl	8004af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7a      	ldr	r2, [pc, #488]	; (80056b8 <ADC_ConfigureBoostMode+0x1f8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <ADC_ConfigureBoostMode+0x1c>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a79      	ldr	r2, [pc, #484]	; (80056bc <ADC_ConfigureBoostMode+0x1fc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <ADC_ConfigureBoostMode+0x30>
 80054dc:	4b78      	ldr	r3, [pc, #480]	; (80056c0 <ADC_ConfigureBoostMode+0x200>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	e008      	b.n	8005502 <ADC_ConfigureBoostMode+0x42>
 80054f0:	4b74      	ldr	r3, [pc, #464]	; (80056c4 <ADC_ConfigureBoostMode+0x204>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01c      	beq.n	8005540 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005506:	f007 fb05 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800550a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005514:	d010      	beq.n	8005538 <ADC_ConfigureBoostMode+0x78>
 8005516:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800551a:	d873      	bhi.n	8005604 <ADC_ConfigureBoostMode+0x144>
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d002      	beq.n	8005528 <ADC_ConfigureBoostMode+0x68>
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005526:	d16d      	bne.n	8005604 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	60fb      	str	r3, [r7, #12]
        break;
 8005536:	e068      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	60fb      	str	r3, [r7, #12]
        break;
 800553e:	e064      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005540:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005544:	f04f 0100 	mov.w	r1, #0
 8005548:	f008 fd8c 	bl	800e064 <HAL_RCCEx_GetPeriphCLKFreq>
 800554c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005556:	d051      	beq.n	80055fc <ADC_ConfigureBoostMode+0x13c>
 8005558:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800555c:	d854      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 800555e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005562:	d047      	beq.n	80055f4 <ADC_ConfigureBoostMode+0x134>
 8005564:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005568:	d84e      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 800556a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800556e:	d03d      	beq.n	80055ec <ADC_ConfigureBoostMode+0x12c>
 8005570:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005574:	d848      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 8005576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557a:	d033      	beq.n	80055e4 <ADC_ConfigureBoostMode+0x124>
 800557c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005580:	d842      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 8005582:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005586:	d029      	beq.n	80055dc <ADC_ConfigureBoostMode+0x11c>
 8005588:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800558c:	d83c      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 800558e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005592:	d01a      	beq.n	80055ca <ADC_ConfigureBoostMode+0x10a>
 8005594:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005598:	d836      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 800559a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800559e:	d014      	beq.n	80055ca <ADC_ConfigureBoostMode+0x10a>
 80055a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055a4:	d830      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055aa:	d00e      	beq.n	80055ca <ADC_ConfigureBoostMode+0x10a>
 80055ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b0:	d82a      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 80055b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055b6:	d008      	beq.n	80055ca <ADC_ConfigureBoostMode+0x10a>
 80055b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80055bc:	d824      	bhi.n	8005608 <ADC_ConfigureBoostMode+0x148>
 80055be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055c2:	d002      	beq.n	80055ca <ADC_ConfigureBoostMode+0x10a>
 80055c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055c8:	d11e      	bne.n	8005608 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	0c9b      	lsrs	r3, r3, #18
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	60fb      	str	r3, [r7, #12]
        break;
 80055da:	e016      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	60fb      	str	r3, [r7, #12]
        break;
 80055e2:	e012      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	60fb      	str	r3, [r7, #12]
        break;
 80055ea:	e00e      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	60fb      	str	r3, [r7, #12]
        break;
 80055f2:	e00a      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	09db      	lsrs	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
        break;
 80055fa:	e006      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	60fb      	str	r3, [r7, #12]
        break;
 8005602:	e002      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005608:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800560a:	f7fe fdcb 	bl	80041a4 <HAL_GetREVID>
 800560e:	4603      	mov	r3, r0
 8005610:	f241 0203 	movw	r2, #4099	; 0x1003
 8005614:	4293      	cmp	r3, r2
 8005616:	d815      	bhi.n	8005644 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <ADC_ConfigureBoostMode+0x208>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d908      	bls.n	8005632 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800562e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005630:	e03e      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005640:	609a      	str	r2, [r3, #8]
}
 8005642:	e035      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4a1f      	ldr	r2, [pc, #124]	; (80056cc <ADC_ConfigureBoostMode+0x20c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d808      	bhi.n	8005664 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005660:	609a      	str	r2, [r3, #8]
}
 8005662:	e025      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a1a      	ldr	r2, [pc, #104]	; (80056d0 <ADC_ConfigureBoostMode+0x210>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d80a      	bhi.n	8005682 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	e016      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <ADC_ConfigureBoostMode+0x214>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d80a      	bhi.n	80056a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	e007      	b.n	80056b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80056ae:	609a      	str	r2, [r3, #8]
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40022000 	.word	0x40022000
 80056bc:	40022100 	.word	0x40022100
 80056c0:	40022300 	.word	0x40022300
 80056c4:	58026300 	.word	0x58026300
 80056c8:	01312d00 	.word	0x01312d00
 80056cc:	005f5e10 	.word	0x005f5e10
 80056d0:	00bebc20 	.word	0x00bebc20
 80056d4:	017d7840 	.word	0x017d7840

080056d8 <LL_ADC_IsEnabled>:
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <LL_ADC_IsEnabled+0x18>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <LL_ADC_IsEnabled+0x1a>
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
	...

08005700 <LL_ADC_StartCalibration>:
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <LL_ADC_StartCalibration+0x38>)
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005720:	430a      	orrs	r2, r1
 8005722:	4313      	orrs	r3, r2
 8005724:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	3ffeffc0 	.word	0x3ffeffc0

0800573c <LL_ADC_IsCalibrationOnGoing>:
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005750:	d101      	bne.n	8005756 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <LL_ADC_REG_IsConversionOngoing>:
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b04      	cmp	r3, #4
 8005776:	d101      	bne.n	800577c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HAL_ADCEx_Calibration_Start+0x1e>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e04c      	b.n	8005844 <HAL_ADCEx_Calibration_Start+0xb8>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fd90 	bl	80052d8 <ADC_Disable>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d135      	bne.n	800582e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	4b21      	ldr	r3, [pc, #132]	; (800584c <HAL_ADCEx_Calibration_Start+0xc0>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68b9      	ldr	r1, [r7, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7ff ff90 	bl	8005700 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057e0:	e014      	b.n	800580c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	3301      	adds	r3, #1
 80057e6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4a19      	ldr	r2, [pc, #100]	; (8005850 <HAL_ADCEx_Calibration_Start+0xc4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d30d      	bcc.n	800580c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f023 0312 	bic.w	r3, r3, #18
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e01b      	b.n	8005844 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff93 	bl	800573c <LL_ADC_IsCalibrationOnGoing>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e2      	bne.n	80057e2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	f023 0303 	bic.w	r3, r3, #3
 8005824:	f043 0201 	orr.w	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
 800582c:	e005      	b.n	800583a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f043 0210 	orr.w	r2, r3, #16
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005842:	7dfb      	ldrb	r3, [r7, #23]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	ffffeefd 	.word	0xffffeefd
 8005850:	25c3f800 	.word	0x25c3f800

08005854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b09f      	sub	sp, #124	; 0x7c
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800586e:	2302      	movs	r3, #2
 8005870:	e0be      	b.n	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800587a:	2300      	movs	r3, #0
 800587c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800587e:	2300      	movs	r3, #0
 8005880:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5c      	ldr	r2, [pc, #368]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d102      	bne.n	8005892 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800588c:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	e001      	b.n	8005896 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10b      	bne.n	80058b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e09d      	b.n	80059f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ff54 	bl	8005764 <LL_ADC_REG_IsConversionOngoing>
 80058bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff ff4e 	bl	8005764 <LL_ADC_REG_IsConversionOngoing>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d17f      	bne.n	80059ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80058ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d17c      	bne.n	80059ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a47      	ldr	r2, [pc, #284]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a46      	ldr	r2, [pc, #280]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80058e8:	4b45      	ldr	r3, [pc, #276]	; (8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80058ea:	e000      	b.n	80058ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80058ee:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d039      	beq.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80058f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	431a      	orrs	r2, r3
 8005906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005908:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a3a      	ldr	r2, [pc, #232]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a38      	ldr	r2, [pc, #224]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10e      	bne.n	800593c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800591e:	4836      	ldr	r0, [pc, #216]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005920:	f7ff feda 	bl	80056d8 <LL_ADC_IsEnabled>
 8005924:	4604      	mov	r4, r0
 8005926:	4835      	ldr	r0, [pc, #212]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005928:	f7ff fed6 	bl	80056d8 <LL_ADC_IsEnabled>
 800592c:	4603      	mov	r3, r0
 800592e:	4323      	orrs	r3, r4
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	e008      	b.n	800594e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800593c:	4832      	ldr	r0, [pc, #200]	; (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800593e:	f7ff fecb 	bl	80056d8 <LL_ADC_IsEnabled>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d047      	beq.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005958:	4013      	ands	r3, r2
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	6892      	ldr	r2, [r2, #8]
 8005962:	430a      	orrs	r2, r1
 8005964:	431a      	orrs	r2, r3
 8005966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005968:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800596a:	e03a      	b.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800596c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1e      	ldr	r2, [pc, #120]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d10e      	bne.n	80059aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800598c:	481a      	ldr	r0, [pc, #104]	; (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800598e:	f7ff fea3 	bl	80056d8 <LL_ADC_IsEnabled>
 8005992:	4604      	mov	r4, r0
 8005994:	4819      	ldr	r0, [pc, #100]	; (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005996:	f7ff fe9f 	bl	80056d8 <LL_ADC_IsEnabled>
 800599a:	4603      	mov	r3, r0
 800599c:	4323      	orrs	r3, r4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	e008      	b.n	80059bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80059aa:	4817      	ldr	r0, [pc, #92]	; (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80059ac:	f7ff fe94 	bl	80056d8 <LL_ADC_IsEnabled>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059cc:	e009      	b.n	80059e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80059e0:	e000      	b.n	80059e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	377c      	adds	r7, #124	; 0x7c
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd90      	pop	{r4, r7, pc}
 80059f8:	40022000 	.word	0x40022000
 80059fc:	40022100 	.word	0x40022100
 8005a00:	40022300 	.word	0x40022300
 8005a04:	58026300 	.word	0x58026300
 8005a08:	58026000 	.word	0x58026000
 8005a0c:	fffff0e0 	.word	0xfffff0e0

08005a10 <__NVIC_SetPriorityGrouping>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <__NVIC_SetPriorityGrouping+0x40>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a38:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <__NVIC_SetPriorityGrouping+0x44>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a3e:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <__NVIC_SetPriorityGrouping+0x40>)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	60d3      	str	r3, [r2, #12]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000ed00 	.word	0xe000ed00
 8005a54:	05fa0000 	.word	0x05fa0000

08005a58 <__NVIC_GetPriorityGrouping>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	; (8005a70 <__NVIC_GetPriorityGrouping+0x18>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0a1b      	lsrs	r3, r3, #8
 8005a62:	f003 0307 	and.w	r3, r3, #7
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000ed00 	.word	0xe000ed00

08005a74 <__NVIC_EnableIRQ>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	db0b      	blt.n	8005a9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	f003 021f 	and.w	r2, r3, #31
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <__NVIC_EnableIRQ+0x38>)
 8005a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2001      	movs	r0, #1
 8005a96:	fa00 f202 	lsl.w	r2, r0, r2
 8005a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ff4c 	bl	8005a10 <__NVIC_SetPriorityGrouping>
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	4603      	mov	r3, r0
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
 8005b8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b8e:	f7ff ff63 	bl	8005a58 <__NVIC_GetPriorityGrouping>
 8005b92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	6978      	ldr	r0, [r7, #20]
 8005b9a:	f7ff ffb3 	bl	8005b04 <NVIC_EncodePriority>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff82 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bac:	bf00      	nop
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff ff56 	bl	8005a74 <__NVIC_EnableIRQ>
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e014      	b.n	8005c0c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	791b      	ldrb	r3, [r3, #4]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fa fff6 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e046      	b.n	8005cb6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	795b      	ldrb	r3, [r3, #5]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_DAC_Start+0x20>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e040      	b.n	8005cb6 <HAL_DAC_Start+0xa2>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6819      	ldr	r1, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f003 0310 	and.w	r3, r3, #16
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d11d      	bne.n	8005ca8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0201 	orr.w	r2, r2, #1
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	e014      	b.n	8005ca8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2102      	movs	r1, #2
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0202 	orr.w	r2, r2, #2
 8005ca6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0a2      	b.n	8005e22 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	795b      	ldrb	r3, [r3, #5]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_DAC_Start_DMA+0x24>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e09c      	b.n	8005e22 <HAL_DAC_Start_DMA+0x15e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d129      	bne.n	8005d4e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <HAL_DAC_Start_DMA+0x168>)
 8005d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_DAC_Start_DMA+0x16c>)
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a49      	ldr	r2, [pc, #292]	; (8005e34 <HAL_DAC_Start_DMA+0x170>)
 8005d10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d20:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <HAL_DAC_Start_DMA+0x6c>
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d005      	beq.n	8005d3a <HAL_DAC_Start_DMA+0x76>
 8005d2e:	e009      	b.n	8005d44 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	613b      	str	r3, [r7, #16]
        break;
 8005d38:	e033      	b.n	8005da2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	613b      	str	r3, [r7, #16]
        break;
 8005d42:	e02e      	b.n	8005da2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3310      	adds	r3, #16
 8005d4a:	613b      	str	r3, [r7, #16]
        break;
 8005d4c:	e029      	b.n	8005da2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4a39      	ldr	r2, [pc, #228]	; (8005e38 <HAL_DAC_Start_DMA+0x174>)
 8005d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <HAL_DAC_Start_DMA+0x178>)
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4a37      	ldr	r2, [pc, #220]	; (8005e40 <HAL_DAC_Start_DMA+0x17c>)
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d74:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_DAC_Start_DMA+0xc0>
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d005      	beq.n	8005d8e <HAL_DAC_Start_DMA+0xca>
 8005d82:	e009      	b.n	8005d98 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	613b      	str	r3, [r7, #16]
        break;
 8005d8c:	e009      	b.n	8005da2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3318      	adds	r3, #24
 8005d94:	613b      	str	r3, [r7, #16]
        break;
 8005d96:	e004      	b.n	8005da2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	331c      	adds	r3, #28
 8005d9e:	613b      	str	r3, [r7, #16]
        break;
 8005da0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d111      	bne.n	8005dcc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6898      	ldr	r0, [r3, #8]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	f000 fe67 	bl	8006a94 <HAL_DMA_Start_IT>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	75fb      	strb	r3, [r7, #23]
 8005dca:	e010      	b.n	8005dee <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005dda:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	68d8      	ldr	r0, [r3, #12]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	f000 fe55 	bl	8006a94 <HAL_DMA_Start_IT>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2201      	movs	r2, #1
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e005      	b.n	8005e20 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f043 0204 	orr.w	r2, r3, #4
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3718      	adds	r7, #24
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	080062b5 	.word	0x080062b5
 8005e30:	080062d7 	.word	0x080062d7
 8005e34:	080062f3 	.word	0x080062f3
 8005e38:	08006371 	.word	0x08006371
 8005e3c:	08006393 	.word	0x08006393
 8005e40:	080063af 	.word	0x080063af

08005e44 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e03e      	b.n	8005ed6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	43da      	mvns	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	400a      	ands	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6819      	ldr	r1, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2201      	movs	r2, #1
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43da      	mvns	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	400a      	ands	r2, r1
 8005e90:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10d      	bne.n	8005eb4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 f863 	bl	8006f68 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	e00c      	b.n	8005ece <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f855 	bl	8006f68 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005ecc:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01d      	beq.n	8005f3c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d018      	beq.n	8005f3c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f34:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f86f 	bl	800601a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01d      	beq.n	8005f82 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d018      	beq.n	8005f82 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2204      	movs	r2, #4
 8005f54:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f043 0202 	orr.w	r2, r3, #2
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9ed 	bl	800635c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f82:	bf00      	nop
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b087      	sub	sp, #28
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	60f8      	str	r0, [r7, #12]
 8005f92:	60b9      	str	r1, [r7, #8]
 8005f94:	607a      	str	r2, [r7, #4]
 8005f96:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e015      	b.n	8005fd2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d105      	bne.n	8005fbe <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3308      	adds	r3, #8
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e004      	b.n	8005fc8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3314      	adds	r3, #20
 8005fc6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <HAL_DAC_ConfigChannel+0x1e>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e12a      	b.n	80062a8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	795b      	ldrb	r3, [r3, #5]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_DAC_ConfigChannel+0x2e>
 800605a:	2302      	movs	r3, #2
 800605c:	e124      	b.n	80062a8 <HAL_DAC_ConfigChannel+0x278>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2202      	movs	r2, #2
 8006068:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d17a      	bne.n	8006168 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006072:	f7fe f88b 	bl	800418c <HAL_GetTick>
 8006076:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d13d      	bne.n	80060fa <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800607e:	e018      	b.n	80060b2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006080:	f7fe f884 	bl	800418c <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d911      	bls.n	80060b2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006094:	4b86      	ldr	r3, [pc, #536]	; (80062b0 <HAL_DAC_ConfigChannel+0x280>)
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f043 0208 	orr.w	r2, r3, #8
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2203      	movs	r2, #3
 80060ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0fa      	b.n	80062a8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b8:	4b7d      	ldr	r3, [pc, #500]	; (80062b0 <HAL_DAC_ConfigChannel+0x280>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1df      	bne.n	8006080 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	6992      	ldr	r2, [r2, #24]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40
 80060ca:	e020      	b.n	800610e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060cc:	f7fe f85e 	bl	800418c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d90f      	bls.n	80060fa <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da0a      	bge.n	80060fa <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	f043 0208 	orr.w	r2, r3, #8
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2203      	movs	r2, #3
 80060f4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0d6      	b.n	80062a8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	2b00      	cmp	r3, #0
 8006102:	dbe3      	blt.n	80060cc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	6992      	ldr	r2, [r2, #24]
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800611e:	fa01 f303 	lsl.w	r3, r1, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	ea02 0103 	and.w	r1, r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	409a      	lsls	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	21ff      	movs	r1, #255	; 0xff
 800614a:	fa01 f303 	lsl.w	r3, r1, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	ea02 0103 	and.w	r1, r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6a1a      	ldr	r2, [r3, #32]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f003 0310 	and.w	r3, r3, #16
 800615e:	409a      	lsls	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d11d      	bne.n	80061ac <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	221f      	movs	r2, #31
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	fa02 f303 	lsl.w	r3, r2, r3
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2207      	movs	r2, #7
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d102      	bne.n	80061d6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
 80061d4:	e00f      	b.n	80061f6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d102      	bne.n	80061e4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80061de:	2301      	movs	r3, #1
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
 80061e2:	e008      	b.n	80061f6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d102      	bne.n	80061f2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80061ec:	2301      	movs	r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24
 80061f0:	e001      	b.n	80061f6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	4313      	orrs	r3, r2
 8006216:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	43da      	mvns	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	400a      	ands	r2, r1
 800623c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f003 0310 	and.w	r3, r3, #16
 800624c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006250:	fa02 f303 	lsl.w	r3, r2, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4013      	ands	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6819      	ldr	r1, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	22c0      	movs	r2, #192	; 0xc0
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	43da      	mvns	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	400a      	ands	r2, r1
 8006296:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80062a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3728      	adds	r7, #40	; 0x28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	20008000 	.word	0x20008000

080062b4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff fe8b 	bl	8005fde <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	711a      	strb	r2, [r3, #4]
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff fe84 	bl	8005ff2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f043 0204 	orr.w	r2, r3, #4
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff fe7a 	bl	8006006 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	711a      	strb	r2, [r3, #4]
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff ffce 	bl	8006320 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	711a      	strb	r2, [r3, #4]
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f7ff ffc7 	bl	8006334 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f043 0204 	orr.w	r2, r3, #4
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7ff ffbd 	bl	8006348 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	711a      	strb	r2, [r3, #4]
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80063e4:	f7fd fed2 	bl	800418c <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e316      	b.n	8006a22 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a66      	ldr	r2, [pc, #408]	; (8006594 <HAL_DMA_Init+0x1b8>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d04a      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_DMA_Init+0x1bc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d045      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a63      	ldr	r2, [pc, #396]	; (800659c <HAL_DMA_Init+0x1c0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d040      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a62      	ldr	r2, [pc, #392]	; (80065a0 <HAL_DMA_Init+0x1c4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d03b      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a60      	ldr	r2, [pc, #384]	; (80065a4 <HAL_DMA_Init+0x1c8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d036      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a5f      	ldr	r2, [pc, #380]	; (80065a8 <HAL_DMA_Init+0x1cc>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d031      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a5d      	ldr	r2, [pc, #372]	; (80065ac <HAL_DMA_Init+0x1d0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d02c      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <HAL_DMA_Init+0x1d4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d027      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a5a      	ldr	r2, [pc, #360]	; (80065b4 <HAL_DMA_Init+0x1d8>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d022      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a59      	ldr	r2, [pc, #356]	; (80065b8 <HAL_DMA_Init+0x1dc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d01d      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a57      	ldr	r2, [pc, #348]	; (80065bc <HAL_DMA_Init+0x1e0>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d018      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a56      	ldr	r2, [pc, #344]	; (80065c0 <HAL_DMA_Init+0x1e4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d013      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a54      	ldr	r2, [pc, #336]	; (80065c4 <HAL_DMA_Init+0x1e8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00e      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a53      	ldr	r2, [pc, #332]	; (80065c8 <HAL_DMA_Init+0x1ec>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d009      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a51      	ldr	r2, [pc, #324]	; (80065cc <HAL_DMA_Init+0x1f0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <HAL_DMA_Init+0xb8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a50      	ldr	r2, [pc, #320]	; (80065d0 <HAL_DMA_Init+0x1f4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d101      	bne.n	8006498 <HAL_DMA_Init+0xbc>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <HAL_DMA_Init+0xbe>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 813b 	beq.w	8006716 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a37      	ldr	r2, [pc, #220]	; (8006594 <HAL_DMA_Init+0x1b8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a36      	ldr	r2, [pc, #216]	; (8006598 <HAL_DMA_Init+0x1bc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a34      	ldr	r2, [pc, #208]	; (800659c <HAL_DMA_Init+0x1c0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a33      	ldr	r2, [pc, #204]	; (80065a0 <HAL_DMA_Init+0x1c4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <HAL_DMA_Init+0x1c8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_DMA_Init+0x1cc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_DMA_Init+0x1d0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_Init+0x174>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2d      	ldr	r2, [pc, #180]	; (80065b0 <HAL_DMA_Init+0x1d4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_Init+0x174>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <HAL_DMA_Init+0x1d8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_Init+0x174>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a2a      	ldr	r2, [pc, #168]	; (80065b8 <HAL_DMA_Init+0x1dc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_Init+0x174>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a28      	ldr	r2, [pc, #160]	; (80065bc <HAL_DMA_Init+0x1e0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_Init+0x174>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <HAL_DMA_Init+0x1e4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_Init+0x174>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a25      	ldr	r2, [pc, #148]	; (80065c4 <HAL_DMA_Init+0x1e8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Init+0x174>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_DMA_Init+0x1ec>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_Init+0x174>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <HAL_DMA_Init+0x1f0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_Init+0x174>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a21      	ldr	r2, [pc, #132]	; (80065d0 <HAL_DMA_Init+0x1f4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <HAL_DMA_Init+0x186>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e007      	b.n	8006572 <HAL_DMA_Init+0x196>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0201 	bic.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006572:	e02f      	b.n	80065d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006574:	f7fd fe0a 	bl	800418c <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b05      	cmp	r3, #5
 8006580:	d928      	bls.n	80065d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2220      	movs	r2, #32
 8006586:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2203      	movs	r2, #3
 800658c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e246      	b.n	8006a22 <HAL_DMA_Init+0x646>
 8006594:	40020010 	.word	0x40020010
 8006598:	40020028 	.word	0x40020028
 800659c:	40020040 	.word	0x40020040
 80065a0:	40020058 	.word	0x40020058
 80065a4:	40020070 	.word	0x40020070
 80065a8:	40020088 	.word	0x40020088
 80065ac:	400200a0 	.word	0x400200a0
 80065b0:	400200b8 	.word	0x400200b8
 80065b4:	40020410 	.word	0x40020410
 80065b8:	40020428 	.word	0x40020428
 80065bc:	40020440 	.word	0x40020440
 80065c0:	40020458 	.word	0x40020458
 80065c4:	40020470 	.word	0x40020470
 80065c8:	40020488 	.word	0x40020488
 80065cc:	400204a0 	.word	0x400204a0
 80065d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1c8      	bne.n	8006574 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4b83      	ldr	r3, [pc, #524]	; (80067fc <HAL_DMA_Init+0x420>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80065fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006606:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006612:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	2b04      	cmp	r3, #4
 8006626:	d107      	bne.n	8006638 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	4313      	orrs	r3, r2
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006638:	4b71      	ldr	r3, [pc, #452]	; (8006800 <HAL_DMA_Init+0x424>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4b71      	ldr	r3, [pc, #452]	; (8006804 <HAL_DMA_Init+0x428>)
 800663e:	4013      	ands	r3, r2
 8006640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006644:	d328      	bcc.n	8006698 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	2b28      	cmp	r3, #40	; 0x28
 800664c:	d903      	bls.n	8006656 <HAL_DMA_Init+0x27a>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b2e      	cmp	r3, #46	; 0x2e
 8006654:	d917      	bls.n	8006686 <HAL_DMA_Init+0x2aa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	2b3e      	cmp	r3, #62	; 0x3e
 800665c:	d903      	bls.n	8006666 <HAL_DMA_Init+0x28a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b42      	cmp	r3, #66	; 0x42
 8006664:	d90f      	bls.n	8006686 <HAL_DMA_Init+0x2aa>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b46      	cmp	r3, #70	; 0x46
 800666c:	d903      	bls.n	8006676 <HAL_DMA_Init+0x29a>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b48      	cmp	r3, #72	; 0x48
 8006674:	d907      	bls.n	8006686 <HAL_DMA_Init+0x2aa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2b4e      	cmp	r3, #78	; 0x4e
 800667c:	d905      	bls.n	800668a <HAL_DMA_Init+0x2ae>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b52      	cmp	r3, #82	; 0x52
 8006684:	d801      	bhi.n	800668a <HAL_DMA_Init+0x2ae>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <HAL_DMA_Init+0x2b0>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006696:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0307 	bic.w	r3, r3, #7
 80066ae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d117      	bne.n	80066f2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f002 fb4d 	bl	8008d74 <DMA_CheckFifoParam>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2240      	movs	r2, #64	; 0x40
 80066e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e197      	b.n	8006a22 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f002 fa88 	bl	8008c10 <DMA_CalcBaseAndBitshift>
 8006700:	4603      	mov	r3, r0
 8006702:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	223f      	movs	r2, #63	; 0x3f
 800670e:	409a      	lsls	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
 8006714:	e0cd      	b.n	80068b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a3b      	ldr	r2, [pc, #236]	; (8006808 <HAL_DMA_Init+0x42c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d022      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a39      	ldr	r2, [pc, #228]	; (800680c <HAL_DMA_Init+0x430>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01d      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a38      	ldr	r2, [pc, #224]	; (8006810 <HAL_DMA_Init+0x434>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d018      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a36      	ldr	r2, [pc, #216]	; (8006814 <HAL_DMA_Init+0x438>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d013      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a35      	ldr	r2, [pc, #212]	; (8006818 <HAL_DMA_Init+0x43c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00e      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a33      	ldr	r2, [pc, #204]	; (800681c <HAL_DMA_Init+0x440>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d009      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a32      	ldr	r2, [pc, #200]	; (8006820 <HAL_DMA_Init+0x444>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d004      	beq.n	8006766 <HAL_DMA_Init+0x38a>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a30      	ldr	r2, [pc, #192]	; (8006824 <HAL_DMA_Init+0x448>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d101      	bne.n	800676a <HAL_DMA_Init+0x38e>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <HAL_DMA_Init+0x390>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8097 	beq.w	80068a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a24      	ldr	r2, [pc, #144]	; (8006808 <HAL_DMA_Init+0x42c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d021      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a22      	ldr	r2, [pc, #136]	; (800680c <HAL_DMA_Init+0x430>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01c      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a21      	ldr	r2, [pc, #132]	; (8006810 <HAL_DMA_Init+0x434>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d017      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_DMA_Init+0x438>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d012      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1e      	ldr	r2, [pc, #120]	; (8006818 <HAL_DMA_Init+0x43c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00d      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_DMA_Init+0x440>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d008      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <HAL_DMA_Init+0x444>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <HAL_DMA_Init+0x3e4>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_DMA_Init+0x448>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_DMA_Init+0x44c>)
 80067de:	4013      	ands	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d020      	beq.n	800682c <HAL_DMA_Init+0x450>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	2b80      	cmp	r3, #128	; 0x80
 80067f0:	d102      	bne.n	80067f8 <HAL_DMA_Init+0x41c>
 80067f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067f6:	e01a      	b.n	800682e <HAL_DMA_Init+0x452>
 80067f8:	2300      	movs	r3, #0
 80067fa:	e018      	b.n	800682e <HAL_DMA_Init+0x452>
 80067fc:	fe10803f 	.word	0xfe10803f
 8006800:	5c001000 	.word	0x5c001000
 8006804:	ffff0000 	.word	0xffff0000
 8006808:	58025408 	.word	0x58025408
 800680c:	5802541c 	.word	0x5802541c
 8006810:	58025430 	.word	0x58025430
 8006814:	58025444 	.word	0x58025444
 8006818:	58025458 	.word	0x58025458
 800681c:	5802546c 	.word	0x5802546c
 8006820:	58025480 	.word	0x58025480
 8006824:	58025494 	.word	0x58025494
 8006828:	fffe000f 	.word	0xfffe000f
 800682c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68d2      	ldr	r2, [r2, #12]
 8006832:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800683c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800684c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800685c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	4b6e      	ldr	r3, [pc, #440]	; (8006a2c <HAL_DMA_Init+0x650>)
 8006874:	4413      	add	r3, r2
 8006876:	4a6e      	ldr	r2, [pc, #440]	; (8006a30 <HAL_DMA_Init+0x654>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	091b      	lsrs	r3, r3, #4
 800687e:	009a      	lsls	r2, r3, #2
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 f9c3 	bl	8008c10 <DMA_CalcBaseAndBitshift>
 800688a:	4603      	mov	r3, r0
 800688c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2201      	movs	r2, #1
 8006898:	409a      	lsls	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	e008      	b.n	80068b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2240      	movs	r2, #64	; 0x40
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0b7      	b.n	8006a22 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a5f      	ldr	r2, [pc, #380]	; (8006a34 <HAL_DMA_Init+0x658>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d072      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a5d      	ldr	r2, [pc, #372]	; (8006a38 <HAL_DMA_Init+0x65c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d06d      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a5c      	ldr	r2, [pc, #368]	; (8006a3c <HAL_DMA_Init+0x660>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d068      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a5a      	ldr	r2, [pc, #360]	; (8006a40 <HAL_DMA_Init+0x664>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d063      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a59      	ldr	r2, [pc, #356]	; (8006a44 <HAL_DMA_Init+0x668>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d05e      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a57      	ldr	r2, [pc, #348]	; (8006a48 <HAL_DMA_Init+0x66c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d059      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a56      	ldr	r2, [pc, #344]	; (8006a4c <HAL_DMA_Init+0x670>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d054      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a54      	ldr	r2, [pc, #336]	; (8006a50 <HAL_DMA_Init+0x674>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d04f      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a53      	ldr	r2, [pc, #332]	; (8006a54 <HAL_DMA_Init+0x678>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d04a      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a51      	ldr	r2, [pc, #324]	; (8006a58 <HAL_DMA_Init+0x67c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d045      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a50      	ldr	r2, [pc, #320]	; (8006a5c <HAL_DMA_Init+0x680>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d040      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a4e      	ldr	r2, [pc, #312]	; (8006a60 <HAL_DMA_Init+0x684>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03b      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a4d      	ldr	r2, [pc, #308]	; (8006a64 <HAL_DMA_Init+0x688>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d036      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a4b      	ldr	r2, [pc, #300]	; (8006a68 <HAL_DMA_Init+0x68c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d031      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a4a      	ldr	r2, [pc, #296]	; (8006a6c <HAL_DMA_Init+0x690>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d02c      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a48      	ldr	r2, [pc, #288]	; (8006a70 <HAL_DMA_Init+0x694>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d027      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a47      	ldr	r2, [pc, #284]	; (8006a74 <HAL_DMA_Init+0x698>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d022      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a45      	ldr	r2, [pc, #276]	; (8006a78 <HAL_DMA_Init+0x69c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a44      	ldr	r2, [pc, #272]	; (8006a7c <HAL_DMA_Init+0x6a0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a42      	ldr	r2, [pc, #264]	; (8006a80 <HAL_DMA_Init+0x6a4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a41      	ldr	r2, [pc, #260]	; (8006a84 <HAL_DMA_Init+0x6a8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a3f      	ldr	r2, [pc, #252]	; (8006a88 <HAL_DMA_Init+0x6ac>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3e      	ldr	r2, [pc, #248]	; (8006a8c <HAL_DMA_Init+0x6b0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_Init+0x5c6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3c      	ldr	r2, [pc, #240]	; (8006a90 <HAL_DMA_Init+0x6b4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d101      	bne.n	80069a6 <HAL_DMA_Init+0x5ca>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <HAL_DMA_Init+0x5cc>
 80069a6:	2300      	movs	r3, #0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d032      	beq.n	8006a12 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f002 fa5d 	bl	8008e6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b80      	cmp	r3, #128	; 0x80
 80069b8:	d102      	bne.n	80069c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80069d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d010      	beq.n	8006a00 <HAL_DMA_Init+0x624>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d80c      	bhi.n	8006a00 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 fada 	bl	8008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069fc:	605a      	str	r2, [r3, #4]
 80069fe:	e008      	b.n	8006a12 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	a7fdabf8 	.word	0xa7fdabf8
 8006a30:	cccccccd 	.word	0xcccccccd
 8006a34:	40020010 	.word	0x40020010
 8006a38:	40020028 	.word	0x40020028
 8006a3c:	40020040 	.word	0x40020040
 8006a40:	40020058 	.word	0x40020058
 8006a44:	40020070 	.word	0x40020070
 8006a48:	40020088 	.word	0x40020088
 8006a4c:	400200a0 	.word	0x400200a0
 8006a50:	400200b8 	.word	0x400200b8
 8006a54:	40020410 	.word	0x40020410
 8006a58:	40020428 	.word	0x40020428
 8006a5c:	40020440 	.word	0x40020440
 8006a60:	40020458 	.word	0x40020458
 8006a64:	40020470 	.word	0x40020470
 8006a68:	40020488 	.word	0x40020488
 8006a6c:	400204a0 	.word	0x400204a0
 8006a70:	400204b8 	.word	0x400204b8
 8006a74:	58025408 	.word	0x58025408
 8006a78:	5802541c 	.word	0x5802541c
 8006a7c:	58025430 	.word	0x58025430
 8006a80:	58025444 	.word	0x58025444
 8006a84:	58025458 	.word	0x58025458
 8006a88:	5802546c 	.word	0x5802546c
 8006a8c:	58025480 	.word	0x58025480
 8006a90:	58025494 	.word	0x58025494

08006a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e226      	b.n	8006efe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_Start_IT+0x2a>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e21f      	b.n	8006efe <HAL_DMA_Start_IT+0x46a>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	f040 820a 	bne.w	8006ee8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a68      	ldr	r2, [pc, #416]	; (8006c88 <HAL_DMA_Start_IT+0x1f4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d04a      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a66      	ldr	r2, [pc, #408]	; (8006c8c <HAL_DMA_Start_IT+0x1f8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d045      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a65      	ldr	r2, [pc, #404]	; (8006c90 <HAL_DMA_Start_IT+0x1fc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d040      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a63      	ldr	r2, [pc, #396]	; (8006c94 <HAL_DMA_Start_IT+0x200>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d03b      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a62      	ldr	r2, [pc, #392]	; (8006c98 <HAL_DMA_Start_IT+0x204>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d036      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a60      	ldr	r2, [pc, #384]	; (8006c9c <HAL_DMA_Start_IT+0x208>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d031      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5f      	ldr	r2, [pc, #380]	; (8006ca0 <HAL_DMA_Start_IT+0x20c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d02c      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ca4 <HAL_DMA_Start_IT+0x210>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d027      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a5c      	ldr	r2, [pc, #368]	; (8006ca8 <HAL_DMA_Start_IT+0x214>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d022      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a5a      	ldr	r2, [pc, #360]	; (8006cac <HAL_DMA_Start_IT+0x218>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d01d      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a59      	ldr	r2, [pc, #356]	; (8006cb0 <HAL_DMA_Start_IT+0x21c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d018      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a57      	ldr	r2, [pc, #348]	; (8006cb4 <HAL_DMA_Start_IT+0x220>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d013      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_DMA_Start_IT+0x224>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a54      	ldr	r2, [pc, #336]	; (8006cbc <HAL_DMA_Start_IT+0x228>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d009      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a53      	ldr	r2, [pc, #332]	; (8006cc0 <HAL_DMA_Start_IT+0x22c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d004      	beq.n	8006b82 <HAL_DMA_Start_IT+0xee>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a51      	ldr	r2, [pc, #324]	; (8006cc4 <HAL_DMA_Start_IT+0x230>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d108      	bne.n	8006b94 <HAL_DMA_Start_IT+0x100>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e007      	b.n	8006ba4 <HAL_DMA_Start_IT+0x110>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0201 	bic.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f001 fe84 	bl	80088b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a34      	ldr	r2, [pc, #208]	; (8006c88 <HAL_DMA_Start_IT+0x1f4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d04a      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a33      	ldr	r2, [pc, #204]	; (8006c8c <HAL_DMA_Start_IT+0x1f8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d045      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a31      	ldr	r2, [pc, #196]	; (8006c90 <HAL_DMA_Start_IT+0x1fc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d040      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a30      	ldr	r2, [pc, #192]	; (8006c94 <HAL_DMA_Start_IT+0x200>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d03b      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2e      	ldr	r2, [pc, #184]	; (8006c98 <HAL_DMA_Start_IT+0x204>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d036      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2d      	ldr	r2, [pc, #180]	; (8006c9c <HAL_DMA_Start_IT+0x208>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d031      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <HAL_DMA_Start_IT+0x20c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02c      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <HAL_DMA_Start_IT+0x210>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d027      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <HAL_DMA_Start_IT+0x214>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a27      	ldr	r2, [pc, #156]	; (8006cac <HAL_DMA_Start_IT+0x218>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a25      	ldr	r2, [pc, #148]	; (8006cb0 <HAL_DMA_Start_IT+0x21c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a24      	ldr	r2, [pc, #144]	; (8006cb4 <HAL_DMA_Start_IT+0x220>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <HAL_DMA_Start_IT+0x224>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <HAL_DMA_Start_IT+0x228>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <HAL_DMA_Start_IT+0x22c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_Start_IT+0x1bc>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <HAL_DMA_Start_IT+0x230>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_DMA_Start_IT+0x1c0>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_DMA_Start_IT+0x1c2>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d036      	beq.n	8006cc8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f023 021e 	bic.w	r2, r3, #30
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0216 	orr.w	r2, r2, #22
 8006c6c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d03e      	beq.n	8006cf4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f042 0208 	orr.w	r2, r2, #8
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e035      	b.n	8006cf4 <HAL_DMA_Start_IT+0x260>
 8006c88:	40020010 	.word	0x40020010
 8006c8c:	40020028 	.word	0x40020028
 8006c90:	40020040 	.word	0x40020040
 8006c94:	40020058 	.word	0x40020058
 8006c98:	40020070 	.word	0x40020070
 8006c9c:	40020088 	.word	0x40020088
 8006ca0:	400200a0 	.word	0x400200a0
 8006ca4:	400200b8 	.word	0x400200b8
 8006ca8:	40020410 	.word	0x40020410
 8006cac:	40020428 	.word	0x40020428
 8006cb0:	40020440 	.word	0x40020440
 8006cb4:	40020458 	.word	0x40020458
 8006cb8:	40020470 	.word	0x40020470
 8006cbc:	40020488 	.word	0x40020488
 8006cc0:	400204a0 	.word	0x400204a0
 8006cc4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 020e 	bic.w	r2, r3, #14
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 020a 	orr.w	r2, r2, #10
 8006cda:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0204 	orr.w	r2, r2, #4
 8006cf2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a83      	ldr	r2, [pc, #524]	; (8006f08 <HAL_DMA_Start_IT+0x474>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d072      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a82      	ldr	r2, [pc, #520]	; (8006f0c <HAL_DMA_Start_IT+0x478>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d06d      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a80      	ldr	r2, [pc, #512]	; (8006f10 <HAL_DMA_Start_IT+0x47c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d068      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a7f      	ldr	r2, [pc, #508]	; (8006f14 <HAL_DMA_Start_IT+0x480>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d063      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a7d      	ldr	r2, [pc, #500]	; (8006f18 <HAL_DMA_Start_IT+0x484>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d05e      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7c      	ldr	r2, [pc, #496]	; (8006f1c <HAL_DMA_Start_IT+0x488>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d059      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7a      	ldr	r2, [pc, #488]	; (8006f20 <HAL_DMA_Start_IT+0x48c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d054      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a79      	ldr	r2, [pc, #484]	; (8006f24 <HAL_DMA_Start_IT+0x490>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d04f      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a77      	ldr	r2, [pc, #476]	; (8006f28 <HAL_DMA_Start_IT+0x494>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d04a      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a76      	ldr	r2, [pc, #472]	; (8006f2c <HAL_DMA_Start_IT+0x498>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d045      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a74      	ldr	r2, [pc, #464]	; (8006f30 <HAL_DMA_Start_IT+0x49c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d040      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a73      	ldr	r2, [pc, #460]	; (8006f34 <HAL_DMA_Start_IT+0x4a0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d03b      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a71      	ldr	r2, [pc, #452]	; (8006f38 <HAL_DMA_Start_IT+0x4a4>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d036      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a70      	ldr	r2, [pc, #448]	; (8006f3c <HAL_DMA_Start_IT+0x4a8>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d031      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a6e      	ldr	r2, [pc, #440]	; (8006f40 <HAL_DMA_Start_IT+0x4ac>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d02c      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6d      	ldr	r2, [pc, #436]	; (8006f44 <HAL_DMA_Start_IT+0x4b0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d027      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6b      	ldr	r2, [pc, #428]	; (8006f48 <HAL_DMA_Start_IT+0x4b4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d022      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a6a      	ldr	r2, [pc, #424]	; (8006f4c <HAL_DMA_Start_IT+0x4b8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d01d      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a68      	ldr	r2, [pc, #416]	; (8006f50 <HAL_DMA_Start_IT+0x4bc>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a67      	ldr	r2, [pc, #412]	; (8006f54 <HAL_DMA_Start_IT+0x4c0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_DMA_Start_IT+0x4c4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a64      	ldr	r2, [pc, #400]	; (8006f5c <HAL_DMA_Start_IT+0x4c8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a62      	ldr	r2, [pc, #392]	; (8006f60 <HAL_DMA_Start_IT+0x4cc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_DMA_Start_IT+0x350>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a61      	ldr	r2, [pc, #388]	; (8006f64 <HAL_DMA_Start_IT+0x4d0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_DMA_Start_IT+0x354>
 8006de4:	2301      	movs	r3, #1
 8006de6:	e000      	b.n	8006dea <HAL_DMA_Start_IT+0x356>
 8006de8:	2300      	movs	r3, #0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d01a      	beq.n	8006e24 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e0a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e22:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a37      	ldr	r2, [pc, #220]	; (8006f08 <HAL_DMA_Start_IT+0x474>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d04a      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a36      	ldr	r2, [pc, #216]	; (8006f0c <HAL_DMA_Start_IT+0x478>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d045      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a34      	ldr	r2, [pc, #208]	; (8006f10 <HAL_DMA_Start_IT+0x47c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d040      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a33      	ldr	r2, [pc, #204]	; (8006f14 <HAL_DMA_Start_IT+0x480>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d03b      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a31      	ldr	r2, [pc, #196]	; (8006f18 <HAL_DMA_Start_IT+0x484>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d036      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a30      	ldr	r2, [pc, #192]	; (8006f1c <HAL_DMA_Start_IT+0x488>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d031      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2e      	ldr	r2, [pc, #184]	; (8006f20 <HAL_DMA_Start_IT+0x48c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d02c      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2d      	ldr	r2, [pc, #180]	; (8006f24 <HAL_DMA_Start_IT+0x490>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d027      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2b      	ldr	r2, [pc, #172]	; (8006f28 <HAL_DMA_Start_IT+0x494>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d022      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <HAL_DMA_Start_IT+0x498>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d01d      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a28      	ldr	r2, [pc, #160]	; (8006f30 <HAL_DMA_Start_IT+0x49c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d018      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a27      	ldr	r2, [pc, #156]	; (8006f34 <HAL_DMA_Start_IT+0x4a0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a25      	ldr	r2, [pc, #148]	; (8006f38 <HAL_DMA_Start_IT+0x4a4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <HAL_DMA_Start_IT+0x4a8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a22      	ldr	r2, [pc, #136]	; (8006f40 <HAL_DMA_Start_IT+0x4ac>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_DMA_Start_IT+0x430>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_DMA_Start_IT+0x4b0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d108      	bne.n	8006ed6 <HAL_DMA_Start_IT+0x442>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	e012      	b.n	8006efc <HAL_DMA_Start_IT+0x468>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f042 0201 	orr.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e009      	b.n	8006efc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40020010 	.word	0x40020010
 8006f0c:	40020028 	.word	0x40020028
 8006f10:	40020040 	.word	0x40020040
 8006f14:	40020058 	.word	0x40020058
 8006f18:	40020070 	.word	0x40020070
 8006f1c:	40020088 	.word	0x40020088
 8006f20:	400200a0 	.word	0x400200a0
 8006f24:	400200b8 	.word	0x400200b8
 8006f28:	40020410 	.word	0x40020410
 8006f2c:	40020428 	.word	0x40020428
 8006f30:	40020440 	.word	0x40020440
 8006f34:	40020458 	.word	0x40020458
 8006f38:	40020470 	.word	0x40020470
 8006f3c:	40020488 	.word	0x40020488
 8006f40:	400204a0 	.word	0x400204a0
 8006f44:	400204b8 	.word	0x400204b8
 8006f48:	58025408 	.word	0x58025408
 8006f4c:	5802541c 	.word	0x5802541c
 8006f50:	58025430 	.word	0x58025430
 8006f54:	58025444 	.word	0x58025444
 8006f58:	58025458 	.word	0x58025458
 8006f5c:	5802546c 	.word	0x5802546c
 8006f60:	58025480 	.word	0x58025480
 8006f64:	58025494 	.word	0x58025494

08006f68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006f70:	f7fd f90c 	bl	800418c <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e2dc      	b.n	800753a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d008      	beq.n	8006f9e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2280      	movs	r2, #128	; 0x80
 8006f90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e2cd      	b.n	800753a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a76      	ldr	r2, [pc, #472]	; (800717c <HAL_DMA_Abort+0x214>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a74      	ldr	r2, [pc, #464]	; (8007180 <HAL_DMA_Abort+0x218>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a73      	ldr	r2, [pc, #460]	; (8007184 <HAL_DMA_Abort+0x21c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a71      	ldr	r2, [pc, #452]	; (8007188 <HAL_DMA_Abort+0x220>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a70      	ldr	r2, [pc, #448]	; (800718c <HAL_DMA_Abort+0x224>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a6e      	ldr	r2, [pc, #440]	; (8007190 <HAL_DMA_Abort+0x228>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a6d      	ldr	r2, [pc, #436]	; (8007194 <HAL_DMA_Abort+0x22c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a6b      	ldr	r2, [pc, #428]	; (8007198 <HAL_DMA_Abort+0x230>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a6a      	ldr	r2, [pc, #424]	; (800719c <HAL_DMA_Abort+0x234>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a68      	ldr	r2, [pc, #416]	; (80071a0 <HAL_DMA_Abort+0x238>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a67      	ldr	r2, [pc, #412]	; (80071a4 <HAL_DMA_Abort+0x23c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a65      	ldr	r2, [pc, #404]	; (80071a8 <HAL_DMA_Abort+0x240>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a64      	ldr	r2, [pc, #400]	; (80071ac <HAL_DMA_Abort+0x244>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a62      	ldr	r2, [pc, #392]	; (80071b0 <HAL_DMA_Abort+0x248>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a61      	ldr	r2, [pc, #388]	; (80071b4 <HAL_DMA_Abort+0x24c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_Abort+0xd6>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a5f      	ldr	r2, [pc, #380]	; (80071b8 <HAL_DMA_Abort+0x250>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Abort+0xda>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_DMA_Abort+0xdc>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d013      	beq.n	8007070 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 021e 	bic.w	r2, r2, #30
 8007056:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007066:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	617b      	str	r3, [r7, #20]
 800706e:	e00a      	b.n	8007086 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 020e 	bic.w	r2, r2, #14
 800707e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3c      	ldr	r2, [pc, #240]	; (800717c <HAL_DMA_Abort+0x214>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d072      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3a      	ldr	r2, [pc, #232]	; (8007180 <HAL_DMA_Abort+0x218>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d06d      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a39      	ldr	r2, [pc, #228]	; (8007184 <HAL_DMA_Abort+0x21c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d068      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a37      	ldr	r2, [pc, #220]	; (8007188 <HAL_DMA_Abort+0x220>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d063      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a36      	ldr	r2, [pc, #216]	; (800718c <HAL_DMA_Abort+0x224>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d05e      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a34      	ldr	r2, [pc, #208]	; (8007190 <HAL_DMA_Abort+0x228>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d059      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a33      	ldr	r2, [pc, #204]	; (8007194 <HAL_DMA_Abort+0x22c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d054      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a31      	ldr	r2, [pc, #196]	; (8007198 <HAL_DMA_Abort+0x230>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d04f      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a30      	ldr	r2, [pc, #192]	; (800719c <HAL_DMA_Abort+0x234>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d04a      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <HAL_DMA_Abort+0x238>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d045      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <HAL_DMA_Abort+0x23c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d040      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a2b      	ldr	r2, [pc, #172]	; (80071a8 <HAL_DMA_Abort+0x240>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d03b      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <HAL_DMA_Abort+0x244>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d036      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a28      	ldr	r2, [pc, #160]	; (80071b0 <HAL_DMA_Abort+0x248>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d031      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a27      	ldr	r2, [pc, #156]	; (80071b4 <HAL_DMA_Abort+0x24c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d02c      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a25      	ldr	r2, [pc, #148]	; (80071b8 <HAL_DMA_Abort+0x250>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d027      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a24      	ldr	r2, [pc, #144]	; (80071bc <HAL_DMA_Abort+0x254>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d022      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a22      	ldr	r2, [pc, #136]	; (80071c0 <HAL_DMA_Abort+0x258>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d01d      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_DMA_Abort+0x25c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d018      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <HAL_DMA_Abort+0x260>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1e      	ldr	r2, [pc, #120]	; (80071cc <HAL_DMA_Abort+0x264>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00e      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a1c      	ldr	r2, [pc, #112]	; (80071d0 <HAL_DMA_Abort+0x268>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d009      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <HAL_DMA_Abort+0x26c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d004      	beq.n	8007176 <HAL_DMA_Abort+0x20e>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <HAL_DMA_Abort+0x270>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d132      	bne.n	80071dc <HAL_DMA_Abort+0x274>
 8007176:	2301      	movs	r3, #1
 8007178:	e031      	b.n	80071de <HAL_DMA_Abort+0x276>
 800717a:	bf00      	nop
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
 80071bc:	58025408 	.word	0x58025408
 80071c0:	5802541c 	.word	0x5802541c
 80071c4:	58025430 	.word	0x58025430
 80071c8:	58025444 	.word	0x58025444
 80071cc:	58025458 	.word	0x58025458
 80071d0:	5802546c 	.word	0x5802546c
 80071d4:	58025480 	.word	0x58025480
 80071d8:	58025494 	.word	0x58025494
 80071dc:	2300      	movs	r3, #0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d007      	beq.n	80071f2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a6d      	ldr	r2, [pc, #436]	; (80073ac <HAL_DMA_Abort+0x444>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d04a      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a6b      	ldr	r2, [pc, #428]	; (80073b0 <HAL_DMA_Abort+0x448>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d045      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a6a      	ldr	r2, [pc, #424]	; (80073b4 <HAL_DMA_Abort+0x44c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d040      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a68      	ldr	r2, [pc, #416]	; (80073b8 <HAL_DMA_Abort+0x450>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d03b      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a67      	ldr	r2, [pc, #412]	; (80073bc <HAL_DMA_Abort+0x454>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d036      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a65      	ldr	r2, [pc, #404]	; (80073c0 <HAL_DMA_Abort+0x458>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d031      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a64      	ldr	r2, [pc, #400]	; (80073c4 <HAL_DMA_Abort+0x45c>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d02c      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a62      	ldr	r2, [pc, #392]	; (80073c8 <HAL_DMA_Abort+0x460>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d027      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a61      	ldr	r2, [pc, #388]	; (80073cc <HAL_DMA_Abort+0x464>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d022      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a5f      	ldr	r2, [pc, #380]	; (80073d0 <HAL_DMA_Abort+0x468>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d01d      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a5e      	ldr	r2, [pc, #376]	; (80073d4 <HAL_DMA_Abort+0x46c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d018      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a5c      	ldr	r2, [pc, #368]	; (80073d8 <HAL_DMA_Abort+0x470>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d013      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a5b      	ldr	r2, [pc, #364]	; (80073dc <HAL_DMA_Abort+0x474>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d00e      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a59      	ldr	r2, [pc, #356]	; (80073e0 <HAL_DMA_Abort+0x478>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d009      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a58      	ldr	r2, [pc, #352]	; (80073e4 <HAL_DMA_Abort+0x47c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d004      	beq.n	8007292 <HAL_DMA_Abort+0x32a>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a56      	ldr	r2, [pc, #344]	; (80073e8 <HAL_DMA_Abort+0x480>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d108      	bne.n	80072a4 <HAL_DMA_Abort+0x33c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0201 	bic.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	e007      	b.n	80072b4 <HAL_DMA_Abort+0x34c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80072b4:	e013      	b.n	80072de <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072b6:	f7fc ff69 	bl	800418c <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d90c      	bls.n	80072de <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e12d      	b.n	800753a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2f      	ldr	r2, [pc, #188]	; (80073ac <HAL_DMA_Abort+0x444>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_Abort+0x422>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <HAL_DMA_Abort+0x448>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_Abort+0x422>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a2c      	ldr	r2, [pc, #176]	; (80073b4 <HAL_DMA_Abort+0x44c>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a2a      	ldr	r2, [pc, #168]	; (80073b8 <HAL_DMA_Abort+0x450>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a29      	ldr	r2, [pc, #164]	; (80073bc <HAL_DMA_Abort+0x454>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_Abort+0x422>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a27      	ldr	r2, [pc, #156]	; (80073c0 <HAL_DMA_Abort+0x458>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <HAL_DMA_Abort+0x45c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <HAL_DMA_Abort+0x460>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_Abort+0x422>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a23      	ldr	r2, [pc, #140]	; (80073cc <HAL_DMA_Abort+0x464>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <HAL_DMA_Abort+0x468>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_Abort+0x422>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <HAL_DMA_Abort+0x46c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <HAL_DMA_Abort+0x470>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <HAL_DMA_Abort+0x474>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_Abort+0x422>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1b      	ldr	r2, [pc, #108]	; (80073e0 <HAL_DMA_Abort+0x478>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1a      	ldr	r2, [pc, #104]	; (80073e4 <HAL_DMA_Abort+0x47c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_Abort+0x422>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a18      	ldr	r2, [pc, #96]	; (80073e8 <HAL_DMA_Abort+0x480>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_DMA_Abort+0x426>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_DMA_Abort+0x428>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02b      	beq.n	80073ec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739e:	f003 031f 	and.w	r3, r3, #31
 80073a2:	223f      	movs	r2, #63	; 0x3f
 80073a4:	409a      	lsls	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	609a      	str	r2, [r3, #8]
 80073aa:	e02a      	b.n	8007402 <HAL_DMA_Abort+0x49a>
 80073ac:	40020010 	.word	0x40020010
 80073b0:	40020028 	.word	0x40020028
 80073b4:	40020040 	.word	0x40020040
 80073b8:	40020058 	.word	0x40020058
 80073bc:	40020070 	.word	0x40020070
 80073c0:	40020088 	.word	0x40020088
 80073c4:	400200a0 	.word	0x400200a0
 80073c8:	400200b8 	.word	0x400200b8
 80073cc:	40020410 	.word	0x40020410
 80073d0:	40020428 	.word	0x40020428
 80073d4:	40020440 	.word	0x40020440
 80073d8:	40020458 	.word	0x40020458
 80073dc:	40020470 	.word	0x40020470
 80073e0:	40020488 	.word	0x40020488
 80073e4:	400204a0 	.word	0x400204a0
 80073e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2201      	movs	r2, #1
 80073fc:	409a      	lsls	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a4f      	ldr	r2, [pc, #316]	; (8007544 <HAL_DMA_Abort+0x5dc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d072      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a4d      	ldr	r2, [pc, #308]	; (8007548 <HAL_DMA_Abort+0x5e0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d06d      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4c      	ldr	r2, [pc, #304]	; (800754c <HAL_DMA_Abort+0x5e4>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d068      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a4a      	ldr	r2, [pc, #296]	; (8007550 <HAL_DMA_Abort+0x5e8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d063      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a49      	ldr	r2, [pc, #292]	; (8007554 <HAL_DMA_Abort+0x5ec>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d05e      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a47      	ldr	r2, [pc, #284]	; (8007558 <HAL_DMA_Abort+0x5f0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d059      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a46      	ldr	r2, [pc, #280]	; (800755c <HAL_DMA_Abort+0x5f4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d054      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a44      	ldr	r2, [pc, #272]	; (8007560 <HAL_DMA_Abort+0x5f8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04f      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a43      	ldr	r2, [pc, #268]	; (8007564 <HAL_DMA_Abort+0x5fc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d04a      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a41      	ldr	r2, [pc, #260]	; (8007568 <HAL_DMA_Abort+0x600>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d045      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a40      	ldr	r2, [pc, #256]	; (800756c <HAL_DMA_Abort+0x604>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d040      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a3e      	ldr	r2, [pc, #248]	; (8007570 <HAL_DMA_Abort+0x608>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d03b      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a3d      	ldr	r2, [pc, #244]	; (8007574 <HAL_DMA_Abort+0x60c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d036      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <HAL_DMA_Abort+0x610>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d031      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3a      	ldr	r2, [pc, #232]	; (800757c <HAL_DMA_Abort+0x614>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d02c      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a38      	ldr	r2, [pc, #224]	; (8007580 <HAL_DMA_Abort+0x618>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d027      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a37      	ldr	r2, [pc, #220]	; (8007584 <HAL_DMA_Abort+0x61c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d022      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a35      	ldr	r2, [pc, #212]	; (8007588 <HAL_DMA_Abort+0x620>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d01d      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a34      	ldr	r2, [pc, #208]	; (800758c <HAL_DMA_Abort+0x624>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a32      	ldr	r2, [pc, #200]	; (8007590 <HAL_DMA_Abort+0x628>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a31      	ldr	r2, [pc, #196]	; (8007594 <HAL_DMA_Abort+0x62c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2f      	ldr	r2, [pc, #188]	; (8007598 <HAL_DMA_Abort+0x630>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2e      	ldr	r2, [pc, #184]	; (800759c <HAL_DMA_Abort+0x634>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_DMA_Abort+0x58a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2c      	ldr	r2, [pc, #176]	; (80075a0 <HAL_DMA_Abort+0x638>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d101      	bne.n	80074f6 <HAL_DMA_Abort+0x58e>
 80074f2:	2301      	movs	r3, #1
 80074f4:	e000      	b.n	80074f8 <HAL_DMA_Abort+0x590>
 80074f6:	2300      	movs	r3, #0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d015      	beq.n	8007528 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007504:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00c      	beq.n	8007528 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800751c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007526:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40020010 	.word	0x40020010
 8007548:	40020028 	.word	0x40020028
 800754c:	40020040 	.word	0x40020040
 8007550:	40020058 	.word	0x40020058
 8007554:	40020070 	.word	0x40020070
 8007558:	40020088 	.word	0x40020088
 800755c:	400200a0 	.word	0x400200a0
 8007560:	400200b8 	.word	0x400200b8
 8007564:	40020410 	.word	0x40020410
 8007568:	40020428 	.word	0x40020428
 800756c:	40020440 	.word	0x40020440
 8007570:	40020458 	.word	0x40020458
 8007574:	40020470 	.word	0x40020470
 8007578:	40020488 	.word	0x40020488
 800757c:	400204a0 	.word	0x400204a0
 8007580:	400204b8 	.word	0x400204b8
 8007584:	58025408 	.word	0x58025408
 8007588:	5802541c 	.word	0x5802541c
 800758c:	58025430 	.word	0x58025430
 8007590:	58025444 	.word	0x58025444
 8007594:	58025458 	.word	0x58025458
 8007598:	5802546c 	.word	0x5802546c
 800759c:	58025480 	.word	0x58025480
 80075a0:	58025494 	.word	0x58025494

080075a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e237      	b.n	8007a26 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d004      	beq.n	80075cc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2280      	movs	r2, #128	; 0x80
 80075c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e22c      	b.n	8007a26 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a5c      	ldr	r2, [pc, #368]	; (8007744 <HAL_DMA_Abort_IT+0x1a0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d04a      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a5b      	ldr	r2, [pc, #364]	; (8007748 <HAL_DMA_Abort_IT+0x1a4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d045      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a59      	ldr	r2, [pc, #356]	; (800774c <HAL_DMA_Abort_IT+0x1a8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d040      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a58      	ldr	r2, [pc, #352]	; (8007750 <HAL_DMA_Abort_IT+0x1ac>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d03b      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a56      	ldr	r2, [pc, #344]	; (8007754 <HAL_DMA_Abort_IT+0x1b0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d036      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a55      	ldr	r2, [pc, #340]	; (8007758 <HAL_DMA_Abort_IT+0x1b4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d031      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a53      	ldr	r2, [pc, #332]	; (800775c <HAL_DMA_Abort_IT+0x1b8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d02c      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a52      	ldr	r2, [pc, #328]	; (8007760 <HAL_DMA_Abort_IT+0x1bc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d027      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a50      	ldr	r2, [pc, #320]	; (8007764 <HAL_DMA_Abort_IT+0x1c0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a4f      	ldr	r2, [pc, #316]	; (8007768 <HAL_DMA_Abort_IT+0x1c4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d01d      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a4d      	ldr	r2, [pc, #308]	; (800776c <HAL_DMA_Abort_IT+0x1c8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a4c      	ldr	r2, [pc, #304]	; (8007770 <HAL_DMA_Abort_IT+0x1cc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a4a      	ldr	r2, [pc, #296]	; (8007774 <HAL_DMA_Abort_IT+0x1d0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a49      	ldr	r2, [pc, #292]	; (8007778 <HAL_DMA_Abort_IT+0x1d4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a47      	ldr	r2, [pc, #284]	; (800777c <HAL_DMA_Abort_IT+0x1d8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_DMA_Abort_IT+0xc8>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a46      	ldr	r2, [pc, #280]	; (8007780 <HAL_DMA_Abort_IT+0x1dc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d101      	bne.n	8007670 <HAL_DMA_Abort_IT+0xcc>
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <HAL_DMA_Abort_IT+0xce>
 8007670:	2300      	movs	r3, #0
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8086 	beq.w	8007784 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2f      	ldr	r2, [pc, #188]	; (8007744 <HAL_DMA_Abort_IT+0x1a0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d04a      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a2e      	ldr	r2, [pc, #184]	; (8007748 <HAL_DMA_Abort_IT+0x1a4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d045      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a2c      	ldr	r2, [pc, #176]	; (800774c <HAL_DMA_Abort_IT+0x1a8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d040      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a2b      	ldr	r2, [pc, #172]	; (8007750 <HAL_DMA_Abort_IT+0x1ac>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d03b      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a29      	ldr	r2, [pc, #164]	; (8007754 <HAL_DMA_Abort_IT+0x1b0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d036      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a28      	ldr	r2, [pc, #160]	; (8007758 <HAL_DMA_Abort_IT+0x1b4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d031      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a26      	ldr	r2, [pc, #152]	; (800775c <HAL_DMA_Abort_IT+0x1b8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d02c      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a25      	ldr	r2, [pc, #148]	; (8007760 <HAL_DMA_Abort_IT+0x1bc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d027      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_DMA_Abort_IT+0x1c0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d022      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_DMA_Abort_IT+0x1c4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d01d      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a20      	ldr	r2, [pc, #128]	; (800776c <HAL_DMA_Abort_IT+0x1c8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d018      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_DMA_Abort_IT+0x1cc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <HAL_DMA_Abort_IT+0x1d0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00e      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_DMA_Abort_IT+0x1d4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d009      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1a      	ldr	r2, [pc, #104]	; (800777c <HAL_DMA_Abort_IT+0x1d8>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d004      	beq.n	8007720 <HAL_DMA_Abort_IT+0x17c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_DMA_Abort_IT+0x1dc>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d108      	bne.n	8007732 <HAL_DMA_Abort_IT+0x18e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e178      	b.n	8007a24 <HAL_DMA_Abort_IT+0x480>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	e16f      	b.n	8007a24 <HAL_DMA_Abort_IT+0x480>
 8007744:	40020010 	.word	0x40020010
 8007748:	40020028 	.word	0x40020028
 800774c:	40020040 	.word	0x40020040
 8007750:	40020058 	.word	0x40020058
 8007754:	40020070 	.word	0x40020070
 8007758:	40020088 	.word	0x40020088
 800775c:	400200a0 	.word	0x400200a0
 8007760:	400200b8 	.word	0x400200b8
 8007764:	40020410 	.word	0x40020410
 8007768:	40020428 	.word	0x40020428
 800776c:	40020440 	.word	0x40020440
 8007770:	40020458 	.word	0x40020458
 8007774:	40020470 	.word	0x40020470
 8007778:	40020488 	.word	0x40020488
 800777c:	400204a0 	.word	0x400204a0
 8007780:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 020e 	bic.w	r2, r2, #14
 8007792:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a6c      	ldr	r2, [pc, #432]	; (800794c <HAL_DMA_Abort_IT+0x3a8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d04a      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6b      	ldr	r2, [pc, #428]	; (8007950 <HAL_DMA_Abort_IT+0x3ac>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d045      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a69      	ldr	r2, [pc, #420]	; (8007954 <HAL_DMA_Abort_IT+0x3b0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d040      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a68      	ldr	r2, [pc, #416]	; (8007958 <HAL_DMA_Abort_IT+0x3b4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d03b      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a66      	ldr	r2, [pc, #408]	; (800795c <HAL_DMA_Abort_IT+0x3b8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d036      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a65      	ldr	r2, [pc, #404]	; (8007960 <HAL_DMA_Abort_IT+0x3bc>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d031      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a63      	ldr	r2, [pc, #396]	; (8007964 <HAL_DMA_Abort_IT+0x3c0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d02c      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a62      	ldr	r2, [pc, #392]	; (8007968 <HAL_DMA_Abort_IT+0x3c4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d027      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a60      	ldr	r2, [pc, #384]	; (800796c <HAL_DMA_Abort_IT+0x3c8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d022      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5f      	ldr	r2, [pc, #380]	; (8007970 <HAL_DMA_Abort_IT+0x3cc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d01d      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a5d      	ldr	r2, [pc, #372]	; (8007974 <HAL_DMA_Abort_IT+0x3d0>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d018      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a5c      	ldr	r2, [pc, #368]	; (8007978 <HAL_DMA_Abort_IT+0x3d4>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d013      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5a      	ldr	r2, [pc, #360]	; (800797c <HAL_DMA_Abort_IT+0x3d8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00e      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a59      	ldr	r2, [pc, #356]	; (8007980 <HAL_DMA_Abort_IT+0x3dc>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d009      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a57      	ldr	r2, [pc, #348]	; (8007984 <HAL_DMA_Abort_IT+0x3e0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_DMA_Abort_IT+0x290>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a56      	ldr	r2, [pc, #344]	; (8007988 <HAL_DMA_Abort_IT+0x3e4>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d108      	bne.n	8007846 <HAL_DMA_Abort_IT+0x2a2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	e007      	b.n	8007856 <HAL_DMA_Abort_IT+0x2b2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0201 	bic.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a3c      	ldr	r2, [pc, #240]	; (800794c <HAL_DMA_Abort_IT+0x3a8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d072      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a3a      	ldr	r2, [pc, #232]	; (8007950 <HAL_DMA_Abort_IT+0x3ac>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d06d      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a39      	ldr	r2, [pc, #228]	; (8007954 <HAL_DMA_Abort_IT+0x3b0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d068      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a37      	ldr	r2, [pc, #220]	; (8007958 <HAL_DMA_Abort_IT+0x3b4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d063      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a36      	ldr	r2, [pc, #216]	; (800795c <HAL_DMA_Abort_IT+0x3b8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d05e      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a34      	ldr	r2, [pc, #208]	; (8007960 <HAL_DMA_Abort_IT+0x3bc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d059      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a33      	ldr	r2, [pc, #204]	; (8007964 <HAL_DMA_Abort_IT+0x3c0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d054      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a31      	ldr	r2, [pc, #196]	; (8007968 <HAL_DMA_Abort_IT+0x3c4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d04f      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a30      	ldr	r2, [pc, #192]	; (800796c <HAL_DMA_Abort_IT+0x3c8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d04a      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a2e      	ldr	r2, [pc, #184]	; (8007970 <HAL_DMA_Abort_IT+0x3cc>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d045      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a2d      	ldr	r2, [pc, #180]	; (8007974 <HAL_DMA_Abort_IT+0x3d0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d040      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a2b      	ldr	r2, [pc, #172]	; (8007978 <HAL_DMA_Abort_IT+0x3d4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d03b      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <HAL_DMA_Abort_IT+0x3d8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d036      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a28      	ldr	r2, [pc, #160]	; (8007980 <HAL_DMA_Abort_IT+0x3dc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d031      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a27      	ldr	r2, [pc, #156]	; (8007984 <HAL_DMA_Abort_IT+0x3e0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d02c      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <HAL_DMA_Abort_IT+0x3e4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d027      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a24      	ldr	r2, [pc, #144]	; (800798c <HAL_DMA_Abort_IT+0x3e8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d022      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a22      	ldr	r2, [pc, #136]	; (8007990 <HAL_DMA_Abort_IT+0x3ec>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01d      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a21      	ldr	r2, [pc, #132]	; (8007994 <HAL_DMA_Abort_IT+0x3f0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d018      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <HAL_DMA_Abort_IT+0x3f4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d013      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <HAL_DMA_Abort_IT+0x3f8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d00e      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1c      	ldr	r2, [pc, #112]	; (80079a0 <HAL_DMA_Abort_IT+0x3fc>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d009      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1b      	ldr	r2, [pc, #108]	; (80079a4 <HAL_DMA_Abort_IT+0x400>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d004      	beq.n	8007946 <HAL_DMA_Abort_IT+0x3a2>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_DMA_Abort_IT+0x404>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d132      	bne.n	80079ac <HAL_DMA_Abort_IT+0x408>
 8007946:	2301      	movs	r3, #1
 8007948:	e031      	b.n	80079ae <HAL_DMA_Abort_IT+0x40a>
 800794a:	bf00      	nop
 800794c:	40020010 	.word	0x40020010
 8007950:	40020028 	.word	0x40020028
 8007954:	40020040 	.word	0x40020040
 8007958:	40020058 	.word	0x40020058
 800795c:	40020070 	.word	0x40020070
 8007960:	40020088 	.word	0x40020088
 8007964:	400200a0 	.word	0x400200a0
 8007968:	400200b8 	.word	0x400200b8
 800796c:	40020410 	.word	0x40020410
 8007970:	40020428 	.word	0x40020428
 8007974:	40020440 	.word	0x40020440
 8007978:	40020458 	.word	0x40020458
 800797c:	40020470 	.word	0x40020470
 8007980:	40020488 	.word	0x40020488
 8007984:	400204a0 	.word	0x400204a0
 8007988:	400204b8 	.word	0x400204b8
 800798c:	58025408 	.word	0x58025408
 8007990:	5802541c 	.word	0x5802541c
 8007994:	58025430 	.word	0x58025430
 8007998:	58025444 	.word	0x58025444
 800799c:	58025458 	.word	0x58025458
 80079a0:	5802546c 	.word	0x5802546c
 80079a4:	58025480 	.word	0x58025480
 80079a8:	58025494 	.word	0x58025494
 80079ac:	2300      	movs	r3, #0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d028      	beq.n	8007a04 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079cc:	f003 031f 	and.w	r3, r3, #31
 80079d0:	2201      	movs	r2, #1
 80079d2:	409a      	lsls	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00c      	beq.n	8007a04 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a02:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d003      	beq.n	8007a24 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop

08007a30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007a3c:	4b67      	ldr	r3, [pc, #412]	; (8007bdc <HAL_DMA_IRQHandler+0x1ac>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a67      	ldr	r2, [pc, #412]	; (8007be0 <HAL_DMA_IRQHandler+0x1b0>)
 8007a42:	fba2 2303 	umull	r2, r3, r2, r3
 8007a46:	0a9b      	lsrs	r3, r3, #10
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a5f      	ldr	r2, [pc, #380]	; (8007be4 <HAL_DMA_IRQHandler+0x1b4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d04a      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a5d      	ldr	r2, [pc, #372]	; (8007be8 <HAL_DMA_IRQHandler+0x1b8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d045      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a5c      	ldr	r2, [pc, #368]	; (8007bec <HAL_DMA_IRQHandler+0x1bc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d040      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a5a      	ldr	r2, [pc, #360]	; (8007bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d03b      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a59      	ldr	r2, [pc, #356]	; (8007bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d036      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a57      	ldr	r2, [pc, #348]	; (8007bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d031      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a56      	ldr	r2, [pc, #344]	; (8007bfc <HAL_DMA_IRQHandler+0x1cc>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d02c      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a54      	ldr	r2, [pc, #336]	; (8007c00 <HAL_DMA_IRQHandler+0x1d0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d027      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a53      	ldr	r2, [pc, #332]	; (8007c04 <HAL_DMA_IRQHandler+0x1d4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d022      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a51      	ldr	r2, [pc, #324]	; (8007c08 <HAL_DMA_IRQHandler+0x1d8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d01d      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a50      	ldr	r2, [pc, #320]	; (8007c0c <HAL_DMA_IRQHandler+0x1dc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d018      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a4e      	ldr	r2, [pc, #312]	; (8007c10 <HAL_DMA_IRQHandler+0x1e0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d013      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a4d      	ldr	r2, [pc, #308]	; (8007c14 <HAL_DMA_IRQHandler+0x1e4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d00e      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a4b      	ldr	r2, [pc, #300]	; (8007c18 <HAL_DMA_IRQHandler+0x1e8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d009      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a4a      	ldr	r2, [pc, #296]	; (8007c1c <HAL_DMA_IRQHandler+0x1ec>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d004      	beq.n	8007b02 <HAL_DMA_IRQHandler+0xd2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a48      	ldr	r2, [pc, #288]	; (8007c20 <HAL_DMA_IRQHandler+0x1f0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d101      	bne.n	8007b06 <HAL_DMA_IRQHandler+0xd6>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <HAL_DMA_IRQHandler+0xd8>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 842b 	beq.w	8008364 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	2208      	movs	r2, #8
 8007b18:	409a      	lsls	r2, r3
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80a2 	beq.w	8007c68 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2e      	ldr	r2, [pc, #184]	; (8007be4 <HAL_DMA_IRQHandler+0x1b4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d04a      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a2d      	ldr	r2, [pc, #180]	; (8007be8 <HAL_DMA_IRQHandler+0x1b8>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d045      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a2b      	ldr	r2, [pc, #172]	; (8007bec <HAL_DMA_IRQHandler+0x1bc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d040      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2a      	ldr	r2, [pc, #168]	; (8007bf0 <HAL_DMA_IRQHandler+0x1c0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d03b      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a28      	ldr	r2, [pc, #160]	; (8007bf4 <HAL_DMA_IRQHandler+0x1c4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d036      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a27      	ldr	r2, [pc, #156]	; (8007bf8 <HAL_DMA_IRQHandler+0x1c8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d031      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a25      	ldr	r2, [pc, #148]	; (8007bfc <HAL_DMA_IRQHandler+0x1cc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d02c      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a24      	ldr	r2, [pc, #144]	; (8007c00 <HAL_DMA_IRQHandler+0x1d0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d027      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a22      	ldr	r2, [pc, #136]	; (8007c04 <HAL_DMA_IRQHandler+0x1d4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d022      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a21      	ldr	r2, [pc, #132]	; (8007c08 <HAL_DMA_IRQHandler+0x1d8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d01d      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_DMA_IRQHandler+0x1dc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d018      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <HAL_DMA_IRQHandler+0x1e0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d013      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <HAL_DMA_IRQHandler+0x1e4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1b      	ldr	r2, [pc, #108]	; (8007c18 <HAL_DMA_IRQHandler+0x1e8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_DMA_IRQHandler+0x1ec>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_DMA_IRQHandler+0x194>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a18      	ldr	r2, [pc, #96]	; (8007c20 <HAL_DMA_IRQHandler+0x1f0>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d12f      	bne.n	8007c24 <HAL_DMA_IRQHandler+0x1f4>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	2300      	moveq	r3, #0
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	e02e      	b.n	8007c38 <HAL_DMA_IRQHandler+0x208>
 8007bda:	bf00      	nop
 8007bdc:	24000084 	.word	0x24000084
 8007be0:	1b4e81b5 	.word	0x1b4e81b5
 8007be4:	40020010 	.word	0x40020010
 8007be8:	40020028 	.word	0x40020028
 8007bec:	40020040 	.word	0x40020040
 8007bf0:	40020058 	.word	0x40020058
 8007bf4:	40020070 	.word	0x40020070
 8007bf8:	40020088 	.word	0x40020088
 8007bfc:	400200a0 	.word	0x400200a0
 8007c00:	400200b8 	.word	0x400200b8
 8007c04:	40020410 	.word	0x40020410
 8007c08:	40020428 	.word	0x40020428
 8007c0c:	40020440 	.word	0x40020440
 8007c10:	40020458 	.word	0x40020458
 8007c14:	40020470 	.word	0x40020470
 8007c18:	40020488 	.word	0x40020488
 8007c1c:	400204a0 	.word	0x400204a0
 8007c20:	400204b8 	.word	0x400204b8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	bf14      	ite	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	2300      	moveq	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d015      	beq.n	8007c68 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0204 	bic.w	r2, r2, #4
 8007c4a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c50:	f003 031f 	and.w	r3, r3, #31
 8007c54:	2208      	movs	r2, #8
 8007c56:	409a      	lsls	r2, r3
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	f043 0201 	orr.w	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	fa22 f303 	lsr.w	r3, r2, r3
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d06e      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a69      	ldr	r2, [pc, #420]	; (8007e28 <HAL_DMA_IRQHandler+0x3f8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d04a      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a67      	ldr	r2, [pc, #412]	; (8007e2c <HAL_DMA_IRQHandler+0x3fc>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d045      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a66      	ldr	r2, [pc, #408]	; (8007e30 <HAL_DMA_IRQHandler+0x400>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d040      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a64      	ldr	r2, [pc, #400]	; (8007e34 <HAL_DMA_IRQHandler+0x404>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a63      	ldr	r2, [pc, #396]	; (8007e38 <HAL_DMA_IRQHandler+0x408>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d036      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a61      	ldr	r2, [pc, #388]	; (8007e3c <HAL_DMA_IRQHandler+0x40c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d031      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a60      	ldr	r2, [pc, #384]	; (8007e40 <HAL_DMA_IRQHandler+0x410>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d02c      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a5e      	ldr	r2, [pc, #376]	; (8007e44 <HAL_DMA_IRQHandler+0x414>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d027      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a5d      	ldr	r2, [pc, #372]	; (8007e48 <HAL_DMA_IRQHandler+0x418>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d022      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a5b      	ldr	r2, [pc, #364]	; (8007e4c <HAL_DMA_IRQHandler+0x41c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a5a      	ldr	r2, [pc, #360]	; (8007e50 <HAL_DMA_IRQHandler+0x420>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a58      	ldr	r2, [pc, #352]	; (8007e54 <HAL_DMA_IRQHandler+0x424>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a57      	ldr	r2, [pc, #348]	; (8007e58 <HAL_DMA_IRQHandler+0x428>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a55      	ldr	r2, [pc, #340]	; (8007e5c <HAL_DMA_IRQHandler+0x42c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a54      	ldr	r2, [pc, #336]	; (8007e60 <HAL_DMA_IRQHandler+0x430>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_DMA_IRQHandler+0x2ee>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a52      	ldr	r2, [pc, #328]	; (8007e64 <HAL_DMA_IRQHandler+0x434>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d10a      	bne.n	8007d34 <HAL_DMA_IRQHandler+0x304>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf14      	ite	ne
 8007d2c:	2301      	movne	r3, #1
 8007d2e:	2300      	moveq	r3, #0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	e003      	b.n	8007d3c <HAL_DMA_IRQHandler+0x30c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00d      	beq.n	8007d5c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	2201      	movs	r2, #1
 8007d4a:	409a      	lsls	r2, r3
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	f043 0202 	orr.w	r2, r3, #2
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d60:	f003 031f 	and.w	r3, r3, #31
 8007d64:	2204      	movs	r2, #4
 8007d66:	409a      	lsls	r2, r3
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 808f 	beq.w	8007e90 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a2c      	ldr	r2, [pc, #176]	; (8007e28 <HAL_DMA_IRQHandler+0x3f8>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d04a      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a2a      	ldr	r2, [pc, #168]	; (8007e2c <HAL_DMA_IRQHandler+0x3fc>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d045      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a29      	ldr	r2, [pc, #164]	; (8007e30 <HAL_DMA_IRQHandler+0x400>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d040      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a27      	ldr	r2, [pc, #156]	; (8007e34 <HAL_DMA_IRQHandler+0x404>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d03b      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a26      	ldr	r2, [pc, #152]	; (8007e38 <HAL_DMA_IRQHandler+0x408>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d036      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a24      	ldr	r2, [pc, #144]	; (8007e3c <HAL_DMA_IRQHandler+0x40c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d031      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a23      	ldr	r2, [pc, #140]	; (8007e40 <HAL_DMA_IRQHandler+0x410>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d02c      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a21      	ldr	r2, [pc, #132]	; (8007e44 <HAL_DMA_IRQHandler+0x414>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d027      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a20      	ldr	r2, [pc, #128]	; (8007e48 <HAL_DMA_IRQHandler+0x418>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d022      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <HAL_DMA_IRQHandler+0x41c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d01d      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a1d      	ldr	r2, [pc, #116]	; (8007e50 <HAL_DMA_IRQHandler+0x420>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d018      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1b      	ldr	r2, [pc, #108]	; (8007e54 <HAL_DMA_IRQHandler+0x424>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d013      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a1a      	ldr	r2, [pc, #104]	; (8007e58 <HAL_DMA_IRQHandler+0x428>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00e      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a18      	ldr	r2, [pc, #96]	; (8007e5c <HAL_DMA_IRQHandler+0x42c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d009      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a17      	ldr	r2, [pc, #92]	; (8007e60 <HAL_DMA_IRQHandler+0x430>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d004      	beq.n	8007e12 <HAL_DMA_IRQHandler+0x3e2>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a15      	ldr	r2, [pc, #84]	; (8007e64 <HAL_DMA_IRQHandler+0x434>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d12a      	bne.n	8007e68 <HAL_DMA_IRQHandler+0x438>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf14      	ite	ne
 8007e20:	2301      	movne	r3, #1
 8007e22:	2300      	moveq	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	e023      	b.n	8007e70 <HAL_DMA_IRQHandler+0x440>
 8007e28:	40020010 	.word	0x40020010
 8007e2c:	40020028 	.word	0x40020028
 8007e30:	40020040 	.word	0x40020040
 8007e34:	40020058 	.word	0x40020058
 8007e38:	40020070 	.word	0x40020070
 8007e3c:	40020088 	.word	0x40020088
 8007e40:	400200a0 	.word	0x400200a0
 8007e44:	400200b8 	.word	0x400200b8
 8007e48:	40020410 	.word	0x40020410
 8007e4c:	40020428 	.word	0x40020428
 8007e50:	40020440 	.word	0x40020440
 8007e54:	40020458 	.word	0x40020458
 8007e58:	40020470 	.word	0x40020470
 8007e5c:	40020488 	.word	0x40020488
 8007e60:	400204a0 	.word	0x400204a0
 8007e64:	400204b8 	.word	0x400204b8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00d      	beq.n	8007e90 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e78:	f003 031f 	and.w	r3, r3, #31
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	409a      	lsls	r2, r3
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	f043 0204 	orr.w	r2, r3, #4
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e94:	f003 031f 	and.w	r3, r3, #31
 8007e98:	2210      	movs	r2, #16
 8007e9a:	409a      	lsls	r2, r3
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80a6 	beq.w	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a85      	ldr	r2, [pc, #532]	; (80080c0 <HAL_DMA_IRQHandler+0x690>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d04a      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a83      	ldr	r2, [pc, #524]	; (80080c4 <HAL_DMA_IRQHandler+0x694>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d045      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a82      	ldr	r2, [pc, #520]	; (80080c8 <HAL_DMA_IRQHandler+0x698>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d040      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a80      	ldr	r2, [pc, #512]	; (80080cc <HAL_DMA_IRQHandler+0x69c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d03b      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a7f      	ldr	r2, [pc, #508]	; (80080d0 <HAL_DMA_IRQHandler+0x6a0>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d036      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a7d      	ldr	r2, [pc, #500]	; (80080d4 <HAL_DMA_IRQHandler+0x6a4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d031      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a7c      	ldr	r2, [pc, #496]	; (80080d8 <HAL_DMA_IRQHandler+0x6a8>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d02c      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a7a      	ldr	r2, [pc, #488]	; (80080dc <HAL_DMA_IRQHandler+0x6ac>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d027      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a79      	ldr	r2, [pc, #484]	; (80080e0 <HAL_DMA_IRQHandler+0x6b0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d022      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a77      	ldr	r2, [pc, #476]	; (80080e4 <HAL_DMA_IRQHandler+0x6b4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d01d      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a76      	ldr	r2, [pc, #472]	; (80080e8 <HAL_DMA_IRQHandler+0x6b8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d018      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a74      	ldr	r2, [pc, #464]	; (80080ec <HAL_DMA_IRQHandler+0x6bc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a73      	ldr	r2, [pc, #460]	; (80080f0 <HAL_DMA_IRQHandler+0x6c0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a71      	ldr	r2, [pc, #452]	; (80080f4 <HAL_DMA_IRQHandler+0x6c4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a70      	ldr	r2, [pc, #448]	; (80080f8 <HAL_DMA_IRQHandler+0x6c8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_DMA_IRQHandler+0x516>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a6e      	ldr	r2, [pc, #440]	; (80080fc <HAL_DMA_IRQHandler+0x6cc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d10a      	bne.n	8007f5c <HAL_DMA_IRQHandler+0x52c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	e009      	b.n	8007f70 <HAL_DMA_IRQHandler+0x540>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	bf14      	ite	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	2300      	moveq	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d03e      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f78:	f003 031f 	and.w	r3, r3, #31
 8007f7c:	2210      	movs	r2, #16
 8007f7e:	409a      	lsls	r2, r3
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d018      	beq.n	8007fc4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d108      	bne.n	8007fb2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d024      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	e01f      	b.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d01b      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
 8007fc2:	e016      	b.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d107      	bne.n	8007fe2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0208 	bic.w	r2, r2, #8
 8007fe0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	409a      	lsls	r2, r3
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	4013      	ands	r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 8110 	beq.w	8008228 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a2c      	ldr	r2, [pc, #176]	; (80080c0 <HAL_DMA_IRQHandler+0x690>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d04a      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2b      	ldr	r2, [pc, #172]	; (80080c4 <HAL_DMA_IRQHandler+0x694>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d045      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a29      	ldr	r2, [pc, #164]	; (80080c8 <HAL_DMA_IRQHandler+0x698>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d040      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a28      	ldr	r2, [pc, #160]	; (80080cc <HAL_DMA_IRQHandler+0x69c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d03b      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a26      	ldr	r2, [pc, #152]	; (80080d0 <HAL_DMA_IRQHandler+0x6a0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d036      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a25      	ldr	r2, [pc, #148]	; (80080d4 <HAL_DMA_IRQHandler+0x6a4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d031      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a23      	ldr	r2, [pc, #140]	; (80080d8 <HAL_DMA_IRQHandler+0x6a8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d02c      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a22      	ldr	r2, [pc, #136]	; (80080dc <HAL_DMA_IRQHandler+0x6ac>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d027      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a20      	ldr	r2, [pc, #128]	; (80080e0 <HAL_DMA_IRQHandler+0x6b0>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d022      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a1f      	ldr	r2, [pc, #124]	; (80080e4 <HAL_DMA_IRQHandler+0x6b4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d01d      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1d      	ldr	r2, [pc, #116]	; (80080e8 <HAL_DMA_IRQHandler+0x6b8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d018      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1c      	ldr	r2, [pc, #112]	; (80080ec <HAL_DMA_IRQHandler+0x6bc>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d013      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a1a      	ldr	r2, [pc, #104]	; (80080f0 <HAL_DMA_IRQHandler+0x6c0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00e      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a19      	ldr	r2, [pc, #100]	; (80080f4 <HAL_DMA_IRQHandler+0x6c4>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <HAL_DMA_IRQHandler+0x6c8>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d004      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x678>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_DMA_IRQHandler+0x6cc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d12b      	bne.n	8008100 <HAL_DMA_IRQHandler+0x6d0>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bf14      	ite	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	2300      	moveq	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	e02a      	b.n	8008114 <HAL_DMA_IRQHandler+0x6e4>
 80080be:	bf00      	nop
 80080c0:	40020010 	.word	0x40020010
 80080c4:	40020028 	.word	0x40020028
 80080c8:	40020040 	.word	0x40020040
 80080cc:	40020058 	.word	0x40020058
 80080d0:	40020070 	.word	0x40020070
 80080d4:	40020088 	.word	0x40020088
 80080d8:	400200a0 	.word	0x400200a0
 80080dc:	400200b8 	.word	0x400200b8
 80080e0:	40020410 	.word	0x40020410
 80080e4:	40020428 	.word	0x40020428
 80080e8:	40020440 	.word	0x40020440
 80080ec:	40020458 	.word	0x40020458
 80080f0:	40020470 	.word	0x40020470
 80080f4:	40020488 	.word	0x40020488
 80080f8:	400204a0 	.word	0x400204a0
 80080fc:	400204b8 	.word	0x400204b8
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	bf14      	ite	ne
 800810e:	2301      	movne	r3, #1
 8008110:	2300      	moveq	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8087 	beq.w	8008228 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	2220      	movs	r2, #32
 8008124:	409a      	lsls	r2, r3
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b04      	cmp	r3, #4
 8008134:	d139      	bne.n	80081aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0216 	bic.w	r2, r2, #22
 8008144:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	695a      	ldr	r2, [r3, #20]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008154:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815a:	2b00      	cmp	r3, #0
 800815c:	d103      	bne.n	8008166 <HAL_DMA_IRQHandler+0x736>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008162:	2b00      	cmp	r3, #0
 8008164:	d007      	beq.n	8008176 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0208 	bic.w	r2, r2, #8
 8008174:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	223f      	movs	r2, #63	; 0x3f
 8008180:	409a      	lsls	r2, r3
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 834a 	beq.w	8008834 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
          }
          return;
 80081a8:	e344      	b.n	8008834 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d018      	beq.n	80081ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d108      	bne.n	80081d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d02c      	beq.n	8008228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
 80081d6:	e027      	b.n	8008228 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d023      	beq.n	8008228 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
 80081e8:	e01e      	b.n	8008228 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10f      	bne.n	8008218 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0210 	bic.w	r2, r2, #16
 8008206:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8306 	beq.w	800883e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 8088 	beq.w	8008350 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2204      	movs	r2, #4
 8008244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a7a      	ldr	r2, [pc, #488]	; (8008438 <HAL_DMA_IRQHandler+0xa08>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d04a      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a79      	ldr	r2, [pc, #484]	; (800843c <HAL_DMA_IRQHandler+0xa0c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d045      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a77      	ldr	r2, [pc, #476]	; (8008440 <HAL_DMA_IRQHandler+0xa10>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d040      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a76      	ldr	r2, [pc, #472]	; (8008444 <HAL_DMA_IRQHandler+0xa14>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d03b      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a74      	ldr	r2, [pc, #464]	; (8008448 <HAL_DMA_IRQHandler+0xa18>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d036      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a73      	ldr	r2, [pc, #460]	; (800844c <HAL_DMA_IRQHandler+0xa1c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d031      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a71      	ldr	r2, [pc, #452]	; (8008450 <HAL_DMA_IRQHandler+0xa20>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d02c      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a70      	ldr	r2, [pc, #448]	; (8008454 <HAL_DMA_IRQHandler+0xa24>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d027      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a6e      	ldr	r2, [pc, #440]	; (8008458 <HAL_DMA_IRQHandler+0xa28>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d022      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a6d      	ldr	r2, [pc, #436]	; (800845c <HAL_DMA_IRQHandler+0xa2c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d01d      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a6b      	ldr	r2, [pc, #428]	; (8008460 <HAL_DMA_IRQHandler+0xa30>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d018      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a6a      	ldr	r2, [pc, #424]	; (8008464 <HAL_DMA_IRQHandler+0xa34>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d013      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a68      	ldr	r2, [pc, #416]	; (8008468 <HAL_DMA_IRQHandler+0xa38>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00e      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a67      	ldr	r2, [pc, #412]	; (800846c <HAL_DMA_IRQHandler+0xa3c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d009      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a65      	ldr	r2, [pc, #404]	; (8008470 <HAL_DMA_IRQHandler+0xa40>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d004      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x8b8>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a64      	ldr	r2, [pc, #400]	; (8008474 <HAL_DMA_IRQHandler+0xa44>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d108      	bne.n	80082fa <HAL_DMA_IRQHandler+0x8ca>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	e007      	b.n	800830a <HAL_DMA_IRQHandler+0x8da>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0201 	bic.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	429a      	cmp	r2, r3
 8008314:	d307      	bcc.n	8008326 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1f2      	bne.n	800830a <HAL_DMA_IRQHandler+0x8da>
 8008324:	e000      	b.n	8008328 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008326:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d004      	beq.n	8008340 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2203      	movs	r2, #3
 800833a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800833e:	e003      	b.n	8008348 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8272 	beq.w	800883e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
 8008362:	e26c      	b.n	800883e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a43      	ldr	r2, [pc, #268]	; (8008478 <HAL_DMA_IRQHandler+0xa48>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d022      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a42      	ldr	r2, [pc, #264]	; (800847c <HAL_DMA_IRQHandler+0xa4c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d01d      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a40      	ldr	r2, [pc, #256]	; (8008480 <HAL_DMA_IRQHandler+0xa50>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d018      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a3f      	ldr	r2, [pc, #252]	; (8008484 <HAL_DMA_IRQHandler+0xa54>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d013      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a3d      	ldr	r2, [pc, #244]	; (8008488 <HAL_DMA_IRQHandler+0xa58>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d00e      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a3c      	ldr	r2, [pc, #240]	; (800848c <HAL_DMA_IRQHandler+0xa5c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d009      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a3a      	ldr	r2, [pc, #232]	; (8008490 <HAL_DMA_IRQHandler+0xa60>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_DMA_IRQHandler+0x984>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a39      	ldr	r2, [pc, #228]	; (8008494 <HAL_DMA_IRQHandler+0xa64>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d101      	bne.n	80083b8 <HAL_DMA_IRQHandler+0x988>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <HAL_DMA_IRQHandler+0x98a>
 80083b8:	2300      	movs	r3, #0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 823f 	beq.w	800883e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083cc:	f003 031f 	and.w	r3, r3, #31
 80083d0:	2204      	movs	r2, #4
 80083d2:	409a      	lsls	r2, r3
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80cd 	beq.w	8008578 <HAL_DMA_IRQHandler+0xb48>
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 80c7 	beq.w	8008578 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	2204      	movs	r2, #4
 80083f4:	409a      	lsls	r2, r3
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d049      	beq.n	8008498 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d109      	bne.n	8008422 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008412:	2b00      	cmp	r3, #0
 8008414:	f000 8210 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008420:	e20a      	b.n	8008838 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 8206 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008434:	e200      	b.n	8008838 <HAL_DMA_IRQHandler+0xe08>
 8008436:	bf00      	nop
 8008438:	40020010 	.word	0x40020010
 800843c:	40020028 	.word	0x40020028
 8008440:	40020040 	.word	0x40020040
 8008444:	40020058 	.word	0x40020058
 8008448:	40020070 	.word	0x40020070
 800844c:	40020088 	.word	0x40020088
 8008450:	400200a0 	.word	0x400200a0
 8008454:	400200b8 	.word	0x400200b8
 8008458:	40020410 	.word	0x40020410
 800845c:	40020428 	.word	0x40020428
 8008460:	40020440 	.word	0x40020440
 8008464:	40020458 	.word	0x40020458
 8008468:	40020470 	.word	0x40020470
 800846c:	40020488 	.word	0x40020488
 8008470:	400204a0 	.word	0x400204a0
 8008474:	400204b8 	.word	0x400204b8
 8008478:	58025408 	.word	0x58025408
 800847c:	5802541c 	.word	0x5802541c
 8008480:	58025430 	.word	0x58025430
 8008484:	58025444 	.word	0x58025444
 8008488:	58025458 	.word	0x58025458
 800848c:	5802546c 	.word	0x5802546c
 8008490:	58025480 	.word	0x58025480
 8008494:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d160      	bne.n	8008564 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7f      	ldr	r2, [pc, #508]	; (80086a4 <HAL_DMA_IRQHandler+0xc74>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d04a      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a7d      	ldr	r2, [pc, #500]	; (80086a8 <HAL_DMA_IRQHandler+0xc78>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d045      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a7c      	ldr	r2, [pc, #496]	; (80086ac <HAL_DMA_IRQHandler+0xc7c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d040      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a7a      	ldr	r2, [pc, #488]	; (80086b0 <HAL_DMA_IRQHandler+0xc80>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d03b      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a79      	ldr	r2, [pc, #484]	; (80086b4 <HAL_DMA_IRQHandler+0xc84>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d036      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a77      	ldr	r2, [pc, #476]	; (80086b8 <HAL_DMA_IRQHandler+0xc88>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d031      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a76      	ldr	r2, [pc, #472]	; (80086bc <HAL_DMA_IRQHandler+0xc8c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d02c      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a74      	ldr	r2, [pc, #464]	; (80086c0 <HAL_DMA_IRQHandler+0xc90>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d027      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a73      	ldr	r2, [pc, #460]	; (80086c4 <HAL_DMA_IRQHandler+0xc94>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d022      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a71      	ldr	r2, [pc, #452]	; (80086c8 <HAL_DMA_IRQHandler+0xc98>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01d      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a70      	ldr	r2, [pc, #448]	; (80086cc <HAL_DMA_IRQHandler+0xc9c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a6e      	ldr	r2, [pc, #440]	; (80086d0 <HAL_DMA_IRQHandler+0xca0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a6d      	ldr	r2, [pc, #436]	; (80086d4 <HAL_DMA_IRQHandler+0xca4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a6b      	ldr	r2, [pc, #428]	; (80086d8 <HAL_DMA_IRQHandler+0xca8>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a6a      	ldr	r2, [pc, #424]	; (80086dc <HAL_DMA_IRQHandler+0xcac>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_DMA_IRQHandler+0xb12>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a68      	ldr	r2, [pc, #416]	; (80086e0 <HAL_DMA_IRQHandler+0xcb0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d108      	bne.n	8008554 <HAL_DMA_IRQHandler+0xb24>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0208 	bic.w	r2, r2, #8
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e007      	b.n	8008564 <HAL_DMA_IRQHandler+0xb34>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0204 	bic.w	r2, r2, #4
 8008562:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8165 	beq.w	8008838 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008576:	e15f      	b.n	8008838 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	f003 031f 	and.w	r3, r3, #31
 8008580:	2202      	movs	r2, #2
 8008582:	409a      	lsls	r2, r3
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	4013      	ands	r3, r2
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80c5 	beq.w	8008718 <HAL_DMA_IRQHandler+0xce8>
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80bf 	beq.w	8008718 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	2202      	movs	r2, #2
 80085a4:	409a      	lsls	r2, r3
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d018      	beq.n	80085e6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 813a 	beq.w	800883c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085d0:	e134      	b.n	800883c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8130 	beq.w	800883c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085e4:	e12a      	b.n	800883c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 8089 	bne.w	8008704 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a2b      	ldr	r2, [pc, #172]	; (80086a4 <HAL_DMA_IRQHandler+0xc74>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d04a      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a29      	ldr	r2, [pc, #164]	; (80086a8 <HAL_DMA_IRQHandler+0xc78>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d045      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a28      	ldr	r2, [pc, #160]	; (80086ac <HAL_DMA_IRQHandler+0xc7c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d040      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a26      	ldr	r2, [pc, #152]	; (80086b0 <HAL_DMA_IRQHandler+0xc80>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d03b      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a25      	ldr	r2, [pc, #148]	; (80086b4 <HAL_DMA_IRQHandler+0xc84>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d036      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a23      	ldr	r2, [pc, #140]	; (80086b8 <HAL_DMA_IRQHandler+0xc88>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d031      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a22      	ldr	r2, [pc, #136]	; (80086bc <HAL_DMA_IRQHandler+0xc8c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d02c      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a20      	ldr	r2, [pc, #128]	; (80086c0 <HAL_DMA_IRQHandler+0xc90>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d027      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1f      	ldr	r2, [pc, #124]	; (80086c4 <HAL_DMA_IRQHandler+0xc94>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d022      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1d      	ldr	r2, [pc, #116]	; (80086c8 <HAL_DMA_IRQHandler+0xc98>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d01d      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <HAL_DMA_IRQHandler+0xc9c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d018      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a1a      	ldr	r2, [pc, #104]	; (80086d0 <HAL_DMA_IRQHandler+0xca0>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a19      	ldr	r2, [pc, #100]	; (80086d4 <HAL_DMA_IRQHandler+0xca4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d00e      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <HAL_DMA_IRQHandler+0xca8>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d009      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a16      	ldr	r2, [pc, #88]	; (80086dc <HAL_DMA_IRQHandler+0xcac>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d004      	beq.n	8008692 <HAL_DMA_IRQHandler+0xc62>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <HAL_DMA_IRQHandler+0xcb0>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d128      	bne.n	80086e4 <HAL_DMA_IRQHandler+0xcb4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 0214 	bic.w	r2, r2, #20
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	e027      	b.n	80086f4 <HAL_DMA_IRQHandler+0xcc4>
 80086a4:	40020010 	.word	0x40020010
 80086a8:	40020028 	.word	0x40020028
 80086ac:	40020040 	.word	0x40020040
 80086b0:	40020058 	.word	0x40020058
 80086b4:	40020070 	.word	0x40020070
 80086b8:	40020088 	.word	0x40020088
 80086bc:	400200a0 	.word	0x400200a0
 80086c0:	400200b8 	.word	0x400200b8
 80086c4:	40020410 	.word	0x40020410
 80086c8:	40020428 	.word	0x40020428
 80086cc:	40020440 	.word	0x40020440
 80086d0:	40020458 	.word	0x40020458
 80086d4:	40020470 	.word	0x40020470
 80086d8:	40020488 	.word	0x40020488
 80086dc:	400204a0 	.word	0x400204a0
 80086e0:	400204b8 	.word	0x400204b8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 020a 	bic.w	r2, r2, #10
 80086f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8097 	beq.w	800883c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008716:	e091      	b.n	800883c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871c:	f003 031f 	and.w	r3, r3, #31
 8008720:	2208      	movs	r2, #8
 8008722:	409a      	lsls	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 8088 	beq.w	800883e <HAL_DMA_IRQHandler+0xe0e>
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8082 	beq.w	800883e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a41      	ldr	r2, [pc, #260]	; (8008844 <HAL_DMA_IRQHandler+0xe14>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d04a      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3f      	ldr	r2, [pc, #252]	; (8008848 <HAL_DMA_IRQHandler+0xe18>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d045      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a3e      	ldr	r2, [pc, #248]	; (800884c <HAL_DMA_IRQHandler+0xe1c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d040      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a3c      	ldr	r2, [pc, #240]	; (8008850 <HAL_DMA_IRQHandler+0xe20>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d03b      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a3b      	ldr	r2, [pc, #236]	; (8008854 <HAL_DMA_IRQHandler+0xe24>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d036      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a39      	ldr	r2, [pc, #228]	; (8008858 <HAL_DMA_IRQHandler+0xe28>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d031      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a38      	ldr	r2, [pc, #224]	; (800885c <HAL_DMA_IRQHandler+0xe2c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d02c      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a36      	ldr	r2, [pc, #216]	; (8008860 <HAL_DMA_IRQHandler+0xe30>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d027      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a35      	ldr	r2, [pc, #212]	; (8008864 <HAL_DMA_IRQHandler+0xe34>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d022      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a33      	ldr	r2, [pc, #204]	; (8008868 <HAL_DMA_IRQHandler+0xe38>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d01d      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a32      	ldr	r2, [pc, #200]	; (800886c <HAL_DMA_IRQHandler+0xe3c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d018      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a30      	ldr	r2, [pc, #192]	; (8008870 <HAL_DMA_IRQHandler+0xe40>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d013      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2f      	ldr	r2, [pc, #188]	; (8008874 <HAL_DMA_IRQHandler+0xe44>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d00e      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a2d      	ldr	r2, [pc, #180]	; (8008878 <HAL_DMA_IRQHandler+0xe48>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d009      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	; (800887c <HAL_DMA_IRQHandler+0xe4c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d004      	beq.n	80087da <HAL_DMA_IRQHandler+0xdaa>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <HAL_DMA_IRQHandler+0xe50>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d108      	bne.n	80087ec <HAL_DMA_IRQHandler+0xdbc>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 021c 	bic.w	r2, r2, #28
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e007      	b.n	80087fc <HAL_DMA_IRQHandler+0xdcc>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f022 020e 	bic.w	r2, r2, #14
 80087fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008800:	f003 031f 	and.w	r3, r3, #31
 8008804:	2201      	movs	r2, #1
 8008806:	409a      	lsls	r2, r3
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d009      	beq.n	800883e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	4798      	blx	r3
 8008832:	e004      	b.n	800883e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008834:	bf00      	nop
 8008836:	e002      	b.n	800883e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008838:	bf00      	nop
 800883a:	e000      	b.n	800883e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800883c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800883e:	3728      	adds	r7, #40	; 0x28
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40020010 	.word	0x40020010
 8008848:	40020028 	.word	0x40020028
 800884c:	40020040 	.word	0x40020040
 8008850:	40020058 	.word	0x40020058
 8008854:	40020070 	.word	0x40020070
 8008858:	40020088 	.word	0x40020088
 800885c:	400200a0 	.word	0x400200a0
 8008860:	400200b8 	.word	0x400200b8
 8008864:	40020410 	.word	0x40020410
 8008868:	40020428 	.word	0x40020428
 800886c:	40020440 	.word	0x40020440
 8008870:	40020458 	.word	0x40020458
 8008874:	40020470 	.word	0x40020470
 8008878:	40020488 	.word	0x40020488
 800887c:	400204a0 	.word	0x400204a0
 8008880:	400204b8 	.word	0x400204b8

08008884 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008892:	b2db      	uxtb	r3, r3
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b087      	sub	sp, #28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
 80088c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a7f      	ldr	r2, [pc, #508]	; (8008ad4 <DMA_SetConfig+0x21c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d072      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a7d      	ldr	r2, [pc, #500]	; (8008ad8 <DMA_SetConfig+0x220>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d06d      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a7c      	ldr	r2, [pc, #496]	; (8008adc <DMA_SetConfig+0x224>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d068      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a7a      	ldr	r2, [pc, #488]	; (8008ae0 <DMA_SetConfig+0x228>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d063      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a79      	ldr	r2, [pc, #484]	; (8008ae4 <DMA_SetConfig+0x22c>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d05e      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a77      	ldr	r2, [pc, #476]	; (8008ae8 <DMA_SetConfig+0x230>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d059      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a76      	ldr	r2, [pc, #472]	; (8008aec <DMA_SetConfig+0x234>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d054      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a74      	ldr	r2, [pc, #464]	; (8008af0 <DMA_SetConfig+0x238>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d04f      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a73      	ldr	r2, [pc, #460]	; (8008af4 <DMA_SetConfig+0x23c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d04a      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a71      	ldr	r2, [pc, #452]	; (8008af8 <DMA_SetConfig+0x240>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d045      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a70      	ldr	r2, [pc, #448]	; (8008afc <DMA_SetConfig+0x244>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d040      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a6e      	ldr	r2, [pc, #440]	; (8008b00 <DMA_SetConfig+0x248>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d03b      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a6d      	ldr	r2, [pc, #436]	; (8008b04 <DMA_SetConfig+0x24c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d036      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a6b      	ldr	r2, [pc, #428]	; (8008b08 <DMA_SetConfig+0x250>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d031      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a6a      	ldr	r2, [pc, #424]	; (8008b0c <DMA_SetConfig+0x254>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d02c      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a68      	ldr	r2, [pc, #416]	; (8008b10 <DMA_SetConfig+0x258>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d027      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a67      	ldr	r2, [pc, #412]	; (8008b14 <DMA_SetConfig+0x25c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d022      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a65      	ldr	r2, [pc, #404]	; (8008b18 <DMA_SetConfig+0x260>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d01d      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a64      	ldr	r2, [pc, #400]	; (8008b1c <DMA_SetConfig+0x264>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d018      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a62      	ldr	r2, [pc, #392]	; (8008b20 <DMA_SetConfig+0x268>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d013      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a61      	ldr	r2, [pc, #388]	; (8008b24 <DMA_SetConfig+0x26c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d00e      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a5f      	ldr	r2, [pc, #380]	; (8008b28 <DMA_SetConfig+0x270>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d009      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a5e      	ldr	r2, [pc, #376]	; (8008b2c <DMA_SetConfig+0x274>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d004      	beq.n	80089c2 <DMA_SetConfig+0x10a>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a5c      	ldr	r2, [pc, #368]	; (8008b30 <DMA_SetConfig+0x278>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d101      	bne.n	80089c6 <DMA_SetConfig+0x10e>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e000      	b.n	80089c8 <DMA_SetConfig+0x110>
 80089c6:	2300      	movs	r3, #0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00d      	beq.n	80089e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d004      	beq.n	80089e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a39      	ldr	r2, [pc, #228]	; (8008ad4 <DMA_SetConfig+0x21c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d04a      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a38      	ldr	r2, [pc, #224]	; (8008ad8 <DMA_SetConfig+0x220>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d045      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a36      	ldr	r2, [pc, #216]	; (8008adc <DMA_SetConfig+0x224>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d040      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a35      	ldr	r2, [pc, #212]	; (8008ae0 <DMA_SetConfig+0x228>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d03b      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a33      	ldr	r2, [pc, #204]	; (8008ae4 <DMA_SetConfig+0x22c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d036      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a32      	ldr	r2, [pc, #200]	; (8008ae8 <DMA_SetConfig+0x230>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d031      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a30      	ldr	r2, [pc, #192]	; (8008aec <DMA_SetConfig+0x234>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d02c      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a2f      	ldr	r2, [pc, #188]	; (8008af0 <DMA_SetConfig+0x238>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d027      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a2d      	ldr	r2, [pc, #180]	; (8008af4 <DMA_SetConfig+0x23c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d022      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a2c      	ldr	r2, [pc, #176]	; (8008af8 <DMA_SetConfig+0x240>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d01d      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2a      	ldr	r2, [pc, #168]	; (8008afc <DMA_SetConfig+0x244>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d018      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a29      	ldr	r2, [pc, #164]	; (8008b00 <DMA_SetConfig+0x248>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d013      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a27      	ldr	r2, [pc, #156]	; (8008b04 <DMA_SetConfig+0x24c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00e      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a26      	ldr	r2, [pc, #152]	; (8008b08 <DMA_SetConfig+0x250>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d009      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a24      	ldr	r2, [pc, #144]	; (8008b0c <DMA_SetConfig+0x254>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d004      	beq.n	8008a88 <DMA_SetConfig+0x1d0>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a23      	ldr	r2, [pc, #140]	; (8008b10 <DMA_SetConfig+0x258>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d101      	bne.n	8008a8c <DMA_SetConfig+0x1d4>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e000      	b.n	8008a8e <DMA_SetConfig+0x1d6>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d059      	beq.n	8008b46 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a96:	f003 031f 	and.w	r3, r3, #31
 8008a9a:	223f      	movs	r2, #63	; 0x3f
 8008a9c:	409a      	lsls	r2, r3
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ab0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d138      	bne.n	8008b34 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ad2:	e086      	b.n	8008be2 <DMA_SetConfig+0x32a>
 8008ad4:	40020010 	.word	0x40020010
 8008ad8:	40020028 	.word	0x40020028
 8008adc:	40020040 	.word	0x40020040
 8008ae0:	40020058 	.word	0x40020058
 8008ae4:	40020070 	.word	0x40020070
 8008ae8:	40020088 	.word	0x40020088
 8008aec:	400200a0 	.word	0x400200a0
 8008af0:	400200b8 	.word	0x400200b8
 8008af4:	40020410 	.word	0x40020410
 8008af8:	40020428 	.word	0x40020428
 8008afc:	40020440 	.word	0x40020440
 8008b00:	40020458 	.word	0x40020458
 8008b04:	40020470 	.word	0x40020470
 8008b08:	40020488 	.word	0x40020488
 8008b0c:	400204a0 	.word	0x400204a0
 8008b10:	400204b8 	.word	0x400204b8
 8008b14:	58025408 	.word	0x58025408
 8008b18:	5802541c 	.word	0x5802541c
 8008b1c:	58025430 	.word	0x58025430
 8008b20:	58025444 	.word	0x58025444
 8008b24:	58025458 	.word	0x58025458
 8008b28:	5802546c 	.word	0x5802546c
 8008b2c:	58025480 	.word	0x58025480
 8008b30:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]
}
 8008b44:	e04d      	b.n	8008be2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a29      	ldr	r2, [pc, #164]	; (8008bf0 <DMA_SetConfig+0x338>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d022      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a27      	ldr	r2, [pc, #156]	; (8008bf4 <DMA_SetConfig+0x33c>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d01d      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a26      	ldr	r2, [pc, #152]	; (8008bf8 <DMA_SetConfig+0x340>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d018      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <DMA_SetConfig+0x344>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d013      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <DMA_SetConfig+0x348>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00e      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <DMA_SetConfig+0x34c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d009      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <DMA_SetConfig+0x350>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d004      	beq.n	8008b96 <DMA_SetConfig+0x2de>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1e      	ldr	r2, [pc, #120]	; (8008c0c <DMA_SetConfig+0x354>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d101      	bne.n	8008b9a <DMA_SetConfig+0x2e2>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e000      	b.n	8008b9c <DMA_SetConfig+0x2e4>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d020      	beq.n	8008be2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	2201      	movs	r2, #1
 8008baa:	409a      	lsls	r2, r3
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b40      	cmp	r3, #64	; 0x40
 8008bbe:	d108      	bne.n	8008bd2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	60da      	str	r2, [r3, #12]
}
 8008bd0:	e007      	b.n	8008be2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	60da      	str	r2, [r3, #12]
}
 8008be2:	bf00      	nop
 8008be4:	371c      	adds	r7, #28
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	58025408 	.word	0x58025408
 8008bf4:	5802541c 	.word	0x5802541c
 8008bf8:	58025430 	.word	0x58025430
 8008bfc:	58025444 	.word	0x58025444
 8008c00:	58025458 	.word	0x58025458
 8008c04:	5802546c 	.word	0x5802546c
 8008c08:	58025480 	.word	0x58025480
 8008c0c:	58025494 	.word	0x58025494

08008c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a42      	ldr	r2, [pc, #264]	; (8008d28 <DMA_CalcBaseAndBitshift+0x118>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d04a      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a41      	ldr	r2, [pc, #260]	; (8008d2c <DMA_CalcBaseAndBitshift+0x11c>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d045      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a3f      	ldr	r2, [pc, #252]	; (8008d30 <DMA_CalcBaseAndBitshift+0x120>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d040      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a3e      	ldr	r2, [pc, #248]	; (8008d34 <DMA_CalcBaseAndBitshift+0x124>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d03b      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a3c      	ldr	r2, [pc, #240]	; (8008d38 <DMA_CalcBaseAndBitshift+0x128>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d036      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a3b      	ldr	r2, [pc, #236]	; (8008d3c <DMA_CalcBaseAndBitshift+0x12c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d031      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a39      	ldr	r2, [pc, #228]	; (8008d40 <DMA_CalcBaseAndBitshift+0x130>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d02c      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a38      	ldr	r2, [pc, #224]	; (8008d44 <DMA_CalcBaseAndBitshift+0x134>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d027      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a36      	ldr	r2, [pc, #216]	; (8008d48 <DMA_CalcBaseAndBitshift+0x138>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d022      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a35      	ldr	r2, [pc, #212]	; (8008d4c <DMA_CalcBaseAndBitshift+0x13c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d01d      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a33      	ldr	r2, [pc, #204]	; (8008d50 <DMA_CalcBaseAndBitshift+0x140>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d018      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a32      	ldr	r2, [pc, #200]	; (8008d54 <DMA_CalcBaseAndBitshift+0x144>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d013      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a30      	ldr	r2, [pc, #192]	; (8008d58 <DMA_CalcBaseAndBitshift+0x148>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00e      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a2f      	ldr	r2, [pc, #188]	; (8008d5c <DMA_CalcBaseAndBitshift+0x14c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a2d      	ldr	r2, [pc, #180]	; (8008d60 <DMA_CalcBaseAndBitshift+0x150>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <DMA_CalcBaseAndBitshift+0xa8>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a2c      	ldr	r2, [pc, #176]	; (8008d64 <DMA_CalcBaseAndBitshift+0x154>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d101      	bne.n	8008cbc <DMA_CalcBaseAndBitshift+0xac>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <DMA_CalcBaseAndBitshift+0xae>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d024      	beq.n	8008d0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	3b10      	subs	r3, #16
 8008cca:	4a27      	ldr	r2, [pc, #156]	; (8008d68 <DMA_CalcBaseAndBitshift+0x158>)
 8008ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd0:	091b      	lsrs	r3, r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <DMA_CalcBaseAndBitshift+0x15c>)
 8008cdc:	5cd3      	ldrb	r3, [r2, r3]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d908      	bls.n	8008cfc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4b1f      	ldr	r3, [pc, #124]	; (8008d70 <DMA_CalcBaseAndBitshift+0x160>)
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	659a      	str	r2, [r3, #88]	; 0x58
 8008cfa:	e00d      	b.n	8008d18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	461a      	mov	r2, r3
 8008d02:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <DMA_CalcBaseAndBitshift+0x160>)
 8008d04:	4013      	ands	r3, r2
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6593      	str	r3, [r2, #88]	; 0x58
 8008d0a:	e005      	b.n	8008d18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	40020010 	.word	0x40020010
 8008d2c:	40020028 	.word	0x40020028
 8008d30:	40020040 	.word	0x40020040
 8008d34:	40020058 	.word	0x40020058
 8008d38:	40020070 	.word	0x40020070
 8008d3c:	40020088 	.word	0x40020088
 8008d40:	400200a0 	.word	0x400200a0
 8008d44:	400200b8 	.word	0x400200b8
 8008d48:	40020410 	.word	0x40020410
 8008d4c:	40020428 	.word	0x40020428
 8008d50:	40020440 	.word	0x40020440
 8008d54:	40020458 	.word	0x40020458
 8008d58:	40020470 	.word	0x40020470
 8008d5c:	40020488 	.word	0x40020488
 8008d60:	400204a0 	.word	0x400204a0
 8008d64:	400204b8 	.word	0x400204b8
 8008d68:	aaaaaaab 	.word	0xaaaaaaab
 8008d6c:	08018ef4 	.word	0x08018ef4
 8008d70:	fffffc00 	.word	0xfffffc00

08008d74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d120      	bne.n	8008dca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d858      	bhi.n	8008e42 <DMA_CheckFifoParam+0xce>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <DMA_CheckFifoParam+0x24>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008da9 	.word	0x08008da9
 8008d9c:	08008dbb 	.word	0x08008dbb
 8008da0:	08008da9 	.word	0x08008da9
 8008da4:	08008e43 	.word	0x08008e43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d048      	beq.n	8008e46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008db8:	e045      	b.n	8008e46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008dc2:	d142      	bne.n	8008e4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008dc8:	e03f      	b.n	8008e4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	d123      	bne.n	8008e1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d838      	bhi.n	8008e4e <DMA_CheckFifoParam+0xda>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <DMA_CheckFifoParam+0x70>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008dfb 	.word	0x08008dfb
 8008dec:	08008df5 	.word	0x08008df5
 8008df0:	08008e0d 	.word	0x08008e0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	73fb      	strb	r3, [r7, #15]
        break;
 8008df8:	e030      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d025      	beq.n	8008e52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e0a:	e022      	b.n	8008e52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e14:	d11f      	bne.n	8008e56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008e1a:	e01c      	b.n	8008e56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d902      	bls.n	8008e2a <DMA_CheckFifoParam+0xb6>
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d003      	beq.n	8008e30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008e28:	e018      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8008e2e:	e015      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00e      	beq.n	8008e5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e00b      	b.n	8008e5a <DMA_CheckFifoParam+0xe6>
        break;
 8008e42:	bf00      	nop
 8008e44:	e00a      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        break;
 8008e46:	bf00      	nop
 8008e48:	e008      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e006      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e004      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        break;
 8008e52:	bf00      	nop
 8008e54:	e002      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
        break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <DMA_CheckFifoParam+0xe8>
    break;
 8008e5a:	bf00      	nop
    }
  }

  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop

08008e6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a38      	ldr	r2, [pc, #224]	; (8008f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d022      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a36      	ldr	r2, [pc, #216]	; (8008f64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01d      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a35      	ldr	r2, [pc, #212]	; (8008f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d018      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a33      	ldr	r2, [pc, #204]	; (8008f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a32      	ldr	r2, [pc, #200]	; (8008f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00e      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a30      	ldr	r2, [pc, #192]	; (8008f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d009      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a2f      	ldr	r2, [pc, #188]	; (8008f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a2d      	ldr	r2, [pc, #180]	; (8008f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d101      	bne.n	8008ece <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01a      	beq.n	8008f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	3b08      	subs	r3, #8
 8008edc:	4a28      	ldr	r2, [pc, #160]	; (8008f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008ede:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee2:	091b      	lsrs	r3, r3, #4
 8008ee4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4b26      	ldr	r3, [pc, #152]	; (8008f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008eea:	4413      	add	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	461a      	mov	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008ef8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 031f 	and.w	r3, r3, #31
 8008f00:	2201      	movs	r2, #1
 8008f02:	409a      	lsls	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008f08:	e024      	b.n	8008f54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	3b10      	subs	r3, #16
 8008f12:	4a1e      	ldr	r2, [pc, #120]	; (8008f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008f14:	fba2 2303 	umull	r2, r3, r2, r3
 8008f18:	091b      	lsrs	r3, r3, #4
 8008f1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a1c      	ldr	r2, [pc, #112]	; (8008f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d806      	bhi.n	8008f32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a1b      	ldr	r2, [pc, #108]	; (8008f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d902      	bls.n	8008f32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4b18      	ldr	r3, [pc, #96]	; (8008f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a16      	ldr	r2, [pc, #88]	; (8008f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008f44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	409a      	lsls	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	58025408 	.word	0x58025408
 8008f64:	5802541c 	.word	0x5802541c
 8008f68:	58025430 	.word	0x58025430
 8008f6c:	58025444 	.word	0x58025444
 8008f70:	58025458 	.word	0x58025458
 8008f74:	5802546c 	.word	0x5802546c
 8008f78:	58025480 	.word	0x58025480
 8008f7c:	58025494 	.word	0x58025494
 8008f80:	cccccccd 	.word	0xcccccccd
 8008f84:	16009600 	.word	0x16009600
 8008f88:	58025880 	.word	0x58025880
 8008f8c:	aaaaaaab 	.word	0xaaaaaaab
 8008f90:	400204b8 	.word	0x400204b8
 8008f94:	4002040f 	.word	0x4002040f
 8008f98:	10008200 	.word	0x10008200
 8008f9c:	40020880 	.word	0x40020880

08008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d04a      	beq.n	800904c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2b08      	cmp	r3, #8
 8008fba:	d847      	bhi.n	800904c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a25      	ldr	r2, [pc, #148]	; (8009058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d022      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a24      	ldr	r2, [pc, #144]	; (800905c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d01d      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a22      	ldr	r2, [pc, #136]	; (8009060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d018      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a21      	ldr	r2, [pc, #132]	; (8009064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d013      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1f      	ldr	r2, [pc, #124]	; (8009068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00e      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d009      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1b      	ldr	r2, [pc, #108]	; (8009074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d101      	bne.n	8009010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009010:	2300      	movs	r3, #0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00a      	beq.n	800902c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4b17      	ldr	r3, [pc, #92]	; (8009078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800901a:	4413      	add	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a15      	ldr	r2, [pc, #84]	; (800907c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009028:	671a      	str	r2, [r3, #112]	; 0x70
 800902a:	e009      	b.n	8009040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4b14      	ldr	r3, [pc, #80]	; (8009080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a11      	ldr	r2, [pc, #68]	; (8009084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800903e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3b01      	subs	r3, #1
 8009044:	2201      	movs	r2, #1
 8009046:	409a      	lsls	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	58025408 	.word	0x58025408
 800905c:	5802541c 	.word	0x5802541c
 8009060:	58025430 	.word	0x58025430
 8009064:	58025444 	.word	0x58025444
 8009068:	58025458 	.word	0x58025458
 800906c:	5802546c 	.word	0x5802546c
 8009070:	58025480 	.word	0x58025480
 8009074:	58025494 	.word	0x58025494
 8009078:	1600963f 	.word	0x1600963f
 800907c:	58025940 	.word	0x58025940
 8009080:	1000823f 	.word	0x1000823f
 8009084:	40020940 	.word	0x40020940

08009088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009088:	b480      	push	{r7}
 800908a:	b089      	sub	sp, #36	; 0x24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009096:	4b89      	ldr	r3, [pc, #548]	; (80092bc <HAL_GPIO_Init+0x234>)
 8009098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800909a:	e194      	b.n	80093c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	2101      	movs	r1, #1
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	fa01 f303 	lsl.w	r3, r1, r3
 80090a8:	4013      	ands	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 8186 	beq.w	80093c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f003 0303 	and.w	r3, r3, #3
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d005      	beq.n	80090cc <HAL_GPIO_Init+0x44>
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f003 0303 	and.w	r3, r3, #3
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d130      	bne.n	800912e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	005b      	lsls	r3, r3, #1
 80090d6:	2203      	movs	r2, #3
 80090d8:	fa02 f303 	lsl.w	r3, r2, r3
 80090dc:	43db      	mvns	r3, r3
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	4013      	ands	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009102:	2201      	movs	r2, #1
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	43db      	mvns	r3, r3
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	4013      	ands	r3, r2
 8009110:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	f003 0201 	and.w	r2, r3, #1
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	4313      	orrs	r3, r2
 8009126:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d017      	beq.n	800916a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	2203      	movs	r2, #3
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	43db      	mvns	r3, r3
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	4013      	ands	r3, r2
 8009150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	689a      	ldr	r2, [r3, #8]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	4313      	orrs	r3, r2
 8009162:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	2b02      	cmp	r3, #2
 8009174:	d123      	bne.n	80091be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	08da      	lsrs	r2, r3, #3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3208      	adds	r2, #8
 800917e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	220f      	movs	r2, #15
 800918e:	fa02 f303 	lsl.w	r3, r2, r3
 8009192:	43db      	mvns	r3, r3
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	4013      	ands	r3, r2
 8009198:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f003 0307 	and.w	r3, r3, #7
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	08da      	lsrs	r2, r3, #3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3208      	adds	r2, #8
 80091b8:	69b9      	ldr	r1, [r7, #24]
 80091ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	2203      	movs	r2, #3
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	43db      	mvns	r3, r3
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	4013      	ands	r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f003 0203 	and.w	r2, r3, #3
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	fa02 f303 	lsl.w	r3, r2, r3
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 80e0 	beq.w	80093c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009200:	4b2f      	ldr	r3, [pc, #188]	; (80092c0 <HAL_GPIO_Init+0x238>)
 8009202:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009206:	4a2e      	ldr	r2, [pc, #184]	; (80092c0 <HAL_GPIO_Init+0x238>)
 8009208:	f043 0302 	orr.w	r3, r3, #2
 800920c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009210:	4b2b      	ldr	r3, [pc, #172]	; (80092c0 <HAL_GPIO_Init+0x238>)
 8009212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800921e:	4a29      	ldr	r2, [pc, #164]	; (80092c4 <HAL_GPIO_Init+0x23c>)
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	089b      	lsrs	r3, r3, #2
 8009224:	3302      	adds	r3, #2
 8009226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800922a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	220f      	movs	r2, #15
 8009236:	fa02 f303 	lsl.w	r3, r2, r3
 800923a:	43db      	mvns	r3, r3
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4013      	ands	r3, r2
 8009240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a20      	ldr	r2, [pc, #128]	; (80092c8 <HAL_GPIO_Init+0x240>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d052      	beq.n	80092f0 <HAL_GPIO_Init+0x268>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <HAL_GPIO_Init+0x244>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d031      	beq.n	80092b6 <HAL_GPIO_Init+0x22e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1e      	ldr	r2, [pc, #120]	; (80092d0 <HAL_GPIO_Init+0x248>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d02b      	beq.n	80092b2 <HAL_GPIO_Init+0x22a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a1d      	ldr	r2, [pc, #116]	; (80092d4 <HAL_GPIO_Init+0x24c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d025      	beq.n	80092ae <HAL_GPIO_Init+0x226>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a1c      	ldr	r2, [pc, #112]	; (80092d8 <HAL_GPIO_Init+0x250>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01f      	beq.n	80092aa <HAL_GPIO_Init+0x222>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <HAL_GPIO_Init+0x254>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d019      	beq.n	80092a6 <HAL_GPIO_Init+0x21e>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a1a      	ldr	r2, [pc, #104]	; (80092e0 <HAL_GPIO_Init+0x258>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d013      	beq.n	80092a2 <HAL_GPIO_Init+0x21a>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a19      	ldr	r2, [pc, #100]	; (80092e4 <HAL_GPIO_Init+0x25c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00d      	beq.n	800929e <HAL_GPIO_Init+0x216>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a18      	ldr	r2, [pc, #96]	; (80092e8 <HAL_GPIO_Init+0x260>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d007      	beq.n	800929a <HAL_GPIO_Init+0x212>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a17      	ldr	r2, [pc, #92]	; (80092ec <HAL_GPIO_Init+0x264>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d101      	bne.n	8009296 <HAL_GPIO_Init+0x20e>
 8009292:	2309      	movs	r3, #9
 8009294:	e02d      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 8009296:	230a      	movs	r3, #10
 8009298:	e02b      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 800929a:	2308      	movs	r3, #8
 800929c:	e029      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 800929e:	2307      	movs	r3, #7
 80092a0:	e027      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092a2:	2306      	movs	r3, #6
 80092a4:	e025      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092a6:	2305      	movs	r3, #5
 80092a8:	e023      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092aa:	2304      	movs	r3, #4
 80092ac:	e021      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092ae:	2303      	movs	r3, #3
 80092b0:	e01f      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e01d      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e01b      	b.n	80092f2 <HAL_GPIO_Init+0x26a>
 80092ba:	bf00      	nop
 80092bc:	58000080 	.word	0x58000080
 80092c0:	58024400 	.word	0x58024400
 80092c4:	58000400 	.word	0x58000400
 80092c8:	58020000 	.word	0x58020000
 80092cc:	58020400 	.word	0x58020400
 80092d0:	58020800 	.word	0x58020800
 80092d4:	58020c00 	.word	0x58020c00
 80092d8:	58021000 	.word	0x58021000
 80092dc:	58021400 	.word	0x58021400
 80092e0:	58021800 	.word	0x58021800
 80092e4:	58021c00 	.word	0x58021c00
 80092e8:	58022000 	.word	0x58022000
 80092ec:	58022400 	.word	0x58022400
 80092f0:	2300      	movs	r3, #0
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	f002 0203 	and.w	r2, r2, #3
 80092f8:	0092      	lsls	r2, r2, #2
 80092fa:	4093      	lsls	r3, r2
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	4313      	orrs	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009302:	4938      	ldr	r1, [pc, #224]	; (80093e4 <HAL_GPIO_Init+0x35c>)
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	089b      	lsrs	r3, r3, #2
 8009308:	3302      	adds	r3, #2
 800930a:	69ba      	ldr	r2, [r7, #24]
 800930c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	43db      	mvns	r3, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4013      	ands	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d003      	beq.n	8009336 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800933e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	43db      	mvns	r3, r3
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	4013      	ands	r3, r2
 800934e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800935c:	69ba      	ldr	r2, [r7, #24]
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	43db      	mvns	r3, r3
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	4013      	ands	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	4313      	orrs	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	43db      	mvns	r3, r3
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	4013      	ands	r3, r2
 80093a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	3301      	adds	r3, #1
 80093c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f47f ae63 	bne.w	800909c <HAL_GPIO_Init+0x14>
  }
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	3724      	adds	r7, #36	; 0x24
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	58000400 	.word	0x58000400

080093e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	887b      	ldrh	r3, [r7, #2]
 80093fa:	4013      	ands	r3, r2
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e001      	b.n	800940a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009406:	2300      	movs	r3, #0
 8009408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	807b      	strh	r3, [r7, #2]
 8009424:	4613      	mov	r3, r2
 8009426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009428:	787b      	ldrb	r3, [r7, #1]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800942e:	887a      	ldrh	r2, [r7, #2]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009434:	e003      	b.n	800943e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009436:	887b      	ldrh	r3, [r7, #2]
 8009438:	041a      	lsls	r2, r3, #16
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	619a      	str	r2, [r3, #24]
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d101      	bne.n	800945e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e08b      	b.n	8009576 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009464:	b2db      	uxtb	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7f7 ffc8 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2224      	movs	r2, #36	; 0x24
 800947c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800949c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d107      	bne.n	80094c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689a      	ldr	r2, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	e006      	b.n	80094d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689a      	ldr	r2, [r3, #8]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d108      	bne.n	80094ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ea:	605a      	str	r2, [r3, #4]
 80094ec:	e007      	b.n	80094fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	6859      	ldr	r1, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <HAL_I2C_Init+0x134>)
 800950a:	430b      	orrs	r3, r1
 800950c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800951c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69d9      	ldr	r1, [r3, #28]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	02008000 	.word	0x02008000

08009584 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08a      	sub	sp, #40	; 0x28
 8009588:	af02      	add	r7, sp, #8
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	607a      	str	r2, [r7, #4]
 800958e:	461a      	mov	r2, r3
 8009590:	460b      	mov	r3, r1
 8009592:	817b      	strh	r3, [r7, #10]
 8009594:	4613      	mov	r3, r2
 8009596:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b20      	cmp	r3, #32
 80095a6:	f040 80ef 	bne.w	8009788 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b8:	d101      	bne.n	80095be <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80095ba:	2302      	movs	r3, #2
 80095bc:	e0e5      	b.n	800978a <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d101      	bne.n	80095cc <HAL_I2C_Master_Transmit_DMA+0x48>
 80095c8:	2302      	movs	r3, #2
 80095ca:	e0de      	b.n	800978a <HAL_I2C_Master_Transmit_DMA+0x206>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2221      	movs	r2, #33	; 0x21
 80095d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2210      	movs	r2, #16
 80095e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	893a      	ldrh	r2, [r7, #8]
 80095f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4a66      	ldr	r2, [pc, #408]	; (8009794 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80095fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	4a66      	ldr	r2, [pc, #408]	; (8009798 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8009600:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009606:	b29b      	uxth	r3, r3
 8009608:	2bff      	cmp	r3, #255	; 0xff
 800960a:	d906      	bls.n	800961a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	22ff      	movs	r2, #255	; 0xff
 8009610:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009616:	61fb      	str	r3, [r7, #28]
 8009618:	e007      	b.n	800962a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961e:	b29a      	uxth	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009624:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009628:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d01a      	beq.n	8009668 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	1c5a      	adds	r2, r3, #1
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800964c:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966c:	2b00      	cmp	r3, #0
 800966e:	d074      	beq.n	800975a <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009674:	2b00      	cmp	r3, #0
 8009676:	d022      	beq.n	80096be <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967c:	4a47      	ldr	r2, [pc, #284]	; (800979c <HAL_I2C_Master_Transmit_DMA+0x218>)
 800967e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	4a46      	ldr	r2, [pc, #280]	; (80097a0 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009686:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968c:	2200      	movs	r2, #0
 800968e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009694:	2200      	movs	r2, #0
 8009696:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80096a8:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80096ae:	f7fd f9f1 	bl	8006a94 <HAL_DMA_Start_IT>
 80096b2:	4603      	mov	r3, r0
 80096b4:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d13a      	bne.n	8009732 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80096bc:	e013      	b.n	80096e6 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2220      	movs	r2, #32
 80096c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e051      	b.n	800978a <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	3301      	adds	r3, #1
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	8979      	ldrh	r1, [r7, #10]
 80096f2:	4b2c      	ldr	r3, [pc, #176]	; (80097a4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f002 f83b 	bl	800b774 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009702:	b29a      	uxth	r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	b29a      	uxth	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009718:	2110      	movs	r1, #16
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f002 f85c 	bl	800b7d8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	e028      	b.n	8009784 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009746:	f043 0210 	orr.w	r2, r3, #16
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e017      	b.n	800978a <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4a12      	ldr	r2, [pc, #72]	; (80097a8 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800975e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	8979      	ldrh	r1, [r7, #10]
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f002 f800 	bl	800b774 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800977c:	2101      	movs	r1, #1
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f002 f82a 	bl	800b7d8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	e000      	b.n	800978a <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8009788:	2302      	movs	r3, #2
  }
}
 800978a:	4618      	mov	r0, r3
 800978c:	3720      	adds	r7, #32
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	ffff0000 	.word	0xffff0000
 8009798:	08009fdf 	.word	0x08009fdf
 800979c:	0800b397 	.word	0x0800b397
 80097a0:	0800b4c5 	.word	0x0800b4c5
 80097a4:	80002000 	.word	0x80002000
 80097a8:	08009b6f 	.word	0x08009b6f

080097ac <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	607a      	str	r2, [r7, #4]
 80097b6:	461a      	mov	r2, r3
 80097b8:	460b      	mov	r3, r1
 80097ba:	817b      	strh	r3, [r7, #10]
 80097bc:	4613      	mov	r3, r2
 80097be:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b20      	cmp	r3, #32
 80097ca:	f040 80cd 	bne.w	8009968 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097dc:	d101      	bne.n	80097e2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80097de:	2302      	movs	r3, #2
 80097e0:	e0c3      	b.n	800996a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_I2C_Master_Receive_DMA+0x44>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e0bc      	b.n	800996a <HAL_I2C_Master_Receive_DMA+0x1be>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2222      	movs	r2, #34	; 0x22
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2210      	movs	r2, #16
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	893a      	ldrh	r2, [r7, #8]
 8009818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4a55      	ldr	r2, [pc, #340]	; (8009974 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4a55      	ldr	r2, [pc, #340]	; (8009978 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8009824:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982a:	b29b      	uxth	r3, r3
 800982c:	2bff      	cmp	r3, #255	; 0xff
 800982e:	d906      	bls.n	800983e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	22ff      	movs	r2, #255	; 0xff
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8009836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800983a:	617b      	str	r3, [r7, #20]
 800983c:	e007      	b.n	800984e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800984c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009852:	2b00      	cmp	r3, #0
 8009854:	d070      	beq.n	8009938 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d020      	beq.n	80098a0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009862:	4a46      	ldr	r2, [pc, #280]	; (800997c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8009864:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	4a45      	ldr	r2, [pc, #276]	; (8009980 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800986c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009872:	2200      	movs	r2, #0
 8009874:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987a:	2200      	movs	r2, #0
 800987c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3324      	adds	r3, #36	; 0x24
 8009888:	4619      	mov	r1, r3
 800988a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009890:	f7fd f900 	bl	8006a94 <HAL_DMA_Start_IT>
 8009894:	4603      	mov	r3, r0
 8009896:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009898:	7cfb      	ldrb	r3, [r7, #19]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d138      	bne.n	8009910 <HAL_I2C_Master_Receive_DMA+0x164>
 800989e:	e013      	b.n	80098c8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e050      	b.n	800996a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	8979      	ldrh	r1, [r7, #10]
 80098d0:	4b2c      	ldr	r3, [pc, #176]	; (8009984 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f001 ff4c 	bl	800b774 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80098f6:	2110      	movs	r1, #16
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f001 ff6d 	bl	800b7d8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e029      	b.n	8009964 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2220      	movs	r2, #32
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009924:	f043 0210 	orr.w	r2, r3, #16
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e018      	b.n	800996a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4a13      	ldr	r2, [pc, #76]	; (8009988 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800993c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009942:	b2da      	uxtb	r2, r3
 8009944:	8979      	ldrh	r1, [r7, #10]
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 ff10 	bl	800b774 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800995c:	2102      	movs	r1, #2
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f001 ff3a 	bl	800b7d8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009964:	2300      	movs	r3, #0
 8009966:	e000      	b.n	800996a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8009968:	2302      	movs	r3, #2
  }
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	ffff0000 	.word	0xffff0000
 8009978:	08009fdf 	.word	0x08009fdf
 800997c:	0800b42d 	.word	0x0800b42d
 8009980:	0800b4c5 	.word	0x0800b4c5
 8009984:	80002400 	.word	0x80002400
 8009988:	08009b6f 	.word	0x08009b6f

0800998c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	68f9      	ldr	r1, [r7, #12]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	4798      	blx	r3
  }
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	0a1b      	lsrs	r3, r3, #8
 80099dc:	f003 0301 	and.w	r3, r3, #1
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d010      	beq.n	8009a06 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	09db      	lsrs	r3, r3, #7
 80099e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f4:	f043 0201 	orr.w	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a04:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	0a9b      	lsrs	r3, r3, #10
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d010      	beq.n	8009a34 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	09db      	lsrs	r3, r3, #7
 8009a16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a22:	f043 0208 	orr.w	r2, r3, #8
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	0a5b      	lsrs	r3, r3, #9
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d010      	beq.n	8009a62 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	09db      	lsrs	r3, r3, #7
 8009a44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a50:	f043 0202 	orr.w	r2, r3, #2
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f003 030b 	and.w	r3, r3, #11
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d003      	beq.n	8009a7a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8009a72:	68f9      	ldr	r1, [r7, #12]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f001 fb53 	bl	800b120 <I2C_ITError>
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b083      	sub	sp, #12
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009ab2:	bf00      	nop
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009ac6:	bf00      	nop
 8009ac8:	370c      	adds	r7, #12
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009ad2:	b480      	push	{r7}
 8009ad4:	b083      	sub	sp, #12
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009af6:	bf00      	nop
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009b0a:	bf00      	nop
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009b1e:	bf00      	nop
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr

08009b2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009b2a:	b480      	push	{r7}
 8009b2c:	b083      	sub	sp, #12
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr

08009b52 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b60:	b2db      	uxtb	r3, r3
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b088      	sub	sp, #32
 8009b72:	af02      	add	r7, sp, #8
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <I2C_Master_ISR_IT+0x1e>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e120      	b.n	8009dce <I2C_Master_ISR_IT+0x260>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	091b      	lsrs	r3, r3, #4
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d013      	beq.n	8009bc8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	091b      	lsrs	r3, r3, #4
 8009ba4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00d      	beq.n	8009bc8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2210      	movs	r2, #16
 8009bb2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb8:	f043 0204 	orr.w	r2, r3, #4
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f001 fbc4 	bl	800b34e <I2C_Flush_TXDR>
 8009bc6:	e0ed      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	089b      	lsrs	r3, r3, #2
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d023      	beq.n	8009c1c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	089b      	lsrs	r3, r3, #2
 8009bd8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01d      	beq.n	8009c1c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0304 	bic.w	r3, r3, #4
 8009be6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c04:	3b01      	subs	r3, #1
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009c1a:	e0c3      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	099b      	lsrs	r3, r3, #6
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d12a      	bne.n	8009c7e <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d024      	beq.n	8009c7e <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	085b      	lsrs	r3, r3, #1
 8009c38:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d01e      	beq.n	8009c7e <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80ac 	beq.w	8009da4 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	781a      	ldrb	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	3b01      	subs	r3, #1
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8009c7c:	e092      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	09db      	lsrs	r3, r3, #7
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05d      	beq.n	8009d46 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	099b      	lsrs	r3, r3, #6
 8009c8e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d057      	beq.n	8009d46 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d040      	beq.n	8009d22 <I2C_Master_ISR_IT+0x1b4>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d13c      	bne.n	8009d22 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cb4:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2bff      	cmp	r3, #255	; 0xff
 8009cbe:	d90e      	bls.n	8009cde <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	22ff      	movs	r2, #255	; 0xff
 8009cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	8a79      	ldrh	r1, [r7, #18]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cd6:	68f8      	ldr	r0, [r7, #12]
 8009cd8:	f001 fd4c 	bl	800b774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cdc:	e032      	b.n	8009d44 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cf0:	d00b      	beq.n	8009d0a <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	8a79      	ldrh	r1, [r7, #18]
 8009cfe:	2000      	movs	r0, #0
 8009d00:	9000      	str	r0, [sp, #0]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f001 fd36 	bl	800b774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d08:	e01c      	b.n	8009d44 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	8a79      	ldrh	r1, [r7, #18]
 8009d12:	2300      	movs	r3, #0
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f001 fd2a 	bl	800b774 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d20:	e010      	b.n	8009d44 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d30:	d003      	beq.n	8009d3a <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fdde 	bl	800a8f4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d38:	e034      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009d3a:	2140      	movs	r1, #64	; 0x40
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f001 f9ef 	bl	800b120 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d42:	e02f      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
 8009d44:	e02e      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	099b      	lsrs	r3, r3, #6
 8009d4a:	f003 0301 	and.w	r3, r3, #1
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d028      	beq.n	8009da4 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	099b      	lsrs	r3, r3, #6
 8009d56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d022      	beq.n	8009da4 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d119      	bne.n	8009d9c <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d76:	d015      	beq.n	8009da4 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d80:	d108      	bne.n	8009d94 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d90:	605a      	str	r2, [r3, #4]
 8009d92:	e007      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 fdad 	bl	800a8f4 <I2C_ITMasterSeqCplt>
 8009d9a:	e003      	b.n	8009da4 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009d9c:	2140      	movs	r1, #64	; 0x40
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f001 f9be 	bl	800b120 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	f003 0301 	and.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009dbc:	6979      	ldr	r1, [r7, #20]
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f000 fe34 	bl	800aa2c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3718      	adds	r7, #24
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	60f8      	str	r0, [r7, #12]
 8009dde:	60b9      	str	r1, [r7, #8]
 8009de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d101      	bne.n	8009dfa <I2C_Slave_ISR_IT+0x24>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e0ed      	b.n	8009fd6 <I2C_Slave_ISR_IT+0x200>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	095b      	lsrs	r3, r3, #5
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	095b      	lsrs	r3, r3, #5
 8009e12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d004      	beq.n	8009e24 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009e1a:	6939      	ldr	r1, [r7, #16]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fecf 	bl	800abc0 <I2C_ITSlaveCplt>
 8009e22:	e0d3      	b.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	091b      	lsrs	r3, r3, #4
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d04d      	beq.n	8009ecc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	091b      	lsrs	r3, r3, #4
 8009e34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d047      	beq.n	8009ecc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d128      	bne.n	8009e98 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b28      	cmp	r3, #40	; 0x28
 8009e50:	d108      	bne.n	8009e64 <I2C_Slave_ISR_IT+0x8e>
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e58:	d104      	bne.n	8009e64 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009e5a:	6939      	ldr	r1, [r7, #16]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f001 f909 	bl	800b074 <I2C_ITListenCplt>
 8009e62:	e032      	b.n	8009eca <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b29      	cmp	r3, #41	; 0x29
 8009e6e:	d10e      	bne.n	8009e8e <I2C_Slave_ISR_IT+0xb8>
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e76:	d00a      	beq.n	8009e8e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2210      	movs	r2, #16
 8009e7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f001 fa64 	bl	800b34e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fd71 	bl	800a96e <I2C_ITSlaveSeqCplt>
 8009e8c:	e01d      	b.n	8009eca <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2210      	movs	r2, #16
 8009e94:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8009e96:	e096      	b.n	8009fc6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea4:	f043 0204 	orr.w	r2, r3, #4
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <I2C_Slave_ISR_IT+0xe6>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009eb8:	f040 8085 	bne.w	8009fc6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f001 f92c 	bl	800b120 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009ec8:	e07d      	b.n	8009fc6 <I2C_Slave_ISR_IT+0x1f0>
 8009eca:	e07c      	b.n	8009fc6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	089b      	lsrs	r3, r3, #2
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d030      	beq.n	8009f3a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	089b      	lsrs	r3, r3, #2
 8009edc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02a      	beq.n	8009f3a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d018      	beq.n	8009f20 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	b2d2      	uxtb	r2, r2
 8009efa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d14f      	bne.n	8009fca <I2C_Slave_ISR_IT+0x1f4>
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009f30:	d04b      	beq.n	8009fca <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fd1b 	bl	800a96e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009f38:	e047      	b.n	8009fca <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	08db      	lsrs	r3, r3, #3
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	08db      	lsrs	r3, r3, #3
 8009f4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d004      	beq.n	8009f5c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009f52:	6939      	ldr	r1, [r7, #16]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fc49 	bl	800a7ec <I2C_ITAddrCplt>
 8009f5a:	e037      	b.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	085b      	lsrs	r3, r3, #1
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d031      	beq.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	085b      	lsrs	r3, r3, #1
 8009f6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d02b      	beq.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d018      	beq.n	8009fb0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	781a      	ldrb	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	851a      	strh	r2, [r3, #40]	; 0x28
 8009fae:	e00d      	b.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fb6:	d002      	beq.n	8009fbe <I2C_Slave_ISR_IT+0x1e8>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fcd5 	bl	800a96e <I2C_ITSlaveSeqCplt>
 8009fc4:	e002      	b.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8009fca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b088      	sub	sp, #32
 8009fe2:	af02      	add	r7, sp, #8
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d101      	bne.n	8009ff8 <I2C_Master_ISR_DMA+0x1a>
 8009ff4:	2302      	movs	r3, #2
 8009ff6:	e0e1      	b.n	800a1bc <I2C_Master_ISR_DMA+0x1de>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	091b      	lsrs	r3, r3, #4
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d017      	beq.n	800a03c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	091b      	lsrs	r3, r3, #4
 800a010:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a014:	2b00      	cmp	r3, #0
 800a016:	d011      	beq.n	800a03c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2210      	movs	r2, #16
 800a01e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a024:	f043 0204 	orr.w	r2, r3, #4
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a02c:	2120      	movs	r1, #32
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f001 fbd2 	bl	800b7d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f001 f98a 	bl	800b34e <I2C_Flush_TXDR>
 800a03a:	e0ba      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	09db      	lsrs	r3, r3, #7
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d072      	beq.n	800a12e <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	099b      	lsrs	r3, r3, #6
 800a04c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a050:	2b00      	cmp	r3, #0
 800a052:	d06c      	beq.n	800a12e <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a062:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a068:	b29b      	uxth	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d04e      	beq.n	800a10c <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	b29b      	uxth	r3, r3
 800a076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a07a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a080:	b29b      	uxth	r3, r3
 800a082:	2bff      	cmp	r3, #255	; 0xff
 800a084:	d906      	bls.n	800a094 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	22ff      	movs	r2, #255	; 0xff
 800a08a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a08c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a090:	617b      	str	r3, [r7, #20]
 800a092:	e010      	b.n	800a0b6 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a0a6:	d003      	beq.n	800a0b0 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e002      	b.n	800a0b6 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a0b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	8a79      	ldrh	r1, [r7, #18]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f001 fb55 	bl	800b774 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b22      	cmp	r3, #34	; 0x22
 800a0e6:	d108      	bne.n	800a0fa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a0f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a0f8:	e05b      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a108:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a10a:	e052      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a11a:	d003      	beq.n	800a124 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 fbe9 	bl	800a8f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a122:	e046      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fffa 	bl	800b120 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a12c:	e041      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	099b      	lsrs	r3, r3, #6
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d029      	beq.n	800a18e <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	099b      	lsrs	r3, r3, #6
 800a13e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a142:	2b00      	cmp	r3, #0
 800a144:	d023      	beq.n	800a18e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d119      	bne.n	800a184 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a15e:	d027      	beq.n	800a1b0 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a168:	d108      	bne.n	800a17c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	685a      	ldr	r2, [r3, #4]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a178:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a17a:	e019      	b.n	800a1b0 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 fbb9 	bl	800a8f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a182:	e015      	b.n	800a1b0 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a184:	2140      	movs	r1, #64	; 0x40
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 ffca 	bl	800b120 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a18c:	e010      	b.n	800a1b0 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	095b      	lsrs	r3, r3, #5
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d005      	beq.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a1a6:	68b9      	ldr	r1, [r7, #8]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f000 fc3f 	bl	800aa2c <I2C_ITMasterCplt>
 800a1ae:	e000      	b.n	800a1b2 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a1b0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b088      	sub	sp, #32
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a1d0:	4b92      	ldr	r3, [pc, #584]	; (800a41c <I2C_Mem_ISR_DMA+0x258>)
 800a1d2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d101      	bne.n	800a1e2 <I2C_Mem_ISR_DMA+0x1e>
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e118      	b.n	800a414 <I2C_Mem_ISR_DMA+0x250>
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	091b      	lsrs	r3, r3, #4
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d017      	beq.n	800a226 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	091b      	lsrs	r3, r3, #4
 800a1fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d011      	beq.n	800a226 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2210      	movs	r2, #16
 800a208:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	f043 0204 	orr.w	r2, r3, #4
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a216:	2120      	movs	r1, #32
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f001 fadd 	bl	800b7d8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f001 f895 	bl	800b34e <I2C_Flush_TXDR>
 800a224:	e0f1      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	085b      	lsrs	r3, r3, #1
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00f      	beq.n	800a252 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	085b      	lsrs	r3, r3, #1
 800a236:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d009      	beq.n	800a252 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a246:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a24e:	651a      	str	r2, [r3, #80]	; 0x50
 800a250:	e0db      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	09db      	lsrs	r3, r3, #7
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d060      	beq.n	800a320 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	099b      	lsrs	r3, r3, #6
 800a262:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a266:	2b00      	cmp	r3, #0
 800a268:	d05a      	beq.n	800a320 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a26a:	2101      	movs	r1, #1
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f001 fb37 	bl	800b8e0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a272:	2110      	movs	r1, #16
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f001 faaf 	bl	800b7d8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a27e:	b29b      	uxth	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d048      	beq.n	800a316 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2bff      	cmp	r3, #255	; 0xff
 800a28c:	d910      	bls.n	800a2b0 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	22ff      	movs	r2, #255	; 0xff
 800a292:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a298:	b299      	uxth	r1, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f001 fa63 	bl	800b774 <I2C_TransferConfig>
 800a2ae:	e011      	b.n	800a2d4 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2be:	b299      	uxth	r1, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f001 fa50 	bl	800b774 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b22      	cmp	r3, #34	; 0x22
 800a2f0:	d108      	bne.n	800a304 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a300:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a302:	e082      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a312:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a314:	e079      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a316:	2140      	movs	r1, #64	; 0x40
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 ff01 	bl	800b120 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a31e:	e074      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	099b      	lsrs	r3, r3, #6
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d05e      	beq.n	800a3ea <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	099b      	lsrs	r3, r3, #6
 800a330:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a334:	2b00      	cmp	r3, #0
 800a336:	d058      	beq.n	800a3ea <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a338:	2101      	movs	r1, #1
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f001 fad0 	bl	800b8e0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a340:	2110      	movs	r1, #16
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f001 fa48 	bl	800b7d8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b22      	cmp	r3, #34	; 0x22
 800a352:	d101      	bne.n	800a358 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800a354:	4b32      	ldr	r3, [pc, #200]	; (800a420 <I2C_Mem_ISR_DMA+0x25c>)
 800a356:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	2bff      	cmp	r3, #255	; 0xff
 800a360:	d910      	bls.n	800a384 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	22ff      	movs	r2, #255	; 0xff
 800a366:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a36c:	b299      	uxth	r1, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a372:	b2da      	uxtb	r2, r3
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f001 f9f9 	bl	800b774 <I2C_TransferConfig>
 800a382:	e011      	b.n	800a3a8 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a392:	b299      	uxth	r1, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a398:	b2da      	uxtb	r2, r3
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f001 f9e6 	bl	800b774 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b22      	cmp	r3, #34	; 0x22
 800a3c4:	d108      	bne.n	800a3d8 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3d4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3d6:	e018      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a3e8:	e00f      	b.n	800a40a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	095b      	lsrs	r3, r3, #5
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	095b      	lsrs	r3, r3, #5
 800a3fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 fb11 	bl	800aa2c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	80002000 	.word	0x80002000
 800a420:	80002400 	.word	0x80002400

0800a424 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a436:	2300      	movs	r3, #0
 800a438:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a440:	2b01      	cmp	r3, #1
 800a442:	d101      	bne.n	800a448 <I2C_Slave_ISR_DMA+0x24>
 800a444:	2302      	movs	r3, #2
 800a446:	e1cc      	b.n	800a7e2 <I2C_Slave_ISR_DMA+0x3be>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	095b      	lsrs	r3, r3, #5
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00a      	beq.n	800a472 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	095b      	lsrs	r3, r3, #5
 800a460:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a464:	2b00      	cmp	r3, #0
 800a466:	d004      	beq.n	800a472 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fba8 	bl	800abc0 <I2C_ITSlaveCplt>
 800a470:	e1b2      	b.n	800a7d8 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	091b      	lsrs	r3, r3, #4
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 819c 	beq.w	800a7b8 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	091b      	lsrs	r3, r3, #4
 800a484:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8195 	beq.w	800a7b8 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	0b9b      	lsrs	r3, r3, #14
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	0bdb      	lsrs	r3, r3, #15
 800a49e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8181 	beq.w	800a7aa <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d07c      	beq.n	800a5aa <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	0bdb      	lsrs	r3, r3, #15
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d076      	beq.n	800a5aa <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a75      	ldr	r2, [pc, #468]	; (800a698 <I2C_Slave_ISR_DMA+0x274>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d059      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a73      	ldr	r2, [pc, #460]	; (800a69c <I2C_Slave_ISR_DMA+0x278>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d053      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a71      	ldr	r2, [pc, #452]	; (800a6a0 <I2C_Slave_ISR_DMA+0x27c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d04d      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a6f      	ldr	r2, [pc, #444]	; (800a6a4 <I2C_Slave_ISR_DMA+0x280>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d047      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a6d      	ldr	r2, [pc, #436]	; (800a6a8 <I2C_Slave_ISR_DMA+0x284>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d041      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a6b      	ldr	r2, [pc, #428]	; (800a6ac <I2C_Slave_ISR_DMA+0x288>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d03b      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a69      	ldr	r2, [pc, #420]	; (800a6b0 <I2C_Slave_ISR_DMA+0x28c>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d035      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a67      	ldr	r2, [pc, #412]	; (800a6b4 <I2C_Slave_ISR_DMA+0x290>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d02f      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a65      	ldr	r2, [pc, #404]	; (800a6b8 <I2C_Slave_ISR_DMA+0x294>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d029      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a63      	ldr	r2, [pc, #396]	; (800a6bc <I2C_Slave_ISR_DMA+0x298>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d023      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a61      	ldr	r2, [pc, #388]	; (800a6c0 <I2C_Slave_ISR_DMA+0x29c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d01d      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a5f      	ldr	r2, [pc, #380]	; (800a6c4 <I2C_Slave_ISR_DMA+0x2a0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d017      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a5d      	ldr	r2, [pc, #372]	; (800a6c8 <I2C_Slave_ISR_DMA+0x2a4>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d011      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a5b      	ldr	r2, [pc, #364]	; (800a6cc <I2C_Slave_ISR_DMA+0x2a8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00b      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a59      	ldr	r2, [pc, #356]	; (800a6d0 <I2C_Slave_ISR_DMA+0x2ac>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d005      	beq.n	800a57c <I2C_Slave_ISR_DMA+0x158>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a57      	ldr	r2, [pc, #348]	; (800a6d4 <I2C_Slave_ISR_DMA+0x2b0>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d109      	bne.n	800a590 <I2C_Slave_ISR_DMA+0x16c>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	bf0c      	ite	eq
 800a588:	2301      	moveq	r3, #1
 800a58a:	2300      	movne	r3, #0
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	e008      	b.n	800a5a2 <I2C_Slave_ISR_DMA+0x17e>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f000 809f 	beq.w	800a6f2 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	0b9b      	lsrs	r3, r3, #14
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 8098 	beq.w	800a6f2 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a33      	ldr	r2, [pc, #204]	; (800a698 <I2C_Slave_ISR_DMA+0x274>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d059      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a31      	ldr	r2, [pc, #196]	; (800a69c <I2C_Slave_ISR_DMA+0x278>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d053      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a2f      	ldr	r2, [pc, #188]	; (800a6a0 <I2C_Slave_ISR_DMA+0x27c>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d04d      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a2d      	ldr	r2, [pc, #180]	; (800a6a4 <I2C_Slave_ISR_DMA+0x280>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d047      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a2b      	ldr	r2, [pc, #172]	; (800a6a8 <I2C_Slave_ISR_DMA+0x284>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d041      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a29      	ldr	r2, [pc, #164]	; (800a6ac <I2C_Slave_ISR_DMA+0x288>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d03b      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a27      	ldr	r2, [pc, #156]	; (800a6b0 <I2C_Slave_ISR_DMA+0x28c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d035      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a25      	ldr	r2, [pc, #148]	; (800a6b4 <I2C_Slave_ISR_DMA+0x290>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d02f      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a23      	ldr	r2, [pc, #140]	; (800a6b8 <I2C_Slave_ISR_DMA+0x294>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d029      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a21      	ldr	r2, [pc, #132]	; (800a6bc <I2C_Slave_ISR_DMA+0x298>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d023      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1f      	ldr	r2, [pc, #124]	; (800a6c0 <I2C_Slave_ISR_DMA+0x29c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d01d      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <I2C_Slave_ISR_DMA+0x2a0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d017      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a1b      	ldr	r2, [pc, #108]	; (800a6c8 <I2C_Slave_ISR_DMA+0x2a4>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d011      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a19      	ldr	r2, [pc, #100]	; (800a6cc <I2C_Slave_ISR_DMA+0x2a8>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d00b      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a17      	ldr	r2, [pc, #92]	; (800a6d0 <I2C_Slave_ISR_DMA+0x2ac>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d005      	beq.n	800a682 <I2C_Slave_ISR_DMA+0x25e>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a15      	ldr	r2, [pc, #84]	; (800a6d4 <I2C_Slave_ISR_DMA+0x2b0>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d12a      	bne.n	800a6d8 <I2C_Slave_ISR_DMA+0x2b4>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bf0c      	ite	eq
 800a68e:	2301      	moveq	r3, #1
 800a690:	2300      	movne	r3, #0
 800a692:	b2db      	uxtb	r3, r3
 800a694:	e029      	b.n	800a6ea <I2C_Slave_ISR_DMA+0x2c6>
 800a696:	bf00      	nop
 800a698:	40020010 	.word	0x40020010
 800a69c:	40020028 	.word	0x40020028
 800a6a0:	40020040 	.word	0x40020040
 800a6a4:	40020058 	.word	0x40020058
 800a6a8:	40020070 	.word	0x40020070
 800a6ac:	40020088 	.word	0x40020088
 800a6b0:	400200a0 	.word	0x400200a0
 800a6b4:	400200b8 	.word	0x400200b8
 800a6b8:	40020410 	.word	0x40020410
 800a6bc:	40020428 	.word	0x40020428
 800a6c0:	40020440 	.word	0x40020440
 800a6c4:	40020458 	.word	0x40020458
 800a6c8:	40020470 	.word	0x40020470
 800a6cc:	40020488 	.word	0x40020488
 800a6d0:	400204a0 	.word	0x400204a0
 800a6d4:	400204b8 	.word	0x400204b8
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	bf0c      	ite	eq
 800a6e4:	2301      	moveq	r3, #1
 800a6e6:	2300      	movne	r3, #0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d128      	bne.n	800a74a <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b28      	cmp	r3, #40	; 0x28
 800a702:	d108      	bne.n	800a716 <I2C_Slave_ISR_DMA+0x2f2>
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a70a:	d104      	bne.n	800a716 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f000 fcb0 	bl	800b074 <I2C_ITListenCplt>
 800a714:	e048      	b.n	800a7a8 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b29      	cmp	r3, #41	; 0x29
 800a720:	d10e      	bne.n	800a740 <I2C_Slave_ISR_DMA+0x31c>
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a728:	d00a      	beq.n	800a740 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2210      	movs	r2, #16
 800a730:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 fe0b 	bl	800b34e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f918 	bl	800a96e <I2C_ITSlaveSeqCplt>
 800a73e:	e033      	b.n	800a7a8 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2210      	movs	r2, #16
 800a746:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a748:	e034      	b.n	800a7b4 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2210      	movs	r2, #16
 800a750:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a756:	f043 0204 	orr.w	r2, r3, #4
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a764:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <I2C_Slave_ISR_DMA+0x350>
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a772:	d11f      	bne.n	800a7b4 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b21      	cmp	r3, #33	; 0x21
 800a778:	d002      	beq.n	800a780 <I2C_Slave_ISR_DMA+0x35c>
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	2b29      	cmp	r3, #41	; 0x29
 800a77e:	d103      	bne.n	800a788 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2221      	movs	r2, #33	; 0x21
 800a784:	631a      	str	r2, [r3, #48]	; 0x30
 800a786:	e008      	b.n	800a79a <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b22      	cmp	r3, #34	; 0x22
 800a78c:	d002      	beq.n	800a794 <I2C_Slave_ISR_DMA+0x370>
 800a78e:	7dfb      	ldrb	r3, [r7, #23]
 800a790:	2b2a      	cmp	r3, #42	; 0x2a
 800a792:	d102      	bne.n	800a79a <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2222      	movs	r2, #34	; 0x22
 800a798:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a79e:	4619      	mov	r1, r3
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fcbd 	bl	800b120 <I2C_ITError>
      if (treatdmanack == 1U)
 800a7a6:	e005      	b.n	800a7b4 <I2C_Slave_ISR_DMA+0x390>
 800a7a8:	e004      	b.n	800a7b4 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2210      	movs	r2, #16
 800a7b0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a7b2:	e011      	b.n	800a7d8 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800a7b4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a7b6:	e00f      	b.n	800a7d8 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	08db      	lsrs	r3, r3, #3
 800a7bc:	f003 0301 	and.w	r3, r3, #1
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d009      	beq.n	800a7d8 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	08db      	lsrs	r3, r3, #3
 800a7c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f000 f80a 	bl	800a7ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop

0800a7ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a802:	2b28      	cmp	r3, #40	; 0x28
 800a804:	d16a      	bne.n	800a8dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	699b      	ldr	r3, [r3, #24]
 800a81c:	0c1b      	lsrs	r3, r3, #16
 800a81e:	b29b      	uxth	r3, r3
 800a820:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a824:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a832:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a840:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	2b02      	cmp	r3, #2
 800a848:	d138      	bne.n	800a8bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a84a:	897b      	ldrh	r3, [r7, #10]
 800a84c:	09db      	lsrs	r3, r3, #7
 800a84e:	b29a      	uxth	r2, r3
 800a850:	89bb      	ldrh	r3, [r7, #12]
 800a852:	4053      	eors	r3, r2
 800a854:	b29b      	uxth	r3, r3
 800a856:	f003 0306 	and.w	r3, r3, #6
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d11c      	bne.n	800a898 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a85e:	897b      	ldrh	r3, [r7, #10]
 800a860:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a866:	1c5a      	adds	r2, r3, #1
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a870:	2b02      	cmp	r3, #2
 800a872:	d13b      	bne.n	800a8ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2208      	movs	r2, #8
 800a880:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a88a:	89ba      	ldrh	r2, [r7, #12]
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff f91e 	bl	8009ad2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a896:	e029      	b.n	800a8ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a898:	893b      	ldrh	r3, [r7, #8]
 800a89a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a89c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 f81d 	bl	800b8e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a8ae:	89ba      	ldrh	r2, [r7, #12]
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff f90c 	bl	8009ad2 <HAL_I2C_AddrCallback>
}
 800a8ba:	e017      	b.n	800a8ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a8bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f80d 	bl	800b8e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a8ce:	89ba      	ldrh	r2, [r7, #12]
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f7ff f8fc 	bl	8009ad2 <HAL_I2C_AddrCallback>
}
 800a8da:	e007      	b.n	800a8ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a8ec:	bf00      	nop
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	2b21      	cmp	r3, #33	; 0x21
 800a90e:	d115      	bne.n	800a93c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2220      	movs	r2, #32
 800a914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2211      	movs	r2, #17
 800a91c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a924:	2101      	movs	r1, #1
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 ffda 	bl	800b8e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff f8a4 	bl	8009a82 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a93a:	e014      	b.n	800a966 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2220      	movs	r2, #32
 800a940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2212      	movs	r2, #18
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a950:	2102      	movs	r1, #2
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 ffc4 	bl	800b8e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff f898 	bl	8009a96 <HAL_I2C_MasterRxCpltCallback>
}
 800a966:	bf00      	nop
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	0b9b      	lsrs	r3, r3, #14
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d008      	beq.n	800a9a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	e00d      	b.n	800a9c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	0bdb      	lsrs	r3, r3, #15
 800a9a8:	f003 0301 	and.w	r3, r3, #1
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d007      	beq.n	800a9c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a9be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b29      	cmp	r3, #41	; 0x29
 800a9ca:	d112      	bne.n	800a9f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2228      	movs	r2, #40	; 0x28
 800a9d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2221      	movs	r2, #33	; 0x21
 800a9d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a9da:	2101      	movs	r1, #1
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 ff7f 	bl	800b8e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff f85d 	bl	8009aaa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a9f0:	e017      	b.n	800aa22 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d111      	bne.n	800aa22 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2228      	movs	r2, #40	; 0x28
 800aa02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2222      	movs	r2, #34	; 0x22
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aa0c:	2102      	movs	r1, #2
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 ff66 	bl	800b8e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff f84e 	bl	8009abe <HAL_I2C_SlaveRxCpltCallback>
}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
	...

0800aa2c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2220      	movs	r2, #32
 800aa40:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b21      	cmp	r3, #33	; 0x21
 800aa4c:	d107      	bne.n	800aa5e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aa4e:	2101      	movs	r1, #1
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 ff45 	bl	800b8e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2211      	movs	r2, #17
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30
 800aa5c:	e00c      	b.n	800aa78 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b22      	cmp	r3, #34	; 0x22
 800aa68:	d106      	bne.n	800aa78 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aa6a:	2102      	movs	r1, #2
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 ff37 	bl	800b8e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2212      	movs	r2, #18
 800aa76:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b4d      	ldr	r3, [pc, #308]	; (800abb8 <I2C_ITMasterCplt+0x18c>)
 800aa84:	400b      	ands	r3, r1
 800aa86:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a4a      	ldr	r2, [pc, #296]	; (800abbc <I2C_ITMasterCplt+0x190>)
 800aa92:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	091b      	lsrs	r3, r3, #4
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2210      	movs	r2, #16
 800aaa6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaac:	f043 0204 	orr.w	r2, r3, #4
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b60      	cmp	r3, #96	; 0x60
 800aabe:	d10b      	bne.n	800aad8 <I2C_ITMasterCplt+0xac>
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	089b      	lsrs	r3, r3, #2
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800aad6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fc38 	bl	800b34e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b60      	cmp	r3, #96	; 0x60
 800aaee:	d002      	beq.n	800aaf6 <I2C_ITMasterCplt+0xca>
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d006      	beq.n	800ab04 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fb0f 	bl	800b120 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ab02:	e054      	b.n	800abae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b21      	cmp	r3, #33	; 0x21
 800ab0e:	d124      	bne.n	800ab5a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b40      	cmp	r3, #64	; 0x40
 800ab28:	d10b      	bne.n	800ab42 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f7fe ffe1 	bl	8009b02 <HAL_I2C_MemTxCpltCallback>
}
 800ab40:	e035      	b.n	800abae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fe ff95 	bl	8009a82 <HAL_I2C_MasterTxCpltCallback>
}
 800ab58:	e029      	b.n	800abae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b22      	cmp	r3, #34	; 0x22
 800ab64:	d123      	bne.n	800abae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d10b      	bne.n	800ab98 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7fe ffc0 	bl	8009b16 <HAL_I2C_MemRxCpltCallback>
}
 800ab96:	e00a      	b.n	800abae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7fe ff74 	bl	8009a96 <HAL_I2C_MasterRxCpltCallback>
}
 800abae:	bf00      	nop
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	fe00e800 	.word	0xfe00e800
 800abbc:	ffff0000 	.word	0xffff0000

0800abc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abda:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abe2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2220      	movs	r2, #32
 800abea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800abec:	7afb      	ldrb	r3, [r7, #11]
 800abee:	2b21      	cmp	r3, #33	; 0x21
 800abf0:	d002      	beq.n	800abf8 <I2C_ITSlaveCplt+0x38>
 800abf2:	7afb      	ldrb	r3, [r7, #11]
 800abf4:	2b29      	cmp	r3, #41	; 0x29
 800abf6:	d108      	bne.n	800ac0a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800abf8:	f248 0101 	movw	r1, #32769	; 0x8001
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fe6f 	bl	800b8e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2221      	movs	r2, #33	; 0x21
 800ac06:	631a      	str	r2, [r3, #48]	; 0x30
 800ac08:	e019      	b.n	800ac3e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ac0a:	7afb      	ldrb	r3, [r7, #11]
 800ac0c:	2b22      	cmp	r3, #34	; 0x22
 800ac0e:	d002      	beq.n	800ac16 <I2C_ITSlaveCplt+0x56>
 800ac10:	7afb      	ldrb	r3, [r7, #11]
 800ac12:	2b2a      	cmp	r3, #42	; 0x2a
 800ac14:	d108      	bne.n	800ac28 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ac16:	f248 0102 	movw	r1, #32770	; 0x8002
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fe60 	bl	800b8e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2222      	movs	r2, #34	; 0x22
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30
 800ac26:	e00a      	b.n	800ac3e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	2b28      	cmp	r3, #40	; 0x28
 800ac2c:	d107      	bne.n	800ac3e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800ac2e:	f248 0103 	movw	r1, #32771	; 0x8003
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fe54 	bl	800b8e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac4c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6859      	ldr	r1, [r3, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4b80      	ldr	r3, [pc, #512]	; (800ae5c <I2C_ITSlaveCplt+0x29c>)
 800ac5a:	400b      	ands	r3, r1
 800ac5c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb75 	bl	800b34e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	0b9b      	lsrs	r3, r3, #14
 800ac68:	f003 0301 	and.w	r3, r3, #1
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d07a      	beq.n	800ad66 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac7e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8112 	beq.w	800aeae <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a73      	ldr	r2, [pc, #460]	; (800ae60 <I2C_ITSlaveCplt+0x2a0>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d059      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a71      	ldr	r2, [pc, #452]	; (800ae64 <I2C_ITSlaveCplt+0x2a4>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d053      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a6f      	ldr	r2, [pc, #444]	; (800ae68 <I2C_ITSlaveCplt+0x2a8>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d04d      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a6d      	ldr	r2, [pc, #436]	; (800ae6c <I2C_ITSlaveCplt+0x2ac>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d047      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a6b      	ldr	r2, [pc, #428]	; (800ae70 <I2C_ITSlaveCplt+0x2b0>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d041      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a69      	ldr	r2, [pc, #420]	; (800ae74 <I2C_ITSlaveCplt+0x2b4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d03b      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a67      	ldr	r2, [pc, #412]	; (800ae78 <I2C_ITSlaveCplt+0x2b8>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d035      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a65      	ldr	r2, [pc, #404]	; (800ae7c <I2C_ITSlaveCplt+0x2bc>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d02f      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a63      	ldr	r2, [pc, #396]	; (800ae80 <I2C_ITSlaveCplt+0x2c0>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d029      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a61      	ldr	r2, [pc, #388]	; (800ae84 <I2C_ITSlaveCplt+0x2c4>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d023      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a5f      	ldr	r2, [pc, #380]	; (800ae88 <I2C_ITSlaveCplt+0x2c8>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d01d      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a5d      	ldr	r2, [pc, #372]	; (800ae8c <I2C_ITSlaveCplt+0x2cc>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d017      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a5b      	ldr	r2, [pc, #364]	; (800ae90 <I2C_ITSlaveCplt+0x2d0>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d011      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a59      	ldr	r2, [pc, #356]	; (800ae94 <I2C_ITSlaveCplt+0x2d4>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d00b      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a57      	ldr	r2, [pc, #348]	; (800ae98 <I2C_ITSlaveCplt+0x2d8>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d005      	beq.n	800ad4a <I2C_ITSlaveCplt+0x18a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a55      	ldr	r2, [pc, #340]	; (800ae9c <I2C_ITSlaveCplt+0x2dc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d105      	bne.n	800ad56 <I2C_ITSlaveCplt+0x196>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	e004      	b.n	800ad60 <I2C_ITSlaveCplt+0x1a0>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	8553      	strh	r3, [r2, #42]	; 0x2a
 800ad64:	e0a3      	b.n	800aeae <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	0bdb      	lsrs	r3, r3, #15
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f000 809d 	beq.w	800aeae <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad82:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f000 8090 	beq.w	800aeae <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a32      	ldr	r2, [pc, #200]	; (800ae60 <I2C_ITSlaveCplt+0x2a0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d059      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a30      	ldr	r2, [pc, #192]	; (800ae64 <I2C_ITSlaveCplt+0x2a4>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d053      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a2e      	ldr	r2, [pc, #184]	; (800ae68 <I2C_ITSlaveCplt+0x2a8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d04d      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a2c      	ldr	r2, [pc, #176]	; (800ae6c <I2C_ITSlaveCplt+0x2ac>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d047      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a2a      	ldr	r2, [pc, #168]	; (800ae70 <I2C_ITSlaveCplt+0x2b0>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d041      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a28      	ldr	r2, [pc, #160]	; (800ae74 <I2C_ITSlaveCplt+0x2b4>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d03b      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a26      	ldr	r2, [pc, #152]	; (800ae78 <I2C_ITSlaveCplt+0x2b8>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d035      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a24      	ldr	r2, [pc, #144]	; (800ae7c <I2C_ITSlaveCplt+0x2bc>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d02f      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a22      	ldr	r2, [pc, #136]	; (800ae80 <I2C_ITSlaveCplt+0x2c0>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d029      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a20      	ldr	r2, [pc, #128]	; (800ae84 <I2C_ITSlaveCplt+0x2c4>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d023      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1e      	ldr	r2, [pc, #120]	; (800ae88 <I2C_ITSlaveCplt+0x2c8>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d01d      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a1c      	ldr	r2, [pc, #112]	; (800ae8c <I2C_ITSlaveCplt+0x2cc>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d017      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1a      	ldr	r2, [pc, #104]	; (800ae90 <I2C_ITSlaveCplt+0x2d0>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d011      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a18      	ldr	r2, [pc, #96]	; (800ae94 <I2C_ITSlaveCplt+0x2d4>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d00b      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a16      	ldr	r2, [pc, #88]	; (800ae98 <I2C_ITSlaveCplt+0x2d8>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d005      	beq.n	800ae4e <I2C_ITSlaveCplt+0x28e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a14      	ldr	r2, [pc, #80]	; (800ae9c <I2C_ITSlaveCplt+0x2dc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d128      	bne.n	800aea0 <I2C_ITSlaveCplt+0x2e0>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	e027      	b.n	800aeaa <I2C_ITSlaveCplt+0x2ea>
 800ae5a:	bf00      	nop
 800ae5c:	fe00e800 	.word	0xfe00e800
 800ae60:	40020010 	.word	0x40020010
 800ae64:	40020028 	.word	0x40020028
 800ae68:	40020040 	.word	0x40020040
 800ae6c:	40020058 	.word	0x40020058
 800ae70:	40020070 	.word	0x40020070
 800ae74:	40020088 	.word	0x40020088
 800ae78:	400200a0 	.word	0x400200a0
 800ae7c:	400200b8 	.word	0x400200b8
 800ae80:	40020410 	.word	0x40020410
 800ae84:	40020428 	.word	0x40020428
 800ae88:	40020440 	.word	0x40020440
 800ae8c:	40020458 	.word	0x40020458
 800ae90:	40020470 	.word	0x40020470
 800ae94:	40020488 	.word	0x40020488
 800ae98:	400204a0 	.word	0x400204a0
 800ae9c:	400204b8 	.word	0x400204b8
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	089b      	lsrs	r3, r3, #2
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d020      	beq.n	800aefc <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f023 0304 	bic.w	r3, r3, #4
 800aec0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00c      	beq.n	800aefc <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aee6:	3b01      	subs	r3, #1
 800aee8:	b29a      	uxth	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	3b01      	subs	r3, #1
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af00:	b29b      	uxth	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d005      	beq.n	800af12 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0a:	f043 0204 	orr.w	r2, r3, #4
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	091b      	lsrs	r3, r3, #4
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d04a      	beq.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	091b      	lsrs	r3, r3, #4
 800af22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800af26:	2b00      	cmp	r3, #0
 800af28:	d044      	beq.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af2e:	b29b      	uxth	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d128      	bne.n	800af86 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b28      	cmp	r3, #40	; 0x28
 800af3e:	d108      	bne.n	800af52 <I2C_ITSlaveCplt+0x392>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af46:	d104      	bne.n	800af52 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800af48:	6979      	ldr	r1, [r7, #20]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f892 	bl	800b074 <I2C_ITListenCplt>
 800af50:	e030      	b.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b29      	cmp	r3, #41	; 0x29
 800af5c:	d10e      	bne.n	800af7c <I2C_ITSlaveCplt+0x3bc>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af64:	d00a      	beq.n	800af7c <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2210      	movs	r2, #16
 800af6c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9ed 	bl	800b34e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff fcfa 	bl	800a96e <I2C_ITSlaveSeqCplt>
 800af7a:	e01b      	b.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2210      	movs	r2, #16
 800af82:	61da      	str	r2, [r3, #28]
 800af84:	e016      	b.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2210      	movs	r2, #16
 800af8c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af92:	f043 0204 	orr.w	r2, r3, #4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d003      	beq.n	800afa8 <I2C_ITSlaveCplt+0x3e8>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afa6:	d105      	bne.n	800afb4 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f8b6 	bl	800b120 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d010      	beq.n	800afec <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f8a5 	bl	800b120 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b28      	cmp	r3, #40	; 0x28
 800afe0:	d141      	bne.n	800b066 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800afe2:	6979      	ldr	r1, [r7, #20]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f845 	bl	800b074 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800afea:	e03c      	b.n	800b066 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aff4:	d014      	beq.n	800b020 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7ff fcb9 	bl	800a96e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a1c      	ldr	r2, [pc, #112]	; (800b070 <I2C_ITSlaveCplt+0x4b0>)
 800b000:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2220      	movs	r2, #32
 800b006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7fe fd68 	bl	8009aee <HAL_I2C_ListenCpltCallback>
}
 800b01e:	e022      	b.n	800b066 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b22      	cmp	r3, #34	; 0x22
 800b02a:	d10e      	bne.n	800b04a <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2220      	movs	r2, #32
 800b030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7fe fd3b 	bl	8009abe <HAL_I2C_SlaveRxCpltCallback>
}
 800b048:	e00d      	b.n	800b066 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7fe fd22 	bl	8009aaa <HAL_I2C_SlaveTxCpltCallback>
}
 800b066:	bf00      	nop
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	ffff0000 	.word	0xffff0000

0800b074 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a26      	ldr	r2, [pc, #152]	; (800b11c <I2C_ITListenCplt+0xa8>)
 800b082:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	089b      	lsrs	r3, r3, #2
 800b0a4:	f003 0301 	and.w	r3, r3, #1
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d022      	beq.n	800b0f2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	b2d2      	uxtb	r2, r2
 800b0b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d012      	beq.n	800b0f2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ea:	f043 0204 	orr.w	r2, r3, #4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b0f2:	f248 0103 	movw	r1, #32771	; 0x8003
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fbf2 	bl	800b8e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2210      	movs	r2, #16
 800b102:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2200      	movs	r2, #0
 800b108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7fe fcee 	bl	8009aee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b112:	bf00      	nop
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	ffff0000 	.word	0xffff0000

0800b120 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b130:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a6d      	ldr	r2, [pc, #436]	; (800b2f4 <I2C_ITError+0x1d4>)
 800b13e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b152:	7bfb      	ldrb	r3, [r7, #15]
 800b154:	2b28      	cmp	r3, #40	; 0x28
 800b156:	d005      	beq.n	800b164 <I2C_ITError+0x44>
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	2b29      	cmp	r3, #41	; 0x29
 800b15c:	d002      	beq.n	800b164 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b2a      	cmp	r3, #42	; 0x2a
 800b162:	d10b      	bne.n	800b17c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b164:	2103      	movs	r1, #3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fbba 	bl	800b8e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2228      	movs	r2, #40	; 0x28
 800b170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a60      	ldr	r2, [pc, #384]	; (800b2f8 <I2C_ITError+0x1d8>)
 800b178:	635a      	str	r2, [r3, #52]	; 0x34
 800b17a:	e030      	b.n	800b1de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b17c:	f248 0103 	movw	r1, #32771	; 0x8003
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fbad 	bl	800b8e0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 f8e1 	bl	800b34e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b60      	cmp	r3, #96	; 0x60
 800b196:	d01f      	beq.n	800b1d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	f003 0320 	and.w	r3, r3, #32
 800b1aa:	2b20      	cmp	r3, #32
 800b1ac:	d114      	bne.n	800b1d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	699b      	ldr	r3, [r3, #24]
 800b1b4:	f003 0310 	and.w	r3, r3, #16
 800b1b8:	2b10      	cmp	r3, #16
 800b1ba:	d109      	bne.n	800b1d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2210      	movs	r2, #16
 800b1c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c8:	f043 0204 	orr.w	r2, r3, #4
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d039      	beq.n	800b260 <I2C_ITError+0x140>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b11      	cmp	r3, #17
 800b1f0:	d002      	beq.n	800b1f8 <I2C_ITError+0xd8>
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b21      	cmp	r3, #33	; 0x21
 800b1f6:	d133      	bne.n	800b260 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b206:	d107      	bne.n	800b218 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b216:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fd fb31 	bl	8008884 <HAL_DMA_GetState>
 800b222:	4603      	mov	r3, r0
 800b224:	2b01      	cmp	r3, #1
 800b226:	d017      	beq.n	800b258 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	4a33      	ldr	r2, [pc, #204]	; (800b2fc <I2C_ITError+0x1dc>)
 800b22e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fc f9b1 	bl	80075a4 <HAL_DMA_Abort_IT>
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d04d      	beq.n	800b2e4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b252:	4610      	mov	r0, r2
 800b254:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b256:	e045      	b.n	800b2e4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f851 	bl	800b300 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b25e:	e041      	b.n	800b2e4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d039      	beq.n	800b2dc <I2C_ITError+0x1bc>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b12      	cmp	r3, #18
 800b26c:	d002      	beq.n	800b274 <I2C_ITError+0x154>
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2b22      	cmp	r3, #34	; 0x22
 800b272:	d133      	bne.n	800b2dc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b282:	d107      	bne.n	800b294 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b292:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fd faf3 	bl	8008884 <HAL_DMA_GetState>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d017      	beq.n	800b2d4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a8:	4a14      	ldr	r2, [pc, #80]	; (800b2fc <I2C_ITError+0x1dc>)
 800b2aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fc f973 	bl	80075a4 <HAL_DMA_Abort_IT>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d011      	beq.n	800b2e8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2d2:	e009      	b.n	800b2e8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f813 	bl	800b300 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2da:	e005      	b.n	800b2e8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f80f 	bl	800b300 <I2C_TreatErrorCallback>
  }
}
 800b2e2:	e002      	b.n	800b2ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b2e4:	bf00      	nop
 800b2e6:	e000      	b.n	800b2ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b2e8:	bf00      	nop
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	ffff0000 	.word	0xffff0000
 800b2f8:	08009dd7 	.word	0x08009dd7
 800b2fc:	0800b739 	.word	0x0800b739

0800b300 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b60      	cmp	r3, #96	; 0x60
 800b312:	d10e      	bne.n	800b332 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2220      	movs	r2, #32
 800b318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7fe fc07 	bl	8009b3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b330:	e009      	b.n	800b346 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7fe fbf2 	bl	8009b2a <HAL_I2C_ErrorCallback>
}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	699b      	ldr	r3, [r3, #24]
 800b35c:	f003 0302 	and.w	r3, r3, #2
 800b360:	2b02      	cmp	r3, #2
 800b362:	d103      	bne.n	800b36c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2200      	movs	r2, #0
 800b36a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	699b      	ldr	r3, [r3, #24]
 800b372:	f003 0301 	and.w	r3, r3, #1
 800b376:	2b01      	cmp	r3, #1
 800b378:	d007      	beq.n	800b38a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	699a      	ldr	r2, [r3, #24]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0201 	orr.w	r2, r2, #1
 800b388:	619a      	str	r2, [r3, #24]
  }
}
 800b38a:	bf00      	nop
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b3b2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d104      	bne.n	800b3c8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b3be:	2120      	movs	r1, #32
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f000 fa09 	bl	800b7d8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b3c6:	e02d      	b.n	800b424 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b3d0:	441a      	add	r2, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2bff      	cmp	r3, #255	; 0xff
 800b3de:	d903      	bls.n	800b3e8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	22ff      	movs	r2, #255	; 0xff
 800b3e4:	851a      	strh	r2, [r3, #40]	; 0x28
 800b3e6:	e004      	b.n	800b3f2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3328      	adds	r3, #40	; 0x28
 800b402:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b408:	f7fb fb44 	bl	8006a94 <HAL_DMA_Start_IT>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d004      	beq.n	800b41c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b412:	2110      	movs	r1, #16
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7ff fe83 	bl	800b120 <I2C_ITError>
}
 800b41a:	e003      	b.n	800b424 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b41c:	2140      	movs	r1, #64	; 0x40
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f000 f9da 	bl	800b7d8 <I2C_Enable_IRQ>
}
 800b424:	bf00      	nop
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b438:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b448:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b454:	2120      	movs	r1, #32
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 f9be 	bl	800b7d8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b45c:	e02d      	b.n	800b4ba <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b466:	441a      	add	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b470:	b29b      	uxth	r3, r3
 800b472:	2bff      	cmp	r3, #255	; 0xff
 800b474:	d903      	bls.n	800b47e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	22ff      	movs	r2, #255	; 0xff
 800b47a:	851a      	strh	r2, [r3, #40]	; 0x28
 800b47c:	e004      	b.n	800b488 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b482:	b29a      	uxth	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3324      	adds	r3, #36	; 0x24
 800b492:	4619      	mov	r1, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b498:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b49e:	f7fb faf9 	bl	8006a94 <HAL_DMA_Start_IT>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d004      	beq.n	800b4b2 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b4a8:	2110      	movs	r1, #16
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fe38 	bl	800b120 <I2C_ITError>
}
 800b4b0:	e003      	b.n	800b4ba <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b4b2:	2140      	movs	r1, #64	; 0x40
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 f98f 	bl	800b7d8 <I2C_Enable_IRQ>
}
 800b4ba:	bf00      	nop
 800b4bc:	3710      	adds	r7, #16
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
	...

0800b4c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d076      	beq.n	800b5cc <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a71      	ldr	r2, [pc, #452]	; (800b6ac <I2C_DMAError+0x1e8>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d059      	beq.n	800b59e <I2C_DMAError+0xda>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a6f      	ldr	r2, [pc, #444]	; (800b6b0 <I2C_DMAError+0x1ec>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d053      	beq.n	800b59e <I2C_DMAError+0xda>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a6d      	ldr	r2, [pc, #436]	; (800b6b4 <I2C_DMAError+0x1f0>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d04d      	beq.n	800b59e <I2C_DMAError+0xda>
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a6b      	ldr	r2, [pc, #428]	; (800b6b8 <I2C_DMAError+0x1f4>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d047      	beq.n	800b59e <I2C_DMAError+0xda>
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a69      	ldr	r2, [pc, #420]	; (800b6bc <I2C_DMAError+0x1f8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d041      	beq.n	800b59e <I2C_DMAError+0xda>
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a67      	ldr	r2, [pc, #412]	; (800b6c0 <I2C_DMAError+0x1fc>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d03b      	beq.n	800b59e <I2C_DMAError+0xda>
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a65      	ldr	r2, [pc, #404]	; (800b6c4 <I2C_DMAError+0x200>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d035      	beq.n	800b59e <I2C_DMAError+0xda>
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a63      	ldr	r2, [pc, #396]	; (800b6c8 <I2C_DMAError+0x204>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d02f      	beq.n	800b59e <I2C_DMAError+0xda>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a61      	ldr	r2, [pc, #388]	; (800b6cc <I2C_DMAError+0x208>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d029      	beq.n	800b59e <I2C_DMAError+0xda>
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a5f      	ldr	r2, [pc, #380]	; (800b6d0 <I2C_DMAError+0x20c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d023      	beq.n	800b59e <I2C_DMAError+0xda>
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a5d      	ldr	r2, [pc, #372]	; (800b6d4 <I2C_DMAError+0x210>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d01d      	beq.n	800b59e <I2C_DMAError+0xda>
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a5b      	ldr	r2, [pc, #364]	; (800b6d8 <I2C_DMAError+0x214>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d017      	beq.n	800b59e <I2C_DMAError+0xda>
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a59      	ldr	r2, [pc, #356]	; (800b6dc <I2C_DMAError+0x218>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d011      	beq.n	800b59e <I2C_DMAError+0xda>
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a57      	ldr	r2, [pc, #348]	; (800b6e0 <I2C_DMAError+0x21c>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d00b      	beq.n	800b59e <I2C_DMAError+0xda>
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a55      	ldr	r2, [pc, #340]	; (800b6e4 <I2C_DMAError+0x220>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d005      	beq.n	800b59e <I2C_DMAError+0xda>
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a53      	ldr	r2, [pc, #332]	; (800b6e8 <I2C_DMAError+0x224>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d109      	bne.n	800b5b2 <I2C_DMAError+0xee>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bf0c      	ite	eq
 800b5aa:	2301      	moveq	r3, #1
 800b5ac:	2300      	movne	r3, #0
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	e008      	b.n	800b5c4 <I2C_DMAError+0x100>
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bf0c      	ite	eq
 800b5be:	2301      	moveq	r3, #1
 800b5c0:	2300      	movne	r3, #0
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f000 8098 	beq.w	800b706 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a33      	ldr	r2, [pc, #204]	; (800b6ac <I2C_DMAError+0x1e8>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d059      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a31      	ldr	r2, [pc, #196]	; (800b6b0 <I2C_DMAError+0x1ec>)
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d053      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a2f      	ldr	r2, [pc, #188]	; (800b6b4 <I2C_DMAError+0x1f0>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d04d      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a2d      	ldr	r2, [pc, #180]	; (800b6b8 <I2C_DMAError+0x1f4>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d047      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a2b      	ldr	r2, [pc, #172]	; (800b6bc <I2C_DMAError+0x1f8>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d041      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a29      	ldr	r2, [pc, #164]	; (800b6c0 <I2C_DMAError+0x1fc>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d03b      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a27      	ldr	r2, [pc, #156]	; (800b6c4 <I2C_DMAError+0x200>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d035      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a25      	ldr	r2, [pc, #148]	; (800b6c8 <I2C_DMAError+0x204>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d02f      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a23      	ldr	r2, [pc, #140]	; (800b6cc <I2C_DMAError+0x208>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d029      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a21      	ldr	r2, [pc, #132]	; (800b6d0 <I2C_DMAError+0x20c>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d023      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a1f      	ldr	r2, [pc, #124]	; (800b6d4 <I2C_DMAError+0x210>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d01d      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a1d      	ldr	r2, [pc, #116]	; (800b6d8 <I2C_DMAError+0x214>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d017      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a1b      	ldr	r2, [pc, #108]	; (800b6dc <I2C_DMAError+0x218>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d011      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <I2C_DMAError+0x21c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00b      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a17      	ldr	r2, [pc, #92]	; (800b6e4 <I2C_DMAError+0x220>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d005      	beq.n	800b696 <I2C_DMAError+0x1d2>
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a15      	ldr	r2, [pc, #84]	; (800b6e8 <I2C_DMAError+0x224>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d12a      	bne.n	800b6ec <I2C_DMAError+0x228>
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	bf0c      	ite	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	2300      	movne	r3, #0
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	e029      	b.n	800b6fe <I2C_DMAError+0x23a>
 800b6aa:	bf00      	nop
 800b6ac:	40020010 	.word	0x40020010
 800b6b0:	40020028 	.word	0x40020028
 800b6b4:	40020040 	.word	0x40020040
 800b6b8:	40020058 	.word	0x40020058
 800b6bc:	40020070 	.word	0x40020070
 800b6c0:	40020088 	.word	0x40020088
 800b6c4:	400200a0 	.word	0x400200a0
 800b6c8:	400200b8 	.word	0x400200b8
 800b6cc:	40020410 	.word	0x40020410
 800b6d0:	40020428 	.word	0x40020428
 800b6d4:	40020440 	.word	0x40020440
 800b6d8:	40020458 	.word	0x40020458
 800b6dc:	40020470 	.word	0x40020470
 800b6e0:	40020488 	.word	0x40020488
 800b6e4:	400204a0 	.word	0x400204a0
 800b6e8:	400204b8 	.word	0x400204b8
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	bf0c      	ite	eq
 800b6f8:	2301      	moveq	r3, #1
 800b6fa:	2300      	movne	r3, #0
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800b702:	2301      	movs	r3, #1
 800b704:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7fd f8ca 	bl	80088a0 <HAL_DMA_GetError>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d00e      	beq.n	800b730 <I2C_DMAError+0x26c>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00b      	beq.n	800b730 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b726:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b728:	2110      	movs	r1, #16
 800b72a:	68b8      	ldr	r0, [r7, #8]
 800b72c:	f7ff fcf8 	bl	800b120 <I2C_ITError>
  }
}
 800b730:	bf00      	nop
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b744:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	2200      	movs	r2, #0
 800b754:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b762:	2200      	movs	r2, #0
 800b764:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff fdca 	bl	800b300 <I2C_TreatErrorCallback>
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	607b      	str	r3, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	817b      	strh	r3, [r7, #10]
 800b782:	4613      	mov	r3, r2
 800b784:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b786:	897b      	ldrh	r3, [r7, #10]
 800b788:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b78c:	7a7b      	ldrb	r3, [r7, #9]
 800b78e:	041b      	lsls	r3, r3, #16
 800b790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b794:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	0d5b      	lsrs	r3, r3, #21
 800b7ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b7b2:	4b08      	ldr	r3, [pc, #32]	; (800b7d4 <I2C_TransferConfig+0x60>)
 800b7b4:	430b      	orrs	r3, r1
 800b7b6:	43db      	mvns	r3, r3
 800b7b8:	ea02 0103 	and.w	r1, r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b7c6:	bf00      	nop
 800b7c8:	371c      	adds	r7, #28
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	03ff63ff 	.word	0x03ff63ff

0800b7d8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ec:	4a39      	ldr	r2, [pc, #228]	; (800b8d4 <I2C_Enable_IRQ+0xfc>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d032      	beq.n	800b858 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b7f6:	4a38      	ldr	r2, [pc, #224]	; (800b8d8 <I2C_Enable_IRQ+0x100>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d02d      	beq.n	800b858 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b800:	4a36      	ldr	r2, [pc, #216]	; (800b8dc <I2C_Enable_IRQ+0x104>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d028      	beq.n	800b858 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b806:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	da03      	bge.n	800b816 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b814:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b816:	887b      	ldrh	r3, [r7, #2]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b826:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b828:	887b      	ldrh	r3, [r7, #2]
 800b82a:	f003 0302 	and.w	r3, r3, #2
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b838:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b83a:	887b      	ldrh	r3, [r7, #2]
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	d103      	bne.n	800b848 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b846:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b848:	887b      	ldrh	r3, [r7, #2]
 800b84a:	2b20      	cmp	r3, #32
 800b84c:	d133      	bne.n	800b8b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f043 0320 	orr.w	r3, r3, #32
 800b854:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b856:	e02e      	b.n	800b8b6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b858:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	da03      	bge.n	800b868 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b866:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b868:	887b      	ldrh	r3, [r7, #2]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b878:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b87a:	887b      	ldrh	r3, [r7, #2]
 800b87c:	f003 0302 	and.w	r3, r3, #2
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b88a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b88c:	887b      	ldrh	r3, [r7, #2]
 800b88e:	2b10      	cmp	r3, #16
 800b890:	d103      	bne.n	800b89a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b898:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b89a:	887b      	ldrh	r3, [r7, #2]
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d103      	bne.n	800b8a8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b8a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b8a8:	887b      	ldrh	r3, [r7, #2]
 800b8aa:	2b40      	cmp	r3, #64	; 0x40
 800b8ac:	d103      	bne.n	800b8b6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6819      	ldr	r1, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	3714      	adds	r7, #20
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d0:	4770      	bx	lr
 800b8d2:	bf00      	nop
 800b8d4:	08009fdf 	.word	0x08009fdf
 800b8d8:	0800a425 	.word	0x0800a425
 800b8dc:	0800a1c5 	.word	0x0800a1c5

0800b8e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b8f0:	887b      	ldrh	r3, [r7, #2]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00f      	beq.n	800b91a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b900:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b90e:	2b28      	cmp	r3, #40	; 0x28
 800b910:	d003      	beq.n	800b91a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b918:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b91a:	887b      	ldrh	r3, [r7, #2]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00f      	beq.n	800b944 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b92a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b938:	2b28      	cmp	r3, #40	; 0x28
 800b93a:	d003      	beq.n	800b944 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b942:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b944:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	da03      	bge.n	800b954 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b952:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b954:	887b      	ldrh	r3, [r7, #2]
 800b956:	2b10      	cmp	r3, #16
 800b958:	d103      	bne.n	800b962 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b960:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b962:	887b      	ldrh	r3, [r7, #2]
 800b964:	2b20      	cmp	r3, #32
 800b966:	d103      	bne.n	800b970 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f043 0320 	orr.w	r3, r3, #32
 800b96e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b970:	887b      	ldrh	r3, [r7, #2]
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d103      	bne.n	800b97e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b97c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	43da      	mvns	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	400a      	ands	r2, r1
 800b98e:	601a      	str	r2, [r3, #0]
}
 800b990:	bf00      	nop
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d138      	bne.n	800ba24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d101      	bne.n	800b9c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	e032      	b.n	800ba26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2224      	movs	r2, #36	; 0x24
 800b9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0201 	bic.w	r2, r2, #1
 800b9de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b9ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6819      	ldr	r1, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0201 	orr.w	r2, r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2220      	movs	r2, #32
 800ba14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	e000      	b.n	800ba26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ba24:	2302      	movs	r3, #2
  }
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b085      	sub	sp, #20
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d139      	bne.n	800babc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e033      	b.n	800babe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2224      	movs	r2, #36	; 0x24
 800ba62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0201 	bic.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ba84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0201 	orr.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2220      	movs	r2, #32
 800baac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bab8:	2300      	movs	r3, #0
 800baba:	e000      	b.n	800babe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800babc:	2302      	movs	r3, #2
  }
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
	...

0800bacc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bad4:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800bad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bada:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800badc:	f043 0302 	orr.w	r3, r3, #2
 800bae0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bae4:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800bae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800baf2:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	4906      	ldr	r1, [pc, #24]	; (800bb10 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	604b      	str	r3, [r1, #4]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	58024400 	.word	0x58024400
 800bb10:	58000400 	.word	0x58000400

0800bb14 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800bb20:	4b18      	ldr	r3, [pc, #96]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f023 0201 	bic.w	r2, r3, #1
 800bb28:	4916      	ldr	r1, [pc, #88]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800bb30:	4b14      	ldr	r3, [pc, #80]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	4a13      	ldr	r2, [pc, #76]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb36:	f023 0305 	bic.w	r3, r3, #5
 800bb3a:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800bb3c:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb3e:	691b      	ldr	r3, [r3, #16]
 800bb40:	4a10      	ldr	r2, [pc, #64]	; (800bb84 <HAL_PWR_EnterSTOPMode+0x70>)
 800bb42:	f023 0302 	bic.w	r3, r3, #2
 800bb46:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800bb48:	4b0f      	ldr	r3, [pc, #60]	; (800bb88 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	4a0e      	ldr	r2, [pc, #56]	; (800bb88 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb4e:	f043 0304 	orr.w	r3, r3, #4
 800bb52:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb54:	f3bf 8f4f 	dsb	sy
}
 800bb58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bb5a:	f3bf 8f6f 	isb	sy
}
 800bb5e:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d101      	bne.n	800bb6a <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800bb66:	bf30      	wfi
 800bb68:	e000      	b.n	800bb6c <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800bb6a:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800bb6c:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	4a05      	ldr	r2, [pc, #20]	; (800bb88 <HAL_PWR_EnterSTOPMode+0x74>)
 800bb72:	f023 0304 	bic.w	r3, r3, #4
 800bb76:	6113      	str	r3, [r2, #16]
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	58024800 	.word	0x58024800
 800bb88:	e000ed00 	.word	0xe000ed00

0800bb8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bb94:	4b19      	ldr	r3, [pc, #100]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0304 	and.w	r3, r3, #4
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d00a      	beq.n	800bbb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bba0:	4b16      	ldr	r3, [pc, #88]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0307 	and.w	r3, r3, #7
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d001      	beq.n	800bbb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e01f      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	e01d      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bbb6:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	f023 0207 	bic.w	r2, r3, #7
 800bbbe:	490f      	ldr	r1, [pc, #60]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bbc6:	f7f8 fae1 	bl	800418c <HAL_GetTick>
 800bbca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbcc:	e009      	b.n	800bbe2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800bbce:	f7f8 fadd 	bl	800418c <HAL_GetTick>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bbdc:	d901      	bls.n	800bbe2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	e007      	b.n	800bbf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800bbe2:	4b06      	ldr	r3, [pc, #24]	; (800bbfc <HAL_PWREx_ConfigSupply+0x70>)
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbee:	d1ee      	bne.n	800bbce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}
 800bbfa:	bf00      	nop
 800bbfc:	58024800 	.word	0x58024800

0800bc00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b08c      	sub	sp, #48	; 0x30
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d102      	bne.n	800bc14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	f000 bc48 	b.w	800c4a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f000 8088 	beq.w	800bd32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc22:	4b99      	ldr	r3, [pc, #612]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc2c:	4b96      	ldr	r3, [pc, #600]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	2b10      	cmp	r3, #16
 800bc36:	d007      	beq.n	800bc48 <HAL_RCC_OscConfig+0x48>
 800bc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3a:	2b18      	cmp	r3, #24
 800bc3c:	d111      	bne.n	800bc62 <HAL_RCC_OscConfig+0x62>
 800bc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc40:	f003 0303 	and.w	r3, r3, #3
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d10c      	bne.n	800bc62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc48:	4b8f      	ldr	r3, [pc, #572]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d06d      	beq.n	800bd30 <HAL_RCC_OscConfig+0x130>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d169      	bne.n	800bd30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f000 bc21 	b.w	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc6a:	d106      	bne.n	800bc7a <HAL_RCC_OscConfig+0x7a>
 800bc6c:	4b86      	ldr	r3, [pc, #536]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a85      	ldr	r2, [pc, #532]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	e02e      	b.n	800bcd8 <HAL_RCC_OscConfig+0xd8>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10c      	bne.n	800bc9c <HAL_RCC_OscConfig+0x9c>
 800bc82:	4b81      	ldr	r3, [pc, #516]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4a80      	ldr	r2, [pc, #512]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	4b7e      	ldr	r3, [pc, #504]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a7d      	ldr	r2, [pc, #500]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bc94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	e01d      	b.n	800bcd8 <HAL_RCC_OscConfig+0xd8>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bca4:	d10c      	bne.n	800bcc0 <HAL_RCC_OscConfig+0xc0>
 800bca6:	4b78      	ldr	r3, [pc, #480]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a77      	ldr	r2, [pc, #476]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bcb0:	6013      	str	r3, [r2, #0]
 800bcb2:	4b75      	ldr	r3, [pc, #468]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a74      	ldr	r2, [pc, #464]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	e00b      	b.n	800bcd8 <HAL_RCC_OscConfig+0xd8>
 800bcc0:	4b71      	ldr	r3, [pc, #452]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a70      	ldr	r2, [pc, #448]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	4b6e      	ldr	r3, [pc, #440]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	4a6d      	ldr	r2, [pc, #436]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d013      	beq.n	800bd08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bce0:	f7f8 fa54 	bl	800418c <HAL_GetTick>
 800bce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bce6:	e008      	b.n	800bcfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bce8:	f7f8 fa50 	bl	800418c <HAL_GetTick>
 800bcec:	4602      	mov	r2, r0
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	2b64      	cmp	r3, #100	; 0x64
 800bcf4:	d901      	bls.n	800bcfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	e3d4      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bcfa:	4b63      	ldr	r3, [pc, #396]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d0f0      	beq.n	800bce8 <HAL_RCC_OscConfig+0xe8>
 800bd06:	e014      	b.n	800bd32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd08:	f7f8 fa40 	bl	800418c <HAL_GetTick>
 800bd0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd0e:	e008      	b.n	800bd22 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd10:	f7f8 fa3c 	bl	800418c <HAL_GetTick>
 800bd14:	4602      	mov	r2, r0
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b64      	cmp	r3, #100	; 0x64
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e3c0      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd22:	4b59      	ldr	r3, [pc, #356]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f0      	bne.n	800bd10 <HAL_RCC_OscConfig+0x110>
 800bd2e:	e000      	b.n	800bd32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 0302 	and.w	r3, r3, #2
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80ca 	beq.w	800bed4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd40:	4b51      	ldr	r3, [pc, #324]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd4a:	4b4f      	ldr	r3, [pc, #316]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd4e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <HAL_RCC_OscConfig+0x166>
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	2b18      	cmp	r3, #24
 800bd5a:	d156      	bne.n	800be0a <HAL_RCC_OscConfig+0x20a>
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	f003 0303 	and.w	r3, r3, #3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d151      	bne.n	800be0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bd66:	4b48      	ldr	r3, [pc, #288]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0304 	and.w	r3, r3, #4
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d005      	beq.n	800bd7e <HAL_RCC_OscConfig+0x17e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e392      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bd7e:	4b42      	ldr	r3, [pc, #264]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f023 0219 	bic.w	r2, r3, #25
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	493f      	ldr	r1, [pc, #252]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd90:	f7f8 f9fc 	bl	800418c <HAL_GetTick>
 800bd94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd96:	e008      	b.n	800bdaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd98:	f7f8 f9f8 	bl	800418c <HAL_GetTick>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d901      	bls.n	800bdaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bda6:	2303      	movs	r3, #3
 800bda8:	e37c      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdaa:	4b37      	ldr	r3, [pc, #220]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d0f0      	beq.n	800bd98 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdb6:	f7f8 f9f5 	bl	80041a4 <HAL_GetREVID>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	f241 0203 	movw	r2, #4099	; 0x1003
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d817      	bhi.n	800bdf4 <HAL_RCC_OscConfig+0x1f4>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	2b40      	cmp	r3, #64	; 0x40
 800bdca:	d108      	bne.n	800bdde <HAL_RCC_OscConfig+0x1de>
 800bdcc:	4b2e      	ldr	r3, [pc, #184]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bdd4:	4a2c      	ldr	r2, [pc, #176]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bdd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdda:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bddc:	e07a      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdde:	4b2a      	ldr	r3, [pc, #168]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	031b      	lsls	r3, r3, #12
 800bdec:	4926      	ldr	r1, [pc, #152]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdf2:	e06f      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdf4:	4b24      	ldr	r3, [pc, #144]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	061b      	lsls	r3, r3, #24
 800be02:	4921      	ldr	r1, [pc, #132]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be04:	4313      	orrs	r3, r2
 800be06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be08:	e064      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d047      	beq.n	800bea2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be12:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f023 0219 	bic.w	r2, r3, #25
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	491a      	ldr	r1, [pc, #104]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be20:	4313      	orrs	r3, r2
 800be22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be24:	f7f8 f9b2 	bl	800418c <HAL_GetTick>
 800be28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be2a:	e008      	b.n	800be3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be2c:	f7f8 f9ae 	bl	800418c <HAL_GetTick>
 800be30:	4602      	mov	r2, r0
 800be32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	2b02      	cmp	r3, #2
 800be38:	d901      	bls.n	800be3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800be3a:	2303      	movs	r3, #3
 800be3c:	e332      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be3e:	4b12      	ldr	r3, [pc, #72]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f003 0304 	and.w	r3, r3, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f0      	beq.n	800be2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be4a:	f7f8 f9ab 	bl	80041a4 <HAL_GetREVID>
 800be4e:	4603      	mov	r3, r0
 800be50:	f241 0203 	movw	r2, #4099	; 0x1003
 800be54:	4293      	cmp	r3, r2
 800be56:	d819      	bhi.n	800be8c <HAL_RCC_OscConfig+0x28c>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	d108      	bne.n	800be72 <HAL_RCC_OscConfig+0x272>
 800be60:	4b09      	ldr	r3, [pc, #36]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800be68:	4a07      	ldr	r2, [pc, #28]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6e:	6053      	str	r3, [r2, #4]
 800be70:	e030      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	031b      	lsls	r3, r3, #12
 800be80:	4901      	ldr	r1, [pc, #4]	; (800be88 <HAL_RCC_OscConfig+0x288>)
 800be82:	4313      	orrs	r3, r2
 800be84:	604b      	str	r3, [r1, #4]
 800be86:	e025      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
 800be88:	58024400 	.word	0x58024400
 800be8c:	4b9a      	ldr	r3, [pc, #616]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	061b      	lsls	r3, r3, #24
 800be9a:	4997      	ldr	r1, [pc, #604]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800be9c:	4313      	orrs	r3, r2
 800be9e:	604b      	str	r3, [r1, #4]
 800bea0:	e018      	b.n	800bed4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bea2:	4b95      	ldr	r3, [pc, #596]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a94      	ldr	r2, [pc, #592]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bea8:	f023 0301 	bic.w	r3, r3, #1
 800beac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beae:	f7f8 f96d 	bl	800418c <HAL_GetTick>
 800beb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800beb4:	e008      	b.n	800bec8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800beb6:	f7f8 f969 	bl	800418c <HAL_GetTick>
 800beba:	4602      	mov	r2, r0
 800bebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebe:	1ad3      	subs	r3, r2, r3
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	d901      	bls.n	800bec8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	e2ed      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bec8:	4b8b      	ldr	r3, [pc, #556]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1f0      	bne.n	800beb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0310 	and.w	r3, r3, #16
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 80a9 	beq.w	800c034 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bee2:	4b85      	ldr	r3, [pc, #532]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800beea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800beec:	4b82      	ldr	r3, [pc, #520]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800beee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	2b08      	cmp	r3, #8
 800bef6:	d007      	beq.n	800bf08 <HAL_RCC_OscConfig+0x308>
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b18      	cmp	r3, #24
 800befc:	d13a      	bne.n	800bf74 <HAL_RCC_OscConfig+0x374>
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	f003 0303 	and.w	r3, r3, #3
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d135      	bne.n	800bf74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf08:	4b7b      	ldr	r3, [pc, #492]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d005      	beq.n	800bf20 <HAL_RCC_OscConfig+0x320>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	2b80      	cmp	r3, #128	; 0x80
 800bf1a:	d001      	beq.n	800bf20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e2c1      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf20:	f7f8 f940 	bl	80041a4 <HAL_GetREVID>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f241 0203 	movw	r2, #4099	; 0x1003
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d817      	bhi.n	800bf5e <HAL_RCC_OscConfig+0x35e>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	2b20      	cmp	r3, #32
 800bf34:	d108      	bne.n	800bf48 <HAL_RCC_OscConfig+0x348>
 800bf36:	4b70      	ldr	r3, [pc, #448]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bf3e:	4a6e      	ldr	r2, [pc, #440]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf46:	e075      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf48:	4b6b      	ldr	r3, [pc, #428]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a1b      	ldr	r3, [r3, #32]
 800bf54:	069b      	lsls	r3, r3, #26
 800bf56:	4968      	ldr	r1, [pc, #416]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf5c:	e06a      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf5e:	4b66      	ldr	r3, [pc, #408]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	061b      	lsls	r3, r3, #24
 800bf6c:	4962      	ldr	r1, [pc, #392]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf72:	e05f      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d042      	beq.n	800c002 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bf7c:	4b5e      	ldr	r3, [pc, #376]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a5d      	ldr	r2, [pc, #372]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bf82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf88:	f7f8 f900 	bl	800418c <HAL_GetTick>
 800bf8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bf8e:	e008      	b.n	800bfa2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bf90:	f7f8 f8fc 	bl	800418c <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d901      	bls.n	800bfa2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e280      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfa2:	4b55      	ldr	r3, [pc, #340]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0f0      	beq.n	800bf90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfae:	f7f8 f8f9 	bl	80041a4 <HAL_GetREVID>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	f241 0203 	movw	r2, #4099	; 0x1003
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d817      	bhi.n	800bfec <HAL_RCC_OscConfig+0x3ec>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	2b20      	cmp	r3, #32
 800bfc2:	d108      	bne.n	800bfd6 <HAL_RCC_OscConfig+0x3d6>
 800bfc4:	4b4c      	ldr	r3, [pc, #304]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bfcc:	4a4a      	ldr	r2, [pc, #296]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bfd2:	6053      	str	r3, [r2, #4]
 800bfd4:	e02e      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
 800bfd6:	4b48      	ldr	r3, [pc, #288]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	069b      	lsls	r3, r3, #26
 800bfe4:	4944      	ldr	r1, [pc, #272]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	604b      	str	r3, [r1, #4]
 800bfea:	e023      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
 800bfec:	4b42      	ldr	r3, [pc, #264]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6a1b      	ldr	r3, [r3, #32]
 800bff8:	061b      	lsls	r3, r3, #24
 800bffa:	493f      	ldr	r1, [pc, #252]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60cb      	str	r3, [r1, #12]
 800c000:	e018      	b.n	800c034 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c002:	4b3d      	ldr	r3, [pc, #244]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a3c      	ldr	r2, [pc, #240]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c00c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c00e:	f7f8 f8bd 	bl	800418c <HAL_GetTick>
 800c012:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c014:	e008      	b.n	800c028 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c016:	f7f8 f8b9 	bl	800418c <HAL_GetTick>
 800c01a:	4602      	mov	r2, r0
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	2b02      	cmp	r3, #2
 800c022:	d901      	bls.n	800c028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c024:	2303      	movs	r3, #3
 800c026:	e23d      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c028:	4b33      	ldr	r3, [pc, #204]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1f0      	bne.n	800c016 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f003 0308 	and.w	r3, r3, #8
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d036      	beq.n	800c0ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	695b      	ldr	r3, [r3, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d019      	beq.n	800c07c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c048:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c04a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c04c:	4a2a      	ldr	r2, [pc, #168]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c054:	f7f8 f89a 	bl	800418c <HAL_GetTick>
 800c058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c05a:	e008      	b.n	800c06e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c05c:	f7f8 f896 	bl	800418c <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	2b02      	cmp	r3, #2
 800c068:	d901      	bls.n	800c06e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e21a      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c06e:	4b22      	ldr	r3, [pc, #136]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d0f0      	beq.n	800c05c <HAL_RCC_OscConfig+0x45c>
 800c07a:	e018      	b.n	800c0ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c07c:	4b1e      	ldr	r3, [pc, #120]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c080:	4a1d      	ldr	r2, [pc, #116]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c082:	f023 0301 	bic.w	r3, r3, #1
 800c086:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c088:	f7f8 f880 	bl	800418c <HAL_GetTick>
 800c08c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c08e:	e008      	b.n	800c0a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c090:	f7f8 f87c 	bl	800418c <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d901      	bls.n	800c0a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e200      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0a2:	4b15      	ldr	r3, [pc, #84]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0a6:	f003 0302 	and.w	r3, r3, #2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1f0      	bne.n	800c090 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d039      	beq.n	800c12e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d01c      	beq.n	800c0fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c0c2:	4b0d      	ldr	r3, [pc, #52]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a0c      	ldr	r2, [pc, #48]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c0c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c0cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c0ce:	f7f8 f85d 	bl	800418c <HAL_GetTick>
 800c0d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c0d4:	e008      	b.n	800c0e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c0d6:	f7f8 f859 	bl	800418c <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	2b02      	cmp	r3, #2
 800c0e2:	d901      	bls.n	800c0e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e1dd      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c0e8:	4b03      	ldr	r3, [pc, #12]	; (800c0f8 <HAL_RCC_OscConfig+0x4f8>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0f0      	beq.n	800c0d6 <HAL_RCC_OscConfig+0x4d6>
 800c0f4:	e01b      	b.n	800c12e <HAL_RCC_OscConfig+0x52e>
 800c0f6:	bf00      	nop
 800c0f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c0fc:	4b9b      	ldr	r3, [pc, #620]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a9a      	ldr	r2, [pc, #616]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c102:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c106:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c108:	f7f8 f840 	bl	800418c <HAL_GetTick>
 800c10c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c10e:	e008      	b.n	800c122 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c110:	f7f8 f83c 	bl	800418c <HAL_GetTick>
 800c114:	4602      	mov	r2, r0
 800c116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d901      	bls.n	800c122 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c11e:	2303      	movs	r3, #3
 800c120:	e1c0      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c122:	4b92      	ldr	r3, [pc, #584]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d1f0      	bne.n	800c110 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	f000 8081 	beq.w	800c23e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c13c:	4b8c      	ldr	r3, [pc, #560]	; (800c370 <HAL_RCC_OscConfig+0x770>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a8b      	ldr	r2, [pc, #556]	; (800c370 <HAL_RCC_OscConfig+0x770>)
 800c142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c148:	f7f8 f820 	bl	800418c <HAL_GetTick>
 800c14c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c14e:	e008      	b.n	800c162 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c150:	f7f8 f81c 	bl	800418c <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	2b64      	cmp	r3, #100	; 0x64
 800c15c:	d901      	bls.n	800c162 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e1a0      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c162:	4b83      	ldr	r3, [pc, #524]	; (800c370 <HAL_RCC_OscConfig+0x770>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d0f0      	beq.n	800c150 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d106      	bne.n	800c184 <HAL_RCC_OscConfig+0x584>
 800c176:	4b7d      	ldr	r3, [pc, #500]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c17a:	4a7c      	ldr	r2, [pc, #496]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c17c:	f043 0301 	orr.w	r3, r3, #1
 800c180:	6713      	str	r3, [r2, #112]	; 0x70
 800c182:	e02d      	b.n	800c1e0 <HAL_RCC_OscConfig+0x5e0>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10c      	bne.n	800c1a6 <HAL_RCC_OscConfig+0x5a6>
 800c18c:	4b77      	ldr	r3, [pc, #476]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c190:	4a76      	ldr	r2, [pc, #472]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c192:	f023 0301 	bic.w	r3, r3, #1
 800c196:	6713      	str	r3, [r2, #112]	; 0x70
 800c198:	4b74      	ldr	r3, [pc, #464]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c19c:	4a73      	ldr	r2, [pc, #460]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c19e:	f023 0304 	bic.w	r3, r3, #4
 800c1a2:	6713      	str	r3, [r2, #112]	; 0x70
 800c1a4:	e01c      	b.n	800c1e0 <HAL_RCC_OscConfig+0x5e0>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	d10c      	bne.n	800c1c8 <HAL_RCC_OscConfig+0x5c8>
 800c1ae:	4b6f      	ldr	r3, [pc, #444]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b2:	4a6e      	ldr	r2, [pc, #440]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1b4:	f043 0304 	orr.w	r3, r3, #4
 800c1b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c1ba:	4b6c      	ldr	r3, [pc, #432]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1be:	4a6b      	ldr	r2, [pc, #428]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1c0:	f043 0301 	orr.w	r3, r3, #1
 800c1c4:	6713      	str	r3, [r2, #112]	; 0x70
 800c1c6:	e00b      	b.n	800c1e0 <HAL_RCC_OscConfig+0x5e0>
 800c1c8:	4b68      	ldr	r3, [pc, #416]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1cc:	4a67      	ldr	r2, [pc, #412]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	6713      	str	r3, [r2, #112]	; 0x70
 800c1d4:	4b65      	ldr	r3, [pc, #404]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d8:	4a64      	ldr	r2, [pc, #400]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c1da:	f023 0304 	bic.w	r3, r3, #4
 800c1de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d015      	beq.n	800c214 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1e8:	f7f7 ffd0 	bl	800418c <HAL_GetTick>
 800c1ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1ee:	e00a      	b.n	800c206 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1f0:	f7f7 ffcc 	bl	800418c <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d901      	bls.n	800c206 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c202:	2303      	movs	r3, #3
 800c204:	e14e      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c206:	4b59      	ldr	r3, [pc, #356]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c20a:	f003 0302 	and.w	r3, r3, #2
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d0ee      	beq.n	800c1f0 <HAL_RCC_OscConfig+0x5f0>
 800c212:	e014      	b.n	800c23e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c214:	f7f7 ffba 	bl	800418c <HAL_GetTick>
 800c218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c21a:	e00a      	b.n	800c232 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c21c:	f7f7 ffb6 	bl	800418c <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	f241 3288 	movw	r2, #5000	; 0x1388
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e138      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c232:	4b4e      	ldr	r3, [pc, #312]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c236:	f003 0302 	and.w	r3, r3, #2
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1ee      	bne.n	800c21c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 812d 	beq.w	800c4a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c248:	4b48      	ldr	r3, [pc, #288]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c250:	2b18      	cmp	r3, #24
 800c252:	f000 80bd 	beq.w	800c3d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	f040 809e 	bne.w	800c39c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c260:	4b42      	ldr	r3, [pc, #264]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a41      	ldr	r2, [pc, #260]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c26a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c26c:	f7f7 ff8e 	bl	800418c <HAL_GetTick>
 800c270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c272:	e008      	b.n	800c286 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c274:	f7f7 ff8a 	bl	800418c <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e10e      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c286:	4b39      	ldr	r3, [pc, #228]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1f0      	bne.n	800c274 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c292:	4b36      	ldr	r3, [pc, #216]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c296:	4b37      	ldr	r3, [pc, #220]	; (800c374 <HAL_RCC_OscConfig+0x774>)
 800c298:	4013      	ands	r3, r2
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c2a2:	0112      	lsls	r2, r2, #4
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	4931      	ldr	r1, [pc, #196]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	628b      	str	r3, [r1, #40]	; 0x28
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	025b      	lsls	r3, r3, #9
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	041b      	lsls	r3, r3, #16
 800c2ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c2ce:	431a      	orrs	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	061b      	lsls	r3, r3, #24
 800c2d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c2dc:	4923      	ldr	r1, [pc, #140]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c2e2:	4b22      	ldr	r3, [pc, #136]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	4a21      	ldr	r2, [pc, #132]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2e8:	f023 0301 	bic.w	r3, r3, #1
 800c2ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c2ee:	4b1f      	ldr	r3, [pc, #124]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2f2:	4b21      	ldr	r3, [pc, #132]	; (800c378 <HAL_RCC_OscConfig+0x778>)
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c2fa:	00d2      	lsls	r2, r2, #3
 800c2fc:	491b      	ldr	r1, [pc, #108]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c302:	4b1a      	ldr	r3, [pc, #104]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c306:	f023 020c 	bic.w	r2, r3, #12
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30e:	4917      	ldr	r1, [pc, #92]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c310:	4313      	orrs	r3, r2
 800c312:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c314:	4b15      	ldr	r3, [pc, #84]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	f023 0202 	bic.w	r2, r3, #2
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c320:	4912      	ldr	r1, [pc, #72]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c322:	4313      	orrs	r3, r2
 800c324:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c326:	4b11      	ldr	r3, [pc, #68]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32a:	4a10      	ldr	r2, [pc, #64]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c330:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	4a0d      	ldr	r2, [pc, #52]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c33c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c33e:	4b0b      	ldr	r3, [pc, #44]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	4a0a      	ldr	r2, [pc, #40]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c348:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c34a:	4b08      	ldr	r3, [pc, #32]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	4a07      	ldr	r2, [pc, #28]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c350:	f043 0301 	orr.w	r3, r3, #1
 800c354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	4a04      	ldr	r2, [pc, #16]	; (800c36c <HAL_RCC_OscConfig+0x76c>)
 800c35c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c362:	f7f7 ff13 	bl	800418c <HAL_GetTick>
 800c366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c368:	e011      	b.n	800c38e <HAL_RCC_OscConfig+0x78e>
 800c36a:	bf00      	nop
 800c36c:	58024400 	.word	0x58024400
 800c370:	58024800 	.word	0x58024800
 800c374:	fffffc0c 	.word	0xfffffc0c
 800c378:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c37c:	f7f7 ff06 	bl	800418c <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e08a      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c38e:	4b47      	ldr	r3, [pc, #284]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0f0      	beq.n	800c37c <HAL_RCC_OscConfig+0x77c>
 800c39a:	e082      	b.n	800c4a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c39c:	4b43      	ldr	r3, [pc, #268]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4a42      	ldr	r2, [pc, #264]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c3a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c3a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a8:	f7f7 fef0 	bl	800418c <HAL_GetTick>
 800c3ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c3ae:	e008      	b.n	800c3c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3b0:	f7f7 feec 	bl	800418c <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d901      	bls.n	800c3c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e070      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c3c2:	4b3a      	ldr	r3, [pc, #232]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1f0      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x7b0>
 800c3ce:	e068      	b.n	800c4a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c3d0:	4b36      	ldr	r3, [pc, #216]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c3d6:	4b35      	ldr	r3, [pc, #212]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d031      	beq.n	800c448 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	f003 0203 	and.w	r2, r3, #3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d12a      	bne.n	800c448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	091b      	lsrs	r3, r3, #4
 800c3f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d122      	bne.n	800c448 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c40e:	429a      	cmp	r2, r3
 800c410:	d11a      	bne.n	800c448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	0a5b      	lsrs	r3, r3, #9
 800c416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c41e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c420:	429a      	cmp	r2, r3
 800c422:	d111      	bne.n	800c448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	0c1b      	lsrs	r3, r3, #16
 800c428:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c430:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c432:	429a      	cmp	r2, r3
 800c434:	d108      	bne.n	800c448 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	0e1b      	lsrs	r3, r3, #24
 800c43a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c444:	429a      	cmp	r2, r3
 800c446:	d001      	beq.n	800c44c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e02b      	b.n	800c4a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c44c:	4b17      	ldr	r3, [pc, #92]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c450:	08db      	lsrs	r3, r3, #3
 800c452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c456:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d01f      	beq.n	800c4a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c462:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	4a11      	ldr	r2, [pc, #68]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c468:	f023 0301 	bic.w	r3, r3, #1
 800c46c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c46e:	f7f7 fe8d 	bl	800418c <HAL_GetTick>
 800c472:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c474:	bf00      	nop
 800c476:	f7f7 fe89 	bl	800418c <HAL_GetTick>
 800c47a:	4602      	mov	r2, r0
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	4293      	cmp	r3, r2
 800c480:	d0f9      	beq.n	800c476 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c482:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c486:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <HAL_RCC_OscConfig+0x8b0>)
 800c488:	4013      	ands	r3, r2
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c48e:	00d2      	lsls	r2, r2, #3
 800c490:	4906      	ldr	r1, [pc, #24]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c492:	4313      	orrs	r3, r2
 800c494:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c496:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49a:	4a04      	ldr	r2, [pc, #16]	; (800c4ac <HAL_RCC_OscConfig+0x8ac>)
 800c49c:	f043 0301 	orr.w	r3, r3, #1
 800c4a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3730      	adds	r7, #48	; 0x30
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	58024400 	.word	0x58024400
 800c4b0:	ffff0007 	.word	0xffff0007

0800c4b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b086      	sub	sp, #24
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e19c      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c4c8:	4b8a      	ldr	r3, [pc, #552]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 030f 	and.w	r3, r3, #15
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d910      	bls.n	800c4f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4d6:	4b87      	ldr	r3, [pc, #540]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f023 020f 	bic.w	r2, r3, #15
 800c4de:	4985      	ldr	r1, [pc, #532]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4e6:	4b83      	ldr	r3, [pc, #524]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 030f 	and.w	r3, r3, #15
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d001      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e184      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f003 0304 	and.w	r3, r3, #4
 800c500:	2b00      	cmp	r3, #0
 800c502:	d010      	beq.n	800c526 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	691a      	ldr	r2, [r3, #16]
 800c508:	4b7b      	ldr	r3, [pc, #492]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c510:	429a      	cmp	r2, r3
 800c512:	d908      	bls.n	800c526 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c514:	4b78      	ldr	r3, [pc, #480]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	4975      	ldr	r1, [pc, #468]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c522:	4313      	orrs	r3, r2
 800c524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0308 	and.w	r3, r3, #8
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d010      	beq.n	800c554 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	695a      	ldr	r2, [r3, #20]
 800c536:	4b70      	ldr	r3, [pc, #448]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c538:	69db      	ldr	r3, [r3, #28]
 800c53a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c53e:	429a      	cmp	r2, r3
 800c540:	d908      	bls.n	800c554 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c542:	4b6d      	ldr	r3, [pc, #436]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	496a      	ldr	r1, [pc, #424]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c550:	4313      	orrs	r3, r2
 800c552:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f003 0310 	and.w	r3, r3, #16
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d010      	beq.n	800c582 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	699a      	ldr	r2, [r3, #24]
 800c564:	4b64      	ldr	r3, [pc, #400]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d908      	bls.n	800c582 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c570:	4b61      	ldr	r3, [pc, #388]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c572:	69db      	ldr	r3, [r3, #28]
 800c574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	495e      	ldr	r1, [pc, #376]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c57e:	4313      	orrs	r3, r2
 800c580:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 0320 	and.w	r3, r3, #32
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d010      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	69da      	ldr	r2, [r3, #28]
 800c592:	4b59      	ldr	r3, [pc, #356]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d908      	bls.n	800c5b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c59e:	4b56      	ldr	r3, [pc, #344]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	4953      	ldr	r1, [pc, #332]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0302 	and.w	r3, r3, #2
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d010      	beq.n	800c5de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	4b4d      	ldr	r3, [pc, #308]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	f003 030f 	and.w	r3, r3, #15
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d908      	bls.n	800c5de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5cc:	4b4a      	ldr	r3, [pc, #296]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	f023 020f 	bic.w	r2, r3, #15
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	4947      	ldr	r1, [pc, #284]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d055      	beq.n	800c696 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c5ea:	4b43      	ldr	r3, [pc, #268]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	4940      	ldr	r1, [pc, #256]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	2b02      	cmp	r3, #2
 800c602:	d107      	bne.n	800c614 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c604:	4b3c      	ldr	r3, [pc, #240]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d121      	bne.n	800c654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	e0f6      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d107      	bne.n	800c62c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c61c:	4b36      	ldr	r3, [pc, #216]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d115      	bne.n	800c654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c628:	2301      	movs	r3, #1
 800c62a:	e0ea      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d107      	bne.n	800c644 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c634:	4b30      	ldr	r3, [pc, #192]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d109      	bne.n	800c654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	e0de      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c644:	4b2c      	ldr	r3, [pc, #176]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d101      	bne.n	800c654 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e0d6      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c654:	4b28      	ldr	r3, [pc, #160]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c656:	691b      	ldr	r3, [r3, #16]
 800c658:	f023 0207 	bic.w	r2, r3, #7
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	4925      	ldr	r1, [pc, #148]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c662:	4313      	orrs	r3, r2
 800c664:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c666:	f7f7 fd91 	bl	800418c <HAL_GetTick>
 800c66a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c66c:	e00a      	b.n	800c684 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c66e:	f7f7 fd8d 	bl	800418c <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	f241 3288 	movw	r2, #5000	; 0x1388
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d901      	bls.n	800c684 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c680:	2303      	movs	r3, #3
 800c682:	e0be      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c684:	4b1c      	ldr	r3, [pc, #112]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	429a      	cmp	r2, r3
 800c694:	d1eb      	bne.n	800c66e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0302 	and.w	r3, r3, #2
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d010      	beq.n	800c6c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68da      	ldr	r2, [r3, #12]
 800c6a6:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c6a8:	699b      	ldr	r3, [r3, #24]
 800c6aa:	f003 030f 	and.w	r3, r3, #15
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d208      	bcs.n	800c6c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c6b2:	4b11      	ldr	r3, [pc, #68]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	f023 020f 	bic.w	r2, r3, #15
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	490e      	ldr	r1, [pc, #56]	; (800c6f8 <HAL_RCC_ClockConfig+0x244>)
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c6c4:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 030f 	and.w	r3, r3, #15
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d214      	bcs.n	800c6fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6d2:	4b08      	ldr	r3, [pc, #32]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f023 020f 	bic.w	r2, r3, #15
 800c6da:	4906      	ldr	r1, [pc, #24]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6e2:	4b04      	ldr	r3, [pc, #16]	; (800c6f4 <HAL_RCC_ClockConfig+0x240>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 030f 	and.w	r3, r3, #15
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d005      	beq.n	800c6fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e086      	b.n	800c802 <HAL_RCC_ClockConfig+0x34e>
 800c6f4:	52002000 	.word	0x52002000
 800c6f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	d010      	beq.n	800c72a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	691a      	ldr	r2, [r3, #16]
 800c70c:	4b3f      	ldr	r3, [pc, #252]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c70e:	699b      	ldr	r3, [r3, #24]
 800c710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c714:	429a      	cmp	r2, r3
 800c716:	d208      	bcs.n	800c72a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c718:	4b3c      	ldr	r3, [pc, #240]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	4939      	ldr	r1, [pc, #228]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c726:	4313      	orrs	r3, r2
 800c728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0308 	and.w	r3, r3, #8
 800c732:	2b00      	cmp	r3, #0
 800c734:	d010      	beq.n	800c758 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	695a      	ldr	r2, [r3, #20]
 800c73a:	4b34      	ldr	r3, [pc, #208]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c742:	429a      	cmp	r2, r3
 800c744:	d208      	bcs.n	800c758 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c746:	4b31      	ldr	r3, [pc, #196]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	492e      	ldr	r1, [pc, #184]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c754:	4313      	orrs	r3, r2
 800c756:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0310 	and.w	r3, r3, #16
 800c760:	2b00      	cmp	r3, #0
 800c762:	d010      	beq.n	800c786 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	4b28      	ldr	r3, [pc, #160]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c76a:	69db      	ldr	r3, [r3, #28]
 800c76c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c770:	429a      	cmp	r2, r3
 800c772:	d208      	bcs.n	800c786 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c774:	4b25      	ldr	r3, [pc, #148]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	4922      	ldr	r1, [pc, #136]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c782:	4313      	orrs	r3, r2
 800c784:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d010      	beq.n	800c7b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	69da      	ldr	r2, [r3, #28]
 800c796:	4b1d      	ldr	r3, [pc, #116]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d208      	bcs.n	800c7b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7a2:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	4917      	ldr	r1, [pc, #92]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c7b4:	f000 f834 	bl	800c820 <HAL_RCC_GetSysClockFreq>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	4b14      	ldr	r3, [pc, #80]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	0a1b      	lsrs	r3, r3, #8
 800c7c0:	f003 030f 	and.w	r3, r3, #15
 800c7c4:	4912      	ldr	r1, [pc, #72]	; (800c810 <HAL_RCC_ClockConfig+0x35c>)
 800c7c6:	5ccb      	ldrb	r3, [r1, r3]
 800c7c8:	f003 031f 	and.w	r3, r3, #31
 800c7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c7d2:	4b0e      	ldr	r3, [pc, #56]	; (800c80c <HAL_RCC_ClockConfig+0x358>)
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f003 030f 	and.w	r3, r3, #15
 800c7da:	4a0d      	ldr	r2, [pc, #52]	; (800c810 <HAL_RCC_ClockConfig+0x35c>)
 800c7dc:	5cd3      	ldrb	r3, [r2, r3]
 800c7de:	f003 031f 	and.w	r3, r3, #31
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e8:	4a0a      	ldr	r2, [pc, #40]	; (800c814 <HAL_RCC_ClockConfig+0x360>)
 800c7ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c7ec:	4a0a      	ldr	r2, [pc, #40]	; (800c818 <HAL_RCC_ClockConfig+0x364>)
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c7f2:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <HAL_RCC_ClockConfig+0x368>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f6 fbbe 	bl	8002f78 <HAL_InitTick>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3718      	adds	r7, #24
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	58024400 	.word	0x58024400
 800c810:	08018ee4 	.word	0x08018ee4
 800c814:	24000088 	.word	0x24000088
 800c818:	24000084 	.word	0x24000084
 800c81c:	2400008c 	.word	0x2400008c

0800c820 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c820:	b480      	push	{r7}
 800c822:	b089      	sub	sp, #36	; 0x24
 800c824:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c826:	4bb3      	ldr	r3, [pc, #716]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c82e:	2b18      	cmp	r3, #24
 800c830:	f200 8155 	bhi.w	800cade <HAL_RCC_GetSysClockFreq+0x2be>
 800c834:	a201      	add	r2, pc, #4	; (adr r2, 800c83c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83a:	bf00      	nop
 800c83c:	0800c8a1 	.word	0x0800c8a1
 800c840:	0800cadf 	.word	0x0800cadf
 800c844:	0800cadf 	.word	0x0800cadf
 800c848:	0800cadf 	.word	0x0800cadf
 800c84c:	0800cadf 	.word	0x0800cadf
 800c850:	0800cadf 	.word	0x0800cadf
 800c854:	0800cadf 	.word	0x0800cadf
 800c858:	0800cadf 	.word	0x0800cadf
 800c85c:	0800c8c7 	.word	0x0800c8c7
 800c860:	0800cadf 	.word	0x0800cadf
 800c864:	0800cadf 	.word	0x0800cadf
 800c868:	0800cadf 	.word	0x0800cadf
 800c86c:	0800cadf 	.word	0x0800cadf
 800c870:	0800cadf 	.word	0x0800cadf
 800c874:	0800cadf 	.word	0x0800cadf
 800c878:	0800cadf 	.word	0x0800cadf
 800c87c:	0800c8cd 	.word	0x0800c8cd
 800c880:	0800cadf 	.word	0x0800cadf
 800c884:	0800cadf 	.word	0x0800cadf
 800c888:	0800cadf 	.word	0x0800cadf
 800c88c:	0800cadf 	.word	0x0800cadf
 800c890:	0800cadf 	.word	0x0800cadf
 800c894:	0800cadf 	.word	0x0800cadf
 800c898:	0800cadf 	.word	0x0800cadf
 800c89c:	0800c8d3 	.word	0x0800c8d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8a0:	4b94      	ldr	r3, [pc, #592]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0320 	and.w	r3, r3, #32
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d009      	beq.n	800c8c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ac:	4b91      	ldr	r3, [pc, #580]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	08db      	lsrs	r3, r3, #3
 800c8b2:	f003 0303 	and.w	r3, r3, #3
 800c8b6:	4a90      	ldr	r2, [pc, #576]	; (800caf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c8bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c8be:	e111      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c8c0:	4b8d      	ldr	r3, [pc, #564]	; (800caf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c8c2:	61bb      	str	r3, [r7, #24]
      break;
 800c8c4:	e10e      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c8c6:	4b8d      	ldr	r3, [pc, #564]	; (800cafc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c8c8:	61bb      	str	r3, [r7, #24]
      break;
 800c8ca:	e10b      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c8cc:	4b8c      	ldr	r3, [pc, #560]	; (800cb00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c8ce:	61bb      	str	r3, [r7, #24]
      break;
 800c8d0:	e108      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8d2:	4b88      	ldr	r3, [pc, #544]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c8dc:	4b85      	ldr	r3, [pc, #532]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	091b      	lsrs	r3, r3, #4
 800c8e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c8e8:	4b82      	ldr	r3, [pc, #520]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c8f2:	4b80      	ldr	r3, [pc, #512]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f6:	08db      	lsrs	r3, r3, #3
 800c8f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	2b00      	cmp	r3, #0
 800c912:	f000 80e1 	beq.w	800cad8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b02      	cmp	r3, #2
 800c91a:	f000 8083 	beq.w	800ca24 <HAL_RCC_GetSysClockFreq+0x204>
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b02      	cmp	r3, #2
 800c922:	f200 80a1 	bhi.w	800ca68 <HAL_RCC_GetSysClockFreq+0x248>
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <HAL_RCC_GetSysClockFreq+0x114>
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d056      	beq.n	800c9e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c932:	e099      	b.n	800ca68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c934:	4b6f      	ldr	r3, [pc, #444]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 0320 	and.w	r3, r3, #32
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d02d      	beq.n	800c99c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c940:	4b6c      	ldr	r3, [pc, #432]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	08db      	lsrs	r3, r3, #3
 800c946:	f003 0303 	and.w	r3, r3, #3
 800c94a:	4a6b      	ldr	r2, [pc, #428]	; (800caf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c94c:	fa22 f303 	lsr.w	r3, r2, r3
 800c950:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	ee07 3a90 	vmov	s15, r3
 800c958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	ee07 3a90 	vmov	s15, r3
 800c962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c96a:	4b62      	ldr	r3, [pc, #392]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c972:	ee07 3a90 	vmov	s15, r3
 800c976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c97a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c97e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cb04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c98a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c98e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c992:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c996:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c99a:	e087      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	ee07 3a90 	vmov	s15, r3
 800c9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cb08 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c9aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ae:	4b51      	ldr	r3, [pc, #324]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b6:	ee07 3a90 	vmov	s15, r3
 800c9ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9be:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cb04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c9de:	e065      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	ee07 3a90 	vmov	s15, r3
 800c9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cb0c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9f2:	4b40      	ldr	r3, [pc, #256]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9fa:	ee07 3a90 	vmov	s15, r3
 800c9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cb04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca22:	e043      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	ee07 3a90 	vmov	s15, r3
 800ca2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cb10 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ca32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca36:	4b2f      	ldr	r3, [pc, #188]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3e:	ee07 3a90 	vmov	s15, r3
 800ca42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca46:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cb04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca66:	e021      	b.n	800caac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	ee07 3a90 	vmov	s15, r3
 800ca6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca72:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cb0c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca7a:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cb04 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caa6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800caaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800caac:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800caae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab0:	0a5b      	lsrs	r3, r3, #9
 800cab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cab6:	3301      	adds	r3, #1
 800cab8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	ee07 3a90 	vmov	s15, r3
 800cac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cad0:	ee17 3a90 	vmov	r3, s15
 800cad4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cad6:	e005      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cad8:	2300      	movs	r3, #0
 800cada:	61bb      	str	r3, [r7, #24]
      break;
 800cadc:	e002      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cade:	4b07      	ldr	r3, [pc, #28]	; (800cafc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cae0:	61bb      	str	r3, [r7, #24]
      break;
 800cae2:	bf00      	nop
  }

  return sysclockfreq;
 800cae4:	69bb      	ldr	r3, [r7, #24]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3724      	adds	r7, #36	; 0x24
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr
 800caf2:	bf00      	nop
 800caf4:	58024400 	.word	0x58024400
 800caf8:	03d09000 	.word	0x03d09000
 800cafc:	003d0900 	.word	0x003d0900
 800cb00:	017d7840 	.word	0x017d7840
 800cb04:	46000000 	.word	0x46000000
 800cb08:	4c742400 	.word	0x4c742400
 800cb0c:	4a742400 	.word	0x4a742400
 800cb10:	4bbebc20 	.word	0x4bbebc20

0800cb14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb1a:	f7ff fe81 	bl	800c820 <HAL_RCC_GetSysClockFreq>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	4b10      	ldr	r3, [pc, #64]	; (800cb64 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	0a1b      	lsrs	r3, r3, #8
 800cb26:	f003 030f 	and.w	r3, r3, #15
 800cb2a:	490f      	ldr	r1, [pc, #60]	; (800cb68 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb2c:	5ccb      	ldrb	r3, [r1, r3]
 800cb2e:	f003 031f 	and.w	r3, r3, #31
 800cb32:	fa22 f303 	lsr.w	r3, r2, r3
 800cb36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb38:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f003 030f 	and.w	r3, r3, #15
 800cb40:	4a09      	ldr	r2, [pc, #36]	; (800cb68 <HAL_RCC_GetHCLKFreq+0x54>)
 800cb42:	5cd3      	ldrb	r3, [r2, r3]
 800cb44:	f003 031f 	and.w	r3, r3, #31
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4e:	4a07      	ldr	r2, [pc, #28]	; (800cb6c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cb52:	4a07      	ldr	r2, [pc, #28]	; (800cb70 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cb58:	4b04      	ldr	r3, [pc, #16]	; (800cb6c <HAL_RCC_GetHCLKFreq+0x58>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	58024400 	.word	0x58024400
 800cb68:	08018ee4 	.word	0x08018ee4
 800cb6c:	24000088 	.word	0x24000088
 800cb70:	24000084 	.word	0x24000084

0800cb74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cb78:	f7ff ffcc 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	091b      	lsrs	r3, r3, #4
 800cb84:	f003 0307 	and.w	r3, r3, #7
 800cb88:	4904      	ldr	r1, [pc, #16]	; (800cb9c <HAL_RCC_GetPCLK1Freq+0x28>)
 800cb8a:	5ccb      	ldrb	r3, [r1, r3]
 800cb8c:	f003 031f 	and.w	r3, r3, #31
 800cb90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	58024400 	.word	0x58024400
 800cb9c:	08018ee4 	.word	0x08018ee4

0800cba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cba4:	f7ff ffb6 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	4b06      	ldr	r3, [pc, #24]	; (800cbc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	0a1b      	lsrs	r3, r3, #8
 800cbb0:	f003 0307 	and.w	r3, r3, #7
 800cbb4:	4904      	ldr	r1, [pc, #16]	; (800cbc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cbb6:	5ccb      	ldrb	r3, [r1, r3]
 800cbb8:	f003 031f 	and.w	r3, r3, #31
 800cbbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	58024400 	.word	0x58024400
 800cbc8:	08018ee4 	.word	0x08018ee4

0800cbcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	223f      	movs	r2, #63	; 0x3f
 800cbda:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cbdc:	4b1a      	ldr	r3, [pc, #104]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	f003 0207 	and.w	r2, r3, #7
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800cbe8:	4b17      	ldr	r3, [pc, #92]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800cbf4:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cbf6:	699b      	ldr	r3, [r3, #24]
 800cbf8:	f003 020f 	and.w	r2, r3, #15
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800cc00:	4b11      	ldr	r3, [pc, #68]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cc02:	699b      	ldr	r3, [r3, #24]
 800cc04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800cc0c:	4b0e      	ldr	r3, [pc, #56]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800cc18:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cc1a:	69db      	ldr	r3, [r3, #28]
 800cc1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800cc24:	4b08      	ldr	r3, [pc, #32]	; (800cc48 <HAL_RCC_GetClockConfig+0x7c>)
 800cc26:	6a1b      	ldr	r3, [r3, #32]
 800cc28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cc30:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <HAL_RCC_GetClockConfig+0x80>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 020f 	and.w	r2, r3, #15
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	601a      	str	r2, [r3, #0]
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	58024400 	.word	0x58024400
 800cc4c:	52002000 	.word	0x52002000

0800cc50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc54:	b0ca      	sub	sp, #296	; 0x128
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc62:	2300      	movs	r3, #0
 800cc64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800cc74:	2500      	movs	r5, #0
 800cc76:	ea54 0305 	orrs.w	r3, r4, r5
 800cc7a:	d049      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cc80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc86:	d02f      	beq.n	800cce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cc8c:	d828      	bhi.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc92:	d01a      	beq.n	800ccca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc98:	d822      	bhi.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cca2:	d007      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cca4:	e01c      	b.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cca6:	4bb8      	ldr	r3, [pc, #736]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	4ab7      	ldr	r2, [pc, #732]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccb2:	e01a      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ccb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccb8:	3308      	adds	r3, #8
 800ccba:	2102      	movs	r1, #2
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f002 fb61 	bl	800f384 <RCCEx_PLL2_Config>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccc8:	e00f      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ccca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccce:	3328      	adds	r3, #40	; 0x28
 800ccd0:	2102      	movs	r1, #2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f002 fc08 	bl	800f4e8 <RCCEx_PLL3_Config>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccde:	e004      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cce6:	e000      	b.n	800ccea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800cce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ccf2:	4ba5      	ldr	r3, [pc, #660]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ccfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ccfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd00:	4aa1      	ldr	r2, [pc, #644]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd02:	430b      	orrs	r3, r1
 800cd04:	6513      	str	r3, [r2, #80]	; 0x50
 800cd06:	e003      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cd10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800cd1c:	f04f 0900 	mov.w	r9, #0
 800cd20:	ea58 0309 	orrs.w	r3, r8, r9
 800cd24:	d047      	beq.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800cd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2c:	2b04      	cmp	r3, #4
 800cd2e:	d82a      	bhi.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cd30:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd36:	bf00      	nop
 800cd38:	0800cd4d 	.word	0x0800cd4d
 800cd3c:	0800cd5b 	.word	0x0800cd5b
 800cd40:	0800cd71 	.word	0x0800cd71
 800cd44:	0800cd8f 	.word	0x0800cd8f
 800cd48:	0800cd8f 	.word	0x0800cd8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd4c:	4b8e      	ldr	r3, [pc, #568]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	4a8d      	ldr	r2, [pc, #564]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd58:	e01a      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd5e:	3308      	adds	r3, #8
 800cd60:	2100      	movs	r1, #0
 800cd62:	4618      	mov	r0, r3
 800cd64:	f002 fb0e 	bl	800f384 <RCCEx_PLL2_Config>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd6e:	e00f      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cd74:	3328      	adds	r3, #40	; 0x28
 800cd76:	2100      	movs	r1, #0
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f002 fbb5 	bl	800f4e8 <RCCEx_PLL3_Config>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd84:	e004      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cd8c:	e000      	b.n	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10a      	bne.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd98:	4b7b      	ldr	r3, [pc, #492]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd9c:	f023 0107 	bic.w	r1, r3, #7
 800cda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda6:	4a78      	ldr	r2, [pc, #480]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cda8:	430b      	orrs	r3, r1
 800cdaa:	6513      	str	r3, [r2, #80]	; 0x50
 800cdac:	e003      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cdb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800cdc2:	f04f 0b00 	mov.w	fp, #0
 800cdc6:	ea5a 030b 	orrs.w	r3, sl, fp
 800cdca:	d04c      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cdd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdd6:	d030      	beq.n	800ce3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cdd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cddc:	d829      	bhi.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdde:	2bc0      	cmp	r3, #192	; 0xc0
 800cde0:	d02d      	beq.n	800ce3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cde2:	2bc0      	cmp	r3, #192	; 0xc0
 800cde4:	d825      	bhi.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cde6:	2b80      	cmp	r3, #128	; 0x80
 800cde8:	d018      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cdea:	2b80      	cmp	r3, #128	; 0x80
 800cdec:	d821      	bhi.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cdf2:	2b40      	cmp	r3, #64	; 0x40
 800cdf4:	d007      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cdf6:	e01c      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdf8:	4b63      	ldr	r3, [pc, #396]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdfc:	4a62      	ldr	r2, [pc, #392]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ce04:	e01c      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f002 fab8 	bl	800f384 <RCCEx_PLL2_Config>
 800ce14:	4603      	mov	r3, r0
 800ce16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ce1a:	e011      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce20:	3328      	adds	r3, #40	; 0x28
 800ce22:	2100      	movs	r1, #0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f002 fb5f 	bl	800f4e8 <RCCEx_PLL3_Config>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ce30:	e006      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ce38:	e002      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce3a:	bf00      	nop
 800ce3c:	e000      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10a      	bne.n	800ce5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ce48:	4b4f      	ldr	r3, [pc, #316]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce4c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ce50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce56:	4a4c      	ldr	r2, [pc, #304]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce58:	430b      	orrs	r3, r1
 800ce5a:	6513      	str	r3, [r2, #80]	; 0x50
 800ce5c:	e003      	b.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ce62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ce72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ce76:	2300      	movs	r3, #0
 800ce78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ce7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ce80:	460b      	mov	r3, r1
 800ce82:	4313      	orrs	r3, r2
 800ce84:	d053      	beq.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ce8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ce8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce92:	d035      	beq.n	800cf00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce98:	d82e      	bhi.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce9e:	d031      	beq.n	800cf04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800cea0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cea4:	d828      	bhi.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800cea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ceaa:	d01a      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ceac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ceb0:	d822      	bhi.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d003      	beq.n	800cebe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ceb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ceba:	d007      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800cebc:	e01c      	b.n	800cef8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cebe:	4b32      	ldr	r3, [pc, #200]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	4a31      	ldr	r2, [pc, #196]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cec8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ceca:	e01c      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ced0:	3308      	adds	r3, #8
 800ced2:	2100      	movs	r1, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f002 fa55 	bl	800f384 <RCCEx_PLL2_Config>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cee0:	e011      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cee6:	3328      	adds	r3, #40	; 0x28
 800cee8:	2100      	movs	r1, #0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f002 fafc 	bl	800f4e8 <RCCEx_PLL3_Config>
 800cef0:	4603      	mov	r3, r0
 800cef2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cef6:	e006      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cefe:	e002      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cf00:	bf00      	nop
 800cf02:	e000      	b.n	800cf06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800cf04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d10b      	bne.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cf0e:	4b1e      	ldr	r3, [pc, #120]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cf10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf12:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800cf16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cf1e:	4a1a      	ldr	r2, [pc, #104]	; (800cf88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cf20:	430b      	orrs	r3, r1
 800cf22:	6593      	str	r3, [r2, #88]	; 0x58
 800cf24:	e003      	b.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cf2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cf2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf36:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800cf3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cf44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	d056      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cf4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf5a:	d038      	beq.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cf5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf60:	d831      	bhi.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf66:	d034      	beq.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cf68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf6c:	d82b      	bhi.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf72:	d01d      	beq.n	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cf74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf78:	d825      	bhi.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d006      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cf7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf82:	d00a      	beq.n	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf84:	e01f      	b.n	800cfc6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf86:	bf00      	nop
 800cf88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf8c:	4ba2      	ldr	r3, [pc, #648]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf90:	4aa1      	ldr	r2, [pc, #644]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf98:	e01c      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cf9e:	3308      	adds	r3, #8
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f002 f9ee 	bl	800f384 <RCCEx_PLL2_Config>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cfae:	e011      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfb4:	3328      	adds	r3, #40	; 0x28
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f002 fa95 	bl	800f4e8 <RCCEx_PLL3_Config>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cfc4:	e006      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800cfcc:	e002      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cfce:	bf00      	nop
 800cfd0:	e000      	b.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cfd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cfdc:	4b8e      	ldr	r3, [pc, #568]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfe0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800cfe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800cfe8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cfec:	4a8a      	ldr	r2, [pc, #552]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfee:	430b      	orrs	r3, r1
 800cff0:	6593      	str	r3, [r2, #88]	; 0x58
 800cff2:	e003      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800cff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d004:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d008:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d00c:	2300      	movs	r3, #0
 800d00e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d012:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d016:	460b      	mov	r3, r1
 800d018:	4313      	orrs	r3, r2
 800d01a:	d03a      	beq.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d022:	2b30      	cmp	r3, #48	; 0x30
 800d024:	d01f      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d026:	2b30      	cmp	r3, #48	; 0x30
 800d028:	d819      	bhi.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d02a:	2b20      	cmp	r3, #32
 800d02c:	d00c      	beq.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d02e:	2b20      	cmp	r3, #32
 800d030:	d815      	bhi.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d032:	2b00      	cmp	r3, #0
 800d034:	d019      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d036:	2b10      	cmp	r3, #16
 800d038:	d111      	bne.n	800d05e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d03a:	4b77      	ldr	r3, [pc, #476]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d03e:	4a76      	ldr	r2, [pc, #472]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d046:	e011      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d04c:	3308      	adds	r3, #8
 800d04e:	2102      	movs	r1, #2
 800d050:	4618      	mov	r0, r3
 800d052:	f002 f997 	bl	800f384 <RCCEx_PLL2_Config>
 800d056:	4603      	mov	r3, r0
 800d058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d05c:	e006      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d064:	e002      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d066:	bf00      	nop
 800d068:	e000      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d06a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d074:	4b68      	ldr	r3, [pc, #416]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d078:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d082:	4a65      	ldr	r2, [pc, #404]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d084:	430b      	orrs	r3, r1
 800d086:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d088:	e003      	b.n	800d092 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d08a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d08e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d09e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d0a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	d051      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0bc:	d035      	beq.n	800d12a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d0be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0c2:	d82e      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0c8:	d031      	beq.n	800d12e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d0ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d0ce:	d828      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0d4:	d01a      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d0da:	d822      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d003      	beq.n	800d0e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0e4:	d007      	beq.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d0e6:	e01c      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0e8:	4b4b      	ldr	r3, [pc, #300]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ec:	4a4a      	ldr	r2, [pc, #296]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0f4:	e01c      	b.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	4618      	mov	r0, r3
 800d100:	f002 f940 	bl	800f384 <RCCEx_PLL2_Config>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d10a:	e011      	b.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d110:	3328      	adds	r3, #40	; 0x28
 800d112:	2100      	movs	r1, #0
 800d114:	4618      	mov	r0, r3
 800d116:	f002 f9e7 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d120:	e006      	b.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d128:	e002      	b.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d12a:	bf00      	nop
 800d12c:	e000      	b.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d12e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10a      	bne.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d138:	4b37      	ldr	r3, [pc, #220]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d13c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d146:	4a34      	ldr	r2, [pc, #208]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d148:	430b      	orrs	r3, r1
 800d14a:	6513      	str	r3, [r2, #80]	; 0x50
 800d14c:	e003      	b.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d152:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d166:	2300      	movs	r3, #0
 800d168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d16c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d170:	460b      	mov	r3, r1
 800d172:	4313      	orrs	r3, r2
 800d174:	d056      	beq.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d17c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d180:	d033      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d186:	d82c      	bhi.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d188:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d18c:	d02f      	beq.n	800d1ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d18e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d192:	d826      	bhi.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d194:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d198:	d02b      	beq.n	800d1f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d19a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d19e:	d820      	bhi.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d1a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1a4:	d012      	beq.n	800d1cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d1aa:	d81a      	bhi.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d022      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1b4:	d115      	bne.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	2101      	movs	r1, #1
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f002 f8e0 	bl	800f384 <RCCEx_PLL2_Config>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d1ca:	e015      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d1d0:	3328      	adds	r3, #40	; 0x28
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f002 f987 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d1e0:	e00a      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d1e8:	e006      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1ea:	bf00      	nop
 800d1ec:	e004      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1ee:	bf00      	nop
 800d1f0:	e002      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1f2:	bf00      	nop
 800d1f4:	e000      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10d      	bne.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d200:	4b05      	ldr	r3, [pc, #20]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d204:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d20c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d20e:	4a02      	ldr	r2, [pc, #8]	; (800d218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d210:	430b      	orrs	r3, r1
 800d212:	6513      	str	r3, [r2, #80]	; 0x50
 800d214:	e006      	b.n	800d224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d216:	bf00      	nop
 800d218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d21c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d234:	2300      	movs	r3, #0
 800d236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d23a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d23e:	460b      	mov	r3, r1
 800d240:	4313      	orrs	r3, r2
 800d242:	d055      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d248:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d24c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d250:	d033      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d256:	d82c      	bhi.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d25c:	d02f      	beq.n	800d2be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d262:	d826      	bhi.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d268:	d02b      	beq.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d26a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d26e:	d820      	bhi.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d274:	d012      	beq.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d27a:	d81a      	bhi.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d022      	beq.n	800d2c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d284:	d115      	bne.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d28a:	3308      	adds	r3, #8
 800d28c:	2101      	movs	r1, #1
 800d28e:	4618      	mov	r0, r3
 800d290:	f002 f878 	bl	800f384 <RCCEx_PLL2_Config>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d29a:	e015      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2a0:	3328      	adds	r3, #40	; 0x28
 800d2a2:	2101      	movs	r1, #1
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f002 f91f 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d2b0:	e00a      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d2b8:	e006      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d2ba:	bf00      	nop
 800d2bc:	e004      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d2be:	bf00      	nop
 800d2c0:	e002      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d2c2:	bf00      	nop
 800d2c4:	e000      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d2c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10b      	bne.n	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d2d0:	4ba3      	ldr	r3, [pc, #652]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d2e0:	4a9f      	ldr	r2, [pc, #636]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d2e2:	430b      	orrs	r3, r1
 800d2e4:	6593      	str	r3, [r2, #88]	; 0x58
 800d2e6:	e003      	b.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d2ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d2fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d300:	2300      	movs	r3, #0
 800d302:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d30a:	460b      	mov	r3, r1
 800d30c:	4313      	orrs	r3, r2
 800d30e:	d037      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d31a:	d00e      	beq.n	800d33a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d31c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d320:	d816      	bhi.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d322:	2b00      	cmp	r3, #0
 800d324:	d018      	beq.n	800d358 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d32a:	d111      	bne.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d32c:	4b8c      	ldr	r3, [pc, #560]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d330:	4a8b      	ldr	r2, [pc, #556]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d338:	e00f      	b.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d33e:	3308      	adds	r3, #8
 800d340:	2101      	movs	r1, #1
 800d342:	4618      	mov	r0, r3
 800d344:	f002 f81e 	bl	800f384 <RCCEx_PLL2_Config>
 800d348:	4603      	mov	r3, r0
 800d34a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d34e:	e004      	b.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d356:	e000      	b.n	800d35a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10a      	bne.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d362:	4b7f      	ldr	r3, [pc, #508]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d366:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d36e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d370:	4a7b      	ldr	r2, [pc, #492]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d372:	430b      	orrs	r3, r1
 800d374:	6513      	str	r3, [r2, #80]	; 0x50
 800d376:	e003      	b.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d378:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d37c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d38c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d390:	2300      	movs	r3, #0
 800d392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d39a:	460b      	mov	r3, r1
 800d39c:	4313      	orrs	r3, r2
 800d39e:	d039      	beq.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d81c      	bhi.n	800d3e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d3aa:	a201      	add	r2, pc, #4	; (adr r2, 800d3b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b0:	0800d3ed 	.word	0x0800d3ed
 800d3b4:	0800d3c1 	.word	0x0800d3c1
 800d3b8:	0800d3cf 	.word	0x0800d3cf
 800d3bc:	0800d3ed 	.word	0x0800d3ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3c0:	4b67      	ldr	r3, [pc, #412]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c4:	4a66      	ldr	r2, [pc, #408]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d3cc:	e00f      	b.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	2102      	movs	r1, #2
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f001 ffd4 	bl	800f384 <RCCEx_PLL2_Config>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d3e2:	e004      	b.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d3ea:	e000      	b.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10a      	bne.n	800d40c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d3f6:	4b5a      	ldr	r3, [pc, #360]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d3f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3fa:	f023 0103 	bic.w	r1, r3, #3
 800d3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d404:	4a56      	ldr	r2, [pc, #344]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d406:	430b      	orrs	r3, r1
 800d408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d40a:	e003      	b.n	800d414 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d40c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d424:	2300      	movs	r3, #0
 800d426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d42a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d42e:	460b      	mov	r3, r1
 800d430:	4313      	orrs	r3, r2
 800d432:	f000 809f 	beq.w	800d574 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d436:	4b4b      	ldr	r3, [pc, #300]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a4a      	ldr	r2, [pc, #296]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d440:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d442:	f7f6 fea3 	bl	800418c <HAL_GetTick>
 800d446:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d44a:	e00b      	b.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d44c:	f7f6 fe9e 	bl	800418c <HAL_GetTick>
 800d450:	4602      	mov	r2, r0
 800d452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	2b64      	cmp	r3, #100	; 0x64
 800d45a:	d903      	bls.n	800d464 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d45c:	2303      	movs	r3, #3
 800d45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d462:	e005      	b.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d464:	4b3f      	ldr	r3, [pc, #252]	; (800d564 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0ed      	beq.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d474:	2b00      	cmp	r3, #0
 800d476:	d179      	bne.n	800d56c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d478:	4b39      	ldr	r3, [pc, #228]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d47a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d47c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d484:	4053      	eors	r3, r2
 800d486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d015      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d48e:	4b34      	ldr	r3, [pc, #208]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d496:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d49a:	4b31      	ldr	r3, [pc, #196]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49e:	4a30      	ldr	r2, [pc, #192]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d4a6:	4b2e      	ldr	r3, [pc, #184]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4aa:	4a2d      	ldr	r2, [pc, #180]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d4b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d4b2:	4a2b      	ldr	r2, [pc, #172]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800d4b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d4be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4c6:	d118      	bne.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4c8:	f7f6 fe60 	bl	800418c <HAL_GetTick>
 800d4cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4d0:	e00d      	b.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d4d2:	f7f6 fe5b 	bl	800418c <HAL_GetTick>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800d4dc:	1ad2      	subs	r2, r2, r3
 800d4de:	f241 3388 	movw	r3, #5000	; 0x1388
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d903      	bls.n	800d4ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800d4ec:	e005      	b.n	800d4fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4ee:	4b1c      	ldr	r3, [pc, #112]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0eb      	beq.n	800d4d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d129      	bne.n	800d556 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d50a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d50e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d512:	d10e      	bne.n	800d532 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d514:	4b12      	ldr	r3, [pc, #72]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d51c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d524:	091a      	lsrs	r2, r3, #4
 800d526:	4b10      	ldr	r3, [pc, #64]	; (800d568 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d528:	4013      	ands	r3, r2
 800d52a:	4a0d      	ldr	r2, [pc, #52]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d52c:	430b      	orrs	r3, r1
 800d52e:	6113      	str	r3, [r2, #16]
 800d530:	e005      	b.n	800d53e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d532:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d534:	691b      	ldr	r3, [r3, #16]
 800d536:	4a0a      	ldr	r2, [pc, #40]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d538:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d53c:	6113      	str	r3, [r2, #16]
 800d53e:	4b08      	ldr	r3, [pc, #32]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d540:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d54a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d54e:	4a04      	ldr	r2, [pc, #16]	; (800d560 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d550:	430b      	orrs	r3, r1
 800d552:	6713      	str	r3, [r2, #112]	; 0x70
 800d554:	e00e      	b.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d55a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800d55e:	e009      	b.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d560:	58024400 	.word	0x58024400
 800d564:	58024800 	.word	0x58024800
 800d568:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	f002 0301 	and.w	r3, r2, #1
 800d580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d584:	2300      	movs	r3, #0
 800d586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d58a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d58e:	460b      	mov	r3, r1
 800d590:	4313      	orrs	r3, r2
 800d592:	f000 8089 	beq.w	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d59a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d59c:	2b28      	cmp	r3, #40	; 0x28
 800d59e:	d86b      	bhi.n	800d678 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800d5a0:	a201      	add	r2, pc, #4	; (adr r2, 800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800d5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a6:	bf00      	nop
 800d5a8:	0800d681 	.word	0x0800d681
 800d5ac:	0800d679 	.word	0x0800d679
 800d5b0:	0800d679 	.word	0x0800d679
 800d5b4:	0800d679 	.word	0x0800d679
 800d5b8:	0800d679 	.word	0x0800d679
 800d5bc:	0800d679 	.word	0x0800d679
 800d5c0:	0800d679 	.word	0x0800d679
 800d5c4:	0800d679 	.word	0x0800d679
 800d5c8:	0800d64d 	.word	0x0800d64d
 800d5cc:	0800d679 	.word	0x0800d679
 800d5d0:	0800d679 	.word	0x0800d679
 800d5d4:	0800d679 	.word	0x0800d679
 800d5d8:	0800d679 	.word	0x0800d679
 800d5dc:	0800d679 	.word	0x0800d679
 800d5e0:	0800d679 	.word	0x0800d679
 800d5e4:	0800d679 	.word	0x0800d679
 800d5e8:	0800d663 	.word	0x0800d663
 800d5ec:	0800d679 	.word	0x0800d679
 800d5f0:	0800d679 	.word	0x0800d679
 800d5f4:	0800d679 	.word	0x0800d679
 800d5f8:	0800d679 	.word	0x0800d679
 800d5fc:	0800d679 	.word	0x0800d679
 800d600:	0800d679 	.word	0x0800d679
 800d604:	0800d679 	.word	0x0800d679
 800d608:	0800d681 	.word	0x0800d681
 800d60c:	0800d679 	.word	0x0800d679
 800d610:	0800d679 	.word	0x0800d679
 800d614:	0800d679 	.word	0x0800d679
 800d618:	0800d679 	.word	0x0800d679
 800d61c:	0800d679 	.word	0x0800d679
 800d620:	0800d679 	.word	0x0800d679
 800d624:	0800d679 	.word	0x0800d679
 800d628:	0800d681 	.word	0x0800d681
 800d62c:	0800d679 	.word	0x0800d679
 800d630:	0800d679 	.word	0x0800d679
 800d634:	0800d679 	.word	0x0800d679
 800d638:	0800d679 	.word	0x0800d679
 800d63c:	0800d679 	.word	0x0800d679
 800d640:	0800d679 	.word	0x0800d679
 800d644:	0800d679 	.word	0x0800d679
 800d648:	0800d681 	.word	0x0800d681
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d64c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d650:	3308      	adds	r3, #8
 800d652:	2101      	movs	r1, #1
 800d654:	4618      	mov	r0, r3
 800d656:	f001 fe95 	bl	800f384 <RCCEx_PLL2_Config>
 800d65a:	4603      	mov	r3, r0
 800d65c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d660:	e00f      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d666:	3328      	adds	r3, #40	; 0x28
 800d668:	2101      	movs	r1, #1
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 ff3c 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d670:	4603      	mov	r3, r0
 800d672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d676:	e004      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d67e:	e000      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800d680:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d686:	2b00      	cmp	r3, #0
 800d688:	d10a      	bne.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d68a:	4bbf      	ldr	r3, [pc, #764]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800d692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d698:	4abb      	ldr	r2, [pc, #748]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d69a:	430b      	orrs	r3, r1
 800d69c:	6553      	str	r3, [r2, #84]	; 0x54
 800d69e:	e003      	b.n	800d6a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d6a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d6a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b0:	f002 0302 	and.w	r3, r2, #2
 800d6b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d6be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	d041      	beq.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d6c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6ce:	2b05      	cmp	r3, #5
 800d6d0:	d824      	bhi.n	800d71c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800d6d2:	a201      	add	r2, pc, #4	; (adr r2, 800d6d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800d6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6d8:	0800d725 	.word	0x0800d725
 800d6dc:	0800d6f1 	.word	0x0800d6f1
 800d6e0:	0800d707 	.word	0x0800d707
 800d6e4:	0800d725 	.word	0x0800d725
 800d6e8:	0800d725 	.word	0x0800d725
 800d6ec:	0800d725 	.word	0x0800d725
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f001 fe43 	bl	800f384 <RCCEx_PLL2_Config>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d704:	e00f      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d70a:	3328      	adds	r3, #40	; 0x28
 800d70c:	2101      	movs	r1, #1
 800d70e:	4618      	mov	r0, r3
 800d710:	f001 feea 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d714:	4603      	mov	r3, r0
 800d716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d71a:	e004      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d722:	e000      	b.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800d724:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d72e:	4b96      	ldr	r3, [pc, #600]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d732:	f023 0107 	bic.w	r1, r3, #7
 800d736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d73a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d73c:	4a92      	ldr	r2, [pc, #584]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d73e:	430b      	orrs	r3, r1
 800d740:	6553      	str	r3, [r2, #84]	; 0x54
 800d742:	e003      	b.n	800d74c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	f002 0304 	and.w	r3, r2, #4
 800d758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d75c:	2300      	movs	r3, #0
 800d75e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d762:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d766:	460b      	mov	r3, r1
 800d768:	4313      	orrs	r3, r2
 800d76a:	d044      	beq.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d774:	2b05      	cmp	r3, #5
 800d776:	d825      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800d778:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800d77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77e:	bf00      	nop
 800d780:	0800d7cd 	.word	0x0800d7cd
 800d784:	0800d799 	.word	0x0800d799
 800d788:	0800d7af 	.word	0x0800d7af
 800d78c:	0800d7cd 	.word	0x0800d7cd
 800d790:	0800d7cd 	.word	0x0800d7cd
 800d794:	0800d7cd 	.word	0x0800d7cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d79c:	3308      	adds	r3, #8
 800d79e:	2101      	movs	r1, #1
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f001 fdef 	bl	800f384 <RCCEx_PLL2_Config>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d7ac:	e00f      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b2:	3328      	adds	r3, #40	; 0x28
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fe96 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d7c2:	e004      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d7ca:	e000      	b.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800d7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d10b      	bne.n	800d7ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d7d6:	4b6c      	ldr	r3, [pc, #432]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7da:	f023 0107 	bic.w	r1, r3, #7
 800d7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d7e6:	4a68      	ldr	r2, [pc, #416]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d7e8:	430b      	orrs	r3, r1
 800d7ea:	6593      	str	r3, [r2, #88]	; 0x58
 800d7ec:	e003      	b.n	800d7f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d7f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f002 0320 	and.w	r3, r2, #32
 800d802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d806:	2300      	movs	r3, #0
 800d808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d80c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d810:	460b      	mov	r3, r1
 800d812:	4313      	orrs	r3, r2
 800d814:	d055      	beq.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d822:	d033      	beq.n	800d88c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800d824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d828:	d82c      	bhi.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d82a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d82e:	d02f      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800d830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d834:	d826      	bhi.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d83a:	d02b      	beq.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800d83c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d840:	d820      	bhi.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d846:	d012      	beq.n	800d86e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d84c:	d81a      	bhi.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d022      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800d852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d856:	d115      	bne.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d85c:	3308      	adds	r3, #8
 800d85e:	2100      	movs	r1, #0
 800d860:	4618      	mov	r0, r3
 800d862:	f001 fd8f 	bl	800f384 <RCCEx_PLL2_Config>
 800d866:	4603      	mov	r3, r0
 800d868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d86c:	e015      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d86e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d872:	3328      	adds	r3, #40	; 0x28
 800d874:	2102      	movs	r1, #2
 800d876:	4618      	mov	r0, r3
 800d878:	f001 fe36 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d882:	e00a      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d88a:	e006      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d88c:	bf00      	nop
 800d88e:	e004      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d890:	bf00      	nop
 800d892:	e002      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d894:	bf00      	nop
 800d896:	e000      	b.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800d898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d89a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10b      	bne.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d8a2:	4b39      	ldr	r3, [pc, #228]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8b2:	4a35      	ldr	r2, [pc, #212]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d8b4:	430b      	orrs	r3, r1
 800d8b6:	6553      	str	r3, [r2, #84]	; 0x54
 800d8b8:	e003      	b.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800d8ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	d058      	beq.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d8ee:	d033      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d8f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d8f4:	d82c      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d8f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8fa:	d02f      	beq.n	800d95c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800d8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d900:	d826      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d902:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d906:	d02b      	beq.n	800d960 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800d908:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d90c:	d820      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d90e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d912:	d012      	beq.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800d914:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d918:	d81a      	bhi.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d022      	beq.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800d91e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d922:	d115      	bne.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d928:	3308      	adds	r3, #8
 800d92a:	2100      	movs	r1, #0
 800d92c:	4618      	mov	r0, r3
 800d92e:	f001 fd29 	bl	800f384 <RCCEx_PLL2_Config>
 800d932:	4603      	mov	r3, r0
 800d934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d938:	e015      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d93a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d93e:	3328      	adds	r3, #40	; 0x28
 800d940:	2102      	movs	r1, #2
 800d942:	4618      	mov	r0, r3
 800d944:	f001 fdd0 	bl	800f4e8 <RCCEx_PLL3_Config>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d94e:	e00a      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d950:	2301      	movs	r3, #1
 800d952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d956:	e006      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d958:	bf00      	nop
 800d95a:	e004      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d95c:	bf00      	nop
 800d95e:	e002      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d960:	bf00      	nop
 800d962:	e000      	b.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800d964:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d10e      	bne.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d96e:	4b06      	ldr	r3, [pc, #24]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d972:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800d976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d97a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d97e:	4a02      	ldr	r2, [pc, #8]	; (800d988 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800d980:	430b      	orrs	r3, r1
 800d982:	6593      	str	r3, [r2, #88]	; 0x58
 800d984:	e006      	b.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800d986:	bf00      	nop
 800d988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d98c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800d9a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d9aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	d055      	beq.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d9b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d9bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d9c0:	d033      	beq.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800d9c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d9c6:	d82c      	bhi.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9cc:	d02f      	beq.n	800da2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800d9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9d2:	d826      	bhi.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d9d8:	d02b      	beq.n	800da32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800d9da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d9de:	d820      	bhi.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9e4:	d012      	beq.n	800da0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800d9e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d9ea:	d81a      	bhi.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d022      	beq.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800d9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9f4:	d115      	bne.n	800da22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	4618      	mov	r0, r3
 800da00:	f001 fcc0 	bl	800f384 <RCCEx_PLL2_Config>
 800da04:	4603      	mov	r3, r0
 800da06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800da0a:	e015      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da10:	3328      	adds	r3, #40	; 0x28
 800da12:	2102      	movs	r1, #2
 800da14:	4618      	mov	r0, r3
 800da16:	f001 fd67 	bl	800f4e8 <RCCEx_PLL3_Config>
 800da1a:	4603      	mov	r3, r0
 800da1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800da20:	e00a      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da28:	e006      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800da2a:	bf00      	nop
 800da2c:	e004      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800da2e:	bf00      	nop
 800da30:	e002      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800da32:	bf00      	nop
 800da34:	e000      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800da36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d10b      	bne.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800da40:	4ba1      	ldr	r3, [pc, #644]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800da48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da50:	4a9d      	ldr	r2, [pc, #628]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800da52:	430b      	orrs	r3, r1
 800da54:	6593      	str	r3, [r2, #88]	; 0x58
 800da56:	e003      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800da60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da68:	f002 0308 	and.w	r3, r2, #8
 800da6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da70:	2300      	movs	r3, #0
 800da72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800da76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800da7a:	460b      	mov	r3, r1
 800da7c:	4313      	orrs	r3, r2
 800da7e:	d01e      	beq.n	800dabe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800da80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da8c:	d10c      	bne.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800da8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da92:	3328      	adds	r3, #40	; 0x28
 800da94:	2102      	movs	r1, #2
 800da96:	4618      	mov	r0, r3
 800da98:	f001 fd26 	bl	800f4e8 <RCCEx_PLL3_Config>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800daa8:	4b87      	ldr	r3, [pc, #540]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800daaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dab8:	4a83      	ldr	r2, [pc, #524]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800daba:	430b      	orrs	r3, r1
 800dabc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac6:	f002 0310 	and.w	r3, r2, #16
 800daca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dace:	2300      	movs	r3, #0
 800dad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dad4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800dad8:	460b      	mov	r3, r1
 800dada:	4313      	orrs	r3, r2
 800dadc:	d01e      	beq.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800dade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800dae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daea:	d10c      	bne.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daf0:	3328      	adds	r3, #40	; 0x28
 800daf2:	2102      	movs	r1, #2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f001 fcf7 	bl	800f4e8 <RCCEx_PLL3_Config>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800db06:	4b70      	ldr	r3, [pc, #448]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800db0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800db16:	4a6c      	ldr	r2, [pc, #432]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db18:	430b      	orrs	r3, r1
 800db1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800db28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800db2c:	2300      	movs	r3, #0
 800db2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800db36:	460b      	mov	r3, r1
 800db38:	4313      	orrs	r3, r2
 800db3a:	d03e      	beq.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800db3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800db44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db48:	d022      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800db4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800db4e:	d81b      	bhi.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800db54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db58:	d00b      	beq.n	800db72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800db5a:	e015      	b.n	800db88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db60:	3308      	adds	r3, #8
 800db62:	2100      	movs	r1, #0
 800db64:	4618      	mov	r0, r3
 800db66:	f001 fc0d 	bl	800f384 <RCCEx_PLL2_Config>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db70:	e00f      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db76:	3328      	adds	r3, #40	; 0x28
 800db78:	2102      	movs	r1, #2
 800db7a:	4618      	mov	r0, r3
 800db7c:	f001 fcb4 	bl	800f4e8 <RCCEx_PLL3_Config>
 800db80:	4603      	mov	r3, r0
 800db82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800db86:	e004      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db88:	2301      	movs	r3, #1
 800db8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db8e:	e000      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800db90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10b      	bne.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800db9a:	4b4b      	ldr	r3, [pc, #300]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800db9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800dba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dbaa:	4a47      	ldr	r2, [pc, #284]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbac:	430b      	orrs	r3, r1
 800dbae:	6593      	str	r3, [r2, #88]	; 0x58
 800dbb0:	e003      	b.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800dbc6:	67bb      	str	r3, [r7, #120]	; 0x78
 800dbc8:	2300      	movs	r3, #0
 800dbca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dbcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4313      	orrs	r3, r2
 800dbd4:	d03b      	beq.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800dbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dbe2:	d01f      	beq.n	800dc24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800dbe4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dbe8:	d818      	bhi.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800dbea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbee:	d003      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800dbf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbf4:	d007      	beq.n	800dc06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800dbf6:	e011      	b.n	800dc1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbf8:	4b33      	ldr	r3, [pc, #204]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfc:	4a32      	ldr	r2, [pc, #200]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dbfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dc04:	e00f      	b.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc0a:	3328      	adds	r3, #40	; 0x28
 800dc0c:	2101      	movs	r1, #1
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f001 fc6a 	bl	800f4e8 <RCCEx_PLL3_Config>
 800dc14:	4603      	mov	r3, r0
 800dc16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800dc1a:	e004      	b.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc22:	e000      	b.n	800dc26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800dc24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10b      	bne.n	800dc46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dc2e:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc3e:	4a22      	ldr	r2, [pc, #136]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc40:	430b      	orrs	r3, r1
 800dc42:	6553      	str	r3, [r2, #84]	; 0x54
 800dc44:	e003      	b.n	800dc4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800dc5a:	673b      	str	r3, [r7, #112]	; 0x70
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	677b      	str	r3, [r7, #116]	; 0x74
 800dc60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800dc64:	460b      	mov	r3, r1
 800dc66:	4313      	orrs	r3, r2
 800dc68:	d034      	beq.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d003      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800dc74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc78:	d007      	beq.n	800dc8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800dc7a:	e011      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc7c:	4b12      	ldr	r3, [pc, #72]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	4a11      	ldr	r2, [pc, #68]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dc82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc88:	e00e      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc8e:	3308      	adds	r3, #8
 800dc90:	2102      	movs	r1, #2
 800dc92:	4618      	mov	r0, r3
 800dc94:	f001 fb76 	bl	800f384 <RCCEx_PLL2_Config>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dc9e:	e003      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10d      	bne.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dcb0:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dcb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcbe:	4a02      	ldr	r2, [pc, #8]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800dcc0:	430b      	orrs	r3, r1
 800dcc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcc4:	e006      	b.n	800dcd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800dcc6:	bf00      	nop
 800dcc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dcd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcdc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800dce0:	66bb      	str	r3, [r7, #104]	; 0x68
 800dce2:	2300      	movs	r3, #0
 800dce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dce6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800dcea:	460b      	mov	r3, r1
 800dcec:	4313      	orrs	r3, r2
 800dcee:	d00c      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dcf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf4:	3328      	adds	r3, #40	; 0x28
 800dcf6:	2102      	movs	r1, #2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f001 fbf5 	bl	800f4e8 <RCCEx_PLL3_Config>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d002      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800dd04:	2301      	movs	r3, #1
 800dd06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800dd16:	663b      	str	r3, [r7, #96]	; 0x60
 800dd18:	2300      	movs	r3, #0
 800dd1a:	667b      	str	r3, [r7, #100]	; 0x64
 800dd1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800dd20:	460b      	mov	r3, r1
 800dd22:	4313      	orrs	r3, r2
 800dd24:	d038      	beq.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd32:	d018      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800dd34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd38:	d811      	bhi.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dd3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd3e:	d014      	beq.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800dd40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd44:	d80b      	bhi.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d011      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800dd4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd4e:	d106      	bne.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd50:	4bc3      	ldr	r3, [pc, #780]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd54:	4ac2      	ldr	r2, [pc, #776]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dd5c:	e008      	b.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd64:	e004      	b.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd66:	bf00      	nop
 800dd68:	e002      	b.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd6a:	bf00      	nop
 800dd6c:	e000      	b.n	800dd70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800dd6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d10b      	bne.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800dd78:	4bb9      	ldr	r3, [pc, #740]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dd80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd88:	4ab5      	ldr	r2, [pc, #724]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dd8a:	430b      	orrs	r3, r1
 800dd8c:	6553      	str	r3, [r2, #84]	; 0x54
 800dd8e:	e003      	b.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dd98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800dda4:	65bb      	str	r3, [r7, #88]	; 0x58
 800dda6:	2300      	movs	r3, #0
 800dda8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddaa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	d009      	beq.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ddb4:	4baa      	ldr	r3, [pc, #680]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ddbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddc2:	4aa7      	ldr	r2, [pc, #668]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddc4:	430b      	orrs	r3, r1
 800ddc6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ddc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ddd4:	653b      	str	r3, [r7, #80]	; 0x50
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	657b      	str	r3, [r7, #84]	; 0x54
 800ddda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ddde:	460b      	mov	r3, r1
 800dde0:	4313      	orrs	r3, r2
 800dde2:	d00a      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800dde4:	4b9e      	ldr	r3, [pc, #632]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ddec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ddf4:	4a9a      	ldr	r2, [pc, #616]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ddf6:	430b      	orrs	r3, r1
 800ddf8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ddfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800de06:	64bb      	str	r3, [r7, #72]	; 0x48
 800de08:	2300      	movs	r3, #0
 800de0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800de10:	460b      	mov	r3, r1
 800de12:	4313      	orrs	r3, r2
 800de14:	d009      	beq.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800de16:	4b92      	ldr	r3, [pc, #584]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de1a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800de1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de24:	4a8e      	ldr	r2, [pc, #568]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de26:	430b      	orrs	r3, r1
 800de28:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800de2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de32:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800de36:	643b      	str	r3, [r7, #64]	; 0x40
 800de38:	2300      	movs	r3, #0
 800de3a:	647b      	str	r3, [r7, #68]	; 0x44
 800de3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800de40:	460b      	mov	r3, r1
 800de42:	4313      	orrs	r3, r2
 800de44:	d00e      	beq.n	800de64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800de46:	4b86      	ldr	r3, [pc, #536]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de48:	691b      	ldr	r3, [r3, #16]
 800de4a:	4a85      	ldr	r2, [pc, #532]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de50:	6113      	str	r3, [r2, #16]
 800de52:	4b83      	ldr	r3, [pc, #524]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de54:	6919      	ldr	r1, [r3, #16]
 800de56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800de5e:	4a80      	ldr	r2, [pc, #512]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de60:	430b      	orrs	r3, r1
 800de62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800de64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800de70:	63bb      	str	r3, [r7, #56]	; 0x38
 800de72:	2300      	movs	r3, #0
 800de74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800de7a:	460b      	mov	r3, r1
 800de7c:	4313      	orrs	r3, r2
 800de7e:	d009      	beq.n	800de94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800de80:	4b77      	ldr	r3, [pc, #476]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de84:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800de88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de8e:	4a74      	ldr	r2, [pc, #464]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800de90:	430b      	orrs	r3, r1
 800de92:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800de94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800dea0:	633b      	str	r3, [r7, #48]	; 0x30
 800dea2:	2300      	movs	r3, #0
 800dea4:	637b      	str	r3, [r7, #52]	; 0x34
 800dea6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800deaa:	460b      	mov	r3, r1
 800deac:	4313      	orrs	r3, r2
 800deae:	d00a      	beq.n	800dec6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800deb0:	4b6b      	ldr	r3, [pc, #428]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800deb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800deb4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800deb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800debc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec0:	4a67      	ldr	r2, [pc, #412]	; (800e060 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800dec2:	430b      	orrs	r3, r1
 800dec4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800dec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	2100      	movs	r1, #0
 800ded0:	62b9      	str	r1, [r7, #40]	; 0x28
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ded8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dedc:	460b      	mov	r3, r1
 800dede:	4313      	orrs	r3, r2
 800dee0:	d011      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dee6:	3308      	adds	r3, #8
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f001 fa4a 	bl	800f384 <RCCEx_PLL2_Config>
 800def0:	4603      	mov	r3, r0
 800def2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800def6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800defa:	2b00      	cmp	r3, #0
 800defc:	d003      	beq.n	800df06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800defe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800df06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	2100      	movs	r1, #0
 800df10:	6239      	str	r1, [r7, #32]
 800df12:	f003 0302 	and.w	r3, r3, #2
 800df16:	627b      	str	r3, [r7, #36]	; 0x24
 800df18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800df1c:	460b      	mov	r3, r1
 800df1e:	4313      	orrs	r3, r2
 800df20:	d011      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df26:	3308      	adds	r3, #8
 800df28:	2101      	movs	r1, #1
 800df2a:	4618      	mov	r0, r3
 800df2c:	f001 fa2a 	bl	800f384 <RCCEx_PLL2_Config>
 800df30:	4603      	mov	r3, r0
 800df32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800df46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	2100      	movs	r1, #0
 800df50:	61b9      	str	r1, [r7, #24]
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df5c:	460b      	mov	r3, r1
 800df5e:	4313      	orrs	r3, r2
 800df60:	d011      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df66:	3308      	adds	r3, #8
 800df68:	2102      	movs	r1, #2
 800df6a:	4618      	mov	r0, r3
 800df6c:	f001 fa0a 	bl	800f384 <RCCEx_PLL2_Config>
 800df70:	4603      	mov	r3, r0
 800df72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800df76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d003      	beq.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8e:	2100      	movs	r1, #0
 800df90:	6139      	str	r1, [r7, #16]
 800df92:	f003 0308 	and.w	r3, r3, #8
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df9c:	460b      	mov	r3, r1
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	d011      	beq.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfa6:	3328      	adds	r3, #40	; 0x28
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f001 fa9c 	bl	800f4e8 <RCCEx_PLL3_Config>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800dfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfce:	2100      	movs	r1, #0
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	f003 0310 	and.w	r3, r3, #16
 800dfd6:	60fb      	str	r3, [r7, #12]
 800dfd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	d011      	beq.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfe6:	3328      	adds	r3, #40	; 0x28
 800dfe8:	2101      	movs	r1, #1
 800dfea:	4618      	mov	r0, r3
 800dfec:	f001 fa7c 	bl	800f4e8 <RCCEx_PLL3_Config>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800dff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e002:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	2100      	movs	r1, #0
 800e010:	6039      	str	r1, [r7, #0]
 800e012:	f003 0320 	and.w	r3, r3, #32
 800e016:	607b      	str	r3, [r7, #4]
 800e018:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e01c:	460b      	mov	r3, r1
 800e01e:	4313      	orrs	r3, r2
 800e020:	d011      	beq.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e026:	3328      	adds	r3, #40	; 0x28
 800e028:	2102      	movs	r1, #2
 800e02a:	4618      	mov	r0, r3
 800e02c:	f001 fa5c 	bl	800f4e8 <RCCEx_PLL3_Config>
 800e030:	4603      	mov	r3, r0
 800e032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d003      	beq.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e03e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e042:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800e046:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	e000      	b.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
}
 800e054:	4618      	mov	r0, r3
 800e056:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800e05a:	46bd      	mov	sp, r7
 800e05c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e060:	58024400 	.word	0x58024400

0800e064 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b090      	sub	sp, #64	; 0x40
 800e068:	af00      	add	r7, sp, #0
 800e06a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e072:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800e076:	430b      	orrs	r3, r1
 800e078:	f040 8094 	bne.w	800e1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e07c:	4b9e      	ldr	r3, [pc, #632]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e080:	f003 0307 	and.w	r3, r3, #7
 800e084:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	2b04      	cmp	r3, #4
 800e08a:	f200 8087 	bhi.w	800e19c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e08e:	a201      	add	r2, pc, #4	; (adr r2, 800e094 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e0a9 	.word	0x0800e0a9
 800e098:	0800e0d1 	.word	0x0800e0d1
 800e09c:	0800e0f9 	.word	0x0800e0f9
 800e0a0:	0800e195 	.word	0x0800e195
 800e0a4:	0800e121 	.word	0x0800e121
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e0a8:	4b93      	ldr	r3, [pc, #588]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0b4:	d108      	bne.n	800e0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e0b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f001 f810 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0c4:	f000 bd45 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0cc:	f000 bd41 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e0d0:	4b89      	ldr	r3, [pc, #548]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e0dc:	d108      	bne.n	800e0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0de:	f107 0318 	add.w	r3, r7, #24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fd54 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e0ec:	f000 bd31 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f4:	f000 bd2d 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e0f8:	4b7f      	ldr	r3, [pc, #508]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e104:	d108      	bne.n	800e118 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e106:	f107 030c 	add.w	r3, r7, #12
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 fe94 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e114:	f000 bd1d 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e11c:	f000 bd19 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e120:	4b75      	ldr	r3, [pc, #468]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e128:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e12a:	4b73      	ldr	r3, [pc, #460]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0304 	and.w	r3, r3, #4
 800e132:	2b04      	cmp	r3, #4
 800e134:	d10c      	bne.n	800e150 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d109      	bne.n	800e150 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e13c:	4b6e      	ldr	r3, [pc, #440]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	08db      	lsrs	r3, r3, #3
 800e142:	f003 0303 	and.w	r3, r3, #3
 800e146:	4a6d      	ldr	r2, [pc, #436]	; (800e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e148:	fa22 f303 	lsr.w	r3, r2, r3
 800e14c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e14e:	e01f      	b.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e150:	4b69      	ldr	r3, [pc, #420]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e15c:	d106      	bne.n	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e164:	d102      	bne.n	800e16c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e166:	4b66      	ldr	r3, [pc, #408]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e16a:	e011      	b.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e16c:	4b62      	ldr	r3, [pc, #392]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e178:	d106      	bne.n	800e188 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e180:	d102      	bne.n	800e188 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e182:	4b60      	ldr	r3, [pc, #384]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e184:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e186:	e003      	b.n	800e190 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e18c:	f000 bce1 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e190:	f000 bcdf 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e194:	4b5c      	ldr	r3, [pc, #368]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e198:	f000 bcdb 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1a0:	f000 bcd7 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1a8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800e1ac:	430b      	orrs	r3, r1
 800e1ae:	f040 80ad 	bne.w	800e30c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e1b2:	4b51      	ldr	r3, [pc, #324]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800e1ba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1c2:	d056      	beq.n	800e272 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1ca:	f200 8090 	bhi.w	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d0:	2bc0      	cmp	r3, #192	; 0xc0
 800e1d2:	f000 8088 	beq.w	800e2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	2bc0      	cmp	r3, #192	; 0xc0
 800e1da:	f200 8088 	bhi.w	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2b80      	cmp	r3, #128	; 0x80
 800e1e2:	d032      	beq.n	800e24a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	2b80      	cmp	r3, #128	; 0x80
 800e1e8:	f200 8081 	bhi.w	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f4:	2b40      	cmp	r3, #64	; 0x40
 800e1f6:	d014      	beq.n	800e222 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e1f8:	e079      	b.n	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e1fa:	4b3f      	ldr	r3, [pc, #252]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e206:	d108      	bne.n	800e21a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 ff67 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e216:	f000 bc9c 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e21a:	2300      	movs	r3, #0
 800e21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21e:	f000 bc98 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e222:	4b35      	ldr	r3, [pc, #212]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e22a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e22e:	d108      	bne.n	800e242 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e230:	f107 0318 	add.w	r3, r7, #24
 800e234:	4618      	mov	r0, r3
 800e236:	f000 fcab 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e23e:	f000 bc88 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e242:	2300      	movs	r3, #0
 800e244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e246:	f000 bc84 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e24a:	4b2b      	ldr	r3, [pc, #172]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e256:	d108      	bne.n	800e26a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e258:	f107 030c 	add.w	r3, r7, #12
 800e25c:	4618      	mov	r0, r3
 800e25e:	f000 fdeb 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e266:	f000 bc74 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e26e:	f000 bc70 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e272:	4b21      	ldr	r3, [pc, #132]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e27a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e27c:	4b1e      	ldr	r3, [pc, #120]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f003 0304 	and.w	r3, r3, #4
 800e284:	2b04      	cmp	r3, #4
 800e286:	d10c      	bne.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d109      	bne.n	800e2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e28e:	4b1a      	ldr	r3, [pc, #104]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	08db      	lsrs	r3, r3, #3
 800e294:	f003 0303 	and.w	r3, r3, #3
 800e298:	4a18      	ldr	r2, [pc, #96]	; (800e2fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e29a:	fa22 f303 	lsr.w	r3, r2, r3
 800e29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2a0:	e01f      	b.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2ae:	d106      	bne.n	800e2be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2b6:	d102      	bne.n	800e2be <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e2b8:	4b11      	ldr	r3, [pc, #68]	; (800e300 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2bc:	e011      	b.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e2be:	4b0e      	ldr	r3, [pc, #56]	; (800e2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2ca:	d106      	bne.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2d2:	d102      	bne.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2d8:	e003      	b.n	800e2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e2de:	f000 bc38 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2e2:	f000 bc36 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e2e6:	4b08      	ldr	r3, [pc, #32]	; (800e308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ea:	f000 bc32 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2f2:	f000 bc2e 	b.w	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e2f6:	bf00      	nop
 800e2f8:	58024400 	.word	0x58024400
 800e2fc:	03d09000 	.word	0x03d09000
 800e300:	003d0900 	.word	0x003d0900
 800e304:	017d7840 	.word	0x017d7840
 800e308:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e30c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e310:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800e314:	430b      	orrs	r3, r1
 800e316:	f040 809c 	bne.w	800e452 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e31a:	4b9e      	ldr	r3, [pc, #632]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e322:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e32a:	d054      	beq.n	800e3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e332:	f200 808b 	bhi.w	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e338:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e33c:	f000 8083 	beq.w	800e446 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e346:	f200 8081 	bhi.w	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e350:	d02f      	beq.n	800e3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e358:	d878      	bhi.n	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d004      	beq.n	800e36a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e366:	d012      	beq.n	800e38e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e368:	e070      	b.n	800e44c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e36a:	4b8a      	ldr	r3, [pc, #552]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e376:	d107      	bne.n	800e388 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e37c:	4618      	mov	r0, r3
 800e37e:	f000 feaf 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e386:	e3e4      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e38c:	e3e1      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e38e:	4b81      	ldr	r3, [pc, #516]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e39a:	d107      	bne.n	800e3ac <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e39c:	f107 0318 	add.w	r3, r7, #24
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f000 fbf5 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3aa:	e3d2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3b0:	e3cf      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e3b2:	4b78      	ldr	r3, [pc, #480]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e3ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3be:	d107      	bne.n	800e3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3c0:	f107 030c 	add.w	r3, r7, #12
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 fd37 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e3ce:	e3c0      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e3d4:	e3bd      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e3d6:	4b6f      	ldr	r3, [pc, #444]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e3de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e3e0:	4b6c      	ldr	r3, [pc, #432]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f003 0304 	and.w	r3, r3, #4
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d10c      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d109      	bne.n	800e406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e3f2:	4b68      	ldr	r3, [pc, #416]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	08db      	lsrs	r3, r3, #3
 800e3f8:	f003 0303 	and.w	r3, r3, #3
 800e3fc:	4a66      	ldr	r2, [pc, #408]	; (800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e3fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e402:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e404:	e01e      	b.n	800e444 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e406:	4b63      	ldr	r3, [pc, #396]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e40e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e412:	d106      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e41a:	d102      	bne.n	800e422 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e41c:	4b5f      	ldr	r3, [pc, #380]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e41e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e420:	e010      	b.n	800e444 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e422:	4b5c      	ldr	r3, [pc, #368]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e42a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e42e:	d106      	bne.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e436:	d102      	bne.n	800e43e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e438:	4b59      	ldr	r3, [pc, #356]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e43c:	e002      	b.n	800e444 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e442:	e386      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e444:	e385      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e446:	4b57      	ldr	r3, [pc, #348]	; (800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e44a:	e382      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e450:	e37f      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e452:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e456:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800e45a:	430b      	orrs	r3, r1
 800e45c:	f040 80a7 	bne.w	800e5ae <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e460:	4b4c      	ldr	r3, [pc, #304]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e464:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e468:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e470:	d055      	beq.n	800e51e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e478:	f200 8096 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e482:	f000 8084 	beq.w	800e58e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e48c:	f200 808c 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e496:	d030      	beq.n	800e4fa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e49a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e49e:	f200 8083 	bhi.w	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d004      	beq.n	800e4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e4ae:	d012      	beq.n	800e4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e4b0:	e07a      	b.n	800e5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e4b2:	4b38      	ldr	r3, [pc, #224]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4be:	d107      	bne.n	800e4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e4c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fe0b 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4ce:	e340      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d4:	e33d      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e4d6:	4b2f      	ldr	r3, [pc, #188]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4e2:	d107      	bne.n	800e4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4e4:	f107 0318 	add.w	r3, r7, #24
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f000 fb51 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4f2:	e32e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4f8:	e32b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e4fa:	4b26      	ldr	r3, [pc, #152]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e502:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e506:	d107      	bne.n	800e518 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e508:	f107 030c 	add.w	r3, r7, #12
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fc93 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e516:	e31c      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e518:	2300      	movs	r3, #0
 800e51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e51c:	e319      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e51e:	4b1d      	ldr	r3, [pc, #116]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e526:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e528:	4b1a      	ldr	r3, [pc, #104]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b04      	cmp	r3, #4
 800e532:	d10c      	bne.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e536:	2b00      	cmp	r3, #0
 800e538:	d109      	bne.n	800e54e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e53a:	4b16      	ldr	r3, [pc, #88]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	08db      	lsrs	r3, r3, #3
 800e540:	f003 0303 	and.w	r3, r3, #3
 800e544:	4a14      	ldr	r2, [pc, #80]	; (800e598 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e546:	fa22 f303 	lsr.w	r3, r2, r3
 800e54a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e54c:	e01e      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e54e:	4b11      	ldr	r3, [pc, #68]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e55a:	d106      	bne.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e562:	d102      	bne.n	800e56a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e564:	4b0d      	ldr	r3, [pc, #52]	; (800e59c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e568:	e010      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e56a:	4b0a      	ldr	r3, [pc, #40]	; (800e594 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e576:	d106      	bne.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e57e:	d102      	bne.n	800e586 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e582:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e584:	e002      	b.n	800e58c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e58a:	e2e2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e58c:	e2e1      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e58e:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e592:	e2de      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e594:	58024400 	.word	0x58024400
 800e598:	03d09000 	.word	0x03d09000
 800e59c:	003d0900 	.word	0x003d0900
 800e5a0:	017d7840 	.word	0x017d7840
 800e5a4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ac:	e2d1      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5b2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800e5b6:	430b      	orrs	r3, r1
 800e5b8:	f040 809c 	bne.w	800e6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e5bc:	4b93      	ldr	r3, [pc, #588]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e5be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800e5c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5cc:	d054      	beq.n	800e678 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5d4:	f200 808b 	bhi.w	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5de:	f000 8083 	beq.w	800e6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5e8:	f200 8081 	bhi.w	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5f2:	d02f      	beq.n	800e654 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5fa:	d878      	bhi.n	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e608:	d012      	beq.n	800e630 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e60a:	e070      	b.n	800e6ee <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e60c:	4b7f      	ldr	r3, [pc, #508]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e618:	d107      	bne.n	800e62a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e61a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 fd5e 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e628:	e293      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e62e:	e290      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e630:	4b76      	ldr	r3, [pc, #472]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e63c:	d107      	bne.n	800e64e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e63e:	f107 0318 	add.w	r3, r7, #24
 800e642:	4618      	mov	r0, r3
 800e644:	f000 faa4 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e648:	69bb      	ldr	r3, [r7, #24]
 800e64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e64c:	e281      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e64e:	2300      	movs	r3, #0
 800e650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e652:	e27e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e654:	4b6d      	ldr	r3, [pc, #436]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e660:	d107      	bne.n	800e672 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e662:	f107 030c 	add.w	r3, r7, #12
 800e666:	4618      	mov	r0, r3
 800e668:	f000 fbe6 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e670:	e26f      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e672:	2300      	movs	r3, #0
 800e674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e676:	e26c      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e678:	4b64      	ldr	r3, [pc, #400]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e67a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e67c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e680:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e682:	4b62      	ldr	r3, [pc, #392]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f003 0304 	and.w	r3, r3, #4
 800e68a:	2b04      	cmp	r3, #4
 800e68c:	d10c      	bne.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800e68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e690:	2b00      	cmp	r3, #0
 800e692:	d109      	bne.n	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e694:	4b5d      	ldr	r3, [pc, #372]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	08db      	lsrs	r3, r3, #3
 800e69a:	f003 0303 	and.w	r3, r3, #3
 800e69e:	4a5c      	ldr	r2, [pc, #368]	; (800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6a6:	e01e      	b.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e6a8:	4b58      	ldr	r3, [pc, #352]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6b4:	d106      	bne.n	800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800e6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e6bc:	d102      	bne.n	800e6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e6be:	4b55      	ldr	r3, [pc, #340]	; (800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6c2:	e010      	b.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e6c4:	4b51      	ldr	r3, [pc, #324]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e6d0:	d106      	bne.n	800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800e6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6d8:	d102      	bne.n	800e6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e6da:	4b4f      	ldr	r3, [pc, #316]	; (800e818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6de:	e002      	b.n	800e6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e6e4:	e235      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e6e6:	e234      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e6e8:	4b4c      	ldr	r3, [pc, #304]	; (800e81c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6ec:	e231      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e6f2:	e22e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800e6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6f8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800e6fc:	430b      	orrs	r3, r1
 800e6fe:	f040 808f 	bne.w	800e820 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800e702:	4b42      	ldr	r3, [pc, #264]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e706:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800e70a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e712:	d06b      	beq.n	800e7ec <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800e714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e71a:	d874      	bhi.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e722:	d056      	beq.n	800e7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800e724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e72a:	d86c      	bhi.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e732:	d03b      	beq.n	800e7ac <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800e734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e736:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e73a:	d864      	bhi.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e742:	d021      	beq.n	800e788 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e74a:	d85c      	bhi.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800e74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d004      	beq.n	800e75c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800e752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e758:	d004      	beq.n	800e764 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800e75a:	e054      	b.n	800e806 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800e75c:	f7fe fa0a 	bl	800cb74 <HAL_RCC_GetPCLK1Freq>
 800e760:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e762:	e1f6      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e764:	4b29      	ldr	r3, [pc, #164]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e76c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e770:	d107      	bne.n	800e782 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e772:	f107 0318 	add.w	r3, r7, #24
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fa0a 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e780:	e1e7      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e786:	e1e4      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e788:	4b20      	ldr	r3, [pc, #128]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e794:	d107      	bne.n	800e7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e796:	f107 030c 	add.w	r3, r7, #12
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 fb4c 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7a4:	e1d5      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7aa:	e1d2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e7ac:	4b17      	ldr	r3, [pc, #92]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b04      	cmp	r3, #4
 800e7b6:	d109      	bne.n	800e7cc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e7b8:	4b14      	ldr	r3, [pc, #80]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	08db      	lsrs	r3, r3, #3
 800e7be:	f003 0303 	and.w	r3, r3, #3
 800e7c2:	4a13      	ldr	r2, [pc, #76]	; (800e810 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800e7c4:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7ca:	e1c2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7d0:	e1bf      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e7d2:	4b0e      	ldr	r3, [pc, #56]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7de:	d102      	bne.n	800e7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800e7e0:	4b0c      	ldr	r3, [pc, #48]	; (800e814 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800e7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7e4:	e1b5      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7ea:	e1b2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e7ec:	4b07      	ldr	r3, [pc, #28]	; (800e80c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7f8:	d102      	bne.n	800e800 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800e7fa:	4b07      	ldr	r3, [pc, #28]	; (800e818 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800e7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e7fe:	e1a8      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e800:	2300      	movs	r3, #0
 800e802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e804:	e1a5      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e80a:	e1a2      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e80c:	58024400 	.word	0x58024400
 800e810:	03d09000 	.word	0x03d09000
 800e814:	003d0900 	.word	0x003d0900
 800e818:	017d7840 	.word	0x017d7840
 800e81c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e824:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800e828:	430b      	orrs	r3, r1
 800e82a:	d173      	bne.n	800e914 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800e82c:	4b9c      	ldr	r3, [pc, #624]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e830:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e834:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e83c:	d02f      	beq.n	800e89e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e844:	d863      	bhi.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e852:	d012      	beq.n	800e87a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800e854:	e05b      	b.n	800e90e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e856:	4b92      	ldr	r3, [pc, #584]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e85e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e862:	d107      	bne.n	800e874 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e864:	f107 0318 	add.w	r3, r7, #24
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 f991 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e872:	e16e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e874:	2300      	movs	r3, #0
 800e876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e878:	e16b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e87a:	4b89      	ldr	r3, [pc, #548]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e886:	d107      	bne.n	800e898 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e888:	f107 030c 	add.w	r3, r7, #12
 800e88c:	4618      	mov	r0, r3
 800e88e:	f000 fad3 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e896:	e15c      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e898:	2300      	movs	r3, #0
 800e89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e89c:	e159      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e89e:	4b80      	ldr	r3, [pc, #512]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e8a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e8a8:	4b7d      	ldr	r3, [pc, #500]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d10c      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800e8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d109      	bne.n	800e8ce <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e8ba:	4b79      	ldr	r3, [pc, #484]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	08db      	lsrs	r3, r3, #3
 800e8c0:	f003 0303 	and.w	r3, r3, #3
 800e8c4:	4a77      	ldr	r2, [pc, #476]	; (800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800e8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8cc:	e01e      	b.n	800e90c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e8ce:	4b74      	ldr	r3, [pc, #464]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8da:	d106      	bne.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800e8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8e2:	d102      	bne.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e8e4:	4b70      	ldr	r3, [pc, #448]	; (800eaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800e8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8e8:	e010      	b.n	800e90c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e8ea:	4b6d      	ldr	r3, [pc, #436]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e8f6:	d106      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8fe:	d102      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e900:	4b6a      	ldr	r3, [pc, #424]	; (800eaac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800e902:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e904:	e002      	b.n	800e90c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800e90a:	e122      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e90c:	e121      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e912:	e11e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e918:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800e91c:	430b      	orrs	r3, r1
 800e91e:	d133      	bne.n	800e988 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800e920:	4b5f      	ldr	r3, [pc, #380]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e928:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d004      	beq.n	800e93a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800e930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e936:	d012      	beq.n	800e95e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800e938:	e023      	b.n	800e982 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e93a:	4b59      	ldr	r3, [pc, #356]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e946:	d107      	bne.n	800e958 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e94c:	4618      	mov	r0, r3
 800e94e:	f000 fbc7 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e956:	e0fc      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e958:	2300      	movs	r3, #0
 800e95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e95c:	e0f9      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e95e:	4b50      	ldr	r3, [pc, #320]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e96a:	d107      	bne.n	800e97c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e96c:	f107 0318 	add.w	r3, r7, #24
 800e970:	4618      	mov	r0, r3
 800e972:	f000 f90d 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e976:	6a3b      	ldr	r3, [r7, #32]
 800e978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e97a:	e0ea      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e980:	e0e7      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e982:	2300      	movs	r3, #0
 800e984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e986:	e0e4      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e98c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800e990:	430b      	orrs	r3, r1
 800e992:	f040 808d 	bne.w	800eab0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800e996:	4b42      	ldr	r3, [pc, #264]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e99a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e99e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800e9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e9a6:	d06b      	beq.n	800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e9ae:	d874      	bhi.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9b6:	d056      	beq.n	800ea66 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9be:	d86c      	bhi.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e9c6:	d03b      	beq.n	800ea40 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800e9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e9ce:	d864      	bhi.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9d6:	d021      	beq.n	800ea1c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9de:	d85c      	bhi.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d004      	beq.n	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9ec:	d004      	beq.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800e9ee:	e054      	b.n	800ea9a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e9f0:	f000 f8b8 	bl	800eb64 <HAL_RCCEx_GetD3PCLK1Freq>
 800e9f4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9f6:	e0ac      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e9f8:	4b29      	ldr	r3, [pc, #164]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea04:	d107      	bne.n	800ea16 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea06:	f107 0318 	add.w	r3, r7, #24
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 f8c0 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea14:	e09d      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea1a:	e09a      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ea1c:	4b20      	ldr	r3, [pc, #128]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ea24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea28:	d107      	bne.n	800ea3a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea2a:	f107 030c 	add.w	r3, r7, #12
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f000 fa02 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea38:	e08b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea3e:	e088      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ea40:	4b17      	ldr	r3, [pc, #92]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f003 0304 	and.w	r3, r3, #4
 800ea48:	2b04      	cmp	r3, #4
 800ea4a:	d109      	bne.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea4c:	4b14      	ldr	r3, [pc, #80]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	08db      	lsrs	r3, r3, #3
 800ea52:	f003 0303 	and.w	r3, r3, #3
 800ea56:	4a13      	ldr	r2, [pc, #76]	; (800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ea58:	fa22 f303 	lsr.w	r3, r2, r3
 800ea5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea5e:	e078      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea60:	2300      	movs	r3, #0
 800ea62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea64:	e075      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ea66:	4b0e      	ldr	r3, [pc, #56]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea72:	d102      	bne.n	800ea7a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ea74:	4b0c      	ldr	r3, [pc, #48]	; (800eaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ea76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea78:	e06b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea7e:	e068      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea8c:	d102      	bne.n	800ea94 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ea8e:	4b07      	ldr	r3, [pc, #28]	; (800eaac <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ea90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea92:	e05e      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea98:	e05b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea9e:	e058      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eaa0:	58024400 	.word	0x58024400
 800eaa4:	03d09000 	.word	0x03d09000
 800eaa8:	003d0900 	.word	0x003d0900
 800eaac:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800eab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eab4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800eab8:	430b      	orrs	r3, r1
 800eaba:	d148      	bne.n	800eb4e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800eabc:	4b27      	ldr	r3, [pc, #156]	; (800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eac4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800eac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eacc:	d02a      	beq.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ead4:	d838      	bhi.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ead6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d004      	beq.n	800eae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800eadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eae2:	d00d      	beq.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800eae4:	e030      	b.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eae6:	4b1d      	ldr	r3, [pc, #116]	; (800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eaee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eaf2:	d102      	bne.n	800eafa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800eaf4:	4b1a      	ldr	r3, [pc, #104]	; (800eb60 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800eaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eaf8:	e02b      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eafa:	2300      	movs	r3, #0
 800eafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eafe:	e028      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eb00:	4b16      	ldr	r3, [pc, #88]	; (800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb0c:	d107      	bne.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fae4 	bl	800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb1c:	e019      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb22:	e016      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb24:	4b0d      	ldr	r3, [pc, #52]	; (800eb5c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb30:	d107      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb32:	f107 0318 	add.w	r3, r7, #24
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 f82a 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb40:	e007      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb46:	e004      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb4c:	e001      	b.n	800eb52 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800eb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3740      	adds	r7, #64	; 0x40
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	58024400 	.word	0x58024400
 800eb60:	017d7840 	.word	0x017d7840

0800eb64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800eb68:	f7fd ffd4 	bl	800cb14 <HAL_RCC_GetHCLKFreq>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	4b06      	ldr	r3, [pc, #24]	; (800eb88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eb70:	6a1b      	ldr	r3, [r3, #32]
 800eb72:	091b      	lsrs	r3, r3, #4
 800eb74:	f003 0307 	and.w	r3, r3, #7
 800eb78:	4904      	ldr	r1, [pc, #16]	; (800eb8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eb7a:	5ccb      	ldrb	r3, [r1, r3]
 800eb7c:	f003 031f 	and.w	r3, r3, #31
 800eb80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	58024400 	.word	0x58024400
 800eb8c:	08018ee4 	.word	0x08018ee4

0800eb90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b089      	sub	sp, #36	; 0x24
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eb98:	4ba1      	ldr	r3, [pc, #644]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9c:	f003 0303 	and.w	r3, r3, #3
 800eba0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800eba2:	4b9f      	ldr	r3, [pc, #636]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba6:	0b1b      	lsrs	r3, r3, #12
 800eba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ebae:	4b9c      	ldr	r3, [pc, #624]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb2:	091b      	lsrs	r3, r3, #4
 800ebb4:	f003 0301 	and.w	r3, r3, #1
 800ebb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ebba:	4b99      	ldr	r3, [pc, #612]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebbe:	08db      	lsrs	r3, r3, #3
 800ebc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	fb02 f303 	mul.w	r3, r2, r3
 800ebca:	ee07 3a90 	vmov	s15, r3
 800ebce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ebd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	f000 8111 	beq.w	800ee00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	f000 8083 	beq.w	800ecec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	f200 80a1 	bhi.w	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ebee:	69bb      	ldr	r3, [r7, #24]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d003      	beq.n	800ebfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d056      	beq.n	800eca8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ebfa:	e099      	b.n	800ed30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebfc:	4b88      	ldr	r3, [pc, #544]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f003 0320 	and.w	r3, r3, #32
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d02d      	beq.n	800ec64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec08:	4b85      	ldr	r3, [pc, #532]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	08db      	lsrs	r3, r3, #3
 800ec0e:	f003 0303 	and.w	r3, r3, #3
 800ec12:	4a84      	ldr	r2, [pc, #528]	; (800ee24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ec14:	fa22 f303 	lsr.w	r3, r2, r3
 800ec18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	ee07 3a90 	vmov	s15, r3
 800ec20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	ee07 3a90 	vmov	s15, r3
 800ec2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec32:	4b7b      	ldr	r3, [pc, #492]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3a:	ee07 3a90 	vmov	s15, r3
 800ec3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec46:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ec62:	e087      	b.n	800ed74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	ee07 3a90 	vmov	s15, r3
 800ec6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ec6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ee2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ec72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ec76:	4b6a      	ldr	r3, [pc, #424]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ec78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec7e:	ee07 3a90 	vmov	s15, r3
 800ec82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ec86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ec8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ec8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ec92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ec9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800eca6:	e065      	b.n	800ed74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	ee07 3a90 	vmov	s15, r3
 800ecae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ecb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecba:	4b59      	ldr	r3, [pc, #356]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ecbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc2:	ee07 3a90 	vmov	s15, r3
 800ecc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecca:	ed97 6a03 	vldr	s12, [r7, #12]
 800ecce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ecd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ecd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ecda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ecde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ece2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ece6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ecea:	e043      	b.n	800ed74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	ee07 3a90 	vmov	s15, r3
 800ecf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ecf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ee34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ecfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ecfe:	4b48      	ldr	r3, [pc, #288]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed06:	ee07 3a90 	vmov	s15, r3
 800ed0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed12:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed2e:	e021      	b.n	800ed74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	ee07 3a90 	vmov	s15, r3
 800ed36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ee30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ed3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ed42:	4b37      	ldr	r3, [pc, #220]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed4a:	ee07 3a90 	vmov	s15, r3
 800ed4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ed56:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ee28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ed5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ed5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ed62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ed66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ed72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ed74:	4b2a      	ldr	r3, [pc, #168]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ed76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed78:	0a5b      	lsrs	r3, r3, #9
 800ed7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed7e:	ee07 3a90 	vmov	s15, r3
 800ed82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ed86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ed8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ed8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ed92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ed9a:	ee17 2a90 	vmov	r2, s15
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800eda2:	4b1f      	ldr	r3, [pc, #124]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda6:	0c1b      	lsrs	r3, r3, #16
 800eda8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edac:	ee07 3a90 	vmov	s15, r3
 800edb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800edb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800edb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800edc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edc8:	ee17 2a90 	vmov	r2, s15
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800edd0:	4b13      	ldr	r3, [pc, #76]	; (800ee20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800edd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd4:	0e1b      	lsrs	r3, r3, #24
 800edd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edda:	ee07 3a90 	vmov	s15, r3
 800edde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ede2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ede6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800edea:	edd7 6a07 	vldr	s13, [r7, #28]
 800edee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800edf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800edf6:	ee17 2a90 	vmov	r2, s15
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800edfe:	e008      	b.n	800ee12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	609a      	str	r2, [r3, #8]
}
 800ee12:	bf00      	nop
 800ee14:	3724      	adds	r7, #36	; 0x24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	58024400 	.word	0x58024400
 800ee24:	03d09000 	.word	0x03d09000
 800ee28:	46000000 	.word	0x46000000
 800ee2c:	4c742400 	.word	0x4c742400
 800ee30:	4a742400 	.word	0x4a742400
 800ee34:	4bbebc20 	.word	0x4bbebc20

0800ee38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b089      	sub	sp, #36	; 0x24
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee40:	4ba1      	ldr	r3, [pc, #644]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee44:	f003 0303 	and.w	r3, r3, #3
 800ee48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ee4a:	4b9f      	ldr	r3, [pc, #636]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4e:	0d1b      	lsrs	r3, r3, #20
 800ee50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ee56:	4b9c      	ldr	r3, [pc, #624]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5a:	0a1b      	lsrs	r3, r3, #8
 800ee5c:	f003 0301 	and.w	r3, r3, #1
 800ee60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ee62:	4b99      	ldr	r3, [pc, #612]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ee64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee66:	08db      	lsrs	r3, r3, #3
 800ee68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee6c:	693a      	ldr	r2, [r7, #16]
 800ee6e:	fb02 f303 	mul.w	r3, r2, r3
 800ee72:	ee07 3a90 	vmov	s15, r3
 800ee76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ee7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8111 	beq.w	800f0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2b02      	cmp	r3, #2
 800ee8a:	f000 8083 	beq.w	800ef94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	2b02      	cmp	r3, #2
 800ee92:	f200 80a1 	bhi.w	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d003      	beq.n	800eea4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d056      	beq.n	800ef50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800eea2:	e099      	b.n	800efd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eea4:	4b88      	ldr	r3, [pc, #544]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f003 0320 	and.w	r3, r3, #32
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d02d      	beq.n	800ef0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eeb0:	4b85      	ldr	r3, [pc, #532]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	08db      	lsrs	r3, r3, #3
 800eeb6:	f003 0303 	and.w	r3, r3, #3
 800eeba:	4a84      	ldr	r2, [pc, #528]	; (800f0cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800eebc:	fa22 f303 	lsr.w	r3, r2, r3
 800eec0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	ee07 3a90 	vmov	s15, r3
 800eec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	ee07 3a90 	vmov	s15, r3
 800eed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eeda:	4b7b      	ldr	r3, [pc, #492]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800eedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eee2:	ee07 3a90 	vmov	s15, r3
 800eee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800eeee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800eef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eefa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ef0a:	e087      	b.n	800f01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	ee07 3a90 	vmov	s15, r3
 800ef12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ef1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef1e:	4b6a      	ldr	r3, [pc, #424]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef26:	ee07 3a90 	vmov	s15, r3
 800ef2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef32:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef4e:	e065      	b.n	800f01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	ee07 3a90 	vmov	s15, r3
 800ef56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ef5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef62:	4b59      	ldr	r3, [pc, #356]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ef64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef6a:	ee07 3a90 	vmov	s15, r3
 800ef6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef76:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ef7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ef92:	e043      	b.n	800f01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	ee07 3a90 	vmov	s15, r3
 800ef9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f0dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800efa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efa6:	4b48      	ldr	r3, [pc, #288]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	ee07 3a90 	vmov	s15, r3
 800efb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800efba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800efbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800efd6:	e021      	b.n	800f01c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	ee07 3a90 	vmov	s15, r3
 800efde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efe2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800efe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efea:	4b37      	ldr	r3, [pc, #220]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800efec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eff2:	ee07 3a90 	vmov	s15, r3
 800eff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800effa:	ed97 6a03 	vldr	s12, [r7, #12]
 800effe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f0d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f01a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f01c:	4b2a      	ldr	r3, [pc, #168]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f020:	0a5b      	lsrs	r3, r3, #9
 800f022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f026:	ee07 3a90 	vmov	s15, r3
 800f02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f032:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f036:	edd7 6a07 	vldr	s13, [r7, #28]
 800f03a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f03e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f042:	ee17 2a90 	vmov	r2, s15
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f04a:	4b1f      	ldr	r3, [pc, #124]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f04e:	0c1b      	lsrs	r3, r3, #16
 800f050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f054:	ee07 3a90 	vmov	s15, r3
 800f058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f060:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f064:	edd7 6a07 	vldr	s13, [r7, #28]
 800f068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f070:	ee17 2a90 	vmov	r2, s15
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f078:	4b13      	ldr	r3, [pc, #76]	; (800f0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07c:	0e1b      	lsrs	r3, r3, #24
 800f07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f082:	ee07 3a90 	vmov	s15, r3
 800f086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f08e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f092:	edd7 6a07 	vldr	s13, [r7, #28]
 800f096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f09e:	ee17 2a90 	vmov	r2, s15
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f0a6:	e008      	b.n	800f0ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	609a      	str	r2, [r3, #8]
}
 800f0ba:	bf00      	nop
 800f0bc:	3724      	adds	r7, #36	; 0x24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	58024400 	.word	0x58024400
 800f0cc:	03d09000 	.word	0x03d09000
 800f0d0:	46000000 	.word	0x46000000
 800f0d4:	4c742400 	.word	0x4c742400
 800f0d8:	4a742400 	.word	0x4a742400
 800f0dc:	4bbebc20 	.word	0x4bbebc20

0800f0e0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b089      	sub	sp, #36	; 0x24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f0e8:	4ba0      	ldr	r3, [pc, #640]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ec:	f003 0303 	and.w	r3, r3, #3
 800f0f0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f0f2:	4b9e      	ldr	r3, [pc, #632]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0f6:	091b      	lsrs	r3, r3, #4
 800f0f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0fc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f0fe:	4b9b      	ldr	r3, [pc, #620]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f108:	4b98      	ldr	r3, [pc, #608]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f10c:	08db      	lsrs	r3, r3, #3
 800f10e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f112:	693a      	ldr	r2, [r7, #16]
 800f114:	fb02 f303 	mul.w	r3, r2, r3
 800f118:	ee07 3a90 	vmov	s15, r3
 800f11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f120:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 8111 	beq.w	800f34e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	2b02      	cmp	r3, #2
 800f130:	f000 8083 	beq.w	800f23a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	2b02      	cmp	r3, #2
 800f138:	f200 80a1 	bhi.w	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d003      	beq.n	800f14a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d056      	beq.n	800f1f6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f148:	e099      	b.n	800f27e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f14a:	4b88      	ldr	r3, [pc, #544]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	f003 0320 	and.w	r3, r3, #32
 800f152:	2b00      	cmp	r3, #0
 800f154:	d02d      	beq.n	800f1b2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f156:	4b85      	ldr	r3, [pc, #532]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	08db      	lsrs	r3, r3, #3
 800f15c:	f003 0303 	and.w	r3, r3, #3
 800f160:	4a83      	ldr	r2, [pc, #524]	; (800f370 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f162:	fa22 f303 	lsr.w	r3, r2, r3
 800f166:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	ee07 3a90 	vmov	s15, r3
 800f16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	ee07 3a90 	vmov	s15, r3
 800f178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f17c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f180:	4b7a      	ldr	r3, [pc, #488]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f188:	ee07 3a90 	vmov	s15, r3
 800f18c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f190:	ed97 6a03 	vldr	s12, [r7, #12]
 800f194:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f374 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f19c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ac:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f1b0:	e087      	b.n	800f2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	ee07 3a90 	vmov	s15, r3
 800f1b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1bc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f378 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f1c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1c4:	4b69      	ldr	r3, [pc, #420]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1cc:	ee07 3a90 	vmov	s15, r3
 800f1d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f1d8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f374 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f1dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f1e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f1e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f1e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f1ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f1f4:	e065      	b.n	800f2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	ee07 3a90 	vmov	s15, r3
 800f1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f200:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f37c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f208:	4b58      	ldr	r3, [pc, #352]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f20a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f210:	ee07 3a90 	vmov	s15, r3
 800f214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f218:	ed97 6a03 	vldr	s12, [r7, #12]
 800f21c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f374 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f22c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f230:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f234:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f238:	e043      	b.n	800f2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	ee07 3a90 	vmov	s15, r3
 800f240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f244:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f380 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f24c:	4b47      	ldr	r3, [pc, #284]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f254:	ee07 3a90 	vmov	s15, r3
 800f258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f25c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f260:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f374 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f26c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f278:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f27c:	e021      	b.n	800f2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	ee07 3a90 	vmov	s15, r3
 800f284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f288:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f378 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f28c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f290:	4b36      	ldr	r3, [pc, #216]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f298:	ee07 3a90 	vmov	s15, r3
 800f29c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f374 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f2a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2c0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f2c2:	4b2a      	ldr	r3, [pc, #168]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2c6:	0a5b      	lsrs	r3, r3, #9
 800f2c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2cc:	ee07 3a90 	vmov	s15, r3
 800f2d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f2d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f2dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f2e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f2e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f2e8:	ee17 2a90 	vmov	r2, s15
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f2f0:	4b1e      	ldr	r3, [pc, #120]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f4:	0c1b      	lsrs	r3, r3, #16
 800f2f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2fa:	ee07 3a90 	vmov	s15, r3
 800f2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f30a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f30e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f316:	ee17 2a90 	vmov	r2, s15
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f31e:	4b13      	ldr	r3, [pc, #76]	; (800f36c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f322:	0e1b      	lsrs	r3, r3, #24
 800f324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f328:	ee07 3a90 	vmov	s15, r3
 800f32c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f334:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f338:	edd7 6a07 	vldr	s13, [r7, #28]
 800f33c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f344:	ee17 2a90 	vmov	r2, s15
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f34c:	e008      	b.n	800f360 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2200      	movs	r2, #0
 800f35e:	609a      	str	r2, [r3, #8]
}
 800f360:	bf00      	nop
 800f362:	3724      	adds	r7, #36	; 0x24
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr
 800f36c:	58024400 	.word	0x58024400
 800f370:	03d09000 	.word	0x03d09000
 800f374:	46000000 	.word	0x46000000
 800f378:	4c742400 	.word	0x4c742400
 800f37c:	4a742400 	.word	0x4a742400
 800f380:	4bbebc20 	.word	0x4bbebc20

0800f384 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f392:	4b53      	ldr	r3, [pc, #332]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f396:	f003 0303 	and.w	r3, r3, #3
 800f39a:	2b03      	cmp	r3, #3
 800f39c:	d101      	bne.n	800f3a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e099      	b.n	800f4d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f3a2:	4b4f      	ldr	r3, [pc, #316]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a4e      	ldr	r2, [pc, #312]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f3a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f3ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3ae:	f7f4 feed 	bl	800418c <HAL_GetTick>
 800f3b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f3b4:	e008      	b.n	800f3c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f3b6:	f7f4 fee9 	bl	800418c <HAL_GetTick>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	d901      	bls.n	800f3c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	e086      	b.n	800f4d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f3c8:	4b45      	ldr	r3, [pc, #276]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d1f0      	bne.n	800f3b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f3d4:	4b42      	ldr	r3, [pc, #264]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	031b      	lsls	r3, r3, #12
 800f3e2:	493f      	ldr	r1, [pc, #252]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	628b      	str	r3, [r1, #40]	; 0x28
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	685b      	ldr	r3, [r3, #4]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	689b      	ldr	r3, [r3, #8]
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	025b      	lsls	r3, r3, #9
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	431a      	orrs	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	3b01      	subs	r3, #1
 800f404:	041b      	lsls	r3, r3, #16
 800f406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f40a:	431a      	orrs	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	3b01      	subs	r3, #1
 800f412:	061b      	lsls	r3, r3, #24
 800f414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f418:	4931      	ldr	r1, [pc, #196]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f41a:	4313      	orrs	r3, r2
 800f41c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f41e:	4b30      	ldr	r3, [pc, #192]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f422:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	695b      	ldr	r3, [r3, #20]
 800f42a:	492d      	ldr	r1, [pc, #180]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f42c:	4313      	orrs	r3, r2
 800f42e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f430:	4b2b      	ldr	r3, [pc, #172]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f434:	f023 0220 	bic.w	r2, r3, #32
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	699b      	ldr	r3, [r3, #24]
 800f43c:	4928      	ldr	r1, [pc, #160]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f43e:	4313      	orrs	r3, r2
 800f440:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f442:	4b27      	ldr	r3, [pc, #156]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f446:	4a26      	ldr	r2, [pc, #152]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f448:	f023 0310 	bic.w	r3, r3, #16
 800f44c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f44e:	4b24      	ldr	r3, [pc, #144]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f452:	4b24      	ldr	r3, [pc, #144]	; (800f4e4 <RCCEx_PLL2_Config+0x160>)
 800f454:	4013      	ands	r3, r2
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	69d2      	ldr	r2, [r2, #28]
 800f45a:	00d2      	lsls	r2, r2, #3
 800f45c:	4920      	ldr	r1, [pc, #128]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f45e:	4313      	orrs	r3, r2
 800f460:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f462:	4b1f      	ldr	r3, [pc, #124]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f466:	4a1e      	ldr	r2, [pc, #120]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f468:	f043 0310 	orr.w	r3, r3, #16
 800f46c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d106      	bne.n	800f482 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f474:	4b1a      	ldr	r3, [pc, #104]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f478:	4a19      	ldr	r2, [pc, #100]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f47a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f47e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f480:	e00f      	b.n	800f4a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b01      	cmp	r3, #1
 800f486:	d106      	bne.n	800f496 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f488:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f48c:	4a14      	ldr	r2, [pc, #80]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f492:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f494:	e005      	b.n	800f4a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f496:	4b12      	ldr	r3, [pc, #72]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f49a:	4a11      	ldr	r2, [pc, #68]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f49c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f4a2:	4b0f      	ldr	r3, [pc, #60]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a0e      	ldr	r2, [pc, #56]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f4a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f4ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f4ae:	f7f4 fe6d 	bl	800418c <HAL_GetTick>
 800f4b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f4b4:	e008      	b.n	800f4c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f4b6:	f7f4 fe69 	bl	800418c <HAL_GetTick>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	d901      	bls.n	800f4c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e006      	b.n	800f4d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f4c8:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <RCCEx_PLL2_Config+0x15c>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d0f0      	beq.n	800f4b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	58024400 	.word	0x58024400
 800f4e4:	ffff0007 	.word	0xffff0007

0800f4e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f4f6:	4b53      	ldr	r3, [pc, #332]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4fa:	f003 0303 	and.w	r3, r3, #3
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d101      	bne.n	800f506 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f502:	2301      	movs	r3, #1
 800f504:	e099      	b.n	800f63a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f506:	4b4f      	ldr	r3, [pc, #316]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	4a4e      	ldr	r2, [pc, #312]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f50c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f512:	f7f4 fe3b 	bl	800418c <HAL_GetTick>
 800f516:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f518:	e008      	b.n	800f52c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f51a:	f7f4 fe37 	bl	800418c <HAL_GetTick>
 800f51e:	4602      	mov	r2, r0
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	1ad3      	subs	r3, r2, r3
 800f524:	2b02      	cmp	r3, #2
 800f526:	d901      	bls.n	800f52c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f528:	2303      	movs	r3, #3
 800f52a:	e086      	b.n	800f63a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f52c:	4b45      	ldr	r3, [pc, #276]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1f0      	bne.n	800f51a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f538:	4b42      	ldr	r3, [pc, #264]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f53c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	051b      	lsls	r3, r3, #20
 800f546:	493f      	ldr	r1, [pc, #252]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f548:	4313      	orrs	r3, r2
 800f54a:	628b      	str	r3, [r1, #40]	; 0x28
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	3b01      	subs	r3, #1
 800f552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	3b01      	subs	r3, #1
 800f55c:	025b      	lsls	r3, r3, #9
 800f55e:	b29b      	uxth	r3, r3
 800f560:	431a      	orrs	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	3b01      	subs	r3, #1
 800f568:	041b      	lsls	r3, r3, #16
 800f56a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f56e:	431a      	orrs	r2, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	3b01      	subs	r3, #1
 800f576:	061b      	lsls	r3, r3, #24
 800f578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f57c:	4931      	ldr	r1, [pc, #196]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f57e:	4313      	orrs	r3, r2
 800f580:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f582:	4b30      	ldr	r3, [pc, #192]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f586:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	492d      	ldr	r1, [pc, #180]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f590:	4313      	orrs	r3, r2
 800f592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f594:	4b2b      	ldr	r3, [pc, #172]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f598:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	699b      	ldr	r3, [r3, #24]
 800f5a0:	4928      	ldr	r1, [pc, #160]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f5a6:	4b27      	ldr	r3, [pc, #156]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5aa:	4a26      	ldr	r2, [pc, #152]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f5b2:	4b24      	ldr	r3, [pc, #144]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5b6:	4b24      	ldr	r3, [pc, #144]	; (800f648 <RCCEx_PLL3_Config+0x160>)
 800f5b8:	4013      	ands	r3, r2
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	69d2      	ldr	r2, [r2, #28]
 800f5be:	00d2      	lsls	r2, r2, #3
 800f5c0:	4920      	ldr	r1, [pc, #128]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f5c6:	4b1f      	ldr	r3, [pc, #124]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ca:	4a1e      	ldr	r2, [pc, #120]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d106      	bne.n	800f5e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f5d8:	4b1a      	ldr	r3, [pc, #104]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5dc:	4a19      	ldr	r2, [pc, #100]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f5e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5e4:	e00f      	b.n	800f606 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d106      	bne.n	800f5fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f5ec:	4b15      	ldr	r3, [pc, #84]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f0:	4a14      	ldr	r2, [pc, #80]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f5f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f5f8:	e005      	b.n	800f606 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f5fa:	4b12      	ldr	r3, [pc, #72]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5fe:	4a11      	ldr	r2, [pc, #68]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f606:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a0e      	ldr	r2, [pc, #56]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f60c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f612:	f7f4 fdbb 	bl	800418c <HAL_GetTick>
 800f616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f618:	e008      	b.n	800f62c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f61a:	f7f4 fdb7 	bl	800418c <HAL_GetTick>
 800f61e:	4602      	mov	r2, r0
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	1ad3      	subs	r3, r2, r3
 800f624:	2b02      	cmp	r3, #2
 800f626:	d901      	bls.n	800f62c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f628:	2303      	movs	r3, #3
 800f62a:	e006      	b.n	800f63a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f62c:	4b05      	ldr	r3, [pc, #20]	; (800f644 <RCCEx_PLL3_Config+0x15c>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d0f0      	beq.n	800f61a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f638:	7bfb      	ldrb	r3, [r7, #15]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	58024400 	.word	0x58024400
 800f648:	ffff0007 	.word	0xffff0007

0800f64c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f654:	2301      	movs	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d071      	beq.n	800f742 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d106      	bne.n	800f678 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7f3 f8b2 	bl	80027dc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2202      	movs	r2, #2
 800f67c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	f003 0310 	and.w	r3, r3, #16
 800f68a:	2b10      	cmp	r3, #16
 800f68c:	d050      	beq.n	800f730 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	22ca      	movs	r2, #202	; 0xca
 800f694:	625a      	str	r2, [r3, #36]	; 0x24
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2253      	movs	r2, #83	; 0x53
 800f69c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fa4a 	bl	800fb38 <RTC_EnterInitMode>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800f6a8:	7bfb      	ldrb	r3, [r7, #15]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d124      	bne.n	800f6f8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	6899      	ldr	r1, [r3, #8]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	4b24      	ldr	r3, [pc, #144]	; (800f74c <HAL_RTC_Init+0x100>)
 800f6ba:	400b      	ands	r3, r1
 800f6bc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	6899      	ldr	r1, [r3, #8]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	685a      	ldr	r2, [r3, #4]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	699b      	ldr	r3, [r3, #24]
 800f6d2:	431a      	orrs	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	0419      	lsls	r1, r3, #16
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68da      	ldr	r2, [r3, #12]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	430a      	orrs	r2, r1
 800f6ec:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fa56 	bl	800fba0 <RTC_ExitInitMode>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d113      	bne.n	800f726 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f022 0203 	bic.w	r2, r2, #3
 800f70c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	69da      	ldr	r2, [r3, #28]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	695b      	ldr	r3, [r3, #20]
 800f71c:	431a      	orrs	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	22ff      	movs	r2, #255	; 0xff
 800f72c:	625a      	str	r2, [r3, #36]	; 0x24
 800f72e:	e001      	b.n	800f734 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800f734:	7bfb      	ldrb	r3, [r7, #15]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d103      	bne.n	800f742 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2201      	movs	r2, #1
 800f73e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800f742:	7bfb      	ldrb	r3, [r7, #15]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	ff8fffbf 	.word	0xff8fffbf

0800f750 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f750:	b590      	push	{r4, r7, lr}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	60b9      	str	r1, [r7, #8]
 800f75a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f762:	2b01      	cmp	r3, #1
 800f764:	d101      	bne.n	800f76a <HAL_RTC_SetTime+0x1a>
 800f766:	2302      	movs	r3, #2
 800f768:	e089      	b.n	800f87e <HAL_RTC_SetTime+0x12e>
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2201      	movs	r2, #1
 800f76e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2202      	movs	r2, #2
 800f776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	22ca      	movs	r2, #202	; 0xca
 800f780:	625a      	str	r2, [r3, #36]	; 0x24
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2253      	movs	r2, #83	; 0x53
 800f788:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f000 f9d4 	bl	800fb38 <RTC_EnterInitMode>
 800f790:	4603      	mov	r3, r0
 800f792:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800f794:	7cfb      	ldrb	r3, [r7, #19]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d161      	bne.n	800f85e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d126      	bne.n	800f7ee <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d102      	bne.n	800f7b4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 fa2f 	bl	800fc1c <RTC_ByteToBcd2>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	785b      	ldrb	r3, [r3, #1]
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 fa28 	bl	800fc1c <RTC_ByteToBcd2>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7d0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	789b      	ldrb	r3, [r3, #2]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f000 fa20 	bl	800fc1c <RTC_ByteToBcd2>
 800f7dc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f7de:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	78db      	ldrb	r3, [r3, #3]
 800f7e6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f7e8:	4313      	orrs	r3, r2
 800f7ea:	617b      	str	r3, [r7, #20]
 800f7ec:	e018      	b.n	800f820 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d102      	bne.n	800f802 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2200      	movs	r2, #0
 800f800:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	785b      	ldrb	r3, [r3, #1]
 800f80c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f80e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800f810:	68ba      	ldr	r2, [r7, #8]
 800f812:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800f814:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	78db      	ldrb	r3, [r3, #3]
 800f81a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800f81c:	4313      	orrs	r3, r2
 800f81e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	6979      	ldr	r1, [r7, #20]
 800f826:	4b18      	ldr	r3, [pc, #96]	; (800f888 <HAL_RTC_SetTime+0x138>)
 800f828:	400b      	ands	r3, r1
 800f82a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f83a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	6899      	ldr	r1, [r3, #8]
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	68da      	ldr	r2, [r3, #12]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	431a      	orrs	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	430a      	orrs	r2, r1
 800f852:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f000 f9a3 	bl	800fba0 <RTC_ExitInitMode>
 800f85a:	4603      	mov	r3, r0
 800f85c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	22ff      	movs	r2, #255	; 0xff
 800f864:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800f866:	7cfb      	ldrb	r3, [r7, #19]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d103      	bne.n	800f874 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800f87c:	7cfb      	ldrb	r3, [r7, #19]
}
 800f87e:	4618      	mov	r0, r3
 800f880:	371c      	adds	r7, #28
 800f882:	46bd      	mov	sp, r7
 800f884:	bd90      	pop	{r4, r7, pc}
 800f886:	bf00      	nop
 800f888:	007f7f7f 	.word	0x007f7f7f

0800f88c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	4b22      	ldr	r3, [pc, #136]	; (800f940 <HAL_RTC_GetTime+0xb4>)
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	0c1b      	lsrs	r3, r3, #16
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	0a1b      	lsrs	r3, r3, #8
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8e4:	b2da      	uxtb	r2, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800f8ea:	697b      	ldr	r3, [r7, #20]
 800f8ec:	0d9b      	lsrs	r3, r3, #22
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	f003 0301 	and.w	r3, r3, #1
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d11a      	bne.n	800f936 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	4618      	mov	r0, r3
 800f906:	f000 f9a9 	bl	800fc5c <RTC_Bcd2ToByte>
 800f90a:	4603      	mov	r3, r0
 800f90c:	461a      	mov	r2, r3
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	785b      	ldrb	r3, [r3, #1]
 800f916:	4618      	mov	r0, r3
 800f918:	f000 f9a0 	bl	800fc5c <RTC_Bcd2ToByte>
 800f91c:	4603      	mov	r3, r0
 800f91e:	461a      	mov	r2, r3
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	789b      	ldrb	r3, [r3, #2]
 800f928:	4618      	mov	r0, r3
 800f92a:	f000 f997 	bl	800fc5c <RTC_Bcd2ToByte>
 800f92e:	4603      	mov	r3, r0
 800f930:	461a      	mov	r2, r3
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800f936:	2300      	movs	r3, #0
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3718      	adds	r7, #24
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}
 800f940:	007f7f7f 	.word	0x007f7f7f

0800f944 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b087      	sub	sp, #28
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d101      	bne.n	800f95e <HAL_RTC_SetDate+0x1a>
 800f95a:	2302      	movs	r3, #2
 800f95c:	e073      	b.n	800fa46 <HAL_RTC_SetDate+0x102>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2201      	movs	r2, #1
 800f962:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2202      	movs	r2, #2
 800f96a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d10e      	bne.n	800f992 <HAL_RTC_SetDate+0x4e>
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	785b      	ldrb	r3, [r3, #1]
 800f978:	f003 0310 	and.w	r3, r3, #16
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d008      	beq.n	800f992 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	785b      	ldrb	r3, [r3, #1]
 800f984:	f023 0310 	bic.w	r3, r3, #16
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	330a      	adds	r3, #10
 800f98c:	b2da      	uxtb	r2, r3
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d11c      	bne.n	800f9d2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	78db      	ldrb	r3, [r3, #3]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 f93d 	bl	800fc1c <RTC_ByteToBcd2>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	785b      	ldrb	r3, [r3, #1]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f000 f936 	bl	800fc1c <RTC_ByteToBcd2>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f9b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	789b      	ldrb	r3, [r3, #2]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f000 f92e 	bl	800fc1c <RTC_ByteToBcd2>
 800f9c0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800f9c2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e00e      	b.n	800f9f0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	78db      	ldrb	r3, [r3, #3]
 800f9d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	785b      	ldrb	r3, [r3, #1]
 800f9dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f9de:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800f9e0:	68ba      	ldr	r2, [r7, #8]
 800f9e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800f9e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	22ca      	movs	r2, #202	; 0xca
 800f9f6:	625a      	str	r2, [r3, #36]	; 0x24
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2253      	movs	r2, #83	; 0x53
 800f9fe:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f000 f899 	bl	800fb38 <RTC_EnterInitMode>
 800fa06:	4603      	mov	r3, r0
 800fa08:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800fa0a:	7cfb      	ldrb	r3, [r7, #19]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10a      	bne.n	800fa26 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	6979      	ldr	r1, [r7, #20]
 800fa16:	4b0e      	ldr	r3, [pc, #56]	; (800fa50 <HAL_RTC_SetDate+0x10c>)
 800fa18:	400b      	ands	r3, r1
 800fa1a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f000 f8bf 	bl	800fba0 <RTC_ExitInitMode>
 800fa22:	4603      	mov	r3, r0
 800fa24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	22ff      	movs	r2, #255	; 0xff
 800fa2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800fa2e:	7cfb      	ldrb	r3, [r7, #19]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d103      	bne.n	800fa3c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800fa44:	7cfb      	ldrb	r3, [r7, #19]


}
 800fa46:	4618      	mov	r0, r3
 800fa48:	371c      	adds	r7, #28
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd90      	pop	{r4, r7, pc}
 800fa4e:	bf00      	nop
 800fa50:	00ffff3f 	.word	0x00ffff3f

0800fa54 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b086      	sub	sp, #24
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	4b21      	ldr	r3, [pc, #132]	; (800faec <HAL_RTC_GetDate+0x98>)
 800fa68:	4013      	ands	r3, r2
 800fa6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	0c1b      	lsrs	r3, r3, #16
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	0a1b      	lsrs	r3, r3, #8
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	f003 031f 	and.w	r3, r3, #31
 800fa80:	b2da      	uxtb	r2, r3
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800fa94:	697b      	ldr	r3, [r7, #20]
 800fa96:	0b5b      	lsrs	r3, r3, #13
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	f003 0307 	and.w	r3, r3, #7
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d11a      	bne.n	800fae0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	78db      	ldrb	r3, [r3, #3]
 800faae:	4618      	mov	r0, r3
 800fab0:	f000 f8d4 	bl	800fc5c <RTC_Bcd2ToByte>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	785b      	ldrb	r3, [r3, #1]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f8cb 	bl	800fc5c <RTC_Bcd2ToByte>
 800fac6:	4603      	mov	r3, r0
 800fac8:	461a      	mov	r2, r3
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	789b      	ldrb	r3, [r3, #2]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 f8c2 	bl	800fc5c <RTC_Bcd2ToByte>
 800fad8:	4603      	mov	r3, r0
 800fada:	461a      	mov	r2, r3
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	3718      	adds	r7, #24
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}
 800faea:	bf00      	nop
 800faec:	00ffff3f 	.word	0x00ffff3f

0800faf0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a0d      	ldr	r2, [pc, #52]	; (800fb34 <HAL_RTC_WaitForSynchro+0x44>)
 800fafe:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800fb00:	f7f4 fb44 	bl	800418c <HAL_GetTick>
 800fb04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fb06:	e009      	b.n	800fb1c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800fb08:	f7f4 fb40 	bl	800418c <HAL_GetTick>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb16:	d901      	bls.n	800fb1c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800fb18:	2303      	movs	r3, #3
 800fb1a:	e007      	b.n	800fb2c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	f003 0320 	and.w	r3, r3, #32
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0ee      	beq.n	800fb08 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3710      	adds	r7, #16
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	0003ff5f 	.word	0x0003ff5f

0800fb38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fb40:	2300      	movs	r3, #0
 800fb42:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d120      	bne.n	800fb94 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800fb5c:	f7f4 fb16 	bl	800418c <HAL_GetTick>
 800fb60:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fb62:	e00d      	b.n	800fb80 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800fb64:	f7f4 fb12 	bl	800418c <HAL_GetTick>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	1ad3      	subs	r3, r2, r3
 800fb6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb72:	d905      	bls.n	800fb80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800fb74:	2303      	movs	r3, #3
 800fb76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2203      	movs	r2, #3
 800fb7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d102      	bne.n	800fb94 <RTC_EnterInitMode+0x5c>
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2b03      	cmp	r3, #3
 800fb92:	d1e7      	bne.n	800fb64 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
	...

0800fba0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b084      	sub	sp, #16
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800fbac:	4b1a      	ldr	r3, [pc, #104]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fbae:	68db      	ldr	r3, [r3, #12]
 800fbb0:	4a19      	ldr	r2, [pc, #100]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fbb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbb6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800fbb8:	4b17      	ldr	r3, [pc, #92]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	f003 0320 	and.w	r3, r3, #32
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d10c      	bne.n	800fbde <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f7ff ff93 	bl	800faf0 <HAL_RTC_WaitForSynchro>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01e      	beq.n	800fc0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2203      	movs	r2, #3
 800fbd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800fbd8:	2303      	movs	r3, #3
 800fbda:	73fb      	strb	r3, [r7, #15]
 800fbdc:	e017      	b.n	800fc0e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fbde:	4b0e      	ldr	r3, [pc, #56]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	4a0d      	ldr	r2, [pc, #52]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fbe4:	f023 0320 	bic.w	r3, r3, #32
 800fbe8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f7ff ff80 	bl	800faf0 <HAL_RTC_WaitForSynchro>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d005      	beq.n	800fc02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2203      	movs	r2, #3
 800fbfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800fbfe:	2303      	movs	r3, #3
 800fc00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800fc02:	4b05      	ldr	r3, [pc, #20]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	4a04      	ldr	r2, [pc, #16]	; (800fc18 <RTC_ExitInitMode+0x78>)
 800fc08:	f043 0320 	orr.w	r3, r3, #32
 800fc0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800fc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3710      	adds	r7, #16
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	58004000 	.word	0x58004000

0800fc1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	4603      	mov	r3, r0
 800fc24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800fc26:	2300      	movs	r3, #0
 800fc28:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800fc2e:	e005      	b.n	800fc3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3301      	adds	r3, #1
 800fc34:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800fc36:	7afb      	ldrb	r3, [r7, #11]
 800fc38:	3b0a      	subs	r3, #10
 800fc3a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800fc3c:	7afb      	ldrb	r3, [r7, #11]
 800fc3e:	2b09      	cmp	r3, #9
 800fc40:	d8f6      	bhi.n	800fc30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	011b      	lsls	r3, r3, #4
 800fc48:	b2da      	uxtb	r2, r3
 800fc4a:	7afb      	ldrb	r3, [r7, #11]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	b2db      	uxtb	r3, r3
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b085      	sub	sp, #20
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800fc66:	79fb      	ldrb	r3, [r7, #7]
 800fc68:	091b      	lsrs	r3, r3, #4
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	0092      	lsls	r2, r2, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	005b      	lsls	r3, r3, #1
 800fc74:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	f003 030f 	and.w	r3, r3, #15
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
 800fc80:	4413      	add	r3, r2
 800fc82:	b2db      	uxtb	r3, r3
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3714      	adds	r7, #20
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d101      	bne.n	800fca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e10f      	b.n	800fec2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4a87      	ldr	r2, [pc, #540]	; (800fecc <HAL_SPI_Init+0x23c>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d00f      	beq.n	800fcd2 <HAL_SPI_Init+0x42>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a86      	ldr	r2, [pc, #536]	; (800fed0 <HAL_SPI_Init+0x240>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d00a      	beq.n	800fcd2 <HAL_SPI_Init+0x42>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a84      	ldr	r2, [pc, #528]	; (800fed4 <HAL_SPI_Init+0x244>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d005      	beq.n	800fcd2 <HAL_SPI_Init+0x42>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	2b0f      	cmp	r3, #15
 800fccc:	d901      	bls.n	800fcd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e0f7      	b.n	800fec2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fd60 	bl	8010798 <SPI_GetPacketSize>
 800fcd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a7b      	ldr	r2, [pc, #492]	; (800fecc <HAL_SPI_Init+0x23c>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d00c      	beq.n	800fcfe <HAL_SPI_Init+0x6e>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a79      	ldr	r2, [pc, #484]	; (800fed0 <HAL_SPI_Init+0x240>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d007      	beq.n	800fcfe <HAL_SPI_Init+0x6e>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a78      	ldr	r2, [pc, #480]	; (800fed4 <HAL_SPI_Init+0x244>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d002      	beq.n	800fcfe <HAL_SPI_Init+0x6e>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b08      	cmp	r3, #8
 800fcfc:	d811      	bhi.n	800fd22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fd02:	4a72      	ldr	r2, [pc, #456]	; (800fecc <HAL_SPI_Init+0x23c>)
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d009      	beq.n	800fd1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	4a70      	ldr	r2, [pc, #448]	; (800fed0 <HAL_SPI_Init+0x240>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d004      	beq.n	800fd1c <HAL_SPI_Init+0x8c>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a6f      	ldr	r2, [pc, #444]	; (800fed4 <HAL_SPI_Init+0x244>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d104      	bne.n	800fd26 <HAL_SPI_Init+0x96>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b10      	cmp	r3, #16
 800fd20:	d901      	bls.n	800fd26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fd22:	2301      	movs	r3, #1
 800fd24:	e0cd      	b.n	800fec2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d106      	bne.n	800fd40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f7f2 ffd2 	bl	8002ce4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2202      	movs	r2, #2
 800fd44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f022 0201 	bic.w	r2, r2, #1
 800fd56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fd62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fd6c:	d119      	bne.n	800fda2 <HAL_SPI_Init+0x112>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fd76:	d103      	bne.n	800fd80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d008      	beq.n	800fd92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10c      	bne.n	800fda2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fd8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd90:	d107      	bne.n	800fda2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fda0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	685b      	ldr	r3, [r3, #4]
 800fda6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d00f      	beq.n	800fdce <HAL_SPI_Init+0x13e>
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	2b06      	cmp	r3, #6
 800fdb4:	d90b      	bls.n	800fdce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	601a      	str	r2, [r3, #0]
 800fdcc:	e007      	b.n	800fdde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fddc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	69da      	ldr	r2, [r3, #28]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde6:	431a      	orrs	r2, r3
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	431a      	orrs	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdf0:	ea42 0103 	orr.w	r1, r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68da      	ldr	r2, [r3, #12]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	430a      	orrs	r2, r1
 800fdfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe08:	431a      	orrs	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe0e:	431a      	orrs	r2, r3
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	431a      	orrs	r2, r3
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	695b      	ldr	r3, [r3, #20]
 800fe20:	431a      	orrs	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6a1b      	ldr	r3, [r3, #32]
 800fe26:	431a      	orrs	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	431a      	orrs	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe32:	431a      	orrs	r2, r3
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	431a      	orrs	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe3e:	ea42 0103 	orr.w	r1, r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	430a      	orrs	r2, r1
 800fe4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d113      	bne.n	800fe7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f022 0201 	bic.w	r2, r2, #1
 800fe8c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00a      	beq.n	800feb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	430a      	orrs	r2, r1
 800feae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2201      	movs	r2, #1
 800febc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fec0:	2300      	movs	r3, #0
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	40013000 	.word	0x40013000
 800fed0:	40003800 	.word	0x40003800
 800fed4:	40003c00 	.word	0x40003c00

0800fed8 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	4613      	mov	r3, r2
 800fee4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d005      	beq.n	800fefe <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 800fefa:	2302      	movs	r3, #2
 800fefc:	e127      	b.n	801014e <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <HAL_SPI_Receive_DMA+0x32>
 800ff04:	88fb      	ldrh	r3, [r7, #6]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d105      	bne.n	800ff16 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800ff12:	2301      	movs	r3, #1
 800ff14:	e11b      	b.n	801014e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d101      	bne.n	800ff24 <HAL_SPI_Receive_DMA+0x4c>
 800ff20:	2302      	movs	r3, #2
 800ff22:	e114      	b.n	801014e <HAL_SPI_Receive_DMA+0x276>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2204      	movs	r2, #4
 800ff30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	88fa      	ldrh	r2, [r7, #6]
 800ff46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	88fa      	ldrh	r2, [r7, #6]
 800ff4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ff76:	d108      	bne.n	800ff8a <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff86:	601a      	str	r2, [r3, #0]
 800ff88:	e009      	b.n	800ff9e <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ff9c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	2b0f      	cmp	r3, #15
 800ffa4:	d905      	bls.n	800ffb2 <HAL_SPI_Receive_DMA+0xda>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffaa:	699b      	ldr	r3, [r3, #24]
 800ffac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffb0:	d10f      	bne.n	800ffd2 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ffb6:	2b07      	cmp	r3, #7
 800ffb8:	d911      	bls.n	800ffde <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffbe:	699b      	ldr	r3, [r3, #24]
 800ffc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ffc4:	d00b      	beq.n	800ffde <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ffca:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800ffcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffd0:	d005      	beq.n	800ffde <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e0b7      	b.n	801014e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	689a      	ldr	r2, [r3, #8]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ffec:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	2b07      	cmp	r3, #7
 800fff4:	d820      	bhi.n	8010038 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010000:	d109      	bne.n	8010016 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010008:	b29b      	uxth	r3, r3
 801000a:	3301      	adds	r3, #1
 801000c:	105b      	asrs	r3, r3, #1
 801000e:	b29a      	uxth	r2, r3
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010020:	d11e      	bne.n	8010060 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010028:	b29b      	uxth	r3, r3
 801002a:	3303      	adds	r3, #3
 801002c:	109b      	asrs	r3, r3, #2
 801002e:	b29a      	uxth	r2, r3
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010036:	e013      	b.n	8010060 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	2b0f      	cmp	r3, #15
 801003e:	d80f      	bhi.n	8010060 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010044:	699b      	ldr	r3, [r3, #24]
 8010046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801004a:	d109      	bne.n	8010060 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010052:	b29b      	uxth	r3, r3
 8010054:	3301      	adds	r3, #1
 8010056:	105b      	asrs	r3, r3, #1
 8010058:	b29a      	uxth	r2, r3
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010064:	4a3c      	ldr	r2, [pc, #240]	; (8010158 <HAL_SPI_Receive_DMA+0x280>)
 8010066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801006c:	4a3b      	ldr	r2, [pc, #236]	; (801015c <HAL_SPI_Receive_DMA+0x284>)
 801006e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010074:	4a3a      	ldr	r2, [pc, #232]	; (8010160 <HAL_SPI_Receive_DMA+0x288>)
 8010076:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801007c:	2200      	movs	r2, #0
 801007e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	3330      	adds	r3, #48	; 0x30
 801008a:	4619      	mov	r1, r3
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010090:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010098:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801009a:	f7f6 fcfb 	bl	8006a94 <HAL_DMA_Start_IT>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d011      	beq.n	80100c8 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100aa:	f043 0210 	orr.w	r2, r3, #16
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2201      	movs	r2, #1
 80100b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2200      	movs	r2, #0
 80100c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80100c4:	2301      	movs	r3, #1
 80100c6:	e042      	b.n	801014e <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100cc:	69db      	ldr	r3, [r3, #28]
 80100ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100d2:	d108      	bne.n	80100e6 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	6859      	ldr	r1, [r3, #4]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	4b21      	ldr	r3, [pc, #132]	; (8010164 <HAL_SPI_Receive_DMA+0x28c>)
 80100e0:	400b      	ands	r3, r1
 80100e2:	6053      	str	r3, [r2, #4]
 80100e4:	e009      	b.n	80100fa <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	685a      	ldr	r2, [r3, #4]
 80100ec:	4b1d      	ldr	r3, [pc, #116]	; (8010164 <HAL_SPI_Receive_DMA+0x28c>)
 80100ee:	4013      	ands	r3, r2
 80100f0:	88f9      	ldrh	r1, [r7, #6]
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	6812      	ldr	r2, [r2, #0]
 80100f6:	430b      	orrs	r3, r1
 80100f8:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689a      	ldr	r2, [r3, #8]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010108:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	691a      	ldr	r2, [r3, #16]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8010118:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f042 0201 	orr.w	r2, r2, #1
 8010128:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010132:	d107      	bne.n	8010144 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010142:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	2200      	movs	r2, #0
 8010148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	3710      	adds	r7, #16
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	080105c3 	.word	0x080105c3
 801015c:	0801057d 	.word	0x0801057d
 8010160:	080105df 	.word	0x080105df
 8010164:	ffff0000 	.word	0xffff0000

08010168 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08a      	sub	sp, #40	; 0x28
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	695b      	ldr	r3, [r3, #20]
 801017e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8010180:	6a3a      	ldr	r2, [r7, #32]
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	4013      	ands	r3, r2
 8010186:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8010190:	2300      	movs	r3, #0
 8010192:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801019a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3330      	adds	r3, #48	; 0x30
 80101a2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d010      	beq.n	80101d0 <HAL_SPI_IRQHandler+0x68>
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	f003 0308 	and.w	r3, r3, #8
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d00b      	beq.n	80101d0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	699a      	ldr	r2, [r3, #24]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80101c6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f9cd 	bl	8010568 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80101ce:	e192      	b.n	80104f6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d113      	bne.n	8010202 <HAL_SPI_IRQHandler+0x9a>
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	f003 0320 	and.w	r3, r3, #32
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10e      	bne.n	8010202 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d009      	beq.n	8010202 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	4798      	blx	r3
    handled = 1UL;
 80101fe:	2301      	movs	r3, #1
 8010200:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010208:	2b00      	cmp	r3, #0
 801020a:	d10f      	bne.n	801022c <HAL_SPI_IRQHandler+0xc4>
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801021c:	2b00      	cmp	r3, #0
 801021e:	d105      	bne.n	801022c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	4798      	blx	r3
    handled = 1UL;
 8010228:	2301      	movs	r3, #1
 801022a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	f003 0320 	and.w	r3, r3, #32
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10f      	bne.n	8010256 <HAL_SPI_IRQHandler+0xee>
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	f003 0302 	and.w	r3, r3, #2
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00a      	beq.n	8010256 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	4798      	blx	r3
    handled = 1UL;
 8010252:	2301      	movs	r3, #1
 8010254:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	2b00      	cmp	r3, #0
 801025a:	f040 8147 	bne.w	80104ec <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	f003 0308 	and.w	r3, r3, #8
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 808b 	beq.w	8010380 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	699a      	ldr	r2, [r3, #24]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f042 0208 	orr.w	r2, r2, #8
 8010278:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	699a      	ldr	r2, [r3, #24]
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f042 0210 	orr.w	r2, r2, #16
 8010288:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	699a      	ldr	r2, [r3, #24]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010298:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	691a      	ldr	r2, [r3, #16]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f022 0208 	bic.w	r2, r2, #8
 80102a8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	689b      	ldr	r3, [r3, #8]
 80102b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d13d      	bne.n	8010334 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80102b8:	e036      	b.n	8010328 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	2b0f      	cmp	r3, #15
 80102c0:	d90b      	bls.n	80102da <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80102cc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102d2:	1d1a      	adds	r2, r3, #4
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	665a      	str	r2, [r3, #100]	; 0x64
 80102d8:	e01d      	b.n	8010316 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	2b07      	cmp	r3, #7
 80102e0:	d90b      	bls.n	80102fa <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	8812      	ldrh	r2, [r2, #0]
 80102ea:	b292      	uxth	r2, r2
 80102ec:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102f2:	1c9a      	adds	r2, r3, #2
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	665a      	str	r2, [r3, #100]	; 0x64
 80102f8:	e00d      	b.n	8010316 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010306:	7812      	ldrb	r2, [r2, #0]
 8010308:	b2d2      	uxtb	r2, r2
 801030a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801031c:	b29b      	uxth	r3, r3
 801031e:	3b01      	subs	r3, #1
 8010320:	b29a      	uxth	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801032e:	b29b      	uxth	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	d1c2      	bne.n	80102ba <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f000 f98f 	bl	8010658 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2201      	movs	r2, #1
 801033e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010348:	2b00      	cmp	r3, #0
 801034a:	d003      	beq.n	8010354 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 f901 	bl	8010554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010352:	e0d0      	b.n	80104f6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8010354:	7cfb      	ldrb	r3, [r7, #19]
 8010356:	2b05      	cmp	r3, #5
 8010358:	d103      	bne.n	8010362 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f8e6 	bl	801052c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8010360:	e0c6      	b.n	80104f0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8010362:	7cfb      	ldrb	r3, [r7, #19]
 8010364:	2b04      	cmp	r3, #4
 8010366:	d103      	bne.n	8010370 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f8d5 	bl	8010518 <HAL_SPI_RxCpltCallback>
    return;
 801036e:	e0bf      	b.n	80104f0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8010370:	7cfb      	ldrb	r3, [r7, #19]
 8010372:	2b03      	cmp	r3, #3
 8010374:	f040 80bc 	bne.w	80104f0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f8c3 	bl	8010504 <HAL_SPI_TxCpltCallback>
    return;
 801037e:	e0b7      	b.n	80104f0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8010386:	2b00      	cmp	r3, #0
 8010388:	f000 80b5 	beq.w	80104f6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00f      	beq.n	80103b6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801039c:	f043 0204 	orr.w	r2, r3, #4
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	699a      	ldr	r2, [r3, #24]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80103b4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80103b6:	69bb      	ldr	r3, [r7, #24]
 80103b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00f      	beq.n	80103e0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103c6:	f043 0201 	orr.w	r2, r3, #1
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	699a      	ldr	r2, [r3, #24]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103de:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00f      	beq.n	801040a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103f0:	f043 0208 	orr.w	r2, r3, #8
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	699a      	ldr	r2, [r3, #24]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010408:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	f003 0320 	and.w	r3, r3, #32
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00f      	beq.n	8010434 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801041a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	699a      	ldr	r2, [r3, #24]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f042 0220 	orr.w	r2, r2, #32
 8010432:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801043a:	2b00      	cmp	r3, #0
 801043c:	d05a      	beq.n	80104f4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f022 0201 	bic.w	r2, r2, #1
 801044c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	6919      	ldr	r1, [r3, #16]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	4b28      	ldr	r3, [pc, #160]	; (80104fc <HAL_SPI_IRQHandler+0x394>)
 801045a:	400b      	ands	r3, r1
 801045c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010464:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010468:	d138      	bne.n	80104dc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	689a      	ldr	r2, [r3, #8]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010478:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801047e:	2b00      	cmp	r3, #0
 8010480:	d013      	beq.n	80104aa <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010486:	4a1e      	ldr	r2, [pc, #120]	; (8010500 <HAL_SPI_IRQHandler+0x398>)
 8010488:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801048e:	4618      	mov	r0, r3
 8010490:	f7f7 f888 	bl	80075a4 <HAL_DMA_Abort_IT>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d007      	beq.n	80104aa <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d020      	beq.n	80104f4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104b6:	4a12      	ldr	r2, [pc, #72]	; (8010500 <HAL_SPI_IRQHandler+0x398>)
 80104b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104be:	4618      	mov	r0, r3
 80104c0:	f7f7 f870 	bl	80075a4 <HAL_DMA_Abort_IT>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d014      	beq.n	80104f4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80104da:	e00b      	b.n	80104f4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 f835 	bl	8010554 <HAL_SPI_ErrorCallback>
    return;
 80104ea:	e003      	b.n	80104f4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80104ec:	bf00      	nop
 80104ee:	e002      	b.n	80104f6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80104f0:	bf00      	nop
 80104f2:	e000      	b.n	80104f6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80104f4:	bf00      	nop
  }
}
 80104f6:	3728      	adds	r7, #40	; 0x28
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	fffffc94 	.word	0xfffffc94
 8010500:	08010625 	.word	0x08010625

08010504 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801050c:	bf00      	nop
 801050e:	370c      	adds	r7, #12
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr

08010518 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010518:	b480      	push	{r7}
 801051a:	b083      	sub	sp, #12
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010520:	bf00      	nop
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801052c:	b480      	push	{r7}
 801052e:	b083      	sub	sp, #12
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010534:	bf00      	nop
 8010536:	370c      	adds	r7, #12
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010540:	b480      	push	{r7}
 8010542:	b083      	sub	sp, #12
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8010548:	bf00      	nop
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8010570:	bf00      	nop
 8010572:	370c      	adds	r7, #12
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b084      	sub	sp, #16
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010588:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010590:	b2db      	uxtb	r3, r3
 8010592:	2b07      	cmp	r3, #7
 8010594:	d011      	beq.n	80105ba <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801059a:	69db      	ldr	r3, [r3, #28]
 801059c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105a0:	d103      	bne.n	80105aa <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f7ff ffb8 	bl	8010518 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80105a8:	e007      	b.n	80105ba <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	691a      	ldr	r2, [r3, #16]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	f042 0208 	orr.w	r2, r2, #8
 80105b8:	611a      	str	r2, [r3, #16]
}
 80105ba:	bf00      	nop
 80105bc:	3710      	adds	r7, #16
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b084      	sub	sp, #16
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ce:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80105d0:	68f8      	ldr	r0, [r7, #12]
 80105d2:	f7ff ffb5 	bl	8010540 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80105d6:	bf00      	nop
 80105d8:	3710      	adds	r7, #16
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105ea:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7f8 f957 	bl	80088a0 <HAL_DMA_GetError>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b02      	cmp	r3, #2
 80105f6:	d011      	beq.n	801061c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 80105f8:	68f8      	ldr	r0, [r7, #12]
 80105fa:	f000 f82d 	bl	8010658 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010604:	f043 0210 	orr.w	r2, r3, #16
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2201      	movs	r2, #1
 8010612:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8010616:	68f8      	ldr	r0, [r7, #12]
 8010618:	f7ff ff9c 	bl	8010554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801061c:	bf00      	nop
 801061e:	3710      	adds	r7, #16
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}

08010624 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010630:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2200      	movs	r2, #0
 8010636:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2201      	movs	r2, #1
 8010646:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801064a:	68f8      	ldr	r0, [r7, #12]
 801064c:	f7ff ff82 	bl	8010554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010650:	bf00      	nop
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010658:	b480      	push	{r7}
 801065a:	b085      	sub	sp, #20
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	695b      	ldr	r3, [r3, #20]
 8010666:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f042 0208 	orr.w	r2, r2, #8
 8010676:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	699a      	ldr	r2, [r3, #24]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f042 0210 	orr.w	r2, r2, #16
 8010686:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f022 0201 	bic.w	r2, r2, #1
 8010696:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	6919      	ldr	r1, [r3, #16]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	4b3c      	ldr	r3, [pc, #240]	; (8010794 <SPI_CloseTransfer+0x13c>)
 80106a4:	400b      	ands	r3, r1
 80106a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	689a      	ldr	r2, [r3, #8]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80106b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80106be:	b2db      	uxtb	r3, r3
 80106c0:	2b04      	cmp	r3, #4
 80106c2:	d014      	beq.n	80106ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f003 0320 	and.w	r3, r3, #32
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00f      	beq.n	80106ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	699a      	ldr	r2, [r3, #24]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f042 0220 	orr.w	r2, r2, #32
 80106ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80106f4:	b2db      	uxtb	r3, r3
 80106f6:	2b03      	cmp	r3, #3
 80106f8:	d014      	beq.n	8010724 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010700:	2b00      	cmp	r3, #0
 8010702:	d00f      	beq.n	8010724 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801070a:	f043 0204 	orr.w	r2, r3, #4
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	699a      	ldr	r2, [r3, #24]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010722:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00f      	beq.n	801074e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010734:	f043 0201 	orr.w	r2, r3, #1
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	699a      	ldr	r2, [r3, #24]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801074c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00f      	beq.n	8010778 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801075e:	f043 0208 	orr.w	r2, r3, #8
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	699a      	ldr	r2, [r3, #24]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010776:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2200      	movs	r2, #0
 801077c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010788:	bf00      	nop
 801078a:	3714      	adds	r7, #20
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr
 8010794:	fffffc90 	.word	0xfffffc90

08010798 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a4:	095b      	lsrs	r3, r3, #5
 80107a6:	3301      	adds	r3, #1
 80107a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	3301      	adds	r3, #1
 80107b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	3307      	adds	r3, #7
 80107b6:	08db      	lsrs	r3, r3, #3
 80107b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	fb02 f303 	mul.w	r3, r2, r3
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3714      	adds	r7, #20
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr

080107ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b082      	sub	sp, #8
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d101      	bne.n	80107e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e049      	b.n	8010874 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7f2 ff81 	bl	80036fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2202      	movs	r2, #2
 80107fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	3304      	adds	r3, #4
 801080a:	4619      	mov	r1, r3
 801080c:	4610      	mov	r0, r2
 801080e:	f000 fe7d 	bl	801150c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	2201      	movs	r2, #1
 8010816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2201      	movs	r2, #1
 8010826:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2201      	movs	r2, #1
 8010836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	2201      	movs	r2, #1
 801083e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2201      	movs	r2, #1
 8010846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2201      	movs	r2, #1
 801084e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2201      	movs	r2, #1
 801085e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2201      	movs	r2, #1
 8010866:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2201      	movs	r2, #1
 801086e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010872:	2300      	movs	r3, #0
}
 8010874:	4618      	mov	r0, r3
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801088a:	b2db      	uxtb	r3, r3
 801088c:	2b01      	cmp	r3, #1
 801088e:	d001      	beq.n	8010894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010890:	2301      	movs	r3, #1
 8010892:	e054      	b.n	801093e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2202      	movs	r2, #2
 8010898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	68da      	ldr	r2, [r3, #12]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f042 0201 	orr.w	r2, r2, #1
 80108aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	4a26      	ldr	r2, [pc, #152]	; (801094c <HAL_TIM_Base_Start_IT+0xd0>)
 80108b2:	4293      	cmp	r3, r2
 80108b4:	d022      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108be:	d01d      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a22      	ldr	r2, [pc, #136]	; (8010950 <HAL_TIM_Base_Start_IT+0xd4>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d018      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4a21      	ldr	r2, [pc, #132]	; (8010954 <HAL_TIM_Base_Start_IT+0xd8>)
 80108d0:	4293      	cmp	r3, r2
 80108d2:	d013      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a1f      	ldr	r2, [pc, #124]	; (8010958 <HAL_TIM_Base_Start_IT+0xdc>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d00e      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a1e      	ldr	r2, [pc, #120]	; (801095c <HAL_TIM_Base_Start_IT+0xe0>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d009      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a1c      	ldr	r2, [pc, #112]	; (8010960 <HAL_TIM_Base_Start_IT+0xe4>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d004      	beq.n	80108fc <HAL_TIM_Base_Start_IT+0x80>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a1b      	ldr	r2, [pc, #108]	; (8010964 <HAL_TIM_Base_Start_IT+0xe8>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d115      	bne.n	8010928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	689a      	ldr	r2, [r3, #8]
 8010902:	4b19      	ldr	r3, [pc, #100]	; (8010968 <HAL_TIM_Base_Start_IT+0xec>)
 8010904:	4013      	ands	r3, r2
 8010906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	2b06      	cmp	r3, #6
 801090c:	d015      	beq.n	801093a <HAL_TIM_Base_Start_IT+0xbe>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010914:	d011      	beq.n	801093a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f042 0201 	orr.w	r2, r2, #1
 8010924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010926:	e008      	b.n	801093a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	f042 0201 	orr.w	r2, r2, #1
 8010936:	601a      	str	r2, [r3, #0]
 8010938:	e000      	b.n	801093c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801093a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801093c:	2300      	movs	r3, #0
}
 801093e:	4618      	mov	r0, r3
 8010940:	3714      	adds	r7, #20
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	40010000 	.word	0x40010000
 8010950:	40000400 	.word	0x40000400
 8010954:	40000800 	.word	0x40000800
 8010958:	40000c00 	.word	0x40000c00
 801095c:	40010400 	.word	0x40010400
 8010960:	40001800 	.word	0x40001800
 8010964:	40014000 	.word	0x40014000
 8010968:	00010007 	.word	0x00010007

0801096c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010976:	2300      	movs	r3, #0
 8010978:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d109      	bne.n	8010994 <HAL_TIM_OC_Start_IT+0x28>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010986:	b2db      	uxtb	r3, r3
 8010988:	2b01      	cmp	r3, #1
 801098a:	bf14      	ite	ne
 801098c:	2301      	movne	r3, #1
 801098e:	2300      	moveq	r3, #0
 8010990:	b2db      	uxtb	r3, r3
 8010992:	e03c      	b.n	8010a0e <HAL_TIM_OC_Start_IT+0xa2>
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b04      	cmp	r3, #4
 8010998:	d109      	bne.n	80109ae <HAL_TIM_OC_Start_IT+0x42>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	bf14      	ite	ne
 80109a6:	2301      	movne	r3, #1
 80109a8:	2300      	moveq	r3, #0
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	e02f      	b.n	8010a0e <HAL_TIM_OC_Start_IT+0xa2>
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	2b08      	cmp	r3, #8
 80109b2:	d109      	bne.n	80109c8 <HAL_TIM_OC_Start_IT+0x5c>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109ba:	b2db      	uxtb	r3, r3
 80109bc:	2b01      	cmp	r3, #1
 80109be:	bf14      	ite	ne
 80109c0:	2301      	movne	r3, #1
 80109c2:	2300      	moveq	r3, #0
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	e022      	b.n	8010a0e <HAL_TIM_OC_Start_IT+0xa2>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	2b0c      	cmp	r3, #12
 80109cc:	d109      	bne.n	80109e2 <HAL_TIM_OC_Start_IT+0x76>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	bf14      	ite	ne
 80109da:	2301      	movne	r3, #1
 80109dc:	2300      	moveq	r3, #0
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	e015      	b.n	8010a0e <HAL_TIM_OC_Start_IT+0xa2>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b10      	cmp	r3, #16
 80109e6:	d109      	bne.n	80109fc <HAL_TIM_OC_Start_IT+0x90>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	bf14      	ite	ne
 80109f4:	2301      	movne	r3, #1
 80109f6:	2300      	moveq	r3, #0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	e008      	b.n	8010a0e <HAL_TIM_OC_Start_IT+0xa2>
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	bf14      	ite	ne
 8010a08:	2301      	movne	r3, #1
 8010a0a:	2300      	moveq	r3, #0
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d001      	beq.n	8010a16 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8010a12:	2301      	movs	r3, #1
 8010a14:	e0ec      	b.n	8010bf0 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d104      	bne.n	8010a26 <HAL_TIM_OC_Start_IT+0xba>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2202      	movs	r2, #2
 8010a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a24:	e023      	b.n	8010a6e <HAL_TIM_OC_Start_IT+0x102>
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	2b04      	cmp	r3, #4
 8010a2a:	d104      	bne.n	8010a36 <HAL_TIM_OC_Start_IT+0xca>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2202      	movs	r2, #2
 8010a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a34:	e01b      	b.n	8010a6e <HAL_TIM_OC_Start_IT+0x102>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	2b08      	cmp	r3, #8
 8010a3a:	d104      	bne.n	8010a46 <HAL_TIM_OC_Start_IT+0xda>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2202      	movs	r2, #2
 8010a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010a44:	e013      	b.n	8010a6e <HAL_TIM_OC_Start_IT+0x102>
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	2b0c      	cmp	r3, #12
 8010a4a:	d104      	bne.n	8010a56 <HAL_TIM_OC_Start_IT+0xea>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2202      	movs	r2, #2
 8010a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010a54:	e00b      	b.n	8010a6e <HAL_TIM_OC_Start_IT+0x102>
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	2b10      	cmp	r3, #16
 8010a5a:	d104      	bne.n	8010a66 <HAL_TIM_OC_Start_IT+0xfa>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2202      	movs	r2, #2
 8010a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a64:	e003      	b.n	8010a6e <HAL_TIM_OC_Start_IT+0x102>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2202      	movs	r2, #2
 8010a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b0c      	cmp	r3, #12
 8010a72:	d841      	bhi.n	8010af8 <HAL_TIM_OC_Start_IT+0x18c>
 8010a74:	a201      	add	r2, pc, #4	; (adr r2, 8010a7c <HAL_TIM_OC_Start_IT+0x110>)
 8010a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a7a:	bf00      	nop
 8010a7c:	08010ab1 	.word	0x08010ab1
 8010a80:	08010af9 	.word	0x08010af9
 8010a84:	08010af9 	.word	0x08010af9
 8010a88:	08010af9 	.word	0x08010af9
 8010a8c:	08010ac3 	.word	0x08010ac3
 8010a90:	08010af9 	.word	0x08010af9
 8010a94:	08010af9 	.word	0x08010af9
 8010a98:	08010af9 	.word	0x08010af9
 8010a9c:	08010ad5 	.word	0x08010ad5
 8010aa0:	08010af9 	.word	0x08010af9
 8010aa4:	08010af9 	.word	0x08010af9
 8010aa8:	08010af9 	.word	0x08010af9
 8010aac:	08010ae7 	.word	0x08010ae7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	68da      	ldr	r2, [r3, #12]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f042 0202 	orr.w	r2, r2, #2
 8010abe:	60da      	str	r2, [r3, #12]
      break;
 8010ac0:	e01d      	b.n	8010afe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	68da      	ldr	r2, [r3, #12]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f042 0204 	orr.w	r2, r2, #4
 8010ad0:	60da      	str	r2, [r3, #12]
      break;
 8010ad2:	e014      	b.n	8010afe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	68da      	ldr	r2, [r3, #12]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	f042 0208 	orr.w	r2, r2, #8
 8010ae2:	60da      	str	r2, [r3, #12]
      break;
 8010ae4:	e00b      	b.n	8010afe <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68da      	ldr	r2, [r3, #12]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f042 0210 	orr.w	r2, r2, #16
 8010af4:	60da      	str	r2, [r3, #12]
      break;
 8010af6:	e002      	b.n	8010afe <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8010af8:	2301      	movs	r3, #1
 8010afa:	73fb      	strb	r3, [r7, #15]
      break;
 8010afc:	bf00      	nop
  }

  if (status == HAL_OK)
 8010afe:	7bfb      	ldrb	r3, [r7, #15]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d174      	bne.n	8010bee <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2201      	movs	r2, #1
 8010b0a:	6839      	ldr	r1, [r7, #0]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f001 f917 	bl	8011d40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	4a38      	ldr	r2, [pc, #224]	; (8010bf8 <HAL_TIM_OC_Start_IT+0x28c>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d013      	beq.n	8010b44 <HAL_TIM_OC_Start_IT+0x1d8>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4a36      	ldr	r2, [pc, #216]	; (8010bfc <HAL_TIM_OC_Start_IT+0x290>)
 8010b22:	4293      	cmp	r3, r2
 8010b24:	d00e      	beq.n	8010b44 <HAL_TIM_OC_Start_IT+0x1d8>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a35      	ldr	r2, [pc, #212]	; (8010c00 <HAL_TIM_OC_Start_IT+0x294>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d009      	beq.n	8010b44 <HAL_TIM_OC_Start_IT+0x1d8>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a33      	ldr	r2, [pc, #204]	; (8010c04 <HAL_TIM_OC_Start_IT+0x298>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d004      	beq.n	8010b44 <HAL_TIM_OC_Start_IT+0x1d8>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	4a32      	ldr	r2, [pc, #200]	; (8010c08 <HAL_TIM_OC_Start_IT+0x29c>)
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d101      	bne.n	8010b48 <HAL_TIM_OC_Start_IT+0x1dc>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e000      	b.n	8010b4a <HAL_TIM_OC_Start_IT+0x1de>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a25      	ldr	r2, [pc, #148]	; (8010bf8 <HAL_TIM_OC_Start_IT+0x28c>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d022      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b70:	d01d      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a25      	ldr	r2, [pc, #148]	; (8010c0c <HAL_TIM_OC_Start_IT+0x2a0>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d018      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a23      	ldr	r2, [pc, #140]	; (8010c10 <HAL_TIM_OC_Start_IT+0x2a4>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d013      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a22      	ldr	r2, [pc, #136]	; (8010c14 <HAL_TIM_OC_Start_IT+0x2a8>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d00e      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	4a19      	ldr	r2, [pc, #100]	; (8010bfc <HAL_TIM_OC_Start_IT+0x290>)
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d009      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4a1e      	ldr	r2, [pc, #120]	; (8010c18 <HAL_TIM_OC_Start_IT+0x2ac>)
 8010ba0:	4293      	cmp	r3, r2
 8010ba2:	d004      	beq.n	8010bae <HAL_TIM_OC_Start_IT+0x242>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a15      	ldr	r2, [pc, #84]	; (8010c00 <HAL_TIM_OC_Start_IT+0x294>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d115      	bne.n	8010bda <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	689a      	ldr	r2, [r3, #8]
 8010bb4:	4b19      	ldr	r3, [pc, #100]	; (8010c1c <HAL_TIM_OC_Start_IT+0x2b0>)
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	2b06      	cmp	r3, #6
 8010bbe:	d015      	beq.n	8010bec <HAL_TIM_OC_Start_IT+0x280>
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bc6:	d011      	beq.n	8010bec <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f042 0201 	orr.w	r2, r2, #1
 8010bd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bd8:	e008      	b.n	8010bec <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	681a      	ldr	r2, [r3, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	f042 0201 	orr.w	r2, r2, #1
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	e000      	b.n	8010bee <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	40010000 	.word	0x40010000
 8010bfc:	40010400 	.word	0x40010400
 8010c00:	40014000 	.word	0x40014000
 8010c04:	40014400 	.word	0x40014400
 8010c08:	40014800 	.word	0x40014800
 8010c0c:	40000400 	.word	0x40000400
 8010c10:	40000800 	.word	0x40000800
 8010c14:	40000c00 	.word	0x40000c00
 8010c18:	40001800 	.word	0x40001800
 8010c1c:	00010007 	.word	0x00010007

08010c20 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	2b0c      	cmp	r3, #12
 8010c32:	d841      	bhi.n	8010cb8 <HAL_TIM_OC_Stop_IT+0x98>
 8010c34:	a201      	add	r2, pc, #4	; (adr r2, 8010c3c <HAL_TIM_OC_Stop_IT+0x1c>)
 8010c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c3a:	bf00      	nop
 8010c3c:	08010c71 	.word	0x08010c71
 8010c40:	08010cb9 	.word	0x08010cb9
 8010c44:	08010cb9 	.word	0x08010cb9
 8010c48:	08010cb9 	.word	0x08010cb9
 8010c4c:	08010c83 	.word	0x08010c83
 8010c50:	08010cb9 	.word	0x08010cb9
 8010c54:	08010cb9 	.word	0x08010cb9
 8010c58:	08010cb9 	.word	0x08010cb9
 8010c5c:	08010c95 	.word	0x08010c95
 8010c60:	08010cb9 	.word	0x08010cb9
 8010c64:	08010cb9 	.word	0x08010cb9
 8010c68:	08010cb9 	.word	0x08010cb9
 8010c6c:	08010ca7 	.word	0x08010ca7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	68da      	ldr	r2, [r3, #12]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f022 0202 	bic.w	r2, r2, #2
 8010c7e:	60da      	str	r2, [r3, #12]
      break;
 8010c80:	e01d      	b.n	8010cbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	68da      	ldr	r2, [r3, #12]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f022 0204 	bic.w	r2, r2, #4
 8010c90:	60da      	str	r2, [r3, #12]
      break;
 8010c92:	e014      	b.n	8010cbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68da      	ldr	r2, [r3, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f022 0208 	bic.w	r2, r2, #8
 8010ca2:	60da      	str	r2, [r3, #12]
      break;
 8010ca4:	e00b      	b.n	8010cbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	68da      	ldr	r2, [r3, #12]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f022 0210 	bic.w	r2, r2, #16
 8010cb4:	60da      	str	r2, [r3, #12]
      break;
 8010cb6:	e002      	b.n	8010cbe <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	73fb      	strb	r3, [r7, #15]
      break;
 8010cbc:	bf00      	nop
  }

  if (status == HAL_OK)
 8010cbe:	7bfb      	ldrb	r3, [r7, #15]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f040 8081 	bne.w	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f001 f836 	bl	8011d40 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4a3e      	ldr	r2, [pc, #248]	; (8010dd4 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d013      	beq.n	8010d06 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	4a3d      	ldr	r2, [pc, #244]	; (8010dd8 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d00e      	beq.n	8010d06 <HAL_TIM_OC_Stop_IT+0xe6>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4a3b      	ldr	r2, [pc, #236]	; (8010ddc <HAL_TIM_OC_Stop_IT+0x1bc>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d009      	beq.n	8010d06 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	4a3a      	ldr	r2, [pc, #232]	; (8010de0 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d004      	beq.n	8010d06 <HAL_TIM_OC_Stop_IT+0xe6>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	4a38      	ldr	r2, [pc, #224]	; (8010de4 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8010d02:	4293      	cmp	r3, r2
 8010d04:	d101      	bne.n	8010d0a <HAL_TIM_OC_Stop_IT+0xea>
 8010d06:	2301      	movs	r3, #1
 8010d08:	e000      	b.n	8010d0c <HAL_TIM_OC_Stop_IT+0xec>
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d017      	beq.n	8010d40 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	6a1a      	ldr	r2, [r3, #32]
 8010d16:	f241 1311 	movw	r3, #4369	; 0x1111
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10f      	bne.n	8010d40 <HAL_TIM_OC_Stop_IT+0x120>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6a1a      	ldr	r2, [r3, #32]
 8010d26:	f240 4344 	movw	r3, #1092	; 0x444
 8010d2a:	4013      	ands	r3, r2
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d107      	bne.n	8010d40 <HAL_TIM_OC_Stop_IT+0x120>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010d3e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6a1a      	ldr	r2, [r3, #32]
 8010d46:	f241 1311 	movw	r3, #4369	; 0x1111
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10f      	bne.n	8010d70 <HAL_TIM_OC_Stop_IT+0x150>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	6a1a      	ldr	r2, [r3, #32]
 8010d56:	f240 4344 	movw	r3, #1092	; 0x444
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d107      	bne.n	8010d70 <HAL_TIM_OC_Stop_IT+0x150>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	681a      	ldr	r2, [r3, #0]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f022 0201 	bic.w	r2, r2, #1
 8010d6e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d104      	bne.n	8010d80 <HAL_TIM_OC_Stop_IT+0x160>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d7e:	e023      	b.n	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d80:	683b      	ldr	r3, [r7, #0]
 8010d82:	2b04      	cmp	r3, #4
 8010d84:	d104      	bne.n	8010d90 <HAL_TIM_OC_Stop_IT+0x170>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2201      	movs	r2, #1
 8010d8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d8e:	e01b      	b.n	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	2b08      	cmp	r3, #8
 8010d94:	d104      	bne.n	8010da0 <HAL_TIM_OC_Stop_IT+0x180>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2201      	movs	r2, #1
 8010d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d9e:	e013      	b.n	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	2b0c      	cmp	r3, #12
 8010da4:	d104      	bne.n	8010db0 <HAL_TIM_OC_Stop_IT+0x190>
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2201      	movs	r2, #1
 8010daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010dae:	e00b      	b.n	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	2b10      	cmp	r3, #16
 8010db4:	d104      	bne.n	8010dc0 <HAL_TIM_OC_Stop_IT+0x1a0>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2201      	movs	r2, #1
 8010dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010dbe:	e003      	b.n	8010dc8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8010dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	40010000 	.word	0x40010000
 8010dd8:	40010400 	.word	0x40010400
 8010ddc:	40014000 	.word	0x40014000
 8010de0:	40014400 	.word	0x40014400
 8010de4:	40014800 	.word	0x40014800

08010de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b082      	sub	sp, #8
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010df6:	2301      	movs	r3, #1
 8010df8:	e049      	b.n	8010e8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e00:	b2db      	uxtb	r3, r3
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d106      	bne.n	8010e14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 f841 	bl	8010e96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2202      	movs	r2, #2
 8010e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	3304      	adds	r3, #4
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	f000 fb70 	bl	801150c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2201      	movs	r2, #1
 8010e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2201      	movs	r2, #1
 8010e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2201      	movs	r2, #1
 8010e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2201      	movs	r2, #1
 8010e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2201      	movs	r2, #1
 8010e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2201      	movs	r2, #1
 8010e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e8c:	2300      	movs	r3, #0
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3708      	adds	r7, #8
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010e96:	b480      	push	{r7}
 8010e98:	b083      	sub	sp, #12
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010e9e:	bf00      	nop
 8010ea0:	370c      	adds	r7, #12
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010eaa:	b580      	push	{r7, lr}
 8010eac:	b084      	sub	sp, #16
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	f003 0302 	and.w	r3, r3, #2
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d020      	beq.n	8010f0e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f003 0302 	and.w	r3, r3, #2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d01b      	beq.n	8010f0e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f06f 0202 	mvn.w	r2, #2
 8010ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	699b      	ldr	r3, [r3, #24]
 8010eec:	f003 0303 	and.w	r3, r3, #3
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d003      	beq.n	8010efc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f000 faeb 	bl	80114d0 <HAL_TIM_IC_CaptureCallback>
 8010efa:	e005      	b.n	8010f08 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7f0 fb77 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 faee 	bl	80114e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	f003 0304 	and.w	r3, r3, #4
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d020      	beq.n	8010f5a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	f003 0304 	and.w	r3, r3, #4
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d01b      	beq.n	8010f5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	f06f 0204 	mvn.w	r2, #4
 8010f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2202      	movs	r2, #2
 8010f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fac5 	bl	80114d0 <HAL_TIM_IC_CaptureCallback>
 8010f46:	e005      	b.n	8010f54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f7f0 fb51 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 fac8 	bl	80114e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	f003 0308 	and.w	r3, r3, #8
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d020      	beq.n	8010fa6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f003 0308 	and.w	r3, r3, #8
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d01b      	beq.n	8010fa6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f06f 0208 	mvn.w	r2, #8
 8010f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	69db      	ldr	r3, [r3, #28]
 8010f84:	f003 0303 	and.w	r3, r3, #3
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d003      	beq.n	8010f94 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fa9f 	bl	80114d0 <HAL_TIM_IC_CaptureCallback>
 8010f92:	e005      	b.n	8010fa0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7f0 fb2b 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 faa2 	bl	80114e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	f003 0310 	and.w	r3, r3, #16
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d020      	beq.n	8010ff2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f003 0310 	and.w	r3, r3, #16
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d01b      	beq.n	8010ff2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f06f 0210 	mvn.w	r2, #16
 8010fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2208      	movs	r2, #8
 8010fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	69db      	ldr	r3, [r3, #28]
 8010fd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d003      	beq.n	8010fe0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f000 fa79 	bl	80114d0 <HAL_TIM_IC_CaptureCallback>
 8010fde:	e005      	b.n	8010fec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7f0 fb05 	bl	80015f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 fa7c 	bl	80114e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	f003 0301 	and.w	r3, r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00c      	beq.n	8011016 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f003 0301 	and.w	r3, r3, #1
 8011002:	2b00      	cmp	r3, #0
 8011004:	d007      	beq.n	8011016 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f06f 0201 	mvn.w	r2, #1
 801100e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7f1 f965 	bl	80022e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801101c:	2b00      	cmp	r3, #0
 801101e:	d104      	bne.n	801102a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00c      	beq.n	8011044 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011030:	2b00      	cmp	r3, #0
 8011032:	d007      	beq.n	8011044 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 801103c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 ffba 	bl	8011fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00c      	beq.n	8011068 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011054:	2b00      	cmp	r3, #0
 8011056:	d007      	beq.n	8011068 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 ffb2 	bl	8011fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801106e:	2b00      	cmp	r3, #0
 8011070:	d00c      	beq.n	801108c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011078:	2b00      	cmp	r3, #0
 801107a:	d007      	beq.n	801108c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 fa36 	bl	80114f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f003 0320 	and.w	r3, r3, #32
 8011092:	2b00      	cmp	r3, #0
 8011094:	d00c      	beq.n	80110b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	f003 0320 	and.w	r3, r3, #32
 801109c:	2b00      	cmp	r3, #0
 801109e:	d007      	beq.n	80110b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	f06f 0220 	mvn.w	r2, #32
 80110a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 ff7a 	bl	8011fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80110b0:	bf00      	nop
 80110b2:	3710      	adds	r7, #16
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}

080110b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b086      	sub	sp, #24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d101      	bne.n	80110d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80110d2:	2302      	movs	r3, #2
 80110d4:	e0ff      	b.n	80112d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2b14      	cmp	r3, #20
 80110e2:	f200 80f0 	bhi.w	80112c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80110e6:	a201      	add	r2, pc, #4	; (adr r2, 80110ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80110e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ec:	08011141 	.word	0x08011141
 80110f0:	080112c7 	.word	0x080112c7
 80110f4:	080112c7 	.word	0x080112c7
 80110f8:	080112c7 	.word	0x080112c7
 80110fc:	08011181 	.word	0x08011181
 8011100:	080112c7 	.word	0x080112c7
 8011104:	080112c7 	.word	0x080112c7
 8011108:	080112c7 	.word	0x080112c7
 801110c:	080111c3 	.word	0x080111c3
 8011110:	080112c7 	.word	0x080112c7
 8011114:	080112c7 	.word	0x080112c7
 8011118:	080112c7 	.word	0x080112c7
 801111c:	08011203 	.word	0x08011203
 8011120:	080112c7 	.word	0x080112c7
 8011124:	080112c7 	.word	0x080112c7
 8011128:	080112c7 	.word	0x080112c7
 801112c:	08011245 	.word	0x08011245
 8011130:	080112c7 	.word	0x080112c7
 8011134:	080112c7 	.word	0x080112c7
 8011138:	080112c7 	.word	0x080112c7
 801113c:	08011285 	.word	0x08011285
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	68b9      	ldr	r1, [r7, #8]
 8011146:	4618      	mov	r0, r3
 8011148:	f000 fa86 	bl	8011658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	699a      	ldr	r2, [r3, #24]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f042 0208 	orr.w	r2, r2, #8
 801115a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	699a      	ldr	r2, [r3, #24]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	f022 0204 	bic.w	r2, r2, #4
 801116a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	6999      	ldr	r1, [r3, #24]
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	691a      	ldr	r2, [r3, #16]
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	430a      	orrs	r2, r1
 801117c:	619a      	str	r2, [r3, #24]
      break;
 801117e:	e0a5      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68b9      	ldr	r1, [r7, #8]
 8011186:	4618      	mov	r0, r3
 8011188:	f000 faf6 	bl	8011778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	699a      	ldr	r2, [r3, #24]
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801119a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	699a      	ldr	r2, [r3, #24]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80111aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	6999      	ldr	r1, [r3, #24]
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	691b      	ldr	r3, [r3, #16]
 80111b6:	021a      	lsls	r2, r3, #8
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	430a      	orrs	r2, r1
 80111be:	619a      	str	r2, [r3, #24]
      break;
 80111c0:	e084      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68b9      	ldr	r1, [r7, #8]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f000 fb5f 	bl	801188c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	69da      	ldr	r2, [r3, #28]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f042 0208 	orr.w	r2, r2, #8
 80111dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	69da      	ldr	r2, [r3, #28]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f022 0204 	bic.w	r2, r2, #4
 80111ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	69d9      	ldr	r1, [r3, #28]
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	691a      	ldr	r2, [r3, #16]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	430a      	orrs	r2, r1
 80111fe:	61da      	str	r2, [r3, #28]
      break;
 8011200:	e064      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	4618      	mov	r0, r3
 801120a:	f000 fbc7 	bl	801199c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	69da      	ldr	r2, [r3, #28]
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801121c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	69da      	ldr	r2, [r3, #28]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801122c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	69d9      	ldr	r1, [r3, #28]
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	021a      	lsls	r2, r3, #8
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	430a      	orrs	r2, r1
 8011240:	61da      	str	r2, [r3, #28]
      break;
 8011242:	e043      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	4618      	mov	r0, r3
 801124c:	f000 fc10 	bl	8011a70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f042 0208 	orr.w	r2, r2, #8
 801125e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f022 0204 	bic.w	r2, r2, #4
 801126e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	691a      	ldr	r2, [r3, #16]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	430a      	orrs	r2, r1
 8011280:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011282:	e023      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	68b9      	ldr	r1, [r7, #8]
 801128a:	4618      	mov	r0, r3
 801128c:	f000 fc54 	bl	8011b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801129e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80112ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	691b      	ldr	r3, [r3, #16]
 80112ba:	021a      	lsls	r2, r3, #8
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80112c4:	e002      	b.n	80112cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80112c6:	2301      	movs	r3, #1
 80112c8:	75fb      	strb	r3, [r7, #23]
      break;
 80112ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop

080112e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80112ea:	2300      	movs	r3, #0
 80112ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d101      	bne.n	80112fc <HAL_TIM_ConfigClockSource+0x1c>
 80112f8:	2302      	movs	r3, #2
 80112fa:	e0dc      	b.n	80114b6 <HAL_TIM_ConfigClockSource+0x1d6>
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2201      	movs	r2, #1
 8011300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2202      	movs	r2, #2
 8011308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	689b      	ldr	r3, [r3, #8]
 8011312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011314:	68ba      	ldr	r2, [r7, #8]
 8011316:	4b6a      	ldr	r3, [pc, #424]	; (80114c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011318:	4013      	ands	r3, r2
 801131a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011322:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	68ba      	ldr	r2, [r7, #8]
 801132a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a64      	ldr	r2, [pc, #400]	; (80114c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011332:	4293      	cmp	r3, r2
 8011334:	f000 80a9 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 8011338:	4a62      	ldr	r2, [pc, #392]	; (80114c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801133a:	4293      	cmp	r3, r2
 801133c:	f200 80ae 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 8011340:	4a61      	ldr	r2, [pc, #388]	; (80114c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011342:	4293      	cmp	r3, r2
 8011344:	f000 80a1 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 8011348:	4a5f      	ldr	r2, [pc, #380]	; (80114c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801134a:	4293      	cmp	r3, r2
 801134c:	f200 80a6 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 8011350:	4a5e      	ldr	r2, [pc, #376]	; (80114cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8011352:	4293      	cmp	r3, r2
 8011354:	f000 8099 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 8011358:	4a5c      	ldr	r2, [pc, #368]	; (80114cc <HAL_TIM_ConfigClockSource+0x1ec>)
 801135a:	4293      	cmp	r3, r2
 801135c:	f200 809e 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 8011360:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011364:	f000 8091 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 8011368:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801136c:	f200 8096 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 8011370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011374:	f000 8089 	beq.w	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 8011378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801137c:	f200 808e 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 8011380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011384:	d03e      	beq.n	8011404 <HAL_TIM_ConfigClockSource+0x124>
 8011386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801138a:	f200 8087 	bhi.w	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 801138e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011392:	f000 8086 	beq.w	80114a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8011396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801139a:	d87f      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 801139c:	2b70      	cmp	r3, #112	; 0x70
 801139e:	d01a      	beq.n	80113d6 <HAL_TIM_ConfigClockSource+0xf6>
 80113a0:	2b70      	cmp	r3, #112	; 0x70
 80113a2:	d87b      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113a4:	2b60      	cmp	r3, #96	; 0x60
 80113a6:	d050      	beq.n	801144a <HAL_TIM_ConfigClockSource+0x16a>
 80113a8:	2b60      	cmp	r3, #96	; 0x60
 80113aa:	d877      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113ac:	2b50      	cmp	r3, #80	; 0x50
 80113ae:	d03c      	beq.n	801142a <HAL_TIM_ConfigClockSource+0x14a>
 80113b0:	2b50      	cmp	r3, #80	; 0x50
 80113b2:	d873      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113b4:	2b40      	cmp	r3, #64	; 0x40
 80113b6:	d058      	beq.n	801146a <HAL_TIM_ConfigClockSource+0x18a>
 80113b8:	2b40      	cmp	r3, #64	; 0x40
 80113ba:	d86f      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113bc:	2b30      	cmp	r3, #48	; 0x30
 80113be:	d064      	beq.n	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 80113c0:	2b30      	cmp	r3, #48	; 0x30
 80113c2:	d86b      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113c4:	2b20      	cmp	r3, #32
 80113c6:	d060      	beq.n	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 80113c8:	2b20      	cmp	r3, #32
 80113ca:	d867      	bhi.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d05c      	beq.n	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 80113d0:	2b10      	cmp	r3, #16
 80113d2:	d05a      	beq.n	801148a <HAL_TIM_ConfigClockSource+0x1aa>
 80113d4:	e062      	b.n	801149c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6818      	ldr	r0, [r3, #0]
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	6899      	ldr	r1, [r3, #8]
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	685a      	ldr	r2, [r3, #4]
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	f000 fc8b 	bl	8011d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	689b      	ldr	r3, [r3, #8]
 80113f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80113f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	609a      	str	r2, [r3, #8]
      break;
 8011402:	e04f      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6818      	ldr	r0, [r3, #0]
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	6899      	ldr	r1, [r3, #8]
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	685a      	ldr	r2, [r3, #4]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	f000 fc74 	bl	8011d00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	689a      	ldr	r2, [r3, #8]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011426:	609a      	str	r2, [r3, #8]
      break;
 8011428:	e03c      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6818      	ldr	r0, [r3, #0]
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	6859      	ldr	r1, [r3, #4]
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	461a      	mov	r2, r3
 8011438:	f000 fbe4 	bl	8011c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2150      	movs	r1, #80	; 0x50
 8011442:	4618      	mov	r0, r3
 8011444:	f000 fc3e 	bl	8011cc4 <TIM_ITRx_SetConfig>
      break;
 8011448:	e02c      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6818      	ldr	r0, [r3, #0]
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	6859      	ldr	r1, [r3, #4]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	461a      	mov	r2, r3
 8011458:	f000 fc03 	bl	8011c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2160      	movs	r1, #96	; 0x60
 8011462:	4618      	mov	r0, r3
 8011464:	f000 fc2e 	bl	8011cc4 <TIM_ITRx_SetConfig>
      break;
 8011468:	e01c      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6818      	ldr	r0, [r3, #0]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	6859      	ldr	r1, [r3, #4]
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	68db      	ldr	r3, [r3, #12]
 8011476:	461a      	mov	r2, r3
 8011478:	f000 fbc4 	bl	8011c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	2140      	movs	r1, #64	; 0x40
 8011482:	4618      	mov	r0, r3
 8011484:	f000 fc1e 	bl	8011cc4 <TIM_ITRx_SetConfig>
      break;
 8011488:	e00c      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4619      	mov	r1, r3
 8011494:	4610      	mov	r0, r2
 8011496:	f000 fc15 	bl	8011cc4 <TIM_ITRx_SetConfig>
      break;
 801149a:	e003      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801149c:	2301      	movs	r3, #1
 801149e:	73fb      	strb	r3, [r7, #15]
      break;
 80114a0:	e000      	b.n	80114a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80114a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2201      	movs	r2, #1
 80114a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80114b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3710      	adds	r7, #16
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	ffceff88 	.word	0xffceff88
 80114c4:	00100040 	.word	0x00100040
 80114c8:	00100030 	.word	0x00100030
 80114cc:	00100020 	.word	0x00100020

080114d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80114d8:	bf00      	nop
 80114da:	370c      	adds	r7, #12
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr

080114e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80114ec:	bf00      	nop
 80114ee:	370c      	adds	r7, #12
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011500:	bf00      	nop
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	4a46      	ldr	r2, [pc, #280]	; (8011638 <TIM_Base_SetConfig+0x12c>)
 8011520:	4293      	cmp	r3, r2
 8011522:	d013      	beq.n	801154c <TIM_Base_SetConfig+0x40>
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801152a:	d00f      	beq.n	801154c <TIM_Base_SetConfig+0x40>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4a43      	ldr	r2, [pc, #268]	; (801163c <TIM_Base_SetConfig+0x130>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d00b      	beq.n	801154c <TIM_Base_SetConfig+0x40>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a42      	ldr	r2, [pc, #264]	; (8011640 <TIM_Base_SetConfig+0x134>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d007      	beq.n	801154c <TIM_Base_SetConfig+0x40>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a41      	ldr	r2, [pc, #260]	; (8011644 <TIM_Base_SetConfig+0x138>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d003      	beq.n	801154c <TIM_Base_SetConfig+0x40>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a40      	ldr	r2, [pc, #256]	; (8011648 <TIM_Base_SetConfig+0x13c>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d108      	bne.n	801155e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	68fa      	ldr	r2, [r7, #12]
 801155a:	4313      	orrs	r3, r2
 801155c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a35      	ldr	r2, [pc, #212]	; (8011638 <TIM_Base_SetConfig+0x12c>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d01f      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801156c:	d01b      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a32      	ldr	r2, [pc, #200]	; (801163c <TIM_Base_SetConfig+0x130>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d017      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a31      	ldr	r2, [pc, #196]	; (8011640 <TIM_Base_SetConfig+0x134>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d013      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a30      	ldr	r2, [pc, #192]	; (8011644 <TIM_Base_SetConfig+0x138>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d00f      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a2f      	ldr	r2, [pc, #188]	; (8011648 <TIM_Base_SetConfig+0x13c>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d00b      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a2e      	ldr	r2, [pc, #184]	; (801164c <TIM_Base_SetConfig+0x140>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d007      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4a2d      	ldr	r2, [pc, #180]	; (8011650 <TIM_Base_SetConfig+0x144>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d003      	beq.n	80115a6 <TIM_Base_SetConfig+0x9a>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a2c      	ldr	r2, [pc, #176]	; (8011654 <TIM_Base_SetConfig+0x148>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d108      	bne.n	80115b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	4313      	orrs	r3, r2
 80115b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	695b      	ldr	r3, [r3, #20]
 80115c2:	4313      	orrs	r3, r2
 80115c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	68fa      	ldr	r2, [r7, #12]
 80115ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	689a      	ldr	r2, [r3, #8]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4a16      	ldr	r2, [pc, #88]	; (8011638 <TIM_Base_SetConfig+0x12c>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d00f      	beq.n	8011604 <TIM_Base_SetConfig+0xf8>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4a18      	ldr	r2, [pc, #96]	; (8011648 <TIM_Base_SetConfig+0x13c>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d00b      	beq.n	8011604 <TIM_Base_SetConfig+0xf8>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a17      	ldr	r2, [pc, #92]	; (801164c <TIM_Base_SetConfig+0x140>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d007      	beq.n	8011604 <TIM_Base_SetConfig+0xf8>
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4a16      	ldr	r2, [pc, #88]	; (8011650 <TIM_Base_SetConfig+0x144>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d003      	beq.n	8011604 <TIM_Base_SetConfig+0xf8>
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	4a15      	ldr	r2, [pc, #84]	; (8011654 <TIM_Base_SetConfig+0x148>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d103      	bne.n	801160c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	691a      	ldr	r2, [r3, #16]
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2201      	movs	r2, #1
 8011610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	f003 0301 	and.w	r3, r3, #1
 801161a:	2b01      	cmp	r3, #1
 801161c:	d105      	bne.n	801162a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	691b      	ldr	r3, [r3, #16]
 8011622:	f023 0201 	bic.w	r2, r3, #1
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	611a      	str	r2, [r3, #16]
  }
}
 801162a:	bf00      	nop
 801162c:	3714      	adds	r7, #20
 801162e:	46bd      	mov	sp, r7
 8011630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011634:	4770      	bx	lr
 8011636:	bf00      	nop
 8011638:	40010000 	.word	0x40010000
 801163c:	40000400 	.word	0x40000400
 8011640:	40000800 	.word	0x40000800
 8011644:	40000c00 	.word	0x40000c00
 8011648:	40010400 	.word	0x40010400
 801164c:	40014000 	.word	0x40014000
 8011650:	40014400 	.word	0x40014400
 8011654:	40014800 	.word	0x40014800

08011658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011658:	b480      	push	{r7}
 801165a:	b087      	sub	sp, #28
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a1b      	ldr	r3, [r3, #32]
 8011666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	f023 0201 	bic.w	r2, r3, #1
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011680:	68fa      	ldr	r2, [r7, #12]
 8011682:	4b37      	ldr	r3, [pc, #220]	; (8011760 <TIM_OC1_SetConfig+0x108>)
 8011684:	4013      	ands	r3, r2
 8011686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f023 0303 	bic.w	r3, r3, #3
 801168e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	4313      	orrs	r3, r2
 8011698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	f023 0302 	bic.w	r3, r3, #2
 80116a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	689b      	ldr	r3, [r3, #8]
 80116a6:	697a      	ldr	r2, [r7, #20]
 80116a8:	4313      	orrs	r3, r2
 80116aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4a2d      	ldr	r2, [pc, #180]	; (8011764 <TIM_OC1_SetConfig+0x10c>)
 80116b0:	4293      	cmp	r3, r2
 80116b2:	d00f      	beq.n	80116d4 <TIM_OC1_SetConfig+0x7c>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	4a2c      	ldr	r2, [pc, #176]	; (8011768 <TIM_OC1_SetConfig+0x110>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d00b      	beq.n	80116d4 <TIM_OC1_SetConfig+0x7c>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	4a2b      	ldr	r2, [pc, #172]	; (801176c <TIM_OC1_SetConfig+0x114>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d007      	beq.n	80116d4 <TIM_OC1_SetConfig+0x7c>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4a2a      	ldr	r2, [pc, #168]	; (8011770 <TIM_OC1_SetConfig+0x118>)
 80116c8:	4293      	cmp	r3, r2
 80116ca:	d003      	beq.n	80116d4 <TIM_OC1_SetConfig+0x7c>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4a29      	ldr	r2, [pc, #164]	; (8011774 <TIM_OC1_SetConfig+0x11c>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d10c      	bne.n	80116ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	f023 0308 	bic.w	r3, r3, #8
 80116da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	697a      	ldr	r2, [r7, #20]
 80116e2:	4313      	orrs	r3, r2
 80116e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	f023 0304 	bic.w	r3, r3, #4
 80116ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	4a1c      	ldr	r2, [pc, #112]	; (8011764 <TIM_OC1_SetConfig+0x10c>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d00f      	beq.n	8011716 <TIM_OC1_SetConfig+0xbe>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	4a1b      	ldr	r2, [pc, #108]	; (8011768 <TIM_OC1_SetConfig+0x110>)
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d00b      	beq.n	8011716 <TIM_OC1_SetConfig+0xbe>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	4a1a      	ldr	r2, [pc, #104]	; (801176c <TIM_OC1_SetConfig+0x114>)
 8011702:	4293      	cmp	r3, r2
 8011704:	d007      	beq.n	8011716 <TIM_OC1_SetConfig+0xbe>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4a19      	ldr	r2, [pc, #100]	; (8011770 <TIM_OC1_SetConfig+0x118>)
 801170a:	4293      	cmp	r3, r2
 801170c:	d003      	beq.n	8011716 <TIM_OC1_SetConfig+0xbe>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4a18      	ldr	r2, [pc, #96]	; (8011774 <TIM_OC1_SetConfig+0x11c>)
 8011712:	4293      	cmp	r3, r2
 8011714:	d111      	bne.n	801173a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011716:	693b      	ldr	r3, [r7, #16]
 8011718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801171c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	695b      	ldr	r3, [r3, #20]
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	4313      	orrs	r3, r2
 801172e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	693a      	ldr	r2, [r7, #16]
 8011736:	4313      	orrs	r3, r2
 8011738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	68fa      	ldr	r2, [r7, #12]
 8011744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	685a      	ldr	r2, [r3, #4]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	697a      	ldr	r2, [r7, #20]
 8011752:	621a      	str	r2, [r3, #32]
}
 8011754:	bf00      	nop
 8011756:	371c      	adds	r7, #28
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr
 8011760:	fffeff8f 	.word	0xfffeff8f
 8011764:	40010000 	.word	0x40010000
 8011768:	40010400 	.word	0x40010400
 801176c:	40014000 	.word	0x40014000
 8011770:	40014400 	.word	0x40014400
 8011774:	40014800 	.word	0x40014800

08011778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011778:	b480      	push	{r7}
 801177a:	b087      	sub	sp, #28
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a1b      	ldr	r3, [r3, #32]
 8011786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6a1b      	ldr	r3, [r3, #32]
 801178c:	f023 0210 	bic.w	r2, r3, #16
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80117a0:	68fa      	ldr	r2, [r7, #12]
 80117a2:	4b34      	ldr	r3, [pc, #208]	; (8011874 <TIM_OC2_SetConfig+0xfc>)
 80117a4:	4013      	ands	r3, r2
 80117a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	021b      	lsls	r3, r3, #8
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	4313      	orrs	r3, r2
 80117ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	f023 0320 	bic.w	r3, r3, #32
 80117c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	011b      	lsls	r3, r3, #4
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	4313      	orrs	r3, r2
 80117ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a29      	ldr	r2, [pc, #164]	; (8011878 <TIM_OC2_SetConfig+0x100>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d003      	beq.n	80117e0 <TIM_OC2_SetConfig+0x68>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a28      	ldr	r2, [pc, #160]	; (801187c <TIM_OC2_SetConfig+0x104>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d10d      	bne.n	80117fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	011b      	lsls	r3, r3, #4
 80117ee:	697a      	ldr	r2, [r7, #20]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4a1e      	ldr	r2, [pc, #120]	; (8011878 <TIM_OC2_SetConfig+0x100>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d00f      	beq.n	8011824 <TIM_OC2_SetConfig+0xac>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a1d      	ldr	r2, [pc, #116]	; (801187c <TIM_OC2_SetConfig+0x104>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d00b      	beq.n	8011824 <TIM_OC2_SetConfig+0xac>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4a1c      	ldr	r2, [pc, #112]	; (8011880 <TIM_OC2_SetConfig+0x108>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d007      	beq.n	8011824 <TIM_OC2_SetConfig+0xac>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	4a1b      	ldr	r2, [pc, #108]	; (8011884 <TIM_OC2_SetConfig+0x10c>)
 8011818:	4293      	cmp	r3, r2
 801181a:	d003      	beq.n	8011824 <TIM_OC2_SetConfig+0xac>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a1a      	ldr	r2, [pc, #104]	; (8011888 <TIM_OC2_SetConfig+0x110>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d113      	bne.n	801184c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801182a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801182c:	693b      	ldr	r3, [r7, #16]
 801182e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	695b      	ldr	r3, [r3, #20]
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	693a      	ldr	r2, [r7, #16]
 801183c:	4313      	orrs	r3, r2
 801183e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	699b      	ldr	r3, [r3, #24]
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	693a      	ldr	r2, [r7, #16]
 8011848:	4313      	orrs	r3, r2
 801184a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	693a      	ldr	r2, [r7, #16]
 8011850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	697a      	ldr	r2, [r7, #20]
 8011864:	621a      	str	r2, [r3, #32]
}
 8011866:	bf00      	nop
 8011868:	371c      	adds	r7, #28
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	feff8fff 	.word	0xfeff8fff
 8011878:	40010000 	.word	0x40010000
 801187c:	40010400 	.word	0x40010400
 8011880:	40014000 	.word	0x40014000
 8011884:	40014400 	.word	0x40014400
 8011888:	40014800 	.word	0x40014800

0801188c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801188c:	b480      	push	{r7}
 801188e:	b087      	sub	sp, #28
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a1b      	ldr	r3, [r3, #32]
 80118a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	69db      	ldr	r3, [r3, #28]
 80118b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	4b33      	ldr	r3, [pc, #204]	; (8011984 <TIM_OC3_SetConfig+0xf8>)
 80118b8:	4013      	ands	r3, r2
 80118ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f023 0303 	bic.w	r3, r3, #3
 80118c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	68fa      	ldr	r2, [r7, #12]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80118d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	689b      	ldr	r3, [r3, #8]
 80118da:	021b      	lsls	r3, r3, #8
 80118dc:	697a      	ldr	r2, [r7, #20]
 80118de:	4313      	orrs	r3, r2
 80118e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4a28      	ldr	r2, [pc, #160]	; (8011988 <TIM_OC3_SetConfig+0xfc>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d003      	beq.n	80118f2 <TIM_OC3_SetConfig+0x66>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4a27      	ldr	r2, [pc, #156]	; (801198c <TIM_OC3_SetConfig+0x100>)
 80118ee:	4293      	cmp	r3, r2
 80118f0:	d10d      	bne.n	801190e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	021b      	lsls	r3, r3, #8
 8011900:	697a      	ldr	r2, [r7, #20]
 8011902:	4313      	orrs	r3, r2
 8011904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801190c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4a1d      	ldr	r2, [pc, #116]	; (8011988 <TIM_OC3_SetConfig+0xfc>)
 8011912:	4293      	cmp	r3, r2
 8011914:	d00f      	beq.n	8011936 <TIM_OC3_SetConfig+0xaa>
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	4a1c      	ldr	r2, [pc, #112]	; (801198c <TIM_OC3_SetConfig+0x100>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d00b      	beq.n	8011936 <TIM_OC3_SetConfig+0xaa>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	4a1b      	ldr	r2, [pc, #108]	; (8011990 <TIM_OC3_SetConfig+0x104>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d007      	beq.n	8011936 <TIM_OC3_SetConfig+0xaa>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	4a1a      	ldr	r2, [pc, #104]	; (8011994 <TIM_OC3_SetConfig+0x108>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d003      	beq.n	8011936 <TIM_OC3_SetConfig+0xaa>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4a19      	ldr	r2, [pc, #100]	; (8011998 <TIM_OC3_SetConfig+0x10c>)
 8011932:	4293      	cmp	r3, r2
 8011934:	d113      	bne.n	801195e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801193c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	695b      	ldr	r3, [r3, #20]
 801194a:	011b      	lsls	r3, r3, #4
 801194c:	693a      	ldr	r2, [r7, #16]
 801194e:	4313      	orrs	r3, r2
 8011950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	699b      	ldr	r3, [r3, #24]
 8011956:	011b      	lsls	r3, r3, #4
 8011958:	693a      	ldr	r2, [r7, #16]
 801195a:	4313      	orrs	r3, r2
 801195c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	693a      	ldr	r2, [r7, #16]
 8011962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	685a      	ldr	r2, [r3, #4]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	621a      	str	r2, [r3, #32]
}
 8011978:	bf00      	nop
 801197a:	371c      	adds	r7, #28
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr
 8011984:	fffeff8f 	.word	0xfffeff8f
 8011988:	40010000 	.word	0x40010000
 801198c:	40010400 	.word	0x40010400
 8011990:	40014000 	.word	0x40014000
 8011994:	40014400 	.word	0x40014400
 8011998:	40014800 	.word	0x40014800

0801199c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801199c:	b480      	push	{r7}
 801199e:	b087      	sub	sp, #28
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6a1b      	ldr	r3, [r3, #32]
 80119aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a1b      	ldr	r3, [r3, #32]
 80119b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	69db      	ldr	r3, [r3, #28]
 80119c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	4b24      	ldr	r3, [pc, #144]	; (8011a58 <TIM_OC4_SetConfig+0xbc>)
 80119c8:	4013      	ands	r3, r2
 80119ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80119d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119d4:	683b      	ldr	r3, [r7, #0]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	021b      	lsls	r3, r3, #8
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	4313      	orrs	r3, r2
 80119de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80119e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	689b      	ldr	r3, [r3, #8]
 80119ec:	031b      	lsls	r3, r3, #12
 80119ee:	693a      	ldr	r2, [r7, #16]
 80119f0:	4313      	orrs	r3, r2
 80119f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4a19      	ldr	r2, [pc, #100]	; (8011a5c <TIM_OC4_SetConfig+0xc0>)
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d00f      	beq.n	8011a1c <TIM_OC4_SetConfig+0x80>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4a18      	ldr	r2, [pc, #96]	; (8011a60 <TIM_OC4_SetConfig+0xc4>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d00b      	beq.n	8011a1c <TIM_OC4_SetConfig+0x80>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4a17      	ldr	r2, [pc, #92]	; (8011a64 <TIM_OC4_SetConfig+0xc8>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d007      	beq.n	8011a1c <TIM_OC4_SetConfig+0x80>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4a16      	ldr	r2, [pc, #88]	; (8011a68 <TIM_OC4_SetConfig+0xcc>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d003      	beq.n	8011a1c <TIM_OC4_SetConfig+0x80>
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	4a15      	ldr	r2, [pc, #84]	; (8011a6c <TIM_OC4_SetConfig+0xd0>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d109      	bne.n	8011a30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	695b      	ldr	r3, [r3, #20]
 8011a28:	019b      	lsls	r3, r3, #6
 8011a2a:	697a      	ldr	r2, [r7, #20]
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	697a      	ldr	r2, [r7, #20]
 8011a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	685a      	ldr	r2, [r3, #4]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	693a      	ldr	r2, [r7, #16]
 8011a48:	621a      	str	r2, [r3, #32]
}
 8011a4a:	bf00      	nop
 8011a4c:	371c      	adds	r7, #28
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	feff8fff 	.word	0xfeff8fff
 8011a5c:	40010000 	.word	0x40010000
 8011a60:	40010400 	.word	0x40010400
 8011a64:	40014000 	.word	0x40014000
 8011a68:	40014400 	.word	0x40014400
 8011a6c:	40014800 	.word	0x40014800

08011a70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b087      	sub	sp, #28
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a1b      	ldr	r3, [r3, #32]
 8011a7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a1b      	ldr	r3, [r3, #32]
 8011a84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011a98:	68fa      	ldr	r2, [r7, #12]
 8011a9a:	4b21      	ldr	r3, [pc, #132]	; (8011b20 <TIM_OC5_SetConfig+0xb0>)
 8011a9c:	4013      	ands	r3, r2
 8011a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	4313      	orrs	r3, r2
 8011aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	689b      	ldr	r3, [r3, #8]
 8011ab6:	041b      	lsls	r3, r3, #16
 8011ab8:	693a      	ldr	r2, [r7, #16]
 8011aba:	4313      	orrs	r3, r2
 8011abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	4a18      	ldr	r2, [pc, #96]	; (8011b24 <TIM_OC5_SetConfig+0xb4>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d00f      	beq.n	8011ae6 <TIM_OC5_SetConfig+0x76>
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4a17      	ldr	r2, [pc, #92]	; (8011b28 <TIM_OC5_SetConfig+0xb8>)
 8011aca:	4293      	cmp	r3, r2
 8011acc:	d00b      	beq.n	8011ae6 <TIM_OC5_SetConfig+0x76>
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	4a16      	ldr	r2, [pc, #88]	; (8011b2c <TIM_OC5_SetConfig+0xbc>)
 8011ad2:	4293      	cmp	r3, r2
 8011ad4:	d007      	beq.n	8011ae6 <TIM_OC5_SetConfig+0x76>
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	4a15      	ldr	r2, [pc, #84]	; (8011b30 <TIM_OC5_SetConfig+0xc0>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d003      	beq.n	8011ae6 <TIM_OC5_SetConfig+0x76>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	4a14      	ldr	r2, [pc, #80]	; (8011b34 <TIM_OC5_SetConfig+0xc4>)
 8011ae2:	4293      	cmp	r3, r2
 8011ae4:	d109      	bne.n	8011afa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	695b      	ldr	r3, [r3, #20]
 8011af2:	021b      	lsls	r3, r3, #8
 8011af4:	697a      	ldr	r2, [r7, #20]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	697a      	ldr	r2, [r7, #20]
 8011afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	68fa      	ldr	r2, [r7, #12]
 8011b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	693a      	ldr	r2, [r7, #16]
 8011b12:	621a      	str	r2, [r3, #32]
}
 8011b14:	bf00      	nop
 8011b16:	371c      	adds	r7, #28
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	fffeff8f 	.word	0xfffeff8f
 8011b24:	40010000 	.word	0x40010000
 8011b28:	40010400 	.word	0x40010400
 8011b2c:	40014000 	.word	0x40014000
 8011b30:	40014400 	.word	0x40014400
 8011b34:	40014800 	.word	0x40014800

08011b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b087      	sub	sp, #28
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	6a1b      	ldr	r3, [r3, #32]
 8011b46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a1b      	ldr	r3, [r3, #32]
 8011b4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	4b22      	ldr	r3, [pc, #136]	; (8011bec <TIM_OC6_SetConfig+0xb4>)
 8011b64:	4013      	ands	r3, r2
 8011b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	021b      	lsls	r3, r3, #8
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	051b      	lsls	r3, r3, #20
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	4313      	orrs	r3, r2
 8011b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	4a19      	ldr	r2, [pc, #100]	; (8011bf0 <TIM_OC6_SetConfig+0xb8>)
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d00f      	beq.n	8011bb0 <TIM_OC6_SetConfig+0x78>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	4a18      	ldr	r2, [pc, #96]	; (8011bf4 <TIM_OC6_SetConfig+0xbc>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d00b      	beq.n	8011bb0 <TIM_OC6_SetConfig+0x78>
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	4a17      	ldr	r2, [pc, #92]	; (8011bf8 <TIM_OC6_SetConfig+0xc0>)
 8011b9c:	4293      	cmp	r3, r2
 8011b9e:	d007      	beq.n	8011bb0 <TIM_OC6_SetConfig+0x78>
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	4a16      	ldr	r2, [pc, #88]	; (8011bfc <TIM_OC6_SetConfig+0xc4>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d003      	beq.n	8011bb0 <TIM_OC6_SetConfig+0x78>
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	4a15      	ldr	r2, [pc, #84]	; (8011c00 <TIM_OC6_SetConfig+0xc8>)
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d109      	bne.n	8011bc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	695b      	ldr	r3, [r3, #20]
 8011bbc:	029b      	lsls	r3, r3, #10
 8011bbe:	697a      	ldr	r2, [r7, #20]
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	697a      	ldr	r2, [r7, #20]
 8011bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	693a      	ldr	r2, [r7, #16]
 8011bdc:	621a      	str	r2, [r3, #32]
}
 8011bde:	bf00      	nop
 8011be0:	371c      	adds	r7, #28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	feff8fff 	.word	0xfeff8fff
 8011bf0:	40010000 	.word	0x40010000
 8011bf4:	40010400 	.word	0x40010400
 8011bf8:	40014000 	.word	0x40014000
 8011bfc:	40014400 	.word	0x40014400
 8011c00:	40014800 	.word	0x40014800

08011c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c04:	b480      	push	{r7}
 8011c06:	b087      	sub	sp, #28
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	6a1b      	ldr	r3, [r3, #32]
 8011c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	6a1b      	ldr	r3, [r3, #32]
 8011c1a:	f023 0201 	bic.w	r2, r3, #1
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	699b      	ldr	r3, [r3, #24]
 8011c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	011b      	lsls	r3, r3, #4
 8011c34:	693a      	ldr	r2, [r7, #16]
 8011c36:	4313      	orrs	r3, r2
 8011c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	f023 030a 	bic.w	r3, r3, #10
 8011c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011c42:	697a      	ldr	r2, [r7, #20]
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	4313      	orrs	r3, r2
 8011c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	693a      	ldr	r2, [r7, #16]
 8011c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	697a      	ldr	r2, [r7, #20]
 8011c54:	621a      	str	r2, [r3, #32]
}
 8011c56:	bf00      	nop
 8011c58:	371c      	adds	r7, #28
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c60:	4770      	bx	lr

08011c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011c62:	b480      	push	{r7}
 8011c64:	b087      	sub	sp, #28
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	60f8      	str	r0, [r7, #12]
 8011c6a:	60b9      	str	r1, [r7, #8]
 8011c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6a1b      	ldr	r3, [r3, #32]
 8011c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	6a1b      	ldr	r3, [r3, #32]
 8011c78:	f023 0210 	bic.w	r2, r3, #16
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	031b      	lsls	r3, r3, #12
 8011c92:	693a      	ldr	r2, [r7, #16]
 8011c94:	4313      	orrs	r3, r2
 8011c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	011b      	lsls	r3, r3, #4
 8011ca4:	697a      	ldr	r2, [r7, #20]
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	693a      	ldr	r2, [r7, #16]
 8011cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	621a      	str	r2, [r3, #32]
}
 8011cb6:	bf00      	nop
 8011cb8:	371c      	adds	r7, #28
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr
	...

08011cc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b085      	sub	sp, #20
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <TIM_ITRx_SetConfig+0x38>)
 8011cd8:	4013      	ands	r3, r2
 8011cda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	f043 0307 	orr.w	r3, r3, #7
 8011ce6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	68fa      	ldr	r2, [r7, #12]
 8011cec:	609a      	str	r2, [r3, #8]
}
 8011cee:	bf00      	nop
 8011cf0:	3714      	adds	r7, #20
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf8:	4770      	bx	lr
 8011cfa:	bf00      	nop
 8011cfc:	ffcfff8f 	.word	0xffcfff8f

08011d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011d00:	b480      	push	{r7}
 8011d02:	b087      	sub	sp, #28
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	60f8      	str	r0, [r7, #12]
 8011d08:	60b9      	str	r1, [r7, #8]
 8011d0a:	607a      	str	r2, [r7, #4]
 8011d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	021a      	lsls	r2, r3, #8
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	431a      	orrs	r2, r3
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	4313      	orrs	r3, r2
 8011d28:	697a      	ldr	r2, [r7, #20]
 8011d2a:	4313      	orrs	r3, r2
 8011d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	609a      	str	r2, [r3, #8]
}
 8011d34:	bf00      	nop
 8011d36:	371c      	adds	r7, #28
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr

08011d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b087      	sub	sp, #28
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	60b9      	str	r1, [r7, #8]
 8011d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	f003 031f 	and.w	r3, r3, #31
 8011d52:	2201      	movs	r2, #1
 8011d54:	fa02 f303 	lsl.w	r3, r2, r3
 8011d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	6a1a      	ldr	r2, [r3, #32]
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	43db      	mvns	r3, r3
 8011d62:	401a      	ands	r2, r3
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	6a1a      	ldr	r2, [r3, #32]
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	f003 031f 	and.w	r3, r3, #31
 8011d72:	6879      	ldr	r1, [r7, #4]
 8011d74:	fa01 f303 	lsl.w	r3, r1, r3
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	621a      	str	r2, [r3, #32]
}
 8011d7e:	bf00      	nop
 8011d80:	371c      	adds	r7, #28
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr
	...

08011d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d8c:	b480      	push	{r7}
 8011d8e:	b085      	sub	sp, #20
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
 8011d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d101      	bne.n	8011da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011da0:	2302      	movs	r3, #2
 8011da2:	e06d      	b.n	8011e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2201      	movs	r2, #1
 8011da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2202      	movs	r2, #2
 8011db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	4a30      	ldr	r2, [pc, #192]	; (8011e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011dca:	4293      	cmp	r3, r2
 8011dcc:	d004      	beq.n	8011dd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	4a2f      	ldr	r2, [pc, #188]	; (8011e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d108      	bne.n	8011dea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011dde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	4313      	orrs	r3, r2
 8011de8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011df0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	68fa      	ldr	r2, [r7, #12]
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	68fa      	ldr	r2, [r7, #12]
 8011e02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4a20      	ldr	r2, [pc, #128]	; (8011e8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d022      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e16:	d01d      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4a1d      	ldr	r2, [pc, #116]	; (8011e94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8011e1e:	4293      	cmp	r3, r2
 8011e20:	d018      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	4a1c      	ldr	r2, [pc, #112]	; (8011e98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011e28:	4293      	cmp	r3, r2
 8011e2a:	d013      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	4a1a      	ldr	r2, [pc, #104]	; (8011e9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011e32:	4293      	cmp	r3, r2
 8011e34:	d00e      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4a15      	ldr	r2, [pc, #84]	; (8011e90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d009      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	4a16      	ldr	r2, [pc, #88]	; (8011ea0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d004      	beq.n	8011e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4a15      	ldr	r2, [pc, #84]	; (8011ea4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011e50:	4293      	cmp	r3, r2
 8011e52:	d10c      	bne.n	8011e6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	689b      	ldr	r3, [r3, #8]
 8011e60:	68ba      	ldr	r2, [r7, #8]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	68ba      	ldr	r2, [r7, #8]
 8011e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2201      	movs	r2, #1
 8011e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011e7e:	2300      	movs	r3, #0
}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3714      	adds	r7, #20
 8011e84:	46bd      	mov	sp, r7
 8011e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8a:	4770      	bx	lr
 8011e8c:	40010000 	.word	0x40010000
 8011e90:	40010400 	.word	0x40010400
 8011e94:	40000400 	.word	0x40000400
 8011e98:	40000800 	.word	0x40000800
 8011e9c:	40000c00 	.word	0x40000c00
 8011ea0:	40001800 	.word	0x40001800
 8011ea4:	40014000 	.word	0x40014000

08011ea8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b085      	sub	sp, #20
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d101      	bne.n	8011ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011ec0:	2302      	movs	r3, #2
 8011ec2:	e065      	b.n	8011f90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	4313      	orrs	r3, r2
 8011ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	689b      	ldr	r3, [r3, #8]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	4313      	orrs	r3, r2
 8011ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4313      	orrs	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	691b      	ldr	r3, [r3, #16]
 8011f0e:	4313      	orrs	r3, r2
 8011f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	695b      	ldr	r3, [r3, #20]
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	699b      	ldr	r3, [r3, #24]
 8011f38:	041b      	lsls	r3, r3, #16
 8011f3a:	4313      	orrs	r3, r2
 8011f3c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a16      	ldr	r2, [pc, #88]	; (8011f9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	d004      	beq.n	8011f52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4a14      	ldr	r2, [pc, #80]	; (8011fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d115      	bne.n	8011f7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f5c:	051b      	lsls	r3, r3, #20
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	69db      	ldr	r3, [r3, #28]
 8011f6c:	4313      	orrs	r3, r2
 8011f6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	6a1b      	ldr	r3, [r3, #32]
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	68fa      	ldr	r2, [r7, #12]
 8011f84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f8e:	2300      	movs	r3, #0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	3714      	adds	r7, #20
 8011f94:	46bd      	mov	sp, r7
 8011f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9a:	4770      	bx	lr
 8011f9c:	40010000 	.word	0x40010000
 8011fa0:	40010400 	.word	0x40010400

08011fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011fac:	bf00      	nop
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b083      	sub	sp, #12
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011fc0:	bf00      	nop
 8011fc2:	370c      	adds	r7, #12
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011fd4:	bf00      	nop
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d101      	bne.n	8011ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e042      	b.n	8012078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d106      	bne.n	801200a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7f1 fd43 	bl	8003a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2224      	movs	r2, #36	; 0x24
 801200e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f022 0201 	bic.w	r2, r2, #1
 8012020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012026:	2b00      	cmp	r3, #0
 8012028:	d002      	beq.n	8012030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f001 fbc2 	bl	80137b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 fe57 	bl	8012ce4 <UART_SetConfig>
 8012036:	4603      	mov	r3, r0
 8012038:	2b01      	cmp	r3, #1
 801203a:	d101      	bne.n	8012040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801203c:	2301      	movs	r3, #1
 801203e:	e01b      	b.n	8012078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	685a      	ldr	r2, [r3, #4]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801204e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	689a      	ldr	r2, [r3, #8]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801205e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f042 0201 	orr.w	r2, r2, #1
 801206e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f001 fc41 	bl	80138f8 <UART_CheckIdleState>
 8012076:	4603      	mov	r3, r0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}

08012080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b08a      	sub	sp, #40	; 0x28
 8012084:	af02      	add	r7, sp, #8
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	603b      	str	r3, [r7, #0]
 801208c:	4613      	mov	r3, r2
 801208e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012096:	2b20      	cmp	r3, #32
 8012098:	d17b      	bne.n	8012192 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d002      	beq.n	80120a6 <HAL_UART_Transmit+0x26>
 80120a0:	88fb      	ldrh	r3, [r7, #6]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d101      	bne.n	80120aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80120a6:	2301      	movs	r3, #1
 80120a8:	e074      	b.n	8012194 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2221      	movs	r2, #33	; 0x21
 80120b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80120ba:	f7f2 f867 	bl	800418c <HAL_GetTick>
 80120be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	88fa      	ldrh	r2, [r7, #6]
 80120c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	88fa      	ldrh	r2, [r7, #6]
 80120cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120d8:	d108      	bne.n	80120ec <HAL_UART_Transmit+0x6c>
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d104      	bne.n	80120ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80120e2:	2300      	movs	r3, #0
 80120e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	61bb      	str	r3, [r7, #24]
 80120ea:	e003      	b.n	80120f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120f0:	2300      	movs	r3, #0
 80120f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80120f4:	e030      	b.n	8012158 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	2200      	movs	r2, #0
 80120fe:	2180      	movs	r1, #128	; 0x80
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	f001 fca3 	bl	8013a4c <UART_WaitOnFlagUntilTimeout>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d005      	beq.n	8012118 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	2220      	movs	r2, #32
 8012110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012114:	2303      	movs	r3, #3
 8012116:	e03d      	b.n	8012194 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10b      	bne.n	8012136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	881b      	ldrh	r3, [r3, #0]
 8012122:	461a      	mov	r2, r3
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801212c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	3302      	adds	r3, #2
 8012132:	61bb      	str	r3, [r7, #24]
 8012134:	e007      	b.n	8012146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	781a      	ldrb	r2, [r3, #0]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	3301      	adds	r3, #1
 8012144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801214c:	b29b      	uxth	r3, r3
 801214e:	3b01      	subs	r3, #1
 8012150:	b29a      	uxth	r2, r3
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801215e:	b29b      	uxth	r3, r3
 8012160:	2b00      	cmp	r3, #0
 8012162:	d1c8      	bne.n	80120f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	697b      	ldr	r3, [r7, #20]
 801216a:	2200      	movs	r2, #0
 801216c:	2140      	movs	r1, #64	; 0x40
 801216e:	68f8      	ldr	r0, [r7, #12]
 8012170:	f001 fc6c 	bl	8013a4c <UART_WaitOnFlagUntilTimeout>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	d005      	beq.n	8012186 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2220      	movs	r2, #32
 801217e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012182:	2303      	movs	r3, #3
 8012184:	e006      	b.n	8012194 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2220      	movs	r2, #32
 801218a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801218e:	2300      	movs	r3, #0
 8012190:	e000      	b.n	8012194 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012192:	2302      	movs	r3, #2
  }
}
 8012194:	4618      	mov	r0, r3
 8012196:	3720      	adds	r7, #32
 8012198:	46bd      	mov	sp, r7
 801219a:	bd80      	pop	{r7, pc}

0801219c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08a      	sub	sp, #40	; 0x28
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	603b      	str	r3, [r7, #0]
 80121a8:	4613      	mov	r3, r2
 80121aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121b2:	2b20      	cmp	r3, #32
 80121b4:	f040 80b5 	bne.w	8012322 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <HAL_UART_Receive+0x28>
 80121be:	88fb      	ldrh	r3, [r7, #6]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80121c4:	2301      	movs	r3, #1
 80121c6:	e0ad      	b.n	8012324 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2200      	movs	r2, #0
 80121cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2222      	movs	r2, #34	; 0x22
 80121d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2200      	movs	r2, #0
 80121dc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80121de:	f7f1 ffd5 	bl	800418c <HAL_GetTick>
 80121e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	88fa      	ldrh	r2, [r7, #6]
 80121e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	88fa      	ldrh	r2, [r7, #6]
 80121f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121fc:	d10e      	bne.n	801221c <HAL_UART_Receive+0x80>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	691b      	ldr	r3, [r3, #16]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d105      	bne.n	8012212 <HAL_UART_Receive+0x76>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f240 12ff 	movw	r2, #511	; 0x1ff
 801220c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012210:	e02d      	b.n	801226e <HAL_UART_Receive+0xd2>
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	22ff      	movs	r2, #255	; 0xff
 8012216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801221a:	e028      	b.n	801226e <HAL_UART_Receive+0xd2>
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	689b      	ldr	r3, [r3, #8]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10d      	bne.n	8012240 <HAL_UART_Receive+0xa4>
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	691b      	ldr	r3, [r3, #16]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d104      	bne.n	8012236 <HAL_UART_Receive+0x9a>
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	22ff      	movs	r2, #255	; 0xff
 8012230:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012234:	e01b      	b.n	801226e <HAL_UART_Receive+0xd2>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	227f      	movs	r2, #127	; 0x7f
 801223a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801223e:	e016      	b.n	801226e <HAL_UART_Receive+0xd2>
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012248:	d10d      	bne.n	8012266 <HAL_UART_Receive+0xca>
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	691b      	ldr	r3, [r3, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d104      	bne.n	801225c <HAL_UART_Receive+0xc0>
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	227f      	movs	r2, #127	; 0x7f
 8012256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801225a:	e008      	b.n	801226e <HAL_UART_Receive+0xd2>
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	223f      	movs	r2, #63	; 0x3f
 8012260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012264:	e003      	b.n	801226e <HAL_UART_Receive+0xd2>
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2200      	movs	r2, #0
 801226a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012274:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801227e:	d108      	bne.n	8012292 <HAL_UART_Receive+0xf6>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	691b      	ldr	r3, [r3, #16]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d104      	bne.n	8012292 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8012288:	2300      	movs	r3, #0
 801228a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	61bb      	str	r3, [r7, #24]
 8012290:	e003      	b.n	801229a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012296:	2300      	movs	r3, #0
 8012298:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801229a:	e036      	b.n	801230a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	2200      	movs	r2, #0
 80122a4:	2120      	movs	r1, #32
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f001 fbd0 	bl	8013a4c <UART_WaitOnFlagUntilTimeout>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d005      	beq.n	80122be <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2220      	movs	r2, #32
 80122b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80122ba:	2303      	movs	r3, #3
 80122bc:	e032      	b.n	8012324 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80122be:	69fb      	ldr	r3, [r7, #28]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d10c      	bne.n	80122de <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	8a7b      	ldrh	r3, [r7, #18]
 80122ce:	4013      	ands	r3, r2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	3302      	adds	r3, #2
 80122da:	61bb      	str	r3, [r7, #24]
 80122dc:	e00c      	b.n	80122f8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122e4:	b2da      	uxtb	r2, r3
 80122e6:	8a7b      	ldrh	r3, [r7, #18]
 80122e8:	b2db      	uxtb	r3, r3
 80122ea:	4013      	ands	r3, r2
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	3301      	adds	r3, #1
 80122f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122fe:	b29b      	uxth	r3, r3
 8012300:	3b01      	subs	r3, #1
 8012302:	b29a      	uxth	r2, r3
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012310:	b29b      	uxth	r3, r3
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1c2      	bne.n	801229c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	2220      	movs	r2, #32
 801231a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 801231e:	2300      	movs	r3, #0
 8012320:	e000      	b.n	8012324 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8012322:	2302      	movs	r3, #2
  }
}
 8012324:	4618      	mov	r0, r3
 8012326:	3720      	adds	r7, #32
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b08a      	sub	sp, #40	; 0x28
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	4613      	mov	r3, r2
 8012338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012340:	2b20      	cmp	r3, #32
 8012342:	d137      	bne.n	80123b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d002      	beq.n	8012350 <HAL_UART_Receive_IT+0x24>
 801234a:	88fb      	ldrh	r3, [r7, #6]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d101      	bne.n	8012354 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012350:	2301      	movs	r3, #1
 8012352:	e030      	b.n	80123b6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2200      	movs	r2, #0
 8012358:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a18      	ldr	r2, [pc, #96]	; (80123c0 <HAL_UART_Receive_IT+0x94>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d01f      	beq.n	80123a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801236e:	2b00      	cmp	r3, #0
 8012370:	d018      	beq.n	80123a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	e853 3f00 	ldrex	r3, [r3]
 801237e:	613b      	str	r3, [r7, #16]
   return(result);
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012386:	627b      	str	r3, [r7, #36]	; 0x24
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	461a      	mov	r2, r3
 801238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012390:	623b      	str	r3, [r7, #32]
 8012392:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012394:	69f9      	ldr	r1, [r7, #28]
 8012396:	6a3a      	ldr	r2, [r7, #32]
 8012398:	e841 2300 	strex	r3, r2, [r1]
 801239c:	61bb      	str	r3, [r7, #24]
   return(result);
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1e6      	bne.n	8012372 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80123a4:	88fb      	ldrh	r3, [r7, #6]
 80123a6:	461a      	mov	r2, r3
 80123a8:	68b9      	ldr	r1, [r7, #8]
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f001 fbbc 	bl	8013b28 <UART_Start_Receive_IT>
 80123b0:	4603      	mov	r3, r0
 80123b2:	e000      	b.n	80123b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80123b4:	2302      	movs	r3, #2
  }
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3728      	adds	r7, #40	; 0x28
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	58000c00 	.word	0x58000c00

080123c4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b09a      	sub	sp, #104	; 0x68
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123d4:	e853 3f00 	ldrex	r3, [r3]
 80123d8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80123da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123e0:	667b      	str	r3, [r7, #100]	; 0x64
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	461a      	mov	r2, r3
 80123e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80123ea:	657b      	str	r3, [r7, #84]	; 0x54
 80123ec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80123f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123f2:	e841 2300 	strex	r3, r2, [r1]
 80123f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80123f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d1e6      	bne.n	80123cc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3308      	adds	r3, #8
 8012404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012408:	e853 3f00 	ldrex	r3, [r3]
 801240c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801240e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012410:	4b46      	ldr	r3, [pc, #280]	; (801252c <HAL_UART_AbortReceive+0x168>)
 8012412:	4013      	ands	r3, r2
 8012414:	663b      	str	r3, [r7, #96]	; 0x60
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	3308      	adds	r3, #8
 801241c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801241e:	643a      	str	r2, [r7, #64]	; 0x40
 8012420:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012426:	e841 2300 	strex	r3, r2, [r1]
 801242a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1e5      	bne.n	80123fe <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012436:	2b01      	cmp	r3, #1
 8012438:	d118      	bne.n	801246c <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012440:	6a3b      	ldr	r3, [r7, #32]
 8012442:	e853 3f00 	ldrex	r3, [r3]
 8012446:	61fb      	str	r3, [r7, #28]
   return(result);
 8012448:	69fb      	ldr	r3, [r7, #28]
 801244a:	f023 0310 	bic.w	r3, r3, #16
 801244e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	461a      	mov	r2, r3
 8012456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801245a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801245c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801245e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012460:	e841 2300 	strex	r3, r2, [r1]
 8012464:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012468:	2b00      	cmp	r3, #0
 801246a:	d1e6      	bne.n	801243a <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	689b      	ldr	r3, [r3, #8]
 8012472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012476:	2b40      	cmp	r3, #64	; 0x40
 8012478:	d13b      	bne.n	80124f2 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3308      	adds	r3, #8
 8012480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	e853 3f00 	ldrex	r3, [r3]
 8012488:	60bb      	str	r3, [r7, #8]
   return(result);
 801248a:	68bb      	ldr	r3, [r7, #8]
 801248c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012490:	65bb      	str	r3, [r7, #88]	; 0x58
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3308      	adds	r3, #8
 8012498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801249a:	61ba      	str	r2, [r7, #24]
 801249c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801249e:	6979      	ldr	r1, [r7, #20]
 80124a0:	69ba      	ldr	r2, [r7, #24]
 80124a2:	e841 2300 	strex	r3, r2, [r1]
 80124a6:	613b      	str	r3, [r7, #16]
   return(result);
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1e5      	bne.n	801247a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d01c      	beq.n	80124f2 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124be:	2200      	movs	r2, #0
 80124c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7f4 fd4d 	bl	8006f68 <HAL_DMA_Abort>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00e      	beq.n	80124f2 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f6 f9e0 	bl	80088a0 <HAL_DMA_GetError>
 80124e0:	4603      	mov	r3, r0
 80124e2:	2b20      	cmp	r3, #32
 80124e4:	d105      	bne.n	80124f2 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2210      	movs	r2, #16
 80124ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80124ee:	2303      	movs	r3, #3
 80124f0:	e017      	b.n	8012522 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	220f      	movs	r2, #15
 8012500:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	699a      	ldr	r2, [r3, #24]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f042 0208 	orr.w	r2, r2, #8
 8012510:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2220      	movs	r2, #32
 8012516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	2200      	movs	r2, #0
 801251e:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8012520:	2300      	movs	r3, #0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3768      	adds	r7, #104	; 0x68
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	effffffe 	.word	0xeffffffe

08012530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b0ba      	sub	sp, #232	; 0xe8
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	69db      	ldr	r3, [r3, #28]
 801253e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801255a:	f640 030f 	movw	r3, #2063	; 0x80f
 801255e:	4013      	ands	r3, r2
 8012560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012568:	2b00      	cmp	r3, #0
 801256a:	d11b      	bne.n	80125a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801256c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012570:	f003 0320 	and.w	r3, r3, #32
 8012574:	2b00      	cmp	r3, #0
 8012576:	d015      	beq.n	80125a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801257c:	f003 0320 	and.w	r3, r3, #32
 8012580:	2b00      	cmp	r3, #0
 8012582:	d105      	bne.n	8012590 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801258c:	2b00      	cmp	r3, #0
 801258e:	d009      	beq.n	80125a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 8377 	beq.w	8012c88 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801259e:	6878      	ldr	r0, [r7, #4]
 80125a0:	4798      	blx	r3
      }
      return;
 80125a2:	e371      	b.n	8012c88 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80125a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 8123 	beq.w	80127f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80125ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80125b2:	4b8d      	ldr	r3, [pc, #564]	; (80127e8 <HAL_UART_IRQHandler+0x2b8>)
 80125b4:	4013      	ands	r3, r2
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80125ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80125be:	4b8b      	ldr	r3, [pc, #556]	; (80127ec <HAL_UART_IRQHandler+0x2bc>)
 80125c0:	4013      	ands	r3, r2
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	f000 8116 	beq.w	80127f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80125c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125cc:	f003 0301 	and.w	r3, r3, #1
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d011      	beq.n	80125f8 <HAL_UART_IRQHandler+0xc8>
 80125d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d00b      	beq.n	80125f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2201      	movs	r2, #1
 80125e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125ee:	f043 0201 	orr.w	r2, r3, #1
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125fc:	f003 0302 	and.w	r3, r3, #2
 8012600:	2b00      	cmp	r3, #0
 8012602:	d011      	beq.n	8012628 <HAL_UART_IRQHandler+0xf8>
 8012604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00b      	beq.n	8012628 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2202      	movs	r2, #2
 8012616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801261e:	f043 0204 	orr.w	r2, r3, #4
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801262c:	f003 0304 	and.w	r3, r3, #4
 8012630:	2b00      	cmp	r3, #0
 8012632:	d011      	beq.n	8012658 <HAL_UART_IRQHandler+0x128>
 8012634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012638:	f003 0301 	and.w	r3, r3, #1
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00b      	beq.n	8012658 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2204      	movs	r2, #4
 8012646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801264e:	f043 0202 	orr.w	r2, r3, #2
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801265c:	f003 0308 	and.w	r3, r3, #8
 8012660:	2b00      	cmp	r3, #0
 8012662:	d017      	beq.n	8012694 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012668:	f003 0320 	and.w	r3, r3, #32
 801266c:	2b00      	cmp	r3, #0
 801266e:	d105      	bne.n	801267c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012670:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012674:	4b5c      	ldr	r3, [pc, #368]	; (80127e8 <HAL_UART_IRQHandler+0x2b8>)
 8012676:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012678:	2b00      	cmp	r3, #0
 801267a:	d00b      	beq.n	8012694 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2208      	movs	r2, #8
 8012682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801268a:	f043 0208 	orr.w	r2, r3, #8
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801269c:	2b00      	cmp	r3, #0
 801269e:	d012      	beq.n	80126c6 <HAL_UART_IRQHandler+0x196>
 80126a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d00c      	beq.n	80126c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80126b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126bc:	f043 0220 	orr.w	r2, r3, #32
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 82dd 	beq.w	8012c8c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80126d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126d6:	f003 0320 	and.w	r3, r3, #32
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d013      	beq.n	8012706 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126e2:	f003 0320 	and.w	r3, r3, #32
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d105      	bne.n	80126f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d007      	beq.n	8012706 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d003      	beq.n	8012706 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801270c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	689b      	ldr	r3, [r3, #8]
 8012716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801271a:	2b40      	cmp	r3, #64	; 0x40
 801271c:	d005      	beq.n	801272a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801271e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012722:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012726:	2b00      	cmp	r3, #0
 8012728:	d054      	beq.n	80127d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f001 fb1e 	bl	8013d6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801273a:	2b40      	cmp	r3, #64	; 0x40
 801273c:	d146      	bne.n	80127cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	3308      	adds	r3, #8
 8012744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801274c:	e853 3f00 	ldrex	r3, [r3]
 8012750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801275c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	3308      	adds	r3, #8
 8012766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801276a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801276e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801277a:	e841 2300 	strex	r3, r2, [r1]
 801277e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012786:	2b00      	cmp	r3, #0
 8012788:	d1d9      	bne.n	801273e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012790:	2b00      	cmp	r3, #0
 8012792:	d017      	beq.n	80127c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801279a:	4a15      	ldr	r2, [pc, #84]	; (80127f0 <HAL_UART_IRQHandler+0x2c0>)
 801279c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7f4 fefd 	bl	80075a4 <HAL_DMA_Abort_IT>
 80127aa:	4603      	mov	r3, r0
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d019      	beq.n	80127e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80127be:	4610      	mov	r0, r2
 80127c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127c2:	e00f      	b.n	80127e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f000 fa77 	bl	8012cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127ca:	e00b      	b.n	80127e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f000 fa73 	bl	8012cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127d2:	e007      	b.n	80127e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f000 fa6f 	bl	8012cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2200      	movs	r2, #0
 80127de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80127e2:	e253      	b.n	8012c8c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127e4:	bf00      	nop
    return;
 80127e6:	e251      	b.n	8012c8c <HAL_UART_IRQHandler+0x75c>
 80127e8:	10000001 	.word	0x10000001
 80127ec:	04000120 	.word	0x04000120
 80127f0:	08013e39 	.word	0x08013e39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	f040 81e7 	bne.w	8012bcc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80127fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012802:	f003 0310 	and.w	r3, r3, #16
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 81e0 	beq.w	8012bcc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012810:	f003 0310 	and.w	r3, r3, #16
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 81d9 	beq.w	8012bcc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2210      	movs	r2, #16
 8012820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	689b      	ldr	r3, [r3, #8]
 8012828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801282c:	2b40      	cmp	r3, #64	; 0x40
 801282e:	f040 8151 	bne.w	8012ad4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a96      	ldr	r2, [pc, #600]	; (8012a94 <HAL_UART_IRQHandler+0x564>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d068      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a93      	ldr	r2, [pc, #588]	; (8012a98 <HAL_UART_IRQHandler+0x568>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d061      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a91      	ldr	r2, [pc, #580]	; (8012a9c <HAL_UART_IRQHandler+0x56c>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d05a      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a8e      	ldr	r2, [pc, #568]	; (8012aa0 <HAL_UART_IRQHandler+0x570>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d053      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4a8c      	ldr	r2, [pc, #560]	; (8012aa4 <HAL_UART_IRQHandler+0x574>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d04c      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a89      	ldr	r2, [pc, #548]	; (8012aa8 <HAL_UART_IRQHandler+0x578>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d045      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	4a87      	ldr	r2, [pc, #540]	; (8012aac <HAL_UART_IRQHandler+0x57c>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d03e      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a84      	ldr	r2, [pc, #528]	; (8012ab0 <HAL_UART_IRQHandler+0x580>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d037      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a82      	ldr	r2, [pc, #520]	; (8012ab4 <HAL_UART_IRQHandler+0x584>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d030      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	4a7f      	ldr	r2, [pc, #508]	; (8012ab8 <HAL_UART_IRQHandler+0x588>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	d029      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4a7d      	ldr	r2, [pc, #500]	; (8012abc <HAL_UART_IRQHandler+0x58c>)
 80128c8:	4293      	cmp	r3, r2
 80128ca:	d022      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a7a      	ldr	r2, [pc, #488]	; (8012ac0 <HAL_UART_IRQHandler+0x590>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d01b      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4a78      	ldr	r2, [pc, #480]	; (8012ac4 <HAL_UART_IRQHandler+0x594>)
 80128e4:	4293      	cmp	r3, r2
 80128e6:	d014      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a75      	ldr	r2, [pc, #468]	; (8012ac8 <HAL_UART_IRQHandler+0x598>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d00d      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4a73      	ldr	r2, [pc, #460]	; (8012acc <HAL_UART_IRQHandler+0x59c>)
 8012900:	4293      	cmp	r3, r2
 8012902:	d006      	beq.n	8012912 <HAL_UART_IRQHandler+0x3e2>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	4a70      	ldr	r2, [pc, #448]	; (8012ad0 <HAL_UART_IRQHandler+0x5a0>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d106      	bne.n	8012920 <HAL_UART_IRQHandler+0x3f0>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	b29b      	uxth	r3, r3
 801291e:	e005      	b.n	801292c <HAL_UART_IRQHandler+0x3fc>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	b29b      	uxth	r3, r3
 801292c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012934:	2b00      	cmp	r3, #0
 8012936:	f000 81ab 	beq.w	8012c90 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012940:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012944:	429a      	cmp	r2, r3
 8012946:	f080 81a3 	bcs.w	8012c90 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012950:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801295a:	69db      	ldr	r3, [r3, #28]
 801295c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012960:	f000 8087 	beq.w	8012a72 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801296c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012970:	e853 3f00 	ldrex	r3, [r3]
 8012974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801297c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	461a      	mov	r2, r3
 801298a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801298e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012992:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801299a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801299e:	e841 2300 	strex	r3, r2, [r1]
 80129a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80129a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d1da      	bne.n	8012964 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	3308      	adds	r3, #8
 80129b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129b8:	e853 3f00 	ldrex	r3, [r3]
 80129bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80129be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129c0:	f023 0301 	bic.w	r3, r3, #1
 80129c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	3308      	adds	r3, #8
 80129ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80129d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80129d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80129da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80129de:	e841 2300 	strex	r3, r2, [r1]
 80129e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80129e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1e1      	bne.n	80129ae <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	3308      	adds	r3, #8
 80129f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129f4:	e853 3f00 	ldrex	r3, [r3]
 80129f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80129fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	3308      	adds	r3, #8
 8012a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a16:	e841 2300 	strex	r3, r2, [r1]
 8012a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1e3      	bne.n	80129ea <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2220      	movs	r2, #32
 8012a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a38:	e853 3f00 	ldrex	r3, [r3]
 8012a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a40:	f023 0310 	bic.w	r3, r3, #16
 8012a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8012a54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a5a:	e841 2300 	strex	r3, r2, [r1]
 8012a5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d1e4      	bne.n	8012a30 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7f4 fa7b 	bl	8006f68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2202      	movs	r2, #2
 8012a76:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	4619      	mov	r1, r3
 8012a8c:	6878      	ldr	r0, [r7, #4]
 8012a8e:	f000 f91d 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012a92:	e0fd      	b.n	8012c90 <HAL_UART_IRQHandler+0x760>
 8012a94:	40020010 	.word	0x40020010
 8012a98:	40020028 	.word	0x40020028
 8012a9c:	40020040 	.word	0x40020040
 8012aa0:	40020058 	.word	0x40020058
 8012aa4:	40020070 	.word	0x40020070
 8012aa8:	40020088 	.word	0x40020088
 8012aac:	400200a0 	.word	0x400200a0
 8012ab0:	400200b8 	.word	0x400200b8
 8012ab4:	40020410 	.word	0x40020410
 8012ab8:	40020428 	.word	0x40020428
 8012abc:	40020440 	.word	0x40020440
 8012ac0:	40020458 	.word	0x40020458
 8012ac4:	40020470 	.word	0x40020470
 8012ac8:	40020488 	.word	0x40020488
 8012acc:	400204a0 	.word	0x400204a0
 8012ad0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f000 80cf 	beq.w	8012c94 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f000 80ca 	beq.w	8012c94 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b08:	e853 3f00 	ldrex	r3, [r3]
 8012b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012b22:	647b      	str	r3, [r7, #68]	; 0x44
 8012b24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b2a:	e841 2300 	strex	r3, r2, [r1]
 8012b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1e4      	bne.n	8012b00 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3308      	adds	r3, #8
 8012b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b40:	e853 3f00 	ldrex	r3, [r3]
 8012b44:	623b      	str	r3, [r7, #32]
   return(result);
 8012b46:	6a3a      	ldr	r2, [r7, #32]
 8012b48:	4b55      	ldr	r3, [pc, #340]	; (8012ca0 <HAL_UART_IRQHandler+0x770>)
 8012b4a:	4013      	ands	r3, r2
 8012b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	3308      	adds	r3, #8
 8012b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8012b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b62:	e841 2300 	strex	r3, r2, [r1]
 8012b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1e3      	bne.n	8012b36 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2220      	movs	r2, #32
 8012b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	e853 3f00 	ldrex	r3, [r3]
 8012b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f023 0310 	bic.w	r3, r3, #16
 8012b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	461a      	mov	r2, r3
 8012ba0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012ba4:	61fb      	str	r3, [r7, #28]
 8012ba6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba8:	69b9      	ldr	r1, [r7, #24]
 8012baa:	69fa      	ldr	r2, [r7, #28]
 8012bac:	e841 2300 	strex	r3, r2, [r1]
 8012bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d1e4      	bne.n	8012b82 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	2202      	movs	r2, #2
 8012bbc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f000 f881 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012bca:	e063      	b.n	8012c94 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00e      	beq.n	8012bf6 <HAL_UART_IRQHandler+0x6c6>
 8012bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d008      	beq.n	8012bf6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f001 fe80 	bl	80148f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012bf4:	e051      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d014      	beq.n	8012c2c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d105      	bne.n	8012c1a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d008      	beq.n	8012c2c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d03a      	beq.n	8012c98 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	4798      	blx	r3
    }
    return;
 8012c2a:	e035      	b.n	8012c98 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d009      	beq.n	8012c4c <HAL_UART_IRQHandler+0x71c>
 8012c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d003      	beq.n	8012c4c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012c44:	6878      	ldr	r0, [r7, #4]
 8012c46:	f001 f90d 	bl	8013e64 <UART_EndTransmit_IT>
    return;
 8012c4a:	e026      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d009      	beq.n	8012c6c <HAL_UART_IRQHandler+0x73c>
 8012c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d003      	beq.n	8012c6c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f001 fe59 	bl	801491c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c6a:	e016      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d010      	beq.n	8012c9a <HAL_UART_IRQHandler+0x76a>
 8012c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	da0c      	bge.n	8012c9a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f001 fe41 	bl	8014908 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c86:	e008      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8012c88:	bf00      	nop
 8012c8a:	e006      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
    return;
 8012c8c:	bf00      	nop
 8012c8e:	e004      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8012c90:	bf00      	nop
 8012c92:	e002      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
      return;
 8012c94:	bf00      	nop
 8012c96:	e000      	b.n	8012c9a <HAL_UART_IRQHandler+0x76a>
    return;
 8012c98:	bf00      	nop
  }
}
 8012c9a:	37e8      	adds	r7, #232	; 0xe8
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	effffffe 	.word	0xeffffffe

08012ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012cac:	bf00      	nop
 8012cae:	370c      	adds	r7, #12
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb6:	4770      	bx	lr

08012cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b083      	sub	sp, #12
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012cc0:	bf00      	nop
 8012cc2:	370c      	adds	r7, #12
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cca:	4770      	bx	lr

08012ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012cd8:	bf00      	nop
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012ce8:	b092      	sub	sp, #72	; 0x48
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	689a      	ldr	r2, [r3, #8]
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	691b      	ldr	r3, [r3, #16]
 8012cfc:	431a      	orrs	r2, r3
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	695b      	ldr	r3, [r3, #20]
 8012d02:	431a      	orrs	r2, r3
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	69db      	ldr	r3, [r3, #28]
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	4bbe      	ldr	r3, [pc, #760]	; (801300c <UART_SetConfig+0x328>)
 8012d14:	4013      	ands	r3, r2
 8012d16:	697a      	ldr	r2, [r7, #20]
 8012d18:	6812      	ldr	r2, [r2, #0]
 8012d1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d1c:	430b      	orrs	r3, r1
 8012d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	685b      	ldr	r3, [r3, #4]
 8012d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	68da      	ldr	r2, [r3, #12]
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	430a      	orrs	r2, r1
 8012d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d36:	697b      	ldr	r3, [r7, #20]
 8012d38:	699b      	ldr	r3, [r3, #24]
 8012d3a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4ab3      	ldr	r2, [pc, #716]	; (8013010 <UART_SetConfig+0x32c>)
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d004      	beq.n	8012d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	6a1b      	ldr	r3, [r3, #32]
 8012d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	689a      	ldr	r2, [r3, #8]
 8012d56:	4baf      	ldr	r3, [pc, #700]	; (8013014 <UART_SetConfig+0x330>)
 8012d58:	4013      	ands	r3, r2
 8012d5a:	697a      	ldr	r2, [r7, #20]
 8012d5c:	6812      	ldr	r2, [r2, #0]
 8012d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d60:	430b      	orrs	r3, r1
 8012d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6a:	f023 010f 	bic.w	r1, r3, #15
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	430a      	orrs	r2, r1
 8012d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4aa6      	ldr	r2, [pc, #664]	; (8013018 <UART_SetConfig+0x334>)
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d177      	bne.n	8012e74 <UART_SetConfig+0x190>
 8012d84:	4ba5      	ldr	r3, [pc, #660]	; (801301c <UART_SetConfig+0x338>)
 8012d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d8c:	2b28      	cmp	r3, #40	; 0x28
 8012d8e:	d86d      	bhi.n	8012e6c <UART_SetConfig+0x188>
 8012d90:	a201      	add	r2, pc, #4	; (adr r2, 8012d98 <UART_SetConfig+0xb4>)
 8012d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d96:	bf00      	nop
 8012d98:	08012e3d 	.word	0x08012e3d
 8012d9c:	08012e6d 	.word	0x08012e6d
 8012da0:	08012e6d 	.word	0x08012e6d
 8012da4:	08012e6d 	.word	0x08012e6d
 8012da8:	08012e6d 	.word	0x08012e6d
 8012dac:	08012e6d 	.word	0x08012e6d
 8012db0:	08012e6d 	.word	0x08012e6d
 8012db4:	08012e6d 	.word	0x08012e6d
 8012db8:	08012e45 	.word	0x08012e45
 8012dbc:	08012e6d 	.word	0x08012e6d
 8012dc0:	08012e6d 	.word	0x08012e6d
 8012dc4:	08012e6d 	.word	0x08012e6d
 8012dc8:	08012e6d 	.word	0x08012e6d
 8012dcc:	08012e6d 	.word	0x08012e6d
 8012dd0:	08012e6d 	.word	0x08012e6d
 8012dd4:	08012e6d 	.word	0x08012e6d
 8012dd8:	08012e4d 	.word	0x08012e4d
 8012ddc:	08012e6d 	.word	0x08012e6d
 8012de0:	08012e6d 	.word	0x08012e6d
 8012de4:	08012e6d 	.word	0x08012e6d
 8012de8:	08012e6d 	.word	0x08012e6d
 8012dec:	08012e6d 	.word	0x08012e6d
 8012df0:	08012e6d 	.word	0x08012e6d
 8012df4:	08012e6d 	.word	0x08012e6d
 8012df8:	08012e55 	.word	0x08012e55
 8012dfc:	08012e6d 	.word	0x08012e6d
 8012e00:	08012e6d 	.word	0x08012e6d
 8012e04:	08012e6d 	.word	0x08012e6d
 8012e08:	08012e6d 	.word	0x08012e6d
 8012e0c:	08012e6d 	.word	0x08012e6d
 8012e10:	08012e6d 	.word	0x08012e6d
 8012e14:	08012e6d 	.word	0x08012e6d
 8012e18:	08012e5d 	.word	0x08012e5d
 8012e1c:	08012e6d 	.word	0x08012e6d
 8012e20:	08012e6d 	.word	0x08012e6d
 8012e24:	08012e6d 	.word	0x08012e6d
 8012e28:	08012e6d 	.word	0x08012e6d
 8012e2c:	08012e6d 	.word	0x08012e6d
 8012e30:	08012e6d 	.word	0x08012e6d
 8012e34:	08012e6d 	.word	0x08012e6d
 8012e38:	08012e65 	.word	0x08012e65
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e42:	e222      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e44:	2304      	movs	r3, #4
 8012e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4a:	e21e      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e4c:	2308      	movs	r3, #8
 8012e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e52:	e21a      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e54:	2310      	movs	r3, #16
 8012e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e5a:	e216      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e5c:	2320      	movs	r3, #32
 8012e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e62:	e212      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e64:	2340      	movs	r3, #64	; 0x40
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6a:	e20e      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e6c:	2380      	movs	r3, #128	; 0x80
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e72:	e20a      	b.n	801328a <UART_SetConfig+0x5a6>
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	4a69      	ldr	r2, [pc, #420]	; (8013020 <UART_SetConfig+0x33c>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d130      	bne.n	8012ee0 <UART_SetConfig+0x1fc>
 8012e7e:	4b67      	ldr	r3, [pc, #412]	; (801301c <UART_SetConfig+0x338>)
 8012e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e82:	f003 0307 	and.w	r3, r3, #7
 8012e86:	2b05      	cmp	r3, #5
 8012e88:	d826      	bhi.n	8012ed8 <UART_SetConfig+0x1f4>
 8012e8a:	a201      	add	r2, pc, #4	; (adr r2, 8012e90 <UART_SetConfig+0x1ac>)
 8012e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e90:	08012ea9 	.word	0x08012ea9
 8012e94:	08012eb1 	.word	0x08012eb1
 8012e98:	08012eb9 	.word	0x08012eb9
 8012e9c:	08012ec1 	.word	0x08012ec1
 8012ea0:	08012ec9 	.word	0x08012ec9
 8012ea4:	08012ed1 	.word	0x08012ed1
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eae:	e1ec      	b.n	801328a <UART_SetConfig+0x5a6>
 8012eb0:	2304      	movs	r3, #4
 8012eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb6:	e1e8      	b.n	801328a <UART_SetConfig+0x5a6>
 8012eb8:	2308      	movs	r3, #8
 8012eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ebe:	e1e4      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ec0:	2310      	movs	r3, #16
 8012ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ec6:	e1e0      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ec8:	2320      	movs	r3, #32
 8012eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ece:	e1dc      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ed0:	2340      	movs	r3, #64	; 0x40
 8012ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ed6:	e1d8      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ed8:	2380      	movs	r3, #128	; 0x80
 8012eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ede:	e1d4      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	4a4f      	ldr	r2, [pc, #316]	; (8013024 <UART_SetConfig+0x340>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d130      	bne.n	8012f4c <UART_SetConfig+0x268>
 8012eea:	4b4c      	ldr	r3, [pc, #304]	; (801301c <UART_SetConfig+0x338>)
 8012eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eee:	f003 0307 	and.w	r3, r3, #7
 8012ef2:	2b05      	cmp	r3, #5
 8012ef4:	d826      	bhi.n	8012f44 <UART_SetConfig+0x260>
 8012ef6:	a201      	add	r2, pc, #4	; (adr r2, 8012efc <UART_SetConfig+0x218>)
 8012ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012efc:	08012f15 	.word	0x08012f15
 8012f00:	08012f1d 	.word	0x08012f1d
 8012f04:	08012f25 	.word	0x08012f25
 8012f08:	08012f2d 	.word	0x08012f2d
 8012f0c:	08012f35 	.word	0x08012f35
 8012f10:	08012f3d 	.word	0x08012f3d
 8012f14:	2300      	movs	r3, #0
 8012f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1a:	e1b6      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f1c:	2304      	movs	r3, #4
 8012f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f22:	e1b2      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f24:	2308      	movs	r3, #8
 8012f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f2a:	e1ae      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f2c:	2310      	movs	r3, #16
 8012f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f32:	e1aa      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f34:	2320      	movs	r3, #32
 8012f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f3a:	e1a6      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f3c:	2340      	movs	r3, #64	; 0x40
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f42:	e1a2      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f44:	2380      	movs	r3, #128	; 0x80
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f4a:	e19e      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4a35      	ldr	r2, [pc, #212]	; (8013028 <UART_SetConfig+0x344>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d130      	bne.n	8012fb8 <UART_SetConfig+0x2d4>
 8012f56:	4b31      	ldr	r3, [pc, #196]	; (801301c <UART_SetConfig+0x338>)
 8012f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f5a:	f003 0307 	and.w	r3, r3, #7
 8012f5e:	2b05      	cmp	r3, #5
 8012f60:	d826      	bhi.n	8012fb0 <UART_SetConfig+0x2cc>
 8012f62:	a201      	add	r2, pc, #4	; (adr r2, 8012f68 <UART_SetConfig+0x284>)
 8012f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f68:	08012f81 	.word	0x08012f81
 8012f6c:	08012f89 	.word	0x08012f89
 8012f70:	08012f91 	.word	0x08012f91
 8012f74:	08012f99 	.word	0x08012f99
 8012f78:	08012fa1 	.word	0x08012fa1
 8012f7c:	08012fa9 	.word	0x08012fa9
 8012f80:	2300      	movs	r3, #0
 8012f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f86:	e180      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f88:	2304      	movs	r3, #4
 8012f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8e:	e17c      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f90:	2308      	movs	r3, #8
 8012f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f96:	e178      	b.n	801328a <UART_SetConfig+0x5a6>
 8012f98:	2310      	movs	r3, #16
 8012f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9e:	e174      	b.n	801328a <UART_SetConfig+0x5a6>
 8012fa0:	2320      	movs	r3, #32
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa6:	e170      	b.n	801328a <UART_SetConfig+0x5a6>
 8012fa8:	2340      	movs	r3, #64	; 0x40
 8012faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fae:	e16c      	b.n	801328a <UART_SetConfig+0x5a6>
 8012fb0:	2380      	movs	r3, #128	; 0x80
 8012fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fb6:	e168      	b.n	801328a <UART_SetConfig+0x5a6>
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a1b      	ldr	r2, [pc, #108]	; (801302c <UART_SetConfig+0x348>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d142      	bne.n	8013048 <UART_SetConfig+0x364>
 8012fc2:	4b16      	ldr	r3, [pc, #88]	; (801301c <UART_SetConfig+0x338>)
 8012fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fc6:	f003 0307 	and.w	r3, r3, #7
 8012fca:	2b05      	cmp	r3, #5
 8012fcc:	d838      	bhi.n	8013040 <UART_SetConfig+0x35c>
 8012fce:	a201      	add	r2, pc, #4	; (adr r2, 8012fd4 <UART_SetConfig+0x2f0>)
 8012fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd4:	08012fed 	.word	0x08012fed
 8012fd8:	08012ff5 	.word	0x08012ff5
 8012fdc:	08012ffd 	.word	0x08012ffd
 8012fe0:	08013005 	.word	0x08013005
 8012fe4:	08013031 	.word	0x08013031
 8012fe8:	08013039 	.word	0x08013039
 8012fec:	2300      	movs	r3, #0
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff2:	e14a      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ff4:	2304      	movs	r3, #4
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ffa:	e146      	b.n	801328a <UART_SetConfig+0x5a6>
 8012ffc:	2308      	movs	r3, #8
 8012ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013002:	e142      	b.n	801328a <UART_SetConfig+0x5a6>
 8013004:	2310      	movs	r3, #16
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801300a:	e13e      	b.n	801328a <UART_SetConfig+0x5a6>
 801300c:	cfff69f3 	.word	0xcfff69f3
 8013010:	58000c00 	.word	0x58000c00
 8013014:	11fff4ff 	.word	0x11fff4ff
 8013018:	40011000 	.word	0x40011000
 801301c:	58024400 	.word	0x58024400
 8013020:	40004400 	.word	0x40004400
 8013024:	40004800 	.word	0x40004800
 8013028:	40004c00 	.word	0x40004c00
 801302c:	40005000 	.word	0x40005000
 8013030:	2320      	movs	r3, #32
 8013032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013036:	e128      	b.n	801328a <UART_SetConfig+0x5a6>
 8013038:	2340      	movs	r3, #64	; 0x40
 801303a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801303e:	e124      	b.n	801328a <UART_SetConfig+0x5a6>
 8013040:	2380      	movs	r3, #128	; 0x80
 8013042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013046:	e120      	b.n	801328a <UART_SetConfig+0x5a6>
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4acb      	ldr	r2, [pc, #812]	; (801337c <UART_SetConfig+0x698>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d176      	bne.n	8013140 <UART_SetConfig+0x45c>
 8013052:	4bcb      	ldr	r3, [pc, #812]	; (8013380 <UART_SetConfig+0x69c>)
 8013054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013056:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801305a:	2b28      	cmp	r3, #40	; 0x28
 801305c:	d86c      	bhi.n	8013138 <UART_SetConfig+0x454>
 801305e:	a201      	add	r2, pc, #4	; (adr r2, 8013064 <UART_SetConfig+0x380>)
 8013060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013064:	08013109 	.word	0x08013109
 8013068:	08013139 	.word	0x08013139
 801306c:	08013139 	.word	0x08013139
 8013070:	08013139 	.word	0x08013139
 8013074:	08013139 	.word	0x08013139
 8013078:	08013139 	.word	0x08013139
 801307c:	08013139 	.word	0x08013139
 8013080:	08013139 	.word	0x08013139
 8013084:	08013111 	.word	0x08013111
 8013088:	08013139 	.word	0x08013139
 801308c:	08013139 	.word	0x08013139
 8013090:	08013139 	.word	0x08013139
 8013094:	08013139 	.word	0x08013139
 8013098:	08013139 	.word	0x08013139
 801309c:	08013139 	.word	0x08013139
 80130a0:	08013139 	.word	0x08013139
 80130a4:	08013119 	.word	0x08013119
 80130a8:	08013139 	.word	0x08013139
 80130ac:	08013139 	.word	0x08013139
 80130b0:	08013139 	.word	0x08013139
 80130b4:	08013139 	.word	0x08013139
 80130b8:	08013139 	.word	0x08013139
 80130bc:	08013139 	.word	0x08013139
 80130c0:	08013139 	.word	0x08013139
 80130c4:	08013121 	.word	0x08013121
 80130c8:	08013139 	.word	0x08013139
 80130cc:	08013139 	.word	0x08013139
 80130d0:	08013139 	.word	0x08013139
 80130d4:	08013139 	.word	0x08013139
 80130d8:	08013139 	.word	0x08013139
 80130dc:	08013139 	.word	0x08013139
 80130e0:	08013139 	.word	0x08013139
 80130e4:	08013129 	.word	0x08013129
 80130e8:	08013139 	.word	0x08013139
 80130ec:	08013139 	.word	0x08013139
 80130f0:	08013139 	.word	0x08013139
 80130f4:	08013139 	.word	0x08013139
 80130f8:	08013139 	.word	0x08013139
 80130fc:	08013139 	.word	0x08013139
 8013100:	08013139 	.word	0x08013139
 8013104:	08013131 	.word	0x08013131
 8013108:	2301      	movs	r3, #1
 801310a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310e:	e0bc      	b.n	801328a <UART_SetConfig+0x5a6>
 8013110:	2304      	movs	r3, #4
 8013112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013116:	e0b8      	b.n	801328a <UART_SetConfig+0x5a6>
 8013118:	2308      	movs	r3, #8
 801311a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311e:	e0b4      	b.n	801328a <UART_SetConfig+0x5a6>
 8013120:	2310      	movs	r3, #16
 8013122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013126:	e0b0      	b.n	801328a <UART_SetConfig+0x5a6>
 8013128:	2320      	movs	r3, #32
 801312a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312e:	e0ac      	b.n	801328a <UART_SetConfig+0x5a6>
 8013130:	2340      	movs	r3, #64	; 0x40
 8013132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013136:	e0a8      	b.n	801328a <UART_SetConfig+0x5a6>
 8013138:	2380      	movs	r3, #128	; 0x80
 801313a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801313e:	e0a4      	b.n	801328a <UART_SetConfig+0x5a6>
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a8f      	ldr	r2, [pc, #572]	; (8013384 <UART_SetConfig+0x6a0>)
 8013146:	4293      	cmp	r3, r2
 8013148:	d130      	bne.n	80131ac <UART_SetConfig+0x4c8>
 801314a:	4b8d      	ldr	r3, [pc, #564]	; (8013380 <UART_SetConfig+0x69c>)
 801314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801314e:	f003 0307 	and.w	r3, r3, #7
 8013152:	2b05      	cmp	r3, #5
 8013154:	d826      	bhi.n	80131a4 <UART_SetConfig+0x4c0>
 8013156:	a201      	add	r2, pc, #4	; (adr r2, 801315c <UART_SetConfig+0x478>)
 8013158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801315c:	08013175 	.word	0x08013175
 8013160:	0801317d 	.word	0x0801317d
 8013164:	08013185 	.word	0x08013185
 8013168:	0801318d 	.word	0x0801318d
 801316c:	08013195 	.word	0x08013195
 8013170:	0801319d 	.word	0x0801319d
 8013174:	2300      	movs	r3, #0
 8013176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317a:	e086      	b.n	801328a <UART_SetConfig+0x5a6>
 801317c:	2304      	movs	r3, #4
 801317e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013182:	e082      	b.n	801328a <UART_SetConfig+0x5a6>
 8013184:	2308      	movs	r3, #8
 8013186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318a:	e07e      	b.n	801328a <UART_SetConfig+0x5a6>
 801318c:	2310      	movs	r3, #16
 801318e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013192:	e07a      	b.n	801328a <UART_SetConfig+0x5a6>
 8013194:	2320      	movs	r3, #32
 8013196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319a:	e076      	b.n	801328a <UART_SetConfig+0x5a6>
 801319c:	2340      	movs	r3, #64	; 0x40
 801319e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131a2:	e072      	b.n	801328a <UART_SetConfig+0x5a6>
 80131a4:	2380      	movs	r3, #128	; 0x80
 80131a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131aa:	e06e      	b.n	801328a <UART_SetConfig+0x5a6>
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	4a75      	ldr	r2, [pc, #468]	; (8013388 <UART_SetConfig+0x6a4>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d130      	bne.n	8013218 <UART_SetConfig+0x534>
 80131b6:	4b72      	ldr	r3, [pc, #456]	; (8013380 <UART_SetConfig+0x69c>)
 80131b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131ba:	f003 0307 	and.w	r3, r3, #7
 80131be:	2b05      	cmp	r3, #5
 80131c0:	d826      	bhi.n	8013210 <UART_SetConfig+0x52c>
 80131c2:	a201      	add	r2, pc, #4	; (adr r2, 80131c8 <UART_SetConfig+0x4e4>)
 80131c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c8:	080131e1 	.word	0x080131e1
 80131cc:	080131e9 	.word	0x080131e9
 80131d0:	080131f1 	.word	0x080131f1
 80131d4:	080131f9 	.word	0x080131f9
 80131d8:	08013201 	.word	0x08013201
 80131dc:	08013209 	.word	0x08013209
 80131e0:	2300      	movs	r3, #0
 80131e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e6:	e050      	b.n	801328a <UART_SetConfig+0x5a6>
 80131e8:	2304      	movs	r3, #4
 80131ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ee:	e04c      	b.n	801328a <UART_SetConfig+0x5a6>
 80131f0:	2308      	movs	r3, #8
 80131f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f6:	e048      	b.n	801328a <UART_SetConfig+0x5a6>
 80131f8:	2310      	movs	r3, #16
 80131fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fe:	e044      	b.n	801328a <UART_SetConfig+0x5a6>
 8013200:	2320      	movs	r3, #32
 8013202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013206:	e040      	b.n	801328a <UART_SetConfig+0x5a6>
 8013208:	2340      	movs	r3, #64	; 0x40
 801320a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320e:	e03c      	b.n	801328a <UART_SetConfig+0x5a6>
 8013210:	2380      	movs	r3, #128	; 0x80
 8013212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013216:	e038      	b.n	801328a <UART_SetConfig+0x5a6>
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4a5b      	ldr	r2, [pc, #364]	; (801338c <UART_SetConfig+0x6a8>)
 801321e:	4293      	cmp	r3, r2
 8013220:	d130      	bne.n	8013284 <UART_SetConfig+0x5a0>
 8013222:	4b57      	ldr	r3, [pc, #348]	; (8013380 <UART_SetConfig+0x69c>)
 8013224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013226:	f003 0307 	and.w	r3, r3, #7
 801322a:	2b05      	cmp	r3, #5
 801322c:	d826      	bhi.n	801327c <UART_SetConfig+0x598>
 801322e:	a201      	add	r2, pc, #4	; (adr r2, 8013234 <UART_SetConfig+0x550>)
 8013230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013234:	0801324d 	.word	0x0801324d
 8013238:	08013255 	.word	0x08013255
 801323c:	0801325d 	.word	0x0801325d
 8013240:	08013265 	.word	0x08013265
 8013244:	0801326d 	.word	0x0801326d
 8013248:	08013275 	.word	0x08013275
 801324c:	2302      	movs	r3, #2
 801324e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013252:	e01a      	b.n	801328a <UART_SetConfig+0x5a6>
 8013254:	2304      	movs	r3, #4
 8013256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325a:	e016      	b.n	801328a <UART_SetConfig+0x5a6>
 801325c:	2308      	movs	r3, #8
 801325e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013262:	e012      	b.n	801328a <UART_SetConfig+0x5a6>
 8013264:	2310      	movs	r3, #16
 8013266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326a:	e00e      	b.n	801328a <UART_SetConfig+0x5a6>
 801326c:	2320      	movs	r3, #32
 801326e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013272:	e00a      	b.n	801328a <UART_SetConfig+0x5a6>
 8013274:	2340      	movs	r3, #64	; 0x40
 8013276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801327a:	e006      	b.n	801328a <UART_SetConfig+0x5a6>
 801327c:	2380      	movs	r3, #128	; 0x80
 801327e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013282:	e002      	b.n	801328a <UART_SetConfig+0x5a6>
 8013284:	2380      	movs	r3, #128	; 0x80
 8013286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4a3f      	ldr	r2, [pc, #252]	; (801338c <UART_SetConfig+0x6a8>)
 8013290:	4293      	cmp	r3, r2
 8013292:	f040 80f8 	bne.w	8013486 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801329a:	2b20      	cmp	r3, #32
 801329c:	dc46      	bgt.n	801332c <UART_SetConfig+0x648>
 801329e:	2b02      	cmp	r3, #2
 80132a0:	f2c0 8082 	blt.w	80133a8 <UART_SetConfig+0x6c4>
 80132a4:	3b02      	subs	r3, #2
 80132a6:	2b1e      	cmp	r3, #30
 80132a8:	d87e      	bhi.n	80133a8 <UART_SetConfig+0x6c4>
 80132aa:	a201      	add	r2, pc, #4	; (adr r2, 80132b0 <UART_SetConfig+0x5cc>)
 80132ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b0:	08013333 	.word	0x08013333
 80132b4:	080133a9 	.word	0x080133a9
 80132b8:	0801333b 	.word	0x0801333b
 80132bc:	080133a9 	.word	0x080133a9
 80132c0:	080133a9 	.word	0x080133a9
 80132c4:	080133a9 	.word	0x080133a9
 80132c8:	0801334b 	.word	0x0801334b
 80132cc:	080133a9 	.word	0x080133a9
 80132d0:	080133a9 	.word	0x080133a9
 80132d4:	080133a9 	.word	0x080133a9
 80132d8:	080133a9 	.word	0x080133a9
 80132dc:	080133a9 	.word	0x080133a9
 80132e0:	080133a9 	.word	0x080133a9
 80132e4:	080133a9 	.word	0x080133a9
 80132e8:	0801335b 	.word	0x0801335b
 80132ec:	080133a9 	.word	0x080133a9
 80132f0:	080133a9 	.word	0x080133a9
 80132f4:	080133a9 	.word	0x080133a9
 80132f8:	080133a9 	.word	0x080133a9
 80132fc:	080133a9 	.word	0x080133a9
 8013300:	080133a9 	.word	0x080133a9
 8013304:	080133a9 	.word	0x080133a9
 8013308:	080133a9 	.word	0x080133a9
 801330c:	080133a9 	.word	0x080133a9
 8013310:	080133a9 	.word	0x080133a9
 8013314:	080133a9 	.word	0x080133a9
 8013318:	080133a9 	.word	0x080133a9
 801331c:	080133a9 	.word	0x080133a9
 8013320:	080133a9 	.word	0x080133a9
 8013324:	080133a9 	.word	0x080133a9
 8013328:	0801339b 	.word	0x0801339b
 801332c:	2b40      	cmp	r3, #64	; 0x40
 801332e:	d037      	beq.n	80133a0 <UART_SetConfig+0x6bc>
 8013330:	e03a      	b.n	80133a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013332:	f7fb fc17 	bl	800eb64 <HAL_RCCEx_GetD3PCLK1Freq>
 8013336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013338:	e03c      	b.n	80133b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801333e:	4618      	mov	r0, r3
 8013340:	f7fb fc26 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013348:	e034      	b.n	80133b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801334a:	f107 0318 	add.w	r3, r7, #24
 801334e:	4618      	mov	r0, r3
 8013350:	f7fb fd72 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013358:	e02c      	b.n	80133b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801335a:	4b09      	ldr	r3, [pc, #36]	; (8013380 <UART_SetConfig+0x69c>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f003 0320 	and.w	r3, r3, #32
 8013362:	2b00      	cmp	r3, #0
 8013364:	d016      	beq.n	8013394 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013366:	4b06      	ldr	r3, [pc, #24]	; (8013380 <UART_SetConfig+0x69c>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	08db      	lsrs	r3, r3, #3
 801336c:	f003 0303 	and.w	r3, r3, #3
 8013370:	4a07      	ldr	r2, [pc, #28]	; (8013390 <UART_SetConfig+0x6ac>)
 8013372:	fa22 f303 	lsr.w	r3, r2, r3
 8013376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013378:	e01c      	b.n	80133b4 <UART_SetConfig+0x6d0>
 801337a:	bf00      	nop
 801337c:	40011400 	.word	0x40011400
 8013380:	58024400 	.word	0x58024400
 8013384:	40007800 	.word	0x40007800
 8013388:	40007c00 	.word	0x40007c00
 801338c:	58000c00 	.word	0x58000c00
 8013390:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013394:	4b9d      	ldr	r3, [pc, #628]	; (801360c <UART_SetConfig+0x928>)
 8013396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013398:	e00c      	b.n	80133b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801339a:	4b9d      	ldr	r3, [pc, #628]	; (8013610 <UART_SetConfig+0x92c>)
 801339c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801339e:	e009      	b.n	80133b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80133a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80133a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80133a6:	e005      	b.n	80133b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80133a8:	2300      	movs	r3, #0
 80133aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80133ac:	2301      	movs	r3, #1
 80133ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80133b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80133b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f000 81de 	beq.w	8013778 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c0:	4a94      	ldr	r2, [pc, #592]	; (8013614 <UART_SetConfig+0x930>)
 80133c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133c6:	461a      	mov	r2, r3
 80133c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80133ce:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	685a      	ldr	r2, [r3, #4]
 80133d4:	4613      	mov	r3, r2
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	4413      	add	r3, r2
 80133da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133dc:	429a      	cmp	r2, r3
 80133de:	d305      	bcc.n	80133ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d903      	bls.n	80133f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80133ec:	2301      	movs	r3, #1
 80133ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80133f2:	e1c1      	b.n	8013778 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133f6:	2200      	movs	r2, #0
 80133f8:	60bb      	str	r3, [r7, #8]
 80133fa:	60fa      	str	r2, [r7, #12]
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013400:	4a84      	ldr	r2, [pc, #528]	; (8013614 <UART_SetConfig+0x930>)
 8013402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013406:	b29b      	uxth	r3, r3
 8013408:	2200      	movs	r2, #0
 801340a:	603b      	str	r3, [r7, #0]
 801340c:	607a      	str	r2, [r7, #4]
 801340e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013412:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013416:	f7ec ff63 	bl	80002e0 <__aeabi_uldivmod>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	4610      	mov	r0, r2
 8013420:	4619      	mov	r1, r3
 8013422:	f04f 0200 	mov.w	r2, #0
 8013426:	f04f 0300 	mov.w	r3, #0
 801342a:	020b      	lsls	r3, r1, #8
 801342c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013430:	0202      	lsls	r2, r0, #8
 8013432:	6979      	ldr	r1, [r7, #20]
 8013434:	6849      	ldr	r1, [r1, #4]
 8013436:	0849      	lsrs	r1, r1, #1
 8013438:	2000      	movs	r0, #0
 801343a:	460c      	mov	r4, r1
 801343c:	4605      	mov	r5, r0
 801343e:	eb12 0804 	adds.w	r8, r2, r4
 8013442:	eb43 0905 	adc.w	r9, r3, r5
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	2200      	movs	r2, #0
 801344c:	469a      	mov	sl, r3
 801344e:	4693      	mov	fp, r2
 8013450:	4652      	mov	r2, sl
 8013452:	465b      	mov	r3, fp
 8013454:	4640      	mov	r0, r8
 8013456:	4649      	mov	r1, r9
 8013458:	f7ec ff42 	bl	80002e0 <__aeabi_uldivmod>
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	4613      	mov	r3, r2
 8013462:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801346a:	d308      	bcc.n	801347e <UART_SetConfig+0x79a>
 801346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013472:	d204      	bcs.n	801347e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801347a:	60da      	str	r2, [r3, #12]
 801347c:	e17c      	b.n	8013778 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801347e:	2301      	movs	r3, #1
 8013480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013484:	e178      	b.n	8013778 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	69db      	ldr	r3, [r3, #28]
 801348a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801348e:	f040 80c5 	bne.w	801361c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013496:	2b20      	cmp	r3, #32
 8013498:	dc48      	bgt.n	801352c <UART_SetConfig+0x848>
 801349a:	2b00      	cmp	r3, #0
 801349c:	db7b      	blt.n	8013596 <UART_SetConfig+0x8b2>
 801349e:	2b20      	cmp	r3, #32
 80134a0:	d879      	bhi.n	8013596 <UART_SetConfig+0x8b2>
 80134a2:	a201      	add	r2, pc, #4	; (adr r2, 80134a8 <UART_SetConfig+0x7c4>)
 80134a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134a8:	08013533 	.word	0x08013533
 80134ac:	0801353b 	.word	0x0801353b
 80134b0:	08013597 	.word	0x08013597
 80134b4:	08013597 	.word	0x08013597
 80134b8:	08013543 	.word	0x08013543
 80134bc:	08013597 	.word	0x08013597
 80134c0:	08013597 	.word	0x08013597
 80134c4:	08013597 	.word	0x08013597
 80134c8:	08013553 	.word	0x08013553
 80134cc:	08013597 	.word	0x08013597
 80134d0:	08013597 	.word	0x08013597
 80134d4:	08013597 	.word	0x08013597
 80134d8:	08013597 	.word	0x08013597
 80134dc:	08013597 	.word	0x08013597
 80134e0:	08013597 	.word	0x08013597
 80134e4:	08013597 	.word	0x08013597
 80134e8:	08013563 	.word	0x08013563
 80134ec:	08013597 	.word	0x08013597
 80134f0:	08013597 	.word	0x08013597
 80134f4:	08013597 	.word	0x08013597
 80134f8:	08013597 	.word	0x08013597
 80134fc:	08013597 	.word	0x08013597
 8013500:	08013597 	.word	0x08013597
 8013504:	08013597 	.word	0x08013597
 8013508:	08013597 	.word	0x08013597
 801350c:	08013597 	.word	0x08013597
 8013510:	08013597 	.word	0x08013597
 8013514:	08013597 	.word	0x08013597
 8013518:	08013597 	.word	0x08013597
 801351c:	08013597 	.word	0x08013597
 8013520:	08013597 	.word	0x08013597
 8013524:	08013597 	.word	0x08013597
 8013528:	08013589 	.word	0x08013589
 801352c:	2b40      	cmp	r3, #64	; 0x40
 801352e:	d02e      	beq.n	801358e <UART_SetConfig+0x8aa>
 8013530:	e031      	b.n	8013596 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013532:	f7f9 fb1f 	bl	800cb74 <HAL_RCC_GetPCLK1Freq>
 8013536:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013538:	e033      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801353a:	f7f9 fb31 	bl	800cba0 <HAL_RCC_GetPCLK2Freq>
 801353e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013540:	e02f      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013546:	4618      	mov	r0, r3
 8013548:	f7fb fb22 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801354e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013550:	e027      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013552:	f107 0318 	add.w	r3, r7, #24
 8013556:	4618      	mov	r0, r3
 8013558:	f7fb fc6e 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013560:	e01f      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013562:	4b2d      	ldr	r3, [pc, #180]	; (8013618 <UART_SetConfig+0x934>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	f003 0320 	and.w	r3, r3, #32
 801356a:	2b00      	cmp	r3, #0
 801356c:	d009      	beq.n	8013582 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801356e:	4b2a      	ldr	r3, [pc, #168]	; (8013618 <UART_SetConfig+0x934>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	08db      	lsrs	r3, r3, #3
 8013574:	f003 0303 	and.w	r3, r3, #3
 8013578:	4a24      	ldr	r2, [pc, #144]	; (801360c <UART_SetConfig+0x928>)
 801357a:	fa22 f303 	lsr.w	r3, r2, r3
 801357e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013580:	e00f      	b.n	80135a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013582:	4b22      	ldr	r3, [pc, #136]	; (801360c <UART_SetConfig+0x928>)
 8013584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013586:	e00c      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013588:	4b21      	ldr	r3, [pc, #132]	; (8013610 <UART_SetConfig+0x92c>)
 801358a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801358c:	e009      	b.n	80135a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801358e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013594:	e005      	b.n	80135a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013596:	2300      	movs	r3, #0
 8013598:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801359a:	2301      	movs	r3, #1
 801359c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80135a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80135a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	f000 80e7 	beq.w	8013778 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ae:	4a19      	ldr	r2, [pc, #100]	; (8013614 <UART_SetConfig+0x930>)
 80135b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135b4:	461a      	mov	r2, r3
 80135b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80135bc:	005a      	lsls	r2, r3, #1
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	085b      	lsrs	r3, r3, #1
 80135c4:	441a      	add	r2, r3
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80135ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d2:	2b0f      	cmp	r3, #15
 80135d4:	d916      	bls.n	8013604 <UART_SetConfig+0x920>
 80135d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135dc:	d212      	bcs.n	8013604 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80135de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	f023 030f 	bic.w	r3, r3, #15
 80135e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80135e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ea:	085b      	lsrs	r3, r3, #1
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	f003 0307 	and.w	r3, r3, #7
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80135f6:	4313      	orrs	r3, r2
 80135f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013600:	60da      	str	r2, [r3, #12]
 8013602:	e0b9      	b.n	8013778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013604:	2301      	movs	r3, #1
 8013606:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801360a:	e0b5      	b.n	8013778 <UART_SetConfig+0xa94>
 801360c:	03d09000 	.word	0x03d09000
 8013610:	003d0900 	.word	0x003d0900
 8013614:	08018efc 	.word	0x08018efc
 8013618:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801361c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013620:	2b20      	cmp	r3, #32
 8013622:	dc49      	bgt.n	80136b8 <UART_SetConfig+0x9d4>
 8013624:	2b00      	cmp	r3, #0
 8013626:	db7c      	blt.n	8013722 <UART_SetConfig+0xa3e>
 8013628:	2b20      	cmp	r3, #32
 801362a:	d87a      	bhi.n	8013722 <UART_SetConfig+0xa3e>
 801362c:	a201      	add	r2, pc, #4	; (adr r2, 8013634 <UART_SetConfig+0x950>)
 801362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013632:	bf00      	nop
 8013634:	080136bf 	.word	0x080136bf
 8013638:	080136c7 	.word	0x080136c7
 801363c:	08013723 	.word	0x08013723
 8013640:	08013723 	.word	0x08013723
 8013644:	080136cf 	.word	0x080136cf
 8013648:	08013723 	.word	0x08013723
 801364c:	08013723 	.word	0x08013723
 8013650:	08013723 	.word	0x08013723
 8013654:	080136df 	.word	0x080136df
 8013658:	08013723 	.word	0x08013723
 801365c:	08013723 	.word	0x08013723
 8013660:	08013723 	.word	0x08013723
 8013664:	08013723 	.word	0x08013723
 8013668:	08013723 	.word	0x08013723
 801366c:	08013723 	.word	0x08013723
 8013670:	08013723 	.word	0x08013723
 8013674:	080136ef 	.word	0x080136ef
 8013678:	08013723 	.word	0x08013723
 801367c:	08013723 	.word	0x08013723
 8013680:	08013723 	.word	0x08013723
 8013684:	08013723 	.word	0x08013723
 8013688:	08013723 	.word	0x08013723
 801368c:	08013723 	.word	0x08013723
 8013690:	08013723 	.word	0x08013723
 8013694:	08013723 	.word	0x08013723
 8013698:	08013723 	.word	0x08013723
 801369c:	08013723 	.word	0x08013723
 80136a0:	08013723 	.word	0x08013723
 80136a4:	08013723 	.word	0x08013723
 80136a8:	08013723 	.word	0x08013723
 80136ac:	08013723 	.word	0x08013723
 80136b0:	08013723 	.word	0x08013723
 80136b4:	08013715 	.word	0x08013715
 80136b8:	2b40      	cmp	r3, #64	; 0x40
 80136ba:	d02e      	beq.n	801371a <UART_SetConfig+0xa36>
 80136bc:	e031      	b.n	8013722 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80136be:	f7f9 fa59 	bl	800cb74 <HAL_RCC_GetPCLK1Freq>
 80136c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80136c4:	e033      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80136c6:	f7f9 fa6b 	bl	800cba0 <HAL_RCC_GetPCLK2Freq>
 80136ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80136cc:	e02f      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7fb fa5c 	bl	800eb90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80136d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136dc:	e027      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136de:	f107 0318 	add.w	r3, r7, #24
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7fb fba8 	bl	800ee38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136ec:	e01f      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136ee:	4b2d      	ldr	r3, [pc, #180]	; (80137a4 <UART_SetConfig+0xac0>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	f003 0320 	and.w	r3, r3, #32
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d009      	beq.n	801370e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136fa:	4b2a      	ldr	r3, [pc, #168]	; (80137a4 <UART_SetConfig+0xac0>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	08db      	lsrs	r3, r3, #3
 8013700:	f003 0303 	and.w	r3, r3, #3
 8013704:	4a28      	ldr	r2, [pc, #160]	; (80137a8 <UART_SetConfig+0xac4>)
 8013706:	fa22 f303 	lsr.w	r3, r2, r3
 801370a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801370c:	e00f      	b.n	801372e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801370e:	4b26      	ldr	r3, [pc, #152]	; (80137a8 <UART_SetConfig+0xac4>)
 8013710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013712:	e00c      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013714:	4b25      	ldr	r3, [pc, #148]	; (80137ac <UART_SetConfig+0xac8>)
 8013716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013718:	e009      	b.n	801372e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801371a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801371e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013720:	e005      	b.n	801372e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013722:	2300      	movs	r3, #0
 8013724:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801372c:	bf00      	nop
    }

    if (pclk != 0U)
 801372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013730:	2b00      	cmp	r3, #0
 8013732:	d021      	beq.n	8013778 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013738:	4a1d      	ldr	r2, [pc, #116]	; (80137b0 <UART_SetConfig+0xacc>)
 801373a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801373e:	461a      	mov	r2, r3
 8013740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013742:	fbb3 f2f2 	udiv	r2, r3, r2
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	085b      	lsrs	r3, r3, #1
 801374c:	441a      	add	r2, r3
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	fbb2 f3f3 	udiv	r3, r2, r3
 8013756:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375a:	2b0f      	cmp	r3, #15
 801375c:	d909      	bls.n	8013772 <UART_SetConfig+0xa8e>
 801375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013764:	d205      	bcs.n	8013772 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013768:	b29a      	uxth	r2, r3
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	60da      	str	r2, [r3, #12]
 8013770:	e002      	b.n	8013778 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013772:	2301      	movs	r3, #1
 8013774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	2201      	movs	r2, #1
 801377c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	2201      	movs	r2, #1
 8013784:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013788:	697b      	ldr	r3, [r7, #20]
 801378a:	2200      	movs	r2, #0
 801378c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	2200      	movs	r2, #0
 8013792:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013794:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013798:	4618      	mov	r0, r3
 801379a:	3748      	adds	r7, #72	; 0x48
 801379c:	46bd      	mov	sp, r7
 801379e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80137a2:	bf00      	nop
 80137a4:	58024400 	.word	0x58024400
 80137a8:	03d09000 	.word	0x03d09000
 80137ac:	003d0900 	.word	0x003d0900
 80137b0:	08018efc 	.word	0x08018efc

080137b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137c0:	f003 0308 	and.w	r3, r3, #8
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00a      	beq.n	80137de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	430a      	orrs	r2, r1
 80137dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137e2:	f003 0301 	and.w	r3, r3, #1
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d00a      	beq.n	8013800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	430a      	orrs	r2, r1
 80137fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013804:	f003 0302 	and.w	r3, r3, #2
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00a      	beq.n	8013822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	430a      	orrs	r2, r1
 8013820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013826:	f003 0304 	and.w	r3, r3, #4
 801382a:	2b00      	cmp	r3, #0
 801382c:	d00a      	beq.n	8013844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	430a      	orrs	r2, r1
 8013842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013848:	f003 0310 	and.w	r3, r3, #16
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	430a      	orrs	r2, r1
 8013864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801386a:	f003 0320 	and.w	r3, r3, #32
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00a      	beq.n	8013888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	689b      	ldr	r3, [r3, #8]
 8013878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	430a      	orrs	r2, r1
 8013886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013890:	2b00      	cmp	r3, #0
 8013892:	d01a      	beq.n	80138ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	685b      	ldr	r3, [r3, #4]
 801389a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	430a      	orrs	r2, r1
 80138a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80138b2:	d10a      	bne.n	80138ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	430a      	orrs	r2, r1
 80138c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00a      	beq.n	80138ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	430a      	orrs	r2, r1
 80138ea:	605a      	str	r2, [r3, #4]
  }
}
 80138ec:	bf00      	nop
 80138ee:	370c      	adds	r7, #12
 80138f0:	46bd      	mov	sp, r7
 80138f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f6:	4770      	bx	lr

080138f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b098      	sub	sp, #96	; 0x60
 80138fc:	af02      	add	r7, sp, #8
 80138fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013908:	f7f0 fc40 	bl	800418c <HAL_GetTick>
 801390c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f003 0308 	and.w	r3, r3, #8
 8013918:	2b08      	cmp	r3, #8
 801391a:	d12f      	bne.n	801397c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801391c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013924:	2200      	movs	r2, #0
 8013926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 f88e 	bl	8013a4c <UART_WaitOnFlagUntilTimeout>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d022      	beq.n	801397c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393e:	e853 3f00 	ldrex	r3, [r3]
 8013942:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801394a:	653b      	str	r3, [r7, #80]	; 0x50
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	461a      	mov	r2, r3
 8013952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013954:	647b      	str	r3, [r7, #68]	; 0x44
 8013956:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801395a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801395c:	e841 2300 	strex	r3, r2, [r1]
 8013960:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013964:	2b00      	cmp	r3, #0
 8013966:	d1e6      	bne.n	8013936 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2220      	movs	r2, #32
 801396c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2200      	movs	r2, #0
 8013974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013978:	2303      	movs	r3, #3
 801397a:	e063      	b.n	8013a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 0304 	and.w	r3, r3, #4
 8013986:	2b04      	cmp	r3, #4
 8013988:	d149      	bne.n	8013a1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801398a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801398e:	9300      	str	r3, [sp, #0]
 8013990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013992:	2200      	movs	r2, #0
 8013994:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013998:	6878      	ldr	r0, [r7, #4]
 801399a:	f000 f857 	bl	8013a4c <UART_WaitOnFlagUntilTimeout>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d03c      	beq.n	8013a1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ac:	e853 3f00 	ldrex	r3, [r3]
 80139b0:	623b      	str	r3, [r7, #32]
   return(result);
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80139b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	461a      	mov	r2, r3
 80139c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139c2:	633b      	str	r3, [r7, #48]	; 0x30
 80139c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80139c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ca:	e841 2300 	strex	r3, r2, [r1]
 80139ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d1e6      	bne.n	80139a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	3308      	adds	r3, #8
 80139dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	e853 3f00 	ldrex	r3, [r3]
 80139e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	f023 0301 	bic.w	r3, r3, #1
 80139ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	3308      	adds	r3, #8
 80139f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139f6:	61fa      	str	r2, [r7, #28]
 80139f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139fa:	69b9      	ldr	r1, [r7, #24]
 80139fc:	69fa      	ldr	r2, [r7, #28]
 80139fe:	e841 2300 	strex	r3, r2, [r1]
 8013a02:	617b      	str	r3, [r7, #20]
   return(result);
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d1e5      	bne.n	80139d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2220      	movs	r2, #32
 8013a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	2200      	movs	r2, #0
 8013a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013a1a:	2303      	movs	r3, #3
 8013a1c:	e012      	b.n	8013a44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2220      	movs	r2, #32
 8013a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2220      	movs	r2, #32
 8013a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2200      	movs	r2, #0
 8013a32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013a42:	2300      	movs	r3, #0
}
 8013a44:	4618      	mov	r0, r3
 8013a46:	3758      	adds	r7, #88	; 0x58
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}

08013a4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	603b      	str	r3, [r7, #0]
 8013a58:	4613      	mov	r3, r2
 8013a5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a5c:	e04f      	b.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a64:	d04b      	beq.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a66:	f7f0 fb91 	bl	800418c <HAL_GetTick>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	69ba      	ldr	r2, [r7, #24]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d302      	bcc.n	8013a7c <UART_WaitOnFlagUntilTimeout+0x30>
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d101      	bne.n	8013a80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a7c:	2303      	movs	r3, #3
 8013a7e:	e04e      	b.n	8013b1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	f003 0304 	and.w	r3, r3, #4
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d037      	beq.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	2b80      	cmp	r3, #128	; 0x80
 8013a92:	d034      	beq.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	2b40      	cmp	r3, #64	; 0x40
 8013a98:	d031      	beq.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	69db      	ldr	r3, [r3, #28]
 8013aa0:	f003 0308 	and.w	r3, r3, #8
 8013aa4:	2b08      	cmp	r3, #8
 8013aa6:	d110      	bne.n	8013aca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2208      	movs	r2, #8
 8013aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f000 f95b 	bl	8013d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2208      	movs	r2, #8
 8013aba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e029      	b.n	8013b1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	69db      	ldr	r3, [r3, #28]
 8013ad0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ad8:	d111      	bne.n	8013afe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013ae2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ae4:	68f8      	ldr	r0, [r7, #12]
 8013ae6:	f000 f941 	bl	8013d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2220      	movs	r2, #32
 8013aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	2200      	movs	r2, #0
 8013af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013afa:	2303      	movs	r3, #3
 8013afc:	e00f      	b.n	8013b1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	69da      	ldr	r2, [r3, #28]
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	4013      	ands	r3, r2
 8013b08:	68ba      	ldr	r2, [r7, #8]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	bf0c      	ite	eq
 8013b0e:	2301      	moveq	r3, #1
 8013b10:	2300      	movne	r3, #0
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	461a      	mov	r2, r3
 8013b16:	79fb      	ldrb	r3, [r7, #7]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d0a0      	beq.n	8013a5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013b1c:	2300      	movs	r3, #0
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}
	...

08013b28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b28:	b480      	push	{r7}
 8013b2a:	b0a3      	sub	sp, #140	; 0x8c
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	60f8      	str	r0, [r7, #12]
 8013b30:	60b9      	str	r1, [r7, #8]
 8013b32:	4613      	mov	r3, r2
 8013b34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	68ba      	ldr	r2, [r7, #8]
 8013b3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	88fa      	ldrh	r2, [r7, #6]
 8013b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	88fa      	ldrh	r2, [r7, #6]
 8013b48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	689b      	ldr	r3, [r3, #8]
 8013b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b5a:	d10e      	bne.n	8013b7a <UART_Start_Receive_IT+0x52>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d105      	bne.n	8013b70 <UART_Start_Receive_IT+0x48>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b6e:	e02d      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	22ff      	movs	r2, #255	; 0xff
 8013b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b78:	e028      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	689b      	ldr	r3, [r3, #8]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d10d      	bne.n	8013b9e <UART_Start_Receive_IT+0x76>
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	691b      	ldr	r3, [r3, #16]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d104      	bne.n	8013b94 <UART_Start_Receive_IT+0x6c>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	22ff      	movs	r2, #255	; 0xff
 8013b8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b92:	e01b      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	227f      	movs	r2, #127	; 0x7f
 8013b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013b9c:	e016      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	689b      	ldr	r3, [r3, #8]
 8013ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013ba6:	d10d      	bne.n	8013bc4 <UART_Start_Receive_IT+0x9c>
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	691b      	ldr	r3, [r3, #16]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d104      	bne.n	8013bba <UART_Start_Receive_IT+0x92>
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	227f      	movs	r2, #127	; 0x7f
 8013bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013bb8:	e008      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	223f      	movs	r2, #63	; 0x3f
 8013bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013bc2:	e003      	b.n	8013bcc <UART_Start_Receive_IT+0xa4>
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	2222      	movs	r2, #34	; 0x22
 8013bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	3308      	adds	r3, #8
 8013be2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013be6:	e853 3f00 	ldrex	r3, [r3]
 8013bea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013bee:	f043 0301 	orr.w	r3, r3, #1
 8013bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	3308      	adds	r3, #8
 8013bfc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013c00:	673a      	str	r2, [r7, #112]	; 0x70
 8013c02:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c04:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013c06:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013c08:	e841 2300 	strex	r3, r2, [r1]
 8013c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013c0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d1e3      	bne.n	8013bdc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013c1c:	d14f      	bne.n	8013cbe <UART_Start_Receive_IT+0x196>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013c24:	88fa      	ldrh	r2, [r7, #6]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d349      	bcc.n	8013cbe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013c32:	d107      	bne.n	8013c44 <UART_Start_Receive_IT+0x11c>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	691b      	ldr	r3, [r3, #16]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d103      	bne.n	8013c44 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	4a47      	ldr	r2, [pc, #284]	; (8013d5c <UART_Start_Receive_IT+0x234>)
 8013c40:	675a      	str	r2, [r3, #116]	; 0x74
 8013c42:	e002      	b.n	8013c4a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	4a46      	ldr	r2, [pc, #280]	; (8013d60 <UART_Start_Receive_IT+0x238>)
 8013c48:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d01a      	beq.n	8013c88 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c5a:	e853 3f00 	ldrex	r3, [r3]
 8013c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013c66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	461a      	mov	r2, r3
 8013c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013c76:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013c7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013c7c:	e841 2300 	strex	r3, r2, [r1]
 8013c80:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d1e4      	bne.n	8013c52 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	3308      	adds	r3, #8
 8013c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c92:	e853 3f00 	ldrex	r3, [r3]
 8013c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	3308      	adds	r3, #8
 8013ca6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013ca8:	64ba      	str	r2, [r7, #72]	; 0x48
 8013caa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cb0:	e841 2300 	strex	r3, r2, [r1]
 8013cb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1e5      	bne.n	8013c88 <UART_Start_Receive_IT+0x160>
 8013cbc:	e046      	b.n	8013d4c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	689b      	ldr	r3, [r3, #8]
 8013cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cc6:	d107      	bne.n	8013cd8 <UART_Start_Receive_IT+0x1b0>
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	691b      	ldr	r3, [r3, #16]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d103      	bne.n	8013cd8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	4a24      	ldr	r2, [pc, #144]	; (8013d64 <UART_Start_Receive_IT+0x23c>)
 8013cd4:	675a      	str	r2, [r3, #116]	; 0x74
 8013cd6:	e002      	b.n	8013cde <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	4a23      	ldr	r2, [pc, #140]	; (8013d68 <UART_Start_Receive_IT+0x240>)
 8013cdc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d019      	beq.n	8013d1a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cee:	e853 3f00 	ldrex	r3, [r3]
 8013cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013cfa:	677b      	str	r3, [r7, #116]	; 0x74
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	461a      	mov	r2, r3
 8013d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d04:	637b      	str	r3, [r7, #52]	; 0x34
 8013d06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d0c:	e841 2300 	strex	r3, r2, [r1]
 8013d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d1e6      	bne.n	8013ce6 <UART_Start_Receive_IT+0x1be>
 8013d18:	e018      	b.n	8013d4c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	e853 3f00 	ldrex	r3, [r3]
 8013d26:	613b      	str	r3, [r7, #16]
   return(result);
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	f043 0320 	orr.w	r3, r3, #32
 8013d2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	461a      	mov	r2, r3
 8013d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d38:	623b      	str	r3, [r7, #32]
 8013d3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d3c:	69f9      	ldr	r1, [r7, #28]
 8013d3e:	6a3a      	ldr	r2, [r7, #32]
 8013d40:	e841 2300 	strex	r3, r2, [r1]
 8013d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8013d46:	69bb      	ldr	r3, [r7, #24]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d1e6      	bne.n	8013d1a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8013d4c:	2300      	movs	r3, #0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	378c      	adds	r7, #140	; 0x8c
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr
 8013d5a:	bf00      	nop
 8013d5c:	0801458d 	.word	0x0801458d
 8013d60:	0801422d 	.word	0x0801422d
 8013d64:	08014075 	.word	0x08014075
 8013d68:	08013ebd 	.word	0x08013ebd

08013d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b095      	sub	sp, #84	; 0x54
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d7c:	e853 3f00 	ldrex	r3, [r3]
 8013d80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	461a      	mov	r2, r3
 8013d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d92:	643b      	str	r3, [r7, #64]	; 0x40
 8013d94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d9a:	e841 2300 	strex	r3, r2, [r1]
 8013d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d1e6      	bne.n	8013d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	3308      	adds	r3, #8
 8013dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dae:	6a3b      	ldr	r3, [r7, #32]
 8013db0:	e853 3f00 	ldrex	r3, [r3]
 8013db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013db6:	69fa      	ldr	r2, [r7, #28]
 8013db8:	4b1e      	ldr	r3, [pc, #120]	; (8013e34 <UART_EndRxTransfer+0xc8>)
 8013dba:	4013      	ands	r3, r2
 8013dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	3308      	adds	r3, #8
 8013dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013dc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dce:	e841 2300 	strex	r3, r2, [r1]
 8013dd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d1e5      	bne.n	8013da6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d118      	bne.n	8013e14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	e853 3f00 	ldrex	r3, [r3]
 8013dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	f023 0310 	bic.w	r3, r3, #16
 8013df6:	647b      	str	r3, [r7, #68]	; 0x44
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e00:	61bb      	str	r3, [r7, #24]
 8013e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e04:	6979      	ldr	r1, [r7, #20]
 8013e06:	69ba      	ldr	r2, [r7, #24]
 8013e08:	e841 2300 	strex	r3, r2, [r1]
 8013e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d1e6      	bne.n	8013de2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2220      	movs	r2, #32
 8013e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2200      	movs	r2, #0
 8013e26:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013e28:	bf00      	nop
 8013e2a:	3754      	adds	r7, #84	; 0x54
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr
 8013e34:	effffffe 	.word	0xeffffffe

08013e38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f7fe ff2e 	bl	8012cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e5c:	bf00      	nop
 8013e5e:	3710      	adds	r7, #16
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b088      	sub	sp, #32
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	e853 3f00 	ldrex	r3, [r3]
 8013e78:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e80:	61fb      	str	r3, [r7, #28]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	461a      	mov	r2, r3
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	61bb      	str	r3, [r7, #24]
 8013e8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e8e:	6979      	ldr	r1, [r7, #20]
 8013e90:	69ba      	ldr	r2, [r7, #24]
 8013e92:	e841 2300 	strex	r3, r2, [r1]
 8013e96:	613b      	str	r3, [r7, #16]
   return(result);
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d1e6      	bne.n	8013e6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2220      	movs	r2, #32
 8013ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f7fe fef9 	bl	8012ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013eb2:	bf00      	nop
 8013eb4:	3720      	adds	r7, #32
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
	...

08013ebc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b09c      	sub	sp, #112	; 0x70
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013eca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ed4:	2b22      	cmp	r3, #34	; 0x22
 8013ed6:	f040 80be 	bne.w	8014056 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013ee4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8013ee8:	b2d9      	uxtb	r1, r3
 8013eea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8013eee:	b2da      	uxtb	r2, r3
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ef4:	400a      	ands	r2, r1
 8013ef6:	b2d2      	uxtb	r2, r2
 8013ef8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013efe:	1c5a      	adds	r2, r3, #1
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	b29a      	uxth	r2, r3
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f1c:	b29b      	uxth	r3, r3
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	f040 80a1 	bne.w	8014066 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f2c:	e853 3f00 	ldrex	r3, [r3]
 8013f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	461a      	mov	r2, r3
 8013f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8013f44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013f4a:	e841 2300 	strex	r3, r2, [r1]
 8013f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1e6      	bne.n	8013f24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	3308      	adds	r3, #8
 8013f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f60:	e853 3f00 	ldrex	r3, [r3]
 8013f64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f68:	f023 0301 	bic.w	r3, r3, #1
 8013f6c:	667b      	str	r3, [r7, #100]	; 0x64
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	3308      	adds	r3, #8
 8013f74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013f76:	647a      	str	r2, [r7, #68]	; 0x44
 8013f78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f7e:	e841 2300 	strex	r3, r2, [r1]
 8013f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1e5      	bne.n	8013f56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2220      	movs	r2, #32
 8013f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4a33      	ldr	r2, [pc, #204]	; (8014070 <UART_RxISR_8BIT+0x1b4>)
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d01f      	beq.n	8013fe8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	685b      	ldr	r3, [r3, #4]
 8013fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d018      	beq.n	8013fe8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	e853 3f00 	ldrex	r3, [r3]
 8013fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8013fc4:	6a3b      	ldr	r3, [r7, #32]
 8013fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013fca:	663b      	str	r3, [r7, #96]	; 0x60
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	461a      	mov	r2, r3
 8013fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8013fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fdc:	e841 2300 	strex	r3, r2, [r1]
 8013fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d1e6      	bne.n	8013fb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fec:	2b01      	cmp	r3, #1
 8013fee:	d12e      	bne.n	801404e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	e853 3f00 	ldrex	r3, [r3]
 8014002:	60fb      	str	r3, [r7, #12]
   return(result);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f023 0310 	bic.w	r3, r3, #16
 801400a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	461a      	mov	r2, r3
 8014012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014014:	61fb      	str	r3, [r7, #28]
 8014016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014018:	69b9      	ldr	r1, [r7, #24]
 801401a:	69fa      	ldr	r2, [r7, #28]
 801401c:	e841 2300 	strex	r3, r2, [r1]
 8014020:	617b      	str	r3, [r7, #20]
   return(result);
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d1e6      	bne.n	8013ff6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	69db      	ldr	r3, [r3, #28]
 801402e:	f003 0310 	and.w	r3, r3, #16
 8014032:	2b10      	cmp	r3, #16
 8014034:	d103      	bne.n	801403e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2210      	movs	r2, #16
 801403c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014044:	4619      	mov	r1, r3
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f7fe fe40 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801404c:	e00b      	b.n	8014066 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f7ed fb24 	bl	800169c <HAL_UART_RxCpltCallback>
}
 8014054:	e007      	b.n	8014066 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	699a      	ldr	r2, [r3, #24]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f042 0208 	orr.w	r2, r2, #8
 8014064:	619a      	str	r2, [r3, #24]
}
 8014066:	bf00      	nop
 8014068:	3770      	adds	r7, #112	; 0x70
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	58000c00 	.word	0x58000c00

08014074 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b09c      	sub	sp, #112	; 0x70
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014082:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801408c:	2b22      	cmp	r3, #34	; 0x22
 801408e:	f040 80be 	bne.w	801420e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014098:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80140a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80140a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80140aa:	4013      	ands	r3, r2
 80140ac:	b29a      	uxth	r2, r3
 80140ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80140b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140b6:	1c9a      	adds	r2, r3, #2
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	3b01      	subs	r3, #1
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140d4:	b29b      	uxth	r3, r3
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	f040 80a1 	bne.w	801421e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80140e4:	e853 3f00 	ldrex	r3, [r3]
 80140e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80140ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140f0:	667b      	str	r3, [r7, #100]	; 0x64
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	461a      	mov	r2, r3
 80140f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140fa:	657b      	str	r3, [r7, #84]	; 0x54
 80140fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014100:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014102:	e841 2300 	strex	r3, r2, [r1]
 8014106:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1e6      	bne.n	80140dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	3308      	adds	r3, #8
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014118:	e853 3f00 	ldrex	r3, [r3]
 801411c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	f023 0301 	bic.w	r3, r3, #1
 8014124:	663b      	str	r3, [r7, #96]	; 0x60
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	3308      	adds	r3, #8
 801412c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801412e:	643a      	str	r2, [r7, #64]	; 0x40
 8014130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014136:	e841 2300 	strex	r3, r2, [r1]
 801413a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413e:	2b00      	cmp	r3, #0
 8014140:	d1e5      	bne.n	801410e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2220      	movs	r2, #32
 8014146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	2200      	movs	r2, #0
 801414e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	2200      	movs	r2, #0
 8014154:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4a33      	ldr	r2, [pc, #204]	; (8014228 <UART_RxISR_16BIT+0x1b4>)
 801415c:	4293      	cmp	r3, r2
 801415e:	d01f      	beq.n	80141a0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801416a:	2b00      	cmp	r3, #0
 801416c:	d018      	beq.n	80141a0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014174:	6a3b      	ldr	r3, [r7, #32]
 8014176:	e853 3f00 	ldrex	r3, [r3]
 801417a:	61fb      	str	r3, [r7, #28]
   return(result);
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	461a      	mov	r2, r3
 801418a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801418c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801418e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014194:	e841 2300 	strex	r3, r2, [r1]
 8014198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1e6      	bne.n	801416e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a4:	2b01      	cmp	r3, #1
 80141a6:	d12e      	bne.n	8014206 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	2200      	movs	r2, #0
 80141ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	e853 3f00 	ldrex	r3, [r3]
 80141ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	f023 0310 	bic.w	r3, r3, #16
 80141c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	461a      	mov	r2, r3
 80141ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80141cc:	61bb      	str	r3, [r7, #24]
 80141ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141d0:	6979      	ldr	r1, [r7, #20]
 80141d2:	69ba      	ldr	r2, [r7, #24]
 80141d4:	e841 2300 	strex	r3, r2, [r1]
 80141d8:	613b      	str	r3, [r7, #16]
   return(result);
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d1e6      	bne.n	80141ae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	69db      	ldr	r3, [r3, #28]
 80141e6:	f003 0310 	and.w	r3, r3, #16
 80141ea:	2b10      	cmp	r3, #16
 80141ec:	d103      	bne.n	80141f6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	2210      	movs	r2, #16
 80141f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80141fc:	4619      	mov	r1, r3
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7fe fd64 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014204:	e00b      	b.n	801421e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8014206:	6878      	ldr	r0, [r7, #4]
 8014208:	f7ed fa48 	bl	800169c <HAL_UART_RxCpltCallback>
}
 801420c:	e007      	b.n	801421e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	699a      	ldr	r2, [r3, #24]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f042 0208 	orr.w	r2, r2, #8
 801421c:	619a      	str	r2, [r3, #24]
}
 801421e:	bf00      	nop
 8014220:	3770      	adds	r7, #112	; 0x70
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	58000c00 	.word	0x58000c00

0801422c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b0ac      	sub	sp, #176	; 0xb0
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801423a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	69db      	ldr	r3, [r3, #28]
 8014244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	689b      	ldr	r3, [r3, #8]
 8014258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014262:	2b22      	cmp	r3, #34	; 0x22
 8014264:	f040 8180 	bne.w	8014568 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801426e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014272:	e123      	b.n	80144bc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801427a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801427e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8014282:	b2d9      	uxtb	r1, r3
 8014284:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8014288:	b2da      	uxtb	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801428e:	400a      	ands	r2, r1
 8014290:	b2d2      	uxtb	r2, r2
 8014292:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	3b01      	subs	r3, #1
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	69db      	ldr	r3, [r3, #28]
 80142b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80142ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142be:	f003 0307 	and.w	r3, r3, #7
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d053      	beq.n	801436e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80142c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d011      	beq.n	80142f6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80142d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80142d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00b      	beq.n	80142f6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	2201      	movs	r2, #1
 80142e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80142ec:	f043 0201 	orr.w	r2, r3, #1
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80142f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142fa:	f003 0302 	and.w	r3, r3, #2
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d011      	beq.n	8014326 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014306:	f003 0301 	and.w	r3, r3, #1
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00b      	beq.n	8014326 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2202      	movs	r2, #2
 8014314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801431c:	f043 0204 	orr.w	r2, r3, #4
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801432a:	f003 0304 	and.w	r3, r3, #4
 801432e:	2b00      	cmp	r3, #0
 8014330:	d011      	beq.n	8014356 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014336:	f003 0301 	and.w	r3, r3, #1
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00b      	beq.n	8014356 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	2204      	movs	r2, #4
 8014344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801434c:	f043 0202 	orr.w	r2, r3, #2
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801435c:	2b00      	cmp	r3, #0
 801435e:	d006      	beq.n	801436e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f7fe fca9 	bl	8012cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	2200      	movs	r2, #0
 801436a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014374:	b29b      	uxth	r3, r3
 8014376:	2b00      	cmp	r3, #0
 8014378:	f040 80a0 	bne.w	80144bc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014384:	e853 3f00 	ldrex	r3, [r3]
 8014388:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	461a      	mov	r2, r3
 801439a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801439e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80143a0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80143a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80143a6:	e841 2300 	strex	r3, r2, [r1]
 80143aa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80143ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1e4      	bne.n	801437c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	3308      	adds	r3, #8
 80143b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143bc:	e853 3f00 	ldrex	r3, [r3]
 80143c0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80143c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80143c4:	4b6e      	ldr	r3, [pc, #440]	; (8014580 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80143c6:	4013      	ands	r3, r2
 80143c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	3308      	adds	r3, #8
 80143d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80143d6:	66ba      	str	r2, [r7, #104]	; 0x68
 80143d8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80143dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143de:	e841 2300 	strex	r3, r2, [r1]
 80143e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80143e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d1e3      	bne.n	80143b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	2220      	movs	r2, #32
 80143ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2200      	movs	r2, #0
 80143f6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2200      	movs	r2, #0
 80143fc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	4a60      	ldr	r2, [pc, #384]	; (8014584 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8014404:	4293      	cmp	r3, r2
 8014406:	d021      	beq.n	801444c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014412:	2b00      	cmp	r3, #0
 8014414:	d01a      	beq.n	801444c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801441c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801441e:	e853 3f00 	ldrex	r3, [r3]
 8014422:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014426:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801442a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	461a      	mov	r2, r3
 8014434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014438:	657b      	str	r3, [r7, #84]	; 0x54
 801443a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801443c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801443e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014440:	e841 2300 	strex	r3, r2, [r1]
 8014444:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1e4      	bne.n	8014416 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014450:	2b01      	cmp	r3, #1
 8014452:	d130      	bne.n	80144b6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014462:	e853 3f00 	ldrex	r3, [r3]
 8014466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801446a:	f023 0310 	bic.w	r3, r3, #16
 801446e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	461a      	mov	r2, r3
 8014478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801447c:	643b      	str	r3, [r7, #64]	; 0x40
 801447e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014480:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014482:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014484:	e841 2300 	strex	r3, r2, [r1]
 8014488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801448c:	2b00      	cmp	r3, #0
 801448e:	d1e4      	bne.n	801445a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	69db      	ldr	r3, [r3, #28]
 8014496:	f003 0310 	and.w	r3, r3, #16
 801449a:	2b10      	cmp	r3, #16
 801449c:	d103      	bne.n	80144a6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2210      	movs	r2, #16
 80144a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80144ac:	4619      	mov	r1, r3
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f7fe fc0c 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
 80144b4:	e002      	b.n	80144bc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7ed f8f0 	bl	800169c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80144bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d006      	beq.n	80144d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80144c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80144c8:	f003 0320 	and.w	r3, r3, #32
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	f47f aed1 	bne.w	8014274 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80144dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d049      	beq.n	8014578 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80144ea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d242      	bcs.n	8014578 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	3308      	adds	r3, #8
 80144f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	e853 3f00 	ldrex	r3, [r3]
 8014500:	61fb      	str	r3, [r7, #28]
   return(result);
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014508:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	3308      	adds	r3, #8
 8014512:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014516:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801451a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801451c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801451e:	e841 2300 	strex	r3, r2, [r1]
 8014522:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014526:	2b00      	cmp	r3, #0
 8014528:	d1e3      	bne.n	80144f2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	4a16      	ldr	r2, [pc, #88]	; (8014588 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801452e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	e853 3f00 	ldrex	r3, [r3]
 801453c:	60bb      	str	r3, [r7, #8]
   return(result);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	f043 0320 	orr.w	r3, r3, #32
 8014544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	461a      	mov	r2, r3
 801454e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014552:	61bb      	str	r3, [r7, #24]
 8014554:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014556:	6979      	ldr	r1, [r7, #20]
 8014558:	69ba      	ldr	r2, [r7, #24]
 801455a:	e841 2300 	strex	r3, r2, [r1]
 801455e:	613b      	str	r3, [r7, #16]
   return(result);
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d1e4      	bne.n	8014530 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014566:	e007      	b.n	8014578 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	699a      	ldr	r2, [r3, #24]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	f042 0208 	orr.w	r2, r2, #8
 8014576:	619a      	str	r2, [r3, #24]
}
 8014578:	bf00      	nop
 801457a:	37b0      	adds	r7, #176	; 0xb0
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	effffffe 	.word	0xeffffffe
 8014584:	58000c00 	.word	0x58000c00
 8014588:	08013ebd 	.word	0x08013ebd

0801458c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b0ae      	sub	sp, #184	; 0xb8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801459a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	69db      	ldr	r3, [r3, #28]
 80145a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	689b      	ldr	r3, [r3, #8]
 80145b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145c2:	2b22      	cmp	r3, #34	; 0x22
 80145c4:	f040 8184 	bne.w	80148d0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80145ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80145d2:	e127      	b.n	8014824 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80145e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80145ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80145ee:	4013      	ands	r3, r2
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80145f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80145fc:	1c9a      	adds	r2, r3, #2
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014608:	b29b      	uxth	r3, r3
 801460a:	3b01      	subs	r3, #1
 801460c:	b29a      	uxth	r2, r3
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	69db      	ldr	r3, [r3, #28]
 801461a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801461e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014622:	f003 0307 	and.w	r3, r3, #7
 8014626:	2b00      	cmp	r3, #0
 8014628:	d053      	beq.n	80146d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801462a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801462e:	f003 0301 	and.w	r3, r3, #1
 8014632:	2b00      	cmp	r3, #0
 8014634:	d011      	beq.n	801465a <UART_RxISR_16BIT_FIFOEN+0xce>
 8014636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801463e:	2b00      	cmp	r3, #0
 8014640:	d00b      	beq.n	801465a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	2201      	movs	r2, #1
 8014648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014650:	f043 0201 	orr.w	r2, r3, #1
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801465a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801465e:	f003 0302 	and.w	r3, r3, #2
 8014662:	2b00      	cmp	r3, #0
 8014664:	d011      	beq.n	801468a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801466a:	f003 0301 	and.w	r3, r3, #1
 801466e:	2b00      	cmp	r3, #0
 8014670:	d00b      	beq.n	801468a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2202      	movs	r2, #2
 8014678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014680:	f043 0204 	orr.w	r2, r3, #4
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801468a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801468e:	f003 0304 	and.w	r3, r3, #4
 8014692:	2b00      	cmp	r3, #0
 8014694:	d011      	beq.n	80146ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801469a:	f003 0301 	and.w	r3, r3, #1
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d00b      	beq.n	80146ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	2204      	movs	r2, #4
 80146a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146b0:	f043 0202 	orr.w	r2, r3, #2
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d006      	beq.n	80146d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f7fe faf7 	bl	8012cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146d8:	b29b      	uxth	r3, r3
 80146da:	2b00      	cmp	r3, #0
 80146dc:	f040 80a2 	bne.w	8014824 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80146e8:	e853 3f00 	ldrex	r3, [r3]
 80146ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80146ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80146f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	461a      	mov	r2, r3
 80146fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014706:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014708:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801470a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801470e:	e841 2300 	strex	r3, r2, [r1]
 8014712:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014716:	2b00      	cmp	r3, #0
 8014718:	d1e2      	bne.n	80146e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	3308      	adds	r3, #8
 8014720:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014724:	e853 3f00 	ldrex	r3, [r3]
 8014728:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801472a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801472c:	4b6e      	ldr	r3, [pc, #440]	; (80148e8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801472e:	4013      	ands	r3, r2
 8014730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	3308      	adds	r3, #8
 801473a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801473e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014740:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014742:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014744:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014746:	e841 2300 	strex	r3, r2, [r1]
 801474a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801474c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801474e:	2b00      	cmp	r3, #0
 8014750:	d1e3      	bne.n	801471a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2220      	movs	r2, #32
 8014756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4a60      	ldr	r2, [pc, #384]	; (80148ec <UART_RxISR_16BIT_FIFOEN+0x360>)
 801476c:	4293      	cmp	r3, r2
 801476e:	d021      	beq.n	80147b4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801477a:	2b00      	cmp	r3, #0
 801477c:	d01a      	beq.n	80147b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014786:	e853 3f00 	ldrex	r3, [r3]
 801478a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801478e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	461a      	mov	r2, r3
 801479c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80147a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80147a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80147a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80147a8:	e841 2300 	strex	r3, r2, [r1]
 80147ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80147ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d1e4      	bne.n	801477e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d130      	bne.n	801481e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2200      	movs	r2, #0
 80147c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ca:	e853 3f00 	ldrex	r3, [r3]
 80147ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80147d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d2:	f023 0310 	bic.w	r3, r3, #16
 80147d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147e4:	647b      	str	r3, [r7, #68]	; 0x44
 80147e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80147ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80147ec:	e841 2300 	strex	r3, r2, [r1]
 80147f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80147f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d1e4      	bne.n	80147c2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	69db      	ldr	r3, [r3, #28]
 80147fe:	f003 0310 	and.w	r3, r3, #16
 8014802:	2b10      	cmp	r3, #16
 8014804:	d103      	bne.n	801480e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	2210      	movs	r2, #16
 801480c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014814:	4619      	mov	r1, r3
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7fe fa58 	bl	8012ccc <HAL_UARTEx_RxEventCallback>
 801481c:	e002      	b.n	8014824 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f7ec ff3c 	bl	800169c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014824:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8014828:	2b00      	cmp	r3, #0
 801482a:	d006      	beq.n	801483a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801482c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8014830:	f003 0320 	and.w	r3, r3, #32
 8014834:	2b00      	cmp	r3, #0
 8014836:	f47f aecd 	bne.w	80145d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014840:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014844:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014848:	2b00      	cmp	r3, #0
 801484a:	d049      	beq.n	80148e0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014852:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8014856:	429a      	cmp	r2, r3
 8014858:	d242      	bcs.n	80148e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	3308      	adds	r3, #8
 8014860:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014864:	e853 3f00 	ldrex	r3, [r3]
 8014868:	623b      	str	r3, [r7, #32]
   return(result);
 801486a:	6a3b      	ldr	r3, [r7, #32]
 801486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	3308      	adds	r3, #8
 801487a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801487e:	633a      	str	r2, [r7, #48]	; 0x30
 8014880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014886:	e841 2300 	strex	r3, r2, [r1]
 801488a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801488e:	2b00      	cmp	r3, #0
 8014890:	d1e3      	bne.n	801485a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	4a16      	ldr	r2, [pc, #88]	; (80148f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8014896:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	e853 3f00 	ldrex	r3, [r3]
 80148a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	f043 0320 	orr.w	r3, r3, #32
 80148ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	461a      	mov	r2, r3
 80148b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80148ba:	61fb      	str	r3, [r7, #28]
 80148bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148be:	69b9      	ldr	r1, [r7, #24]
 80148c0:	69fa      	ldr	r2, [r7, #28]
 80148c2:	e841 2300 	strex	r3, r2, [r1]
 80148c6:	617b      	str	r3, [r7, #20]
   return(result);
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d1e4      	bne.n	8014898 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80148ce:	e007      	b.n	80148e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	699a      	ldr	r2, [r3, #24]
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	f042 0208 	orr.w	r2, r2, #8
 80148de:	619a      	str	r2, [r3, #24]
}
 80148e0:	bf00      	nop
 80148e2:	37b8      	adds	r7, #184	; 0xb8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	effffffe 	.word	0xeffffffe
 80148ec:	58000c00 	.word	0x58000c00
 80148f0:	08014075 	.word	0x08014075

080148f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b083      	sub	sp, #12
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80148fc:	bf00      	nop
 80148fe:	370c      	adds	r7, #12
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr

08014908 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014908:	b480      	push	{r7}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014910:	bf00      	nop
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801491c:	b480      	push	{r7}
 801491e:	b083      	sub	sp, #12
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014924:	bf00      	nop
 8014926:	370c      	adds	r7, #12
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr

08014930 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8014930:	b480      	push	{r7}
 8014932:	b089      	sub	sp, #36	; 0x24
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801493e:	2b01      	cmp	r3, #1
 8014940:	d101      	bne.n	8014946 <HAL_UARTEx_EnableStopMode+0x16>
 8014942:	2302      	movs	r3, #2
 8014944:	e021      	b.n	801498a <HAL_UARTEx_EnableStopMode+0x5a>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2201      	movs	r2, #1
 801494a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	e853 3f00 	ldrex	r3, [r3]
 801495a:	60bb      	str	r3, [r7, #8]
   return(result);
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	f043 0302 	orr.w	r3, r3, #2
 8014962:	61fb      	str	r3, [r7, #28]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	461a      	mov	r2, r3
 801496a:	69fb      	ldr	r3, [r7, #28]
 801496c:	61bb      	str	r3, [r7, #24]
 801496e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014970:	6979      	ldr	r1, [r7, #20]
 8014972:	69ba      	ldr	r2, [r7, #24]
 8014974:	e841 2300 	strex	r3, r2, [r1]
 8014978:	613b      	str	r3, [r7, #16]
   return(result);
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d1e6      	bne.n	801494e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	2200      	movs	r2, #0
 8014984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3724      	adds	r7, #36	; 0x24
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr

08014996 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b084      	sub	sp, #16
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80149a4:	2b01      	cmp	r3, #1
 80149a6:	d101      	bne.n	80149ac <HAL_UARTEx_EnableFifoMode+0x16>
 80149a8:	2302      	movs	r3, #2
 80149aa:	e02b      	b.n	8014a04 <HAL_UARTEx_EnableFifoMode+0x6e>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2201      	movs	r2, #1
 80149b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2224      	movs	r2, #36	; 0x24
 80149b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f022 0201 	bic.w	r2, r2, #1
 80149d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80149da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80149e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	68fa      	ldr	r2, [r7, #12]
 80149ea:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f8c3 	bl	8014b78 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2220      	movs	r2, #32
 80149f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2200      	movs	r2, #0
 80149fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b085      	sub	sp, #20
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d101      	bne.n	8014a22 <HAL_UARTEx_DisableFifoMode+0x16>
 8014a1e:	2302      	movs	r3, #2
 8014a20:	e027      	b.n	8014a72 <HAL_UARTEx_DisableFifoMode+0x66>
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2201      	movs	r2, #1
 8014a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2224      	movs	r2, #36	; 0x24
 8014a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	681b      	ldr	r3, [r3, #0]
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	f022 0201 	bic.w	r2, r2, #1
 8014a48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014a50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	2200      	movs	r2, #0
 8014a56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2220      	movs	r2, #32
 8014a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014a70:	2300      	movs	r3, #0
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3714      	adds	r7, #20
 8014a76:	46bd      	mov	sp, r7
 8014a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7c:	4770      	bx	lr

08014a7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b084      	sub	sp, #16
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014a8e:	2b01      	cmp	r3, #1
 8014a90:	d101      	bne.n	8014a96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014a92:	2302      	movs	r3, #2
 8014a94:	e02d      	b.n	8014af2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2201      	movs	r2, #1
 8014a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	2224      	movs	r2, #36	; 0x24
 8014aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	681a      	ldr	r2, [r3, #0]
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	f022 0201 	bic.w	r2, r2, #1
 8014abc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	689b      	ldr	r3, [r3, #8]
 8014ac4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	683a      	ldr	r2, [r7, #0]
 8014ace:	430a      	orrs	r2, r1
 8014ad0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f000 f850 	bl	8014b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	68fa      	ldr	r2, [r7, #12]
 8014ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2220      	movs	r2, #32
 8014ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014af0:	2300      	movs	r3, #0
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3710      	adds	r7, #16
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}

08014afa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014afa:	b580      	push	{r7, lr}
 8014afc:	b084      	sub	sp, #16
 8014afe:	af00      	add	r7, sp, #0
 8014b00:	6078      	str	r0, [r7, #4]
 8014b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d101      	bne.n	8014b12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014b0e:	2302      	movs	r3, #2
 8014b10:	e02d      	b.n	8014b6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2201      	movs	r2, #1
 8014b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2224      	movs	r2, #36	; 0x24
 8014b1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	681a      	ldr	r2, [r3, #0]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	f022 0201 	bic.w	r2, r2, #1
 8014b38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	689b      	ldr	r3, [r3, #8]
 8014b40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	683a      	ldr	r2, [r7, #0]
 8014b4a:	430a      	orrs	r2, r1
 8014b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 f812 	bl	8014b78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	68fa      	ldr	r2, [r7, #12]
 8014b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2220      	movs	r2, #32
 8014b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2200      	movs	r2, #0
 8014b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014b6c:	2300      	movs	r3, #0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
	...

08014b78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d108      	bne.n	8014b9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2201      	movs	r2, #1
 8014b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014b98:	e031      	b.n	8014bfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014b9a:	2310      	movs	r3, #16
 8014b9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014b9e:	2310      	movs	r3, #16
 8014ba0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	0e5b      	lsrs	r3, r3, #25
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	f003 0307 	and.w	r3, r3, #7
 8014bb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	689b      	ldr	r3, [r3, #8]
 8014bb8:	0f5b      	lsrs	r3, r3, #29
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	f003 0307 	and.w	r3, r3, #7
 8014bc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014bc2:	7bbb      	ldrb	r3, [r7, #14]
 8014bc4:	7b3a      	ldrb	r2, [r7, #12]
 8014bc6:	4911      	ldr	r1, [pc, #68]	; (8014c0c <UARTEx_SetNbDataToProcess+0x94>)
 8014bc8:	5c8a      	ldrb	r2, [r1, r2]
 8014bca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014bce:	7b3a      	ldrb	r2, [r7, #12]
 8014bd0:	490f      	ldr	r1, [pc, #60]	; (8014c10 <UARTEx_SetNbDataToProcess+0x98>)
 8014bd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014bd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014be0:	7bfb      	ldrb	r3, [r7, #15]
 8014be2:	7b7a      	ldrb	r2, [r7, #13]
 8014be4:	4909      	ldr	r1, [pc, #36]	; (8014c0c <UARTEx_SetNbDataToProcess+0x94>)
 8014be6:	5c8a      	ldrb	r2, [r1, r2]
 8014be8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014bec:	7b7a      	ldrb	r2, [r7, #13]
 8014bee:	4908      	ldr	r1, [pc, #32]	; (8014c10 <UARTEx_SetNbDataToProcess+0x98>)
 8014bf0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014bfe:	bf00      	nop
 8014c00:	3714      	adds	r7, #20
 8014c02:	46bd      	mov	sp, r7
 8014c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	08018f14 	.word	0x08018f14
 8014c10:	08018f1c 	.word	0x08018f1c

08014c14 <__NVIC_SetPriority>:
{
 8014c14:	b480      	push	{r7}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	6039      	str	r1, [r7, #0]
 8014c1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	db0a      	blt.n	8014c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	b2da      	uxtb	r2, r3
 8014c2c:	490c      	ldr	r1, [pc, #48]	; (8014c60 <__NVIC_SetPriority+0x4c>)
 8014c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014c32:	0112      	lsls	r2, r2, #4
 8014c34:	b2d2      	uxtb	r2, r2
 8014c36:	440b      	add	r3, r1
 8014c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014c3c:	e00a      	b.n	8014c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	b2da      	uxtb	r2, r3
 8014c42:	4908      	ldr	r1, [pc, #32]	; (8014c64 <__NVIC_SetPriority+0x50>)
 8014c44:	88fb      	ldrh	r3, [r7, #6]
 8014c46:	f003 030f 	and.w	r3, r3, #15
 8014c4a:	3b04      	subs	r3, #4
 8014c4c:	0112      	lsls	r2, r2, #4
 8014c4e:	b2d2      	uxtb	r2, r2
 8014c50:	440b      	add	r3, r1
 8014c52:	761a      	strb	r2, [r3, #24]
}
 8014c54:	bf00      	nop
 8014c56:	370c      	adds	r7, #12
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr
 8014c60:	e000e100 	.word	0xe000e100
 8014c64:	e000ed00 	.word	0xe000ed00

08014c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014c6c:	4b05      	ldr	r3, [pc, #20]	; (8014c84 <SysTick_Handler+0x1c>)
 8014c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014c70:	f002 f958 	bl	8016f24 <xTaskGetSchedulerState>
 8014c74:	4603      	mov	r3, r0
 8014c76:	2b01      	cmp	r3, #1
 8014c78:	d001      	beq.n	8014c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014c7a:	f002 ff75 	bl	8017b68 <xPortSysTickHandler>
  }
}
 8014c7e:	bf00      	nop
 8014c80:	bd80      	pop	{r7, pc}
 8014c82:	bf00      	nop
 8014c84:	e000e010 	.word	0xe000e010

08014c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	f06f 0004 	mvn.w	r0, #4
 8014c92:	f7ff ffbf 	bl	8014c14 <__NVIC_SetPriority>
#endif
}
 8014c96:	bf00      	nop
 8014c98:	bd80      	pop	{r7, pc}
	...

08014c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ca2:	f3ef 8305 	mrs	r3, IPSR
 8014ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8014ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d003      	beq.n	8014cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014cae:	f06f 0305 	mvn.w	r3, #5
 8014cb2:	607b      	str	r3, [r7, #4]
 8014cb4:	e00c      	b.n	8014cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014cb6:	4b0a      	ldr	r3, [pc, #40]	; (8014ce0 <osKernelInitialize+0x44>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d105      	bne.n	8014cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014cbe:	4b08      	ldr	r3, [pc, #32]	; (8014ce0 <osKernelInitialize+0x44>)
 8014cc0:	2201      	movs	r2, #1
 8014cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	607b      	str	r3, [r7, #4]
 8014cc8:	e002      	b.n	8014cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014cd0:	687b      	ldr	r3, [r7, #4]
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	370c      	adds	r7, #12
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	24001f80 	.word	0x24001f80

08014ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014cea:	f3ef 8305 	mrs	r3, IPSR
 8014cee:	603b      	str	r3, [r7, #0]
  return(result);
 8014cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d003      	beq.n	8014cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8014cf6:	f06f 0305 	mvn.w	r3, #5
 8014cfa:	607b      	str	r3, [r7, #4]
 8014cfc:	e010      	b.n	8014d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014cfe:	4b0b      	ldr	r3, [pc, #44]	; (8014d2c <osKernelStart+0x48>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d109      	bne.n	8014d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014d06:	f7ff ffbf 	bl	8014c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014d0a:	4b08      	ldr	r3, [pc, #32]	; (8014d2c <osKernelStart+0x48>)
 8014d0c:	2202      	movs	r2, #2
 8014d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014d10:	f001 fc0c 	bl	801652c <vTaskStartScheduler>
      stat = osOK;
 8014d14:	2300      	movs	r3, #0
 8014d16:	607b      	str	r3, [r7, #4]
 8014d18:	e002      	b.n	8014d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014d20:	687b      	ldr	r3, [r7, #4]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3708      	adds	r7, #8
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	24001f80 	.word	0x24001f80

08014d30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b08e      	sub	sp, #56	; 0x38
 8014d34:	af04      	add	r7, sp, #16
 8014d36:	60f8      	str	r0, [r7, #12]
 8014d38:	60b9      	str	r1, [r7, #8]
 8014d3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d40:	f3ef 8305 	mrs	r3, IPSR
 8014d44:	617b      	str	r3, [r7, #20]
  return(result);
 8014d46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d17e      	bne.n	8014e4a <osThreadNew+0x11a>
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d07b      	beq.n	8014e4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014d52:	2380      	movs	r3, #128	; 0x80
 8014d54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014d56:	2318      	movs	r3, #24
 8014d58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d045      	beq.n	8014df6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d002      	beq.n	8014d78 <osThreadNew+0x48>
        name = attr->name;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	699b      	ldr	r3, [r3, #24]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d002      	beq.n	8014d86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	699b      	ldr	r3, [r3, #24]
 8014d84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d008      	beq.n	8014d9e <osThreadNew+0x6e>
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	2b38      	cmp	r3, #56	; 0x38
 8014d90:	d805      	bhi.n	8014d9e <osThreadNew+0x6e>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	685b      	ldr	r3, [r3, #4]
 8014d96:	f003 0301 	and.w	r3, r3, #1
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d001      	beq.n	8014da2 <osThreadNew+0x72>
        return (NULL);
 8014d9e:	2300      	movs	r3, #0
 8014da0:	e054      	b.n	8014e4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	695b      	ldr	r3, [r3, #20]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d003      	beq.n	8014db2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	695b      	ldr	r3, [r3, #20]
 8014dae:	089b      	lsrs	r3, r3, #2
 8014db0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d00e      	beq.n	8014dd8 <osThreadNew+0xa8>
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	2b5b      	cmp	r3, #91	; 0x5b
 8014dc0:	d90a      	bls.n	8014dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d006      	beq.n	8014dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	695b      	ldr	r3, [r3, #20]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d002      	beq.n	8014dd8 <osThreadNew+0xa8>
        mem = 1;
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	61bb      	str	r3, [r7, #24]
 8014dd6:	e010      	b.n	8014dfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	689b      	ldr	r3, [r3, #8]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d10c      	bne.n	8014dfa <osThreadNew+0xca>
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d108      	bne.n	8014dfa <osThreadNew+0xca>
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	691b      	ldr	r3, [r3, #16]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d104      	bne.n	8014dfa <osThreadNew+0xca>
          mem = 0;
 8014df0:	2300      	movs	r3, #0
 8014df2:	61bb      	str	r3, [r7, #24]
 8014df4:	e001      	b.n	8014dfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014df6:	2300      	movs	r3, #0
 8014df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014dfa:	69bb      	ldr	r3, [r7, #24]
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	d110      	bne.n	8014e22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014e04:	687a      	ldr	r2, [r7, #4]
 8014e06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014e08:	9202      	str	r2, [sp, #8]
 8014e0a:	9301      	str	r3, [sp, #4]
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	6a3a      	ldr	r2, [r7, #32]
 8014e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e16:	68f8      	ldr	r0, [r7, #12]
 8014e18:	f001 f9b2 	bl	8016180 <xTaskCreateStatic>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	613b      	str	r3, [r7, #16]
 8014e20:	e013      	b.n	8014e4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014e22:	69bb      	ldr	r3, [r7, #24]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d110      	bne.n	8014e4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014e28:	6a3b      	ldr	r3, [r7, #32]
 8014e2a:	b29a      	uxth	r2, r3
 8014e2c:	f107 0310 	add.w	r3, r7, #16
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	69fb      	ldr	r3, [r7, #28]
 8014e34:	9300      	str	r3, [sp, #0]
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014e3a:	68f8      	ldr	r0, [r7, #12]
 8014e3c:	f001 f9fd 	bl	801623a <xTaskCreate>
 8014e40:	4603      	mov	r3, r0
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	d001      	beq.n	8014e4a <osThreadNew+0x11a>
            hTask = NULL;
 8014e46:	2300      	movs	r3, #0
 8014e48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014e4a:	693b      	ldr	r3, [r7, #16]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3728      	adds	r7, #40	; 0x28
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e5a:	f3ef 8305 	mrs	r3, IPSR
 8014e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8014e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d003      	beq.n	8014e6e <osThreadYield+0x1a>
    stat = osErrorISR;
 8014e66:	f06f 0305 	mvn.w	r3, #5
 8014e6a:	607b      	str	r3, [r7, #4]
 8014e6c:	e009      	b.n	8014e82 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8014e72:	4b07      	ldr	r3, [pc, #28]	; (8014e90 <osThreadYield+0x3c>)
 8014e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e78:	601a      	str	r2, [r3, #0]
 8014e7a:	f3bf 8f4f 	dsb	sy
 8014e7e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8014e82:	687b      	ldr	r3, [r7, #4]
}
 8014e84:	4618      	mov	r0, r3
 8014e86:	370c      	adds	r7, #12
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8e:	4770      	bx	lr
 8014e90:	e000ed04 	.word	0xe000ed04

08014e94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e9c:	f3ef 8305 	mrs	r3, IPSR
 8014ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8014ea2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d003      	beq.n	8014eb0 <osDelay+0x1c>
    stat = osErrorISR;
 8014ea8:	f06f 0305 	mvn.w	r3, #5
 8014eac:	60fb      	str	r3, [r7, #12]
 8014eae:	e007      	b.n	8014ec0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d002      	beq.n	8014ec0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f001 fb02 	bl	80164c4 <vTaskDelay>
    }
  }

  return (stat);
 8014ec0:	68fb      	ldr	r3, [r7, #12]
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3710      	adds	r7, #16
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	bd80      	pop	{r7, pc}

08014eca <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8014eca:	b580      	push	{r7, lr}
 8014ecc:	b086      	sub	sp, #24
 8014ece:	af00      	add	r7, sp, #0
 8014ed0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ed6:	f3ef 8305 	mrs	r3, IPSR
 8014eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8014edc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d12d      	bne.n	8014f3e <osEventFlagsNew+0x74>
    mem = -1;
 8014ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ee6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d015      	beq.n	8014f1a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	689b      	ldr	r3, [r3, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d006      	beq.n	8014f04 <osEventFlagsNew+0x3a>
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	2b1f      	cmp	r3, #31
 8014efc:	d902      	bls.n	8014f04 <osEventFlagsNew+0x3a>
        mem = 1;
 8014efe:	2301      	movs	r3, #1
 8014f00:	613b      	str	r3, [r7, #16]
 8014f02:	e00c      	b.n	8014f1e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	689b      	ldr	r3, [r3, #8]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d108      	bne.n	8014f1e <osEventFlagsNew+0x54>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d104      	bne.n	8014f1e <osEventFlagsNew+0x54>
          mem = 0;
 8014f14:	2300      	movs	r3, #0
 8014f16:	613b      	str	r3, [r7, #16]
 8014f18:	e001      	b.n	8014f1e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d106      	bne.n	8014f32 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	689b      	ldr	r3, [r3, #8]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 f91d 	bl	8015168 <xEventGroupCreateStatic>
 8014f2e:	6178      	str	r0, [r7, #20]
 8014f30:	e005      	b.n	8014f3e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d102      	bne.n	8014f3e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8014f38:	f000 f94d 	bl	80151d6 <xEventGroupCreate>
 8014f3c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8014f3e:	697b      	ldr	r3, [r7, #20]
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3718      	adds	r7, #24
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b086      	sub	sp, #24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d004      	beq.n	8014f66 <osEventFlagsSet+0x1e>
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d003      	beq.n	8014f6e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014f66:	f06f 0303 	mvn.w	r3, #3
 8014f6a:	617b      	str	r3, [r7, #20]
 8014f6c:	e028      	b.n	8014fc0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f6e:	f3ef 8305 	mrs	r3, IPSR
 8014f72:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f74:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d01d      	beq.n	8014fb6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8014f7e:	f107 0308 	add.w	r3, r7, #8
 8014f82:	461a      	mov	r2, r3
 8014f84:	6839      	ldr	r1, [r7, #0]
 8014f86:	6938      	ldr	r0, [r7, #16]
 8014f88:	f000 fb46 	bl	8015618 <xEventGroupSetBitsFromISR>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d103      	bne.n	8014f9a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8014f92:	f06f 0302 	mvn.w	r3, #2
 8014f96:	617b      	str	r3, [r7, #20]
 8014f98:	e012      	b.n	8014fc0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00d      	beq.n	8014fc0 <osEventFlagsSet+0x78>
 8014fa4:	4b09      	ldr	r3, [pc, #36]	; (8014fcc <osEventFlagsSet+0x84>)
 8014fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014faa:	601a      	str	r2, [r3, #0]
 8014fac:	f3bf 8f4f 	dsb	sy
 8014fb0:	f3bf 8f6f 	isb	sy
 8014fb4:	e004      	b.n	8014fc0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8014fb6:	6839      	ldr	r1, [r7, #0]
 8014fb8:	6938      	ldr	r0, [r7, #16]
 8014fba:	f000 fa65 	bl	8015488 <xEventGroupSetBits>
 8014fbe:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8014fc0:	697b      	ldr	r3, [r7, #20]
}
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	3718      	adds	r7, #24
 8014fc6:	46bd      	mov	sp, r7
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	e000ed04 	.word	0xe000ed04

08014fd0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b086      	sub	sp, #24
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d004      	beq.n	8014fee <osEventFlagsClear+0x1e>
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d003      	beq.n	8014ff6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8014fee:	f06f 0303 	mvn.w	r3, #3
 8014ff2:	617b      	str	r3, [r7, #20]
 8014ff4:	e019      	b.n	801502a <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ff6:	f3ef 8305 	mrs	r3, IPSR
 8014ffa:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ffc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d00e      	beq.n	8015020 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8015002:	6938      	ldr	r0, [r7, #16]
 8015004:	f000 fa1c 	bl	8015440 <xEventGroupGetBitsFromISR>
 8015008:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 801500a:	6839      	ldr	r1, [r7, #0]
 801500c:	6938      	ldr	r0, [r7, #16]
 801500e:	f000 fa03 	bl	8015418 <xEventGroupClearBitsFromISR>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d108      	bne.n	801502a <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8015018:	f06f 0302 	mvn.w	r3, #2
 801501c:	617b      	str	r3, [r7, #20]
 801501e:	e004      	b.n	801502a <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8015020:	6839      	ldr	r1, [r7, #0]
 8015022:	6938      	ldr	r0, [r7, #16]
 8015024:	f000 f9c0 	bl	80153a8 <xEventGroupClearBits>
 8015028:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801502a:	697b      	ldr	r3, [r7, #20]
}
 801502c:	4618      	mov	r0, r3
 801502e:	3718      	adds	r7, #24
 8015030:	46bd      	mov	sp, r7
 8015032:	bd80      	pop	{r7, pc}

08015034 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8015034:	b580      	push	{r7, lr}
 8015036:	b08c      	sub	sp, #48	; 0x30
 8015038:	af02      	add	r7, sp, #8
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	607a      	str	r2, [r7, #4]
 8015040:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8015046:	69bb      	ldr	r3, [r7, #24]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d004      	beq.n	8015056 <osEventFlagsWait+0x22>
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015052:	2b00      	cmp	r3, #0
 8015054:	d003      	beq.n	801505e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8015056:	f06f 0303 	mvn.w	r3, #3
 801505a:	61fb      	str	r3, [r7, #28]
 801505c:	e04b      	b.n	80150f6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801505e:	f3ef 8305 	mrs	r3, IPSR
 8015062:	617b      	str	r3, [r7, #20]
  return(result);
 8015064:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8015066:	2b00      	cmp	r3, #0
 8015068:	d003      	beq.n	8015072 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801506a:	f06f 0305 	mvn.w	r3, #5
 801506e:	61fb      	str	r3, [r7, #28]
 8015070:	e041      	b.n	80150f6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f003 0301 	and.w	r3, r3, #1
 8015078:	2b00      	cmp	r3, #0
 801507a:	d002      	beq.n	8015082 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801507c:	2301      	movs	r3, #1
 801507e:	627b      	str	r3, [r7, #36]	; 0x24
 8015080:	e001      	b.n	8015086 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8015082:	2300      	movs	r3, #0
 8015084:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f003 0302 	and.w	r3, r3, #2
 801508c:	2b00      	cmp	r3, #0
 801508e:	d002      	beq.n	8015096 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8015090:	2300      	movs	r3, #0
 8015092:	623b      	str	r3, [r7, #32]
 8015094:	e001      	b.n	801509a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8015096:	2301      	movs	r3, #1
 8015098:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	9300      	str	r3, [sp, #0]
 801509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a0:	6a3a      	ldr	r2, [r7, #32]
 80150a2:	68b9      	ldr	r1, [r7, #8]
 80150a4:	69b8      	ldr	r0, [r7, #24]
 80150a6:	f000 f8b1 	bl	801520c <xEventGroupWaitBits>
 80150aa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f003 0301 	and.w	r3, r3, #1
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d010      	beq.n	80150d8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80150b6:	68ba      	ldr	r2, [r7, #8]
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	4013      	ands	r3, r2
 80150bc:	68ba      	ldr	r2, [r7, #8]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d019      	beq.n	80150f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d003      	beq.n	80150d0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80150c8:	f06f 0301 	mvn.w	r3, #1
 80150cc:	61fb      	str	r3, [r7, #28]
 80150ce:	e012      	b.n	80150f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80150d0:	f06f 0302 	mvn.w	r3, #2
 80150d4:	61fb      	str	r3, [r7, #28]
 80150d6:	e00e      	b.n	80150f6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	69fb      	ldr	r3, [r7, #28]
 80150dc:	4013      	ands	r3, r2
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d109      	bne.n	80150f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d003      	beq.n	80150f0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80150e8:	f06f 0301 	mvn.w	r3, #1
 80150ec:	61fb      	str	r3, [r7, #28]
 80150ee:	e002      	b.n	80150f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80150f0:	f06f 0302 	mvn.w	r3, #2
 80150f4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80150f6:	69fb      	ldr	r3, [r7, #28]
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3728      	adds	r7, #40	; 0x28
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015100:	b480      	push	{r7}
 8015102:	b085      	sub	sp, #20
 8015104:	af00      	add	r7, sp, #0
 8015106:	60f8      	str	r0, [r7, #12]
 8015108:	60b9      	str	r1, [r7, #8]
 801510a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	4a07      	ldr	r2, [pc, #28]	; (801512c <vApplicationGetIdleTaskMemory+0x2c>)
 8015110:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	4a06      	ldr	r2, [pc, #24]	; (8015130 <vApplicationGetIdleTaskMemory+0x30>)
 8015116:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2280      	movs	r2, #128	; 0x80
 801511c:	601a      	str	r2, [r3, #0]
}
 801511e:	bf00      	nop
 8015120:	3714      	adds	r7, #20
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr
 801512a:	bf00      	nop
 801512c:	24001f84 	.word	0x24001f84
 8015130:	24001fe0 	.word	0x24001fe0

08015134 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015134:	b480      	push	{r7}
 8015136:	b085      	sub	sp, #20
 8015138:	af00      	add	r7, sp, #0
 801513a:	60f8      	str	r0, [r7, #12]
 801513c:	60b9      	str	r1, [r7, #8]
 801513e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	4a07      	ldr	r2, [pc, #28]	; (8015160 <vApplicationGetTimerTaskMemory+0x2c>)
 8015144:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	4a06      	ldr	r2, [pc, #24]	; (8015164 <vApplicationGetTimerTaskMemory+0x30>)
 801514a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015152:	601a      	str	r2, [r3, #0]
}
 8015154:	bf00      	nop
 8015156:	3714      	adds	r7, #20
 8015158:	46bd      	mov	sp, r7
 801515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515e:	4770      	bx	lr
 8015160:	240021e0 	.word	0x240021e0
 8015164:	2400223c 	.word	0x2400223c

08015168 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8015168:	b580      	push	{r7, lr}
 801516a:	b086      	sub	sp, #24
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d10a      	bne.n	801518c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801517a:	f383 8811 	msr	BASEPRI, r3
 801517e:	f3bf 8f6f 	isb	sy
 8015182:	f3bf 8f4f 	dsb	sy
 8015186:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015188:	bf00      	nop
 801518a:	e7fe      	b.n	801518a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801518c:	2320      	movs	r3, #32
 801518e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	2b20      	cmp	r3, #32
 8015194:	d00a      	beq.n	80151ac <xEventGroupCreateStatic+0x44>
	__asm volatile
 8015196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519a:	f383 8811 	msr	BASEPRI, r3
 801519e:	f3bf 8f6f 	isb	sy
 80151a2:	f3bf 8f4f 	dsb	sy
 80151a6:	60fb      	str	r3, [r7, #12]
}
 80151a8:	bf00      	nop
 80151aa:	e7fe      	b.n	80151aa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00a      	beq.n	80151cc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	2200      	movs	r2, #0
 80151ba:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	3304      	adds	r3, #4
 80151c0:	4618      	mov	r0, r3
 80151c2:	f000 fa3d 	bl	8015640 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	2201      	movs	r2, #1
 80151ca:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80151cc:	697b      	ldr	r3, [r7, #20]
	}
 80151ce:	4618      	mov	r0, r3
 80151d0:	3718      	adds	r7, #24
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}

080151d6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80151d6:	b580      	push	{r7, lr}
 80151d8:	b082      	sub	sp, #8
 80151da:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80151dc:	2020      	movs	r0, #32
 80151de:	f002 fd53 	bl	8017c88 <pvPortMalloc>
 80151e2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d00a      	beq.n	8015200 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2200      	movs	r2, #0
 80151ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	3304      	adds	r3, #4
 80151f4:	4618      	mov	r0, r3
 80151f6:	f000 fa23 	bl	8015640 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	2200      	movs	r2, #0
 80151fe:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8015200:	687b      	ldr	r3, [r7, #4]
	}
 8015202:	4618      	mov	r0, r3
 8015204:	3708      	adds	r7, #8
 8015206:	46bd      	mov	sp, r7
 8015208:	bd80      	pop	{r7, pc}
	...

0801520c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b090      	sub	sp, #64	; 0x40
 8015210:	af00      	add	r7, sp, #0
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801521e:	2300      	movs	r3, #0
 8015220:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8015222:	2300      	movs	r3, #0
 8015224:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d10a      	bne.n	8015242 <xEventGroupWaitBits+0x36>
	__asm volatile
 801522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015230:	f383 8811 	msr	BASEPRI, r3
 8015234:	f3bf 8f6f 	isb	sy
 8015238:	f3bf 8f4f 	dsb	sy
 801523c:	623b      	str	r3, [r7, #32]
}
 801523e:	bf00      	nop
 8015240:	e7fe      	b.n	8015240 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015248:	2b00      	cmp	r3, #0
 801524a:	d00a      	beq.n	8015262 <xEventGroupWaitBits+0x56>
	__asm volatile
 801524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015250:	f383 8811 	msr	BASEPRI, r3
 8015254:	f3bf 8f6f 	isb	sy
 8015258:	f3bf 8f4f 	dsb	sy
 801525c:	61fb      	str	r3, [r7, #28]
}
 801525e:	bf00      	nop
 8015260:	e7fe      	b.n	8015260 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d10a      	bne.n	801527e <xEventGroupWaitBits+0x72>
	__asm volatile
 8015268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801526c:	f383 8811 	msr	BASEPRI, r3
 8015270:	f3bf 8f6f 	isb	sy
 8015274:	f3bf 8f4f 	dsb	sy
 8015278:	61bb      	str	r3, [r7, #24]
}
 801527a:	bf00      	nop
 801527c:	e7fe      	b.n	801527c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801527e:	f001 fe51 	bl	8016f24 <xTaskGetSchedulerState>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d102      	bne.n	801528e <xEventGroupWaitBits+0x82>
 8015288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801528a:	2b00      	cmp	r3, #0
 801528c:	d101      	bne.n	8015292 <xEventGroupWaitBits+0x86>
 801528e:	2301      	movs	r3, #1
 8015290:	e000      	b.n	8015294 <xEventGroupWaitBits+0x88>
 8015292:	2300      	movs	r3, #0
 8015294:	2b00      	cmp	r3, #0
 8015296:	d10a      	bne.n	80152ae <xEventGroupWaitBits+0xa2>
	__asm volatile
 8015298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801529c:	f383 8811 	msr	BASEPRI, r3
 80152a0:	f3bf 8f6f 	isb	sy
 80152a4:	f3bf 8f4f 	dsb	sy
 80152a8:	617b      	str	r3, [r7, #20]
}
 80152aa:	bf00      	nop
 80152ac:	e7fe      	b.n	80152ac <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80152ae:	f001 f9a3 	bl	80165f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80152b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80152b8:	683a      	ldr	r2, [r7, #0]
 80152ba:	68b9      	ldr	r1, [r7, #8]
 80152bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80152be:	f000 f988 	bl	80155d2 <prvTestWaitCondition>
 80152c2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80152c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00e      	beq.n	80152e8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80152ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80152ce:	2300      	movs	r3, #0
 80152d0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d028      	beq.n	801532a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80152d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152da:	681a      	ldr	r2, [r3, #0]
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	43db      	mvns	r3, r3
 80152e0:	401a      	ands	r2, r3
 80152e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152e4:	601a      	str	r2, [r3, #0]
 80152e6:	e020      	b.n	801532a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80152e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d104      	bne.n	80152f8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80152ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80152f2:	2301      	movs	r3, #1
 80152f4:	633b      	str	r3, [r7, #48]	; 0x30
 80152f6:	e018      	b.n	801532a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d003      	beq.n	8015306 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80152fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015304:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d003      	beq.n	8015314 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801530e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015312:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8015314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015316:	1d18      	adds	r0, r3, #4
 8015318:	68ba      	ldr	r2, [r7, #8]
 801531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801531c:	4313      	orrs	r3, r2
 801531e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015320:	4619      	mov	r1, r3
 8015322:	f001 fb77 	bl	8016a14 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8015326:	2300      	movs	r3, #0
 8015328:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801532a:	f001 f973 	bl	8016614 <xTaskResumeAll>
 801532e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8015330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015332:	2b00      	cmp	r3, #0
 8015334:	d031      	beq.n	801539a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8015336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015338:	2b00      	cmp	r3, #0
 801533a:	d107      	bne.n	801534c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801533c:	4b19      	ldr	r3, [pc, #100]	; (80153a4 <xEventGroupWaitBits+0x198>)
 801533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015342:	601a      	str	r2, [r3, #0]
 8015344:	f3bf 8f4f 	dsb	sy
 8015348:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801534c:	f001 fe76 	bl	801703c <uxTaskResetEventItemValue>
 8015350:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8015352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015358:	2b00      	cmp	r3, #0
 801535a:	d11a      	bne.n	8015392 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801535c:	f002 fb72 	bl	8017a44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8015360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8015366:	683a      	ldr	r2, [r7, #0]
 8015368:	68b9      	ldr	r1, [r7, #8]
 801536a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801536c:	f000 f931 	bl	80155d2 <prvTestWaitCondition>
 8015370:	4603      	mov	r3, r0
 8015372:	2b00      	cmp	r3, #0
 8015374:	d009      	beq.n	801538a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d006      	beq.n	801538a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801537c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	43db      	mvns	r3, r3
 8015384:	401a      	ands	r2, r3
 8015386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015388:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801538a:	2301      	movs	r3, #1
 801538c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801538e:	f002 fb89 	bl	8017aa4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8015392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015398:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 801539a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801539c:	4618      	mov	r0, r3
 801539e:	3740      	adds	r7, #64	; 0x40
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	e000ed04 	.word	0xe000ed04

080153a8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b086      	sub	sp, #24
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d10a      	bne.n	80153d2 <xEventGroupClearBits+0x2a>
	__asm volatile
 80153bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153c0:	f383 8811 	msr	BASEPRI, r3
 80153c4:	f3bf 8f6f 	isb	sy
 80153c8:	f3bf 8f4f 	dsb	sy
 80153cc:	60fb      	str	r3, [r7, #12]
}
 80153ce:	bf00      	nop
 80153d0:	e7fe      	b.n	80153d0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d00a      	beq.n	80153f2 <xEventGroupClearBits+0x4a>
	__asm volatile
 80153dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153e0:	f383 8811 	msr	BASEPRI, r3
 80153e4:	f3bf 8f6f 	isb	sy
 80153e8:	f3bf 8f4f 	dsb	sy
 80153ec:	60bb      	str	r3, [r7, #8]
}
 80153ee:	bf00      	nop
 80153f0:	e7fe      	b.n	80153f0 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80153f2:	f002 fb27 	bl	8017a44 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	43db      	mvns	r3, r3
 8015404:	401a      	ands	r2, r3
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801540a:	f002 fb4b 	bl	8017aa4 <vPortExitCritical>

	return uxReturn;
 801540e:	693b      	ldr	r3, [r7, #16]
}
 8015410:	4618      	mov	r0, r3
 8015412:	3718      	adds	r7, #24
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015422:	2300      	movs	r3, #0
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	6879      	ldr	r1, [r7, #4]
 8015428:	4804      	ldr	r0, [pc, #16]	; (801543c <xEventGroupClearBitsFromISR+0x24>)
 801542a:	f002 f9c1 	bl	80177b0 <xTimerPendFunctionCallFromISR>
 801542e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8015430:	68fb      	ldr	r3, [r7, #12]
	}
 8015432:	4618      	mov	r0, r3
 8015434:	3710      	adds	r7, #16
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	080155b9 	.word	0x080155b9

08015440 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8015440:	b480      	push	{r7}
 8015442:	b089      	sub	sp, #36	; 0x24
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801544c:	f3ef 8211 	mrs	r2, BASEPRI
 8015450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015454:	f383 8811 	msr	BASEPRI, r3
 8015458:	f3bf 8f6f 	isb	sy
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	60fa      	str	r2, [r7, #12]
 8015462:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015464:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015466:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	617b      	str	r3, [r7, #20]
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015478:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 801547a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 801547c:	4618      	mov	r0, r3
 801547e:	3724      	adds	r7, #36	; 0x24
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b08e      	sub	sp, #56	; 0x38
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8015492:	2300      	movs	r3, #0
 8015494:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801549a:	2300      	movs	r3, #0
 801549c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d10a      	bne.n	80154ba <xEventGroupSetBits+0x32>
	__asm volatile
 80154a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	613b      	str	r3, [r7, #16]
}
 80154b6:	bf00      	nop
 80154b8:	e7fe      	b.n	80154b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d00a      	beq.n	80154da <xEventGroupSetBits+0x52>
	__asm volatile
 80154c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c8:	f383 8811 	msr	BASEPRI, r3
 80154cc:	f3bf 8f6f 	isb	sy
 80154d0:	f3bf 8f4f 	dsb	sy
 80154d4:	60fb      	str	r3, [r7, #12]
}
 80154d6:	bf00      	nop
 80154d8:	e7fe      	b.n	80154d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80154da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154dc:	3304      	adds	r3, #4
 80154de:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80154e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e2:	3308      	adds	r3, #8
 80154e4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80154e6:	f001 f887 	bl	80165f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80154ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ec:	68db      	ldr	r3, [r3, #12]
 80154ee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80154f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	431a      	orrs	r2, r3
 80154f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154fa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80154fc:	e03c      	b.n	8015578 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80154fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8015504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801550a:	2300      	movs	r3, #0
 801550c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801550e:	69bb      	ldr	r3, [r7, #24]
 8015510:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8015514:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801551c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015524:	2b00      	cmp	r3, #0
 8015526:	d108      	bne.n	801553a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8015528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	4013      	ands	r3, r2
 8015530:	2b00      	cmp	r3, #0
 8015532:	d00b      	beq.n	801554c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8015534:	2301      	movs	r3, #1
 8015536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015538:	e008      	b.n	801554c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	69bb      	ldr	r3, [r7, #24]
 8015540:	4013      	ands	r3, r2
 8015542:	69ba      	ldr	r2, [r7, #24]
 8015544:	429a      	cmp	r2, r3
 8015546:	d101      	bne.n	801554c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8015548:	2301      	movs	r3, #1
 801554a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554e:	2b00      	cmp	r3, #0
 8015550:	d010      	beq.n	8015574 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015558:	2b00      	cmp	r3, #0
 801555a:	d003      	beq.n	8015564 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801555e:	69bb      	ldr	r3, [r7, #24]
 8015560:	4313      	orrs	r3, r2
 8015562:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8015564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801556c:	4619      	mov	r1, r3
 801556e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015570:	f001 fb1c 	bl	8016bac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8015578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801557a:	6a3b      	ldr	r3, [r7, #32]
 801557c:	429a      	cmp	r2, r3
 801557e:	d1be      	bne.n	80154fe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8015580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015586:	43db      	mvns	r3, r3
 8015588:	401a      	ands	r2, r3
 801558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801558c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801558e:	f001 f841 	bl	8016614 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8015592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015594:	681b      	ldr	r3, [r3, #0]
}
 8015596:	4618      	mov	r0, r3
 8015598:	3738      	adds	r7, #56	; 0x38
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}

0801559e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801559e:	b580      	push	{r7, lr}
 80155a0:	b082      	sub	sp, #8
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	6078      	str	r0, [r7, #4]
 80155a6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80155a8:	6839      	ldr	r1, [r7, #0]
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f7ff ff6c 	bl	8015488 <xEventGroupSetBits>
}
 80155b0:	bf00      	nop
 80155b2:	3708      	adds	r7, #8
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
 80155c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80155c2:	6839      	ldr	r1, [r7, #0]
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f7ff feef 	bl	80153a8 <xEventGroupClearBits>
}
 80155ca:	bf00      	nop
 80155cc:	3708      	adds	r7, #8
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}

080155d2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80155d2:	b480      	push	{r7}
 80155d4:	b087      	sub	sp, #28
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	60f8      	str	r0, [r7, #12]
 80155da:	60b9      	str	r1, [r7, #8]
 80155dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80155de:	2300      	movs	r3, #0
 80155e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d107      	bne.n	80155f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80155e8:	68fa      	ldr	r2, [r7, #12]
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	4013      	ands	r3, r2
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d00a      	beq.n	8015608 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80155f2:	2301      	movs	r3, #1
 80155f4:	617b      	str	r3, [r7, #20]
 80155f6:	e007      	b.n	8015608 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80155f8:	68fa      	ldr	r2, [r7, #12]
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	4013      	ands	r3, r2
 80155fe:	68ba      	ldr	r2, [r7, #8]
 8015600:	429a      	cmp	r2, r3
 8015602:	d101      	bne.n	8015608 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8015604:	2301      	movs	r3, #1
 8015606:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8015608:	697b      	ldr	r3, [r7, #20]
}
 801560a:	4618      	mov	r0, r3
 801560c:	371c      	adds	r7, #28
 801560e:	46bd      	mov	sp, r7
 8015610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015614:	4770      	bx	lr
	...

08015618 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015618:	b580      	push	{r7, lr}
 801561a:	b086      	sub	sp, #24
 801561c:	af00      	add	r7, sp, #0
 801561e:	60f8      	str	r0, [r7, #12]
 8015620:	60b9      	str	r1, [r7, #8]
 8015622:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	68ba      	ldr	r2, [r7, #8]
 8015628:	68f9      	ldr	r1, [r7, #12]
 801562a:	4804      	ldr	r0, [pc, #16]	; (801563c <xEventGroupSetBitsFromISR+0x24>)
 801562c:	f002 f8c0 	bl	80177b0 <xTimerPendFunctionCallFromISR>
 8015630:	6178      	str	r0, [r7, #20]

		return xReturn;
 8015632:	697b      	ldr	r3, [r7, #20]
	}
 8015634:	4618      	mov	r0, r3
 8015636:	3718      	adds	r7, #24
 8015638:	46bd      	mov	sp, r7
 801563a:	bd80      	pop	{r7, pc}
 801563c:	0801559f 	.word	0x0801559f

08015640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f103 0208 	add.w	r2, r3, #8
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f103 0208 	add.w	r2, r3, #8
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f103 0208 	add.w	r2, r3, #8
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2200      	movs	r2, #0
 8015672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015674:	bf00      	nop
 8015676:	370c      	adds	r7, #12
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015680:	b480      	push	{r7}
 8015682:	b083      	sub	sp, #12
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801568e:	bf00      	nop
 8015690:	370c      	adds	r7, #12
 8015692:	46bd      	mov	sp, r7
 8015694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015698:	4770      	bx	lr

0801569a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801569a:	b480      	push	{r7}
 801569c:	b085      	sub	sp, #20
 801569e:	af00      	add	r7, sp, #0
 80156a0:	6078      	str	r0, [r7, #4]
 80156a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	68fa      	ldr	r2, [r7, #12]
 80156ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	689a      	ldr	r2, [r3, #8]
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	683a      	ldr	r2, [r7, #0]
 80156be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80156c6:	683b      	ldr	r3, [r7, #0]
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	601a      	str	r2, [r3, #0]
}
 80156d6:	bf00      	nop
 80156d8:	3714      	adds	r7, #20
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr

080156e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80156e2:	b480      	push	{r7}
 80156e4:	b085      	sub	sp, #20
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
 80156ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80156f8:	d103      	bne.n	8015702 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	691b      	ldr	r3, [r3, #16]
 80156fe:	60fb      	str	r3, [r7, #12]
 8015700:	e00c      	b.n	801571c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	3308      	adds	r3, #8
 8015706:	60fb      	str	r3, [r7, #12]
 8015708:	e002      	b.n	8015710 <vListInsert+0x2e>
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	685b      	ldr	r3, [r3, #4]
 801570e:	60fb      	str	r3, [r7, #12]
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	68ba      	ldr	r2, [r7, #8]
 8015718:	429a      	cmp	r2, r3
 801571a:	d2f6      	bcs.n	801570a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	685a      	ldr	r2, [r3, #4]
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	683a      	ldr	r2, [r7, #0]
 801572a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	683a      	ldr	r2, [r7, #0]
 8015736:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	1c5a      	adds	r2, r3, #1
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	601a      	str	r2, [r3, #0]
}
 8015748:	bf00      	nop
 801574a:	3714      	adds	r7, #20
 801574c:	46bd      	mov	sp, r7
 801574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015752:	4770      	bx	lr

08015754 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015754:	b480      	push	{r7}
 8015756:	b085      	sub	sp, #20
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	691b      	ldr	r3, [r3, #16]
 8015760:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	6892      	ldr	r2, [r2, #8]
 801576a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	689b      	ldr	r3, [r3, #8]
 8015770:	687a      	ldr	r2, [r7, #4]
 8015772:	6852      	ldr	r2, [r2, #4]
 8015774:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	687a      	ldr	r2, [r7, #4]
 801577c:	429a      	cmp	r2, r3
 801577e:	d103      	bne.n	8015788 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	689a      	ldr	r2, [r3, #8]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	2200      	movs	r2, #0
 801578c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	1e5a      	subs	r2, r3, #1
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
}
 801579c:	4618      	mov	r0, r3
 801579e:	3714      	adds	r7, #20
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr

080157a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b084      	sub	sp, #16
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
 80157b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d10a      	bne.n	80157d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80157bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157c0:	f383 8811 	msr	BASEPRI, r3
 80157c4:	f3bf 8f6f 	isb	sy
 80157c8:	f3bf 8f4f 	dsb	sy
 80157cc:	60bb      	str	r3, [r7, #8]
}
 80157ce:	bf00      	nop
 80157d0:	e7fe      	b.n	80157d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80157d2:	f002 f937 	bl	8017a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157de:	68f9      	ldr	r1, [r7, #12]
 80157e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80157e2:	fb01 f303 	mul.w	r3, r1, r3
 80157e6:	441a      	add	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	2200      	movs	r2, #0
 80157f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015802:	3b01      	subs	r3, #1
 8015804:	68f9      	ldr	r1, [r7, #12]
 8015806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015808:	fb01 f303 	mul.w	r3, r1, r3
 801580c:	441a      	add	r2, r3
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	22ff      	movs	r2, #255	; 0xff
 8015816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	22ff      	movs	r2, #255	; 0xff
 801581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d114      	bne.n	8015852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	691b      	ldr	r3, [r3, #16]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d01a      	beq.n	8015866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	3310      	adds	r3, #16
 8015834:	4618      	mov	r0, r3
 8015836:	f001 f955 	bl	8016ae4 <xTaskRemoveFromEventList>
 801583a:	4603      	mov	r3, r0
 801583c:	2b00      	cmp	r3, #0
 801583e:	d012      	beq.n	8015866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015840:	4b0c      	ldr	r3, [pc, #48]	; (8015874 <xQueueGenericReset+0xcc>)
 8015842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015846:	601a      	str	r2, [r3, #0]
 8015848:	f3bf 8f4f 	dsb	sy
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	e009      	b.n	8015866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	3310      	adds	r3, #16
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff fef2 	bl	8015640 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	3324      	adds	r3, #36	; 0x24
 8015860:	4618      	mov	r0, r3
 8015862:	f7ff feed 	bl	8015640 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015866:	f002 f91d 	bl	8017aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801586a:	2301      	movs	r3, #1
}
 801586c:	4618      	mov	r0, r3
 801586e:	3710      	adds	r7, #16
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}
 8015874:	e000ed04 	.word	0xe000ed04

08015878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08e      	sub	sp, #56	; 0x38
 801587c:	af02      	add	r7, sp, #8
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d10a      	bne.n	80158a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015890:	f383 8811 	msr	BASEPRI, r3
 8015894:	f3bf 8f6f 	isb	sy
 8015898:	f3bf 8f4f 	dsb	sy
 801589c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801589e:	bf00      	nop
 80158a0:	e7fe      	b.n	80158a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d10a      	bne.n	80158be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80158a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158ac:	f383 8811 	msr	BASEPRI, r3
 80158b0:	f3bf 8f6f 	isb	sy
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80158ba:	bf00      	nop
 80158bc:	e7fe      	b.n	80158bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d002      	beq.n	80158ca <xQueueGenericCreateStatic+0x52>
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d001      	beq.n	80158ce <xQueueGenericCreateStatic+0x56>
 80158ca:	2301      	movs	r3, #1
 80158cc:	e000      	b.n	80158d0 <xQueueGenericCreateStatic+0x58>
 80158ce:	2300      	movs	r3, #0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d10a      	bne.n	80158ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80158d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158d8:	f383 8811 	msr	BASEPRI, r3
 80158dc:	f3bf 8f6f 	isb	sy
 80158e0:	f3bf 8f4f 	dsb	sy
 80158e4:	623b      	str	r3, [r7, #32]
}
 80158e6:	bf00      	nop
 80158e8:	e7fe      	b.n	80158e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d102      	bne.n	80158f6 <xQueueGenericCreateStatic+0x7e>
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d101      	bne.n	80158fa <xQueueGenericCreateStatic+0x82>
 80158f6:	2301      	movs	r3, #1
 80158f8:	e000      	b.n	80158fc <xQueueGenericCreateStatic+0x84>
 80158fa:	2300      	movs	r3, #0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d10a      	bne.n	8015916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015904:	f383 8811 	msr	BASEPRI, r3
 8015908:	f3bf 8f6f 	isb	sy
 801590c:	f3bf 8f4f 	dsb	sy
 8015910:	61fb      	str	r3, [r7, #28]
}
 8015912:	bf00      	nop
 8015914:	e7fe      	b.n	8015914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015916:	2350      	movs	r3, #80	; 0x50
 8015918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	2b50      	cmp	r3, #80	; 0x50
 801591e:	d00a      	beq.n	8015936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015924:	f383 8811 	msr	BASEPRI, r3
 8015928:	f3bf 8f6f 	isb	sy
 801592c:	f3bf 8f4f 	dsb	sy
 8015930:	61bb      	str	r3, [r7, #24]
}
 8015932:	bf00      	nop
 8015934:	e7fe      	b.n	8015934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00d      	beq.n	801595e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015944:	2201      	movs	r2, #1
 8015946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801594a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	4613      	mov	r3, r2
 8015954:	687a      	ldr	r2, [r7, #4]
 8015956:	68b9      	ldr	r1, [r7, #8]
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f000 f805 	bl	8015968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015960:	4618      	mov	r0, r3
 8015962:	3730      	adds	r7, #48	; 0x30
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}

08015968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
 8015974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d103      	bne.n	8015984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	69ba      	ldr	r2, [r7, #24]
 8015980:	601a      	str	r2, [r3, #0]
 8015982:	e002      	b.n	801598a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	687a      	ldr	r2, [r7, #4]
 8015988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	68ba      	ldr	r2, [r7, #8]
 8015994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015996:	2101      	movs	r1, #1
 8015998:	69b8      	ldr	r0, [r7, #24]
 801599a:	f7ff ff05 	bl	80157a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	78fa      	ldrb	r2, [r7, #3]
 80159a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80159a6:	bf00      	nop
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bd80      	pop	{r7, pc}
	...

080159b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b08e      	sub	sp, #56	; 0x38
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
 80159bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80159be:	2300      	movs	r3, #0
 80159c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80159c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10a      	bne.n	80159e2 <xQueueGenericSend+0x32>
	__asm volatile
 80159cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d0:	f383 8811 	msr	BASEPRI, r3
 80159d4:	f3bf 8f6f 	isb	sy
 80159d8:	f3bf 8f4f 	dsb	sy
 80159dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80159de:	bf00      	nop
 80159e0:	e7fe      	b.n	80159e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d103      	bne.n	80159f0 <xQueueGenericSend+0x40>
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <xQueueGenericSend+0x44>
 80159f0:	2301      	movs	r3, #1
 80159f2:	e000      	b.n	80159f6 <xQueueGenericSend+0x46>
 80159f4:	2300      	movs	r3, #0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10a      	bne.n	8015a10 <xQueueGenericSend+0x60>
	__asm volatile
 80159fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fe:	f383 8811 	msr	BASEPRI, r3
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	f3bf 8f4f 	dsb	sy
 8015a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a0c:	bf00      	nop
 8015a0e:	e7fe      	b.n	8015a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015a10:	683b      	ldr	r3, [r7, #0]
 8015a12:	2b02      	cmp	r3, #2
 8015a14:	d103      	bne.n	8015a1e <xQueueGenericSend+0x6e>
 8015a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a1a:	2b01      	cmp	r3, #1
 8015a1c:	d101      	bne.n	8015a22 <xQueueGenericSend+0x72>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	e000      	b.n	8015a24 <xQueueGenericSend+0x74>
 8015a22:	2300      	movs	r3, #0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d10a      	bne.n	8015a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8015a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2c:	f383 8811 	msr	BASEPRI, r3
 8015a30:	f3bf 8f6f 	isb	sy
 8015a34:	f3bf 8f4f 	dsb	sy
 8015a38:	623b      	str	r3, [r7, #32]
}
 8015a3a:	bf00      	nop
 8015a3c:	e7fe      	b.n	8015a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a3e:	f001 fa71 	bl	8016f24 <xTaskGetSchedulerState>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <xQueueGenericSend+0x9e>
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d101      	bne.n	8015a52 <xQueueGenericSend+0xa2>
 8015a4e:	2301      	movs	r3, #1
 8015a50:	e000      	b.n	8015a54 <xQueueGenericSend+0xa4>
 8015a52:	2300      	movs	r3, #0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d10a      	bne.n	8015a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8015a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5c:	f383 8811 	msr	BASEPRI, r3
 8015a60:	f3bf 8f6f 	isb	sy
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	61fb      	str	r3, [r7, #28]
}
 8015a6a:	bf00      	nop
 8015a6c:	e7fe      	b.n	8015a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015a6e:	f001 ffe9 	bl	8017a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	d302      	bcc.n	8015a84 <xQueueGenericSend+0xd4>
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	2b02      	cmp	r3, #2
 8015a82:	d129      	bne.n	8015ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	68b9      	ldr	r1, [r7, #8]
 8015a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a8a:	f000 fa0b 	bl	8015ea4 <prvCopyDataToQueue>
 8015a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d010      	beq.n	8015aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	3324      	adds	r3, #36	; 0x24
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f001 f821 	bl	8016ae4 <xTaskRemoveFromEventList>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d013      	beq.n	8015ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015aa8:	4b3f      	ldr	r3, [pc, #252]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aae:	601a      	str	r2, [r3, #0]
 8015ab0:	f3bf 8f4f 	dsb	sy
 8015ab4:	f3bf 8f6f 	isb	sy
 8015ab8:	e00a      	b.n	8015ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d007      	beq.n	8015ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ac0:	4b39      	ldr	r3, [pc, #228]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	f3bf 8f4f 	dsb	sy
 8015acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015ad0:	f001 ffe8 	bl	8017aa4 <vPortExitCritical>
				return pdPASS;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	e063      	b.n	8015ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d103      	bne.n	8015ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015ade:	f001 ffe1 	bl	8017aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	e05c      	b.n	8015ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d106      	bne.n	8015afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015aec:	f107 0314 	add.w	r3, r7, #20
 8015af0:	4618      	mov	r0, r3
 8015af2:	f001 f8bd 	bl	8016c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015af6:	2301      	movs	r3, #1
 8015af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015afa:	f001 ffd3 	bl	8017aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015afe:	f000 fd7b 	bl	80165f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b02:	f001 ff9f 	bl	8017a44 <vPortEnterCritical>
 8015b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b0c:	b25b      	sxtb	r3, r3
 8015b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b12:	d103      	bne.n	8015b1c <xQueueGenericSend+0x16c>
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	2200      	movs	r2, #0
 8015b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b22:	b25b      	sxtb	r3, r3
 8015b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b28:	d103      	bne.n	8015b32 <xQueueGenericSend+0x182>
 8015b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015b32:	f001 ffb7 	bl	8017aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b36:	1d3a      	adds	r2, r7, #4
 8015b38:	f107 0314 	add.w	r3, r7, #20
 8015b3c:	4611      	mov	r1, r2
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f001 f8ac 	bl	8016c9c <xTaskCheckForTimeOut>
 8015b44:	4603      	mov	r3, r0
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d124      	bne.n	8015b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b4c:	f000 faa2 	bl	8016094 <prvIsQueueFull>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d018      	beq.n	8015b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b58:	3310      	adds	r3, #16
 8015b5a:	687a      	ldr	r2, [r7, #4]
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f000 ff34 	bl	80169cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b66:	f000 fa2d 	bl	8015fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015b6a:	f000 fd53 	bl	8016614 <xTaskResumeAll>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f47f af7c 	bne.w	8015a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015b76:	4b0c      	ldr	r3, [pc, #48]	; (8015ba8 <xQueueGenericSend+0x1f8>)
 8015b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b7c:	601a      	str	r2, [r3, #0]
 8015b7e:	f3bf 8f4f 	dsb	sy
 8015b82:	f3bf 8f6f 	isb	sy
 8015b86:	e772      	b.n	8015a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b8a:	f000 fa1b 	bl	8015fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b8e:	f000 fd41 	bl	8016614 <xTaskResumeAll>
 8015b92:	e76c      	b.n	8015a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b96:	f000 fa15 	bl	8015fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015b9a:	f000 fd3b 	bl	8016614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3738      	adds	r7, #56	; 0x38
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	e000ed04 	.word	0xe000ed04

08015bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b090      	sub	sp, #64	; 0x40
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d10a      	bne.n	8015bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc8:	f383 8811 	msr	BASEPRI, r3
 8015bcc:	f3bf 8f6f 	isb	sy
 8015bd0:	f3bf 8f4f 	dsb	sy
 8015bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015bd6:	bf00      	nop
 8015bd8:	e7fe      	b.n	8015bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d103      	bne.n	8015be8 <xQueueGenericSendFromISR+0x3c>
 8015be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d101      	bne.n	8015bec <xQueueGenericSendFromISR+0x40>
 8015be8:	2301      	movs	r3, #1
 8015bea:	e000      	b.n	8015bee <xQueueGenericSendFromISR+0x42>
 8015bec:	2300      	movs	r3, #0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d10a      	bne.n	8015c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8015bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf6:	f383 8811 	msr	BASEPRI, r3
 8015bfa:	f3bf 8f6f 	isb	sy
 8015bfe:	f3bf 8f4f 	dsb	sy
 8015c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015c04:	bf00      	nop
 8015c06:	e7fe      	b.n	8015c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d103      	bne.n	8015c16 <xQueueGenericSendFromISR+0x6a>
 8015c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d101      	bne.n	8015c1a <xQueueGenericSendFromISR+0x6e>
 8015c16:	2301      	movs	r3, #1
 8015c18:	e000      	b.n	8015c1c <xQueueGenericSendFromISR+0x70>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d10a      	bne.n	8015c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	623b      	str	r3, [r7, #32]
}
 8015c32:	bf00      	nop
 8015c34:	e7fe      	b.n	8015c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c36:	f001 ffe7 	bl	8017c08 <vPortValidateInterruptPriority>
	__asm volatile
 8015c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c42:	f383 8811 	msr	BASEPRI, r3
 8015c46:	f3bf 8f6f 	isb	sy
 8015c4a:	f3bf 8f4f 	dsb	sy
 8015c4e:	61fa      	str	r2, [r7, #28]
 8015c50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8015c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d302      	bcc.n	8015c68 <xQueueGenericSendFromISR+0xbc>
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	2b02      	cmp	r3, #2
 8015c66:	d12f      	bne.n	8015cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015c78:	683a      	ldr	r2, [r7, #0]
 8015c7a:	68b9      	ldr	r1, [r7, #8]
 8015c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c7e:	f000 f911 	bl	8015ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8015c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015c8a:	d112      	bne.n	8015cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d016      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c96:	3324      	adds	r3, #36	; 0x24
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f000 ff23 	bl	8016ae4 <xTaskRemoveFromEventList>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00e      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00b      	beq.n	8015cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2201      	movs	r2, #1
 8015cae:	601a      	str	r2, [r3, #0]
 8015cb0:	e007      	b.n	8015cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	b25a      	sxtb	r2, r3
 8015cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8015cc6:	e001      	b.n	8015ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	f383 8811 	msr	BASEPRI, r3
}
 8015cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3740      	adds	r7, #64	; 0x40
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
	...

08015ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b08c      	sub	sp, #48	; 0x30
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d10a      	bne.n	8015d14 <xQueueReceive+0x30>
	__asm volatile
 8015cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d02:	f383 8811 	msr	BASEPRI, r3
 8015d06:	f3bf 8f6f 	isb	sy
 8015d0a:	f3bf 8f4f 	dsb	sy
 8015d0e:	623b      	str	r3, [r7, #32]
}
 8015d10:	bf00      	nop
 8015d12:	e7fe      	b.n	8015d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d103      	bne.n	8015d22 <xQueueReceive+0x3e>
 8015d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d101      	bne.n	8015d26 <xQueueReceive+0x42>
 8015d22:	2301      	movs	r3, #1
 8015d24:	e000      	b.n	8015d28 <xQueueReceive+0x44>
 8015d26:	2300      	movs	r3, #0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10a      	bne.n	8015d42 <xQueueReceive+0x5e>
	__asm volatile
 8015d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	61fb      	str	r3, [r7, #28]
}
 8015d3e:	bf00      	nop
 8015d40:	e7fe      	b.n	8015d40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015d42:	f001 f8ef 	bl	8016f24 <xTaskGetSchedulerState>
 8015d46:	4603      	mov	r3, r0
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d102      	bne.n	8015d52 <xQueueReceive+0x6e>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d101      	bne.n	8015d56 <xQueueReceive+0x72>
 8015d52:	2301      	movs	r3, #1
 8015d54:	e000      	b.n	8015d58 <xQueueReceive+0x74>
 8015d56:	2300      	movs	r3, #0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10a      	bne.n	8015d72 <xQueueReceive+0x8e>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	61bb      	str	r3, [r7, #24]
}
 8015d6e:	bf00      	nop
 8015d70:	e7fe      	b.n	8015d70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015d72:	f001 fe67 	bl	8017a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d01f      	beq.n	8015dc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015d82:	68b9      	ldr	r1, [r7, #8]
 8015d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d86:	f000 f8f7 	bl	8015f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8c:	1e5a      	subs	r2, r3, #1
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d94:	691b      	ldr	r3, [r3, #16]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d00f      	beq.n	8015dba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d9c:	3310      	adds	r3, #16
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f000 fea0 	bl	8016ae4 <xTaskRemoveFromEventList>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d007      	beq.n	8015dba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015daa:	4b3d      	ldr	r3, [pc, #244]	; (8015ea0 <xQueueReceive+0x1bc>)
 8015dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015db0:	601a      	str	r2, [r3, #0]
 8015db2:	f3bf 8f4f 	dsb	sy
 8015db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015dba:	f001 fe73 	bl	8017aa4 <vPortExitCritical>
				return pdPASS;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	e069      	b.n	8015e96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d103      	bne.n	8015dd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015dc8:	f001 fe6c 	bl	8017aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	e062      	b.n	8015e96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d106      	bne.n	8015de4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015dd6:	f107 0310 	add.w	r3, r7, #16
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f000 ff48 	bl	8016c70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015de0:	2301      	movs	r3, #1
 8015de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015de4:	f001 fe5e 	bl	8017aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015de8:	f000 fc06 	bl	80165f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015dec:	f001 fe2a 	bl	8017a44 <vPortEnterCritical>
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015df6:	b25b      	sxtb	r3, r3
 8015df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015dfc:	d103      	bne.n	8015e06 <xQueueReceive+0x122>
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	2200      	movs	r2, #0
 8015e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e0c:	b25b      	sxtb	r3, r3
 8015e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e12:	d103      	bne.n	8015e1c <xQueueReceive+0x138>
 8015e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e16:	2200      	movs	r2, #0
 8015e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015e1c:	f001 fe42 	bl	8017aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015e20:	1d3a      	adds	r2, r7, #4
 8015e22:	f107 0310 	add.w	r3, r7, #16
 8015e26:	4611      	mov	r1, r2
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f000 ff37 	bl	8016c9c <xTaskCheckForTimeOut>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d123      	bne.n	8015e7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e36:	f000 f917 	bl	8016068 <prvIsQueueEmpty>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d017      	beq.n	8015e70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e42:	3324      	adds	r3, #36	; 0x24
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	4611      	mov	r1, r2
 8015e48:	4618      	mov	r0, r3
 8015e4a:	f000 fdbf 	bl	80169cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e50:	f000 f8b8 	bl	8015fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015e54:	f000 fbde 	bl	8016614 <xTaskResumeAll>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d189      	bne.n	8015d72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8015e5e:	4b10      	ldr	r3, [pc, #64]	; (8015ea0 <xQueueReceive+0x1bc>)
 8015e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e64:	601a      	str	r2, [r3, #0]
 8015e66:	f3bf 8f4f 	dsb	sy
 8015e6a:	f3bf 8f6f 	isb	sy
 8015e6e:	e780      	b.n	8015d72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e72:	f000 f8a7 	bl	8015fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015e76:	f000 fbcd 	bl	8016614 <xTaskResumeAll>
 8015e7a:	e77a      	b.n	8015d72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e7e:	f000 f8a1 	bl	8015fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015e82:	f000 fbc7 	bl	8016614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e88:	f000 f8ee 	bl	8016068 <prvIsQueueEmpty>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	f43f af6f 	beq.w	8015d72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3730      	adds	r7, #48	; 0x30
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	e000ed04 	.word	0xe000ed04

08015ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d10d      	bne.n	8015ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d14d      	bne.n	8015f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	689b      	ldr	r3, [r3, #8]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f001 f846 	bl	8016f60 <xTaskPriorityDisinherit>
 8015ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2200      	movs	r2, #0
 8015eda:	609a      	str	r2, [r3, #8]
 8015edc:	e043      	b.n	8015f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d119      	bne.n	8015f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	6858      	ldr	r0, [r3, #4]
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015eec:	461a      	mov	r2, r3
 8015eee:	68b9      	ldr	r1, [r7, #8]
 8015ef0:	f002 f8de 	bl	80180b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	685a      	ldr	r2, [r3, #4]
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015efc:	441a      	add	r2, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	685a      	ldr	r2, [r3, #4]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	689b      	ldr	r3, [r3, #8]
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d32b      	bcc.n	8015f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	681a      	ldr	r2, [r3, #0]
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	605a      	str	r2, [r3, #4]
 8015f16:	e026      	b.n	8015f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	68d8      	ldr	r0, [r3, #12]
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f20:	461a      	mov	r2, r3
 8015f22:	68b9      	ldr	r1, [r7, #8]
 8015f24:	f002 f8c4 	bl	80180b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	68da      	ldr	r2, [r3, #12]
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f30:	425b      	negs	r3, r3
 8015f32:	441a      	add	r2, r3
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	68da      	ldr	r2, [r3, #12]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d207      	bcs.n	8015f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	689a      	ldr	r2, [r3, #8]
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f4c:	425b      	negs	r3, r3
 8015f4e:	441a      	add	r2, r3
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d105      	bne.n	8015f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d002      	beq.n	8015f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	3b01      	subs	r3, #1
 8015f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015f66:	693b      	ldr	r3, [r7, #16]
 8015f68:	1c5a      	adds	r2, r3, #1
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015f6e:	697b      	ldr	r3, [r7, #20]
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3718      	adds	r7, #24
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d018      	beq.n	8015fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	68da      	ldr	r2, [r3, #12]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f92:	441a      	add	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	68da      	ldr	r2, [r3, #12]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	689b      	ldr	r3, [r3, #8]
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d303      	bcc.n	8015fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	68d9      	ldr	r1, [r3, #12]
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	6838      	ldr	r0, [r7, #0]
 8015fb8:	f002 f87a 	bl	80180b0 <memcpy>
	}
}
 8015fbc:	bf00      	nop
 8015fbe:	3708      	adds	r7, #8
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	bd80      	pop	{r7, pc}

08015fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b084      	sub	sp, #16
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015fcc:	f001 fd3a 	bl	8017a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015fd8:	e011      	b.n	8015ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d012      	beq.n	8016008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	3324      	adds	r3, #36	; 0x24
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f000 fd7c 	bl	8016ae4 <xTaskRemoveFromEventList>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d001      	beq.n	8015ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015ff2:	f000 feb5 	bl	8016d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015ff6:	7bfb      	ldrb	r3, [r7, #15]
 8015ff8:	3b01      	subs	r3, #1
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016002:	2b00      	cmp	r3, #0
 8016004:	dce9      	bgt.n	8015fda <prvUnlockQueue+0x16>
 8016006:	e000      	b.n	801600a <prvUnlockQueue+0x46>
					break;
 8016008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	22ff      	movs	r2, #255	; 0xff
 801600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016012:	f001 fd47 	bl	8017aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016016:	f001 fd15 	bl	8017a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016022:	e011      	b.n	8016048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	691b      	ldr	r3, [r3, #16]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d012      	beq.n	8016052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	3310      	adds	r3, #16
 8016030:	4618      	mov	r0, r3
 8016032:	f000 fd57 	bl	8016ae4 <xTaskRemoveFromEventList>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801603c:	f000 fe90 	bl	8016d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016040:	7bbb      	ldrb	r3, [r7, #14]
 8016042:	3b01      	subs	r3, #1
 8016044:	b2db      	uxtb	r3, r3
 8016046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801604c:	2b00      	cmp	r3, #0
 801604e:	dce9      	bgt.n	8016024 <prvUnlockQueue+0x60>
 8016050:	e000      	b.n	8016054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	22ff      	movs	r2, #255	; 0xff
 8016058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801605c:	f001 fd22 	bl	8017aa4 <vPortExitCritical>
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016070:	f001 fce8 	bl	8017a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016078:	2b00      	cmp	r3, #0
 801607a:	d102      	bne.n	8016082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801607c:	2301      	movs	r3, #1
 801607e:	60fb      	str	r3, [r7, #12]
 8016080:	e001      	b.n	8016086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016082:	2300      	movs	r3, #0
 8016084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016086:	f001 fd0d 	bl	8017aa4 <vPortExitCritical>

	return xReturn;
 801608a:	68fb      	ldr	r3, [r7, #12]
}
 801608c:	4618      	mov	r0, r3
 801608e:	3710      	adds	r7, #16
 8016090:	46bd      	mov	sp, r7
 8016092:	bd80      	pop	{r7, pc}

08016094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b084      	sub	sp, #16
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801609c:	f001 fcd2 	bl	8017a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d102      	bne.n	80160b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80160ac:	2301      	movs	r3, #1
 80160ae:	60fb      	str	r3, [r7, #12]
 80160b0:	e001      	b.n	80160b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80160b2:	2300      	movs	r3, #0
 80160b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80160b6:	f001 fcf5 	bl	8017aa4 <vPortExitCritical>

	return xReturn;
 80160ba:	68fb      	ldr	r3, [r7, #12]
}
 80160bc:	4618      	mov	r0, r3
 80160be:	3710      	adds	r7, #16
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80160c4:	b480      	push	{r7}
 80160c6:	b085      	sub	sp, #20
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160ce:	2300      	movs	r3, #0
 80160d0:	60fb      	str	r3, [r7, #12]
 80160d2:	e014      	b.n	80160fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80160d4:	4a0f      	ldr	r2, [pc, #60]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10b      	bne.n	80160f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80160e0:	490c      	ldr	r1, [pc, #48]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	683a      	ldr	r2, [r7, #0]
 80160e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80160ea:	4a0a      	ldr	r2, [pc, #40]	; (8016114 <vQueueAddToRegistry+0x50>)
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	00db      	lsls	r3, r3, #3
 80160f0:	4413      	add	r3, r2
 80160f2:	687a      	ldr	r2, [r7, #4]
 80160f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80160f6:	e006      	b.n	8016106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	3301      	adds	r3, #1
 80160fc:	60fb      	str	r3, [r7, #12]
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	2b07      	cmp	r3, #7
 8016102:	d9e7      	bls.n	80160d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016104:	bf00      	nop
 8016106:	bf00      	nop
 8016108:	3714      	adds	r7, #20
 801610a:	46bd      	mov	sp, r7
 801610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016110:	4770      	bx	lr
 8016112:	bf00      	nop
 8016114:	2400263c 	.word	0x2400263c

08016118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016118:	b580      	push	{r7, lr}
 801611a:	b086      	sub	sp, #24
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016128:	f001 fc8c 	bl	8017a44 <vPortEnterCritical>
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016132:	b25b      	sxtb	r3, r3
 8016134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016138:	d103      	bne.n	8016142 <vQueueWaitForMessageRestricted+0x2a>
 801613a:	697b      	ldr	r3, [r7, #20]
 801613c:	2200      	movs	r2, #0
 801613e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016148:	b25b      	sxtb	r3, r3
 801614a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801614e:	d103      	bne.n	8016158 <vQueueWaitForMessageRestricted+0x40>
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	2200      	movs	r2, #0
 8016154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016158:	f001 fca4 	bl	8017aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016160:	2b00      	cmp	r3, #0
 8016162:	d106      	bne.n	8016172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016164:	697b      	ldr	r3, [r7, #20]
 8016166:	3324      	adds	r3, #36	; 0x24
 8016168:	687a      	ldr	r2, [r7, #4]
 801616a:	68b9      	ldr	r1, [r7, #8]
 801616c:	4618      	mov	r0, r3
 801616e:	f000 fc8d 	bl	8016a8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016172:	6978      	ldr	r0, [r7, #20]
 8016174:	f7ff ff26 	bl	8015fc4 <prvUnlockQueue>
	}
 8016178:	bf00      	nop
 801617a:	3718      	adds	r7, #24
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}

08016180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016180:	b580      	push	{r7, lr}
 8016182:	b08e      	sub	sp, #56	; 0x38
 8016184:	af04      	add	r7, sp, #16
 8016186:	60f8      	str	r0, [r7, #12]
 8016188:	60b9      	str	r1, [r7, #8]
 801618a:	607a      	str	r2, [r7, #4]
 801618c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016190:	2b00      	cmp	r3, #0
 8016192:	d10a      	bne.n	80161aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8016194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016198:	f383 8811 	msr	BASEPRI, r3
 801619c:	f3bf 8f6f 	isb	sy
 80161a0:	f3bf 8f4f 	dsb	sy
 80161a4:	623b      	str	r3, [r7, #32]
}
 80161a6:	bf00      	nop
 80161a8:	e7fe      	b.n	80161a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80161aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d10a      	bne.n	80161c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80161b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b4:	f383 8811 	msr	BASEPRI, r3
 80161b8:	f3bf 8f6f 	isb	sy
 80161bc:	f3bf 8f4f 	dsb	sy
 80161c0:	61fb      	str	r3, [r7, #28]
}
 80161c2:	bf00      	nop
 80161c4:	e7fe      	b.n	80161c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80161c6:	235c      	movs	r3, #92	; 0x5c
 80161c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	2b5c      	cmp	r3, #92	; 0x5c
 80161ce:	d00a      	beq.n	80161e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80161d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d4:	f383 8811 	msr	BASEPRI, r3
 80161d8:	f3bf 8f6f 	isb	sy
 80161dc:	f3bf 8f4f 	dsb	sy
 80161e0:	61bb      	str	r3, [r7, #24]
}
 80161e2:	bf00      	nop
 80161e4:	e7fe      	b.n	80161e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80161e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80161e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d01e      	beq.n	801622c <xTaskCreateStatic+0xac>
 80161ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d01b      	beq.n	801622c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80161f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80161f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80161fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016200:	2202      	movs	r2, #2
 8016202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016206:	2300      	movs	r3, #0
 8016208:	9303      	str	r3, [sp, #12]
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	9302      	str	r3, [sp, #8]
 801620e:	f107 0314 	add.w	r3, r7, #20
 8016212:	9301      	str	r3, [sp, #4]
 8016214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	687a      	ldr	r2, [r7, #4]
 801621c:	68b9      	ldr	r1, [r7, #8]
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f000 f850 	bl	80162c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016226:	f000 f8dd 	bl	80163e4 <prvAddNewTaskToReadyList>
 801622a:	e001      	b.n	8016230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801622c:	2300      	movs	r3, #0
 801622e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016230:	697b      	ldr	r3, [r7, #20]
	}
 8016232:	4618      	mov	r0, r3
 8016234:	3728      	adds	r7, #40	; 0x28
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}

0801623a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801623a:	b580      	push	{r7, lr}
 801623c:	b08c      	sub	sp, #48	; 0x30
 801623e:	af04      	add	r7, sp, #16
 8016240:	60f8      	str	r0, [r7, #12]
 8016242:	60b9      	str	r1, [r7, #8]
 8016244:	603b      	str	r3, [r7, #0]
 8016246:	4613      	mov	r3, r2
 8016248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801624a:	88fb      	ldrh	r3, [r7, #6]
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	4618      	mov	r0, r3
 8016250:	f001 fd1a 	bl	8017c88 <pvPortMalloc>
 8016254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016256:	697b      	ldr	r3, [r7, #20]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d00e      	beq.n	801627a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801625c:	205c      	movs	r0, #92	; 0x5c
 801625e:	f001 fd13 	bl	8017c88 <pvPortMalloc>
 8016262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016264:	69fb      	ldr	r3, [r7, #28]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d003      	beq.n	8016272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801626a:	69fb      	ldr	r3, [r7, #28]
 801626c:	697a      	ldr	r2, [r7, #20]
 801626e:	631a      	str	r2, [r3, #48]	; 0x30
 8016270:	e005      	b.n	801627e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016272:	6978      	ldr	r0, [r7, #20]
 8016274:	f001 fdd4 	bl	8017e20 <vPortFree>
 8016278:	e001      	b.n	801627e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801627a:	2300      	movs	r3, #0
 801627c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d017      	beq.n	80162b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2200      	movs	r2, #0
 8016288:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801628c:	88fa      	ldrh	r2, [r7, #6]
 801628e:	2300      	movs	r3, #0
 8016290:	9303      	str	r3, [sp, #12]
 8016292:	69fb      	ldr	r3, [r7, #28]
 8016294:	9302      	str	r3, [sp, #8]
 8016296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016298:	9301      	str	r3, [sp, #4]
 801629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	68b9      	ldr	r1, [r7, #8]
 80162a2:	68f8      	ldr	r0, [r7, #12]
 80162a4:	f000 f80e 	bl	80162c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80162a8:	69f8      	ldr	r0, [r7, #28]
 80162aa:	f000 f89b 	bl	80163e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80162ae:	2301      	movs	r3, #1
 80162b0:	61bb      	str	r3, [r7, #24]
 80162b2:	e002      	b.n	80162ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80162b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80162ba:	69bb      	ldr	r3, [r7, #24]
	}
 80162bc:	4618      	mov	r0, r3
 80162be:	3720      	adds	r7, #32
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b088      	sub	sp, #32
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	60f8      	str	r0, [r7, #12]
 80162cc:	60b9      	str	r1, [r7, #8]
 80162ce:	607a      	str	r2, [r7, #4]
 80162d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	461a      	mov	r2, r3
 80162dc:	21a5      	movs	r1, #165	; 0xa5
 80162de:	f001 fef5 	bl	80180cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80162e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80162e6:	6879      	ldr	r1, [r7, #4]
 80162e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80162ec:	440b      	add	r3, r1
 80162ee:	009b      	lsls	r3, r3, #2
 80162f0:	4413      	add	r3, r2
 80162f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80162f4:	69bb      	ldr	r3, [r7, #24]
 80162f6:	f023 0307 	bic.w	r3, r3, #7
 80162fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80162fc:	69bb      	ldr	r3, [r7, #24]
 80162fe:	f003 0307 	and.w	r3, r3, #7
 8016302:	2b00      	cmp	r3, #0
 8016304:	d00a      	beq.n	801631c <prvInitialiseNewTask+0x58>
	__asm volatile
 8016306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801630a:	f383 8811 	msr	BASEPRI, r3
 801630e:	f3bf 8f6f 	isb	sy
 8016312:	f3bf 8f4f 	dsb	sy
 8016316:	617b      	str	r3, [r7, #20]
}
 8016318:	bf00      	nop
 801631a:	e7fe      	b.n	801631a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d01f      	beq.n	8016362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016322:	2300      	movs	r3, #0
 8016324:	61fb      	str	r3, [r7, #28]
 8016326:	e012      	b.n	801634e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	69fb      	ldr	r3, [r7, #28]
 801632c:	4413      	add	r3, r2
 801632e:	7819      	ldrb	r1, [r3, #0]
 8016330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016332:	69fb      	ldr	r3, [r7, #28]
 8016334:	4413      	add	r3, r2
 8016336:	3334      	adds	r3, #52	; 0x34
 8016338:	460a      	mov	r2, r1
 801633a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801633c:	68ba      	ldr	r2, [r7, #8]
 801633e:	69fb      	ldr	r3, [r7, #28]
 8016340:	4413      	add	r3, r2
 8016342:	781b      	ldrb	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d006      	beq.n	8016356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	3301      	adds	r3, #1
 801634c:	61fb      	str	r3, [r7, #28]
 801634e:	69fb      	ldr	r3, [r7, #28]
 8016350:	2b0f      	cmp	r3, #15
 8016352:	d9e9      	bls.n	8016328 <prvInitialiseNewTask+0x64>
 8016354:	e000      	b.n	8016358 <prvInitialiseNewTask+0x94>
			{
				break;
 8016356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635a:	2200      	movs	r2, #0
 801635c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016360:	e003      	b.n	801636a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	2200      	movs	r2, #0
 8016366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636c:	2b37      	cmp	r3, #55	; 0x37
 801636e:	d901      	bls.n	8016374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016370:	2337      	movs	r3, #55	; 0x37
 8016372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801637e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	2200      	movs	r2, #0
 8016384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016388:	3304      	adds	r3, #4
 801638a:	4618      	mov	r0, r3
 801638c:	f7ff f978 	bl	8015680 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016392:	3318      	adds	r3, #24
 8016394:	4618      	mov	r0, r3
 8016396:	f7ff f973 	bl	8015680 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801639e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80163a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80163aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80163b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b2:	2200      	movs	r2, #0
 80163b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80163b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b8:	2200      	movs	r2, #0
 80163ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80163be:	683a      	ldr	r2, [r7, #0]
 80163c0:	68f9      	ldr	r1, [r7, #12]
 80163c2:	69b8      	ldr	r0, [r7, #24]
 80163c4:	f001 fa14 	bl	80177f0 <pxPortInitialiseStack>
 80163c8:	4602      	mov	r2, r0
 80163ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80163ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d002      	beq.n	80163da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80163d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80163da:	bf00      	nop
 80163dc:	3720      	adds	r7, #32
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
	...

080163e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80163ec:	f001 fb2a 	bl	8017a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80163f0:	4b2d      	ldr	r3, [pc, #180]	; (80164a8 <prvAddNewTaskToReadyList+0xc4>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	3301      	adds	r3, #1
 80163f6:	4a2c      	ldr	r2, [pc, #176]	; (80164a8 <prvAddNewTaskToReadyList+0xc4>)
 80163f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80163fa:	4b2c      	ldr	r3, [pc, #176]	; (80164ac <prvAddNewTaskToReadyList+0xc8>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d109      	bne.n	8016416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016402:	4a2a      	ldr	r2, [pc, #168]	; (80164ac <prvAddNewTaskToReadyList+0xc8>)
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016408:	4b27      	ldr	r3, [pc, #156]	; (80164a8 <prvAddNewTaskToReadyList+0xc4>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	2b01      	cmp	r3, #1
 801640e:	d110      	bne.n	8016432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016410:	f000 fcca 	bl	8016da8 <prvInitialiseTaskLists>
 8016414:	e00d      	b.n	8016432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016416:	4b26      	ldr	r3, [pc, #152]	; (80164b0 <prvAddNewTaskToReadyList+0xcc>)
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d109      	bne.n	8016432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801641e:	4b23      	ldr	r3, [pc, #140]	; (80164ac <prvAddNewTaskToReadyList+0xc8>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016428:	429a      	cmp	r2, r3
 801642a:	d802      	bhi.n	8016432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801642c:	4a1f      	ldr	r2, [pc, #124]	; (80164ac <prvAddNewTaskToReadyList+0xc8>)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016432:	4b20      	ldr	r3, [pc, #128]	; (80164b4 <prvAddNewTaskToReadyList+0xd0>)
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	3301      	adds	r3, #1
 8016438:	4a1e      	ldr	r2, [pc, #120]	; (80164b4 <prvAddNewTaskToReadyList+0xd0>)
 801643a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801643c:	4b1d      	ldr	r3, [pc, #116]	; (80164b4 <prvAddNewTaskToReadyList+0xd0>)
 801643e:	681a      	ldr	r2, [r3, #0]
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016448:	4b1b      	ldr	r3, [pc, #108]	; (80164b8 <prvAddNewTaskToReadyList+0xd4>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	429a      	cmp	r2, r3
 801644e:	d903      	bls.n	8016458 <prvAddNewTaskToReadyList+0x74>
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016454:	4a18      	ldr	r2, [pc, #96]	; (80164b8 <prvAddNewTaskToReadyList+0xd4>)
 8016456:	6013      	str	r3, [r2, #0]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801645c:	4613      	mov	r3, r2
 801645e:	009b      	lsls	r3, r3, #2
 8016460:	4413      	add	r3, r2
 8016462:	009b      	lsls	r3, r3, #2
 8016464:	4a15      	ldr	r2, [pc, #84]	; (80164bc <prvAddNewTaskToReadyList+0xd8>)
 8016466:	441a      	add	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	3304      	adds	r3, #4
 801646c:	4619      	mov	r1, r3
 801646e:	4610      	mov	r0, r2
 8016470:	f7ff f913 	bl	801569a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016474:	f001 fb16 	bl	8017aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016478:	4b0d      	ldr	r3, [pc, #52]	; (80164b0 <prvAddNewTaskToReadyList+0xcc>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d00e      	beq.n	801649e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016480:	4b0a      	ldr	r3, [pc, #40]	; (80164ac <prvAddNewTaskToReadyList+0xc8>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801648a:	429a      	cmp	r2, r3
 801648c:	d207      	bcs.n	801649e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801648e:	4b0c      	ldr	r3, [pc, #48]	; (80164c0 <prvAddNewTaskToReadyList+0xdc>)
 8016490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016494:	601a      	str	r2, [r3, #0]
 8016496:	f3bf 8f4f 	dsb	sy
 801649a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801649e:	bf00      	nop
 80164a0:	3708      	adds	r7, #8
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	24002b50 	.word	0x24002b50
 80164ac:	2400267c 	.word	0x2400267c
 80164b0:	24002b5c 	.word	0x24002b5c
 80164b4:	24002b6c 	.word	0x24002b6c
 80164b8:	24002b58 	.word	0x24002b58
 80164bc:	24002680 	.word	0x24002680
 80164c0:	e000ed04 	.word	0xe000ed04

080164c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80164cc:	2300      	movs	r3, #0
 80164ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d017      	beq.n	8016506 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80164d6:	4b13      	ldr	r3, [pc, #76]	; (8016524 <vTaskDelay+0x60>)
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00a      	beq.n	80164f4 <vTaskDelay+0x30>
	__asm volatile
 80164de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164e2:	f383 8811 	msr	BASEPRI, r3
 80164e6:	f3bf 8f6f 	isb	sy
 80164ea:	f3bf 8f4f 	dsb	sy
 80164ee:	60bb      	str	r3, [r7, #8]
}
 80164f0:	bf00      	nop
 80164f2:	e7fe      	b.n	80164f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80164f4:	f000 f880 	bl	80165f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80164f8:	2100      	movs	r1, #0
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f000 fdb6 	bl	801706c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016500:	f000 f888 	bl	8016614 <xTaskResumeAll>
 8016504:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d107      	bne.n	801651c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801650c:	4b06      	ldr	r3, [pc, #24]	; (8016528 <vTaskDelay+0x64>)
 801650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016512:	601a      	str	r2, [r3, #0]
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801651c:	bf00      	nop
 801651e:	3710      	adds	r7, #16
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	24002b78 	.word	0x24002b78
 8016528:	e000ed04 	.word	0xe000ed04

0801652c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b08a      	sub	sp, #40	; 0x28
 8016530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016532:	2300      	movs	r3, #0
 8016534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016536:	2300      	movs	r3, #0
 8016538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801653a:	463a      	mov	r2, r7
 801653c:	1d39      	adds	r1, r7, #4
 801653e:	f107 0308 	add.w	r3, r7, #8
 8016542:	4618      	mov	r0, r3
 8016544:	f7fe fddc 	bl	8015100 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016548:	6839      	ldr	r1, [r7, #0]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	68ba      	ldr	r2, [r7, #8]
 801654e:	9202      	str	r2, [sp, #8]
 8016550:	9301      	str	r3, [sp, #4]
 8016552:	2300      	movs	r3, #0
 8016554:	9300      	str	r3, [sp, #0]
 8016556:	2300      	movs	r3, #0
 8016558:	460a      	mov	r2, r1
 801655a:	4921      	ldr	r1, [pc, #132]	; (80165e0 <vTaskStartScheduler+0xb4>)
 801655c:	4821      	ldr	r0, [pc, #132]	; (80165e4 <vTaskStartScheduler+0xb8>)
 801655e:	f7ff fe0f 	bl	8016180 <xTaskCreateStatic>
 8016562:	4603      	mov	r3, r0
 8016564:	4a20      	ldr	r2, [pc, #128]	; (80165e8 <vTaskStartScheduler+0xbc>)
 8016566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016568:	4b1f      	ldr	r3, [pc, #124]	; (80165e8 <vTaskStartScheduler+0xbc>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d002      	beq.n	8016576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016570:	2301      	movs	r3, #1
 8016572:	617b      	str	r3, [r7, #20]
 8016574:	e001      	b.n	801657a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016576:	2300      	movs	r3, #0
 8016578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	2b01      	cmp	r3, #1
 801657e:	d102      	bne.n	8016586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016580:	f000 fdc8 	bl	8017114 <xTimerCreateTimerTask>
 8016584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016586:	697b      	ldr	r3, [r7, #20]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d116      	bne.n	80165ba <vTaskStartScheduler+0x8e>
	__asm volatile
 801658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016590:	f383 8811 	msr	BASEPRI, r3
 8016594:	f3bf 8f6f 	isb	sy
 8016598:	f3bf 8f4f 	dsb	sy
 801659c:	613b      	str	r3, [r7, #16]
}
 801659e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80165a0:	4b12      	ldr	r3, [pc, #72]	; (80165ec <vTaskStartScheduler+0xc0>)
 80165a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80165a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80165a8:	4b11      	ldr	r3, [pc, #68]	; (80165f0 <vTaskStartScheduler+0xc4>)
 80165aa:	2201      	movs	r2, #1
 80165ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80165ae:	4b11      	ldr	r3, [pc, #68]	; (80165f4 <vTaskStartScheduler+0xc8>)
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80165b4:	f001 f9a4 	bl	8017900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80165b8:	e00e      	b.n	80165d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165c0:	d10a      	bne.n	80165d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80165c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165c6:	f383 8811 	msr	BASEPRI, r3
 80165ca:	f3bf 8f6f 	isb	sy
 80165ce:	f3bf 8f4f 	dsb	sy
 80165d2:	60fb      	str	r3, [r7, #12]
}
 80165d4:	bf00      	nop
 80165d6:	e7fe      	b.n	80165d6 <vTaskStartScheduler+0xaa>
}
 80165d8:	bf00      	nop
 80165da:	3718      	adds	r7, #24
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd80      	pop	{r7, pc}
 80165e0:	08018d40 	.word	0x08018d40
 80165e4:	08016d79 	.word	0x08016d79
 80165e8:	24002b74 	.word	0x24002b74
 80165ec:	24002b70 	.word	0x24002b70
 80165f0:	24002b5c 	.word	0x24002b5c
 80165f4:	24002b54 	.word	0x24002b54

080165f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80165f8:	b480      	push	{r7}
 80165fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80165fc:	4b04      	ldr	r3, [pc, #16]	; (8016610 <vTaskSuspendAll+0x18>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	3301      	adds	r3, #1
 8016602:	4a03      	ldr	r2, [pc, #12]	; (8016610 <vTaskSuspendAll+0x18>)
 8016604:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8016606:	bf00      	nop
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr
 8016610:	24002b78 	.word	0x24002b78

08016614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801661e:	2300      	movs	r3, #0
 8016620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016622:	4b42      	ldr	r3, [pc, #264]	; (801672c <xTaskResumeAll+0x118>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d10a      	bne.n	8016640 <xTaskResumeAll+0x2c>
	__asm volatile
 801662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801662e:	f383 8811 	msr	BASEPRI, r3
 8016632:	f3bf 8f6f 	isb	sy
 8016636:	f3bf 8f4f 	dsb	sy
 801663a:	603b      	str	r3, [r7, #0]
}
 801663c:	bf00      	nop
 801663e:	e7fe      	b.n	801663e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016640:	f001 fa00 	bl	8017a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016644:	4b39      	ldr	r3, [pc, #228]	; (801672c <xTaskResumeAll+0x118>)
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	3b01      	subs	r3, #1
 801664a:	4a38      	ldr	r2, [pc, #224]	; (801672c <xTaskResumeAll+0x118>)
 801664c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801664e:	4b37      	ldr	r3, [pc, #220]	; (801672c <xTaskResumeAll+0x118>)
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d162      	bne.n	801671c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016656:	4b36      	ldr	r3, [pc, #216]	; (8016730 <xTaskResumeAll+0x11c>)
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d05e      	beq.n	801671c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801665e:	e02f      	b.n	80166c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016660:	4b34      	ldr	r3, [pc, #208]	; (8016734 <xTaskResumeAll+0x120>)
 8016662:	68db      	ldr	r3, [r3, #12]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	3318      	adds	r3, #24
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff f871 	bl	8015754 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	3304      	adds	r3, #4
 8016676:	4618      	mov	r0, r3
 8016678:	f7ff f86c 	bl	8015754 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016680:	4b2d      	ldr	r3, [pc, #180]	; (8016738 <xTaskResumeAll+0x124>)
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	429a      	cmp	r2, r3
 8016686:	d903      	bls.n	8016690 <xTaskResumeAll+0x7c>
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801668c:	4a2a      	ldr	r2, [pc, #168]	; (8016738 <xTaskResumeAll+0x124>)
 801668e:	6013      	str	r3, [r2, #0]
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016694:	4613      	mov	r3, r2
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	4413      	add	r3, r2
 801669a:	009b      	lsls	r3, r3, #2
 801669c:	4a27      	ldr	r2, [pc, #156]	; (801673c <xTaskResumeAll+0x128>)
 801669e:	441a      	add	r2, r3
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	3304      	adds	r3, #4
 80166a4:	4619      	mov	r1, r3
 80166a6:	4610      	mov	r0, r2
 80166a8:	f7fe fff7 	bl	801569a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80166b0:	4b23      	ldr	r3, [pc, #140]	; (8016740 <xTaskResumeAll+0x12c>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d302      	bcc.n	80166c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80166ba:	4b22      	ldr	r3, [pc, #136]	; (8016744 <xTaskResumeAll+0x130>)
 80166bc:	2201      	movs	r2, #1
 80166be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80166c0:	4b1c      	ldr	r3, [pc, #112]	; (8016734 <xTaskResumeAll+0x120>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d1cb      	bne.n	8016660 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d001      	beq.n	80166d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80166ce:	f000 fc09 	bl	8016ee4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80166d2:	4b1d      	ldr	r3, [pc, #116]	; (8016748 <xTaskResumeAll+0x134>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d010      	beq.n	8016700 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80166de:	f000 f847 	bl	8016770 <xTaskIncrementTick>
 80166e2:	4603      	mov	r3, r0
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d002      	beq.n	80166ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80166e8:	4b16      	ldr	r3, [pc, #88]	; (8016744 <xTaskResumeAll+0x130>)
 80166ea:	2201      	movs	r2, #1
 80166ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	3b01      	subs	r3, #1
 80166f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1f1      	bne.n	80166de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80166fa:	4b13      	ldr	r3, [pc, #76]	; (8016748 <xTaskResumeAll+0x134>)
 80166fc:	2200      	movs	r2, #0
 80166fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016700:	4b10      	ldr	r3, [pc, #64]	; (8016744 <xTaskResumeAll+0x130>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d009      	beq.n	801671c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016708:	2301      	movs	r3, #1
 801670a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801670c:	4b0f      	ldr	r3, [pc, #60]	; (801674c <xTaskResumeAll+0x138>)
 801670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016712:	601a      	str	r2, [r3, #0]
 8016714:	f3bf 8f4f 	dsb	sy
 8016718:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801671c:	f001 f9c2 	bl	8017aa4 <vPortExitCritical>

	return xAlreadyYielded;
 8016720:	68bb      	ldr	r3, [r7, #8]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	24002b78 	.word	0x24002b78
 8016730:	24002b50 	.word	0x24002b50
 8016734:	24002b10 	.word	0x24002b10
 8016738:	24002b58 	.word	0x24002b58
 801673c:	24002680 	.word	0x24002680
 8016740:	2400267c 	.word	0x2400267c
 8016744:	24002b64 	.word	0x24002b64
 8016748:	24002b60 	.word	0x24002b60
 801674c:	e000ed04 	.word	0xe000ed04

08016750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016750:	b480      	push	{r7}
 8016752:	b083      	sub	sp, #12
 8016754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016756:	4b05      	ldr	r3, [pc, #20]	; (801676c <xTaskGetTickCount+0x1c>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801675c:	687b      	ldr	r3, [r7, #4]
}
 801675e:	4618      	mov	r0, r3
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016768:	4770      	bx	lr
 801676a:	bf00      	nop
 801676c:	24002b54 	.word	0x24002b54

08016770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016776:	2300      	movs	r3, #0
 8016778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801677a:	4b53      	ldr	r3, [pc, #332]	; (80168c8 <xTaskIncrementTick+0x158>)
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	f040 8095 	bne.w	80168ae <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016784:	4b51      	ldr	r3, [pc, #324]	; (80168cc <xTaskIncrementTick+0x15c>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	3301      	adds	r3, #1
 801678a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801678c:	4a4f      	ldr	r2, [pc, #316]	; (80168cc <xTaskIncrementTick+0x15c>)
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d120      	bne.n	80167da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016798:	4b4d      	ldr	r3, [pc, #308]	; (80168d0 <xTaskIncrementTick+0x160>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d00a      	beq.n	80167b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80167a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a6:	f383 8811 	msr	BASEPRI, r3
 80167aa:	f3bf 8f6f 	isb	sy
 80167ae:	f3bf 8f4f 	dsb	sy
 80167b2:	603b      	str	r3, [r7, #0]
}
 80167b4:	bf00      	nop
 80167b6:	e7fe      	b.n	80167b6 <xTaskIncrementTick+0x46>
 80167b8:	4b45      	ldr	r3, [pc, #276]	; (80168d0 <xTaskIncrementTick+0x160>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	60fb      	str	r3, [r7, #12]
 80167be:	4b45      	ldr	r3, [pc, #276]	; (80168d4 <xTaskIncrementTick+0x164>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	4a43      	ldr	r2, [pc, #268]	; (80168d0 <xTaskIncrementTick+0x160>)
 80167c4:	6013      	str	r3, [r2, #0]
 80167c6:	4a43      	ldr	r2, [pc, #268]	; (80168d4 <xTaskIncrementTick+0x164>)
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	6013      	str	r3, [r2, #0]
 80167cc:	4b42      	ldr	r3, [pc, #264]	; (80168d8 <xTaskIncrementTick+0x168>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	3301      	adds	r3, #1
 80167d2:	4a41      	ldr	r2, [pc, #260]	; (80168d8 <xTaskIncrementTick+0x168>)
 80167d4:	6013      	str	r3, [r2, #0]
 80167d6:	f000 fb85 	bl	8016ee4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80167da:	4b40      	ldr	r3, [pc, #256]	; (80168dc <xTaskIncrementTick+0x16c>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	693a      	ldr	r2, [r7, #16]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d349      	bcc.n	8016878 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80167e4:	4b3a      	ldr	r3, [pc, #232]	; (80168d0 <xTaskIncrementTick+0x160>)
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d104      	bne.n	80167f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80167ee:	4b3b      	ldr	r3, [pc, #236]	; (80168dc <xTaskIncrementTick+0x16c>)
 80167f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167f4:	601a      	str	r2, [r3, #0]
					break;
 80167f6:	e03f      	b.n	8016878 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167f8:	4b35      	ldr	r3, [pc, #212]	; (80168d0 <xTaskIncrementTick+0x160>)
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	68db      	ldr	r3, [r3, #12]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016808:	693a      	ldr	r2, [r7, #16]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	429a      	cmp	r2, r3
 801680e:	d203      	bcs.n	8016818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016810:	4a32      	ldr	r2, [pc, #200]	; (80168dc <xTaskIncrementTick+0x16c>)
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016816:	e02f      	b.n	8016878 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016818:	68bb      	ldr	r3, [r7, #8]
 801681a:	3304      	adds	r3, #4
 801681c:	4618      	mov	r0, r3
 801681e:	f7fe ff99 	bl	8015754 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016826:	2b00      	cmp	r3, #0
 8016828:	d004      	beq.n	8016834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	3318      	adds	r3, #24
 801682e:	4618      	mov	r0, r3
 8016830:	f7fe ff90 	bl	8015754 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016838:	4b29      	ldr	r3, [pc, #164]	; (80168e0 <xTaskIncrementTick+0x170>)
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	429a      	cmp	r2, r3
 801683e:	d903      	bls.n	8016848 <xTaskIncrementTick+0xd8>
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016844:	4a26      	ldr	r2, [pc, #152]	; (80168e0 <xTaskIncrementTick+0x170>)
 8016846:	6013      	str	r3, [r2, #0]
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801684c:	4613      	mov	r3, r2
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	4413      	add	r3, r2
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	4a23      	ldr	r2, [pc, #140]	; (80168e4 <xTaskIncrementTick+0x174>)
 8016856:	441a      	add	r2, r3
 8016858:	68bb      	ldr	r3, [r7, #8]
 801685a:	3304      	adds	r3, #4
 801685c:	4619      	mov	r1, r3
 801685e:	4610      	mov	r0, r2
 8016860:	f7fe ff1b 	bl	801569a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016868:	4b1f      	ldr	r3, [pc, #124]	; (80168e8 <xTaskIncrementTick+0x178>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801686e:	429a      	cmp	r2, r3
 8016870:	d3b8      	bcc.n	80167e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016872:	2301      	movs	r3, #1
 8016874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016876:	e7b5      	b.n	80167e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016878:	4b1b      	ldr	r3, [pc, #108]	; (80168e8 <xTaskIncrementTick+0x178>)
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801687e:	4919      	ldr	r1, [pc, #100]	; (80168e4 <xTaskIncrementTick+0x174>)
 8016880:	4613      	mov	r3, r2
 8016882:	009b      	lsls	r3, r3, #2
 8016884:	4413      	add	r3, r2
 8016886:	009b      	lsls	r3, r3, #2
 8016888:	440b      	add	r3, r1
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d901      	bls.n	8016894 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016890:	2301      	movs	r3, #1
 8016892:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8016894:	4b15      	ldr	r3, [pc, #84]	; (80168ec <xTaskIncrementTick+0x17c>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2b00      	cmp	r3, #0
 801689a:	d101      	bne.n	80168a0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801689c:	f7ea fa7c 	bl	8000d98 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80168a0:	4b13      	ldr	r3, [pc, #76]	; (80168f0 <xTaskIncrementTick+0x180>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d009      	beq.n	80168bc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80168a8:	2301      	movs	r3, #1
 80168aa:	617b      	str	r3, [r7, #20]
 80168ac:	e006      	b.n	80168bc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80168ae:	4b0f      	ldr	r3, [pc, #60]	; (80168ec <xTaskIncrementTick+0x17c>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	3301      	adds	r3, #1
 80168b4:	4a0d      	ldr	r2, [pc, #52]	; (80168ec <xTaskIncrementTick+0x17c>)
 80168b6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80168b8:	f7ea fa6e 	bl	8000d98 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80168bc:	697b      	ldr	r3, [r7, #20]
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3718      	adds	r7, #24
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	24002b78 	.word	0x24002b78
 80168cc:	24002b54 	.word	0x24002b54
 80168d0:	24002b08 	.word	0x24002b08
 80168d4:	24002b0c 	.word	0x24002b0c
 80168d8:	24002b68 	.word	0x24002b68
 80168dc:	24002b70 	.word	0x24002b70
 80168e0:	24002b58 	.word	0x24002b58
 80168e4:	24002680 	.word	0x24002680
 80168e8:	2400267c 	.word	0x2400267c
 80168ec:	24002b60 	.word	0x24002b60
 80168f0:	24002b64 	.word	0x24002b64

080168f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80168fa:	4b2f      	ldr	r3, [pc, #188]	; (80169b8 <vTaskSwitchContext+0xc4>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d003      	beq.n	801690a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016902:	4b2e      	ldr	r3, [pc, #184]	; (80169bc <vTaskSwitchContext+0xc8>)
 8016904:	2201      	movs	r2, #1
 8016906:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016908:	e052      	b.n	80169b0 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801690a:	4b2c      	ldr	r3, [pc, #176]	; (80169bc <vTaskSwitchContext+0xc8>)
 801690c:	2200      	movs	r2, #0
 801690e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016910:	4b2b      	ldr	r3, [pc, #172]	; (80169c0 <vTaskSwitchContext+0xcc>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	681a      	ldr	r2, [r3, #0]
 8016916:	4b2a      	ldr	r3, [pc, #168]	; (80169c0 <vTaskSwitchContext+0xcc>)
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801691c:	429a      	cmp	r2, r3
 801691e:	d808      	bhi.n	8016932 <vTaskSwitchContext+0x3e>
 8016920:	4b27      	ldr	r3, [pc, #156]	; (80169c0 <vTaskSwitchContext+0xcc>)
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	4b26      	ldr	r3, [pc, #152]	; (80169c0 <vTaskSwitchContext+0xcc>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	3334      	adds	r3, #52	; 0x34
 801692a:	4619      	mov	r1, r3
 801692c:	4610      	mov	r0, r2
 801692e:	f7ea fa41 	bl	8000db4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016932:	4b24      	ldr	r3, [pc, #144]	; (80169c4 <vTaskSwitchContext+0xd0>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	60fb      	str	r3, [r7, #12]
 8016938:	e010      	b.n	801695c <vTaskSwitchContext+0x68>
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d10a      	bne.n	8016956 <vTaskSwitchContext+0x62>
	__asm volatile
 8016940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016944:	f383 8811 	msr	BASEPRI, r3
 8016948:	f3bf 8f6f 	isb	sy
 801694c:	f3bf 8f4f 	dsb	sy
 8016950:	607b      	str	r3, [r7, #4]
}
 8016952:	bf00      	nop
 8016954:	e7fe      	b.n	8016954 <vTaskSwitchContext+0x60>
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	3b01      	subs	r3, #1
 801695a:	60fb      	str	r3, [r7, #12]
 801695c:	491a      	ldr	r1, [pc, #104]	; (80169c8 <vTaskSwitchContext+0xd4>)
 801695e:	68fa      	ldr	r2, [r7, #12]
 8016960:	4613      	mov	r3, r2
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	4413      	add	r3, r2
 8016966:	009b      	lsls	r3, r3, #2
 8016968:	440b      	add	r3, r1
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d0e4      	beq.n	801693a <vTaskSwitchContext+0x46>
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	4613      	mov	r3, r2
 8016974:	009b      	lsls	r3, r3, #2
 8016976:	4413      	add	r3, r2
 8016978:	009b      	lsls	r3, r3, #2
 801697a:	4a13      	ldr	r2, [pc, #76]	; (80169c8 <vTaskSwitchContext+0xd4>)
 801697c:	4413      	add	r3, r2
 801697e:	60bb      	str	r3, [r7, #8]
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	685a      	ldr	r2, [r3, #4]
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	605a      	str	r2, [r3, #4]
 801698a:	68bb      	ldr	r3, [r7, #8]
 801698c:	685a      	ldr	r2, [r3, #4]
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	3308      	adds	r3, #8
 8016992:	429a      	cmp	r2, r3
 8016994:	d104      	bne.n	80169a0 <vTaskSwitchContext+0xac>
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	685b      	ldr	r3, [r3, #4]
 801699a:	685a      	ldr	r2, [r3, #4]
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	605a      	str	r2, [r3, #4]
 80169a0:	68bb      	ldr	r3, [r7, #8]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	68db      	ldr	r3, [r3, #12]
 80169a6:	4a06      	ldr	r2, [pc, #24]	; (80169c0 <vTaskSwitchContext+0xcc>)
 80169a8:	6013      	str	r3, [r2, #0]
 80169aa:	4a06      	ldr	r2, [pc, #24]	; (80169c4 <vTaskSwitchContext+0xd0>)
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	6013      	str	r3, [r2, #0]
}
 80169b0:	bf00      	nop
 80169b2:	3710      	adds	r7, #16
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	24002b78 	.word	0x24002b78
 80169bc:	24002b64 	.word	0x24002b64
 80169c0:	2400267c 	.word	0x2400267c
 80169c4:	24002b58 	.word	0x24002b58
 80169c8:	24002680 	.word	0x24002680

080169cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b084      	sub	sp, #16
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
 80169d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d10a      	bne.n	80169f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80169dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169e0:	f383 8811 	msr	BASEPRI, r3
 80169e4:	f3bf 8f6f 	isb	sy
 80169e8:	f3bf 8f4f 	dsb	sy
 80169ec:	60fb      	str	r3, [r7, #12]
}
 80169ee:	bf00      	nop
 80169f0:	e7fe      	b.n	80169f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80169f2:	4b07      	ldr	r3, [pc, #28]	; (8016a10 <vTaskPlaceOnEventList+0x44>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	3318      	adds	r3, #24
 80169f8:	4619      	mov	r1, r3
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f7fe fe71 	bl	80156e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016a00:	2101      	movs	r1, #1
 8016a02:	6838      	ldr	r0, [r7, #0]
 8016a04:	f000 fb32 	bl	801706c <prvAddCurrentTaskToDelayedList>
}
 8016a08:	bf00      	nop
 8016a0a:	3710      	adds	r7, #16
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}
 8016a10:	2400267c 	.word	0x2400267c

08016a14 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b086      	sub	sp, #24
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	60b9      	str	r1, [r7, #8]
 8016a1e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d10a      	bne.n	8016a3c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8016a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a2a:	f383 8811 	msr	BASEPRI, r3
 8016a2e:	f3bf 8f6f 	isb	sy
 8016a32:	f3bf 8f4f 	dsb	sy
 8016a36:	617b      	str	r3, [r7, #20]
}
 8016a38:	bf00      	nop
 8016a3a:	e7fe      	b.n	8016a3a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8016a3c:	4b11      	ldr	r3, [pc, #68]	; (8016a84 <vTaskPlaceOnUnorderedEventList+0x70>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d10a      	bne.n	8016a5a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8016a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a48:	f383 8811 	msr	BASEPRI, r3
 8016a4c:	f3bf 8f6f 	isb	sy
 8016a50:	f3bf 8f4f 	dsb	sy
 8016a54:	613b      	str	r3, [r7, #16]
}
 8016a56:	bf00      	nop
 8016a58:	e7fe      	b.n	8016a58 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016a5a:	4b0b      	ldr	r3, [pc, #44]	; (8016a88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8016a64:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016a66:	4b08      	ldr	r3, [pc, #32]	; (8016a88 <vTaskPlaceOnUnorderedEventList+0x74>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	3318      	adds	r3, #24
 8016a6c:	4619      	mov	r1, r3
 8016a6e:	68f8      	ldr	r0, [r7, #12]
 8016a70:	f7fe fe13 	bl	801569a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016a74:	2101      	movs	r1, #1
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f000 faf8 	bl	801706c <prvAddCurrentTaskToDelayedList>
}
 8016a7c:	bf00      	nop
 8016a7e:	3718      	adds	r7, #24
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}
 8016a84:	24002b78 	.word	0x24002b78
 8016a88:	2400267c 	.word	0x2400267c

08016a8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b086      	sub	sp, #24
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	60f8      	str	r0, [r7, #12]
 8016a94:	60b9      	str	r1, [r7, #8]
 8016a96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d10a      	bne.n	8016ab4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa2:	f383 8811 	msr	BASEPRI, r3
 8016aa6:	f3bf 8f6f 	isb	sy
 8016aaa:	f3bf 8f4f 	dsb	sy
 8016aae:	617b      	str	r3, [r7, #20]
}
 8016ab0:	bf00      	nop
 8016ab2:	e7fe      	b.n	8016ab2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016ab4:	4b0a      	ldr	r3, [pc, #40]	; (8016ae0 <vTaskPlaceOnEventListRestricted+0x54>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	3318      	adds	r3, #24
 8016aba:	4619      	mov	r1, r3
 8016abc:	68f8      	ldr	r0, [r7, #12]
 8016abe:	f7fe fdec 	bl	801569a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d002      	beq.n	8016ace <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8016ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016acc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016ace:	6879      	ldr	r1, [r7, #4]
 8016ad0:	68b8      	ldr	r0, [r7, #8]
 8016ad2:	f000 facb 	bl	801706c <prvAddCurrentTaskToDelayedList>
	}
 8016ad6:	bf00      	nop
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	2400267c 	.word	0x2400267c

08016ae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b086      	sub	sp, #24
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	68db      	ldr	r3, [r3, #12]
 8016af0:	68db      	ldr	r3, [r3, #12]
 8016af2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d10a      	bne.n	8016b10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016afe:	f383 8811 	msr	BASEPRI, r3
 8016b02:	f3bf 8f6f 	isb	sy
 8016b06:	f3bf 8f4f 	dsb	sy
 8016b0a:	60fb      	str	r3, [r7, #12]
}
 8016b0c:	bf00      	nop
 8016b0e:	e7fe      	b.n	8016b0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	3318      	adds	r3, #24
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7fe fe1d 	bl	8015754 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b1a:	4b1e      	ldr	r3, [pc, #120]	; (8016b94 <xTaskRemoveFromEventList+0xb0>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d11d      	bne.n	8016b5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	3304      	adds	r3, #4
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7fe fe14 	bl	8015754 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b30:	4b19      	ldr	r3, [pc, #100]	; (8016b98 <xTaskRemoveFromEventList+0xb4>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	429a      	cmp	r2, r3
 8016b36:	d903      	bls.n	8016b40 <xTaskRemoveFromEventList+0x5c>
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b3c:	4a16      	ldr	r2, [pc, #88]	; (8016b98 <xTaskRemoveFromEventList+0xb4>)
 8016b3e:	6013      	str	r3, [r2, #0]
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b44:	4613      	mov	r3, r2
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	4413      	add	r3, r2
 8016b4a:	009b      	lsls	r3, r3, #2
 8016b4c:	4a13      	ldr	r2, [pc, #76]	; (8016b9c <xTaskRemoveFromEventList+0xb8>)
 8016b4e:	441a      	add	r2, r3
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	3304      	adds	r3, #4
 8016b54:	4619      	mov	r1, r3
 8016b56:	4610      	mov	r0, r2
 8016b58:	f7fe fd9f 	bl	801569a <vListInsertEnd>
 8016b5c:	e005      	b.n	8016b6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016b5e:	693b      	ldr	r3, [r7, #16]
 8016b60:	3318      	adds	r3, #24
 8016b62:	4619      	mov	r1, r3
 8016b64:	480e      	ldr	r0, [pc, #56]	; (8016ba0 <xTaskRemoveFromEventList+0xbc>)
 8016b66:	f7fe fd98 	bl	801569a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b6e:	4b0d      	ldr	r3, [pc, #52]	; (8016ba4 <xTaskRemoveFromEventList+0xc0>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b74:	429a      	cmp	r2, r3
 8016b76:	d905      	bls.n	8016b84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016b78:	2301      	movs	r3, #1
 8016b7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016b7c:	4b0a      	ldr	r3, [pc, #40]	; (8016ba8 <xTaskRemoveFromEventList+0xc4>)
 8016b7e:	2201      	movs	r2, #1
 8016b80:	601a      	str	r2, [r3, #0]
 8016b82:	e001      	b.n	8016b88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8016b84:	2300      	movs	r3, #0
 8016b86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016b88:	697b      	ldr	r3, [r7, #20]
}
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	3718      	adds	r7, #24
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	24002b78 	.word	0x24002b78
 8016b98:	24002b58 	.word	0x24002b58
 8016b9c:	24002680 	.word	0x24002680
 8016ba0:	24002b10 	.word	0x24002b10
 8016ba4:	2400267c 	.word	0x2400267c
 8016ba8:	24002b64 	.word	0x24002b64

08016bac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b086      	sub	sp, #24
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8016bb6:	4b29      	ldr	r3, [pc, #164]	; (8016c5c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d10a      	bne.n	8016bd4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc2:	f383 8811 	msr	BASEPRI, r3
 8016bc6:	f3bf 8f6f 	isb	sy
 8016bca:	f3bf 8f4f 	dsb	sy
 8016bce:	613b      	str	r3, [r7, #16]
}
 8016bd0:	bf00      	nop
 8016bd2:	e7fe      	b.n	8016bd2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8016bd4:	683b      	ldr	r3, [r7, #0]
 8016bd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	68db      	ldr	r3, [r3, #12]
 8016be2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8016be4:	697b      	ldr	r3, [r7, #20]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d10a      	bne.n	8016c00 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8016bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bee:	f383 8811 	msr	BASEPRI, r3
 8016bf2:	f3bf 8f6f 	isb	sy
 8016bf6:	f3bf 8f4f 	dsb	sy
 8016bfa:	60fb      	str	r3, [r7, #12]
}
 8016bfc:	bf00      	nop
 8016bfe:	e7fe      	b.n	8016bfe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8016c00:	6878      	ldr	r0, [r7, #4]
 8016c02:	f7fe fda7 	bl	8015754 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	3304      	adds	r3, #4
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7fe fda2 	bl	8015754 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c14:	4b12      	ldr	r3, [pc, #72]	; (8016c60 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	429a      	cmp	r2, r3
 8016c1a:	d903      	bls.n	8016c24 <vTaskRemoveFromUnorderedEventList+0x78>
 8016c1c:	697b      	ldr	r3, [r7, #20]
 8016c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c20:	4a0f      	ldr	r2, [pc, #60]	; (8016c60 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8016c22:	6013      	str	r3, [r2, #0]
 8016c24:	697b      	ldr	r3, [r7, #20]
 8016c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c28:	4613      	mov	r3, r2
 8016c2a:	009b      	lsls	r3, r3, #2
 8016c2c:	4413      	add	r3, r2
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	4a0c      	ldr	r2, [pc, #48]	; (8016c64 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8016c32:	441a      	add	r2, r3
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	3304      	adds	r3, #4
 8016c38:	4619      	mov	r1, r3
 8016c3a:	4610      	mov	r0, r2
 8016c3c:	f7fe fd2d 	bl	801569a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c44:	4b08      	ldr	r3, [pc, #32]	; (8016c68 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d902      	bls.n	8016c54 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8016c4e:	4b07      	ldr	r3, [pc, #28]	; (8016c6c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8016c50:	2201      	movs	r2, #1
 8016c52:	601a      	str	r2, [r3, #0]
	}
}
 8016c54:	bf00      	nop
 8016c56:	3718      	adds	r7, #24
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	24002b78 	.word	0x24002b78
 8016c60:	24002b58 	.word	0x24002b58
 8016c64:	24002680 	.word	0x24002680
 8016c68:	2400267c 	.word	0x2400267c
 8016c6c:	24002b64 	.word	0x24002b64

08016c70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c78:	4b06      	ldr	r3, [pc, #24]	; (8016c94 <vTaskInternalSetTimeOutState+0x24>)
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c80:	4b05      	ldr	r3, [pc, #20]	; (8016c98 <vTaskInternalSetTimeOutState+0x28>)
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	605a      	str	r2, [r3, #4]
}
 8016c88:	bf00      	nop
 8016c8a:	370c      	adds	r7, #12
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c92:	4770      	bx	lr
 8016c94:	24002b68 	.word	0x24002b68
 8016c98:	24002b54 	.word	0x24002b54

08016c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b088      	sub	sp, #32
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d10a      	bne.n	8016cc2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb0:	f383 8811 	msr	BASEPRI, r3
 8016cb4:	f3bf 8f6f 	isb	sy
 8016cb8:	f3bf 8f4f 	dsb	sy
 8016cbc:	613b      	str	r3, [r7, #16]
}
 8016cbe:	bf00      	nop
 8016cc0:	e7fe      	b.n	8016cc0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d10a      	bne.n	8016cde <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ccc:	f383 8811 	msr	BASEPRI, r3
 8016cd0:	f3bf 8f6f 	isb	sy
 8016cd4:	f3bf 8f4f 	dsb	sy
 8016cd8:	60fb      	str	r3, [r7, #12]
}
 8016cda:	bf00      	nop
 8016cdc:	e7fe      	b.n	8016cdc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8016cde:	f000 feb1 	bl	8017a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016ce2:	4b1d      	ldr	r3, [pc, #116]	; (8016d58 <xTaskCheckForTimeOut+0xbc>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	685b      	ldr	r3, [r3, #4]
 8016cec:	69ba      	ldr	r2, [r7, #24]
 8016cee:	1ad3      	subs	r3, r2, r3
 8016cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cfa:	d102      	bne.n	8016d02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	61fb      	str	r3, [r7, #28]
 8016d00:	e023      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681a      	ldr	r2, [r3, #0]
 8016d06:	4b15      	ldr	r3, [pc, #84]	; (8016d5c <xTaskCheckForTimeOut+0xc0>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d007      	beq.n	8016d1e <xTaskCheckForTimeOut+0x82>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	69ba      	ldr	r2, [r7, #24]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d302      	bcc.n	8016d1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016d18:	2301      	movs	r3, #1
 8016d1a:	61fb      	str	r3, [r7, #28]
 8016d1c:	e015      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d1e:	683b      	ldr	r3, [r7, #0]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	697a      	ldr	r2, [r7, #20]
 8016d24:	429a      	cmp	r2, r3
 8016d26:	d20b      	bcs.n	8016d40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	1ad2      	subs	r2, r2, r3
 8016d30:	683b      	ldr	r3, [r7, #0]
 8016d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016d34:	6878      	ldr	r0, [r7, #4]
 8016d36:	f7ff ff9b 	bl	8016c70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	61fb      	str	r3, [r7, #28]
 8016d3e:	e004      	b.n	8016d4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	2200      	movs	r2, #0
 8016d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016d46:	2301      	movs	r3, #1
 8016d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016d4a:	f000 feab 	bl	8017aa4 <vPortExitCritical>

	return xReturn;
 8016d4e:	69fb      	ldr	r3, [r7, #28]
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3720      	adds	r7, #32
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	24002b54 	.word	0x24002b54
 8016d5c:	24002b68 	.word	0x24002b68

08016d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016d60:	b480      	push	{r7}
 8016d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016d64:	4b03      	ldr	r3, [pc, #12]	; (8016d74 <vTaskMissedYield+0x14>)
 8016d66:	2201      	movs	r2, #1
 8016d68:	601a      	str	r2, [r3, #0]
}
 8016d6a:	bf00      	nop
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d72:	4770      	bx	lr
 8016d74:	24002b64 	.word	0x24002b64

08016d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016d80:	f000 f852 	bl	8016e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016d84:	4b06      	ldr	r3, [pc, #24]	; (8016da0 <prvIdleTask+0x28>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d9f9      	bls.n	8016d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8016d8c:	4b05      	ldr	r3, [pc, #20]	; (8016da4 <prvIdleTask+0x2c>)
 8016d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016d92:	601a      	str	r2, [r3, #0]
 8016d94:	f3bf 8f4f 	dsb	sy
 8016d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016d9c:	e7f0      	b.n	8016d80 <prvIdleTask+0x8>
 8016d9e:	bf00      	nop
 8016da0:	24002680 	.word	0x24002680
 8016da4:	e000ed04 	.word	0xe000ed04

08016da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016da8:	b580      	push	{r7, lr}
 8016daa:	b082      	sub	sp, #8
 8016dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dae:	2300      	movs	r3, #0
 8016db0:	607b      	str	r3, [r7, #4]
 8016db2:	e00c      	b.n	8016dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	4613      	mov	r3, r2
 8016db8:	009b      	lsls	r3, r3, #2
 8016dba:	4413      	add	r3, r2
 8016dbc:	009b      	lsls	r3, r3, #2
 8016dbe:	4a12      	ldr	r2, [pc, #72]	; (8016e08 <prvInitialiseTaskLists+0x60>)
 8016dc0:	4413      	add	r3, r2
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	f7fe fc3c 	bl	8015640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	3301      	adds	r3, #1
 8016dcc:	607b      	str	r3, [r7, #4]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	2b37      	cmp	r3, #55	; 0x37
 8016dd2:	d9ef      	bls.n	8016db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016dd4:	480d      	ldr	r0, [pc, #52]	; (8016e0c <prvInitialiseTaskLists+0x64>)
 8016dd6:	f7fe fc33 	bl	8015640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016dda:	480d      	ldr	r0, [pc, #52]	; (8016e10 <prvInitialiseTaskLists+0x68>)
 8016ddc:	f7fe fc30 	bl	8015640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016de0:	480c      	ldr	r0, [pc, #48]	; (8016e14 <prvInitialiseTaskLists+0x6c>)
 8016de2:	f7fe fc2d 	bl	8015640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016de6:	480c      	ldr	r0, [pc, #48]	; (8016e18 <prvInitialiseTaskLists+0x70>)
 8016de8:	f7fe fc2a 	bl	8015640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016dec:	480b      	ldr	r0, [pc, #44]	; (8016e1c <prvInitialiseTaskLists+0x74>)
 8016dee:	f7fe fc27 	bl	8015640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016df2:	4b0b      	ldr	r3, [pc, #44]	; (8016e20 <prvInitialiseTaskLists+0x78>)
 8016df4:	4a05      	ldr	r2, [pc, #20]	; (8016e0c <prvInitialiseTaskLists+0x64>)
 8016df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016df8:	4b0a      	ldr	r3, [pc, #40]	; (8016e24 <prvInitialiseTaskLists+0x7c>)
 8016dfa:	4a05      	ldr	r2, [pc, #20]	; (8016e10 <prvInitialiseTaskLists+0x68>)
 8016dfc:	601a      	str	r2, [r3, #0]
}
 8016dfe:	bf00      	nop
 8016e00:	3708      	adds	r7, #8
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd80      	pop	{r7, pc}
 8016e06:	bf00      	nop
 8016e08:	24002680 	.word	0x24002680
 8016e0c:	24002ae0 	.word	0x24002ae0
 8016e10:	24002af4 	.word	0x24002af4
 8016e14:	24002b10 	.word	0x24002b10
 8016e18:	24002b24 	.word	0x24002b24
 8016e1c:	24002b3c 	.word	0x24002b3c
 8016e20:	24002b08 	.word	0x24002b08
 8016e24:	24002b0c 	.word	0x24002b0c

08016e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e2e:	e019      	b.n	8016e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016e30:	f000 fe08 	bl	8017a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e34:	4b10      	ldr	r3, [pc, #64]	; (8016e78 <prvCheckTasksWaitingTermination+0x50>)
 8016e36:	68db      	ldr	r3, [r3, #12]
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	3304      	adds	r3, #4
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7fe fc87 	bl	8015754 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016e46:	4b0d      	ldr	r3, [pc, #52]	; (8016e7c <prvCheckTasksWaitingTermination+0x54>)
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	3b01      	subs	r3, #1
 8016e4c:	4a0b      	ldr	r2, [pc, #44]	; (8016e7c <prvCheckTasksWaitingTermination+0x54>)
 8016e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016e50:	4b0b      	ldr	r3, [pc, #44]	; (8016e80 <prvCheckTasksWaitingTermination+0x58>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	3b01      	subs	r3, #1
 8016e56:	4a0a      	ldr	r2, [pc, #40]	; (8016e80 <prvCheckTasksWaitingTermination+0x58>)
 8016e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016e5a:	f000 fe23 	bl	8017aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f000 f810 	bl	8016e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016e64:	4b06      	ldr	r3, [pc, #24]	; (8016e80 <prvCheckTasksWaitingTermination+0x58>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d1e1      	bne.n	8016e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016e6c:	bf00      	nop
 8016e6e:	bf00      	nop
 8016e70:	3708      	adds	r7, #8
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	24002b24 	.word	0x24002b24
 8016e7c:	24002b50 	.word	0x24002b50
 8016e80:	24002b38 	.word	0x24002b38

08016e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b084      	sub	sp, #16
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d108      	bne.n	8016ea8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f000 ffc0 	bl	8017e20 <vPortFree>
				vPortFree( pxTCB );
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f000 ffbd 	bl	8017e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016ea6:	e018      	b.n	8016eda <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d103      	bne.n	8016eba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016eb2:	6878      	ldr	r0, [r7, #4]
 8016eb4:	f000 ffb4 	bl	8017e20 <vPortFree>
	}
 8016eb8:	e00f      	b.n	8016eda <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8016ec0:	2b02      	cmp	r3, #2
 8016ec2:	d00a      	beq.n	8016eda <prvDeleteTCB+0x56>
	__asm volatile
 8016ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ec8:	f383 8811 	msr	BASEPRI, r3
 8016ecc:	f3bf 8f6f 	isb	sy
 8016ed0:	f3bf 8f4f 	dsb	sy
 8016ed4:	60fb      	str	r3, [r7, #12]
}
 8016ed6:	bf00      	nop
 8016ed8:	e7fe      	b.n	8016ed8 <prvDeleteTCB+0x54>
	}
 8016eda:	bf00      	nop
 8016edc:	3710      	adds	r7, #16
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
	...

08016ee4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b083      	sub	sp, #12
 8016ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016eea:	4b0c      	ldr	r3, [pc, #48]	; (8016f1c <prvResetNextTaskUnblockTime+0x38>)
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d104      	bne.n	8016efe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016ef4:	4b0a      	ldr	r3, [pc, #40]	; (8016f20 <prvResetNextTaskUnblockTime+0x3c>)
 8016ef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016efa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016efc:	e008      	b.n	8016f10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016efe:	4b07      	ldr	r3, [pc, #28]	; (8016f1c <prvResetNextTaskUnblockTime+0x38>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	68db      	ldr	r3, [r3, #12]
 8016f06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	4a04      	ldr	r2, [pc, #16]	; (8016f20 <prvResetNextTaskUnblockTime+0x3c>)
 8016f0e:	6013      	str	r3, [r2, #0]
}
 8016f10:	bf00      	nop
 8016f12:	370c      	adds	r7, #12
 8016f14:	46bd      	mov	sp, r7
 8016f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1a:	4770      	bx	lr
 8016f1c:	24002b08 	.word	0x24002b08
 8016f20:	24002b70 	.word	0x24002b70

08016f24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016f24:	b480      	push	{r7}
 8016f26:	b083      	sub	sp, #12
 8016f28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016f2a:	4b0b      	ldr	r3, [pc, #44]	; (8016f58 <xTaskGetSchedulerState+0x34>)
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d102      	bne.n	8016f38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016f32:	2301      	movs	r3, #1
 8016f34:	607b      	str	r3, [r7, #4]
 8016f36:	e008      	b.n	8016f4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016f38:	4b08      	ldr	r3, [pc, #32]	; (8016f5c <xTaskGetSchedulerState+0x38>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d102      	bne.n	8016f46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016f40:	2302      	movs	r3, #2
 8016f42:	607b      	str	r3, [r7, #4]
 8016f44:	e001      	b.n	8016f4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016f46:	2300      	movs	r3, #0
 8016f48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016f4a:	687b      	ldr	r3, [r7, #4]
	}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	370c      	adds	r7, #12
 8016f50:	46bd      	mov	sp, r7
 8016f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f56:	4770      	bx	lr
 8016f58:	24002b5c 	.word	0x24002b5c
 8016f5c:	24002b78 	.word	0x24002b78

08016f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b086      	sub	sp, #24
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d056      	beq.n	8017024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016f76:	4b2e      	ldr	r3, [pc, #184]	; (8017030 <xTaskPriorityDisinherit+0xd0>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	693a      	ldr	r2, [r7, #16]
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d00a      	beq.n	8016f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f84:	f383 8811 	msr	BASEPRI, r3
 8016f88:	f3bf 8f6f 	isb	sy
 8016f8c:	f3bf 8f4f 	dsb	sy
 8016f90:	60fb      	str	r3, [r7, #12]
}
 8016f92:	bf00      	nop
 8016f94:	e7fe      	b.n	8016f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d10a      	bne.n	8016fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fa2:	f383 8811 	msr	BASEPRI, r3
 8016fa6:	f3bf 8f6f 	isb	sy
 8016faa:	f3bf 8f4f 	dsb	sy
 8016fae:	60bb      	str	r3, [r7, #8]
}
 8016fb0:	bf00      	nop
 8016fb2:	e7fe      	b.n	8016fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016fb4:	693b      	ldr	r3, [r7, #16]
 8016fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fb8:	1e5a      	subs	r2, r3, #1
 8016fba:	693b      	ldr	r3, [r7, #16]
 8016fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016fbe:	693b      	ldr	r3, [r7, #16]
 8016fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d02c      	beq.n	8017024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016fca:	693b      	ldr	r3, [r7, #16]
 8016fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d128      	bne.n	8017024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	3304      	adds	r3, #4
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7fe fbbc 	bl	8015754 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016fdc:	693b      	ldr	r3, [r7, #16]
 8016fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016fe4:	693b      	ldr	r3, [r7, #16]
 8016fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016fec:	693b      	ldr	r3, [r7, #16]
 8016fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ff4:	4b0f      	ldr	r3, [pc, #60]	; (8017034 <xTaskPriorityDisinherit+0xd4>)
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d903      	bls.n	8017004 <xTaskPriorityDisinherit+0xa4>
 8016ffc:	693b      	ldr	r3, [r7, #16]
 8016ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017000:	4a0c      	ldr	r2, [pc, #48]	; (8017034 <xTaskPriorityDisinherit+0xd4>)
 8017002:	6013      	str	r3, [r2, #0]
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017008:	4613      	mov	r3, r2
 801700a:	009b      	lsls	r3, r3, #2
 801700c:	4413      	add	r3, r2
 801700e:	009b      	lsls	r3, r3, #2
 8017010:	4a09      	ldr	r2, [pc, #36]	; (8017038 <xTaskPriorityDisinherit+0xd8>)
 8017012:	441a      	add	r2, r3
 8017014:	693b      	ldr	r3, [r7, #16]
 8017016:	3304      	adds	r3, #4
 8017018:	4619      	mov	r1, r3
 801701a:	4610      	mov	r0, r2
 801701c:	f7fe fb3d 	bl	801569a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017020:	2301      	movs	r3, #1
 8017022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017024:	697b      	ldr	r3, [r7, #20]
	}
 8017026:	4618      	mov	r0, r3
 8017028:	3718      	adds	r7, #24
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	2400267c 	.word	0x2400267c
 8017034:	24002b58 	.word	0x24002b58
 8017038:	24002680 	.word	0x24002680

0801703c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8017042:	4b09      	ldr	r3, [pc, #36]	; (8017068 <uxTaskResetEventItemValue+0x2c>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	699b      	ldr	r3, [r3, #24]
 8017048:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801704a:	4b07      	ldr	r3, [pc, #28]	; (8017068 <uxTaskResetEventItemValue+0x2c>)
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017050:	4b05      	ldr	r3, [pc, #20]	; (8017068 <uxTaskResetEventItemValue+0x2c>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8017058:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801705a:	687b      	ldr	r3, [r7, #4]
}
 801705c:	4618      	mov	r0, r3
 801705e:	370c      	adds	r7, #12
 8017060:	46bd      	mov	sp, r7
 8017062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017066:	4770      	bx	lr
 8017068:	2400267c 	.word	0x2400267c

0801706c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017076:	4b21      	ldr	r3, [pc, #132]	; (80170fc <prvAddCurrentTaskToDelayedList+0x90>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801707c:	4b20      	ldr	r3, [pc, #128]	; (8017100 <prvAddCurrentTaskToDelayedList+0x94>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	3304      	adds	r3, #4
 8017082:	4618      	mov	r0, r3
 8017084:	f7fe fb66 	bl	8015754 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801708e:	d10a      	bne.n	80170a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d007      	beq.n	80170a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017096:	4b1a      	ldr	r3, [pc, #104]	; (8017100 <prvAddCurrentTaskToDelayedList+0x94>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	3304      	adds	r3, #4
 801709c:	4619      	mov	r1, r3
 801709e:	4819      	ldr	r0, [pc, #100]	; (8017104 <prvAddCurrentTaskToDelayedList+0x98>)
 80170a0:	f7fe fafb 	bl	801569a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80170a4:	e026      	b.n	80170f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80170a6:	68fa      	ldr	r2, [r7, #12]
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	4413      	add	r3, r2
 80170ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80170ae:	4b14      	ldr	r3, [pc, #80]	; (8017100 <prvAddCurrentTaskToDelayedList+0x94>)
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	68ba      	ldr	r2, [r7, #8]
 80170b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80170b6:	68ba      	ldr	r2, [r7, #8]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d209      	bcs.n	80170d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80170be:	4b12      	ldr	r3, [pc, #72]	; (8017108 <prvAddCurrentTaskToDelayedList+0x9c>)
 80170c0:	681a      	ldr	r2, [r3, #0]
 80170c2:	4b0f      	ldr	r3, [pc, #60]	; (8017100 <prvAddCurrentTaskToDelayedList+0x94>)
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	3304      	adds	r3, #4
 80170c8:	4619      	mov	r1, r3
 80170ca:	4610      	mov	r0, r2
 80170cc:	f7fe fb09 	bl	80156e2 <vListInsert>
}
 80170d0:	e010      	b.n	80170f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80170d2:	4b0e      	ldr	r3, [pc, #56]	; (801710c <prvAddCurrentTaskToDelayedList+0xa0>)
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	4b0a      	ldr	r3, [pc, #40]	; (8017100 <prvAddCurrentTaskToDelayedList+0x94>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	3304      	adds	r3, #4
 80170dc:	4619      	mov	r1, r3
 80170de:	4610      	mov	r0, r2
 80170e0:	f7fe faff 	bl	80156e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80170e4:	4b0a      	ldr	r3, [pc, #40]	; (8017110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	68ba      	ldr	r2, [r7, #8]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d202      	bcs.n	80170f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80170ee:	4a08      	ldr	r2, [pc, #32]	; (8017110 <prvAddCurrentTaskToDelayedList+0xa4>)
 80170f0:	68bb      	ldr	r3, [r7, #8]
 80170f2:	6013      	str	r3, [r2, #0]
}
 80170f4:	bf00      	nop
 80170f6:	3710      	adds	r7, #16
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	24002b54 	.word	0x24002b54
 8017100:	2400267c 	.word	0x2400267c
 8017104:	24002b3c 	.word	0x24002b3c
 8017108:	24002b0c 	.word	0x24002b0c
 801710c:	24002b08 	.word	0x24002b08
 8017110:	24002b70 	.word	0x24002b70

08017114 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b08a      	sub	sp, #40	; 0x28
 8017118:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801711a:	2300      	movs	r3, #0
 801711c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801711e:	f000 fb07 	bl	8017730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017122:	4b1c      	ldr	r3, [pc, #112]	; (8017194 <xTimerCreateTimerTask+0x80>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d021      	beq.n	801716e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801712a:	2300      	movs	r3, #0
 801712c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801712e:	2300      	movs	r3, #0
 8017130:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017132:	1d3a      	adds	r2, r7, #4
 8017134:	f107 0108 	add.w	r1, r7, #8
 8017138:	f107 030c 	add.w	r3, r7, #12
 801713c:	4618      	mov	r0, r3
 801713e:	f7fd fff9 	bl	8015134 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017142:	6879      	ldr	r1, [r7, #4]
 8017144:	68bb      	ldr	r3, [r7, #8]
 8017146:	68fa      	ldr	r2, [r7, #12]
 8017148:	9202      	str	r2, [sp, #8]
 801714a:	9301      	str	r3, [sp, #4]
 801714c:	2302      	movs	r3, #2
 801714e:	9300      	str	r3, [sp, #0]
 8017150:	2300      	movs	r3, #0
 8017152:	460a      	mov	r2, r1
 8017154:	4910      	ldr	r1, [pc, #64]	; (8017198 <xTimerCreateTimerTask+0x84>)
 8017156:	4811      	ldr	r0, [pc, #68]	; (801719c <xTimerCreateTimerTask+0x88>)
 8017158:	f7ff f812 	bl	8016180 <xTaskCreateStatic>
 801715c:	4603      	mov	r3, r0
 801715e:	4a10      	ldr	r2, [pc, #64]	; (80171a0 <xTimerCreateTimerTask+0x8c>)
 8017160:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017162:	4b0f      	ldr	r3, [pc, #60]	; (80171a0 <xTimerCreateTimerTask+0x8c>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801716a:	2301      	movs	r3, #1
 801716c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801716e:	697b      	ldr	r3, [r7, #20]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d10a      	bne.n	801718a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017178:	f383 8811 	msr	BASEPRI, r3
 801717c:	f3bf 8f6f 	isb	sy
 8017180:	f3bf 8f4f 	dsb	sy
 8017184:	613b      	str	r3, [r7, #16]
}
 8017186:	bf00      	nop
 8017188:	e7fe      	b.n	8017188 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801718a:	697b      	ldr	r3, [r7, #20]
}
 801718c:	4618      	mov	r0, r3
 801718e:	3718      	adds	r7, #24
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	24002bac 	.word	0x24002bac
 8017198:	08018d48 	.word	0x08018d48
 801719c:	080172d9 	.word	0x080172d9
 80171a0:	24002bb0 	.word	0x24002bb0

080171a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b08a      	sub	sp, #40	; 0x28
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	60f8      	str	r0, [r7, #12]
 80171ac:	60b9      	str	r1, [r7, #8]
 80171ae:	607a      	str	r2, [r7, #4]
 80171b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80171b2:	2300      	movs	r3, #0
 80171b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d10a      	bne.n	80171d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80171bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c0:	f383 8811 	msr	BASEPRI, r3
 80171c4:	f3bf 8f6f 	isb	sy
 80171c8:	f3bf 8f4f 	dsb	sy
 80171cc:	623b      	str	r3, [r7, #32]
}
 80171ce:	bf00      	nop
 80171d0:	e7fe      	b.n	80171d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80171d2:	4b1a      	ldr	r3, [pc, #104]	; (801723c <xTimerGenericCommand+0x98>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d02a      	beq.n	8017230 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80171da:	68bb      	ldr	r3, [r7, #8]
 80171dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80171e6:	68bb      	ldr	r3, [r7, #8]
 80171e8:	2b05      	cmp	r3, #5
 80171ea:	dc18      	bgt.n	801721e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80171ec:	f7ff fe9a 	bl	8016f24 <xTaskGetSchedulerState>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b02      	cmp	r3, #2
 80171f4:	d109      	bne.n	801720a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80171f6:	4b11      	ldr	r3, [pc, #68]	; (801723c <xTimerGenericCommand+0x98>)
 80171f8:	6818      	ldr	r0, [r3, #0]
 80171fa:	f107 0110 	add.w	r1, r7, #16
 80171fe:	2300      	movs	r3, #0
 8017200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017202:	f7fe fbd5 	bl	80159b0 <xQueueGenericSend>
 8017206:	6278      	str	r0, [r7, #36]	; 0x24
 8017208:	e012      	b.n	8017230 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801720a:	4b0c      	ldr	r3, [pc, #48]	; (801723c <xTimerGenericCommand+0x98>)
 801720c:	6818      	ldr	r0, [r3, #0]
 801720e:	f107 0110 	add.w	r1, r7, #16
 8017212:	2300      	movs	r3, #0
 8017214:	2200      	movs	r2, #0
 8017216:	f7fe fbcb 	bl	80159b0 <xQueueGenericSend>
 801721a:	6278      	str	r0, [r7, #36]	; 0x24
 801721c:	e008      	b.n	8017230 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801721e:	4b07      	ldr	r3, [pc, #28]	; (801723c <xTimerGenericCommand+0x98>)
 8017220:	6818      	ldr	r0, [r3, #0]
 8017222:	f107 0110 	add.w	r1, r7, #16
 8017226:	2300      	movs	r3, #0
 8017228:	683a      	ldr	r2, [r7, #0]
 801722a:	f7fe fcbf 	bl	8015bac <xQueueGenericSendFromISR>
 801722e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017232:	4618      	mov	r0, r3
 8017234:	3728      	adds	r7, #40	; 0x28
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	24002bac 	.word	0x24002bac

08017240 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b088      	sub	sp, #32
 8017244:	af02      	add	r7, sp, #8
 8017246:	6078      	str	r0, [r7, #4]
 8017248:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801724a:	4b22      	ldr	r3, [pc, #136]	; (80172d4 <prvProcessExpiredTimer+0x94>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	68db      	ldr	r3, [r3, #12]
 8017252:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	3304      	adds	r3, #4
 8017258:	4618      	mov	r0, r3
 801725a:	f7fe fa7b 	bl	8015754 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017264:	f003 0304 	and.w	r3, r3, #4
 8017268:	2b00      	cmp	r3, #0
 801726a:	d022      	beq.n	80172b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801726c:	697b      	ldr	r3, [r7, #20]
 801726e:	699a      	ldr	r2, [r3, #24]
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	18d1      	adds	r1, r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	683a      	ldr	r2, [r7, #0]
 8017278:	6978      	ldr	r0, [r7, #20]
 801727a:	f000 f8d1 	bl	8017420 <prvInsertTimerInActiveList>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d01f      	beq.n	80172c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017284:	2300      	movs	r3, #0
 8017286:	9300      	str	r3, [sp, #0]
 8017288:	2300      	movs	r3, #0
 801728a:	687a      	ldr	r2, [r7, #4]
 801728c:	2100      	movs	r1, #0
 801728e:	6978      	ldr	r0, [r7, #20]
 8017290:	f7ff ff88 	bl	80171a4 <xTimerGenericCommand>
 8017294:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d113      	bne.n	80172c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a0:	f383 8811 	msr	BASEPRI, r3
 80172a4:	f3bf 8f6f 	isb	sy
 80172a8:	f3bf 8f4f 	dsb	sy
 80172ac:	60fb      	str	r3, [r7, #12]
}
 80172ae:	bf00      	nop
 80172b0:	e7fe      	b.n	80172b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172b8:	f023 0301 	bic.w	r3, r3, #1
 80172bc:	b2da      	uxtb	r2, r3
 80172be:	697b      	ldr	r3, [r7, #20]
 80172c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80172c4:	697b      	ldr	r3, [r7, #20]
 80172c6:	6a1b      	ldr	r3, [r3, #32]
 80172c8:	6978      	ldr	r0, [r7, #20]
 80172ca:	4798      	blx	r3
}
 80172cc:	bf00      	nop
 80172ce:	3718      	adds	r7, #24
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bd80      	pop	{r7, pc}
 80172d4:	24002ba4 	.word	0x24002ba4

080172d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b084      	sub	sp, #16
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80172e0:	f107 0308 	add.w	r3, r7, #8
 80172e4:	4618      	mov	r0, r3
 80172e6:	f000 f857 	bl	8017398 <prvGetNextExpireTime>
 80172ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	4619      	mov	r1, r3
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	f000 f803 	bl	80172fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80172f6:	f000 f8d5 	bl	80174a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80172fa:	e7f1      	b.n	80172e0 <prvTimerTask+0x8>

080172fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b084      	sub	sp, #16
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
 8017304:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017306:	f7ff f977 	bl	80165f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801730a:	f107 0308 	add.w	r3, r7, #8
 801730e:	4618      	mov	r0, r3
 8017310:	f000 f866 	bl	80173e0 <prvSampleTimeNow>
 8017314:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017316:	68bb      	ldr	r3, [r7, #8]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d130      	bne.n	801737e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d10a      	bne.n	8017338 <prvProcessTimerOrBlockTask+0x3c>
 8017322:	687a      	ldr	r2, [r7, #4]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	429a      	cmp	r2, r3
 8017328:	d806      	bhi.n	8017338 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801732a:	f7ff f973 	bl	8016614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801732e:	68f9      	ldr	r1, [r7, #12]
 8017330:	6878      	ldr	r0, [r7, #4]
 8017332:	f7ff ff85 	bl	8017240 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017336:	e024      	b.n	8017382 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017338:	683b      	ldr	r3, [r7, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d008      	beq.n	8017350 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801733e:	4b13      	ldr	r3, [pc, #76]	; (801738c <prvProcessTimerOrBlockTask+0x90>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	2b00      	cmp	r3, #0
 8017346:	d101      	bne.n	801734c <prvProcessTimerOrBlockTask+0x50>
 8017348:	2301      	movs	r3, #1
 801734a:	e000      	b.n	801734e <prvProcessTimerOrBlockTask+0x52>
 801734c:	2300      	movs	r3, #0
 801734e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017350:	4b0f      	ldr	r3, [pc, #60]	; (8017390 <prvProcessTimerOrBlockTask+0x94>)
 8017352:	6818      	ldr	r0, [r3, #0]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	683a      	ldr	r2, [r7, #0]
 801735c:	4619      	mov	r1, r3
 801735e:	f7fe fedb 	bl	8016118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017362:	f7ff f957 	bl	8016614 <xTaskResumeAll>
 8017366:	4603      	mov	r3, r0
 8017368:	2b00      	cmp	r3, #0
 801736a:	d10a      	bne.n	8017382 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801736c:	4b09      	ldr	r3, [pc, #36]	; (8017394 <prvProcessTimerOrBlockTask+0x98>)
 801736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017372:	601a      	str	r2, [r3, #0]
 8017374:	f3bf 8f4f 	dsb	sy
 8017378:	f3bf 8f6f 	isb	sy
}
 801737c:	e001      	b.n	8017382 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801737e:	f7ff f949 	bl	8016614 <xTaskResumeAll>
}
 8017382:	bf00      	nop
 8017384:	3710      	adds	r7, #16
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}
 801738a:	bf00      	nop
 801738c:	24002ba8 	.word	0x24002ba8
 8017390:	24002bac 	.word	0x24002bac
 8017394:	e000ed04 	.word	0xe000ed04

08017398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017398:	b480      	push	{r7}
 801739a:	b085      	sub	sp, #20
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80173a0:	4b0e      	ldr	r3, [pc, #56]	; (80173dc <prvGetNextExpireTime+0x44>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d101      	bne.n	80173ae <prvGetNextExpireTime+0x16>
 80173aa:	2201      	movs	r2, #1
 80173ac:	e000      	b.n	80173b0 <prvGetNextExpireTime+0x18>
 80173ae:	2200      	movs	r2, #0
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d105      	bne.n	80173c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80173bc:	4b07      	ldr	r3, [pc, #28]	; (80173dc <prvGetNextExpireTime+0x44>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	60fb      	str	r3, [r7, #12]
 80173c6:	e001      	b.n	80173cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80173c8:	2300      	movs	r3, #0
 80173ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80173cc:	68fb      	ldr	r3, [r7, #12]
}
 80173ce:	4618      	mov	r0, r3
 80173d0:	3714      	adds	r7, #20
 80173d2:	46bd      	mov	sp, r7
 80173d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d8:	4770      	bx	lr
 80173da:	bf00      	nop
 80173dc:	24002ba4 	.word	0x24002ba4

080173e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80173e0:	b580      	push	{r7, lr}
 80173e2:	b084      	sub	sp, #16
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80173e8:	f7ff f9b2 	bl	8016750 <xTaskGetTickCount>
 80173ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80173ee:	4b0b      	ldr	r3, [pc, #44]	; (801741c <prvSampleTimeNow+0x3c>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	68fa      	ldr	r2, [r7, #12]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d205      	bcs.n	8017404 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80173f8:	f000 f936 	bl	8017668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2201      	movs	r2, #1
 8017400:	601a      	str	r2, [r3, #0]
 8017402:	e002      	b.n	801740a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2200      	movs	r2, #0
 8017408:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801740a:	4a04      	ldr	r2, [pc, #16]	; (801741c <prvSampleTimeNow+0x3c>)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017410:	68fb      	ldr	r3, [r7, #12]
}
 8017412:	4618      	mov	r0, r3
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	24002bb4 	.word	0x24002bb4

08017420 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b086      	sub	sp, #24
 8017424:	af00      	add	r7, sp, #0
 8017426:	60f8      	str	r0, [r7, #12]
 8017428:	60b9      	str	r1, [r7, #8]
 801742a:	607a      	str	r2, [r7, #4]
 801742c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801742e:	2300      	movs	r3, #0
 8017430:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	68ba      	ldr	r2, [r7, #8]
 8017436:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	68fa      	ldr	r2, [r7, #12]
 801743c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801743e:	68ba      	ldr	r2, [r7, #8]
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	429a      	cmp	r2, r3
 8017444:	d812      	bhi.n	801746c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017446:	687a      	ldr	r2, [r7, #4]
 8017448:	683b      	ldr	r3, [r7, #0]
 801744a:	1ad2      	subs	r2, r2, r3
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	699b      	ldr	r3, [r3, #24]
 8017450:	429a      	cmp	r2, r3
 8017452:	d302      	bcc.n	801745a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017454:	2301      	movs	r3, #1
 8017456:	617b      	str	r3, [r7, #20]
 8017458:	e01b      	b.n	8017492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801745a:	4b10      	ldr	r3, [pc, #64]	; (801749c <prvInsertTimerInActiveList+0x7c>)
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	3304      	adds	r3, #4
 8017462:	4619      	mov	r1, r3
 8017464:	4610      	mov	r0, r2
 8017466:	f7fe f93c 	bl	80156e2 <vListInsert>
 801746a:	e012      	b.n	8017492 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801746c:	687a      	ldr	r2, [r7, #4]
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	429a      	cmp	r2, r3
 8017472:	d206      	bcs.n	8017482 <prvInsertTimerInActiveList+0x62>
 8017474:	68ba      	ldr	r2, [r7, #8]
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	429a      	cmp	r2, r3
 801747a:	d302      	bcc.n	8017482 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801747c:	2301      	movs	r3, #1
 801747e:	617b      	str	r3, [r7, #20]
 8017480:	e007      	b.n	8017492 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017482:	4b07      	ldr	r3, [pc, #28]	; (80174a0 <prvInsertTimerInActiveList+0x80>)
 8017484:	681a      	ldr	r2, [r3, #0]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	3304      	adds	r3, #4
 801748a:	4619      	mov	r1, r3
 801748c:	4610      	mov	r0, r2
 801748e:	f7fe f928 	bl	80156e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017492:	697b      	ldr	r3, [r7, #20]
}
 8017494:	4618      	mov	r0, r3
 8017496:	3718      	adds	r7, #24
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}
 801749c:	24002ba8 	.word	0x24002ba8
 80174a0:	24002ba4 	.word	0x24002ba4

080174a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b08e      	sub	sp, #56	; 0x38
 80174a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80174aa:	e0ca      	b.n	8017642 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	da18      	bge.n	80174e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80174b2:	1d3b      	adds	r3, r7, #4
 80174b4:	3304      	adds	r3, #4
 80174b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80174b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d10a      	bne.n	80174d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80174be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174c2:	f383 8811 	msr	BASEPRI, r3
 80174c6:	f3bf 8f6f 	isb	sy
 80174ca:	f3bf 8f4f 	dsb	sy
 80174ce:	61fb      	str	r3, [r7, #28]
}
 80174d0:	bf00      	nop
 80174d2:	e7fe      	b.n	80174d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80174d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174da:	6850      	ldr	r0, [r2, #4]
 80174dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174de:	6892      	ldr	r2, [r2, #8]
 80174e0:	4611      	mov	r1, r2
 80174e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	f2c0 80aa 	blt.w	8017640 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80174f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f2:	695b      	ldr	r3, [r3, #20]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d004      	beq.n	8017502 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80174f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fa:	3304      	adds	r3, #4
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7fe f929 	bl	8015754 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017502:	463b      	mov	r3, r7
 8017504:	4618      	mov	r0, r3
 8017506:	f7ff ff6b 	bl	80173e0 <prvSampleTimeNow>
 801750a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	2b09      	cmp	r3, #9
 8017510:	f200 8097 	bhi.w	8017642 <prvProcessReceivedCommands+0x19e>
 8017514:	a201      	add	r2, pc, #4	; (adr r2, 801751c <prvProcessReceivedCommands+0x78>)
 8017516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801751a:	bf00      	nop
 801751c:	08017545 	.word	0x08017545
 8017520:	08017545 	.word	0x08017545
 8017524:	08017545 	.word	0x08017545
 8017528:	080175b9 	.word	0x080175b9
 801752c:	080175cd 	.word	0x080175cd
 8017530:	08017617 	.word	0x08017617
 8017534:	08017545 	.word	0x08017545
 8017538:	08017545 	.word	0x08017545
 801753c:	080175b9 	.word	0x080175b9
 8017540:	080175cd 	.word	0x080175cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801754a:	f043 0301 	orr.w	r3, r3, #1
 801754e:	b2da      	uxtb	r2, r3
 8017550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	699b      	ldr	r3, [r3, #24]
 801755c:	18d1      	adds	r1, r2, r3
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017564:	f7ff ff5c 	bl	8017420 <prvInsertTimerInActiveList>
 8017568:	4603      	mov	r3, r0
 801756a:	2b00      	cmp	r3, #0
 801756c:	d069      	beq.n	8017642 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017570:	6a1b      	ldr	r3, [r3, #32]
 8017572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017574:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017578:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801757c:	f003 0304 	and.w	r3, r3, #4
 8017580:	2b00      	cmp	r3, #0
 8017582:	d05e      	beq.n	8017642 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017584:	68ba      	ldr	r2, [r7, #8]
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	699b      	ldr	r3, [r3, #24]
 801758a:	441a      	add	r2, r3
 801758c:	2300      	movs	r3, #0
 801758e:	9300      	str	r3, [sp, #0]
 8017590:	2300      	movs	r3, #0
 8017592:	2100      	movs	r1, #0
 8017594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017596:	f7ff fe05 	bl	80171a4 <xTimerGenericCommand>
 801759a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801759c:	6a3b      	ldr	r3, [r7, #32]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d14f      	bne.n	8017642 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80175a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175a6:	f383 8811 	msr	BASEPRI, r3
 80175aa:	f3bf 8f6f 	isb	sy
 80175ae:	f3bf 8f4f 	dsb	sy
 80175b2:	61bb      	str	r3, [r7, #24]
}
 80175b4:	bf00      	nop
 80175b6:	e7fe      	b.n	80175b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80175b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175be:	f023 0301 	bic.w	r3, r3, #1
 80175c2:	b2da      	uxtb	r2, r3
 80175c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80175ca:	e03a      	b.n	8017642 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80175cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175d2:	f043 0301 	orr.w	r3, r3, #1
 80175d6:	b2da      	uxtb	r2, r3
 80175d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80175de:	68ba      	ldr	r2, [r7, #8]
 80175e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80175e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175e6:	699b      	ldr	r3, [r3, #24]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d10a      	bne.n	8017602 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80175ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f0:	f383 8811 	msr	BASEPRI, r3
 80175f4:	f3bf 8f6f 	isb	sy
 80175f8:	f3bf 8f4f 	dsb	sy
 80175fc:	617b      	str	r3, [r7, #20]
}
 80175fe:	bf00      	nop
 8017600:	e7fe      	b.n	8017600 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017604:	699a      	ldr	r2, [r3, #24]
 8017606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017608:	18d1      	adds	r1, r2, r3
 801760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801760c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801760e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017610:	f7ff ff06 	bl	8017420 <prvInsertTimerInActiveList>
					break;
 8017614:	e015      	b.n	8017642 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801761c:	f003 0302 	and.w	r3, r3, #2
 8017620:	2b00      	cmp	r3, #0
 8017622:	d103      	bne.n	801762c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8017624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017626:	f000 fbfb 	bl	8017e20 <vPortFree>
 801762a:	e00a      	b.n	8017642 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017632:	f023 0301 	bic.w	r3, r3, #1
 8017636:	b2da      	uxtb	r2, r3
 8017638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801763e:	e000      	b.n	8017642 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017640:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017642:	4b08      	ldr	r3, [pc, #32]	; (8017664 <prvProcessReceivedCommands+0x1c0>)
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	1d39      	adds	r1, r7, #4
 8017648:	2200      	movs	r2, #0
 801764a:	4618      	mov	r0, r3
 801764c:	f7fe fb4a 	bl	8015ce4 <xQueueReceive>
 8017650:	4603      	mov	r3, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	f47f af2a 	bne.w	80174ac <prvProcessReceivedCommands+0x8>
	}
}
 8017658:	bf00      	nop
 801765a:	bf00      	nop
 801765c:	3730      	adds	r7, #48	; 0x30
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	24002bac 	.word	0x24002bac

08017668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b088      	sub	sp, #32
 801766c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801766e:	e048      	b.n	8017702 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017670:	4b2d      	ldr	r3, [pc, #180]	; (8017728 <prvSwitchTimerLists+0xc0>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	68db      	ldr	r3, [r3, #12]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801767a:	4b2b      	ldr	r3, [pc, #172]	; (8017728 <prvSwitchTimerLists+0xc0>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	68db      	ldr	r3, [r3, #12]
 8017682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	3304      	adds	r3, #4
 8017688:	4618      	mov	r0, r3
 801768a:	f7fe f863 	bl	8015754 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	6a1b      	ldr	r3, [r3, #32]
 8017692:	68f8      	ldr	r0, [r7, #12]
 8017694:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801769c:	f003 0304 	and.w	r3, r3, #4
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d02e      	beq.n	8017702 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	699b      	ldr	r3, [r3, #24]
 80176a8:	693a      	ldr	r2, [r7, #16]
 80176aa:	4413      	add	r3, r2
 80176ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80176ae:	68ba      	ldr	r2, [r7, #8]
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	429a      	cmp	r2, r3
 80176b4:	d90e      	bls.n	80176d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	68ba      	ldr	r2, [r7, #8]
 80176ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	68fa      	ldr	r2, [r7, #12]
 80176c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80176c2:	4b19      	ldr	r3, [pc, #100]	; (8017728 <prvSwitchTimerLists+0xc0>)
 80176c4:	681a      	ldr	r2, [r3, #0]
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	3304      	adds	r3, #4
 80176ca:	4619      	mov	r1, r3
 80176cc:	4610      	mov	r0, r2
 80176ce:	f7fe f808 	bl	80156e2 <vListInsert>
 80176d2:	e016      	b.n	8017702 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80176d4:	2300      	movs	r3, #0
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	2300      	movs	r3, #0
 80176da:	693a      	ldr	r2, [r7, #16]
 80176dc:	2100      	movs	r1, #0
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	f7ff fd60 	bl	80171a4 <xTimerGenericCommand>
 80176e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d10a      	bne.n	8017702 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80176ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f0:	f383 8811 	msr	BASEPRI, r3
 80176f4:	f3bf 8f6f 	isb	sy
 80176f8:	f3bf 8f4f 	dsb	sy
 80176fc:	603b      	str	r3, [r7, #0]
}
 80176fe:	bf00      	nop
 8017700:	e7fe      	b.n	8017700 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017702:	4b09      	ldr	r3, [pc, #36]	; (8017728 <prvSwitchTimerLists+0xc0>)
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d1b1      	bne.n	8017670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801770c:	4b06      	ldr	r3, [pc, #24]	; (8017728 <prvSwitchTimerLists+0xc0>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017712:	4b06      	ldr	r3, [pc, #24]	; (801772c <prvSwitchTimerLists+0xc4>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	4a04      	ldr	r2, [pc, #16]	; (8017728 <prvSwitchTimerLists+0xc0>)
 8017718:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801771a:	4a04      	ldr	r2, [pc, #16]	; (801772c <prvSwitchTimerLists+0xc4>)
 801771c:	697b      	ldr	r3, [r7, #20]
 801771e:	6013      	str	r3, [r2, #0]
}
 8017720:	bf00      	nop
 8017722:	3718      	adds	r7, #24
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	24002ba4 	.word	0x24002ba4
 801772c:	24002ba8 	.word	0x24002ba8

08017730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017736:	f000 f985 	bl	8017a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801773a:	4b15      	ldr	r3, [pc, #84]	; (8017790 <prvCheckForValidListAndQueue+0x60>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d120      	bne.n	8017784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017742:	4814      	ldr	r0, [pc, #80]	; (8017794 <prvCheckForValidListAndQueue+0x64>)
 8017744:	f7fd ff7c 	bl	8015640 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017748:	4813      	ldr	r0, [pc, #76]	; (8017798 <prvCheckForValidListAndQueue+0x68>)
 801774a:	f7fd ff79 	bl	8015640 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801774e:	4b13      	ldr	r3, [pc, #76]	; (801779c <prvCheckForValidListAndQueue+0x6c>)
 8017750:	4a10      	ldr	r2, [pc, #64]	; (8017794 <prvCheckForValidListAndQueue+0x64>)
 8017752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017754:	4b12      	ldr	r3, [pc, #72]	; (80177a0 <prvCheckForValidListAndQueue+0x70>)
 8017756:	4a10      	ldr	r2, [pc, #64]	; (8017798 <prvCheckForValidListAndQueue+0x68>)
 8017758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801775a:	2300      	movs	r3, #0
 801775c:	9300      	str	r3, [sp, #0]
 801775e:	4b11      	ldr	r3, [pc, #68]	; (80177a4 <prvCheckForValidListAndQueue+0x74>)
 8017760:	4a11      	ldr	r2, [pc, #68]	; (80177a8 <prvCheckForValidListAndQueue+0x78>)
 8017762:	2110      	movs	r1, #16
 8017764:	200a      	movs	r0, #10
 8017766:	f7fe f887 	bl	8015878 <xQueueGenericCreateStatic>
 801776a:	4603      	mov	r3, r0
 801776c:	4a08      	ldr	r2, [pc, #32]	; (8017790 <prvCheckForValidListAndQueue+0x60>)
 801776e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017770:	4b07      	ldr	r3, [pc, #28]	; (8017790 <prvCheckForValidListAndQueue+0x60>)
 8017772:	681b      	ldr	r3, [r3, #0]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d005      	beq.n	8017784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017778:	4b05      	ldr	r3, [pc, #20]	; (8017790 <prvCheckForValidListAndQueue+0x60>)
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	490b      	ldr	r1, [pc, #44]	; (80177ac <prvCheckForValidListAndQueue+0x7c>)
 801777e:	4618      	mov	r0, r3
 8017780:	f7fe fca0 	bl	80160c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017784:	f000 f98e 	bl	8017aa4 <vPortExitCritical>
}
 8017788:	bf00      	nop
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}
 801778e:	bf00      	nop
 8017790:	24002bac 	.word	0x24002bac
 8017794:	24002b7c 	.word	0x24002b7c
 8017798:	24002b90 	.word	0x24002b90
 801779c:	24002ba4 	.word	0x24002ba4
 80177a0:	24002ba8 	.word	0x24002ba8
 80177a4:	24002c58 	.word	0x24002c58
 80177a8:	24002bb8 	.word	0x24002bb8
 80177ac:	08018d50 	.word	0x08018d50

080177b0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b08a      	sub	sp, #40	; 0x28
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
 80177bc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80177be:	f06f 0301 	mvn.w	r3, #1
 80177c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80177d0:	4b06      	ldr	r3, [pc, #24]	; (80177ec <xTimerPendFunctionCallFromISR+0x3c>)
 80177d2:	6818      	ldr	r0, [r3, #0]
 80177d4:	f107 0114 	add.w	r1, r7, #20
 80177d8:	2300      	movs	r3, #0
 80177da:	683a      	ldr	r2, [r7, #0]
 80177dc:	f7fe f9e6 	bl	8015bac <xQueueGenericSendFromISR>
 80177e0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80177e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80177e4:	4618      	mov	r0, r3
 80177e6:	3728      	adds	r7, #40	; 0x28
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}
 80177ec:	24002bac 	.word	0x24002bac

080177f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80177f0:	b480      	push	{r7}
 80177f2:	b085      	sub	sp, #20
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	60b9      	str	r1, [r7, #8]
 80177fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	3b04      	subs	r3, #4
 8017800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	3b04      	subs	r3, #4
 801780e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017810:	68bb      	ldr	r3, [r7, #8]
 8017812:	f023 0201 	bic.w	r2, r3, #1
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	3b04      	subs	r3, #4
 801781e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017820:	4a0c      	ldr	r2, [pc, #48]	; (8017854 <pxPortInitialiseStack+0x64>)
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	3b14      	subs	r3, #20
 801782a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	3b04      	subs	r3, #4
 8017836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f06f 0202 	mvn.w	r2, #2
 801783e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	3b20      	subs	r3, #32
 8017844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017846:	68fb      	ldr	r3, [r7, #12]
}
 8017848:	4618      	mov	r0, r3
 801784a:	3714      	adds	r7, #20
 801784c:	46bd      	mov	sp, r7
 801784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017852:	4770      	bx	lr
 8017854:	08017859 	.word	0x08017859

08017858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017858:	b480      	push	{r7}
 801785a:	b085      	sub	sp, #20
 801785c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801785e:	2300      	movs	r3, #0
 8017860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017862:	4b12      	ldr	r3, [pc, #72]	; (80178ac <prvTaskExitError+0x54>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801786a:	d00a      	beq.n	8017882 <prvTaskExitError+0x2a>
	__asm volatile
 801786c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017870:	f383 8811 	msr	BASEPRI, r3
 8017874:	f3bf 8f6f 	isb	sy
 8017878:	f3bf 8f4f 	dsb	sy
 801787c:	60fb      	str	r3, [r7, #12]
}
 801787e:	bf00      	nop
 8017880:	e7fe      	b.n	8017880 <prvTaskExitError+0x28>
	__asm volatile
 8017882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017886:	f383 8811 	msr	BASEPRI, r3
 801788a:	f3bf 8f6f 	isb	sy
 801788e:	f3bf 8f4f 	dsb	sy
 8017892:	60bb      	str	r3, [r7, #8]
}
 8017894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017896:	bf00      	nop
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d0fc      	beq.n	8017898 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801789e:	bf00      	nop
 80178a0:	bf00      	nop
 80178a2:	3714      	adds	r7, #20
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr
 80178ac:	24000094 	.word	0x24000094

080178b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80178b0:	4b07      	ldr	r3, [pc, #28]	; (80178d0 <pxCurrentTCBConst2>)
 80178b2:	6819      	ldr	r1, [r3, #0]
 80178b4:	6808      	ldr	r0, [r1, #0]
 80178b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178ba:	f380 8809 	msr	PSP, r0
 80178be:	f3bf 8f6f 	isb	sy
 80178c2:	f04f 0000 	mov.w	r0, #0
 80178c6:	f380 8811 	msr	BASEPRI, r0
 80178ca:	4770      	bx	lr
 80178cc:	f3af 8000 	nop.w

080178d0 <pxCurrentTCBConst2>:
 80178d0:	2400267c 	.word	0x2400267c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80178d4:	bf00      	nop
 80178d6:	bf00      	nop

080178d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80178d8:	4808      	ldr	r0, [pc, #32]	; (80178fc <prvPortStartFirstTask+0x24>)
 80178da:	6800      	ldr	r0, [r0, #0]
 80178dc:	6800      	ldr	r0, [r0, #0]
 80178de:	f380 8808 	msr	MSP, r0
 80178e2:	f04f 0000 	mov.w	r0, #0
 80178e6:	f380 8814 	msr	CONTROL, r0
 80178ea:	b662      	cpsie	i
 80178ec:	b661      	cpsie	f
 80178ee:	f3bf 8f4f 	dsb	sy
 80178f2:	f3bf 8f6f 	isb	sy
 80178f6:	df00      	svc	0
 80178f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80178fa:	bf00      	nop
 80178fc:	e000ed08 	.word	0xe000ed08

08017900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b086      	sub	sp, #24
 8017904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017906:	4b46      	ldr	r3, [pc, #280]	; (8017a20 <xPortStartScheduler+0x120>)
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	4a46      	ldr	r2, [pc, #280]	; (8017a24 <xPortStartScheduler+0x124>)
 801790c:	4293      	cmp	r3, r2
 801790e:	d10a      	bne.n	8017926 <xPortStartScheduler+0x26>
	__asm volatile
 8017910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017914:	f383 8811 	msr	BASEPRI, r3
 8017918:	f3bf 8f6f 	isb	sy
 801791c:	f3bf 8f4f 	dsb	sy
 8017920:	613b      	str	r3, [r7, #16]
}
 8017922:	bf00      	nop
 8017924:	e7fe      	b.n	8017924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017926:	4b3e      	ldr	r3, [pc, #248]	; (8017a20 <xPortStartScheduler+0x120>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4a3f      	ldr	r2, [pc, #252]	; (8017a28 <xPortStartScheduler+0x128>)
 801792c:	4293      	cmp	r3, r2
 801792e:	d10a      	bne.n	8017946 <xPortStartScheduler+0x46>
	__asm volatile
 8017930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017934:	f383 8811 	msr	BASEPRI, r3
 8017938:	f3bf 8f6f 	isb	sy
 801793c:	f3bf 8f4f 	dsb	sy
 8017940:	60fb      	str	r3, [r7, #12]
}
 8017942:	bf00      	nop
 8017944:	e7fe      	b.n	8017944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8017946:	4b39      	ldr	r3, [pc, #228]	; (8017a2c <xPortStartScheduler+0x12c>)
 8017948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801794a:	697b      	ldr	r3, [r7, #20]
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	b2db      	uxtb	r3, r3
 8017950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	22ff      	movs	r2, #255	; 0xff
 8017956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	781b      	ldrb	r3, [r3, #0]
 801795c:	b2db      	uxtb	r3, r3
 801795e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017960:	78fb      	ldrb	r3, [r7, #3]
 8017962:	b2db      	uxtb	r3, r3
 8017964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017968:	b2da      	uxtb	r2, r3
 801796a:	4b31      	ldr	r3, [pc, #196]	; (8017a30 <xPortStartScheduler+0x130>)
 801796c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801796e:	4b31      	ldr	r3, [pc, #196]	; (8017a34 <xPortStartScheduler+0x134>)
 8017970:	2207      	movs	r2, #7
 8017972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017974:	e009      	b.n	801798a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8017976:	4b2f      	ldr	r3, [pc, #188]	; (8017a34 <xPortStartScheduler+0x134>)
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	3b01      	subs	r3, #1
 801797c:	4a2d      	ldr	r2, [pc, #180]	; (8017a34 <xPortStartScheduler+0x134>)
 801797e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017980:	78fb      	ldrb	r3, [r7, #3]
 8017982:	b2db      	uxtb	r3, r3
 8017984:	005b      	lsls	r3, r3, #1
 8017986:	b2db      	uxtb	r3, r3
 8017988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801798a:	78fb      	ldrb	r3, [r7, #3]
 801798c:	b2db      	uxtb	r3, r3
 801798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017992:	2b80      	cmp	r3, #128	; 0x80
 8017994:	d0ef      	beq.n	8017976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017996:	4b27      	ldr	r3, [pc, #156]	; (8017a34 <xPortStartScheduler+0x134>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	f1c3 0307 	rsb	r3, r3, #7
 801799e:	2b04      	cmp	r3, #4
 80179a0:	d00a      	beq.n	80179b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80179a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179a6:	f383 8811 	msr	BASEPRI, r3
 80179aa:	f3bf 8f6f 	isb	sy
 80179ae:	f3bf 8f4f 	dsb	sy
 80179b2:	60bb      	str	r3, [r7, #8]
}
 80179b4:	bf00      	nop
 80179b6:	e7fe      	b.n	80179b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80179b8:	4b1e      	ldr	r3, [pc, #120]	; (8017a34 <xPortStartScheduler+0x134>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	021b      	lsls	r3, r3, #8
 80179be:	4a1d      	ldr	r2, [pc, #116]	; (8017a34 <xPortStartScheduler+0x134>)
 80179c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80179c2:	4b1c      	ldr	r3, [pc, #112]	; (8017a34 <xPortStartScheduler+0x134>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80179ca:	4a1a      	ldr	r2, [pc, #104]	; (8017a34 <xPortStartScheduler+0x134>)
 80179cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	b2da      	uxtb	r2, r3
 80179d2:	697b      	ldr	r3, [r7, #20]
 80179d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80179d6:	4b18      	ldr	r3, [pc, #96]	; (8017a38 <xPortStartScheduler+0x138>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a17      	ldr	r2, [pc, #92]	; (8017a38 <xPortStartScheduler+0x138>)
 80179dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80179e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80179e2:	4b15      	ldr	r3, [pc, #84]	; (8017a38 <xPortStartScheduler+0x138>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	4a14      	ldr	r2, [pc, #80]	; (8017a38 <xPortStartScheduler+0x138>)
 80179e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80179ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80179ee:	f000 f8dd 	bl	8017bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80179f2:	4b12      	ldr	r3, [pc, #72]	; (8017a3c <xPortStartScheduler+0x13c>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80179f8:	f000 f8fc 	bl	8017bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80179fc:	4b10      	ldr	r3, [pc, #64]	; (8017a40 <xPortStartScheduler+0x140>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	4a0f      	ldr	r2, [pc, #60]	; (8017a40 <xPortStartScheduler+0x140>)
 8017a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017a08:	f7ff ff66 	bl	80178d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017a0c:	f7fe ff72 	bl	80168f4 <vTaskSwitchContext>
	prvTaskExitError();
 8017a10:	f7ff ff22 	bl	8017858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017a14:	2300      	movs	r3, #0
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3718      	adds	r7, #24
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}
 8017a1e:	bf00      	nop
 8017a20:	e000ed00 	.word	0xe000ed00
 8017a24:	410fc271 	.word	0x410fc271
 8017a28:	410fc270 	.word	0x410fc270
 8017a2c:	e000e400 	.word	0xe000e400
 8017a30:	24002ca8 	.word	0x24002ca8
 8017a34:	24002cac 	.word	0x24002cac
 8017a38:	e000ed20 	.word	0xe000ed20
 8017a3c:	24000094 	.word	0x24000094
 8017a40:	e000ef34 	.word	0xe000ef34

08017a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017a44:	b480      	push	{r7}
 8017a46:	b083      	sub	sp, #12
 8017a48:	af00      	add	r7, sp, #0
	__asm volatile
 8017a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a4e:	f383 8811 	msr	BASEPRI, r3
 8017a52:	f3bf 8f6f 	isb	sy
 8017a56:	f3bf 8f4f 	dsb	sy
 8017a5a:	607b      	str	r3, [r7, #4]
}
 8017a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017a5e:	4b0f      	ldr	r3, [pc, #60]	; (8017a9c <vPortEnterCritical+0x58>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	3301      	adds	r3, #1
 8017a64:	4a0d      	ldr	r2, [pc, #52]	; (8017a9c <vPortEnterCritical+0x58>)
 8017a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017a68:	4b0c      	ldr	r3, [pc, #48]	; (8017a9c <vPortEnterCritical+0x58>)
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2b01      	cmp	r3, #1
 8017a6e:	d10f      	bne.n	8017a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017a70:	4b0b      	ldr	r3, [pc, #44]	; (8017aa0 <vPortEnterCritical+0x5c>)
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	b2db      	uxtb	r3, r3
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d00a      	beq.n	8017a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8017a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a7e:	f383 8811 	msr	BASEPRI, r3
 8017a82:	f3bf 8f6f 	isb	sy
 8017a86:	f3bf 8f4f 	dsb	sy
 8017a8a:	603b      	str	r3, [r7, #0]
}
 8017a8c:	bf00      	nop
 8017a8e:	e7fe      	b.n	8017a8e <vPortEnterCritical+0x4a>
	}
}
 8017a90:	bf00      	nop
 8017a92:	370c      	adds	r7, #12
 8017a94:	46bd      	mov	sp, r7
 8017a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9a:	4770      	bx	lr
 8017a9c:	24000094 	.word	0x24000094
 8017aa0:	e000ed04 	.word	0xe000ed04

08017aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017aa4:	b480      	push	{r7}
 8017aa6:	b083      	sub	sp, #12
 8017aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017aaa:	4b12      	ldr	r3, [pc, #72]	; (8017af4 <vPortExitCritical+0x50>)
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d10a      	bne.n	8017ac8 <vPortExitCritical+0x24>
	__asm volatile
 8017ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ab6:	f383 8811 	msr	BASEPRI, r3
 8017aba:	f3bf 8f6f 	isb	sy
 8017abe:	f3bf 8f4f 	dsb	sy
 8017ac2:	607b      	str	r3, [r7, #4]
}
 8017ac4:	bf00      	nop
 8017ac6:	e7fe      	b.n	8017ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017ac8:	4b0a      	ldr	r3, [pc, #40]	; (8017af4 <vPortExitCritical+0x50>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	3b01      	subs	r3, #1
 8017ace:	4a09      	ldr	r2, [pc, #36]	; (8017af4 <vPortExitCritical+0x50>)
 8017ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017ad2:	4b08      	ldr	r3, [pc, #32]	; (8017af4 <vPortExitCritical+0x50>)
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d105      	bne.n	8017ae6 <vPortExitCritical+0x42>
 8017ada:	2300      	movs	r3, #0
 8017adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	f383 8811 	msr	BASEPRI, r3
}
 8017ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017ae6:	bf00      	nop
 8017ae8:	370c      	adds	r7, #12
 8017aea:	46bd      	mov	sp, r7
 8017aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop
 8017af4:	24000094 	.word	0x24000094
	...

08017b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017b00:	f3ef 8009 	mrs	r0, PSP
 8017b04:	f3bf 8f6f 	isb	sy
 8017b08:	4b15      	ldr	r3, [pc, #84]	; (8017b60 <pxCurrentTCBConst>)
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	f01e 0f10 	tst.w	lr, #16
 8017b10:	bf08      	it	eq
 8017b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b1a:	6010      	str	r0, [r2, #0]
 8017b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017b24:	f380 8811 	msr	BASEPRI, r0
 8017b28:	f3bf 8f4f 	dsb	sy
 8017b2c:	f3bf 8f6f 	isb	sy
 8017b30:	f7fe fee0 	bl	80168f4 <vTaskSwitchContext>
 8017b34:	f04f 0000 	mov.w	r0, #0
 8017b38:	f380 8811 	msr	BASEPRI, r0
 8017b3c:	bc09      	pop	{r0, r3}
 8017b3e:	6819      	ldr	r1, [r3, #0]
 8017b40:	6808      	ldr	r0, [r1, #0]
 8017b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b46:	f01e 0f10 	tst.w	lr, #16
 8017b4a:	bf08      	it	eq
 8017b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017b50:	f380 8809 	msr	PSP, r0
 8017b54:	f3bf 8f6f 	isb	sy
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	f3af 8000 	nop.w

08017b60 <pxCurrentTCBConst>:
 8017b60:	2400267c 	.word	0x2400267c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017b64:	bf00      	nop
 8017b66:	bf00      	nop

08017b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b082      	sub	sp, #8
 8017b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8017b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b72:	f383 8811 	msr	BASEPRI, r3
 8017b76:	f3bf 8f6f 	isb	sy
 8017b7a:	f3bf 8f4f 	dsb	sy
 8017b7e:	607b      	str	r3, [r7, #4]
}
 8017b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017b82:	f7fe fdf5 	bl	8016770 <xTaskIncrementTick>
 8017b86:	4603      	mov	r3, r0
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d003      	beq.n	8017b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017b8c:	4b06      	ldr	r3, [pc, #24]	; (8017ba8 <xPortSysTickHandler+0x40>)
 8017b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017b92:	601a      	str	r2, [r3, #0]
 8017b94:	2300      	movs	r3, #0
 8017b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	f383 8811 	msr	BASEPRI, r3
}
 8017b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017ba0:	bf00      	nop
 8017ba2:	3708      	adds	r7, #8
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}
 8017ba8:	e000ed04 	.word	0xe000ed04

08017bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017bac:	b480      	push	{r7}
 8017bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017bb0:	4b0b      	ldr	r3, [pc, #44]	; (8017be0 <vPortSetupTimerInterrupt+0x34>)
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017bb6:	4b0b      	ldr	r3, [pc, #44]	; (8017be4 <vPortSetupTimerInterrupt+0x38>)
 8017bb8:	2200      	movs	r2, #0
 8017bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017bbc:	4b0a      	ldr	r3, [pc, #40]	; (8017be8 <vPortSetupTimerInterrupt+0x3c>)
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	4a0a      	ldr	r2, [pc, #40]	; (8017bec <vPortSetupTimerInterrupt+0x40>)
 8017bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8017bc6:	099b      	lsrs	r3, r3, #6
 8017bc8:	4a09      	ldr	r2, [pc, #36]	; (8017bf0 <vPortSetupTimerInterrupt+0x44>)
 8017bca:	3b01      	subs	r3, #1
 8017bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017bce:	4b04      	ldr	r3, [pc, #16]	; (8017be0 <vPortSetupTimerInterrupt+0x34>)
 8017bd0:	2207      	movs	r2, #7
 8017bd2:	601a      	str	r2, [r3, #0]
}
 8017bd4:	bf00      	nop
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bdc:	4770      	bx	lr
 8017bde:	bf00      	nop
 8017be0:	e000e010 	.word	0xe000e010
 8017be4:	e000e018 	.word	0xe000e018
 8017be8:	24000084 	.word	0x24000084
 8017bec:	10624dd3 	.word	0x10624dd3
 8017bf0:	e000e014 	.word	0xe000e014

08017bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017c04 <vPortEnableVFP+0x10>
 8017bf8:	6801      	ldr	r1, [r0, #0]
 8017bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017bfe:	6001      	str	r1, [r0, #0]
 8017c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017c02:	bf00      	nop
 8017c04:	e000ed88 	.word	0xe000ed88

08017c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017c08:	b480      	push	{r7}
 8017c0a:	b085      	sub	sp, #20
 8017c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017c0e:	f3ef 8305 	mrs	r3, IPSR
 8017c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	2b0f      	cmp	r3, #15
 8017c18:	d914      	bls.n	8017c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017c1a:	4a17      	ldr	r2, [pc, #92]	; (8017c78 <vPortValidateInterruptPriority+0x70>)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	4413      	add	r3, r2
 8017c20:	781b      	ldrb	r3, [r3, #0]
 8017c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017c24:	4b15      	ldr	r3, [pc, #84]	; (8017c7c <vPortValidateInterruptPriority+0x74>)
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	7afa      	ldrb	r2, [r7, #11]
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d20a      	bcs.n	8017c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c32:	f383 8811 	msr	BASEPRI, r3
 8017c36:	f3bf 8f6f 	isb	sy
 8017c3a:	f3bf 8f4f 	dsb	sy
 8017c3e:	607b      	str	r3, [r7, #4]
}
 8017c40:	bf00      	nop
 8017c42:	e7fe      	b.n	8017c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017c44:	4b0e      	ldr	r3, [pc, #56]	; (8017c80 <vPortValidateInterruptPriority+0x78>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017c4c:	4b0d      	ldr	r3, [pc, #52]	; (8017c84 <vPortValidateInterruptPriority+0x7c>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d90a      	bls.n	8017c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c58:	f383 8811 	msr	BASEPRI, r3
 8017c5c:	f3bf 8f6f 	isb	sy
 8017c60:	f3bf 8f4f 	dsb	sy
 8017c64:	603b      	str	r3, [r7, #0]
}
 8017c66:	bf00      	nop
 8017c68:	e7fe      	b.n	8017c68 <vPortValidateInterruptPriority+0x60>
	}
 8017c6a:	bf00      	nop
 8017c6c:	3714      	adds	r7, #20
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c74:	4770      	bx	lr
 8017c76:	bf00      	nop
 8017c78:	e000e3f0 	.word	0xe000e3f0
 8017c7c:	24002ca8 	.word	0x24002ca8
 8017c80:	e000ed0c 	.word	0xe000ed0c
 8017c84:	24002cac 	.word	0x24002cac

08017c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b08a      	sub	sp, #40	; 0x28
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017c90:	2300      	movs	r3, #0
 8017c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017c94:	f7fe fcb0 	bl	80165f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017c98:	4b5b      	ldr	r3, [pc, #364]	; (8017e08 <pvPortMalloc+0x180>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d101      	bne.n	8017ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017ca0:	f000 f920 	bl	8017ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017ca4:	4b59      	ldr	r3, [pc, #356]	; (8017e0c <pvPortMalloc+0x184>)
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	4013      	ands	r3, r2
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	f040 8093 	bne.w	8017dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d01d      	beq.n	8017cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017cb8:	2208      	movs	r2, #8
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	4413      	add	r3, r2
 8017cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	f003 0307 	and.w	r3, r3, #7
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d014      	beq.n	8017cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f023 0307 	bic.w	r3, r3, #7
 8017cd0:	3308      	adds	r3, #8
 8017cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f003 0307 	and.w	r3, r3, #7
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d00a      	beq.n	8017cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8017cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce2:	f383 8811 	msr	BASEPRI, r3
 8017ce6:	f3bf 8f6f 	isb	sy
 8017cea:	f3bf 8f4f 	dsb	sy
 8017cee:	617b      	str	r3, [r7, #20]
}
 8017cf0:	bf00      	nop
 8017cf2:	e7fe      	b.n	8017cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d06e      	beq.n	8017dd8 <pvPortMalloc+0x150>
 8017cfa:	4b45      	ldr	r3, [pc, #276]	; (8017e10 <pvPortMalloc+0x188>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	687a      	ldr	r2, [r7, #4]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d869      	bhi.n	8017dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017d04:	4b43      	ldr	r3, [pc, #268]	; (8017e14 <pvPortMalloc+0x18c>)
 8017d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017d08:	4b42      	ldr	r3, [pc, #264]	; (8017e14 <pvPortMalloc+0x18c>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017d0e:	e004      	b.n	8017d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	687a      	ldr	r2, [r7, #4]
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d903      	bls.n	8017d2c <pvPortMalloc+0xa4>
 8017d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d1f1      	bne.n	8017d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017d2c:	4b36      	ldr	r3, [pc, #216]	; (8017e08 <pvPortMalloc+0x180>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d050      	beq.n	8017dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017d36:	6a3b      	ldr	r3, [r7, #32]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	2208      	movs	r2, #8
 8017d3c:	4413      	add	r3, r2
 8017d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d42:	681a      	ldr	r2, [r3, #0]
 8017d44:	6a3b      	ldr	r3, [r7, #32]
 8017d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d4a:	685a      	ldr	r2, [r3, #4]
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	1ad2      	subs	r2, r2, r3
 8017d50:	2308      	movs	r3, #8
 8017d52:	005b      	lsls	r3, r3, #1
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d91f      	bls.n	8017d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	4413      	add	r3, r2
 8017d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017d60:	69bb      	ldr	r3, [r7, #24]
 8017d62:	f003 0307 	and.w	r3, r3, #7
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d00a      	beq.n	8017d80 <pvPortMalloc+0xf8>
	__asm volatile
 8017d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d6e:	f383 8811 	msr	BASEPRI, r3
 8017d72:	f3bf 8f6f 	isb	sy
 8017d76:	f3bf 8f4f 	dsb	sy
 8017d7a:	613b      	str	r3, [r7, #16]
}
 8017d7c:	bf00      	nop
 8017d7e:	e7fe      	b.n	8017d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d82:	685a      	ldr	r2, [r3, #4]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	1ad2      	subs	r2, r2, r3
 8017d88:	69bb      	ldr	r3, [r7, #24]
 8017d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8e:	687a      	ldr	r2, [r7, #4]
 8017d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017d92:	69b8      	ldr	r0, [r7, #24]
 8017d94:	f000 f908 	bl	8017fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017d98:	4b1d      	ldr	r3, [pc, #116]	; (8017e10 <pvPortMalloc+0x188>)
 8017d9a:	681a      	ldr	r2, [r3, #0]
 8017d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	1ad3      	subs	r3, r2, r3
 8017da2:	4a1b      	ldr	r2, [pc, #108]	; (8017e10 <pvPortMalloc+0x188>)
 8017da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017da6:	4b1a      	ldr	r3, [pc, #104]	; (8017e10 <pvPortMalloc+0x188>)
 8017da8:	681a      	ldr	r2, [r3, #0]
 8017daa:	4b1b      	ldr	r3, [pc, #108]	; (8017e18 <pvPortMalloc+0x190>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d203      	bcs.n	8017dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017db2:	4b17      	ldr	r3, [pc, #92]	; (8017e10 <pvPortMalloc+0x188>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	4a18      	ldr	r2, [pc, #96]	; (8017e18 <pvPortMalloc+0x190>)
 8017db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dbc:	685a      	ldr	r2, [r3, #4]
 8017dbe:	4b13      	ldr	r3, [pc, #76]	; (8017e0c <pvPortMalloc+0x184>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	431a      	orrs	r2, r3
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dca:	2200      	movs	r2, #0
 8017dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017dce:	4b13      	ldr	r3, [pc, #76]	; (8017e1c <pvPortMalloc+0x194>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	4a11      	ldr	r2, [pc, #68]	; (8017e1c <pvPortMalloc+0x194>)
 8017dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017dd8:	f7fe fc1c 	bl	8016614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	f003 0307 	and.w	r3, r3, #7
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d00a      	beq.n	8017dfc <pvPortMalloc+0x174>
	__asm volatile
 8017de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dea:	f383 8811 	msr	BASEPRI, r3
 8017dee:	f3bf 8f6f 	isb	sy
 8017df2:	f3bf 8f4f 	dsb	sy
 8017df6:	60fb      	str	r3, [r7, #12]
}
 8017df8:	bf00      	nop
 8017dfa:	e7fe      	b.n	8017dfa <pvPortMalloc+0x172>
	return pvReturn;
 8017dfc:	69fb      	ldr	r3, [r7, #28]
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	3728      	adds	r7, #40	; 0x28
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	240068b8 	.word	0x240068b8
 8017e0c:	240068cc 	.word	0x240068cc
 8017e10:	240068bc 	.word	0x240068bc
 8017e14:	240068b0 	.word	0x240068b0
 8017e18:	240068c0 	.word	0x240068c0
 8017e1c:	240068c4 	.word	0x240068c4

08017e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b086      	sub	sp, #24
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d04d      	beq.n	8017ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017e32:	2308      	movs	r3, #8
 8017e34:	425b      	negs	r3, r3
 8017e36:	697a      	ldr	r2, [r7, #20]
 8017e38:	4413      	add	r3, r2
 8017e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017e40:	693b      	ldr	r3, [r7, #16]
 8017e42:	685a      	ldr	r2, [r3, #4]
 8017e44:	4b24      	ldr	r3, [pc, #144]	; (8017ed8 <vPortFree+0xb8>)
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	4013      	ands	r3, r2
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d10a      	bne.n	8017e64 <vPortFree+0x44>
	__asm volatile
 8017e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e52:	f383 8811 	msr	BASEPRI, r3
 8017e56:	f3bf 8f6f 	isb	sy
 8017e5a:	f3bf 8f4f 	dsb	sy
 8017e5e:	60fb      	str	r3, [r7, #12]
}
 8017e60:	bf00      	nop
 8017e62:	e7fe      	b.n	8017e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017e64:	693b      	ldr	r3, [r7, #16]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d00a      	beq.n	8017e82 <vPortFree+0x62>
	__asm volatile
 8017e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e70:	f383 8811 	msr	BASEPRI, r3
 8017e74:	f3bf 8f6f 	isb	sy
 8017e78:	f3bf 8f4f 	dsb	sy
 8017e7c:	60bb      	str	r3, [r7, #8]
}
 8017e7e:	bf00      	nop
 8017e80:	e7fe      	b.n	8017e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	685a      	ldr	r2, [r3, #4]
 8017e86:	4b14      	ldr	r3, [pc, #80]	; (8017ed8 <vPortFree+0xb8>)
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4013      	ands	r3, r2
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d01e      	beq.n	8017ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017e90:	693b      	ldr	r3, [r7, #16]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d11a      	bne.n	8017ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	685a      	ldr	r2, [r3, #4]
 8017e9c:	4b0e      	ldr	r3, [pc, #56]	; (8017ed8 <vPortFree+0xb8>)
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	43db      	mvns	r3, r3
 8017ea2:	401a      	ands	r2, r3
 8017ea4:	693b      	ldr	r3, [r7, #16]
 8017ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017ea8:	f7fe fba6 	bl	80165f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017eac:	693b      	ldr	r3, [r7, #16]
 8017eae:	685a      	ldr	r2, [r3, #4]
 8017eb0:	4b0a      	ldr	r3, [pc, #40]	; (8017edc <vPortFree+0xbc>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	4413      	add	r3, r2
 8017eb6:	4a09      	ldr	r2, [pc, #36]	; (8017edc <vPortFree+0xbc>)
 8017eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017eba:	6938      	ldr	r0, [r7, #16]
 8017ebc:	f000 f874 	bl	8017fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017ec0:	4b07      	ldr	r3, [pc, #28]	; (8017ee0 <vPortFree+0xc0>)
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	4a06      	ldr	r2, [pc, #24]	; (8017ee0 <vPortFree+0xc0>)
 8017ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017eca:	f7fe fba3 	bl	8016614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017ece:	bf00      	nop
 8017ed0:	3718      	adds	r7, #24
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}
 8017ed6:	bf00      	nop
 8017ed8:	240068cc 	.word	0x240068cc
 8017edc:	240068bc 	.word	0x240068bc
 8017ee0:	240068c8 	.word	0x240068c8

08017ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017ee4:	b480      	push	{r7}
 8017ee6:	b085      	sub	sp, #20
 8017ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8017eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017ef0:	4b27      	ldr	r3, [pc, #156]	; (8017f90 <prvHeapInit+0xac>)
 8017ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	f003 0307 	and.w	r3, r3, #7
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d00c      	beq.n	8017f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	3307      	adds	r3, #7
 8017f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	f023 0307 	bic.w	r3, r3, #7
 8017f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017f0c:	68ba      	ldr	r2, [r7, #8]
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	1ad3      	subs	r3, r2, r3
 8017f12:	4a1f      	ldr	r2, [pc, #124]	; (8017f90 <prvHeapInit+0xac>)
 8017f14:	4413      	add	r3, r2
 8017f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017f1c:	4a1d      	ldr	r2, [pc, #116]	; (8017f94 <prvHeapInit+0xb0>)
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017f22:	4b1c      	ldr	r3, [pc, #112]	; (8017f94 <prvHeapInit+0xb0>)
 8017f24:	2200      	movs	r2, #0
 8017f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	68ba      	ldr	r2, [r7, #8]
 8017f2c:	4413      	add	r3, r2
 8017f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017f30:	2208      	movs	r2, #8
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	1a9b      	subs	r3, r3, r2
 8017f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	f023 0307 	bic.w	r3, r3, #7
 8017f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	4a15      	ldr	r2, [pc, #84]	; (8017f98 <prvHeapInit+0xb4>)
 8017f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017f46:	4b14      	ldr	r3, [pc, #80]	; (8017f98 <prvHeapInit+0xb4>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017f4e:	4b12      	ldr	r3, [pc, #72]	; (8017f98 <prvHeapInit+0xb4>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	2200      	movs	r2, #0
 8017f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017f5a:	683b      	ldr	r3, [r7, #0]
 8017f5c:	68fa      	ldr	r2, [r7, #12]
 8017f5e:	1ad2      	subs	r2, r2, r3
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017f64:	4b0c      	ldr	r3, [pc, #48]	; (8017f98 <prvHeapInit+0xb4>)
 8017f66:	681a      	ldr	r2, [r3, #0]
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	4a0a      	ldr	r2, [pc, #40]	; (8017f9c <prvHeapInit+0xb8>)
 8017f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	685b      	ldr	r3, [r3, #4]
 8017f78:	4a09      	ldr	r2, [pc, #36]	; (8017fa0 <prvHeapInit+0xbc>)
 8017f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017f7c:	4b09      	ldr	r3, [pc, #36]	; (8017fa4 <prvHeapInit+0xc0>)
 8017f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017f82:	601a      	str	r2, [r3, #0]
}
 8017f84:	bf00      	nop
 8017f86:	3714      	adds	r7, #20
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8e:	4770      	bx	lr
 8017f90:	24002cb0 	.word	0x24002cb0
 8017f94:	240068b0 	.word	0x240068b0
 8017f98:	240068b8 	.word	0x240068b8
 8017f9c:	240068c0 	.word	0x240068c0
 8017fa0:	240068bc 	.word	0x240068bc
 8017fa4:	240068cc 	.word	0x240068cc

08017fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017fa8:	b480      	push	{r7}
 8017faa:	b085      	sub	sp, #20
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017fb0:	4b28      	ldr	r3, [pc, #160]	; (8018054 <prvInsertBlockIntoFreeList+0xac>)
 8017fb2:	60fb      	str	r3, [r7, #12]
 8017fb4:	e002      	b.n	8017fbc <prvInsertBlockIntoFreeList+0x14>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	60fb      	str	r3, [r7, #12]
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	687a      	ldr	r2, [r7, #4]
 8017fc2:	429a      	cmp	r2, r3
 8017fc4:	d8f7      	bhi.n	8017fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	685b      	ldr	r3, [r3, #4]
 8017fce:	68ba      	ldr	r2, [r7, #8]
 8017fd0:	4413      	add	r3, r2
 8017fd2:	687a      	ldr	r2, [r7, #4]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d108      	bne.n	8017fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	685a      	ldr	r2, [r3, #4]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	685b      	ldr	r3, [r3, #4]
 8017fe0:	441a      	add	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	685b      	ldr	r3, [r3, #4]
 8017ff2:	68ba      	ldr	r2, [r7, #8]
 8017ff4:	441a      	add	r2, r3
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d118      	bne.n	8018030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	681a      	ldr	r2, [r3, #0]
 8018002:	4b15      	ldr	r3, [pc, #84]	; (8018058 <prvInsertBlockIntoFreeList+0xb0>)
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	429a      	cmp	r2, r3
 8018008:	d00d      	beq.n	8018026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	685a      	ldr	r2, [r3, #4]
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	685b      	ldr	r3, [r3, #4]
 8018014:	441a      	add	r2, r3
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	681a      	ldr	r2, [r3, #0]
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	601a      	str	r2, [r3, #0]
 8018024:	e008      	b.n	8018038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018026:	4b0c      	ldr	r3, [pc, #48]	; (8018058 <prvInsertBlockIntoFreeList+0xb0>)
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	601a      	str	r2, [r3, #0]
 801802e:	e003      	b.n	8018038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	681a      	ldr	r2, [r3, #0]
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018038:	68fa      	ldr	r2, [r7, #12]
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	429a      	cmp	r2, r3
 801803e:	d002      	beq.n	8018046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018046:	bf00      	nop
 8018048:	3714      	adds	r7, #20
 801804a:	46bd      	mov	sp, r7
 801804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018050:	4770      	bx	lr
 8018052:	bf00      	nop
 8018054:	240068b0 	.word	0x240068b0
 8018058:	240068b8 	.word	0x240068b8

0801805c <__errno>:
 801805c:	4b01      	ldr	r3, [pc, #4]	; (8018064 <__errno+0x8>)
 801805e:	6818      	ldr	r0, [r3, #0]
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop
 8018064:	24000098 	.word	0x24000098

08018068 <__libc_init_array>:
 8018068:	b570      	push	{r4, r5, r6, lr}
 801806a:	4d0d      	ldr	r5, [pc, #52]	; (80180a0 <__libc_init_array+0x38>)
 801806c:	4c0d      	ldr	r4, [pc, #52]	; (80180a4 <__libc_init_array+0x3c>)
 801806e:	1b64      	subs	r4, r4, r5
 8018070:	10a4      	asrs	r4, r4, #2
 8018072:	2600      	movs	r6, #0
 8018074:	42a6      	cmp	r6, r4
 8018076:	d109      	bne.n	801808c <__libc_init_array+0x24>
 8018078:	4d0b      	ldr	r5, [pc, #44]	; (80180a8 <__libc_init_array+0x40>)
 801807a:	4c0c      	ldr	r4, [pc, #48]	; (80180ac <__libc_init_array+0x44>)
 801807c:	f000 fd2c 	bl	8018ad8 <_init>
 8018080:	1b64      	subs	r4, r4, r5
 8018082:	10a4      	asrs	r4, r4, #2
 8018084:	2600      	movs	r6, #0
 8018086:	42a6      	cmp	r6, r4
 8018088:	d105      	bne.n	8018096 <__libc_init_array+0x2e>
 801808a:	bd70      	pop	{r4, r5, r6, pc}
 801808c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018090:	4798      	blx	r3
 8018092:	3601      	adds	r6, #1
 8018094:	e7ee      	b.n	8018074 <__libc_init_array+0xc>
 8018096:	f855 3b04 	ldr.w	r3, [r5], #4
 801809a:	4798      	blx	r3
 801809c:	3601      	adds	r6, #1
 801809e:	e7f2      	b.n	8018086 <__libc_init_array+0x1e>
 80180a0:	08018f90 	.word	0x08018f90
 80180a4:	08018f90 	.word	0x08018f90
 80180a8:	08018f90 	.word	0x08018f90
 80180ac:	08018f94 	.word	0x08018f94

080180b0 <memcpy>:
 80180b0:	440a      	add	r2, r1
 80180b2:	4291      	cmp	r1, r2
 80180b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80180b8:	d100      	bne.n	80180bc <memcpy+0xc>
 80180ba:	4770      	bx	lr
 80180bc:	b510      	push	{r4, lr}
 80180be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80180c6:	4291      	cmp	r1, r2
 80180c8:	d1f9      	bne.n	80180be <memcpy+0xe>
 80180ca:	bd10      	pop	{r4, pc}

080180cc <memset>:
 80180cc:	4402      	add	r2, r0
 80180ce:	4603      	mov	r3, r0
 80180d0:	4293      	cmp	r3, r2
 80180d2:	d100      	bne.n	80180d6 <memset+0xa>
 80180d4:	4770      	bx	lr
 80180d6:	f803 1b01 	strb.w	r1, [r3], #1
 80180da:	e7f9      	b.n	80180d0 <memset+0x4>

080180dc <_puts_r>:
 80180dc:	b570      	push	{r4, r5, r6, lr}
 80180de:	460e      	mov	r6, r1
 80180e0:	4605      	mov	r5, r0
 80180e2:	b118      	cbz	r0, 80180ec <_puts_r+0x10>
 80180e4:	6983      	ldr	r3, [r0, #24]
 80180e6:	b90b      	cbnz	r3, 80180ec <_puts_r+0x10>
 80180e8:	f000 fa48 	bl	801857c <__sinit>
 80180ec:	69ab      	ldr	r3, [r5, #24]
 80180ee:	68ac      	ldr	r4, [r5, #8]
 80180f0:	b913      	cbnz	r3, 80180f8 <_puts_r+0x1c>
 80180f2:	4628      	mov	r0, r5
 80180f4:	f000 fa42 	bl	801857c <__sinit>
 80180f8:	4b2c      	ldr	r3, [pc, #176]	; (80181ac <_puts_r+0xd0>)
 80180fa:	429c      	cmp	r4, r3
 80180fc:	d120      	bne.n	8018140 <_puts_r+0x64>
 80180fe:	686c      	ldr	r4, [r5, #4]
 8018100:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018102:	07db      	lsls	r3, r3, #31
 8018104:	d405      	bmi.n	8018112 <_puts_r+0x36>
 8018106:	89a3      	ldrh	r3, [r4, #12]
 8018108:	0598      	lsls	r0, r3, #22
 801810a:	d402      	bmi.n	8018112 <_puts_r+0x36>
 801810c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801810e:	f000 fad3 	bl	80186b8 <__retarget_lock_acquire_recursive>
 8018112:	89a3      	ldrh	r3, [r4, #12]
 8018114:	0719      	lsls	r1, r3, #28
 8018116:	d51d      	bpl.n	8018154 <_puts_r+0x78>
 8018118:	6923      	ldr	r3, [r4, #16]
 801811a:	b1db      	cbz	r3, 8018154 <_puts_r+0x78>
 801811c:	3e01      	subs	r6, #1
 801811e:	68a3      	ldr	r3, [r4, #8]
 8018120:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018124:	3b01      	subs	r3, #1
 8018126:	60a3      	str	r3, [r4, #8]
 8018128:	bb39      	cbnz	r1, 801817a <_puts_r+0x9e>
 801812a:	2b00      	cmp	r3, #0
 801812c:	da38      	bge.n	80181a0 <_puts_r+0xc4>
 801812e:	4622      	mov	r2, r4
 8018130:	210a      	movs	r1, #10
 8018132:	4628      	mov	r0, r5
 8018134:	f000 f848 	bl	80181c8 <__swbuf_r>
 8018138:	3001      	adds	r0, #1
 801813a:	d011      	beq.n	8018160 <_puts_r+0x84>
 801813c:	250a      	movs	r5, #10
 801813e:	e011      	b.n	8018164 <_puts_r+0x88>
 8018140:	4b1b      	ldr	r3, [pc, #108]	; (80181b0 <_puts_r+0xd4>)
 8018142:	429c      	cmp	r4, r3
 8018144:	d101      	bne.n	801814a <_puts_r+0x6e>
 8018146:	68ac      	ldr	r4, [r5, #8]
 8018148:	e7da      	b.n	8018100 <_puts_r+0x24>
 801814a:	4b1a      	ldr	r3, [pc, #104]	; (80181b4 <_puts_r+0xd8>)
 801814c:	429c      	cmp	r4, r3
 801814e:	bf08      	it	eq
 8018150:	68ec      	ldreq	r4, [r5, #12]
 8018152:	e7d5      	b.n	8018100 <_puts_r+0x24>
 8018154:	4621      	mov	r1, r4
 8018156:	4628      	mov	r0, r5
 8018158:	f000 f888 	bl	801826c <__swsetup_r>
 801815c:	2800      	cmp	r0, #0
 801815e:	d0dd      	beq.n	801811c <_puts_r+0x40>
 8018160:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018166:	07da      	lsls	r2, r3, #31
 8018168:	d405      	bmi.n	8018176 <_puts_r+0x9a>
 801816a:	89a3      	ldrh	r3, [r4, #12]
 801816c:	059b      	lsls	r3, r3, #22
 801816e:	d402      	bmi.n	8018176 <_puts_r+0x9a>
 8018170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018172:	f000 faa2 	bl	80186ba <__retarget_lock_release_recursive>
 8018176:	4628      	mov	r0, r5
 8018178:	bd70      	pop	{r4, r5, r6, pc}
 801817a:	2b00      	cmp	r3, #0
 801817c:	da04      	bge.n	8018188 <_puts_r+0xac>
 801817e:	69a2      	ldr	r2, [r4, #24]
 8018180:	429a      	cmp	r2, r3
 8018182:	dc06      	bgt.n	8018192 <_puts_r+0xb6>
 8018184:	290a      	cmp	r1, #10
 8018186:	d004      	beq.n	8018192 <_puts_r+0xb6>
 8018188:	6823      	ldr	r3, [r4, #0]
 801818a:	1c5a      	adds	r2, r3, #1
 801818c:	6022      	str	r2, [r4, #0]
 801818e:	7019      	strb	r1, [r3, #0]
 8018190:	e7c5      	b.n	801811e <_puts_r+0x42>
 8018192:	4622      	mov	r2, r4
 8018194:	4628      	mov	r0, r5
 8018196:	f000 f817 	bl	80181c8 <__swbuf_r>
 801819a:	3001      	adds	r0, #1
 801819c:	d1bf      	bne.n	801811e <_puts_r+0x42>
 801819e:	e7df      	b.n	8018160 <_puts_r+0x84>
 80181a0:	6823      	ldr	r3, [r4, #0]
 80181a2:	250a      	movs	r5, #10
 80181a4:	1c5a      	adds	r2, r3, #1
 80181a6:	6022      	str	r2, [r4, #0]
 80181a8:	701d      	strb	r5, [r3, #0]
 80181aa:	e7db      	b.n	8018164 <_puts_r+0x88>
 80181ac:	08018f48 	.word	0x08018f48
 80181b0:	08018f68 	.word	0x08018f68
 80181b4:	08018f28 	.word	0x08018f28

080181b8 <puts>:
 80181b8:	4b02      	ldr	r3, [pc, #8]	; (80181c4 <puts+0xc>)
 80181ba:	4601      	mov	r1, r0
 80181bc:	6818      	ldr	r0, [r3, #0]
 80181be:	f7ff bf8d 	b.w	80180dc <_puts_r>
 80181c2:	bf00      	nop
 80181c4:	24000098 	.word	0x24000098

080181c8 <__swbuf_r>:
 80181c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ca:	460e      	mov	r6, r1
 80181cc:	4614      	mov	r4, r2
 80181ce:	4605      	mov	r5, r0
 80181d0:	b118      	cbz	r0, 80181da <__swbuf_r+0x12>
 80181d2:	6983      	ldr	r3, [r0, #24]
 80181d4:	b90b      	cbnz	r3, 80181da <__swbuf_r+0x12>
 80181d6:	f000 f9d1 	bl	801857c <__sinit>
 80181da:	4b21      	ldr	r3, [pc, #132]	; (8018260 <__swbuf_r+0x98>)
 80181dc:	429c      	cmp	r4, r3
 80181de:	d12b      	bne.n	8018238 <__swbuf_r+0x70>
 80181e0:	686c      	ldr	r4, [r5, #4]
 80181e2:	69a3      	ldr	r3, [r4, #24]
 80181e4:	60a3      	str	r3, [r4, #8]
 80181e6:	89a3      	ldrh	r3, [r4, #12]
 80181e8:	071a      	lsls	r2, r3, #28
 80181ea:	d52f      	bpl.n	801824c <__swbuf_r+0x84>
 80181ec:	6923      	ldr	r3, [r4, #16]
 80181ee:	b36b      	cbz	r3, 801824c <__swbuf_r+0x84>
 80181f0:	6923      	ldr	r3, [r4, #16]
 80181f2:	6820      	ldr	r0, [r4, #0]
 80181f4:	1ac0      	subs	r0, r0, r3
 80181f6:	6963      	ldr	r3, [r4, #20]
 80181f8:	b2f6      	uxtb	r6, r6
 80181fa:	4283      	cmp	r3, r0
 80181fc:	4637      	mov	r7, r6
 80181fe:	dc04      	bgt.n	801820a <__swbuf_r+0x42>
 8018200:	4621      	mov	r1, r4
 8018202:	4628      	mov	r0, r5
 8018204:	f000 f926 	bl	8018454 <_fflush_r>
 8018208:	bb30      	cbnz	r0, 8018258 <__swbuf_r+0x90>
 801820a:	68a3      	ldr	r3, [r4, #8]
 801820c:	3b01      	subs	r3, #1
 801820e:	60a3      	str	r3, [r4, #8]
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	1c5a      	adds	r2, r3, #1
 8018214:	6022      	str	r2, [r4, #0]
 8018216:	701e      	strb	r6, [r3, #0]
 8018218:	6963      	ldr	r3, [r4, #20]
 801821a:	3001      	adds	r0, #1
 801821c:	4283      	cmp	r3, r0
 801821e:	d004      	beq.n	801822a <__swbuf_r+0x62>
 8018220:	89a3      	ldrh	r3, [r4, #12]
 8018222:	07db      	lsls	r3, r3, #31
 8018224:	d506      	bpl.n	8018234 <__swbuf_r+0x6c>
 8018226:	2e0a      	cmp	r6, #10
 8018228:	d104      	bne.n	8018234 <__swbuf_r+0x6c>
 801822a:	4621      	mov	r1, r4
 801822c:	4628      	mov	r0, r5
 801822e:	f000 f911 	bl	8018454 <_fflush_r>
 8018232:	b988      	cbnz	r0, 8018258 <__swbuf_r+0x90>
 8018234:	4638      	mov	r0, r7
 8018236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018238:	4b0a      	ldr	r3, [pc, #40]	; (8018264 <__swbuf_r+0x9c>)
 801823a:	429c      	cmp	r4, r3
 801823c:	d101      	bne.n	8018242 <__swbuf_r+0x7a>
 801823e:	68ac      	ldr	r4, [r5, #8]
 8018240:	e7cf      	b.n	80181e2 <__swbuf_r+0x1a>
 8018242:	4b09      	ldr	r3, [pc, #36]	; (8018268 <__swbuf_r+0xa0>)
 8018244:	429c      	cmp	r4, r3
 8018246:	bf08      	it	eq
 8018248:	68ec      	ldreq	r4, [r5, #12]
 801824a:	e7ca      	b.n	80181e2 <__swbuf_r+0x1a>
 801824c:	4621      	mov	r1, r4
 801824e:	4628      	mov	r0, r5
 8018250:	f000 f80c 	bl	801826c <__swsetup_r>
 8018254:	2800      	cmp	r0, #0
 8018256:	d0cb      	beq.n	80181f0 <__swbuf_r+0x28>
 8018258:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801825c:	e7ea      	b.n	8018234 <__swbuf_r+0x6c>
 801825e:	bf00      	nop
 8018260:	08018f48 	.word	0x08018f48
 8018264:	08018f68 	.word	0x08018f68
 8018268:	08018f28 	.word	0x08018f28

0801826c <__swsetup_r>:
 801826c:	4b32      	ldr	r3, [pc, #200]	; (8018338 <__swsetup_r+0xcc>)
 801826e:	b570      	push	{r4, r5, r6, lr}
 8018270:	681d      	ldr	r5, [r3, #0]
 8018272:	4606      	mov	r6, r0
 8018274:	460c      	mov	r4, r1
 8018276:	b125      	cbz	r5, 8018282 <__swsetup_r+0x16>
 8018278:	69ab      	ldr	r3, [r5, #24]
 801827a:	b913      	cbnz	r3, 8018282 <__swsetup_r+0x16>
 801827c:	4628      	mov	r0, r5
 801827e:	f000 f97d 	bl	801857c <__sinit>
 8018282:	4b2e      	ldr	r3, [pc, #184]	; (801833c <__swsetup_r+0xd0>)
 8018284:	429c      	cmp	r4, r3
 8018286:	d10f      	bne.n	80182a8 <__swsetup_r+0x3c>
 8018288:	686c      	ldr	r4, [r5, #4]
 801828a:	89a3      	ldrh	r3, [r4, #12]
 801828c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018290:	0719      	lsls	r1, r3, #28
 8018292:	d42c      	bmi.n	80182ee <__swsetup_r+0x82>
 8018294:	06dd      	lsls	r5, r3, #27
 8018296:	d411      	bmi.n	80182bc <__swsetup_r+0x50>
 8018298:	2309      	movs	r3, #9
 801829a:	6033      	str	r3, [r6, #0]
 801829c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80182a0:	81a3      	strh	r3, [r4, #12]
 80182a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182a6:	e03e      	b.n	8018326 <__swsetup_r+0xba>
 80182a8:	4b25      	ldr	r3, [pc, #148]	; (8018340 <__swsetup_r+0xd4>)
 80182aa:	429c      	cmp	r4, r3
 80182ac:	d101      	bne.n	80182b2 <__swsetup_r+0x46>
 80182ae:	68ac      	ldr	r4, [r5, #8]
 80182b0:	e7eb      	b.n	801828a <__swsetup_r+0x1e>
 80182b2:	4b24      	ldr	r3, [pc, #144]	; (8018344 <__swsetup_r+0xd8>)
 80182b4:	429c      	cmp	r4, r3
 80182b6:	bf08      	it	eq
 80182b8:	68ec      	ldreq	r4, [r5, #12]
 80182ba:	e7e6      	b.n	801828a <__swsetup_r+0x1e>
 80182bc:	0758      	lsls	r0, r3, #29
 80182be:	d512      	bpl.n	80182e6 <__swsetup_r+0x7a>
 80182c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80182c2:	b141      	cbz	r1, 80182d6 <__swsetup_r+0x6a>
 80182c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80182c8:	4299      	cmp	r1, r3
 80182ca:	d002      	beq.n	80182d2 <__swsetup_r+0x66>
 80182cc:	4630      	mov	r0, r6
 80182ce:	f000 fa5b 	bl	8018788 <_free_r>
 80182d2:	2300      	movs	r3, #0
 80182d4:	6363      	str	r3, [r4, #52]	; 0x34
 80182d6:	89a3      	ldrh	r3, [r4, #12]
 80182d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80182dc:	81a3      	strh	r3, [r4, #12]
 80182de:	2300      	movs	r3, #0
 80182e0:	6063      	str	r3, [r4, #4]
 80182e2:	6923      	ldr	r3, [r4, #16]
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	89a3      	ldrh	r3, [r4, #12]
 80182e8:	f043 0308 	orr.w	r3, r3, #8
 80182ec:	81a3      	strh	r3, [r4, #12]
 80182ee:	6923      	ldr	r3, [r4, #16]
 80182f0:	b94b      	cbnz	r3, 8018306 <__swsetup_r+0x9a>
 80182f2:	89a3      	ldrh	r3, [r4, #12]
 80182f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182fc:	d003      	beq.n	8018306 <__swsetup_r+0x9a>
 80182fe:	4621      	mov	r1, r4
 8018300:	4630      	mov	r0, r6
 8018302:	f000 fa01 	bl	8018708 <__smakebuf_r>
 8018306:	89a0      	ldrh	r0, [r4, #12]
 8018308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801830c:	f010 0301 	ands.w	r3, r0, #1
 8018310:	d00a      	beq.n	8018328 <__swsetup_r+0xbc>
 8018312:	2300      	movs	r3, #0
 8018314:	60a3      	str	r3, [r4, #8]
 8018316:	6963      	ldr	r3, [r4, #20]
 8018318:	425b      	negs	r3, r3
 801831a:	61a3      	str	r3, [r4, #24]
 801831c:	6923      	ldr	r3, [r4, #16]
 801831e:	b943      	cbnz	r3, 8018332 <__swsetup_r+0xc6>
 8018320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018324:	d1ba      	bne.n	801829c <__swsetup_r+0x30>
 8018326:	bd70      	pop	{r4, r5, r6, pc}
 8018328:	0781      	lsls	r1, r0, #30
 801832a:	bf58      	it	pl
 801832c:	6963      	ldrpl	r3, [r4, #20]
 801832e:	60a3      	str	r3, [r4, #8]
 8018330:	e7f4      	b.n	801831c <__swsetup_r+0xb0>
 8018332:	2000      	movs	r0, #0
 8018334:	e7f7      	b.n	8018326 <__swsetup_r+0xba>
 8018336:	bf00      	nop
 8018338:	24000098 	.word	0x24000098
 801833c:	08018f48 	.word	0x08018f48
 8018340:	08018f68 	.word	0x08018f68
 8018344:	08018f28 	.word	0x08018f28

08018348 <__sflush_r>:
 8018348:	898a      	ldrh	r2, [r1, #12]
 801834a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834e:	4605      	mov	r5, r0
 8018350:	0710      	lsls	r0, r2, #28
 8018352:	460c      	mov	r4, r1
 8018354:	d458      	bmi.n	8018408 <__sflush_r+0xc0>
 8018356:	684b      	ldr	r3, [r1, #4]
 8018358:	2b00      	cmp	r3, #0
 801835a:	dc05      	bgt.n	8018368 <__sflush_r+0x20>
 801835c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801835e:	2b00      	cmp	r3, #0
 8018360:	dc02      	bgt.n	8018368 <__sflush_r+0x20>
 8018362:	2000      	movs	r0, #0
 8018364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801836a:	2e00      	cmp	r6, #0
 801836c:	d0f9      	beq.n	8018362 <__sflush_r+0x1a>
 801836e:	2300      	movs	r3, #0
 8018370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018374:	682f      	ldr	r7, [r5, #0]
 8018376:	602b      	str	r3, [r5, #0]
 8018378:	d032      	beq.n	80183e0 <__sflush_r+0x98>
 801837a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801837c:	89a3      	ldrh	r3, [r4, #12]
 801837e:	075a      	lsls	r2, r3, #29
 8018380:	d505      	bpl.n	801838e <__sflush_r+0x46>
 8018382:	6863      	ldr	r3, [r4, #4]
 8018384:	1ac0      	subs	r0, r0, r3
 8018386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018388:	b10b      	cbz	r3, 801838e <__sflush_r+0x46>
 801838a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801838c:	1ac0      	subs	r0, r0, r3
 801838e:	2300      	movs	r3, #0
 8018390:	4602      	mov	r2, r0
 8018392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018394:	6a21      	ldr	r1, [r4, #32]
 8018396:	4628      	mov	r0, r5
 8018398:	47b0      	blx	r6
 801839a:	1c43      	adds	r3, r0, #1
 801839c:	89a3      	ldrh	r3, [r4, #12]
 801839e:	d106      	bne.n	80183ae <__sflush_r+0x66>
 80183a0:	6829      	ldr	r1, [r5, #0]
 80183a2:	291d      	cmp	r1, #29
 80183a4:	d82c      	bhi.n	8018400 <__sflush_r+0xb8>
 80183a6:	4a2a      	ldr	r2, [pc, #168]	; (8018450 <__sflush_r+0x108>)
 80183a8:	40ca      	lsrs	r2, r1
 80183aa:	07d6      	lsls	r6, r2, #31
 80183ac:	d528      	bpl.n	8018400 <__sflush_r+0xb8>
 80183ae:	2200      	movs	r2, #0
 80183b0:	6062      	str	r2, [r4, #4]
 80183b2:	04d9      	lsls	r1, r3, #19
 80183b4:	6922      	ldr	r2, [r4, #16]
 80183b6:	6022      	str	r2, [r4, #0]
 80183b8:	d504      	bpl.n	80183c4 <__sflush_r+0x7c>
 80183ba:	1c42      	adds	r2, r0, #1
 80183bc:	d101      	bne.n	80183c2 <__sflush_r+0x7a>
 80183be:	682b      	ldr	r3, [r5, #0]
 80183c0:	b903      	cbnz	r3, 80183c4 <__sflush_r+0x7c>
 80183c2:	6560      	str	r0, [r4, #84]	; 0x54
 80183c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80183c6:	602f      	str	r7, [r5, #0]
 80183c8:	2900      	cmp	r1, #0
 80183ca:	d0ca      	beq.n	8018362 <__sflush_r+0x1a>
 80183cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80183d0:	4299      	cmp	r1, r3
 80183d2:	d002      	beq.n	80183da <__sflush_r+0x92>
 80183d4:	4628      	mov	r0, r5
 80183d6:	f000 f9d7 	bl	8018788 <_free_r>
 80183da:	2000      	movs	r0, #0
 80183dc:	6360      	str	r0, [r4, #52]	; 0x34
 80183de:	e7c1      	b.n	8018364 <__sflush_r+0x1c>
 80183e0:	6a21      	ldr	r1, [r4, #32]
 80183e2:	2301      	movs	r3, #1
 80183e4:	4628      	mov	r0, r5
 80183e6:	47b0      	blx	r6
 80183e8:	1c41      	adds	r1, r0, #1
 80183ea:	d1c7      	bne.n	801837c <__sflush_r+0x34>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d0c4      	beq.n	801837c <__sflush_r+0x34>
 80183f2:	2b1d      	cmp	r3, #29
 80183f4:	d001      	beq.n	80183fa <__sflush_r+0xb2>
 80183f6:	2b16      	cmp	r3, #22
 80183f8:	d101      	bne.n	80183fe <__sflush_r+0xb6>
 80183fa:	602f      	str	r7, [r5, #0]
 80183fc:	e7b1      	b.n	8018362 <__sflush_r+0x1a>
 80183fe:	89a3      	ldrh	r3, [r4, #12]
 8018400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018404:	81a3      	strh	r3, [r4, #12]
 8018406:	e7ad      	b.n	8018364 <__sflush_r+0x1c>
 8018408:	690f      	ldr	r7, [r1, #16]
 801840a:	2f00      	cmp	r7, #0
 801840c:	d0a9      	beq.n	8018362 <__sflush_r+0x1a>
 801840e:	0793      	lsls	r3, r2, #30
 8018410:	680e      	ldr	r6, [r1, #0]
 8018412:	bf08      	it	eq
 8018414:	694b      	ldreq	r3, [r1, #20]
 8018416:	600f      	str	r7, [r1, #0]
 8018418:	bf18      	it	ne
 801841a:	2300      	movne	r3, #0
 801841c:	eba6 0807 	sub.w	r8, r6, r7
 8018420:	608b      	str	r3, [r1, #8]
 8018422:	f1b8 0f00 	cmp.w	r8, #0
 8018426:	dd9c      	ble.n	8018362 <__sflush_r+0x1a>
 8018428:	6a21      	ldr	r1, [r4, #32]
 801842a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801842c:	4643      	mov	r3, r8
 801842e:	463a      	mov	r2, r7
 8018430:	4628      	mov	r0, r5
 8018432:	47b0      	blx	r6
 8018434:	2800      	cmp	r0, #0
 8018436:	dc06      	bgt.n	8018446 <__sflush_r+0xfe>
 8018438:	89a3      	ldrh	r3, [r4, #12]
 801843a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801843e:	81a3      	strh	r3, [r4, #12]
 8018440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018444:	e78e      	b.n	8018364 <__sflush_r+0x1c>
 8018446:	4407      	add	r7, r0
 8018448:	eba8 0800 	sub.w	r8, r8, r0
 801844c:	e7e9      	b.n	8018422 <__sflush_r+0xda>
 801844e:	bf00      	nop
 8018450:	20400001 	.word	0x20400001

08018454 <_fflush_r>:
 8018454:	b538      	push	{r3, r4, r5, lr}
 8018456:	690b      	ldr	r3, [r1, #16]
 8018458:	4605      	mov	r5, r0
 801845a:	460c      	mov	r4, r1
 801845c:	b913      	cbnz	r3, 8018464 <_fflush_r+0x10>
 801845e:	2500      	movs	r5, #0
 8018460:	4628      	mov	r0, r5
 8018462:	bd38      	pop	{r3, r4, r5, pc}
 8018464:	b118      	cbz	r0, 801846e <_fflush_r+0x1a>
 8018466:	6983      	ldr	r3, [r0, #24]
 8018468:	b90b      	cbnz	r3, 801846e <_fflush_r+0x1a>
 801846a:	f000 f887 	bl	801857c <__sinit>
 801846e:	4b14      	ldr	r3, [pc, #80]	; (80184c0 <_fflush_r+0x6c>)
 8018470:	429c      	cmp	r4, r3
 8018472:	d11b      	bne.n	80184ac <_fflush_r+0x58>
 8018474:	686c      	ldr	r4, [r5, #4]
 8018476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d0ef      	beq.n	801845e <_fflush_r+0xa>
 801847e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018480:	07d0      	lsls	r0, r2, #31
 8018482:	d404      	bmi.n	801848e <_fflush_r+0x3a>
 8018484:	0599      	lsls	r1, r3, #22
 8018486:	d402      	bmi.n	801848e <_fflush_r+0x3a>
 8018488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801848a:	f000 f915 	bl	80186b8 <__retarget_lock_acquire_recursive>
 801848e:	4628      	mov	r0, r5
 8018490:	4621      	mov	r1, r4
 8018492:	f7ff ff59 	bl	8018348 <__sflush_r>
 8018496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018498:	07da      	lsls	r2, r3, #31
 801849a:	4605      	mov	r5, r0
 801849c:	d4e0      	bmi.n	8018460 <_fflush_r+0xc>
 801849e:	89a3      	ldrh	r3, [r4, #12]
 80184a0:	059b      	lsls	r3, r3, #22
 80184a2:	d4dd      	bmi.n	8018460 <_fflush_r+0xc>
 80184a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80184a6:	f000 f908 	bl	80186ba <__retarget_lock_release_recursive>
 80184aa:	e7d9      	b.n	8018460 <_fflush_r+0xc>
 80184ac:	4b05      	ldr	r3, [pc, #20]	; (80184c4 <_fflush_r+0x70>)
 80184ae:	429c      	cmp	r4, r3
 80184b0:	d101      	bne.n	80184b6 <_fflush_r+0x62>
 80184b2:	68ac      	ldr	r4, [r5, #8]
 80184b4:	e7df      	b.n	8018476 <_fflush_r+0x22>
 80184b6:	4b04      	ldr	r3, [pc, #16]	; (80184c8 <_fflush_r+0x74>)
 80184b8:	429c      	cmp	r4, r3
 80184ba:	bf08      	it	eq
 80184bc:	68ec      	ldreq	r4, [r5, #12]
 80184be:	e7da      	b.n	8018476 <_fflush_r+0x22>
 80184c0:	08018f48 	.word	0x08018f48
 80184c4:	08018f68 	.word	0x08018f68
 80184c8:	08018f28 	.word	0x08018f28

080184cc <std>:
 80184cc:	2300      	movs	r3, #0
 80184ce:	b510      	push	{r4, lr}
 80184d0:	4604      	mov	r4, r0
 80184d2:	e9c0 3300 	strd	r3, r3, [r0]
 80184d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80184da:	6083      	str	r3, [r0, #8]
 80184dc:	8181      	strh	r1, [r0, #12]
 80184de:	6643      	str	r3, [r0, #100]	; 0x64
 80184e0:	81c2      	strh	r2, [r0, #14]
 80184e2:	6183      	str	r3, [r0, #24]
 80184e4:	4619      	mov	r1, r3
 80184e6:	2208      	movs	r2, #8
 80184e8:	305c      	adds	r0, #92	; 0x5c
 80184ea:	f7ff fdef 	bl	80180cc <memset>
 80184ee:	4b05      	ldr	r3, [pc, #20]	; (8018504 <std+0x38>)
 80184f0:	6263      	str	r3, [r4, #36]	; 0x24
 80184f2:	4b05      	ldr	r3, [pc, #20]	; (8018508 <std+0x3c>)
 80184f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80184f6:	4b05      	ldr	r3, [pc, #20]	; (801850c <std+0x40>)
 80184f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80184fa:	4b05      	ldr	r3, [pc, #20]	; (8018510 <std+0x44>)
 80184fc:	6224      	str	r4, [r4, #32]
 80184fe:	6323      	str	r3, [r4, #48]	; 0x30
 8018500:	bd10      	pop	{r4, pc}
 8018502:	bf00      	nop
 8018504:	08018969 	.word	0x08018969
 8018508:	0801898b 	.word	0x0801898b
 801850c:	080189c3 	.word	0x080189c3
 8018510:	080189e7 	.word	0x080189e7

08018514 <_cleanup_r>:
 8018514:	4901      	ldr	r1, [pc, #4]	; (801851c <_cleanup_r+0x8>)
 8018516:	f000 b8af 	b.w	8018678 <_fwalk_reent>
 801851a:	bf00      	nop
 801851c:	08018455 	.word	0x08018455

08018520 <__sfmoreglue>:
 8018520:	b570      	push	{r4, r5, r6, lr}
 8018522:	2268      	movs	r2, #104	; 0x68
 8018524:	1e4d      	subs	r5, r1, #1
 8018526:	4355      	muls	r5, r2
 8018528:	460e      	mov	r6, r1
 801852a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801852e:	f000 f997 	bl	8018860 <_malloc_r>
 8018532:	4604      	mov	r4, r0
 8018534:	b140      	cbz	r0, 8018548 <__sfmoreglue+0x28>
 8018536:	2100      	movs	r1, #0
 8018538:	e9c0 1600 	strd	r1, r6, [r0]
 801853c:	300c      	adds	r0, #12
 801853e:	60a0      	str	r0, [r4, #8]
 8018540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018544:	f7ff fdc2 	bl	80180cc <memset>
 8018548:	4620      	mov	r0, r4
 801854a:	bd70      	pop	{r4, r5, r6, pc}

0801854c <__sfp_lock_acquire>:
 801854c:	4801      	ldr	r0, [pc, #4]	; (8018554 <__sfp_lock_acquire+0x8>)
 801854e:	f000 b8b3 	b.w	80186b8 <__retarget_lock_acquire_recursive>
 8018552:	bf00      	nop
 8018554:	240068d1 	.word	0x240068d1

08018558 <__sfp_lock_release>:
 8018558:	4801      	ldr	r0, [pc, #4]	; (8018560 <__sfp_lock_release+0x8>)
 801855a:	f000 b8ae 	b.w	80186ba <__retarget_lock_release_recursive>
 801855e:	bf00      	nop
 8018560:	240068d1 	.word	0x240068d1

08018564 <__sinit_lock_acquire>:
 8018564:	4801      	ldr	r0, [pc, #4]	; (801856c <__sinit_lock_acquire+0x8>)
 8018566:	f000 b8a7 	b.w	80186b8 <__retarget_lock_acquire_recursive>
 801856a:	bf00      	nop
 801856c:	240068d2 	.word	0x240068d2

08018570 <__sinit_lock_release>:
 8018570:	4801      	ldr	r0, [pc, #4]	; (8018578 <__sinit_lock_release+0x8>)
 8018572:	f000 b8a2 	b.w	80186ba <__retarget_lock_release_recursive>
 8018576:	bf00      	nop
 8018578:	240068d2 	.word	0x240068d2

0801857c <__sinit>:
 801857c:	b510      	push	{r4, lr}
 801857e:	4604      	mov	r4, r0
 8018580:	f7ff fff0 	bl	8018564 <__sinit_lock_acquire>
 8018584:	69a3      	ldr	r3, [r4, #24]
 8018586:	b11b      	cbz	r3, 8018590 <__sinit+0x14>
 8018588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801858c:	f7ff bff0 	b.w	8018570 <__sinit_lock_release>
 8018590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018594:	6523      	str	r3, [r4, #80]	; 0x50
 8018596:	4b13      	ldr	r3, [pc, #76]	; (80185e4 <__sinit+0x68>)
 8018598:	4a13      	ldr	r2, [pc, #76]	; (80185e8 <__sinit+0x6c>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	62a2      	str	r2, [r4, #40]	; 0x28
 801859e:	42a3      	cmp	r3, r4
 80185a0:	bf04      	itt	eq
 80185a2:	2301      	moveq	r3, #1
 80185a4:	61a3      	streq	r3, [r4, #24]
 80185a6:	4620      	mov	r0, r4
 80185a8:	f000 f820 	bl	80185ec <__sfp>
 80185ac:	6060      	str	r0, [r4, #4]
 80185ae:	4620      	mov	r0, r4
 80185b0:	f000 f81c 	bl	80185ec <__sfp>
 80185b4:	60a0      	str	r0, [r4, #8]
 80185b6:	4620      	mov	r0, r4
 80185b8:	f000 f818 	bl	80185ec <__sfp>
 80185bc:	2200      	movs	r2, #0
 80185be:	60e0      	str	r0, [r4, #12]
 80185c0:	2104      	movs	r1, #4
 80185c2:	6860      	ldr	r0, [r4, #4]
 80185c4:	f7ff ff82 	bl	80184cc <std>
 80185c8:	68a0      	ldr	r0, [r4, #8]
 80185ca:	2201      	movs	r2, #1
 80185cc:	2109      	movs	r1, #9
 80185ce:	f7ff ff7d 	bl	80184cc <std>
 80185d2:	68e0      	ldr	r0, [r4, #12]
 80185d4:	2202      	movs	r2, #2
 80185d6:	2112      	movs	r1, #18
 80185d8:	f7ff ff78 	bl	80184cc <std>
 80185dc:	2301      	movs	r3, #1
 80185de:	61a3      	str	r3, [r4, #24]
 80185e0:	e7d2      	b.n	8018588 <__sinit+0xc>
 80185e2:	bf00      	nop
 80185e4:	08018f24 	.word	0x08018f24
 80185e8:	08018515 	.word	0x08018515

080185ec <__sfp>:
 80185ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185ee:	4607      	mov	r7, r0
 80185f0:	f7ff ffac 	bl	801854c <__sfp_lock_acquire>
 80185f4:	4b1e      	ldr	r3, [pc, #120]	; (8018670 <__sfp+0x84>)
 80185f6:	681e      	ldr	r6, [r3, #0]
 80185f8:	69b3      	ldr	r3, [r6, #24]
 80185fa:	b913      	cbnz	r3, 8018602 <__sfp+0x16>
 80185fc:	4630      	mov	r0, r6
 80185fe:	f7ff ffbd 	bl	801857c <__sinit>
 8018602:	3648      	adds	r6, #72	; 0x48
 8018604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018608:	3b01      	subs	r3, #1
 801860a:	d503      	bpl.n	8018614 <__sfp+0x28>
 801860c:	6833      	ldr	r3, [r6, #0]
 801860e:	b30b      	cbz	r3, 8018654 <__sfp+0x68>
 8018610:	6836      	ldr	r6, [r6, #0]
 8018612:	e7f7      	b.n	8018604 <__sfp+0x18>
 8018614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018618:	b9d5      	cbnz	r5, 8018650 <__sfp+0x64>
 801861a:	4b16      	ldr	r3, [pc, #88]	; (8018674 <__sfp+0x88>)
 801861c:	60e3      	str	r3, [r4, #12]
 801861e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018622:	6665      	str	r5, [r4, #100]	; 0x64
 8018624:	f000 f847 	bl	80186b6 <__retarget_lock_init_recursive>
 8018628:	f7ff ff96 	bl	8018558 <__sfp_lock_release>
 801862c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018634:	6025      	str	r5, [r4, #0]
 8018636:	61a5      	str	r5, [r4, #24]
 8018638:	2208      	movs	r2, #8
 801863a:	4629      	mov	r1, r5
 801863c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018640:	f7ff fd44 	bl	80180cc <memset>
 8018644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801864c:	4620      	mov	r0, r4
 801864e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018650:	3468      	adds	r4, #104	; 0x68
 8018652:	e7d9      	b.n	8018608 <__sfp+0x1c>
 8018654:	2104      	movs	r1, #4
 8018656:	4638      	mov	r0, r7
 8018658:	f7ff ff62 	bl	8018520 <__sfmoreglue>
 801865c:	4604      	mov	r4, r0
 801865e:	6030      	str	r0, [r6, #0]
 8018660:	2800      	cmp	r0, #0
 8018662:	d1d5      	bne.n	8018610 <__sfp+0x24>
 8018664:	f7ff ff78 	bl	8018558 <__sfp_lock_release>
 8018668:	230c      	movs	r3, #12
 801866a:	603b      	str	r3, [r7, #0]
 801866c:	e7ee      	b.n	801864c <__sfp+0x60>
 801866e:	bf00      	nop
 8018670:	08018f24 	.word	0x08018f24
 8018674:	ffff0001 	.word	0xffff0001

08018678 <_fwalk_reent>:
 8018678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801867c:	4606      	mov	r6, r0
 801867e:	4688      	mov	r8, r1
 8018680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018684:	2700      	movs	r7, #0
 8018686:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801868a:	f1b9 0901 	subs.w	r9, r9, #1
 801868e:	d505      	bpl.n	801869c <_fwalk_reent+0x24>
 8018690:	6824      	ldr	r4, [r4, #0]
 8018692:	2c00      	cmp	r4, #0
 8018694:	d1f7      	bne.n	8018686 <_fwalk_reent+0xe>
 8018696:	4638      	mov	r0, r7
 8018698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801869c:	89ab      	ldrh	r3, [r5, #12]
 801869e:	2b01      	cmp	r3, #1
 80186a0:	d907      	bls.n	80186b2 <_fwalk_reent+0x3a>
 80186a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80186a6:	3301      	adds	r3, #1
 80186a8:	d003      	beq.n	80186b2 <_fwalk_reent+0x3a>
 80186aa:	4629      	mov	r1, r5
 80186ac:	4630      	mov	r0, r6
 80186ae:	47c0      	blx	r8
 80186b0:	4307      	orrs	r7, r0
 80186b2:	3568      	adds	r5, #104	; 0x68
 80186b4:	e7e9      	b.n	801868a <_fwalk_reent+0x12>

080186b6 <__retarget_lock_init_recursive>:
 80186b6:	4770      	bx	lr

080186b8 <__retarget_lock_acquire_recursive>:
 80186b8:	4770      	bx	lr

080186ba <__retarget_lock_release_recursive>:
 80186ba:	4770      	bx	lr

080186bc <__swhatbuf_r>:
 80186bc:	b570      	push	{r4, r5, r6, lr}
 80186be:	460e      	mov	r6, r1
 80186c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186c4:	2900      	cmp	r1, #0
 80186c6:	b096      	sub	sp, #88	; 0x58
 80186c8:	4614      	mov	r4, r2
 80186ca:	461d      	mov	r5, r3
 80186cc:	da08      	bge.n	80186e0 <__swhatbuf_r+0x24>
 80186ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80186d2:	2200      	movs	r2, #0
 80186d4:	602a      	str	r2, [r5, #0]
 80186d6:	061a      	lsls	r2, r3, #24
 80186d8:	d410      	bmi.n	80186fc <__swhatbuf_r+0x40>
 80186da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186de:	e00e      	b.n	80186fe <__swhatbuf_r+0x42>
 80186e0:	466a      	mov	r2, sp
 80186e2:	f000 f9a7 	bl	8018a34 <_fstat_r>
 80186e6:	2800      	cmp	r0, #0
 80186e8:	dbf1      	blt.n	80186ce <__swhatbuf_r+0x12>
 80186ea:	9a01      	ldr	r2, [sp, #4]
 80186ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80186f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80186f4:	425a      	negs	r2, r3
 80186f6:	415a      	adcs	r2, r3
 80186f8:	602a      	str	r2, [r5, #0]
 80186fa:	e7ee      	b.n	80186da <__swhatbuf_r+0x1e>
 80186fc:	2340      	movs	r3, #64	; 0x40
 80186fe:	2000      	movs	r0, #0
 8018700:	6023      	str	r3, [r4, #0]
 8018702:	b016      	add	sp, #88	; 0x58
 8018704:	bd70      	pop	{r4, r5, r6, pc}
	...

08018708 <__smakebuf_r>:
 8018708:	898b      	ldrh	r3, [r1, #12]
 801870a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801870c:	079d      	lsls	r5, r3, #30
 801870e:	4606      	mov	r6, r0
 8018710:	460c      	mov	r4, r1
 8018712:	d507      	bpl.n	8018724 <__smakebuf_r+0x1c>
 8018714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018718:	6023      	str	r3, [r4, #0]
 801871a:	6123      	str	r3, [r4, #16]
 801871c:	2301      	movs	r3, #1
 801871e:	6163      	str	r3, [r4, #20]
 8018720:	b002      	add	sp, #8
 8018722:	bd70      	pop	{r4, r5, r6, pc}
 8018724:	ab01      	add	r3, sp, #4
 8018726:	466a      	mov	r2, sp
 8018728:	f7ff ffc8 	bl	80186bc <__swhatbuf_r>
 801872c:	9900      	ldr	r1, [sp, #0]
 801872e:	4605      	mov	r5, r0
 8018730:	4630      	mov	r0, r6
 8018732:	f000 f895 	bl	8018860 <_malloc_r>
 8018736:	b948      	cbnz	r0, 801874c <__smakebuf_r+0x44>
 8018738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801873c:	059a      	lsls	r2, r3, #22
 801873e:	d4ef      	bmi.n	8018720 <__smakebuf_r+0x18>
 8018740:	f023 0303 	bic.w	r3, r3, #3
 8018744:	f043 0302 	orr.w	r3, r3, #2
 8018748:	81a3      	strh	r3, [r4, #12]
 801874a:	e7e3      	b.n	8018714 <__smakebuf_r+0xc>
 801874c:	4b0d      	ldr	r3, [pc, #52]	; (8018784 <__smakebuf_r+0x7c>)
 801874e:	62b3      	str	r3, [r6, #40]	; 0x28
 8018750:	89a3      	ldrh	r3, [r4, #12]
 8018752:	6020      	str	r0, [r4, #0]
 8018754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018758:	81a3      	strh	r3, [r4, #12]
 801875a:	9b00      	ldr	r3, [sp, #0]
 801875c:	6163      	str	r3, [r4, #20]
 801875e:	9b01      	ldr	r3, [sp, #4]
 8018760:	6120      	str	r0, [r4, #16]
 8018762:	b15b      	cbz	r3, 801877c <__smakebuf_r+0x74>
 8018764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018768:	4630      	mov	r0, r6
 801876a:	f000 f975 	bl	8018a58 <_isatty_r>
 801876e:	b128      	cbz	r0, 801877c <__smakebuf_r+0x74>
 8018770:	89a3      	ldrh	r3, [r4, #12]
 8018772:	f023 0303 	bic.w	r3, r3, #3
 8018776:	f043 0301 	orr.w	r3, r3, #1
 801877a:	81a3      	strh	r3, [r4, #12]
 801877c:	89a0      	ldrh	r0, [r4, #12]
 801877e:	4305      	orrs	r5, r0
 8018780:	81a5      	strh	r5, [r4, #12]
 8018782:	e7cd      	b.n	8018720 <__smakebuf_r+0x18>
 8018784:	08018515 	.word	0x08018515

08018788 <_free_r>:
 8018788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801878a:	2900      	cmp	r1, #0
 801878c:	d044      	beq.n	8018818 <_free_r+0x90>
 801878e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018792:	9001      	str	r0, [sp, #4]
 8018794:	2b00      	cmp	r3, #0
 8018796:	f1a1 0404 	sub.w	r4, r1, #4
 801879a:	bfb8      	it	lt
 801879c:	18e4      	addlt	r4, r4, r3
 801879e:	f000 f97d 	bl	8018a9c <__malloc_lock>
 80187a2:	4a1e      	ldr	r2, [pc, #120]	; (801881c <_free_r+0x94>)
 80187a4:	9801      	ldr	r0, [sp, #4]
 80187a6:	6813      	ldr	r3, [r2, #0]
 80187a8:	b933      	cbnz	r3, 80187b8 <_free_r+0x30>
 80187aa:	6063      	str	r3, [r4, #4]
 80187ac:	6014      	str	r4, [r2, #0]
 80187ae:	b003      	add	sp, #12
 80187b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187b4:	f000 b978 	b.w	8018aa8 <__malloc_unlock>
 80187b8:	42a3      	cmp	r3, r4
 80187ba:	d908      	bls.n	80187ce <_free_r+0x46>
 80187bc:	6825      	ldr	r5, [r4, #0]
 80187be:	1961      	adds	r1, r4, r5
 80187c0:	428b      	cmp	r3, r1
 80187c2:	bf01      	itttt	eq
 80187c4:	6819      	ldreq	r1, [r3, #0]
 80187c6:	685b      	ldreq	r3, [r3, #4]
 80187c8:	1949      	addeq	r1, r1, r5
 80187ca:	6021      	streq	r1, [r4, #0]
 80187cc:	e7ed      	b.n	80187aa <_free_r+0x22>
 80187ce:	461a      	mov	r2, r3
 80187d0:	685b      	ldr	r3, [r3, #4]
 80187d2:	b10b      	cbz	r3, 80187d8 <_free_r+0x50>
 80187d4:	42a3      	cmp	r3, r4
 80187d6:	d9fa      	bls.n	80187ce <_free_r+0x46>
 80187d8:	6811      	ldr	r1, [r2, #0]
 80187da:	1855      	adds	r5, r2, r1
 80187dc:	42a5      	cmp	r5, r4
 80187de:	d10b      	bne.n	80187f8 <_free_r+0x70>
 80187e0:	6824      	ldr	r4, [r4, #0]
 80187e2:	4421      	add	r1, r4
 80187e4:	1854      	adds	r4, r2, r1
 80187e6:	42a3      	cmp	r3, r4
 80187e8:	6011      	str	r1, [r2, #0]
 80187ea:	d1e0      	bne.n	80187ae <_free_r+0x26>
 80187ec:	681c      	ldr	r4, [r3, #0]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	6053      	str	r3, [r2, #4]
 80187f2:	4421      	add	r1, r4
 80187f4:	6011      	str	r1, [r2, #0]
 80187f6:	e7da      	b.n	80187ae <_free_r+0x26>
 80187f8:	d902      	bls.n	8018800 <_free_r+0x78>
 80187fa:	230c      	movs	r3, #12
 80187fc:	6003      	str	r3, [r0, #0]
 80187fe:	e7d6      	b.n	80187ae <_free_r+0x26>
 8018800:	6825      	ldr	r5, [r4, #0]
 8018802:	1961      	adds	r1, r4, r5
 8018804:	428b      	cmp	r3, r1
 8018806:	bf04      	itt	eq
 8018808:	6819      	ldreq	r1, [r3, #0]
 801880a:	685b      	ldreq	r3, [r3, #4]
 801880c:	6063      	str	r3, [r4, #4]
 801880e:	bf04      	itt	eq
 8018810:	1949      	addeq	r1, r1, r5
 8018812:	6021      	streq	r1, [r4, #0]
 8018814:	6054      	str	r4, [r2, #4]
 8018816:	e7ca      	b.n	80187ae <_free_r+0x26>
 8018818:	b003      	add	sp, #12
 801881a:	bd30      	pop	{r4, r5, pc}
 801881c:	240068d4 	.word	0x240068d4

08018820 <sbrk_aligned>:
 8018820:	b570      	push	{r4, r5, r6, lr}
 8018822:	4e0e      	ldr	r6, [pc, #56]	; (801885c <sbrk_aligned+0x3c>)
 8018824:	460c      	mov	r4, r1
 8018826:	6831      	ldr	r1, [r6, #0]
 8018828:	4605      	mov	r5, r0
 801882a:	b911      	cbnz	r1, 8018832 <sbrk_aligned+0x12>
 801882c:	f000 f88c 	bl	8018948 <_sbrk_r>
 8018830:	6030      	str	r0, [r6, #0]
 8018832:	4621      	mov	r1, r4
 8018834:	4628      	mov	r0, r5
 8018836:	f000 f887 	bl	8018948 <_sbrk_r>
 801883a:	1c43      	adds	r3, r0, #1
 801883c:	d00a      	beq.n	8018854 <sbrk_aligned+0x34>
 801883e:	1cc4      	adds	r4, r0, #3
 8018840:	f024 0403 	bic.w	r4, r4, #3
 8018844:	42a0      	cmp	r0, r4
 8018846:	d007      	beq.n	8018858 <sbrk_aligned+0x38>
 8018848:	1a21      	subs	r1, r4, r0
 801884a:	4628      	mov	r0, r5
 801884c:	f000 f87c 	bl	8018948 <_sbrk_r>
 8018850:	3001      	adds	r0, #1
 8018852:	d101      	bne.n	8018858 <sbrk_aligned+0x38>
 8018854:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018858:	4620      	mov	r0, r4
 801885a:	bd70      	pop	{r4, r5, r6, pc}
 801885c:	240068d8 	.word	0x240068d8

08018860 <_malloc_r>:
 8018860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018864:	1ccd      	adds	r5, r1, #3
 8018866:	f025 0503 	bic.w	r5, r5, #3
 801886a:	3508      	adds	r5, #8
 801886c:	2d0c      	cmp	r5, #12
 801886e:	bf38      	it	cc
 8018870:	250c      	movcc	r5, #12
 8018872:	2d00      	cmp	r5, #0
 8018874:	4607      	mov	r7, r0
 8018876:	db01      	blt.n	801887c <_malloc_r+0x1c>
 8018878:	42a9      	cmp	r1, r5
 801887a:	d905      	bls.n	8018888 <_malloc_r+0x28>
 801887c:	230c      	movs	r3, #12
 801887e:	603b      	str	r3, [r7, #0]
 8018880:	2600      	movs	r6, #0
 8018882:	4630      	mov	r0, r6
 8018884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018888:	4e2e      	ldr	r6, [pc, #184]	; (8018944 <_malloc_r+0xe4>)
 801888a:	f000 f907 	bl	8018a9c <__malloc_lock>
 801888e:	6833      	ldr	r3, [r6, #0]
 8018890:	461c      	mov	r4, r3
 8018892:	bb34      	cbnz	r4, 80188e2 <_malloc_r+0x82>
 8018894:	4629      	mov	r1, r5
 8018896:	4638      	mov	r0, r7
 8018898:	f7ff ffc2 	bl	8018820 <sbrk_aligned>
 801889c:	1c43      	adds	r3, r0, #1
 801889e:	4604      	mov	r4, r0
 80188a0:	d14d      	bne.n	801893e <_malloc_r+0xde>
 80188a2:	6834      	ldr	r4, [r6, #0]
 80188a4:	4626      	mov	r6, r4
 80188a6:	2e00      	cmp	r6, #0
 80188a8:	d140      	bne.n	801892c <_malloc_r+0xcc>
 80188aa:	6823      	ldr	r3, [r4, #0]
 80188ac:	4631      	mov	r1, r6
 80188ae:	4638      	mov	r0, r7
 80188b0:	eb04 0803 	add.w	r8, r4, r3
 80188b4:	f000 f848 	bl	8018948 <_sbrk_r>
 80188b8:	4580      	cmp	r8, r0
 80188ba:	d13a      	bne.n	8018932 <_malloc_r+0xd2>
 80188bc:	6821      	ldr	r1, [r4, #0]
 80188be:	3503      	adds	r5, #3
 80188c0:	1a6d      	subs	r5, r5, r1
 80188c2:	f025 0503 	bic.w	r5, r5, #3
 80188c6:	3508      	adds	r5, #8
 80188c8:	2d0c      	cmp	r5, #12
 80188ca:	bf38      	it	cc
 80188cc:	250c      	movcc	r5, #12
 80188ce:	4629      	mov	r1, r5
 80188d0:	4638      	mov	r0, r7
 80188d2:	f7ff ffa5 	bl	8018820 <sbrk_aligned>
 80188d6:	3001      	adds	r0, #1
 80188d8:	d02b      	beq.n	8018932 <_malloc_r+0xd2>
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	442b      	add	r3, r5
 80188de:	6023      	str	r3, [r4, #0]
 80188e0:	e00e      	b.n	8018900 <_malloc_r+0xa0>
 80188e2:	6822      	ldr	r2, [r4, #0]
 80188e4:	1b52      	subs	r2, r2, r5
 80188e6:	d41e      	bmi.n	8018926 <_malloc_r+0xc6>
 80188e8:	2a0b      	cmp	r2, #11
 80188ea:	d916      	bls.n	801891a <_malloc_r+0xba>
 80188ec:	1961      	adds	r1, r4, r5
 80188ee:	42a3      	cmp	r3, r4
 80188f0:	6025      	str	r5, [r4, #0]
 80188f2:	bf18      	it	ne
 80188f4:	6059      	strne	r1, [r3, #4]
 80188f6:	6863      	ldr	r3, [r4, #4]
 80188f8:	bf08      	it	eq
 80188fa:	6031      	streq	r1, [r6, #0]
 80188fc:	5162      	str	r2, [r4, r5]
 80188fe:	604b      	str	r3, [r1, #4]
 8018900:	4638      	mov	r0, r7
 8018902:	f104 060b 	add.w	r6, r4, #11
 8018906:	f000 f8cf 	bl	8018aa8 <__malloc_unlock>
 801890a:	f026 0607 	bic.w	r6, r6, #7
 801890e:	1d23      	adds	r3, r4, #4
 8018910:	1af2      	subs	r2, r6, r3
 8018912:	d0b6      	beq.n	8018882 <_malloc_r+0x22>
 8018914:	1b9b      	subs	r3, r3, r6
 8018916:	50a3      	str	r3, [r4, r2]
 8018918:	e7b3      	b.n	8018882 <_malloc_r+0x22>
 801891a:	6862      	ldr	r2, [r4, #4]
 801891c:	42a3      	cmp	r3, r4
 801891e:	bf0c      	ite	eq
 8018920:	6032      	streq	r2, [r6, #0]
 8018922:	605a      	strne	r2, [r3, #4]
 8018924:	e7ec      	b.n	8018900 <_malloc_r+0xa0>
 8018926:	4623      	mov	r3, r4
 8018928:	6864      	ldr	r4, [r4, #4]
 801892a:	e7b2      	b.n	8018892 <_malloc_r+0x32>
 801892c:	4634      	mov	r4, r6
 801892e:	6876      	ldr	r6, [r6, #4]
 8018930:	e7b9      	b.n	80188a6 <_malloc_r+0x46>
 8018932:	230c      	movs	r3, #12
 8018934:	603b      	str	r3, [r7, #0]
 8018936:	4638      	mov	r0, r7
 8018938:	f000 f8b6 	bl	8018aa8 <__malloc_unlock>
 801893c:	e7a1      	b.n	8018882 <_malloc_r+0x22>
 801893e:	6025      	str	r5, [r4, #0]
 8018940:	e7de      	b.n	8018900 <_malloc_r+0xa0>
 8018942:	bf00      	nop
 8018944:	240068d4 	.word	0x240068d4

08018948 <_sbrk_r>:
 8018948:	b538      	push	{r3, r4, r5, lr}
 801894a:	4d06      	ldr	r5, [pc, #24]	; (8018964 <_sbrk_r+0x1c>)
 801894c:	2300      	movs	r3, #0
 801894e:	4604      	mov	r4, r0
 8018950:	4608      	mov	r0, r1
 8018952:	602b      	str	r3, [r5, #0]
 8018954:	f7ea fcf0 	bl	8003338 <_sbrk>
 8018958:	1c43      	adds	r3, r0, #1
 801895a:	d102      	bne.n	8018962 <_sbrk_r+0x1a>
 801895c:	682b      	ldr	r3, [r5, #0]
 801895e:	b103      	cbz	r3, 8018962 <_sbrk_r+0x1a>
 8018960:	6023      	str	r3, [r4, #0]
 8018962:	bd38      	pop	{r3, r4, r5, pc}
 8018964:	240068dc 	.word	0x240068dc

08018968 <__sread>:
 8018968:	b510      	push	{r4, lr}
 801896a:	460c      	mov	r4, r1
 801896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018970:	f000 f8a0 	bl	8018ab4 <_read_r>
 8018974:	2800      	cmp	r0, #0
 8018976:	bfab      	itete	ge
 8018978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801897a:	89a3      	ldrhlt	r3, [r4, #12]
 801897c:	181b      	addge	r3, r3, r0
 801897e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018982:	bfac      	ite	ge
 8018984:	6563      	strge	r3, [r4, #84]	; 0x54
 8018986:	81a3      	strhlt	r3, [r4, #12]
 8018988:	bd10      	pop	{r4, pc}

0801898a <__swrite>:
 801898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801898e:	461f      	mov	r7, r3
 8018990:	898b      	ldrh	r3, [r1, #12]
 8018992:	05db      	lsls	r3, r3, #23
 8018994:	4605      	mov	r5, r0
 8018996:	460c      	mov	r4, r1
 8018998:	4616      	mov	r6, r2
 801899a:	d505      	bpl.n	80189a8 <__swrite+0x1e>
 801899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189a0:	2302      	movs	r3, #2
 80189a2:	2200      	movs	r2, #0
 80189a4:	f000 f868 	bl	8018a78 <_lseek_r>
 80189a8:	89a3      	ldrh	r3, [r4, #12]
 80189aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189b2:	81a3      	strh	r3, [r4, #12]
 80189b4:	4632      	mov	r2, r6
 80189b6:	463b      	mov	r3, r7
 80189b8:	4628      	mov	r0, r5
 80189ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189be:	f000 b817 	b.w	80189f0 <_write_r>

080189c2 <__sseek>:
 80189c2:	b510      	push	{r4, lr}
 80189c4:	460c      	mov	r4, r1
 80189c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ca:	f000 f855 	bl	8018a78 <_lseek_r>
 80189ce:	1c43      	adds	r3, r0, #1
 80189d0:	89a3      	ldrh	r3, [r4, #12]
 80189d2:	bf15      	itete	ne
 80189d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80189d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80189da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80189de:	81a3      	strheq	r3, [r4, #12]
 80189e0:	bf18      	it	ne
 80189e2:	81a3      	strhne	r3, [r4, #12]
 80189e4:	bd10      	pop	{r4, pc}

080189e6 <__sclose>:
 80189e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ea:	f000 b813 	b.w	8018a14 <_close_r>
	...

080189f0 <_write_r>:
 80189f0:	b538      	push	{r3, r4, r5, lr}
 80189f2:	4d07      	ldr	r5, [pc, #28]	; (8018a10 <_write_r+0x20>)
 80189f4:	4604      	mov	r4, r0
 80189f6:	4608      	mov	r0, r1
 80189f8:	4611      	mov	r1, r2
 80189fa:	2200      	movs	r2, #0
 80189fc:	602a      	str	r2, [r5, #0]
 80189fe:	461a      	mov	r2, r3
 8018a00:	f7ea fc49 	bl	8003296 <_write>
 8018a04:	1c43      	adds	r3, r0, #1
 8018a06:	d102      	bne.n	8018a0e <_write_r+0x1e>
 8018a08:	682b      	ldr	r3, [r5, #0]
 8018a0a:	b103      	cbz	r3, 8018a0e <_write_r+0x1e>
 8018a0c:	6023      	str	r3, [r4, #0]
 8018a0e:	bd38      	pop	{r3, r4, r5, pc}
 8018a10:	240068dc 	.word	0x240068dc

08018a14 <_close_r>:
 8018a14:	b538      	push	{r3, r4, r5, lr}
 8018a16:	4d06      	ldr	r5, [pc, #24]	; (8018a30 <_close_r+0x1c>)
 8018a18:	2300      	movs	r3, #0
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	4608      	mov	r0, r1
 8018a1e:	602b      	str	r3, [r5, #0]
 8018a20:	f7ea fc55 	bl	80032ce <_close>
 8018a24:	1c43      	adds	r3, r0, #1
 8018a26:	d102      	bne.n	8018a2e <_close_r+0x1a>
 8018a28:	682b      	ldr	r3, [r5, #0]
 8018a2a:	b103      	cbz	r3, 8018a2e <_close_r+0x1a>
 8018a2c:	6023      	str	r3, [r4, #0]
 8018a2e:	bd38      	pop	{r3, r4, r5, pc}
 8018a30:	240068dc 	.word	0x240068dc

08018a34 <_fstat_r>:
 8018a34:	b538      	push	{r3, r4, r5, lr}
 8018a36:	4d07      	ldr	r5, [pc, #28]	; (8018a54 <_fstat_r+0x20>)
 8018a38:	2300      	movs	r3, #0
 8018a3a:	4604      	mov	r4, r0
 8018a3c:	4608      	mov	r0, r1
 8018a3e:	4611      	mov	r1, r2
 8018a40:	602b      	str	r3, [r5, #0]
 8018a42:	f7ea fc50 	bl	80032e6 <_fstat>
 8018a46:	1c43      	adds	r3, r0, #1
 8018a48:	d102      	bne.n	8018a50 <_fstat_r+0x1c>
 8018a4a:	682b      	ldr	r3, [r5, #0]
 8018a4c:	b103      	cbz	r3, 8018a50 <_fstat_r+0x1c>
 8018a4e:	6023      	str	r3, [r4, #0]
 8018a50:	bd38      	pop	{r3, r4, r5, pc}
 8018a52:	bf00      	nop
 8018a54:	240068dc 	.word	0x240068dc

08018a58 <_isatty_r>:
 8018a58:	b538      	push	{r3, r4, r5, lr}
 8018a5a:	4d06      	ldr	r5, [pc, #24]	; (8018a74 <_isatty_r+0x1c>)
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	4604      	mov	r4, r0
 8018a60:	4608      	mov	r0, r1
 8018a62:	602b      	str	r3, [r5, #0]
 8018a64:	f7ea fc4f 	bl	8003306 <_isatty>
 8018a68:	1c43      	adds	r3, r0, #1
 8018a6a:	d102      	bne.n	8018a72 <_isatty_r+0x1a>
 8018a6c:	682b      	ldr	r3, [r5, #0]
 8018a6e:	b103      	cbz	r3, 8018a72 <_isatty_r+0x1a>
 8018a70:	6023      	str	r3, [r4, #0]
 8018a72:	bd38      	pop	{r3, r4, r5, pc}
 8018a74:	240068dc 	.word	0x240068dc

08018a78 <_lseek_r>:
 8018a78:	b538      	push	{r3, r4, r5, lr}
 8018a7a:	4d07      	ldr	r5, [pc, #28]	; (8018a98 <_lseek_r+0x20>)
 8018a7c:	4604      	mov	r4, r0
 8018a7e:	4608      	mov	r0, r1
 8018a80:	4611      	mov	r1, r2
 8018a82:	2200      	movs	r2, #0
 8018a84:	602a      	str	r2, [r5, #0]
 8018a86:	461a      	mov	r2, r3
 8018a88:	f7ea fc48 	bl	800331c <_lseek>
 8018a8c:	1c43      	adds	r3, r0, #1
 8018a8e:	d102      	bne.n	8018a96 <_lseek_r+0x1e>
 8018a90:	682b      	ldr	r3, [r5, #0]
 8018a92:	b103      	cbz	r3, 8018a96 <_lseek_r+0x1e>
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	bd38      	pop	{r3, r4, r5, pc}
 8018a98:	240068dc 	.word	0x240068dc

08018a9c <__malloc_lock>:
 8018a9c:	4801      	ldr	r0, [pc, #4]	; (8018aa4 <__malloc_lock+0x8>)
 8018a9e:	f7ff be0b 	b.w	80186b8 <__retarget_lock_acquire_recursive>
 8018aa2:	bf00      	nop
 8018aa4:	240068d0 	.word	0x240068d0

08018aa8 <__malloc_unlock>:
 8018aa8:	4801      	ldr	r0, [pc, #4]	; (8018ab0 <__malloc_unlock+0x8>)
 8018aaa:	f7ff be06 	b.w	80186ba <__retarget_lock_release_recursive>
 8018aae:	bf00      	nop
 8018ab0:	240068d0 	.word	0x240068d0

08018ab4 <_read_r>:
 8018ab4:	b538      	push	{r3, r4, r5, lr}
 8018ab6:	4d07      	ldr	r5, [pc, #28]	; (8018ad4 <_read_r+0x20>)
 8018ab8:	4604      	mov	r4, r0
 8018aba:	4608      	mov	r0, r1
 8018abc:	4611      	mov	r1, r2
 8018abe:	2200      	movs	r2, #0
 8018ac0:	602a      	str	r2, [r5, #0]
 8018ac2:	461a      	mov	r2, r3
 8018ac4:	f7ea fbca 	bl	800325c <_read>
 8018ac8:	1c43      	adds	r3, r0, #1
 8018aca:	d102      	bne.n	8018ad2 <_read_r+0x1e>
 8018acc:	682b      	ldr	r3, [r5, #0]
 8018ace:	b103      	cbz	r3, 8018ad2 <_read_r+0x1e>
 8018ad0:	6023      	str	r3, [r4, #0]
 8018ad2:	bd38      	pop	{r3, r4, r5, pc}
 8018ad4:	240068dc 	.word	0x240068dc

08018ad8 <_init>:
 8018ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ada:	bf00      	nop
 8018adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ade:	bc08      	pop	{r3}
 8018ae0:	469e      	mov	lr, r3
 8018ae2:	4770      	bx	lr

08018ae4 <_fini>:
 8018ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ae6:	bf00      	nop
 8018ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aea:	bc08      	pop	{r3}
 8018aec:	469e      	mov	lr, r3
 8018aee:	4770      	bx	lr
